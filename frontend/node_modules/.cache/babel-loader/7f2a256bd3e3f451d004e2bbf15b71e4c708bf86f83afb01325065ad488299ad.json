{"ast":null,"code":"import { formatUnits } from 'viem';\nexport const ERC7811Utils = {\n  /**\n   * Creates a Balance object from an ERC7811 Asset object\n   * @param asset - Asset object to convert\n   * @param chainId - Chain ID in CAIP-2 format\n   * @returns Balance object\n   */\n  createBalance(asset, chainId) {\n    const metadata = {\n      name: asset.metadata['name'] || '',\n      symbol: asset.metadata['symbol'] || '',\n      decimals: asset.metadata['decimals'] || 0,\n      value: asset.metadata['value'] || 0,\n      price: asset.metadata['price'] || 0,\n      iconUrl: asset.metadata['iconUrl'] || ''\n    };\n    return {\n      name: metadata.name,\n      symbol: metadata.symbol,\n      chainId,\n      address: asset.address === 'native' ? undefined : this.convertAddressToCAIP10Address(asset.address, chainId),\n      value: metadata.value,\n      price: metadata.price,\n      quantity: {\n        decimals: metadata.decimals.toString(),\n        numeric: this.convertHexToBalance({\n          hex: asset.balance,\n          decimals: metadata.decimals\n        })\n      },\n      iconUrl: metadata.iconUrl\n    };\n  },\n  /**\n   * Converts a hex string to a Balance object\n   * @param hex - Hex string to convert\n   * @param decimals - Number of decimals to use\n   * @returns Balance object\n   */\n  convertHexToBalance({\n    hex,\n    decimals\n  }) {\n    return formatUnits(BigInt(hex), decimals);\n  },\n  /**\n   * Converts an address to a CAIP-10 address\n   * @param address - Address to convert\n   * @param chainId - Chain ID in CAIP-2 format\n   * @returns CAIP-10 address\n   */\n  convertAddressToCAIP10Address(address, chainId) {\n    return `${chainId}:${address}`;\n  },\n  /**\n   *  Creates a CAIP-2 Chain ID from a chain ID and namespace\n   * @param chainId  - Chain ID in hex format\n   * @param namespace  - Chain namespace\n   * @returns\n   */\n  createCAIP2ChainId(chainId, namespace) {\n    return `${namespace}:${parseInt(chainId, 16)}`;\n  },\n  /**\n   * Gets the chain ID in hex format from a CAIP-2 Chain ID\n   * @param caip2ChainId - CAIP-2 Chain ID\n   * @returns Chain ID in hex format\n   */\n  getChainIdHexFromCAIP2ChainId(caip2ChainId) {\n    const parts = caip2ChainId.split(':');\n    if (parts.length < 2 || !parts[1]) {\n      return '0x0';\n    }\n    const chainPart = parts[1];\n    const parsed = parseInt(chainPart, 10);\n    return isNaN(parsed) ? '0x0' : `0x${parsed.toString(16)}`;\n  },\n  /**\n   * Checks if a response is a valid WalletGetAssetsResponse\n   * @param response - The response to check\n   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise\n   */\n  isWalletGetAssetsResponse(response) {\n    // Check if response is an object and has the expected structure\n    if (typeof response !== 'object' || response === null) {\n      return false;\n    }\n    // Check if all values are arrays and conform to the expected asset structure\n    return Object.values(response).every(value => Array.isArray(value) && value.every(asset => this.isValidAsset(asset)));\n  },\n  /**\n   * Checks if an asset object is valid.\n   * @param asset - The asset object to check.\n   * @returns True if the asset is valid, false otherwise.\n   */\n  isValidAsset(asset) {\n    return typeof asset === 'object' && asset !== null && typeof asset.address === 'string' && typeof asset.balance === 'string' && (asset.type === 'ERC20' || asset.type === 'NATIVE') && typeof asset.metadata === 'object' && asset.metadata !== null && typeof asset.metadata['name'] === 'string' && typeof asset.metadata['symbol'] === 'string' && typeof asset.metadata['decimals'] === 'number' && typeof asset.metadata['price'] === 'number' && typeof asset.metadata['iconUrl'] === 'string';\n  }\n};","map":{"version":3,"names":["formatUnits","ERC7811Utils","createBalance","asset","chainId","metadata","name","symbol","decimals","value","price","iconUrl","address","undefined","convertAddressToCAIP10Address","quantity","toString","numeric","convertHexToBalance","hex","balance","BigInt","createCAIP2ChainId","namespace","parseInt","getChainIdHexFromCAIP2ChainId","caip2ChainId","parts","split","length","chainPart","parsed","isNaN","isWalletGetAssetsResponse","response","Object","values","every","Array","isArray","isValidAsset","type"],"sources":["../../../../src/utils/ERC7811Util.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}