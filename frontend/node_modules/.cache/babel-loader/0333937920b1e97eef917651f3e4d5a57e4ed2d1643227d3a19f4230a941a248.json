{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { internal_estimateFeesPerGas } from '../../actions/public/estimateFeesPerGas.js';\nimport { estimateGas } from '../../actions/public/estimateGas.js';\nimport { getBlock as getBlock_ } from '../../actions/public/getBlock.js';\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js';\nimport { Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError } from '../../errors/fee.js';\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js';\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js';\nimport { getChainId as getChainId_ } from '../public/getChainId.js';\nexport const defaultParameters = ['blobVersionedHashes', 'chainId', 'fees', 'gas', 'nonce', 'type'];\n/** @internal */\nexport const eip1559NetworkCache = /*#__PURE__*/new Map();\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest(client, args) {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    gas,\n    kzg,\n    nonce,\n    nonceManager,\n    parameters = defaultParameters,\n    type\n  } = args;\n  const account = account_ ? parseAccount(account_) : account_;\n  const request = {\n    ...args,\n    ...(account ? {\n      from: account?.address\n    } : {})\n  };\n  let block;\n  async function getBlock() {\n    if (block) return block;\n    block = await getAction(client, getBlock_, 'getBlock')({\n      blockTag: 'latest'\n    });\n    return block;\n  }\n  let chainId;\n  async function getChainId() {\n    if (chainId) return chainId;\n    if (chain) return chain.id;\n    if (typeof args.chainId !== 'undefined') return args.chainId;\n    const chainId_ = await getAction(client, getChainId_, 'getChainId')({});\n    chainId = chainId_;\n    return chainId;\n  }\n  if ((parameters.includes('blobVersionedHashes') || parameters.includes('sidecars')) && blobs && kzg) {\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg\n    });\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = commitmentsToVersionedHashes({\n        commitments,\n        to: 'hex'\n      });\n      request.blobVersionedHashes = versionedHashes;\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = blobsToProofs({\n        blobs,\n        commitments,\n        kzg\n      });\n      const sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex'\n      });\n      request.sidecars = sidecars;\n    }\n  }\n  if (parameters.includes('chainId')) request.chainId = await getChainId();\n  if ((parameters.includes('fees') || parameters.includes('type')) && typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(request);\n    } catch {\n      let isEip1559Network = eip1559NetworkCache.get(client.uid);\n      if (typeof isEip1559Network === 'undefined') {\n        const block = await getBlock();\n        isEip1559Network = typeof block?.baseFeePerGas === 'bigint';\n        eip1559NetworkCache.set(client.uid, isEip1559Network);\n      }\n      request.type = isEip1559Network ? 'eip1559' : 'legacy';\n    }\n  }\n  if (parameters.includes('fees')) {\n    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n    if (request.type !== 'legacy' && request.type !== 'eip2930') {\n      // EIP-1559 fees\n      if (typeof request.maxFeePerGas === 'undefined' || typeof request.maxPriorityFeePerGas === 'undefined') {\n        const block = await getBlock();\n        const {\n          maxFeePerGas,\n          maxPriorityFeePerGas\n        } = await internal_estimateFeesPerGas(client, {\n          block: block,\n          chain,\n          request: request\n        });\n        if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new MaxFeePerGasTooLowError({\n          maxPriorityFeePerGas\n        });\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n        request.maxFeePerGas = maxFeePerGas;\n      }\n    } else {\n      // Legacy fees\n      if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new Eip1559FeesNotSupportedError();\n      if (typeof args.gasPrice === 'undefined') {\n        const block = await getBlock();\n        const {\n          gasPrice: gasPrice_\n        } = await internal_estimateFeesPerGas(client, {\n          block: block,\n          chain,\n          request: request,\n          type: 'legacy'\n        });\n        request.gasPrice = gasPrice_;\n      }\n    }\n  }\n  if (parameters.includes('gas') && typeof gas === 'undefined') request.gas = await getAction(client, estimateGas, 'estimateGas')({\n    ...request,\n    account: account ? {\n      address: account.address,\n      type: 'json-rpc'\n    } : account\n  });\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {\n    if (nonceManager) {\n      const chainId = await getChainId();\n      request.nonce = await nonceManager.consume({\n        address: account.address,\n        chainId,\n        client\n      });\n    } else {\n      request.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({\n        address: account.address,\n        blockTag: 'pending'\n      });\n    }\n  }\n  assertRequest(request);\n  delete request.parameters;\n  return request;\n}\n//# sourceMappingURL=prepareTransactionRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}