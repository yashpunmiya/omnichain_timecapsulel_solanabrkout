{"ast":null,"code":"import { ApiController, ConnectorController, CoreHelperUtil, OptionsController, StorageUtil } from '@reown/appkit-controllers';\nimport { ConnectorUtil } from './ConnectorUtil.js';\nimport { ConstantsUtil } from './ConstantsUtil.js';\nexport const WalletUtil = {\n  filterOutDuplicatesByRDNS(wallets) {\n    const connectors = OptionsController.state.enableEIP6963 ? ConnectorController.state.connectors : [];\n    const recent = StorageUtil.getRecentWallets();\n    const connectorRDNSs = connectors.map(connector => connector.info?.rdns).filter(Boolean);\n    const recentRDNSs = recent.map(wallet => wallet.rdns).filter(Boolean);\n    const allRDNSs = connectorRDNSs.concat(recentRDNSs);\n    if (allRDNSs.includes('io.metamask.mobile') && CoreHelperUtil.isMobile()) {\n      const index = allRDNSs.indexOf('io.metamask.mobile');\n      allRDNSs[index] = 'io.metamask';\n    }\n    const filtered = wallets.filter(wallet => !allRDNSs.includes(String(wallet?.rdns)));\n    return filtered;\n  },\n  filterOutDuplicatesByIds(wallets) {\n    const connectors = ConnectorController.state.connectors.filter(connector => connector.type === 'ANNOUNCED' || connector.type === 'INJECTED');\n    const recent = StorageUtil.getRecentWallets();\n    const connectorIds = connectors.map(connector => connector.explorerId);\n    const recentIds = recent.map(wallet => wallet.id);\n    const allIds = connectorIds.concat(recentIds);\n    const filtered = wallets.filter(wallet => !allIds.includes(wallet?.id));\n    return filtered;\n  },\n  filterOutDuplicateWallets(wallets) {\n    const uniqueByRDNS = this.filterOutDuplicatesByRDNS(wallets);\n    const uniqueWallets = this.filterOutDuplicatesByIds(uniqueByRDNS);\n    return uniqueWallets;\n  },\n  markWalletsAsInstalled(wallets) {\n    const {\n      connectors\n    } = ConnectorController.state;\n    const installedConnectors = connectors.filter(c => c.type === 'ANNOUNCED').reduce((acum, val) => {\n      if (!val.info?.rdns) {\n        return acum;\n      }\n      acum[val.info.rdns] = true;\n      return acum;\n    }, {});\n    const walletsWithInstalled = wallets.map(wallet => ({\n      ...wallet,\n      installed: Boolean(wallet.rdns) && Boolean(installedConnectors[wallet.rdns ?? ''])\n    }));\n    const sortedWallets = walletsWithInstalled.sort((a, b) => Number(b.installed) - Number(a.installed));\n    return sortedWallets;\n  },\n  getConnectOrderMethod(_features, _connectors) {\n    const connectMethodOrder = _features?.connectMethodsOrder || OptionsController.state.features?.connectMethodsOrder;\n    const connectors = _connectors || ConnectorController.state.connectors;\n    if (connectMethodOrder) {\n      return connectMethodOrder;\n    }\n    const {\n      injected,\n      announced\n    } = ConnectorUtil.getConnectorsByType(connectors, ApiController.state.recommended, ApiController.state.featured);\n    const shownInjected = injected.filter(ConnectorUtil.showConnector);\n    const shownAnnounced = announced.filter(ConnectorUtil.showConnector);\n    if (shownInjected.length || shownAnnounced.length) {\n      return ['wallet', 'email', 'social'];\n    }\n    return ConstantsUtil.DEFAULT_CONNECT_METHOD_ORDER;\n  }\n};\n//# sourceMappingURL=WalletUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}