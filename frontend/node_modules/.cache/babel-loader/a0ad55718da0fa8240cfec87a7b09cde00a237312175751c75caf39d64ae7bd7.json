{"ast":null,"code":"import { Address } from './address.js';\nimport { bigIntToHex, bytesToHex, toBytes } from './bytes.js';\nimport { BIGINT_0 } from './constants.js';\nimport { TypeOutput, toType } from './types.js';\n/**\n * Representation of EIP-4895 withdrawal data\n */\nexport class Withdrawal {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n   * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n   */\n  constructor(index, validatorIndex, address,\n  /**\n   * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n   */\n  amount) {\n    this.index = index;\n    this.validatorIndex = validatorIndex;\n    this.address = address;\n    this.amount = amount;\n  }\n  static fromWithdrawalData(withdrawalData) {\n    const {\n      index: indexData,\n      validatorIndex: validatorIndexData,\n      address: addressData,\n      amount: amountData\n    } = withdrawalData;\n    const index = toType(indexData, TypeOutput.BigInt);\n    const validatorIndex = toType(validatorIndexData, TypeOutput.BigInt);\n    const address = addressData instanceof Address ? addressData : new Address(toBytes(addressData));\n    const amount = toType(amountData, TypeOutput.BigInt);\n    return new Withdrawal(index, validatorIndex, address, amount);\n  }\n  static fromValuesArray(withdrawalArray) {\n    if (withdrawalArray.length !== 4) {\n      throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n    }\n    const [index, validatorIndex, address, amount] = withdrawalArray;\n    return Withdrawal.fromWithdrawalData({\n      index,\n      validatorIndex,\n      address,\n      amount\n    });\n  }\n  /**\n   * Convert a withdrawal to a buffer array\n   * @param withdrawal the withdrawal to convert\n   * @returns buffer array of the withdrawal\n   */\n  static toBytesArray(withdrawal) {\n    const {\n      index,\n      validatorIndex,\n      address,\n      amount\n    } = withdrawal;\n    const indexBytes = toType(index, TypeOutput.BigInt) === BIGINT_0 ? new Uint8Array() : toType(index, TypeOutput.Uint8Array);\n    const validatorIndexBytes = toType(validatorIndex, TypeOutput.BigInt) === BIGINT_0 ? new Uint8Array() : toType(validatorIndex, TypeOutput.Uint8Array);\n    const addressBytes = address instanceof Address ? address.bytes : toType(address, TypeOutput.Uint8Array);\n    const amountBytes = toType(amount, TypeOutput.BigInt) === BIGINT_0 ? new Uint8Array() : toType(amount, TypeOutput.Uint8Array);\n    return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];\n  }\n  raw() {\n    return Withdrawal.toBytesArray(this);\n  }\n  toValue() {\n    return {\n      index: this.index,\n      validatorIndex: this.validatorIndex,\n      address: this.address.bytes,\n      amount: this.amount\n    };\n  }\n  toJSON() {\n    return {\n      index: bigIntToHex(this.index),\n      validatorIndex: bigIntToHex(this.validatorIndex),\n      address: bytesToHex(this.address.bytes),\n      amount: bigIntToHex(this.amount)\n    };\n  }\n}\n//# sourceMappingURL=withdrawal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}