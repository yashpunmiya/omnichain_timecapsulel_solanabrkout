{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Intrinsic = Intrinsic;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../template-literal/index\");\nconst intrinsic_from_mapped_key_1 = require(\"./intrinsic-from-mapped-key\");\nconst index_2 = require(\"../literal/index\");\nconst index_3 = require(\"../union/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// ------------------------------------------------------------------\n// Apply\n// ------------------------------------------------------------------\nfunction ApplyUncapitalize(value) {\n  const [first, rest] = [value.slice(0, 1), value.slice(1)];\n  return [first.toLowerCase(), rest].join('');\n}\nfunction ApplyCapitalize(value) {\n  const [first, rest] = [value.slice(0, 1), value.slice(1)];\n  return [first.toUpperCase(), rest].join('');\n}\nfunction ApplyUppercase(value) {\n  return value.toUpperCase();\n}\nfunction ApplyLowercase(value) {\n  return value.toLowerCase();\n}\nfunction FromTemplateLiteral(schema, mode, options) {\n  // note: template literals require special runtime handling as they are encoded in string patterns.\n  // This diverges from the mapped type which would otherwise map on the template literal kind.\n  const expression = (0, index_1.TemplateLiteralParseExact)(schema.pattern);\n  const finite = (0, index_1.IsTemplateLiteralExpressionFinite)(expression);\n  if (!finite) return {\n    ...schema,\n    pattern: FromLiteralValue(schema.pattern, mode)\n  };\n  const strings = [...(0, index_1.TemplateLiteralExpressionGenerate)(expression)];\n  const literals = strings.map(value => (0, index_2.Literal)(value));\n  const mapped = FromRest(literals, mode);\n  const union = (0, index_3.Union)(mapped);\n  return (0, index_1.TemplateLiteral)([union], options);\n}\n// prettier-ignore\nfunction FromLiteralValue(value, mode) {\n  return typeof value === 'string' ? mode === 'Uncapitalize' ? ApplyUncapitalize(value) : mode === 'Capitalize' ? ApplyCapitalize(value) : mode === 'Uppercase' ? ApplyUppercase(value) : mode === 'Lowercase' ? ApplyLowercase(value) : value : value.toString();\n}\n// prettier-ignore\nfunction FromRest(T, M) {\n  return T.map(L => Intrinsic(L, M));\n}\n/** Applies an intrinsic string manipulation to the given type. */\nfunction Intrinsic(schema, mode, options = {}) {\n  // prettier-ignore\n  return (\n    // Intrinsic-Mapped-Inference\n    (0, kind_1.IsMappedKey)(schema) ? (0, intrinsic_from_mapped_key_1.IntrinsicFromMappedKey)(schema, mode, options) :\n    // Standard-Inference\n    (0, kind_1.IsTemplateLiteral)(schema) ? FromTemplateLiteral(schema, mode, options) : (0, kind_1.IsUnion)(schema) ? (0, index_3.Union)(FromRest(schema.anyOf, mode), options) : (0, kind_1.IsLiteral)(schema) ? (0, index_2.Literal)(FromLiteralValue(schema.const, mode), options) :\n    // Default Type\n    (0, type_1.CreateType)(schema, options)\n  );\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Intrinsic","type_1","require","index_1","intrinsic_from_mapped_key_1","index_2","index_3","kind_1","ApplyUncapitalize","first","rest","slice","toLowerCase","join","ApplyCapitalize","toUpperCase","ApplyUppercase","ApplyLowercase","FromTemplateLiteral","schema","mode","options","expression","TemplateLiteralParseExact","pattern","finite","IsTemplateLiteralExpressionFinite","FromLiteralValue","strings","TemplateLiteralExpressionGenerate","literals","map","Literal","mapped","FromRest","union","Union","TemplateLiteral","toString","T","M","L","IsMappedKey","IntrinsicFromMappedKey","IsTemplateLiteral","IsUnion","anyOf","IsLiteral","const","CreateType"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@sinclair/typebox/build/cjs/type/intrinsic/intrinsic.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Intrinsic = Intrinsic;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../template-literal/index\");\nconst intrinsic_from_mapped_key_1 = require(\"./intrinsic-from-mapped-key\");\nconst index_2 = require(\"../literal/index\");\nconst index_3 = require(\"../union/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// ------------------------------------------------------------------\n// Apply\n// ------------------------------------------------------------------\nfunction ApplyUncapitalize(value) {\n    const [first, rest] = [value.slice(0, 1), value.slice(1)];\n    return [first.toLowerCase(), rest].join('');\n}\nfunction ApplyCapitalize(value) {\n    const [first, rest] = [value.slice(0, 1), value.slice(1)];\n    return [first.toUpperCase(), rest].join('');\n}\nfunction ApplyUppercase(value) {\n    return value.toUpperCase();\n}\nfunction ApplyLowercase(value) {\n    return value.toLowerCase();\n}\nfunction FromTemplateLiteral(schema, mode, options) {\n    // note: template literals require special runtime handling as they are encoded in string patterns.\n    // This diverges from the mapped type which would otherwise map on the template literal kind.\n    const expression = (0, index_1.TemplateLiteralParseExact)(schema.pattern);\n    const finite = (0, index_1.IsTemplateLiteralExpressionFinite)(expression);\n    if (!finite)\n        return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };\n    const strings = [...(0, index_1.TemplateLiteralExpressionGenerate)(expression)];\n    const literals = strings.map((value) => (0, index_2.Literal)(value));\n    const mapped = FromRest(literals, mode);\n    const union = (0, index_3.Union)(mapped);\n    return (0, index_1.TemplateLiteral)([union], options);\n}\n// prettier-ignore\nfunction FromLiteralValue(value, mode) {\n    return (typeof value === 'string' ? (mode === 'Uncapitalize' ? ApplyUncapitalize(value) :\n        mode === 'Capitalize' ? ApplyCapitalize(value) :\n            mode === 'Uppercase' ? ApplyUppercase(value) :\n                mode === 'Lowercase' ? ApplyLowercase(value) :\n                    value) : value.toString());\n}\n// prettier-ignore\nfunction FromRest(T, M) {\n    return T.map(L => Intrinsic(L, M));\n}\n/** Applies an intrinsic string manipulation to the given type. */\nfunction Intrinsic(schema, mode, options = {}) {\n    // prettier-ignore\n    return (\n    // Intrinsic-Mapped-Inference\n    (0, kind_1.IsMappedKey)(schema) ? (0, intrinsic_from_mapped_key_1.IntrinsicFromMappedKey)(schema, mode, options) :\n        // Standard-Inference\n        (0, kind_1.IsTemplateLiteral)(schema) ? FromTemplateLiteral(schema, mode, options) :\n            (0, kind_1.IsUnion)(schema) ? (0, index_3.Union)(FromRest(schema.anyOf, mode), options) :\n                (0, kind_1.IsLiteral)(schema) ? (0, index_2.Literal)(FromLiteralValue(schema.const, mode), options) :\n                    // Default Type\n                    (0, type_1.CreateType)(schema, options));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}