{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoOutput = void 0;\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\nconst lib_1 = require(\"./lib\");\nconst MultiKey_1 = require(\"./MultiKey\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\nclass CryptoOutput extends RegistryItem_1.RegistryItem {\n  constructor(scriptExpressions, cryptoKey) {\n    super();\n    this.scriptExpressions = scriptExpressions;\n    this.cryptoKey = cryptoKey;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_OUTPUT;\n    };\n    this.getCryptoKey = () => this.cryptoKey;\n    this.getHDKey = () => {\n      if (this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n    this.getECKey = () => {\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n    this.getMultiKey = () => {\n      if (this.cryptoKey instanceof MultiKey_1.MultiKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n    this.getScriptExpressions = () => this.scriptExpressions;\n    this._toOutputDescriptor = seIndex => {\n      if (seIndex >= this.scriptExpressions.length) {\n        return this.cryptoKey.getOutputDescriptorContent();\n      } else {\n        return `${this.scriptExpressions[seIndex].getExpression()}(${this._toOutputDescriptor(seIndex + 1)})`;\n      }\n    };\n    this.toString = () => {\n      return this._toOutputDescriptor(0);\n    };\n    this.toDataItem = () => {\n      let dataItem = this.cryptoKey.toDataItem();\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey || this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        dataItem.setTag(this.cryptoKey.getRegistryType().getTag());\n      }\n      const clonedSe = [...this.scriptExpressions];\n      clonedSe.reverse().forEach(se => {\n        const tagValue = se.getTag();\n        if (dataItem.getTag() === undefined) {\n          dataItem.setTag(tagValue);\n        } else {\n          dataItem = new lib_1.DataItem(dataItem, tagValue);\n        }\n      });\n      return dataItem;\n    };\n  }\n}\nexports.CryptoOutput = CryptoOutput;\nCryptoOutput.fromDataItem = dataItem => {\n  const scriptExpressions = [];\n  let _dataItem = dataItem;\n  while (true) {\n    let _tag = _dataItem.getTag();\n    const se = ScriptExpression_1.ScriptExpression.fromTag(_tag);\n    if (se) {\n      scriptExpressions.push(se);\n      if (_dataItem.getData() instanceof lib_1.DataItem) {\n        _dataItem = _dataItem.getData();\n        _tag = _dataItem.getTag();\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  const seLength = scriptExpressions.length;\n  const isMultiKey = seLength > 0 && (scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.MULTISIG.getExpression() || scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.SORTED_MULTISIG.getExpression());\n  if (isMultiKey) {\n    const multiKey = MultiKey_1.MultiKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, multiKey);\n  }\n  if (_dataItem.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n    const cryptoHDKey = CryptoHDKey_1.CryptoHDKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoHDKey);\n  } else {\n    const cryptoECKey = CryptoECKey_1.CryptoECKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoECKey);\n  }\n};\nCryptoOutput.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoOutput.fromDataItem(dataItem);\n};","map":{"version":3,"names":["CryptoECKey_1","require","CryptoHDKey_1","lib_1","MultiKey_1","RegistryItem_1","RegistryType_1","ScriptExpression_1","CryptoOutput","RegistryItem","constructor","scriptExpressions","cryptoKey","getRegistryType","RegistryTypes","CRYPTO_OUTPUT","getCryptoKey","getHDKey","CryptoHDKey","undefined","getECKey","CryptoECKey","getMultiKey","MultiKey","getScriptExpressions","_toOutputDescriptor","seIndex","length","getOutputDescriptorContent","getExpression","toString","toDataItem","dataItem","setTag","getTag","clonedSe","reverse","forEach","se","tagValue","DataItem","exports","fromDataItem","_dataItem","_tag","ScriptExpression","fromTag","push","getData","seLength","isMultiKey","ScriptExpressions","MULTISIG","SORTED_MULTISIG","multiKey","CRYPTO_HDKEY","cryptoHDKey","cryptoECKey","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry-sol\\node_modules\\@keystonehq\\bc-ur-registry\\src\\CryptoOutput.ts"],"sourcesContent":["import { CryptoECKey } from './CryptoECKey';\nimport { CryptoHDKey } from './CryptoHDKey';\nimport { decodeToDataItem, DataItem } from './lib';\nimport { MultiKey } from './MultiKey';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\nimport { ScriptExpression, ScriptExpressions } from './ScriptExpression';\n\nexport class CryptoOutput extends RegistryItem {\n  public getRegistryType = () => {\n    return RegistryTypes.CRYPTO_OUTPUT;\n  };\n\n  constructor(\n    private scriptExpressions: ScriptExpression[],\n    private cryptoKey: CryptoHDKey | CryptoECKey | MultiKey,\n  ) {\n    super();\n  }\n\n  public getCryptoKey = () => this.cryptoKey;\n  public getHDKey = () => {\n    if (this.cryptoKey instanceof CryptoHDKey) {\n      return this.cryptoKey as CryptoHDKey;\n    } else {\n      return undefined;\n    }\n  };\n  public getECKey = () => {\n    if (this.cryptoKey instanceof CryptoECKey) {\n      return this.cryptoKey as CryptoECKey;\n    } else {\n      return undefined;\n    }\n  };\n\n  public getMultiKey = () => {\n    if (this.cryptoKey instanceof MultiKey) {\n      return this.cryptoKey as MultiKey;\n    } else {\n      return undefined;\n    }\n  };\n\n  public getScriptExpressions = () => this.scriptExpressions;\n\n  private _toOutputDescriptor = (seIndex: number): string => {\n    if (seIndex >= this.scriptExpressions.length) {\n      return this.cryptoKey.getOutputDescriptorContent();\n    } else {\n      return `${this.scriptExpressions[seIndex].getExpression()}(${this._toOutputDescriptor(seIndex + 1)})`;\n    }\n  };\n\n  public override toString = () => {\n    return this._toOutputDescriptor(0);\n  };\n\n  toDataItem = () => {\n    let dataItem = this.cryptoKey.toDataItem();\n    if (\n      this.cryptoKey instanceof CryptoECKey ||\n      this.cryptoKey instanceof CryptoHDKey\n    ) {\n      dataItem.setTag(this.cryptoKey.getRegistryType().getTag());\n    }\n\n    const clonedSe = [...this.scriptExpressions];\n\n    clonedSe.reverse().forEach((se) => {\n      const tagValue = se.getTag();\n      if (dataItem.getTag() === undefined) {\n        dataItem.setTag(tagValue);\n      } else {\n        dataItem = new DataItem(dataItem, tagValue);\n      }\n    });\n\n    return dataItem;\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const scriptExpressions: ScriptExpression[] = [];\n    let _dataItem = dataItem;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let _tag = _dataItem.getTag();\n      const se = ScriptExpression.fromTag(_tag as number);\n      if (se) {\n        scriptExpressions.push(se);\n        if (_dataItem.getData() instanceof DataItem) {\n          _dataItem = _dataItem.getData();\n          _tag = _dataItem.getTag();\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    const seLength = scriptExpressions.length;\n    const isMultiKey =\n      seLength > 0 &&\n      (scriptExpressions[seLength - 1].getExpression() ===\n        ScriptExpressions.MULTISIG.getExpression() ||\n        scriptExpressions[seLength - 1].getExpression() ===\n        ScriptExpressions.SORTED_MULTISIG.getExpression());\n    //TODO: judge is multi key by scriptExpressions\n    if (isMultiKey) {\n      const multiKey = MultiKey.fromDataItem(_dataItem);\n      return new CryptoOutput(scriptExpressions, multiKey);\n    }\n\n    if (_dataItem.getTag() === RegistryTypes.CRYPTO_HDKEY.getTag()) {\n      const cryptoHDKey = CryptoHDKey.fromDataItem(_dataItem);\n      return new CryptoOutput(scriptExpressions, cryptoHDKey);\n    } else {\n      const cryptoECKey = CryptoECKey.fromDataItem(_dataItem);\n      return new CryptoOutput(scriptExpressions, cryptoECKey);\n    }\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoOutput.fromDataItem(dataItem);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}