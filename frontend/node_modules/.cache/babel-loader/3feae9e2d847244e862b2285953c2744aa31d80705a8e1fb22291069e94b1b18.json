{"ast":null,"code":"'use strict';\n\nconst ANY = Symbol('SemVer ANY');\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY() {\n    return ANY;\n  }\n  constructor(comp, options) {\n    options = parseOptions(options);\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp;\n      } else {\n        comp = comp.value;\n      }\n    }\n    comp = comp.trim().split(/\\s+/).join(' ');\n    debug('comparator', comp, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    this.parse(comp);\n    if (this.semver === ANY) {\n      this.value = '';\n    } else {\n      this.value = this.operator + this.semver.version;\n    }\n    debug('comp', this);\n  }\n  parse(comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n    const m = comp.match(r);\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`);\n    }\n    this.operator = m[1] !== undefined ? m[1] : '';\n    if (this.operator === '=') {\n      this.operator = '';\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY;\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose);\n    }\n  }\n  toString() {\n    return this.value;\n  }\n  test(version) {\n    debug('Comparator.test', version, this.options.loose);\n    if (this.semver === ANY || version === ANY) {\n      return true;\n    }\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options);\n      } catch (er) {\n        return false;\n      }\n    }\n    return cmp(version, this.operator, this.semver, this.options);\n  }\n  intersects(comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required');\n    }\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true;\n      }\n      return new Range(comp.value, options).test(this.value);\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true;\n      }\n      return new Range(this.value, options).test(comp.semver);\n    }\n    options = parseOptions(options);\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease && (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false;\n    }\n    if (!options.includePrerelease && (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false;\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true;\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true;\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (this.semver.version === comp.semver.version && this.operator.includes('=') && comp.operator.includes('=')) {\n      return true;\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) && this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true;\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) && this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true;\n    }\n    return false;\n  }\n}\nmodule.exports = Comparator;\nconst parseOptions = require('../internal/parse-options');\nconst {\n  safeRe: re,\n  t\n} = require('../internal/re');\nconst cmp = require('../functions/cmp');\nconst debug = require('../internal/debug');\nconst SemVer = require('./semver');\nconst Range = require('./range');","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}