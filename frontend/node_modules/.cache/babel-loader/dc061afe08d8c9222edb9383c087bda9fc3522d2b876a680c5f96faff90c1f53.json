{"ast":null,"code":"import { InvalidAddressError } from '../errors/address.js';\nimport { isAddress } from '../utils/address/isAddress.js';\nimport { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js';\nexport function serializeTransaction(transaction, signature) {\n  if (isDeposit(transaction)) return serializeTransactionDeposit(transaction);\n  return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n  transaction: serializeTransaction\n};\nfunction serializeTransactionDeposit(transaction) {\n  assertTransactionDeposit(transaction);\n  const {\n    sourceHash,\n    data,\n    from,\n    gas,\n    isSystemTx,\n    mint,\n    to,\n    value\n  } = transaction;\n  const serializedTransaction = [sourceHash, from, to ?? '0x', mint ? toHex(mint) : '0x', value ? toHex(value) : '0x', gas ? toHex(gas) : '0x', isSystemTx ? '0x1' : '0x', data ?? '0x'];\n  return concatHex(['0x7e', toRlp(serializedTransaction)]);\n}\nfunction isDeposit(transaction) {\n  if (transaction.type === 'deposit') return true;\n  if (typeof transaction.sourceHash !== 'undefined') return true;\n  return false;\n}\nexport function assertTransactionDeposit(transaction) {\n  const {\n    from,\n    to\n  } = transaction;\n  if (from && !isAddress(from)) throw new InvalidAddressError({\n    address: from\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n}","map":{"version":3,"names":["InvalidAddressError","isAddress","concatHex","toHex","toRlp","serializeTransaction","serializeTransaction_","transaction","signature","isDeposit","serializeTransactionDeposit","serializers","assertTransactionDeposit","sourceHash","data","from","gas","isSystemTx","mint","to","value","serializedTransaction","type","address"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\op-stack\\serializers.ts"],"sourcesContent":["import { InvalidAddressError } from '../errors/address.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Hex, Signature } from '../types/misc.js'\nimport type { TransactionSerializable } from '../types/transaction.js'\nimport type { RequiredBy } from '../types/utils.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport {\n  type SerializeTransactionErrorType as SerializeTransactionErrorType_,\n  serializeTransaction as serializeTransaction_,\n} from '../utils/transaction/serializeTransaction.js'\nimport type {\n  OpStackTransactionSerializable,\n  TransactionSerializableDeposit,\n  TransactionSerializedDeposit,\n} from './types/transaction.js'\n\nexport type SerializeTransactionReturnType = ReturnType<\n  typeof serializeTransaction\n>\n\nexport type SerializeTransactionErrorType =\n  | SerializeTransactionErrorType_\n  | ErrorType\n\nexport function serializeTransaction(\n  transaction: OpStackTransactionSerializable,\n  signature?: Signature,\n) {\n  if (isDeposit(transaction)) return serializeTransactionDeposit(transaction)\n  return serializeTransaction_(\n    transaction as TransactionSerializable,\n    signature,\n  )\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionDepositReturnType = TransactionSerializedDeposit\n\nfunction serializeTransactionDeposit(\n  transaction: TransactionSerializableDeposit,\n): SerializeTransactionDepositReturnType {\n  assertTransactionDeposit(transaction)\n\n  const { sourceHash, data, from, gas, isSystemTx, mint, to, value } =\n    transaction\n\n  const serializedTransaction: Hex[] = [\n    sourceHash,\n    from,\n    to ?? '0x',\n    mint ? toHex(mint) : '0x',\n    value ? toHex(value) : '0x',\n    gas ? toHex(gas) : '0x',\n    isSystemTx ? '0x1' : '0x',\n    data ?? '0x',\n  ]\n\n  return concatHex([\n    '0x7e',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionDepositReturnType\n}\n\nfunction isDeposit(\n  transaction: OpStackTransactionSerializable,\n): transaction is RequiredBy<TransactionSerializableDeposit, 'type'> {\n  if (transaction.type === 'deposit') return true\n  if (typeof transaction.sourceHash !== 'undefined') return true\n  return false\n}\n\nexport function assertTransactionDeposit(\n  transaction: TransactionSerializableDeposit,\n) {\n  const { from, to } = transaction\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,sBAAsB;AAM1D,SAASC,SAAS,QAAQ,+BAA+B;AACzD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAEEC,oBAAoB,IAAIC,qBAAqB,QACxC,8CAA8C;AAerD,OAAM,SAAUD,oBAAoBA,CAClCE,WAA2C,EAC3CC,SAAqB;EAErB,IAAIC,SAAS,CAACF,WAAW,CAAC,EAAE,OAAOG,2BAA2B,CAACH,WAAW,CAAC;EAC3E,OAAOD,qBAAqB,CAC1BC,WAAsC,EACtCC,SAAS,CACV;AACH;AAEA,OAAO,MAAMG,WAAW,GAAG;EACzBJ,WAAW,EAAEF;CACsB;AAOrC,SAASK,2BAA2BA,CAClCH,WAA2C;EAE3CK,wBAAwB,CAACL,WAAW,CAAC;EAErC,MAAM;IAAEM,UAAU;IAAEC,IAAI;IAAEC,IAAI;IAAEC,GAAG;IAAEC,UAAU;IAAEC,IAAI;IAAEC,EAAE;IAAEC;EAAK,CAAE,GAChEb,WAAW;EAEb,MAAMc,qBAAqB,GAAU,CACnCR,UAAU,EACVE,IAAI,EACJI,EAAE,IAAI,IAAI,EACVD,IAAI,GAAGf,KAAK,CAACe,IAAI,CAAC,GAAG,IAAI,EACzBE,KAAK,GAAGjB,KAAK,CAACiB,KAAK,CAAC,GAAG,IAAI,EAC3BJ,GAAG,GAAGb,KAAK,CAACa,GAAG,CAAC,GAAG,IAAI,EACvBC,UAAU,GAAG,KAAK,GAAG,IAAI,EACzBH,IAAI,IAAI,IAAI,CACb;EAED,OAAOZ,SAAS,CAAC,CACf,MAAM,EACNE,KAAK,CAACiB,qBAAqB,CAAC,CAC7B,CAA0C;AAC7C;AAEA,SAASZ,SAASA,CAChBF,WAA2C;EAE3C,IAAIA,WAAW,CAACe,IAAI,KAAK,SAAS,EAAE,OAAO,IAAI;EAC/C,IAAI,OAAOf,WAAW,CAACM,UAAU,KAAK,WAAW,EAAE,OAAO,IAAI;EAC9D,OAAO,KAAK;AACd;AAEA,OAAM,SAAUD,wBAAwBA,CACtCL,WAA2C;EAE3C,MAAM;IAAEQ,IAAI;IAAEI;EAAE,CAAE,GAAGZ,WAAW;EAChC,IAAIQ,IAAI,IAAI,CAACd,SAAS,CAACc,IAAI,CAAC,EAAE,MAAM,IAAIf,mBAAmB,CAAC;IAAEuB,OAAO,EAAER;EAAI,CAAE,CAAC;EAC9E,IAAII,EAAE,IAAI,CAAClB,SAAS,CAACkB,EAAE,CAAC,EAAE,MAAM,IAAInB,mBAAmB,CAAC;IAAEuB,OAAO,EAAEJ;EAAE,CAAE,CAAC;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}