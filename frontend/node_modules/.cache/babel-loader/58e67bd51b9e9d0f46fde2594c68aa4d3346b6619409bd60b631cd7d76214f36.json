{"ast":null,"code":"import { RpcRequestError } from '../../errors/request.js';\nimport { UrlRequiredError } from '../../errors/transport.js';\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js';\nimport { getHttpRpcClient } from '../../utils/rpc/http.js';\nimport { createTransport } from './createTransport.js';\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\nurl, config = {}) {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay\n  } = config;\n  return ({\n    chain,\n    retryCount: retryCount_,\n    timeout: timeout_\n  }) => {\n    const {\n      batchSize = 1000,\n      wait = 0\n    } = typeof batch === 'object' ? batch : {};\n    const retryCount = config.retryCount ?? retryCount_;\n    const timeout = timeout_ ?? config.timeout ?? 10_000;\n    const url_ = url || chain?.rpcUrls.default.http[0];\n    if (!url_) throw new UrlRequiredError();\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout\n    });\n    return createTransport({\n      key,\n      methods,\n      name,\n      async request({\n        method,\n        params\n      }) {\n        const body = {\n          method,\n          params\n        };\n        const {\n          schedule\n        } = createBatchScheduler({\n          id: url_,\n          wait,\n          shouldSplitBatch(requests) {\n            return requests.length > batchSize;\n          },\n          fn: body => rpcClient.request({\n            body\n          }),\n          sort: (a, b) => a.id - b.id\n        });\n        const fn = async body => batch ? schedule(body) : [await rpcClient.request({\n          body\n        })];\n        const [{\n          error,\n          result\n        }] = await fn(body);\n        if (error) throw new RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'http'\n    }, {\n      fetchOptions,\n      url: url_\n    });\n  };\n}","map":{"version":3,"names":["RpcRequestError","UrlRequiredError","createBatchScheduler","getHttpRpcClient","createTransport","http","url","config","batch","fetchOptions","key","methods","name","onFetchRequest","onFetchResponse","retryDelay","chain","retryCount","retryCount_","timeout","timeout_","batchSize","wait","url_","rpcUrls","default","rpcClient","onRequest","onResponse","request","method","params","body","schedule","id","shouldSplitBatch","requests","length","fn","sort","a","b","error","result","type"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\clients\\transports\\http.ts"],"sourcesContent":["import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport {\n  type HttpRpcClientOptions,\n  getHttpRpcClient,\n} from '../../utils/rpc/http.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\nexport type HttpTransportConfig = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?:\n    | boolean\n    | {\n        /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n        batchSize?: number | undefined\n        /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n        wait?: number | undefined\n      }\n    | undefined\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchRequest?: HttpRpcClientOptions['onRequest'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchResponse?: HttpRpcClientOptions['onResponse'] | undefined\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type HttpTransport = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions'] | undefined\n    url?: string | undefined\n  }\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string | undefined,\n  config: HttpTransportConfig = {},\n): HttpTransport {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout,\n    })\n\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: url_,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpcClient.request({\n                body,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [\n                  await rpcClient.request({\n                    body,\n                  }),\n                ]\n\n          const [{ error, result }] = await fn(body)\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url: url_,\n      },\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,yBAAyB;AACzD,SACEC,gBAAgB,QAEX,2BAA2B;AAGlC,SAASC,oBAAoB,QAAQ,6CAA6C;AAClF,SAEEC,gBAAgB,QACX,yBAAyB;AAEhC,SAIEC,eAAe,QACV,sBAAsB;AAoD7B;;;AAGA,OAAM,SAAUC,IAAIA,CAClB;AACAC,GAAwB,EACxBC,MAAA,GAA8B,EAAE;EAEhC,MAAM;IACJC,KAAK;IACLC,YAAY;IACZC,GAAG,GAAG,MAAM;IACZC,OAAO;IACPC,IAAI,GAAG,eAAe;IACtBC,cAAc;IACdC,eAAe;IACfC;EAAU,CACX,GAAGR,MAAM;EACV,OAAO,CAAC;IAAES,KAAK;IAAEC,UAAU,EAAEC,WAAW;IAAEC,OAAO,EAAEC;EAAQ,CAAE,KAAI;IAC/D,MAAM;MAAEC,SAAS,GAAG,IAAI;MAAEC,IAAI,GAAG;IAAC,CAAE,GAClC,OAAOd,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,EAAE;IACxC,MAAMS,UAAU,GAAGV,MAAM,CAACU,UAAU,IAAIC,WAAW;IACnD,MAAMC,OAAO,GAAGC,QAAQ,IAAIb,MAAM,CAACY,OAAO,IAAI,MAAM;IACpD,MAAMI,IAAI,GAAGjB,GAAG,IAAIU,KAAK,EAAEQ,OAAO,CAACC,OAAO,CAACpB,IAAI,CAAC,CAAC,CAAC;IAClD,IAAI,CAACkB,IAAI,EAAE,MAAM,IAAItB,gBAAgB,EAAE;IAEvC,MAAMyB,SAAS,GAAGvB,gBAAgB,CAACoB,IAAI,EAAE;MACvCd,YAAY;MACZkB,SAAS,EAAEd,cAAc;MACzBe,UAAU,EAAEd,eAAe;MAC3BK;KACD,CAAC;IAEF,OAAOf,eAAe,CACpB;MACEM,GAAG;MACHC,OAAO;MACPC,IAAI;MACJ,MAAMiB,OAAOA,CAAC;QAAEC,MAAM;QAAEC;MAAM,CAAE;QAC9B,MAAMC,IAAI,GAAG;UAAEF,MAAM;UAAEC;QAAM,CAAE;QAE/B,MAAM;UAAEE;QAAQ,CAAE,GAAG/B,oBAAoB,CAAC;UACxCgC,EAAE,EAAEX,IAAI;UACRD,IAAI;UACJa,gBAAgBA,CAACC,QAAQ;YACvB,OAAOA,QAAQ,CAACC,MAAM,GAAGhB,SAAS;UACpC,CAAC;UACDiB,EAAE,EAAGN,IAAkB,IACrBN,SAAS,CAACG,OAAO,CAAC;YAChBG;WACD,CAAC;UACJO,IAAI,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACN,EAAE,GAAGO,CAAC,CAACP;SAC1B,CAAC;QAEF,MAAMI,EAAE,GAAG,MAAON,IAAgB,IAChCxB,KAAK,GACDyB,QAAQ,CAACD,IAAI,CAAC,GACd,CACE,MAAMN,SAAS,CAACG,OAAO,CAAC;UACtBG;SACD,CAAC,CACH;QAEP,MAAM,CAAC;UAAEU,KAAK;UAAEC;QAAM,CAAE,CAAC,GAAG,MAAML,EAAE,CAACN,IAAI,CAAC;QAC1C,IAAIU,KAAK,EACP,MAAM,IAAI1C,eAAe,CAAC;UACxBgC,IAAI;UACJU,KAAK;UACLpC,GAAG,EAAEiB;SACN,CAAC;QACJ,OAAOoB,MAAM;MACf,CAAC;MACD1B,UAAU;MACVF,UAAU;MACVI,OAAO;MACPyB,IAAI,EAAE;KACP,EACD;MACEnC,YAAY;MACZH,GAAG,EAAEiB;KACN,CACF;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}