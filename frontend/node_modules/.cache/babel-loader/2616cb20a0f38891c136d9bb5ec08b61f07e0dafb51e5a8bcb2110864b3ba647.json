{"ast":null,"code":"import { ConstantsUtil } from '@reown/appkit-common';\nimport { ApiController, ChainController, ConnectionController, ConnectorController, CoreHelperUtil, OptionsController, StorageUtil } from '@reown/appkit-controllers';\nimport { HelpersUtil } from '@reown/appkit-utils';\nimport { WalletUtil } from './WalletUtil.js';\nexport const ConnectorUtil = {\n  getConnectorsByType(connectors, recommended, featured) {\n    const {\n      customWallets\n    } = OptionsController.state;\n    const recent = StorageUtil.getRecentWallets();\n    const filteredRecommended = WalletUtil.filterOutDuplicateWallets(recommended);\n    const filteredFeatured = WalletUtil.filterOutDuplicateWallets(featured);\n    const multiChain = connectors.filter(connector => connector.type === 'MULTI_CHAIN');\n    const announced = connectors.filter(connector => connector.type === 'ANNOUNCED');\n    const injected = connectors.filter(connector => connector.type === 'INJECTED');\n    const external = connectors.filter(connector => connector.type === 'EXTERNAL');\n    return {\n      custom: customWallets,\n      recent,\n      external,\n      multiChain,\n      announced,\n      injected,\n      recommended: filteredRecommended,\n      featured: filteredFeatured\n    };\n  },\n  showConnector(connector) {\n    const rdns = connector.info?.rdns;\n    const isRDNSExcluded = Boolean(rdns) && ApiController.state.excludedWallets.some(wallet => wallet.rdns === rdns);\n    const isNameExcluded = Boolean(connector.name) && ApiController.state.excludedWallets.some(wallet => HelpersUtil.isLowerCaseMatch(wallet.name, connector.name));\n    if (connector.type === 'INJECTED') {\n      if (!CoreHelperUtil.isMobile() && connector.name === 'Browser Wallet') {\n        return false;\n      }\n      if (!rdns && !ConnectionController.checkInstalled()) {\n        return false;\n      }\n      if (isRDNSExcluded || isNameExcluded) {\n        return false;\n      }\n    }\n    if (connector.type === 'ANNOUNCED' && (isRDNSExcluded || isNameExcluded)) {\n      return false;\n    }\n    return true;\n  },\n  getIsConnectedWithWC() {\n    const chains = Array.from(ChainController.state.chains.values());\n    const isConnectedWithWC = chains.some(chain => {\n      const connectorId = ConnectorController.getConnectorId(chain.namespace);\n      return connectorId === ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT;\n    });\n    return isConnectedWithWC;\n  },\n  getConnectorTypeOrder({\n    recommended,\n    featured,\n    custom,\n    recent,\n    announced,\n    injected,\n    multiChain,\n    external,\n    overriddenConnectors = OptionsController.state.features?.connectorTypeOrder ?? []\n  }) {\n    const isConnectedWithWC = ConnectorUtil.getIsConnectedWithWC();\n    const isWCEnabled = OptionsController.state.enableWalletConnect;\n    const allConnectors = [{\n      type: 'walletConnect',\n      isEnabled: isWCEnabled && !isConnectedWithWC\n    }, {\n      type: 'recent',\n      isEnabled: recent.length > 0\n    }, {\n      type: 'injected',\n      isEnabled: [...injected, ...announced, ...multiChain].length > 0\n    }, {\n      type: 'featured',\n      isEnabled: featured.length > 0\n    }, {\n      type: 'custom',\n      isEnabled: custom && custom.length > 0\n    }, {\n      type: 'external',\n      isEnabled: external.length > 0\n    }, {\n      type: 'recommended',\n      isEnabled: recommended.length > 0\n    }];\n    const enabledConnectors = allConnectors.filter(option => option.isEnabled);\n    const enabledConnectorTypes = new Set(enabledConnectors.map(option => option.type));\n    const prioritizedConnectors = overriddenConnectors.filter(type => enabledConnectorTypes.has(type)).map(type => ({\n      type,\n      isEnabled: true\n    }));\n    const remainingConnectors = enabledConnectors.filter(({\n      type: enabledConnectorType\n    }) => {\n      const hasPrioritizedConnector = prioritizedConnectors.some(({\n        type: prioritizedConnectorType\n      }) => prioritizedConnectorType === enabledConnectorType);\n      return !hasPrioritizedConnector;\n    });\n    return Array.from(new Set([...prioritizedConnectors, ...remainingConnectors].map(({\n      type\n    }) => type)));\n  }\n};\n//# sourceMappingURL=ConnectorUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}