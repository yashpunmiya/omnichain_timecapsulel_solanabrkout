{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToHex } from '../encoding/toHex.js';\n/**\n * @description Parses a hex formatted compact signature into a structured compact signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseCompactSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', yParityAndS: '0x...' }\n */\nexport function parseCompactSignature(signatureHex) {\n  const {\n    r,\n    s\n  } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));\n  return {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    yParityAndS: numberToHex(s, {\n      size: 32\n    })\n  };\n}","map":{"version":3,"names":["secp256k1","numberToHex","parseCompactSignature","signatureHex","r","s","Signature","fromCompact","slice","size","yParityAndS"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\signature\\parseCompactSignature.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Hex } from '../../types/misc.js'\nimport { type NumberToHexErrorType, numberToHex } from '../encoding/toHex.js'\n\nexport type ParseCompactSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted compact signature into a structured compact signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseCompactSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', yParityAndS: '0x...' }\n */\nexport function parseCompactSignature(signatureHex: Hex): CompactSignature {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  return {\n    r: numberToHex(r, { size: 32 }),\n    yParityAndS: numberToHex(s, { size: 32 }),\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AAInD,SAAoCC,WAAW,QAAQ,sBAAsB;AAI7E;;;;;;;;;;AAUA,OAAM,SAAUC,qBAAqBA,CAACC,YAAiB;EACrD,MAAM;IAAEC,CAAC;IAAEC;EAAC,CAAE,GAAGL,SAAS,CAACM,SAAS,CAACC,WAAW,CAACJ,YAAY,CAACK,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;EAC5E,OAAO;IACLJ,CAAC,EAAEH,WAAW,CAACG,CAAC,EAAE;MAAEK,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BC,WAAW,EAAET,WAAW,CAACI,CAAC,EAAE;MAAEI,IAAI,EAAE;IAAE,CAAE;GACzC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}