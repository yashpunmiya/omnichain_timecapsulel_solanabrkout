{"ast":null,"code":"import { versionedHashVersionKzg } from '../constants/kzg.js';\nimport { BaseError } from './base.js';\nexport class BlobSizeTooLargeError extends BaseError {\n  constructor({\n    maxSize,\n    size\n  }) {\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n      name: 'BlobSizeTooLargeError'\n    });\n  }\n}\nexport class EmptyBlobError extends BaseError {\n  constructor() {\n    super('Blob data must not be empty.', {\n      name: 'EmptyBlobError'\n    });\n  }\n}\nexport class InvalidVersionedHashSizeError extends BaseError {\n  constructor({\n    hash,\n    size\n  }) {\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n      name: 'InvalidVersionedHashSizeError'\n    });\n  }\n}\nexport class InvalidVersionedHashVersionError extends BaseError {\n  constructor({\n    hash,\n    version\n  }) {\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [`Expected: ${versionedHashVersionKzg}`, `Received: ${version}`],\n      name: 'InvalidVersionedHashVersionError'\n    });\n  }\n}\n//# sourceMappingURL=blob.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}