{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRandomInt = void 0;\nconst crypto_1 = require(\"crypto\");\nconst getRandomInt = (min, max) => {\n  if (!Number.isSafeInteger(min)) {\n    throw new RangeError(`The \"min\" argument must be a safe integer. Received type ${typeof min} (${min})`);\n  }\n  if (!Number.isSafeInteger(max)) {\n    throw new RangeError(`The \"max\" argument must be a safe integer. Received type ${typeof max} (${max})`);\n  }\n  if (min >= max) {\n    throw new RangeError(`The value of \"max\" is out of range. It must be greater than the value of \"min\" (${min}). Received ${max}`);\n  }\n  const MAX_RANGE_32_BITS = 0xffffffff + 1;\n  const range = max - min;\n  if (range > MAX_RANGE_32_BITS) {\n    throw new RangeError(`This function only provide 32 bits of entropy, therefore range cannot be more then 2^32.`);\n  }\n  const getRandomValues = typeof window !== 'undefined' ? array => window.crypto.getRandomValues(array) : array => (0, crypto_1.getRandomValues)(array);\n  const array = new Uint32Array(1);\n  const maxRange = MAX_RANGE_32_BITS - MAX_RANGE_32_BITS % range;\n  let randomValue;\n  do {\n    getRandomValues(array);\n    randomValue = array[0];\n  } while (randomValue >= maxRange);\n  return min + randomValue % range;\n};\nexports.getRandomInt = getRandomInt;\n//# sourceMappingURL=getRandomInt.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}