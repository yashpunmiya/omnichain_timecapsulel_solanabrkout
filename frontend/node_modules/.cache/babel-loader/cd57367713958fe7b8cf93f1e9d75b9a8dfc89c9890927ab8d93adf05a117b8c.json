{"ast":null,"code":"import { estimateGas } from './actions/estimateGas.js';\nexport const chainConfig = {\n  fees: {\n    estimateFeesPerGas,\n    async maxPriorityFeePerGas({\n      block,\n      client,\n      request\n    }) {\n      const response = await estimateFeesPerGas({\n        block,\n        client,\n        multiply: x => x,\n        request,\n        type: 'eip1559'\n      });\n      // Returning `null` will trigger the base `estimateMaxPriorityFeePerGas` to perform\n      // fallback mechanisms to estimate priority fee.\n      if (!response?.maxPriorityFeePerGas) return null;\n      return response.maxPriorityFeePerGas;\n    }\n  }\n};\n///////////////////////////////////////////////////////////////////////////\n// Internal\n///////////////////////////////////////////////////////////////////////////\nasync function estimateFeesPerGas({\n  client,\n  multiply,\n  request,\n  type\n}) {\n  try {\n    const response = await estimateGas(client, {\n      ...request,\n      account: request?.account\n    });\n    const {\n      priorityFeePerGas: maxPriorityFeePerGas\n    } = response;\n    const baseFeePerGas = multiply(BigInt(response.baseFeePerGas));\n    const maxFeePerGas = baseFeePerGas + maxPriorityFeePerGas;\n    if (type === 'legacy') return {\n      gasPrice: maxFeePerGas\n    };\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  } catch {\n    // Returning `null` will trigger the base `estimateFeesPerGas` to perform\n    // fallback mechanisms to estimate fees.\n    return null;\n  }\n}\n//# sourceMappingURL=chainConfig.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}