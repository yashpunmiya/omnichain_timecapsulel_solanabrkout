{"ast":null,"code":"import { PublicKey, Connection } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { SOLANA_PROGRAM_ID } from '../env-config';\n\n// Constants\nconst PROGRAM_ID = new PublicKey(SOLANA_PROGRAM_ID); // Use the deployed program ID from env-config\nconst TIME_CAPSULE_MANAGER_SEED = 'manager';\nexport class TimeCapsuleClient {\n  constructor(connection, wallet) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.program = null;\n  }\n  async init() {\n    const provider = new anchor.AnchorProvider(this.connection, this.wallet, {\n      commitment: 'confirmed'\n    });\n\n    // Use a simplified IDL for demo purposes\n    const IDL = {\n      version: \"0.1.0\",\n      name: \"time_capsule\",\n      instructions: [],\n      accounts: []\n    };\n\n    // Load the program\n    try {\n      this.program = new anchor.Program(IDL, PROGRAM_ID, provider);\n    } catch (err) {\n      console.error('Failed to load program:', err);\n      throw err;\n    }\n    return this;\n  }\n  async createTextCapsule(message, releaseTimestamp, destinationChainId, destinationAddress) {\n    // This is a mock implementation for demonstration\n    console.log('Creating text capsule with params:', {\n      message,\n      releaseTimestamp,\n      destinationChainId,\n      destinationAddress\n    });\n\n    // In a real implementation, this would call the Solana program\n    return \"tx_hash_placeholder\";\n  }\n  async getAllCapsules() {\n    // This is a mock implementation that returns sample data\n    return [{\n      publicKey: new PublicKey('11111111111111111111111111111111'),\n      account: {\n        owner: this.wallet.publicKey,\n        capsuleType: {\n          toString: () => '0'\n        },\n        // Text type\n        releaseTimestamp: {\n          toNumber: () => Math.floor(Date.now() / 1000) + 3600\n        },\n        // 1 hour from now\n        createdAt: {\n          toNumber: () => Math.floor(Date.now() / 1000) - 3600\n        },\n        // 1 hour ago\n        isUnlocked: false,\n        content: \"This is a sample time capsule message for demonstration purposes.\",\n        destinationChainId: 10161 // Ethereum Sepolia\n      }\n    }, {\n      publicKey: new PublicKey('22222222222222222222222222222222'),\n      account: {\n        owner: this.wallet.publicKey,\n        capsuleType: {\n          toString: () => '0'\n        },\n        // Text type\n        releaseTimestamp: {\n          toNumber: () => Math.floor(Date.now() / 1000) - 1800\n        },\n        // 30 minutes ago (unlockable)\n        createdAt: {\n          toNumber: () => Math.floor(Date.now() / 1000) - 7200\n        },\n        // 2 hours ago\n        isUnlocked: false,\n        content: \"This capsule is ready to be unlocked!\",\n        destinationChainId: 10231 // Arbitrum Sepolia\n      }\n    }];\n  }\n  async unlockCapsule(capsuleAddress, tokenMint = null) {\n    // This is a mock implementation for demonstration\n    console.log('Unlocking capsule:', capsuleAddress.toString());\n\n    // In a real implementation, this would call the Solana program\n    return \"unlock_tx_hash_placeholder\";\n  }\n}\nexport const PROGRAM_ID_STRING = PROGRAM_ID.toString();","map":{"version":3,"names":["PublicKey","Connection","anchor","SOLANA_PROGRAM_ID","PROGRAM_ID","TIME_CAPSULE_MANAGER_SEED","TimeCapsuleClient","constructor","connection","wallet","program","init","provider","AnchorProvider","commitment","IDL","version","name","instructions","accounts","Program","err","console","error","createTextCapsule","message","releaseTimestamp","destinationChainId","destinationAddress","log","getAllCapsules","publicKey","account","owner","capsuleType","toString","toNumber","Math","floor","Date","now","createdAt","isUnlocked","content","unlockCapsule","capsuleAddress","tokenMint","PROGRAM_ID_STRING"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/src/utils/TimeCapsuleClient.js"],"sourcesContent":["import { PublicKey, Connection } from '@solana/web3.js';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport { SOLANA_PROGRAM_ID } from '../env-config';\r\n\r\n// Constants\r\nconst PROGRAM_ID = new PublicKey(SOLANA_PROGRAM_ID); // Use the deployed program ID from env-config\r\nconst TIME_CAPSULE_MANAGER_SEED = 'manager';\r\n\r\nexport class TimeCapsuleClient {\r\n  constructor(connection, wallet) {\r\n    this.connection = connection;\r\n    this.wallet = wallet;\r\n    this.program = null;\r\n  }\r\n\r\n  async init() {\r\n    const provider = new anchor.AnchorProvider(\r\n      this.connection,\r\n      this.wallet,\r\n      { commitment: 'confirmed' }\r\n    );\r\n    \r\n    // Use a simplified IDL for demo purposes\r\n    const IDL = {\r\n      version: \"0.1.0\",\r\n      name: \"time_capsule\",\r\n      instructions: [],\r\n      accounts: [],\r\n    };\r\n    \r\n    // Load the program\r\n    try {\r\n      this.program = new anchor.Program(IDL, PROGRAM_ID, provider);\r\n    } catch (err) {\r\n      console.error('Failed to load program:', err);\r\n      throw err;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  async createTextCapsule(message, releaseTimestamp, destinationChainId, destinationAddress) {\r\n    // This is a mock implementation for demonstration\r\n    console.log('Creating text capsule with params:', {\r\n      message,\r\n      releaseTimestamp,\r\n      destinationChainId,\r\n      destinationAddress\r\n    });\r\n    \r\n    // In a real implementation, this would call the Solana program\r\n    return \"tx_hash_placeholder\";\r\n  }\r\n\r\n  async getAllCapsules() {\r\n    // This is a mock implementation that returns sample data\r\n    return [\r\n      {\r\n        publicKey: new PublicKey('11111111111111111111111111111111'),\r\n        account: {\r\n          owner: this.wallet.publicKey,\r\n          capsuleType: { toString: () => '0' }, // Text type\r\n          releaseTimestamp: { toNumber: () => Math.floor(Date.now() / 1000) + 3600 }, // 1 hour from now\r\n          createdAt: { toNumber: () => Math.floor(Date.now() / 1000) - 3600 }, // 1 hour ago\r\n          isUnlocked: false,\r\n          content: \"This is a sample time capsule message for demonstration purposes.\",\r\n          destinationChainId: 10161 // Ethereum Sepolia\r\n        }\r\n      },\r\n      {\r\n        publicKey: new PublicKey('22222222222222222222222222222222'),\r\n        account: {\r\n          owner: this.wallet.publicKey,\r\n          capsuleType: { toString: () => '0' }, // Text type\r\n          releaseTimestamp: { toNumber: () => Math.floor(Date.now() / 1000) - 1800 }, // 30 minutes ago (unlockable)\r\n          createdAt: { toNumber: () => Math.floor(Date.now() / 1000) - 7200 }, // 2 hours ago\r\n          isUnlocked: false,\r\n          content: \"This capsule is ready to be unlocked!\",\r\n          destinationChainId: 10231 // Arbitrum Sepolia\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  async unlockCapsule(capsuleAddress, tokenMint = null) {\r\n    // This is a mock implementation for demonstration\r\n    console.log('Unlocking capsule:', capsuleAddress.toString());\r\n    \r\n    // In a real implementation, this would call the Solana program\r\n    return \"unlock_tx_hash_placeholder\";\r\n  }\r\n}\r\n\r\nexport const PROGRAM_ID_STRING = PROGRAM_ID.toString(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}