{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrezorConnectDynamic = void 0;\nconst constants_1 = require(\"../constants\");\nconst proxy_event_emitter_1 = require(\"../utils/proxy-event-emitter\");\nclass TrezorConnectDynamic {\n  eventEmitter;\n  currentTarget;\n  implementations;\n  getInitTarget;\n  handleBeforeCall;\n  handleErrorFallback;\n  lastSettings;\n  constructor({\n    implementations,\n    getInitTarget,\n    handleBeforeCall,\n    handleErrorFallback\n  }) {\n    this.implementations = implementations;\n    this.currentTarget = this.implementations[0].type;\n    this.getInitTarget = getInitTarget;\n    this.handleBeforeCall = handleBeforeCall;\n    this.handleErrorFallback = handleErrorFallback;\n    this.eventEmitter = new proxy_event_emitter_1.ProxyEventEmitter(this.implementations.map(impl => impl.impl.eventEmitter));\n  }\n  getTarget() {\n    return this.implementations.find(impl => impl.type === this.currentTarget).impl;\n  }\n  getTargetType() {\n    return this.currentTarget;\n  }\n  async switchTarget(target) {\n    if (this.currentTarget === target) {\n      return;\n    }\n    if (!this.lastSettings) {\n      throw constants_1.ERRORS.TypedError('Init_NotInitialized');\n    }\n    const oldTargetType = this.getTargetType();\n    const oldTarget = this.getTarget();\n    try {\n      this.currentTarget = target;\n      await this.getTarget().init(this.lastSettings);\n      await oldTarget.dispose();\n    } catch {\n      this.currentTarget = oldTargetType;\n    }\n  }\n  manifest(manifest) {\n    this.lastSettings = {\n      ...this.lastSettings,\n      manifest\n    };\n    this.getTarget().manifest(manifest);\n  }\n  async init(settings) {\n    if (!settings?.manifest) {\n      throw constants_1.ERRORS.TypedError('Init_ManifestMissing');\n    }\n    this.lastSettings = settings;\n    this.currentTarget = this.getInitTarget(settings);\n    try {\n      return await this.getTarget().init(this.lastSettings);\n    } catch (error) {\n      if (await this.handleErrorFallback(error.code)) {\n        return await this.getTarget().init(settings);\n      }\n      throw error;\n    }\n  }\n  setTransports({\n    transports\n  }) {\n    this.lastSettings = {\n      ...this.lastSettings,\n      transports\n    };\n    this.getTarget().setTransports({\n      transports\n    });\n  }\n  async call(params) {\n    await this.handleBeforeCall();\n    const response = await this.getTarget().call(params);\n    if (!response.success) {\n      if (await this.handleErrorFallback(response.payload.code)) {\n        return await this.getTarget().call(params);\n      }\n    }\n    return response;\n  }\n  requestLogin(params) {\n    return this.getTarget().requestLogin(params);\n  }\n  uiResponse(params) {\n    return this.getTarget().uiResponse(params);\n  }\n  cancel(error) {\n    return this.getTarget().cancel(error);\n  }\n  dispose() {\n    this.eventEmitter.removeAllListeners();\n    return this.getTarget().dispose();\n  }\n}\nexports.TrezorConnectDynamic = TrezorConnectDynamic;\n//# sourceMappingURL=dynamic.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}