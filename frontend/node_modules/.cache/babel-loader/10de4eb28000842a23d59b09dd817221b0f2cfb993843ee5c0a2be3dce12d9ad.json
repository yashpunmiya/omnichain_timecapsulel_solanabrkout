{"ast":null,"code":"import { encodeEventTopics } from '../../utils/abi/encodeEventTopics.js';\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatLog } from '../../utils/formatters/log.js';\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/logs_event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs(client, {\n  address,\n  blockHash,\n  fromBlock,\n  toBlock,\n  event,\n  events: events_,\n  args,\n  strict: strict_\n} = {}) {\n  const strict = strict_ ?? false;\n  const events = events_ ?? (event ? [event] : undefined);\n  let topics = [];\n  if (events) {\n    const encoded = events.flatMap(event => encodeEventTopics({\n      abi: [event],\n      eventName: event.name,\n      args: events_ ? undefined : args\n    }));\n    // TODO: Clean up type casting\n    topics = [encoded];\n    if (event) topics = topics[0];\n  }\n  let logs;\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{\n        address,\n        topics,\n        blockHash\n      }]\n    });\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{\n        address,\n        topics,\n        fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock\n      }]\n    });\n  }\n  const formattedLogs = logs.map(log => formatLog(log));\n  if (!events) return formattedLogs;\n  return parseEventLogs({\n    abi: events,\n    args: args,\n    logs: formattedLogs,\n    strict\n  });\n}\n//# sourceMappingURL=getLogs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}