{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoHDKey = void 0;\nconst bs58check_1 = require(\"bs58check\");\nconst CryptoCoinInfo_1 = require(\"./CryptoCoinInfo\");\nconst CryptoKeypath_1 = require(\"./CryptoKeypath\");\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"is_master\"] = 1] = \"is_master\";\n  Keys[Keys[\"is_private\"] = 2] = \"is_private\";\n  Keys[Keys[\"key_data\"] = 3] = \"key_data\";\n  Keys[Keys[\"chain_code\"] = 4] = \"chain_code\";\n  Keys[Keys[\"use_info\"] = 5] = \"use_info\";\n  Keys[Keys[\"origin\"] = 6] = \"origin\";\n  Keys[Keys[\"children\"] = 7] = \"children\";\n  Keys[Keys[\"parent_fingerprint\"] = 8] = \"parent_fingerprint\";\n  Keys[Keys[\"name\"] = 9] = \"name\";\n  Keys[Keys[\"note\"] = 10] = \"note\";\n})(Keys || (Keys = {}));\nclass CryptoHDKey extends RegistryItem_1.RegistryItem {\n  constructor(args) {\n    super();\n    this.isECKey = () => {\n      return false;\n    };\n    this.getKey = () => this.key;\n    this.getChainCode = () => this.chainCode;\n    this.isMaster = () => this.master;\n    this.isPrivateKey = () => !!this.privateKey;\n    this.getUseInfo = () => this.useInfo;\n    this.getOrigin = () => this.origin;\n    this.getChildren = () => this.children;\n    this.getParentFingerprint = () => this.parentFingerprint;\n    this.getName = () => this.name;\n    this.getNote = () => this.note;\n    this.getBip32Key = () => {\n      var _a, _b, _c;\n      let version;\n      let depth;\n      let index = 0;\n      let parentFingerprint = Buffer.alloc(4).fill(0);\n      if (this.isMaster()) {\n        version = Buffer.from('0488ADE4', 'hex');\n        depth = 0;\n        index = 0;\n      } else {\n        depth = ((_a = this.getOrigin()) === null || _a === void 0 ? void 0 : _a.getComponents().length) || ((_b = this.getOrigin()) === null || _b === void 0 ? void 0 : _b.getDepth());\n        const paths = (_c = this.getOrigin()) === null || _c === void 0 ? void 0 : _c.getComponents();\n        const lastPath = paths[paths.length - 1];\n        if (lastPath) {\n          index = lastPath.isHardened() ? lastPath.getIndex() + 0x80000000 : lastPath.getIndex();\n          if (this.getParentFingerprint()) {\n            parentFingerprint = this.getParentFingerprint();\n          }\n        }\n        if (this.isPrivateKey()) {\n          version = Buffer.from('0488ADE4', 'hex');\n        } else {\n          version = Buffer.from('0488B21E', 'hex');\n        }\n      }\n      const depthBuffer = Buffer.alloc(1);\n      depthBuffer.writeUInt8(depth, 0);\n      const indexBuffer = Buffer.alloc(4);\n      indexBuffer.writeUInt32BE(index, 0);\n      const chainCode = this.getChainCode();\n      const key = this.getKey();\n      return (0, bs58check_1.encode)(Buffer.concat([version, depthBuffer, parentFingerprint, indexBuffer, chainCode, key]));\n    };\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_HDKEY;\n    };\n    this.getOutputDescriptorContent = () => {\n      var _a, _b, _c, _d, _e, _f, _g;\n      let result = '';\n      if (this.getOrigin()) {\n        if (((_a = this.getOrigin()) === null || _a === void 0 ? void 0 : _a.getSourceFingerprint()) && ((_b = this.getOrigin()) === null || _b === void 0 ? void 0 : _b.getPath())) {\n          result += `${(_d = (_c = this.getOrigin()) === null || _c === void 0 ? void 0 : _c.getSourceFingerprint()) === null || _d === void 0 ? void 0 : _d.toString('hex')}/${(_e = this.getOrigin()) === null || _e === void 0 ? void 0 : _e.getPath()}`;\n        }\n      }\n      result += this.getBip32Key();\n      if (this.getChildren()) {\n        if ((_f = this.getChildren()) === null || _f === void 0 ? void 0 : _f.getPath()) {\n          result += `/${(_g = this.getChildren()) === null || _g === void 0 ? void 0 : _g.getPath()}`;\n        }\n      }\n      return result;\n    };\n    this.setupMasterKey = args => {\n      this.master = true;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n    };\n    this.setupDeriveKey = args => {\n      this.master = false;\n      this.privateKey = args.isPrivateKey;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n      this.useInfo = args.useInfo;\n      this.origin = args.origin;\n      this.children = args.children;\n      this.parentFingerprint = args.parentFingerprint;\n      this.name = args.name;\n      this.note = args.note;\n    };\n    this.toDataItem = () => {\n      const map = {};\n      if (this.master) {\n        map[Keys.is_master] = true;\n        map[Keys.key_data] = this.key;\n        map[Keys.chain_code] = this.chainCode;\n      } else {\n        if (this.privateKey !== undefined) {\n          map[Keys.is_private] = this.privateKey;\n        }\n        map[Keys.key_data] = this.key;\n        if (this.chainCode) {\n          map[Keys.chain_code] = this.chainCode;\n        }\n        if (this.useInfo) {\n          const useInfo = this.useInfo.toDataItem();\n          useInfo.setTag(this.useInfo.getRegistryType().getTag());\n          map[Keys.use_info] = useInfo;\n        }\n        if (this.origin) {\n          const origin = this.origin.toDataItem();\n          origin.setTag(this.origin.getRegistryType().getTag());\n          map[Keys.origin] = origin;\n        }\n        if (this.children) {\n          const children = this.children.toDataItem();\n          children.setTag(this.children.getRegistryType().getTag());\n          map[Keys.children] = children;\n        }\n        if (this.parentFingerprint) {\n          map[Keys.parent_fingerprint] = this.parentFingerprint.readUInt32BE(0);\n        }\n        if (this.name !== undefined) {\n          map[Keys.name] = this.name;\n        }\n        if (this.note !== undefined) {\n          map[Keys.note] = this.note;\n        }\n      }\n      return new lib_1.DataItem(map);\n    };\n    if (args.isMaster) {\n      this.setupMasterKey(args);\n    } else {\n      this.setupDeriveKey(args);\n    }\n  }\n}\nexports.CryptoHDKey = CryptoHDKey;\nCryptoHDKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const isMaster = !!map[Keys.is_master];\n  const isPrivateKey = map[Keys.is_private];\n  const key = map[Keys.key_data];\n  const chainCode = map[Keys.chain_code];\n  const useInfo = map[Keys.use_info] ? CryptoCoinInfo_1.CryptoCoinInfo.fromDataItem(map[Keys.use_info]) : undefined;\n  const origin = map[Keys.origin] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.origin]) : undefined;\n  const children = map[Keys.children] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.children]) : undefined;\n  const _parentFingerprint = map[Keys.parent_fingerprint];\n  let parentFingerprint = undefined;\n  if (_parentFingerprint) {\n    parentFingerprint = Buffer.alloc(4);\n    parentFingerprint.writeUInt32BE(_parentFingerprint, 0);\n  }\n  const name = map[Keys.name];\n  const note = map[Keys.note];\n  return new CryptoHDKey({\n    isMaster,\n    isPrivateKey,\n    key,\n    chainCode,\n    useInfo,\n    origin,\n    children,\n    parentFingerprint,\n    name,\n    note\n  });\n};\nCryptoHDKey.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoHDKey.fromDataItem(dataItem);\n};","map":{"version":3,"names":["bs58check_1","require","CryptoCoinInfo_1","CryptoKeypath_1","lib_1","RegistryItem_1","RegistryType_1","Keys","CryptoHDKey","RegistryItem","constructor","args","isECKey","getKey","key","getChainCode","chainCode","isMaster","master","isPrivateKey","privateKey","getUseInfo","useInfo","getOrigin","origin","getChildren","children","getParentFingerprint","parentFingerprint","getName","name","getNote","note","getBip32Key","version","depth","index","Buffer","alloc","fill","from","_a","getComponents","length","_b","getDepth","paths","_c","lastPath","isHardened","getIndex","depthBuffer","writeUInt8","indexBuffer","writeUInt32BE","encode","concat","getRegistryType","RegistryTypes","CRYPTO_HDKEY","getOutputDescriptorContent","result","getSourceFingerprint","getPath","_d","toString","_e","_f","_g","setupMasterKey","setupDeriveKey","toDataItem","map","is_master","key_data","chain_code","undefined","is_private","setTag","getTag","use_info","parent_fingerprint","readUInt32BE","DataItem","exports","fromDataItem","dataItem","getData","CryptoCoinInfo","CryptoKeypath","_parentFingerprint","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry\\src\\CryptoHDKey.ts"],"sourcesContent":["import { encode } from 'bs58check';\nimport { CryptoCoinInfo } from './CryptoCoinInfo';\nimport { CryptoKeypath } from './CryptoKeypath';\nimport { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\nimport { DataItemMap, ICryptoKey } from './types';\nimport { PathComponent } from './PathComponent';\n\nenum Keys {\n  is_master = 1,\n  is_private,\n  key_data,\n  chain_code,\n  use_info,\n  origin,\n  children,\n  parent_fingerprint,\n  name,\n  note,\n}\n\ntype MasterKeyProps = {\n  isMaster: true;\n  key: Buffer;\n  chainCode: Buffer;\n};\n\ntype DeriveKeyProps = {\n  isMaster: false;\n  isPrivateKey?: boolean;\n  key: Buffer;\n  chainCode?: Buffer;\n  useInfo?: CryptoCoinInfo;\n  origin?: CryptoKeypath;\n  children?: CryptoKeypath;\n  parentFingerprint?: Buffer;\n  name?: string;\n  note?: string;\n};\n\nexport class CryptoHDKey extends RegistryItem implements ICryptoKey {\n  private master?: boolean;\n  private privateKey?: boolean;\n  private key?: Buffer;\n  private chainCode?: Buffer;\n  private useInfo?: CryptoCoinInfo;\n  private origin?: CryptoKeypath;\n  private children?: CryptoKeypath;\n  private parentFingerprint?: Buffer;\n  private name?: string;\n  private note?: string;\n\n  isECKey = () => {\n    return false;\n  };\n\n  public getKey = () => this.key;\n  public getChainCode = () => this.chainCode;\n  public isMaster = () => this.master;\n  public isPrivateKey = () => !!this.privateKey;\n  public getUseInfo = () => this.useInfo;\n  public getOrigin = () => this.origin;\n  public getChildren = () => this.children;\n  public getParentFingerprint = () => this.parentFingerprint;\n  public getName = () => this.name;\n  public getNote = () => this.note;\n  public getBip32Key = () => {\n    let version: Buffer;\n    let depth: number;\n    let index = 0;\n    let parentFingerprint: Buffer = Buffer.alloc(4).fill(0);\n    if (this.isMaster()) {\n      // version bytes defined on https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format\n      version = Buffer.from('0488ADE4', 'hex');\n      depth = 0;\n      index = 0;\n    } else {\n      depth = this.getOrigin()?.getComponents().length || this.getOrigin()?.getDepth() as number;\n      const paths = this.getOrigin()?.getComponents() as PathComponent[];\n      const lastPath = paths[paths.length - 1];\n      if (lastPath) {\n        index = lastPath.isHardened() ? lastPath.getIndex()! + 0x80000000 : lastPath.getIndex()!;\n        if (this.getParentFingerprint()) {\n          parentFingerprint = this.getParentFingerprint() as Buffer;\n        }\n      }\n      if (this.isPrivateKey()) {\n        version = Buffer.from('0488ADE4', 'hex');\n      } else {\n        version = Buffer.from('0488B21E', 'hex');\n      }\n    }\n    const depthBuffer = Buffer.alloc(1);\n    depthBuffer.writeUInt8(depth, 0);\n    const indexBuffer = Buffer.alloc(4);\n    indexBuffer.writeUInt32BE(index, 0);\n    const chainCode = this.getChainCode();\n    const key = this.getKey();\n    return encode(Buffer.concat([version, depthBuffer, parentFingerprint, indexBuffer, chainCode as Buffer, key as Buffer]));\n  };\n\n  public getRegistryType = () => {\n    return RegistryTypes.CRYPTO_HDKEY;\n  };\n\n  public getOutputDescriptorContent = () => {\n    let result = '';\n    if (this.getOrigin()) {\n      if (this.getOrigin()?.getSourceFingerprint() && this.getOrigin()?.getPath()) {\n        result += `${this.getOrigin()?.getSourceFingerprint()?.toString('hex')}/${this.getOrigin()?.getPath()}`;\n      }\n    }\n    result += this.getBip32Key();\n    if (this.getChildren()) {\n      if (this.getChildren()?.getPath()) {\n        result += `/${this.getChildren()?.getPath()}`;\n      }\n    }\n    return result;\n  };\n\n  constructor(args: DeriveKeyProps | MasterKeyProps) {\n    super();\n    if (args.isMaster) {\n      this.setupMasterKey(args);\n    } else {\n      this.setupDeriveKey(args as DeriveKeyProps);\n    }\n  }\n\n  private setupMasterKey = (args: MasterKeyProps) => {\n    this.master = true;\n    this.key = args.key;\n    this.chainCode = args.chainCode;\n  };\n\n  private setupDeriveKey = (args: DeriveKeyProps) => {\n    this.master = false;\n    this.privateKey = args.isPrivateKey;\n    this.key = args.key;\n    this.chainCode = args.chainCode;\n    this.useInfo = args.useInfo;\n    this.origin = args.origin;\n    this.children = args.children;\n    this.parentFingerprint = args.parentFingerprint;\n    this.name = args.name;\n    this.note = args.note;\n  };\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.master) {\n      map[Keys.is_master] = true;\n      map[Keys.key_data] = this.key;\n      map[Keys.chain_code] = this.chainCode;\n    } else {\n      if (this.privateKey !== undefined) {\n        map[Keys.is_private] = this.privateKey;\n      }\n      map[Keys.key_data] = this.key;\n      if (this.chainCode) {\n        map[Keys.chain_code] = this.chainCode;\n      }\n      if (this.useInfo) {\n        const useInfo = this.useInfo.toDataItem();\n        useInfo.setTag(this.useInfo.getRegistryType().getTag());\n        map[Keys.use_info] = useInfo;\n      }\n      if (this.origin) {\n        const origin = this.origin.toDataItem();\n        origin.setTag(this.origin.getRegistryType().getTag());\n        map[Keys.origin] = origin;\n      }\n      if (this.children) {\n        const children = this.children.toDataItem();\n        children.setTag(this.children.getRegistryType().getTag());\n        map[Keys.children] = children;\n      }\n      if (this.parentFingerprint) {\n        map[Keys.parent_fingerprint] = this.parentFingerprint.readUInt32BE(0);\n      }\n      if (this.name !== undefined) {\n        map[Keys.name] = this.name;\n      }\n      if (this.note !== undefined) {\n        map[Keys.note] = this.note;\n      }\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const isMaster = !!map[Keys.is_master];\n    const isPrivateKey = map[Keys.is_private];\n    const key = map[Keys.key_data];\n    const chainCode = map[Keys.chain_code];\n    const useInfo = map[Keys.use_info]\n      ? CryptoCoinInfo.fromDataItem(map[Keys.use_info])\n      : undefined;\n    const origin = map[Keys.origin]\n      ? CryptoKeypath.fromDataItem(map[Keys.origin])\n      : undefined;\n    const children = map[Keys.children]\n      ? CryptoKeypath.fromDataItem(map[Keys.children])\n      : undefined;\n    const _parentFingerprint = map[Keys.parent_fingerprint];\n    let parentFingerprint: Buffer | undefined = undefined;\n    if (_parentFingerprint) {\n      parentFingerprint = Buffer.alloc(4);\n      parentFingerprint.writeUInt32BE(_parentFingerprint, 0);\n    }\n    const name = map[Keys.name];\n    const note = map[Keys.note];\n\n    return new CryptoHDKey({\n      isMaster,\n      isPrivateKey,\n      key,\n      chainCode,\n      useInfo,\n      origin,\n      children,\n      parentFingerprint,\n      name,\n      note,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoHDKey.fromDataItem(dataItem);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}