{"ast":null,"code":"import { bytesToBigInt, bytesToHex, toBytes } from './bytes.js';\nimport { isHexString } from './internal.js';\nexport function isNestedUint8Array(value) {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  for (const item of value) {\n    if (Array.isArray(item)) {\n      if (!isNestedUint8Array(item)) {\n        return false;\n      }\n    } else if (!(item instanceof Uint8Array)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Type output options\n */\nexport var TypeOutput;\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n  TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nexport function toType(input, outputType) {\n  if (input === null) {\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n  const output = toBytes(input);\n  switch (outputType) {\n    case TypeOutput.Uint8Array:\n      return output;\n    case TypeOutput.BigInt:\n      return bytesToBigInt(output);\n    case TypeOutput.Number:\n      {\n        const bigInt = bytesToBigInt(output);\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return Number(bigInt);\n      }\n    case TypeOutput.PrefixedHexString:\n      return bytesToHex(output);\n    default:\n      throw new Error('unknown outputType');\n  }\n}\n//# sourceMappingURL=types.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}