{"ast":null,"code":"import { BaseError } from './base.js';\nexport class IntegerOutOfRangeError extends BaseError {\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value\n  }) {\n    super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, {\n      name: 'IntegerOutOfRangeError'\n    });\n  }\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  constructor(bytes) {\n    super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {\n      name: 'InvalidBytesBooleanError'\n    });\n  }\n}\nexport class InvalidHexBooleanError extends BaseError {\n  constructor(hex) {\n    super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`, {\n      name: 'InvalidHexBooleanError'\n    });\n  }\n}\nexport class InvalidHexValueError extends BaseError {\n  constructor(value) {\n    super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`, {\n      name: 'InvalidHexValueError'\n    });\n  }\n}\nexport class SizeOverflowError extends BaseError {\n  constructor({\n    givenSize,\n    maxSize\n  }) {\n    super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, {\n      name: 'SizeOverflowError'\n    });\n  }\n}\n//# sourceMappingURL=encoding.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}