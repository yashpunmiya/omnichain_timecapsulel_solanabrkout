{"ast":null,"code":"'use strict';\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/per_context/primordials.js file defined at\n\n  https://github.com/nodejs/node/blob/main/lib/internal/per_context/primordials.js\n\n  Don't try to replace with the original file and keep it up to date with the upstream file.\n*/\n\n// This is a simplified version of AggregateError\nclass AggregateError extends Error {\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n    }\n    let message = '';\n    for (let i = 0; i < errors.length; i++) {\n      message += `    ${errors[i].stack}\\n`;\n    }\n    super(message);\n    this.name = 'AggregateError';\n    this.errors = errors;\n  }\n}\nmodule.exports = {\n  AggregateError,\n  ArrayIsArray(self) {\n    return Array.isArray(self);\n  },\n  ArrayPrototypeIncludes(self, el) {\n    return self.includes(el);\n  },\n  ArrayPrototypeIndexOf(self, el) {\n    return self.indexOf(el);\n  },\n  ArrayPrototypeJoin(self, sep) {\n    return self.join(sep);\n  },\n  ArrayPrototypeMap(self, fn) {\n    return self.map(fn);\n  },\n  ArrayPrototypePop(self, el) {\n    return self.pop(el);\n  },\n  ArrayPrototypePush(self, el) {\n    return self.push(el);\n  },\n  ArrayPrototypeSlice(self, start, end) {\n    return self.slice(start, end);\n  },\n  Error,\n  FunctionPrototypeCall(fn, thisArgs, ...args) {\n    return fn.call(thisArgs, ...args);\n  },\n  FunctionPrototypeSymbolHasInstance(self, instance) {\n    return Function.prototype[Symbol.hasInstance].call(self, instance);\n  },\n  MathFloor: Math.floor,\n  Number,\n  NumberIsInteger: Number.isInteger,\n  NumberIsNaN: Number.isNaN,\n  NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,\n  NumberParseInt: Number.parseInt,\n  ObjectDefineProperties(self, props) {\n    return Object.defineProperties(self, props);\n  },\n  ObjectDefineProperty(self, name, prop) {\n    return Object.defineProperty(self, name, prop);\n  },\n  ObjectGetOwnPropertyDescriptor(self, name) {\n    return Object.getOwnPropertyDescriptor(self, name);\n  },\n  ObjectKeys(obj) {\n    return Object.keys(obj);\n  },\n  ObjectSetPrototypeOf(target, proto) {\n    return Object.setPrototypeOf(target, proto);\n  },\n  Promise,\n  PromisePrototypeCatch(self, fn) {\n    return self.catch(fn);\n  },\n  PromisePrototypeThen(self, thenFn, catchFn) {\n    return self.then(thenFn, catchFn);\n  },\n  PromiseReject(err) {\n    return Promise.reject(err);\n  },\n  PromiseResolve(val) {\n    return Promise.resolve(val);\n  },\n  ReflectApply: Reflect.apply,\n  RegExpPrototypeTest(self, value) {\n    return self.test(value);\n  },\n  SafeSet: Set,\n  String,\n  StringPrototypeSlice(self, start, end) {\n    return self.slice(start, end);\n  },\n  StringPrototypeToLowerCase(self) {\n    return self.toLowerCase();\n  },\n  StringPrototypeToUpperCase(self) {\n    return self.toUpperCase();\n  },\n  StringPrototypeTrim(self) {\n    return self.trim();\n  },\n  Symbol,\n  SymbolFor: Symbol.for,\n  SymbolAsyncIterator: Symbol.asyncIterator,\n  SymbolHasInstance: Symbol.hasInstance,\n  SymbolIterator: Symbol.iterator,\n  SymbolDispose: Symbol.dispose || Symbol('Symbol.dispose'),\n  SymbolAsyncDispose: Symbol.asyncDispose || Symbol('Symbol.asyncDispose'),\n  TypedArrayPrototypeSet(self, buf, len) {\n    return self.set(buf, len);\n  },\n  Boolean,\n  Uint8Array\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}