{"ast":null,"code":"import { proxy, ref } from 'valtio/vanilla';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { SnackController } from './SnackController.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  currentTab: 0,\n  tokenBalance: [],\n  smartAccountDeployed: false,\n  addressLabels: new Map(),\n  allAccounts: []\n});\n// -- Controller ---------------------------------------- //\nexport const AccountController = {\n  state,\n  replaceState(newState) {\n    if (!newState) {\n      return;\n    }\n    Object.assign(state, ref(newState));\n  },\n  subscribe(callback) {\n    return ChainController.subscribeChainProp('accountState', accountState => {\n      if (accountState) {\n        return callback(accountState);\n      }\n      return undefined;\n    });\n  },\n  subscribeKey(property, callback, chain) {\n    let prev = undefined;\n    return ChainController.subscribeChainProp('accountState', accountState => {\n      if (accountState) {\n        const nextValue = accountState[property];\n        if (prev !== nextValue) {\n          prev = nextValue;\n          callback(nextValue);\n        }\n      }\n    }, chain);\n  },\n  setStatus(status, chain) {\n    ChainController.setAccountProp('status', status, chain);\n  },\n  getCaipAddress(chain) {\n    return ChainController.getAccountProp('caipAddress', chain);\n  },\n  setCaipAddress(caipAddress, chain) {\n    const newAddress = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : undefined;\n    if (chain === ChainController.state.activeChain) {\n      ChainController.state.activeCaipAddress = caipAddress;\n    }\n    ChainController.setAccountProp('caipAddress', caipAddress, chain);\n    ChainController.setAccountProp('address', newAddress, chain);\n  },\n  setBalance(balance, balanceSymbol, chain) {\n    ChainController.setAccountProp('balance', balance, chain);\n    ChainController.setAccountProp('balanceSymbol', balanceSymbol, chain);\n  },\n  setProfileName(profileName, chain) {\n    ChainController.setAccountProp('profileName', profileName, chain);\n  },\n  setProfileImage(profileImage, chain) {\n    ChainController.setAccountProp('profileImage', profileImage, chain);\n  },\n  setUser(user, chain) {\n    ChainController.setAccountProp('user', user, chain);\n  },\n  setAddressExplorerUrl(explorerUrl, chain) {\n    ChainController.setAccountProp('addressExplorerUrl', explorerUrl, chain);\n  },\n  setSmartAccountDeployed(isDeployed, chain) {\n    ChainController.setAccountProp('smartAccountDeployed', isDeployed, chain);\n  },\n  setCurrentTab(currentTab) {\n    ChainController.setAccountProp('currentTab', currentTab, ChainController.state.activeChain);\n  },\n  setTokenBalance(tokenBalance, chain) {\n    if (tokenBalance) {\n      ChainController.setAccountProp('tokenBalance', tokenBalance, chain);\n    }\n  },\n  setShouldUpdateToAddress(address, chain) {\n    ChainController.setAccountProp('shouldUpdateToAddress', address, chain);\n  },\n  setAllAccounts(accounts, namespace) {\n    ChainController.setAccountProp('allAccounts', accounts, namespace);\n  },\n  addAddressLabel(address, label, chain) {\n    const map = ChainController.getAccountProp('addressLabels', chain) || new Map();\n    map.set(address, label);\n    ChainController.setAccountProp('addressLabels', map, chain);\n  },\n  removeAddressLabel(address, chain) {\n    const map = ChainController.getAccountProp('addressLabels', chain) || new Map();\n    map.delete(address);\n    ChainController.setAccountProp('addressLabels', map, chain);\n  },\n  setConnectedWalletInfo(connectedWalletInfo, chain) {\n    ChainController.setAccountProp('connectedWalletInfo', connectedWalletInfo, chain, false);\n  },\n  setPreferredAccountType(preferredAccountType, chain) {\n    ChainController.setAccountProp('preferredAccountType', preferredAccountType, chain);\n  },\n  setSocialProvider(socialProvider, chain) {\n    if (socialProvider) {\n      ChainController.setAccountProp('socialProvider', socialProvider, chain);\n    }\n  },\n  setSocialWindow(socialWindow, chain) {\n    ChainController.setAccountProp('socialWindow', socialWindow ? ref(socialWindow) : undefined, chain);\n  },\n  setFarcasterUrl(farcasterUrl, chain) {\n    ChainController.setAccountProp('farcasterUrl', farcasterUrl, chain);\n  },\n  async fetchTokenBalance(onError) {\n    state.balanceLoading = true;\n    const chainId = ChainController.state.activeCaipNetwork?.caipNetworkId;\n    const chain = ChainController.state.activeCaipNetwork?.chainNamespace;\n    const caipAddress = ChainController.state.activeCaipAddress;\n    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : undefined;\n    if (state.lastRetry && !CoreHelperUtil.isAllowedRetry(state.lastRetry, 30 * ConstantsUtil.ONE_SEC_MS)) {\n      state.balanceLoading = false;\n      return [];\n    }\n    try {\n      if (address && chainId && chain) {\n        const response = await BlockchainApiController.getBalance(address, chainId);\n        /*\n         * The 1Inch API includes many low-quality tokens in the balance response,\n         * which appear inconsistently. This filter prevents them from being displayed.\n         */\n        const filteredBalances = response.balances.filter(balance => balance.quantity.decimals !== '0');\n        this.setTokenBalance(filteredBalances, chain);\n        state.lastRetry = undefined;\n        state.balanceLoading = false;\n        return filteredBalances;\n      }\n    } catch (error) {\n      state.lastRetry = Date.now();\n      onError?.(error);\n      SnackController.showError('Token Balance Unavailable');\n    } finally {\n      state.balanceLoading = false;\n    }\n    return [];\n  },\n  resetAccount(chain) {\n    ChainController.resetAccount(chain);\n  }\n};\n//# sourceMappingURL=AccountController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}