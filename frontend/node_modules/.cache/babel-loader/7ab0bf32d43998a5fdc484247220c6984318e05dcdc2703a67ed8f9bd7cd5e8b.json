{"ast":null,"code":"import { proxy } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { AssetUtil } from '../utils/AssetUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { FetchUtil } from '../utils/FetchUtil.js';\nimport { StorageUtil } from '../utils/StorageUtil.js';\nimport { AssetController } from './AssetController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { OptionsController } from './OptionsController.js';\n// -- Helpers ------------------------------------------- //\nconst baseUrl = CoreHelperUtil.getApiUrl();\nexport const api = new FetchUtil({\n  baseUrl,\n  clientId: null\n});\nconst entries = '40';\nconst recommendedEntries = '4';\nconst imageCountToFetch = 20;\n// -- State --------------------------------------------- //\nconst state = proxy({\n  promises: {},\n  page: 1,\n  count: 0,\n  featured: [],\n  allFeatured: [],\n  recommended: [],\n  allRecommended: [],\n  wallets: [],\n  search: [],\n  isAnalyticsEnabled: false,\n  excludedWallets: [],\n  isFetchingRecommendedWallets: false\n});\n// -- Controller ---------------------------------------- //\nexport const ApiController = {\n  state,\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  _getSdkProperties() {\n    const {\n      projectId,\n      sdkType,\n      sdkVersion\n    } = OptionsController.state;\n    return {\n      projectId,\n      st: sdkType || 'appkit',\n      sv: sdkVersion || 'html-wagmi-4.2.2'\n    };\n  },\n  _filterOutExtensions(wallets) {\n    if (OptionsController.state.isUniversalProvider) {\n      return wallets.filter(w => Boolean(w.mobile_link || w.desktop_link || w.webapp_link));\n    }\n    return wallets;\n  },\n  async _fetchWalletImage(imageId) {\n    const imageUrl = `${api.baseUrl}/getWalletImage/${imageId}`;\n    const blob = await api.getBlob({\n      path: imageUrl,\n      params: ApiController._getSdkProperties()\n    });\n    AssetController.setWalletImage(imageId, URL.createObjectURL(blob));\n  },\n  async _fetchNetworkImage(imageId) {\n    const imageUrl = `${api.baseUrl}/public/getAssetImage/${imageId}`;\n    const blob = await api.getBlob({\n      path: imageUrl,\n      params: ApiController._getSdkProperties()\n    });\n    AssetController.setNetworkImage(imageId, URL.createObjectURL(blob));\n  },\n  async _fetchConnectorImage(imageId) {\n    const imageUrl = `${api.baseUrl}/public/getAssetImage/${imageId}`;\n    const blob = await api.getBlob({\n      path: imageUrl,\n      params: ApiController._getSdkProperties()\n    });\n    AssetController.setConnectorImage(imageId, URL.createObjectURL(blob));\n  },\n  async _fetchCurrencyImage(countryCode) {\n    const imageUrl = `${api.baseUrl}/public/getCurrencyImage/${countryCode}`;\n    const blob = await api.getBlob({\n      path: imageUrl,\n      params: ApiController._getSdkProperties()\n    });\n    AssetController.setCurrencyImage(countryCode, URL.createObjectURL(blob));\n  },\n  async _fetchTokenImage(symbol) {\n    const imageUrl = `${api.baseUrl}/public/getTokenImage/${symbol}`;\n    const blob = await api.getBlob({\n      path: imageUrl,\n      params: ApiController._getSdkProperties()\n    });\n    AssetController.setTokenImage(symbol, URL.createObjectURL(blob));\n  },\n  async fetchNetworkImages() {\n    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();\n    const ids = requestedCaipNetworks?.map(({\n      assets\n    }) => assets?.imageId).filter(Boolean).filter(imageId => !AssetUtil.getNetworkImageById(imageId));\n    if (ids) {\n      await Promise.allSettled(ids.map(id => ApiController._fetchNetworkImage(id)));\n    }\n  },\n  async fetchConnectorImages() {\n    const {\n      connectors\n    } = ConnectorController.state;\n    const ids = connectors.map(({\n      imageId\n    }) => imageId).filter(Boolean);\n    await Promise.allSettled(ids.map(id => ApiController._fetchConnectorImage(id)));\n  },\n  async fetchCurrencyImages(currencies = []) {\n    await Promise.allSettled(currencies.map(currency => ApiController._fetchCurrencyImage(currency)));\n  },\n  async fetchTokenImages(tokens = []) {\n    await Promise.allSettled(tokens.map(token => ApiController._fetchTokenImage(token)));\n  },\n  async fetchFeaturedWallets() {\n    const {\n      featuredWalletIds\n    } = OptionsController.state;\n    if (featuredWalletIds?.length) {\n      const {\n        data\n      } = await api.get({\n        path: '/getWallets',\n        params: {\n          ...ApiController._getSdkProperties(),\n          page: '1',\n          entries: featuredWalletIds?.length ? String(featuredWalletIds.length) : recommendedEntries,\n          include: featuredWalletIds?.join(',')\n        }\n      });\n      data.sort((a, b) => featuredWalletIds.indexOf(a.id) - featuredWalletIds.indexOf(b.id));\n      const images = data.map(d => d.image_id).filter(Boolean);\n      await Promise.allSettled(images.map(id => ApiController._fetchWalletImage(id)));\n      state.featured = data;\n      state.allFeatured = data;\n    }\n  },\n  async fetchRecommendedWallets() {\n    try {\n      state.isFetchingRecommendedWallets = true;\n      const {\n        includeWalletIds,\n        excludeWalletIds,\n        featuredWalletIds\n      } = OptionsController.state;\n      const exclude = [...(excludeWalletIds ?? []), ...(featuredWalletIds ?? [])].filter(Boolean);\n      const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(',');\n      const {\n        data,\n        count\n      } = await api.get({\n        path: '/getWallets',\n        params: {\n          ...ApiController._getSdkProperties(),\n          page: '1',\n          chains: caipNetworkIds,\n          entries: recommendedEntries,\n          include: includeWalletIds?.join(','),\n          exclude: exclude?.join(',')\n        }\n      });\n      const recent = StorageUtil.getRecentWallets();\n      const recommendedImages = data.map(d => d.image_id).filter(Boolean);\n      const recentImages = recent.map(r => r.image_id).filter(Boolean);\n      await Promise.allSettled([...recommendedImages, ...recentImages].map(id => ApiController._fetchWalletImage(id)));\n      state.recommended = data;\n      state.allRecommended = data;\n      state.count = count ?? 0;\n    } catch {\n      // Catch silently\n    } finally {\n      state.isFetchingRecommendedWallets = false;\n    }\n  },\n  async fetchWallets({\n    page\n  }) {\n    const {\n      includeWalletIds,\n      excludeWalletIds,\n      featuredWalletIds\n    } = OptionsController.state;\n    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(',');\n    const exclude = [...state.recommended.map(({\n      id\n    }) => id), ...(excludeWalletIds ?? []), ...(featuredWalletIds ?? [])].filter(Boolean);\n    const {\n      data,\n      count\n    } = await api.get({\n      path: '/getWallets',\n      params: {\n        ...ApiController._getSdkProperties(),\n        page: String(page),\n        entries,\n        chains: caipNetworkIds,\n        include: includeWalletIds?.join(','),\n        exclude: exclude.join(',')\n      }\n    });\n    const images = data.slice(0, imageCountToFetch).map(w => w.image_id).filter(Boolean);\n    await Promise.allSettled(images.map(id => ApiController._fetchWalletImage(id)));\n    state.wallets = CoreHelperUtil.uniqueBy([...state.wallets, ...ApiController._filterOutExtensions(data)], 'id');\n    state.count = count > state.count ? count : state.count;\n    state.page = page;\n  },\n  async initializeExcludedWallets({\n    ids\n  }) {\n    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(',');\n    const {\n      data\n    } = await api.get({\n      path: '/getWallets',\n      params: {\n        ...ApiController._getSdkProperties(),\n        page: '1',\n        entries: String(ids.length),\n        chains: caipNetworkIds,\n        include: ids?.join(',')\n      }\n    });\n    if (data) {\n      data.forEach(wallet => {\n        if (wallet?.rdns) {\n          state.excludedWallets.push({\n            rdns: wallet.rdns,\n            name: wallet.name\n          });\n        }\n      });\n    }\n  },\n  async searchWallet({\n    search,\n    badge\n  }) {\n    const {\n      includeWalletIds,\n      excludeWalletIds\n    } = OptionsController.state;\n    state.search = [];\n    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(',');\n    const {\n      data\n    } = await api.get({\n      path: '/getWallets',\n      params: {\n        ...ApiController._getSdkProperties(),\n        page: '1',\n        entries: '100',\n        search: search?.trim(),\n        badge_type: badge,\n        chains: caipNetworkIds,\n        include: includeWalletIds?.join(','),\n        exclude: excludeWalletIds?.join(',')\n      }\n    });\n    EventsController.sendEvent({\n      type: 'track',\n      event: 'SEARCH_WALLET',\n      properties: {\n        badge: badge ?? '',\n        search: search ?? ''\n      }\n    });\n    const images = data.map(w => w.image_id).filter(Boolean);\n    await Promise.allSettled([...images.map(id => ApiController._fetchWalletImage(id)), CoreHelperUtil.wait(300)]);\n    state.search = ApiController._filterOutExtensions(data);\n  },\n  initPromise(key, fetchFn) {\n    const existingPromise = state.promises[key];\n    if (existingPromise) {\n      return existingPromise;\n    }\n    return state.promises[key] = fetchFn();\n  },\n  prefetch({\n    fetchConnectorImages = true,\n    fetchFeaturedWallets = true,\n    fetchRecommendedWallets = true,\n    fetchNetworkImages = true\n  } = {}) {\n    const promises = [fetchConnectorImages && ApiController.initPromise('connectorImages', ApiController.fetchConnectorImages), fetchFeaturedWallets && ApiController.initPromise('featuredWallets', ApiController.fetchFeaturedWallets), fetchRecommendedWallets && ApiController.initPromise('recommendedWallets', ApiController.fetchRecommendedWallets), fetchNetworkImages && ApiController.initPromise('networkImages', ApiController.fetchNetworkImages)].filter(Boolean);\n    return Promise.allSettled(promises);\n  },\n  prefetchAnalyticsConfig() {\n    if (OptionsController.state.features?.analytics) {\n      ApiController.fetchAnalyticsConfig();\n    }\n  },\n  async fetchAnalyticsConfig() {\n    try {\n      const {\n        isAnalyticsEnabled\n      } = await api.get({\n        path: '/getAnalyticsConfig',\n        params: ApiController._getSdkProperties()\n      });\n      OptionsController.setFeatures({\n        analytics: isAnalyticsEnabled\n      });\n    } catch (error) {\n      OptionsController.setFeatures({\n        analytics: false\n      });\n    }\n  },\n  setFilterByNamespace(namespace) {\n    if (!namespace) {\n      state.featured = state.allFeatured;\n      state.recommended = state.allRecommended;\n      return;\n    }\n    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(',');\n    state.featured = state.allFeatured.filter(wallet => wallet.chains?.some(chain => caipNetworkIds.includes(chain)));\n    state.recommended = state.allRecommended.filter(wallet => wallet.chains?.some(chain => caipNetworkIds.includes(chain)));\n  }\n};\n//# sourceMappingURL=ApiController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}