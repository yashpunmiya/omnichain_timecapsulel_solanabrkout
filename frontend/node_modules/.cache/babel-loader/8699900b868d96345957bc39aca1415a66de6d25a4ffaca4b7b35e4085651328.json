{"ast":null,"code":"import { bytesRegex, execTyped, integerRegex, isTupleRegex } from '../../regex.js';\nimport { UnknownSolidityTypeError } from '../errors/abiItem.js';\nimport { InvalidFunctionModifierError, InvalidModifierError, InvalidParameterError, SolidityProtectedKeywordError } from '../errors/abiParameter.js';\nimport { InvalidSignatureError, UnknownSignatureError } from '../errors/signature.js';\nimport { InvalidParenthesisError } from '../errors/splitParameters.js';\nimport { getParameterCacheKey, parameterCache } from './cache.js';\nimport { eventModifiers, execConstructorSignature, execErrorSignature, execEventSignature, execFallbackSignature, execFunctionSignature, functionModifiers, isConstructorSignature, isErrorSignature, isEventSignature, isFallbackSignature, isFunctionSignature, isReceiveSignature } from './signatures.js';\nexport function parseSignature(signature, structs = {}) {\n  if (isFunctionSignature(signature)) return parseFunctionSignature(signature, structs);\n  if (isEventSignature(signature)) return parseEventSignature(signature, structs);\n  if (isErrorSignature(signature)) return parseErrorSignature(signature, structs);\n  if (isConstructorSignature(signature)) return parseConstructorSignature(signature, structs);\n  if (isFallbackSignature(signature)) return parseFallbackSignature(signature);\n  if (isReceiveSignature(signature)) return {\n    type: 'receive',\n    stateMutability: 'payable'\n  };\n  throw new UnknownSignatureError({\n    signature\n  });\n}\nexport function parseFunctionSignature(signature, structs = {}) {\n  const match = execFunctionSignature(signature);\n  if (!match) throw new InvalidSignatureError({\n    signature,\n    type: 'function'\n  });\n  const inputParams = splitParameters(match.parameters);\n  const inputs = [];\n  const inputLength = inputParams.length;\n  for (let i = 0; i < inputLength; i++) {\n    inputs.push(parseAbiParameter(inputParams[i], {\n      modifiers: functionModifiers,\n      structs,\n      type: 'function'\n    }));\n  }\n  const outputs = [];\n  if (match.returns) {\n    const outputParams = splitParameters(match.returns);\n    const outputLength = outputParams.length;\n    for (let i = 0; i < outputLength; i++) {\n      outputs.push(parseAbiParameter(outputParams[i], {\n        modifiers: functionModifiers,\n        structs,\n        type: 'function'\n      }));\n    }\n  }\n  return {\n    name: match.name,\n    type: 'function',\n    stateMutability: match.stateMutability ?? 'nonpayable',\n    inputs,\n    outputs\n  };\n}\nexport function parseEventSignature(signature, structs = {}) {\n  const match = execEventSignature(signature);\n  if (!match) throw new InvalidSignatureError({\n    signature,\n    type: 'event'\n  });\n  const params = splitParameters(match.parameters);\n  const abiParameters = [];\n  const length = params.length;\n  for (let i = 0; i < length; i++) abiParameters.push(parseAbiParameter(params[i], {\n    modifiers: eventModifiers,\n    structs,\n    type: 'event'\n  }));\n  return {\n    name: match.name,\n    type: 'event',\n    inputs: abiParameters\n  };\n}\nexport function parseErrorSignature(signature, structs = {}) {\n  const match = execErrorSignature(signature);\n  if (!match) throw new InvalidSignatureError({\n    signature,\n    type: 'error'\n  });\n  const params = splitParameters(match.parameters);\n  const abiParameters = [];\n  const length = params.length;\n  for (let i = 0; i < length; i++) abiParameters.push(parseAbiParameter(params[i], {\n    structs,\n    type: 'error'\n  }));\n  return {\n    name: match.name,\n    type: 'error',\n    inputs: abiParameters\n  };\n}\nexport function parseConstructorSignature(signature, structs = {}) {\n  const match = execConstructorSignature(signature);\n  if (!match) throw new InvalidSignatureError({\n    signature,\n    type: 'constructor'\n  });\n  const params = splitParameters(match.parameters);\n  const abiParameters = [];\n  const length = params.length;\n  for (let i = 0; i < length; i++) abiParameters.push(parseAbiParameter(params[i], {\n    structs,\n    type: 'constructor'\n  }));\n  return {\n    type: 'constructor',\n    stateMutability: match.stateMutability ?? 'nonpayable',\n    inputs: abiParameters\n  };\n}\nexport function parseFallbackSignature(signature) {\n  const match = execFallbackSignature(signature);\n  if (!match) throw new InvalidSignatureError({\n    signature,\n    type: 'fallback'\n  });\n  return {\n    type: 'fallback',\n    stateMutability: match.stateMutability ?? 'nonpayable'\n  };\n}\nconst abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst dynamicIntegerRegex = /^u?int$/;\nexport function parseAbiParameter(param, options) {\n  // optional namespace cache by `type`\n  const parameterCacheKey = getParameterCacheKey(param, options?.type, options?.structs);\n  if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);\n  const isTuple = isTupleRegex.test(param);\n  const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n  if (!match) throw new InvalidParameterError({\n    param\n  });\n  if (match.name && isSolidityKeyword(match.name)) throw new SolidityProtectedKeywordError({\n    param,\n    name: match.name\n  });\n  const name = match.name ? {\n    name: match.name\n  } : {};\n  const indexed = match.modifier === 'indexed' ? {\n    indexed: true\n  } : {};\n  const structs = options?.structs ?? {};\n  let type;\n  let components = {};\n  if (isTuple) {\n    type = 'tuple';\n    const params = splitParameters(match.type);\n    const components_ = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      // remove `modifiers` from `options` to prevent from being added to tuple components\n      components_.push(parseAbiParameter(params[i], {\n        structs\n      }));\n    }\n    components = {\n      components: components_\n    };\n  } else if (match.type in structs) {\n    type = 'tuple';\n    components = {\n      components: structs[match.type]\n    };\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = `${match.type}256`;\n  } else {\n    type = match.type;\n    if (!(options?.type === 'struct') && !isSolidityType(type)) throw new UnknownSolidityTypeError({\n      type\n    });\n  }\n  if (match.modifier) {\n    // Check if modifier exists, but is not allowed (e.g. `indexed` in `functionModifiers`)\n    if (!options?.modifiers?.has?.(match.modifier)) throw new InvalidModifierError({\n      param,\n      type: options?.type,\n      modifier: match.modifier\n    });\n    // Check if resolved `type` is valid if there is a function modifier\n    if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new InvalidFunctionModifierError({\n      param,\n      type: options?.type,\n      modifier: match.modifier\n    });\n  }\n  const abiParameter = {\n    type: `${type}${match.array ?? ''}`,\n    ...name,\n    ...indexed,\n    ...components\n  };\n  parameterCache.set(parameterCacheKey, abiParameter);\n  return abiParameter;\n}\n// s/o latika for this\nexport function splitParameters(params, result = [], current = '', depth = 0) {\n  const length = params.trim().length;\n  // biome-ignore lint/correctness/noUnreachable: recursive\n  for (let i = 0; i < length; i++) {\n    const char = params[i];\n    const tail = params.slice(i + 1);\n    switch (char) {\n      case ',':\n        return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);\n      case '(':\n        return splitParameters(tail, result, `${current}${char}`, depth + 1);\n      case ')':\n        return splitParameters(tail, result, `${current}${char}`, depth - 1);\n      default:\n        return splitParameters(tail, result, `${current}${char}`, depth);\n    }\n  }\n  if (current === '') return result;\n  if (depth !== 0) throw new InvalidParenthesisError({\n    current,\n    depth\n  });\n  result.push(current.trim());\n  return result;\n}\nexport function isSolidityType(type) {\n  return type === 'address' || type === 'bool' || type === 'function' || type === 'string' || bytesRegex.test(type) || integerRegex.test(type);\n}\nconst protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\n/** @internal */\nexport function isSolidityKeyword(name) {\n  return name === 'address' || name === 'bool' || name === 'function' || name === 'string' || name === 'tuple' || bytesRegex.test(name) || integerRegex.test(name) || protectedKeywordsRegex.test(name);\n}\n/** @internal */\nexport function isValidDataLocation(type, isArray) {\n  return isArray || type === 'bytes' || type === 'string' || type === 'tuple';\n}","map":{"version":3,"names":["bytesRegex","execTyped","integerRegex","isTupleRegex","UnknownSolidityTypeError","InvalidFunctionModifierError","InvalidModifierError","InvalidParameterError","SolidityProtectedKeywordError","InvalidSignatureError","UnknownSignatureError","InvalidParenthesisError","getParameterCacheKey","parameterCache","eventModifiers","execConstructorSignature","execErrorSignature","execEventSignature","execFallbackSignature","execFunctionSignature","functionModifiers","isConstructorSignature","isErrorSignature","isEventSignature","isFallbackSignature","isFunctionSignature","isReceiveSignature","parseSignature","signature","structs","parseFunctionSignature","parseEventSignature","parseErrorSignature","parseConstructorSignature","parseFallbackSignature","type","stateMutability","match","inputParams","splitParameters","parameters","inputs","inputLength","length","i","push","parseAbiParameter","modifiers","outputs","returns","outputParams","outputLength","name","params","abiParameters","abiParameterWithoutTupleRegex","abiParameterWithTupleRegex","dynamicIntegerRegex","param","options","parameterCacheKey","has","get","isTuple","test","isSolidityKeyword","indexed","modifier","components","components_","isSolidityType","isValidDataLocation","array","abiParameter","set","result","current","depth","trim","char","tail","slice","protectedKeywordsRegex","isArray"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\abitype\\src\\human-readable\\runtime\\utils.ts"],"sourcesContent":["import type {\n  AbiItemType,\n  AbiType,\n  SolidityArray,\n  SolidityBytes,\n  SolidityString,\n  SolidityTuple,\n} from '../../abi.js'\nimport {\n  bytesRegex,\n  execTyped,\n  integerRegex,\n  isTupleRegex,\n} from '../../regex.js'\nimport { UnknownSolidityTypeError } from '../errors/abiItem.js'\nimport {\n  InvalidFunctionModifierError,\n  InvalidModifierError,\n  InvalidParameterError,\n  SolidityProtectedKeywordError,\n} from '../errors/abiParameter.js'\nimport {\n  InvalidSignatureError,\n  UnknownSignatureError,\n} from '../errors/signature.js'\nimport { InvalidParenthesisError } from '../errors/splitParameters.js'\nimport type { FunctionModifier, Modifier } from '../types/signatures.js'\nimport type { StructLookup } from '../types/structs.js'\nimport { getParameterCacheKey, parameterCache } from './cache.js'\nimport {\n  eventModifiers,\n  execConstructorSignature,\n  execErrorSignature,\n  execEventSignature,\n  execFallbackSignature,\n  execFunctionSignature,\n  functionModifiers,\n  isConstructorSignature,\n  isErrorSignature,\n  isEventSignature,\n  isFallbackSignature,\n  isFunctionSignature,\n  isReceiveSignature,\n} from './signatures.js'\n\nexport function parseSignature(signature: string, structs: StructLookup = {}) {\n  if (isFunctionSignature(signature))\n    return parseFunctionSignature(signature, structs)\n\n  if (isEventSignature(signature))\n    return parseEventSignature(signature, structs)\n\n  if (isErrorSignature(signature))\n    return parseErrorSignature(signature, structs)\n\n  if (isConstructorSignature(signature))\n    return parseConstructorSignature(signature, structs)\n\n  if (isFallbackSignature(signature)) return parseFallbackSignature(signature)\n\n  if (isReceiveSignature(signature))\n    return {\n      type: 'receive',\n      stateMutability: 'payable',\n    }\n\n  throw new UnknownSignatureError({ signature })\n}\n\nexport function parseFunctionSignature(\n  signature: string,\n  structs: StructLookup = {},\n) {\n  const match = execFunctionSignature(signature)\n  if (!match) throw new InvalidSignatureError({ signature, type: 'function' })\n\n  const inputParams = splitParameters(match.parameters)\n  const inputs = []\n  const inputLength = inputParams.length\n  for (let i = 0; i < inputLength; i++) {\n    inputs.push(\n      parseAbiParameter(inputParams[i]!, {\n        modifiers: functionModifiers,\n        structs,\n        type: 'function',\n      }),\n    )\n  }\n\n  const outputs = []\n  if (match.returns) {\n    const outputParams = splitParameters(match.returns)\n    const outputLength = outputParams.length\n    for (let i = 0; i < outputLength; i++) {\n      outputs.push(\n        parseAbiParameter(outputParams[i]!, {\n          modifiers: functionModifiers,\n          structs,\n          type: 'function',\n        }),\n      )\n    }\n  }\n\n  return {\n    name: match.name,\n    type: 'function',\n    stateMutability: match.stateMutability ?? 'nonpayable',\n    inputs,\n    outputs,\n  }\n}\n\nexport function parseEventSignature(\n  signature: string,\n  structs: StructLookup = {},\n) {\n  const match = execEventSignature(signature)\n  if (!match) throw new InvalidSignatureError({ signature, type: 'event' })\n\n  const params = splitParameters(match.parameters)\n  const abiParameters = []\n  const length = params.length\n  for (let i = 0; i < length; i++)\n    abiParameters.push(\n      parseAbiParameter(params[i]!, {\n        modifiers: eventModifiers,\n        structs,\n        type: 'event',\n      }),\n    )\n  return { name: match.name, type: 'event', inputs: abiParameters }\n}\n\nexport function parseErrorSignature(\n  signature: string,\n  structs: StructLookup = {},\n) {\n  const match = execErrorSignature(signature)\n  if (!match) throw new InvalidSignatureError({ signature, type: 'error' })\n\n  const params = splitParameters(match.parameters)\n  const abiParameters = []\n  const length = params.length\n  for (let i = 0; i < length; i++)\n    abiParameters.push(\n      parseAbiParameter(params[i]!, { structs, type: 'error' }),\n    )\n  return { name: match.name, type: 'error', inputs: abiParameters }\n}\n\nexport function parseConstructorSignature(\n  signature: string,\n  structs: StructLookup = {},\n) {\n  const match = execConstructorSignature(signature)\n  if (!match)\n    throw new InvalidSignatureError({ signature, type: 'constructor' })\n\n  const params = splitParameters(match.parameters)\n  const abiParameters = []\n  const length = params.length\n  for (let i = 0; i < length; i++)\n    abiParameters.push(\n      parseAbiParameter(params[i]!, { structs, type: 'constructor' }),\n    )\n  return {\n    type: 'constructor',\n    stateMutability: match.stateMutability ?? 'nonpayable',\n    inputs: abiParameters,\n  }\n}\n\nexport function parseFallbackSignature(signature: string) {\n  const match = execFallbackSignature(signature)\n  if (!match) throw new InvalidSignatureError({ signature, type: 'fallback' })\n\n  return {\n    type: 'fallback',\n    stateMutability: match.stateMutability ?? 'nonpayable',\n  }\n}\n\nconst abiParameterWithoutTupleRegex =\n  /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/\nconst abiParameterWithTupleRegex =\n  /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/\nconst dynamicIntegerRegex = /^u?int$/\n\ntype ParseOptions = {\n  modifiers?: Set<Modifier>\n  structs?: StructLookup\n  type?: AbiItemType | 'struct'\n}\n\nexport function parseAbiParameter(param: string, options?: ParseOptions) {\n  // optional namespace cache by `type`\n  const parameterCacheKey = getParameterCacheKey(\n    param,\n    options?.type,\n    options?.structs,\n  )\n  if (parameterCache.has(parameterCacheKey))\n    return parameterCache.get(parameterCacheKey)!\n\n  const isTuple = isTupleRegex.test(param)\n  const match = execTyped<{\n    array?: string\n    modifier?: Modifier\n    name?: string\n    type: string\n  }>(\n    isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex,\n    param,\n  )\n  if (!match) throw new InvalidParameterError({ param })\n\n  if (match.name && isSolidityKeyword(match.name))\n    throw new SolidityProtectedKeywordError({ param, name: match.name })\n\n  const name = match.name ? { name: match.name } : {}\n  const indexed = match.modifier === 'indexed' ? { indexed: true } : {}\n  const structs = options?.structs ?? {}\n  let type: string\n  let components = {}\n  if (isTuple) {\n    type = 'tuple'\n    const params = splitParameters(match.type)\n    const components_ = []\n    const length = params.length\n    for (let i = 0; i < length; i++) {\n      // remove `modifiers` from `options` to prevent from being added to tuple components\n      components_.push(parseAbiParameter(params[i]!, { structs }))\n    }\n    components = { components: components_ }\n  } else if (match.type in structs) {\n    type = 'tuple'\n    components = { components: structs[match.type] }\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = `${match.type}256`\n  } else {\n    type = match.type\n    if (!(options?.type === 'struct') && !isSolidityType(type))\n      throw new UnknownSolidityTypeError({ type })\n  }\n\n  if (match.modifier) {\n    // Check if modifier exists, but is not allowed (e.g. `indexed` in `functionModifiers`)\n    if (!options?.modifiers?.has?.(match.modifier))\n      throw new InvalidModifierError({\n        param,\n        type: options?.type,\n        modifier: match.modifier,\n      })\n\n    // Check if resolved `type` is valid if there is a function modifier\n    if (\n      functionModifiers.has(match.modifier as FunctionModifier) &&\n      !isValidDataLocation(type, !!match.array)\n    )\n      throw new InvalidFunctionModifierError({\n        param,\n        type: options?.type,\n        modifier: match.modifier,\n      })\n  }\n\n  const abiParameter = {\n    type: `${type}${match.array ?? ''}`,\n    ...name,\n    ...indexed,\n    ...components,\n  }\n  parameterCache.set(parameterCacheKey, abiParameter)\n  return abiParameter\n}\n\n// s/o latika for this\nexport function splitParameters(\n  params: string,\n  result: string[] = [],\n  current = '',\n  depth = 0,\n): readonly string[] {\n  const length = params.trim().length\n  // biome-ignore lint/correctness/noUnreachable: recursive\n  for (let i = 0; i < length; i++) {\n    const char = params[i]\n    const tail = params.slice(i + 1)\n    switch (char) {\n      case ',':\n        return depth === 0\n          ? splitParameters(tail, [...result, current.trim()])\n          : splitParameters(tail, result, `${current}${char}`, depth)\n      case '(':\n        return splitParameters(tail, result, `${current}${char}`, depth + 1)\n      case ')':\n        return splitParameters(tail, result, `${current}${char}`, depth - 1)\n      default:\n        return splitParameters(tail, result, `${current}${char}`, depth)\n    }\n  }\n\n  if (current === '') return result\n  if (depth !== 0) throw new InvalidParenthesisError({ current, depth })\n\n  result.push(current.trim())\n  return result\n}\n\nexport function isSolidityType(\n  type: string,\n): type is Exclude<AbiType, SolidityTuple | SolidityArray> {\n  return (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'function' ||\n    type === 'string' ||\n    bytesRegex.test(type) ||\n    integerRegex.test(type)\n  )\n}\n\nconst protectedKeywordsRegex =\n  /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/\n\n/** @internal */\nexport function isSolidityKeyword(name: string) {\n  return (\n    name === 'address' ||\n    name === 'bool' ||\n    name === 'function' ||\n    name === 'string' ||\n    name === 'tuple' ||\n    bytesRegex.test(name) ||\n    integerRegex.test(name) ||\n    protectedKeywordsRegex.test(name)\n  )\n}\n\n/** @internal */\nexport function isValidDataLocation(\n  type: string,\n  isArray: boolean,\n): type is Exclude<\n  AbiType,\n  SolidityString | Extract<SolidityBytes, 'bytes'> | SolidityArray\n> {\n  return isArray || type === 'bytes' || type === 'string' || type === 'tuple'\n}\n"],"mappings":"AAQA,SACEA,UAAU,EACVC,SAAS,EACTC,YAAY,EACZC,YAAY,QACP,gBAAgB;AACvB,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SACEC,4BAA4B,EAC5BC,oBAAoB,EACpBC,qBAAqB,EACrBC,6BAA6B,QACxB,2BAA2B;AAClC,SACEC,qBAAqB,EACrBC,qBAAqB,QAChB,wBAAwB;AAC/B,SAASC,uBAAuB,QAAQ,8BAA8B;AAGtE,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,YAAY;AACjE,SACEC,cAAc,EACdC,wBAAwB,EACxBC,kBAAkB,EAClBC,kBAAkB,EAClBC,qBAAqB,EACrBC,qBAAqB,EACrBC,iBAAiB,EACjBC,sBAAsB,EACtBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,kBAAkB,QACb,iBAAiB;AAExB,OAAM,SAAUC,cAAcA,CAACC,SAAiB,EAAEC,OAAA,GAAwB,EAAE;EAC1E,IAAIJ,mBAAmB,CAACG,SAAS,CAAC,EAChC,OAAOE,sBAAsB,CAACF,SAAS,EAAEC,OAAO,CAAC;EAEnD,IAAIN,gBAAgB,CAACK,SAAS,CAAC,EAC7B,OAAOG,mBAAmB,CAACH,SAAS,EAAEC,OAAO,CAAC;EAEhD,IAAIP,gBAAgB,CAACM,SAAS,CAAC,EAC7B,OAAOI,mBAAmB,CAACJ,SAAS,EAAEC,OAAO,CAAC;EAEhD,IAAIR,sBAAsB,CAACO,SAAS,CAAC,EACnC,OAAOK,yBAAyB,CAACL,SAAS,EAAEC,OAAO,CAAC;EAEtD,IAAIL,mBAAmB,CAACI,SAAS,CAAC,EAAE,OAAOM,sBAAsB,CAACN,SAAS,CAAC;EAE5E,IAAIF,kBAAkB,CAACE,SAAS,CAAC,EAC/B,OAAO;IACLO,IAAI,EAAE,SAAS;IACfC,eAAe,EAAE;GAClB;EAEH,MAAM,IAAI1B,qBAAqB,CAAC;IAAEkB;EAAS,CAAE,CAAC;AAChD;AAEA,OAAM,SAAUE,sBAAsBA,CACpCF,SAAiB,EACjBC,OAAA,GAAwB,EAAE;EAE1B,MAAMQ,KAAK,GAAGlB,qBAAqB,CAACS,SAAS,CAAC;EAC9C,IAAI,CAACS,KAAK,EAAE,MAAM,IAAI5B,qBAAqB,CAAC;IAAEmB,SAAS;IAAEO,IAAI,EAAE;EAAU,CAAE,CAAC;EAE5E,MAAMG,WAAW,GAAGC,eAAe,CAACF,KAAK,CAACG,UAAU,CAAC;EACrD,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,WAAW,GAAGJ,WAAW,CAACK,MAAM;EACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,EAAEE,CAAC,EAAE,EAAE;IACpCH,MAAM,CAACI,IAAI,CACTC,iBAAiB,CAACR,WAAW,CAACM,CAAC,CAAE,EAAE;MACjCG,SAAS,EAAE3B,iBAAiB;MAC5BS,OAAO;MACPM,IAAI,EAAE;KACP,CAAC,CACH;EACH;EAEA,MAAMa,OAAO,GAAG,EAAE;EAClB,IAAIX,KAAK,CAACY,OAAO,EAAE;IACjB,MAAMC,YAAY,GAAGX,eAAe,CAACF,KAAK,CAACY,OAAO,CAAC;IACnD,MAAME,YAAY,GAAGD,YAAY,CAACP,MAAM;IACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,YAAY,EAAEP,CAAC,EAAE,EAAE;MACrCI,OAAO,CAACH,IAAI,CACVC,iBAAiB,CAACI,YAAY,CAACN,CAAC,CAAE,EAAE;QAClCG,SAAS,EAAE3B,iBAAiB;QAC5BS,OAAO;QACPM,IAAI,EAAE;OACP,CAAC,CACH;IACH;EACF;EAEA,OAAO;IACLiB,IAAI,EAAEf,KAAK,CAACe,IAAI;IAChBjB,IAAI,EAAE,UAAU;IAChBC,eAAe,EAAEC,KAAK,CAACD,eAAe,IAAI,YAAY;IACtDK,MAAM;IACNO;GACD;AACH;AAEA,OAAM,SAAUjB,mBAAmBA,CACjCH,SAAiB,EACjBC,OAAA,GAAwB,EAAE;EAE1B,MAAMQ,KAAK,GAAGpB,kBAAkB,CAACW,SAAS,CAAC;EAC3C,IAAI,CAACS,KAAK,EAAE,MAAM,IAAI5B,qBAAqB,CAAC;IAAEmB,SAAS;IAAEO,IAAI,EAAE;EAAO,CAAE,CAAC;EAEzE,MAAMkB,MAAM,GAAGd,eAAe,CAACF,KAAK,CAACG,UAAU,CAAC;EAChD,MAAMc,aAAa,GAAG,EAAE;EACxB,MAAMX,MAAM,GAAGU,MAAM,CAACV,MAAM;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAC7BU,aAAa,CAACT,IAAI,CAChBC,iBAAiB,CAACO,MAAM,CAACT,CAAC,CAAE,EAAE;IAC5BG,SAAS,EAAEjC,cAAc;IACzBe,OAAO;IACPM,IAAI,EAAE;GACP,CAAC,CACH;EACH,OAAO;IAAEiB,IAAI,EAAEf,KAAK,CAACe,IAAI;IAAEjB,IAAI,EAAE,OAAO;IAAEM,MAAM,EAAEa;EAAa,CAAE;AACnE;AAEA,OAAM,SAAUtB,mBAAmBA,CACjCJ,SAAiB,EACjBC,OAAA,GAAwB,EAAE;EAE1B,MAAMQ,KAAK,GAAGrB,kBAAkB,CAACY,SAAS,CAAC;EAC3C,IAAI,CAACS,KAAK,EAAE,MAAM,IAAI5B,qBAAqB,CAAC;IAAEmB,SAAS;IAAEO,IAAI,EAAE;EAAO,CAAE,CAAC;EAEzE,MAAMkB,MAAM,GAAGd,eAAe,CAACF,KAAK,CAACG,UAAU,CAAC;EAChD,MAAMc,aAAa,GAAG,EAAE;EACxB,MAAMX,MAAM,GAAGU,MAAM,CAACV,MAAM;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAC7BU,aAAa,CAACT,IAAI,CAChBC,iBAAiB,CAACO,MAAM,CAACT,CAAC,CAAE,EAAE;IAAEf,OAAO;IAAEM,IAAI,EAAE;EAAO,CAAE,CAAC,CAC1D;EACH,OAAO;IAAEiB,IAAI,EAAEf,KAAK,CAACe,IAAI;IAAEjB,IAAI,EAAE,OAAO;IAAEM,MAAM,EAAEa;EAAa,CAAE;AACnE;AAEA,OAAM,SAAUrB,yBAAyBA,CACvCL,SAAiB,EACjBC,OAAA,GAAwB,EAAE;EAE1B,MAAMQ,KAAK,GAAGtB,wBAAwB,CAACa,SAAS,CAAC;EACjD,IAAI,CAACS,KAAK,EACR,MAAM,IAAI5B,qBAAqB,CAAC;IAAEmB,SAAS;IAAEO,IAAI,EAAE;EAAa,CAAE,CAAC;EAErE,MAAMkB,MAAM,GAAGd,eAAe,CAACF,KAAK,CAACG,UAAU,CAAC;EAChD,MAAMc,aAAa,GAAG,EAAE;EACxB,MAAMX,MAAM,GAAGU,MAAM,CAACV,MAAM;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAC7BU,aAAa,CAACT,IAAI,CAChBC,iBAAiB,CAACO,MAAM,CAACT,CAAC,CAAE,EAAE;IAAEf,OAAO;IAAEM,IAAI,EAAE;EAAa,CAAE,CAAC,CAChE;EACH,OAAO;IACLA,IAAI,EAAE,aAAa;IACnBC,eAAe,EAAEC,KAAK,CAACD,eAAe,IAAI,YAAY;IACtDK,MAAM,EAAEa;GACT;AACH;AAEA,OAAM,SAAUpB,sBAAsBA,CAACN,SAAiB;EACtD,MAAMS,KAAK,GAAGnB,qBAAqB,CAACU,SAAS,CAAC;EAC9C,IAAI,CAACS,KAAK,EAAE,MAAM,IAAI5B,qBAAqB,CAAC;IAAEmB,SAAS;IAAEO,IAAI,EAAE;EAAU,CAAE,CAAC;EAE5E,OAAO;IACLA,IAAI,EAAE,UAAU;IAChBC,eAAe,EAAEC,KAAK,CAACD,eAAe,IAAI;GAC3C;AACH;AAEA,MAAMmB,6BAA6B,GACjC,4JAA4J;AAC9J,MAAMC,0BAA0B,GAC9B,2IAA2I;AAC7I,MAAMC,mBAAmB,GAAG,SAAS;AAQrC,OAAM,SAAUX,iBAAiBA,CAACY,KAAa,EAAEC,OAAsB;EACrE;EACA,MAAMC,iBAAiB,GAAGhD,oBAAoB,CAC5C8C,KAAK,EACLC,OAAO,EAAExB,IAAI,EACbwB,OAAO,EAAE9B,OAAO,CACjB;EACD,IAAIhB,cAAc,CAACgD,GAAG,CAACD,iBAAiB,CAAC,EACvC,OAAO/C,cAAc,CAACiD,GAAG,CAACF,iBAAiB,CAAE;EAE/C,MAAMG,OAAO,GAAG5D,YAAY,CAAC6D,IAAI,CAACN,KAAK,CAAC;EACxC,MAAMrB,KAAK,GAAGpC,SAAS,CAMrB8D,OAAO,GAAGP,0BAA0B,GAAGD,6BAA6B,EACpEG,KAAK,CACN;EACD,IAAI,CAACrB,KAAK,EAAE,MAAM,IAAI9B,qBAAqB,CAAC;IAAEmD;EAAK,CAAE,CAAC;EAEtD,IAAIrB,KAAK,CAACe,IAAI,IAAIa,iBAAiB,CAAC5B,KAAK,CAACe,IAAI,CAAC,EAC7C,MAAM,IAAI5C,6BAA6B,CAAC;IAAEkD,KAAK;IAAEN,IAAI,EAAEf,KAAK,CAACe;EAAI,CAAE,CAAC;EAEtE,MAAMA,IAAI,GAAGf,KAAK,CAACe,IAAI,GAAG;IAAEA,IAAI,EAAEf,KAAK,CAACe;EAAI,CAAE,GAAG,EAAE;EACnD,MAAMc,OAAO,GAAG7B,KAAK,CAAC8B,QAAQ,KAAK,SAAS,GAAG;IAAED,OAAO,EAAE;EAAI,CAAE,GAAG,EAAE;EACrE,MAAMrC,OAAO,GAAG8B,OAAO,EAAE9B,OAAO,IAAI,EAAE;EACtC,IAAIM,IAAY;EAChB,IAAIiC,UAAU,GAAG,EAAE;EACnB,IAAIL,OAAO,EAAE;IACX5B,IAAI,GAAG,OAAO;IACd,MAAMkB,MAAM,GAAGd,eAAe,CAACF,KAAK,CAACF,IAAI,CAAC;IAC1C,MAAMkC,WAAW,GAAG,EAAE;IACtB,MAAM1B,MAAM,GAAGU,MAAM,CAACV,MAAM;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B;MACAyB,WAAW,CAACxB,IAAI,CAACC,iBAAiB,CAACO,MAAM,CAACT,CAAC,CAAE,EAAE;QAAEf;MAAO,CAAE,CAAC,CAAC;IAC9D;IACAuC,UAAU,GAAG;MAAEA,UAAU,EAAEC;IAAW,CAAE;EAC1C,CAAC,MAAM,IAAIhC,KAAK,CAACF,IAAI,IAAIN,OAAO,EAAE;IAChCM,IAAI,GAAG,OAAO;IACdiC,UAAU,GAAG;MAAEA,UAAU,EAAEvC,OAAO,CAACQ,KAAK,CAACF,IAAI;IAAC,CAAE;EAClD,CAAC,MAAM,IAAIsB,mBAAmB,CAACO,IAAI,CAAC3B,KAAK,CAACF,IAAI,CAAC,EAAE;IAC/CA,IAAI,GAAG,GAAGE,KAAK,CAACF,IAAI,KAAK;EAC3B,CAAC,MAAM;IACLA,IAAI,GAAGE,KAAK,CAACF,IAAI;IACjB,IAAI,EAAEwB,OAAO,EAAExB,IAAI,KAAK,QAAQ,CAAC,IAAI,CAACmC,cAAc,CAACnC,IAAI,CAAC,EACxD,MAAM,IAAI/B,wBAAwB,CAAC;MAAE+B;IAAI,CAAE,CAAC;EAChD;EAEA,IAAIE,KAAK,CAAC8B,QAAQ,EAAE;IAClB;IACA,IAAI,CAACR,OAAO,EAAEZ,SAAS,EAAEc,GAAG,GAAGxB,KAAK,CAAC8B,QAAQ,CAAC,EAC5C,MAAM,IAAI7D,oBAAoB,CAAC;MAC7BoD,KAAK;MACLvB,IAAI,EAAEwB,OAAO,EAAExB,IAAI;MACnBgC,QAAQ,EAAE9B,KAAK,CAAC8B;KACjB,CAAC;IAEJ;IACA,IACE/C,iBAAiB,CAACyC,GAAG,CAACxB,KAAK,CAAC8B,QAA4B,CAAC,IACzD,CAACI,mBAAmB,CAACpC,IAAI,EAAE,CAAC,CAACE,KAAK,CAACmC,KAAK,CAAC,EAEzC,MAAM,IAAInE,4BAA4B,CAAC;MACrCqD,KAAK;MACLvB,IAAI,EAAEwB,OAAO,EAAExB,IAAI;MACnBgC,QAAQ,EAAE9B,KAAK,CAAC8B;KACjB,CAAC;EACN;EAEA,MAAMM,YAAY,GAAG;IACnBtC,IAAI,EAAE,GAAGA,IAAI,GAAGE,KAAK,CAACmC,KAAK,IAAI,EAAE,EAAE;IACnC,GAAGpB,IAAI;IACP,GAAGc,OAAO;IACV,GAAGE;GACJ;EACDvD,cAAc,CAAC6D,GAAG,CAACd,iBAAiB,EAAEa,YAAY,CAAC;EACnD,OAAOA,YAAY;AACrB;AAEA;AACA,OAAM,SAAUlC,eAAeA,CAC7Bc,MAAc,EACdsB,MAAA,GAAmB,EAAE,EACrBC,OAAO,GAAG,EAAE,EACZC,KAAK,GAAG,CAAC;EAET,MAAMlC,MAAM,GAAGU,MAAM,CAACyB,IAAI,EAAE,CAACnC,MAAM;EACnC;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMmC,IAAI,GAAG1B,MAAM,CAACT,CAAC,CAAC;IACtB,MAAMoC,IAAI,GAAG3B,MAAM,CAAC4B,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IAChC,QAAQmC,IAAI;MACV,KAAK,GAAG;QACN,OAAOF,KAAK,KAAK,CAAC,GACdtC,eAAe,CAACyC,IAAI,EAAE,CAAC,GAAGL,MAAM,EAAEC,OAAO,CAACE,IAAI,EAAE,CAAC,CAAC,GAClDvC,eAAe,CAACyC,IAAI,EAAEL,MAAM,EAAE,GAAGC,OAAO,GAAGG,IAAI,EAAE,EAAEF,KAAK,CAAC;MAC/D,KAAK,GAAG;QACN,OAAOtC,eAAe,CAACyC,IAAI,EAAEL,MAAM,EAAE,GAAGC,OAAO,GAAGG,IAAI,EAAE,EAAEF,KAAK,GAAG,CAAC,CAAC;MACtE,KAAK,GAAG;QACN,OAAOtC,eAAe,CAACyC,IAAI,EAAEL,MAAM,EAAE,GAAGC,OAAO,GAAGG,IAAI,EAAE,EAAEF,KAAK,GAAG,CAAC,CAAC;MACtE;QACE,OAAOtC,eAAe,CAACyC,IAAI,EAAEL,MAAM,EAAE,GAAGC,OAAO,GAAGG,IAAI,EAAE,EAAEF,KAAK,CAAC;IACpE;EACF;EAEA,IAAID,OAAO,KAAK,EAAE,EAAE,OAAOD,MAAM;EACjC,IAAIE,KAAK,KAAK,CAAC,EAAE,MAAM,IAAIlE,uBAAuB,CAAC;IAAEiE,OAAO;IAAEC;EAAK,CAAE,CAAC;EAEtEF,MAAM,CAAC9B,IAAI,CAAC+B,OAAO,CAACE,IAAI,EAAE,CAAC;EAC3B,OAAOH,MAAM;AACf;AAEA,OAAM,SAAUL,cAAcA,CAC5BnC,IAAY;EAEZ,OACEA,IAAI,KAAK,SAAS,IAClBA,IAAI,KAAK,MAAM,IACfA,IAAI,KAAK,UAAU,IACnBA,IAAI,KAAK,QAAQ,IACjBnC,UAAU,CAACgE,IAAI,CAAC7B,IAAI,CAAC,IACrBjC,YAAY,CAAC8D,IAAI,CAAC7B,IAAI,CAAC;AAE3B;AAEA,MAAM+C,sBAAsB,GAC1B,uZAAuZ;AAEzZ;AACA,OAAM,SAAUjB,iBAAiBA,CAACb,IAAY;EAC5C,OACEA,IAAI,KAAK,SAAS,IAClBA,IAAI,KAAK,MAAM,IACfA,IAAI,KAAK,UAAU,IACnBA,IAAI,KAAK,QAAQ,IACjBA,IAAI,KAAK,OAAO,IAChBpD,UAAU,CAACgE,IAAI,CAACZ,IAAI,CAAC,IACrBlD,YAAY,CAAC8D,IAAI,CAACZ,IAAI,CAAC,IACvB8B,sBAAsB,CAAClB,IAAI,CAACZ,IAAI,CAAC;AAErC;AAEA;AACA,OAAM,SAAUmB,mBAAmBA,CACjCpC,IAAY,EACZgD,OAAgB;EAKhB,OAAOA,OAAO,IAAIhD,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,OAAO;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}