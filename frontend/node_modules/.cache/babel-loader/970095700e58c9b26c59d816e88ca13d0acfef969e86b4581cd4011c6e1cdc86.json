{"ast":null,"code":"'use strict';\n\nvar callBound = require('call-bound');\nvar safeRegexTest = require('safe-regex-test');\nvar isFnRegex = safeRegexTest(/^\\s*(?:function)?\\*/);\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar getProto = require('get-proto');\nvar toStr = callBound('Object.prototype.toString');\nvar fnToStr = callBound('Function.prototype.toString');\nvar getGeneratorFunc = function () {\n  // eslint-disable-line consistent-return\n  if (!hasToStringTag) {\n    return false;\n  }\n  try {\n    return Function('return function*() {}')();\n  } catch (e) {}\n};\n/** @type {undefined | false | null | GeneratorFunctionConstructor} */\nvar GeneratorFunction;\n\n/** @type {import('.')} */\nmodule.exports = function isGeneratorFunction(fn) {\n  if (typeof fn !== 'function') {\n    return false;\n  }\n  if (isFnRegex(fnToStr(fn))) {\n    return true;\n  }\n  if (!hasToStringTag) {\n    var str = toStr(fn);\n    return str === '[object GeneratorFunction]';\n  }\n  if (!getProto) {\n    return false;\n  }\n  if (typeof GeneratorFunction === 'undefined') {\n    var generatorFunc = getGeneratorFunc();\n    GeneratorFunction = generatorFunc\n    // eslint-disable-next-line no-extra-parens\n    ? (/** @type {GeneratorFunctionConstructor} */getProto(generatorFunc)) : false;\n  }\n  return getProto(fn) === GeneratorFunction;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}