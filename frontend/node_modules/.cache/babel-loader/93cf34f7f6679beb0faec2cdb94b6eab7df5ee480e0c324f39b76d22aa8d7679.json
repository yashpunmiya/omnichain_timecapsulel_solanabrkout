{"ast":null,"code":"class e {}\nclass o extends e {\n  constructor(c) {\n    super();\n  }\n}\nclass n extends e {\n  constructor() {\n    super();\n  }\n}\nclass r extends n {\n  constructor(c) {\n    super();\n  }\n}\nexport { n as IBaseJsonRpcProvider, e as IEvents, o as IJsonRpcConnection, r as IJsonRpcProvider };","map":{"version":3,"names":["e","o","constructor","c","n","r","IBaseJsonRpcProvider","IEvents","IJsonRpcConnection","IJsonRpcProvider"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\jsonrpc-types\\src\\misc.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\jsonrpc-types\\src\\provider.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\nexport abstract class IEvents {\n  public abstract events: EventEmitter;\n\n  // events\n  public abstract on(event: string, listener: any): void;\n  public abstract once(event: string, listener: any): void;\n  public abstract off(event: string, listener: any): void;\n  public abstract removeListener(event: string, listener: any): void;\n}\n","import { JsonRpcPayload, JsonRpcRequest, RequestArguments } from \"./jsonrpc\";\nimport { IEvents } from \"./misc\";\n\nexport abstract class IJsonRpcConnection extends IEvents {\n  public abstract connected: boolean;\n  public abstract connecting: boolean;\n  // @ts-ignore - opts is not used in abstract class constructor\n  constructor(opts?: any) {\n    super();\n  }\n\n  public abstract open(opts?: any): Promise<void>;\n  public abstract close(): Promise<void>;\n  public abstract send(payload: JsonRpcPayload, context?: any): Promise<void>;\n}\n\nexport abstract class IBaseJsonRpcProvider extends IEvents {\n  // eslint-disable-next-line no-useless-constructor\n  constructor() {\n    super();\n  }\n\n  public abstract connect(params?: any): Promise<void>;\n\n  public abstract disconnect(): Promise<void>;\n\n  public abstract request<Result = any, Params = any>(\n    request: RequestArguments<Params>,\n    context?: any,\n  ): Promise<Result>;\n\n  // ---------- Protected ----------------------------------------------- //\n\n  protected abstract requestStrict<Result = any, Params = any>(\n    request: JsonRpcRequest<Params>,\n    context?: any,\n  ): Promise<Result>;\n}\n\nexport abstract class IJsonRpcProvider extends IBaseJsonRpcProvider {\n  public abstract connection: IJsonRpcConnection;\n\n  // @ts-ignore - connection is not used in abstract class constructor\n  constructor(connection: string | IJsonRpcConnection) {\n    super();\n  }\n\n  public abstract connect(connection?: string | IJsonRpcConnection): Promise<void>;\n\n  // ---------- Protected ----------------------------------------------- //\n\n  protected abstract setConnection(connection?: string | IJsonRpcConnection): IJsonRpcConnection;\n\n  protected abstract onPayload(payload: JsonRpcPayload): void;\n\n  protected abstract open(connection?: string | IJsonRpcConnection): Promise<void>;\n\n  protected abstract close(): Promise<void>;\n}\n"],"mappings":"AAEO,MAAeA,CAAA;AAAA,MAAQC,CAAA,SAAAD,CAAA;EAAAE,YAAAC,CAAA;IAAA;EAAA;AAAA;AAAA,MAAAC,CAAA,SAAAJ,CAAA;EAAAE,YAAA;IAAA;EAAA;AAAA;AAAA,MAAAG,CAAA,SAAAD,CAAA;EAAAF,YAAAC,CAAA;IAAA;EAAA;AAAA;AAAA,SAAAC,CAAA,IAAAE,oBAAA,EAAAN,CAAA,IAAAO,OAAA,EAAAN,CAAA,IAAAO,kBAAA,EAAAH,CAAA,IAAAI,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}