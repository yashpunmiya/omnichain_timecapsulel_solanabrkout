{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolanaComposedTransaction = exports.SolanaComposeTransaction = exports.SolanaProgramName = exports.SolanaSignedTransaction = exports.SolanaSignTransaction = exports.SolanaTxAdditionalInfo = exports.SolanaTxTokenAccountInfo = exports.SolanaPublicKey = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst params_1 = require(\"../../params\");\nexports.SolanaPublicKey = schema_utils_1.Type.Intersect([params_1.PublicKey, schema_utils_1.Type.Object({\n  publicKey: schema_utils_1.Type.String()\n})]);\nexports.SolanaTxTokenAccountInfo = schema_utils_1.Type.Object({\n  baseAddress: schema_utils_1.Type.String(),\n  tokenProgram: schema_utils_1.Type.String(),\n  tokenMint: schema_utils_1.Type.String(),\n  tokenAccount: schema_utils_1.Type.String()\n});\nexports.SolanaTxAdditionalInfo = schema_utils_1.Type.Object({\n  tokenAccountsInfos: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.SolanaTxTokenAccountInfo, {\n    minItems: 1\n  }))\n});\nexports.SolanaSignTransaction = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())]),\n  serializedTx: schema_utils_1.Type.String(),\n  additionalInfo: schema_utils_1.Type.Optional(exports.SolanaTxAdditionalInfo),\n  serialize: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n});\nexports.SolanaSignedTransaction = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  serializedTx: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.SolanaProgramName = schema_utils_1.Type.Union([schema_utils_1.Type.Literal('spl-token'), schema_utils_1.Type.Literal('spl-token-2022')]);\nexports.SolanaComposeTransaction = schema_utils_1.Type.Object({\n  fromAddress: schema_utils_1.Type.String(),\n  toAddress: schema_utils_1.Type.String(),\n  amount: schema_utils_1.Type.String(),\n  blockHash: schema_utils_1.Type.String(),\n  lastValidBlockHeight: schema_utils_1.Type.Number(),\n  priorityFees: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    computeUnitPrice: schema_utils_1.Type.String(),\n    computeUnitLimit: schema_utils_1.Type.String()\n  })),\n  token: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    mint: schema_utils_1.Type.String(),\n    program: exports.SolanaProgramName,\n    decimals: schema_utils_1.Type.Number(),\n    accounts: schema_utils_1.Type.Array(schema_utils_1.Type.Object({\n      publicKey: schema_utils_1.Type.String(),\n      balance: schema_utils_1.Type.String()\n    }))\n  })),\n  coin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.SolanaComposedTransaction = schema_utils_1.Type.Object({\n  serializedTx: schema_utils_1.Type.String(),\n  additionalInfo: schema_utils_1.Type.Object({\n    newAccountProgramName: schema_utils_1.Type.Optional(exports.SolanaProgramName),\n    tokenAccountInfo: schema_utils_1.Type.Optional(exports.SolanaTxTokenAccountInfo)\n  })\n});\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}