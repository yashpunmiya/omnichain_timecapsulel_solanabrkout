{"ast":null,"code":"import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { setAPIKey, setEmbedHost, post } from '@toruslabs/http-helpers';\nimport stringify from 'json-stable-stringify';\nimport { ec as ec$1 } from 'elliptic';\nimport { keccak256 as keccak256$1 } from 'ethereum-cryptography/keccak';\nimport { encrypt, getPublic, decrypt } from '@toruslabs/eccrypto';\nfunction keccak256(a) {\n  return Buffer.from(keccak256$1(a));\n}\nconst ec = new ec$1(\"secp256k1\");\nclass MetadataStorageLayer {\n  // ms\n\n  constructor() {\n    let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n    let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _defineProperty(this, \"metadataHost\", void 0);\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey);\n  }\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost);\n  }\n  generateMetadataParams(message, privateKeyHex) {\n    var _sig$recoveryParam$to, _sig$recoveryParam;\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n    };\n    const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")));\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam$to = (_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2)) !== null && _sig$recoveryParam$to !== void 0 ? _sig$recoveryParam$to : \"00\"), \"hex\").toString(\"base64\")\n    };\n  }\n  generatePubKeyParams(privateKeyHex) {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64)\n    };\n  }\n  async setMetadata(data, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, data), {}, {\n      namespace\n    }) : data;\n    const metadataResponse = await post(`${this.metadataHost}/set`, params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n  async getMetadata(pubKey, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, pubKey), {}, {\n      namespace\n    }) : pubKey;\n    const metadataResponse = await post(`${this.metadataHost}/get`, params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n}\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\")\n  };\n}\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\")\n  };\n}\nasync function encryptData(privKeyHex, d) {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\nasync function decryptData(privKeyHex, d) {\n  const encParamsHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data = JSON.parse(serializedDec);\n  return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n  const keyPair = ec.keyFromPrivate(privKeyHex, \"hex\");\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({\n    pub_key_X: pubKey.getX().toString(16, 64),\n    pub_key_Y: pubKey.getY().toString(16, 64)\n  }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData(privKeyHex, serializedData);\n  return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\nexport { decryptData, MetadataStorageLayer as default, ec, encParamsBufToHex, encParamsHexToBuf, encryptAndSetData, encryptData, getAndDecryptData, getDeviceShare, getTorusShare, keccak256, setDeviceShare, setTorusShare };","map":{"version":3,"names":["_objectSpread","_defineProperty","setAPIKey","setEmbedHost","post","stringify","ec","ec$1","keccak256","keccak256$1","encrypt","getPublic","decrypt","a","Buffer","from","MetadataStorageLayer","constructor","metadataHost","arguments","length","undefined","serverTimeOffset","apiKey","embedHost","generateMetadataParams","message","privateKeyHex","_sig$recoveryParam$to","_sig$recoveryParam","key","keyFromPrivate","setData","data","timestamp","Math","floor","Date","now","toString","sig","sign","pub_key_X","getX","pub_key_Y","getY","set_data","signature","r","s","recoveryParam","padStart","slice","generatePubKeyParams","setMetadata","namespace","options","params","metadataResponse","useAPIKey","getMetadata","pubKey","WEBAUTHN_TORUS_SHARE","WEBAUTHN_DEVICE_SHARE","encParamsHexToBuf","encParamsHex","iv","ephemPublicKey","ciphertext","mac","encParamsBufToHex","encParams","encryptData","privKeyHex","d","serializedDec","JSON","serializedBuf","sData","decryptData","parse","keyPair","getPrivate","getAndDecryptData","m","serializedData","encryptAndSetData","metadataParams","setTorusShare","webAuthnPubKey","webAuthnRefHex","subspace","subspaceData","refKeyPair","privKey","keyFromPublic","x","y","serializedSubspaceData","serializedSubspaceDataBuf","encSubspaceData","encSubspaceDataHex","setDeviceShare","getTorusShare","webAuthnKeyHex","getDeviceShare","default"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js"],"sourcesContent":["import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { setAPIKey, setEmbedHost, post } from '@toruslabs/http-helpers';\nimport stringify from 'json-stable-stringify';\nimport { ec as ec$1 } from 'elliptic';\nimport { keccak256 as keccak256$1 } from 'ethereum-cryptography/keccak';\nimport { encrypt, getPublic, decrypt } from '@toruslabs/eccrypto';\n\nfunction keccak256(a) {\n  return Buffer.from(keccak256$1(a));\n}\nconst ec = new ec$1(\"secp256k1\");\n\nclass MetadataStorageLayer {\n  // ms\n\n  constructor() {\n    let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n    let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _defineProperty(this, \"metadataHost\", void 0);\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey);\n  }\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost);\n  }\n  generateMetadataParams(message, privateKeyHex) {\n    var _sig$recoveryParam$to, _sig$recoveryParam;\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n    };\n    const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")));\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam$to = (_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2)) !== null && _sig$recoveryParam$to !== void 0 ? _sig$recoveryParam$to : \"00\"), \"hex\").toString(\"base64\")\n    };\n  }\n  generatePubKeyParams(privateKeyHex) {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(16, 64),\n      pub_key_Y: key.getPublic().getY().toString(16, 64)\n    };\n  }\n  async setMetadata(data, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, data), {}, {\n      namespace\n    }) : data;\n    const metadataResponse = await post(`${this.metadataHost}/set`, params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n  async getMetadata(pubKey, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, pubKey), {}, {\n      namespace\n    }) : pubKey;\n    const metadataResponse = await post(`${this.metadataHost}/get`, params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n}\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\")\n  };\n}\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\")\n  };\n}\nasync function encryptData(privKeyHex, d) {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\nasync function decryptData(privKeyHex, d) {\n  const encParamsHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data = JSON.parse(serializedDec);\n  return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n  const keyPair = ec.keyFromPrivate(privKeyHex, \"hex\");\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({\n    pub_key_X: pubKey.getX().toString(16, 64),\n    pub_key_Y: pubKey.getY().toString(16, 64)\n  }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData(privKeyHex, serializedData);\n  return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n\nexport { decryptData, MetadataStorageLayer as default, ec, encParamsBufToHex, encParamsHexToBuf, encryptAndSetData, encryptData, getAndDecryptData, getDeviceShare, getTorusShare, keccak256, setDeviceShare, setTorusShare };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}