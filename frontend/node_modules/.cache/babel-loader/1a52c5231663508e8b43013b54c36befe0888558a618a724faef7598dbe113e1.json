{"ast":null,"code":"import { toHex } from '../../utils/encoding/toHex.js';\nimport { gasPerPubdataDefault } from '../constants/number.js';\nimport { assertEip712Transaction } from './assertEip712Transaction.js';\nimport { hashBytecode } from './hashBytecode.js';\nexport const getEip712Domain = transaction => {\n  assertEip712Transaction(transaction);\n  const message = transactionToMessage(transaction);\n  return {\n    domain: {\n      name: 'zkSync',\n      version: '2',\n      chainId: transaction.chainId\n    },\n    types: {\n      Transaction: [{\n        name: 'txType',\n        type: 'uint256'\n      }, {\n        name: 'from',\n        type: 'uint256'\n      }, {\n        name: 'to',\n        type: 'uint256'\n      }, {\n        name: 'gasLimit',\n        type: 'uint256'\n      }, {\n        name: 'gasPerPubdataByteLimit',\n        type: 'uint256'\n      }, {\n        name: 'maxFeePerGas',\n        type: 'uint256'\n      }, {\n        name: 'maxPriorityFeePerGas',\n        type: 'uint256'\n      }, {\n        name: 'paymaster',\n        type: 'uint256'\n      }, {\n        name: 'nonce',\n        type: 'uint256'\n      }, {\n        name: 'value',\n        type: 'uint256'\n      }, {\n        name: 'data',\n        type: 'bytes'\n      }, {\n        name: 'factoryDeps',\n        type: 'bytes32[]'\n      }, {\n        name: 'paymasterInput',\n        type: 'bytes'\n      }]\n    },\n    primaryType: 'Transaction',\n    message: message\n  };\n};\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\nfunction transactionToMessage(transaction) {\n  const {\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data\n  } = transaction;\n  return {\n    txType: 113n,\n    from: BigInt(from),\n    to: to ? BigInt(to) : 0n,\n    gasLimit: gas ?? 0n,\n    gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n    maxFeePerGas: maxFeePerGas ?? 0n,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n    paymaster: paymaster ? BigInt(paymaster) : 0n,\n    nonce: nonce ? BigInt(nonce) : 0n,\n    value: value ?? 0n,\n    data: data ? data : '0x0',\n    factoryDeps: factoryDeps?.map(dep => toHex(hashBytecode(dep))) ?? [],\n    paymasterInput: paymasterInput ? paymasterInput : '0x'\n  };\n}","map":{"version":3,"names":["toHex","gasPerPubdataDefault","assertEip712Transaction","hashBytecode","getEip712Domain","transaction","message","transactionToMessage","domain","name","version","chainId","types","Transaction","type","primaryType","gas","nonce","to","from","value","maxFeePerGas","maxPriorityFeePerGas","factoryDeps","paymaster","paymasterInput","gasPerPubdata","data","txType","BigInt","gasLimit","gasPerPubdataByteLimit","map","dep"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\zksync\\utils\\getEip712Domain.ts"],"sourcesContent":["import { toHex } from '../../utils/encoding/toHex.js'\nimport { gasPerPubdataDefault } from '../constants/number.js'\nimport type { EIP712DomainFn } from '../types/eip712.js'\nimport type {\n  ZksyncEIP712TransactionSignable,\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n} from '../types/transaction.js'\nimport { assertEip712Transaction } from './assertEip712Transaction.js'\nimport { hashBytecode } from './hashBytecode.js'\n\nexport const getEip712Domain: EIP712DomainFn<\n  ZksyncTransactionSerializable,\n  ZksyncEIP712TransactionSignable\n> = (transaction) => {\n  assertEip712Transaction(transaction)\n\n  const message = transactionToMessage(\n    transaction as ZksyncTransactionSerializableEIP712,\n  )\n\n  return {\n    domain: {\n      name: 'zkSync',\n      version: '2',\n      chainId: transaction.chainId,\n    },\n    types: {\n      Transaction: [\n        { name: 'txType', type: 'uint256' },\n        { name: 'from', type: 'uint256' },\n        { name: 'to', type: 'uint256' },\n        { name: 'gasLimit', type: 'uint256' },\n        { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n        { name: 'maxFeePerGas', type: 'uint256' },\n        { name: 'maxPriorityFeePerGas', type: 'uint256' },\n        { name: 'paymaster', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n        { name: 'factoryDeps', type: 'bytes32[]' },\n        { name: 'paymasterInput', type: 'bytes' },\n      ],\n    },\n    primaryType: 'Transaction',\n    message: message,\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n\nfunction transactionToMessage(\n  transaction: ZksyncTransactionSerializableEIP712,\n): ZksyncEIP712TransactionSignable {\n  const {\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  return {\n    txType: 113n,\n    from: BigInt(from),\n    to: to ? BigInt(to) : 0n,\n    gasLimit: gas ?? 0n,\n    gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n    maxFeePerGas: maxFeePerGas ?? 0n,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n    paymaster: paymaster ? BigInt(paymaster) : 0n,\n    nonce: nonce ? BigInt(nonce) : 0n,\n    value: value ?? 0n,\n    data: data ? data : '0x0',\n    factoryDeps: factoryDeps?.map((dep) => toHex(hashBytecode(dep))) ?? [],\n    paymasterInput: paymasterInput ? paymasterInput : '0x',\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,+BAA+B;AACrD,SAASC,oBAAoB,QAAQ,wBAAwB;AAO7D,SAASC,uBAAuB,QAAQ,8BAA8B;AACtE,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,OAAO,MAAMC,eAAe,GAGvBC,WAAW,IAAI;EAClBH,uBAAuB,CAACG,WAAW,CAAC;EAEpC,MAAMC,OAAO,GAAGC,oBAAoB,CAClCF,WAAkD,CACnD;EAED,OAAO;IACLG,MAAM,EAAE;MACNC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE,GAAG;MACZC,OAAO,EAAEN,WAAW,CAACM;KACtB;IACDC,KAAK,EAAE;MACLC,WAAW,EAAE,CACX;QAAEJ,IAAI,EAAE,QAAQ;QAAEK,IAAI,EAAE;MAAS,CAAE,EACnC;QAAEL,IAAI,EAAE,MAAM;QAAEK,IAAI,EAAE;MAAS,CAAE,EACjC;QAAEL,IAAI,EAAE,IAAI;QAAEK,IAAI,EAAE;MAAS,CAAE,EAC/B;QAAEL,IAAI,EAAE,UAAU;QAAEK,IAAI,EAAE;MAAS,CAAE,EACrC;QAAEL,IAAI,EAAE,wBAAwB;QAAEK,IAAI,EAAE;MAAS,CAAE,EACnD;QAAEL,IAAI,EAAE,cAAc;QAAEK,IAAI,EAAE;MAAS,CAAE,EACzC;QAAEL,IAAI,EAAE,sBAAsB;QAAEK,IAAI,EAAE;MAAS,CAAE,EACjD;QAAEL,IAAI,EAAE,WAAW;QAAEK,IAAI,EAAE;MAAS,CAAE,EACtC;QAAEL,IAAI,EAAE,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAE,EAClC;QAAEL,IAAI,EAAE,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAE,EAClC;QAAEL,IAAI,EAAE,MAAM;QAAEK,IAAI,EAAE;MAAO,CAAE,EAC/B;QAAEL,IAAI,EAAE,aAAa;QAAEK,IAAI,EAAE;MAAW,CAAE,EAC1C;QAAEL,IAAI,EAAE,gBAAgB;QAAEK,IAAI,EAAE;MAAO,CAAE;KAE5C;IACDC,WAAW,EAAE,aAAa;IAC1BT,OAAO,EAAEA;GACV;AACH,CAAC;AAED;AACA;AAEA,SAASC,oBAAoBA,CAC3BF,WAAgD;EAEhD,MAAM;IACJW,GAAG;IACHC,KAAK;IACLC,EAAE;IACFC,IAAI;IACJC,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBC,WAAW;IACXC,SAAS;IACTC,cAAc;IACdC,aAAa;IACbC;EAAI,CACL,GAAGtB,WAAW;EAEf,OAAO;IACLuB,MAAM,EAAE,IAAI;IACZT,IAAI,EAAEU,MAAM,CAACV,IAAI,CAAC;IAClBD,EAAE,EAAEA,EAAE,GAAGW,MAAM,CAACX,EAAE,CAAC,GAAG,EAAE;IACxBY,QAAQ,EAAEd,GAAG,IAAI,EAAE;IACnBe,sBAAsB,EAAEL,aAAa,IAAIzB,oBAAoB;IAC7DoB,YAAY,EAAEA,YAAY,IAAI,EAAE;IAChCC,oBAAoB,EAAEA,oBAAoB,IAAI,EAAE;IAChDE,SAAS,EAAEA,SAAS,GAAGK,MAAM,CAACL,SAAS,CAAC,GAAG,EAAE;IAC7CP,KAAK,EAAEA,KAAK,GAAGY,MAAM,CAACZ,KAAK,CAAC,GAAG,EAAE;IACjCG,KAAK,EAAEA,KAAK,IAAI,EAAE;IAClBO,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,KAAK;IACzBJ,WAAW,EAAEA,WAAW,EAAES,GAAG,CAAEC,GAAG,IAAKjC,KAAK,CAACG,YAAY,CAAC8B,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE;IACtER,cAAc,EAAEA,cAAc,GAAGA,cAAc,GAAG;GACnD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}