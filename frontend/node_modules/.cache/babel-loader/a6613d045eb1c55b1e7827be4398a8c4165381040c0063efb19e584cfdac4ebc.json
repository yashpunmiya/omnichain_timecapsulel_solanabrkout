{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factory = void 0;\nconst events_1 = require(\"./events\");\nconst factory = ({\n  eventEmitter,\n  manifest,\n  init,\n  call,\n  setTransports,\n  requestLogin,\n  uiResponse,\n  cancel,\n  dispose\n}, extraMethods = {}) => ({\n  manifest,\n  init,\n  setTransports,\n  on: (type, fn) => {\n    eventEmitter.on(type, fn);\n  },\n  off: (type, fn) => {\n    eventEmitter.removeListener(type, fn);\n  },\n  removeAllListeners: type => {\n    if (typeof type === 'string') {\n      eventEmitter.removeAllListeners(type);\n    } else {\n      eventEmitter.removeAllListeners();\n    }\n  },\n  uiResponse,\n  blockchainGetAccountBalanceHistory: params => call({\n    ...params,\n    method: 'blockchainGetAccountBalanceHistory'\n  }),\n  blockchainGetCurrentFiatRates: params => call({\n    ...params,\n    method: 'blockchainGetCurrentFiatRates'\n  }),\n  blockchainGetFiatRatesForTimestamps: params => call({\n    ...params,\n    method: 'blockchainGetFiatRatesForTimestamps'\n  }),\n  blockchainGetInfo: params => call({\n    ...params,\n    method: 'blockchainGetInfo'\n  }),\n  blockchainEvmRpcCall: params => call({\n    ...params,\n    method: 'blockchainEvmRpcCall'\n  }),\n  blockchainDisconnect: params => call({\n    ...params,\n    method: 'blockchainDisconnect'\n  }),\n  blockchainEstimateFee: params => call({\n    ...params,\n    method: 'blockchainEstimateFee'\n  }),\n  blockchainGetTransactions: params => call({\n    ...params,\n    method: 'blockchainGetTransactions'\n  }),\n  blockchainSetCustomBackend: params => call({\n    ...params,\n    method: 'blockchainSetCustomBackend'\n  }),\n  blockchainSubscribe: params => call({\n    ...params,\n    method: 'blockchainSubscribe'\n  }),\n  blockchainSubscribeFiatRates: params => call({\n    ...params,\n    method: 'blockchainSubscribeFiatRates'\n  }),\n  blockchainUnsubscribe: params => call({\n    ...params,\n    method: 'blockchainUnsubscribe'\n  }),\n  blockchainUnsubscribeFiatRates: params => call({\n    ...params,\n    method: 'blockchainUnsubscribeFiatRates'\n  }),\n  requestLogin: params => requestLogin(params),\n  cardanoGetAddress: params => call({\n    ...params,\n    method: 'cardanoGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  cardanoGetNativeScriptHash: params => call({\n    ...params,\n    method: 'cardanoGetNativeScriptHash'\n  }),\n  cardanoGetPublicKey: params => call({\n    ...params,\n    method: 'cardanoGetPublicKey'\n  }),\n  cardanoSignTransaction: params => call({\n    ...params,\n    method: 'cardanoSignTransaction'\n  }),\n  cardanoComposeTransaction: params => call({\n    ...params,\n    method: 'cardanoComposeTransaction'\n  }),\n  cipherKeyValue: params => call({\n    ...params,\n    method: 'cipherKeyValue'\n  }),\n  composeTransaction: params => call({\n    ...params,\n    method: 'composeTransaction'\n  }),\n  ethereumGetAddress: params => call({\n    ...params,\n    method: 'ethereumGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  ethereumGetPublicKey: params => call({\n    ...params,\n    method: 'ethereumGetPublicKey'\n  }),\n  ethereumSignMessage: params => call({\n    ...params,\n    method: 'ethereumSignMessage'\n  }),\n  ethereumSignTransaction: params => call({\n    ...params,\n    method: 'ethereumSignTransaction'\n  }),\n  ethereumSignTypedData: params => call({\n    ...params,\n    method: 'ethereumSignTypedData'\n  }),\n  ethereumVerifyMessage: params => call({\n    ...params,\n    method: 'ethereumVerifyMessage'\n  }),\n  getAccountDescriptor: params => call({\n    ...params,\n    method: 'getAccountDescriptor'\n  }),\n  getAccountInfo: params => call({\n    ...params,\n    method: 'getAccountInfo'\n  }),\n  getAddress: params => call({\n    ...params,\n    method: 'getAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  getDeviceState: params => call({\n    ...params,\n    method: 'getDeviceState'\n  }),\n  getFeatures: params => call({\n    ...params,\n    method: 'getFeatures'\n  }),\n  getFirmwareHash: params => call({\n    ...params,\n    method: 'getFirmwareHash'\n  }),\n  getOwnershipId: params => call({\n    ...params,\n    method: 'getOwnershipId'\n  }),\n  getOwnershipProof: params => call({\n    ...params,\n    method: 'getOwnershipProof'\n  }),\n  getPublicKey: params => call({\n    ...params,\n    method: 'getPublicKey'\n  }),\n  nemGetAddress: params => call({\n    ...params,\n    method: 'nemGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  nemSignTransaction: params => call({\n    ...params,\n    method: 'nemSignTransaction'\n  }),\n  pushTransaction: params => call({\n    ...params,\n    method: 'pushTransaction'\n  }),\n  rippleGetAddress: params => call({\n    ...params,\n    method: 'rippleGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  rippleSignTransaction: params => call({\n    ...params,\n    method: 'rippleSignTransaction'\n  }),\n  signMessage: params => call({\n    ...params,\n    method: 'signMessage'\n  }),\n  signTransaction: params => call({\n    ...params,\n    method: 'signTransaction'\n  }),\n  solanaComposeTransaction: params => call({\n    ...params,\n    method: 'solanaComposeTransaction'\n  }),\n  solanaGetPublicKey: params => call({\n    ...params,\n    method: 'solanaGetPublicKey'\n  }),\n  solanaGetAddress: params => call({\n    ...params,\n    method: 'solanaGetAddress'\n  }),\n  solanaSignTransaction: params => call({\n    ...params,\n    method: 'solanaSignTransaction'\n  }),\n  stellarGetAddress: params => call({\n    ...params,\n    method: 'stellarGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  stellarSignTransaction: params => call({\n    ...params,\n    method: 'stellarSignTransaction'\n  }),\n  tezosGetAddress: params => call({\n    ...params,\n    method: 'tezosGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  tezosGetPublicKey: params => call({\n    ...params,\n    method: 'tezosGetPublicKey'\n  }),\n  tezosSignTransaction: params => call({\n    ...params,\n    method: 'tezosSignTransaction'\n  }),\n  unlockPath: params => call({\n    ...params,\n    method: 'unlockPath'\n  }),\n  eosGetPublicKey: params => call({\n    ...params,\n    method: 'eosGetPublicKey'\n  }),\n  eosSignTransaction: params => call({\n    ...params,\n    method: 'eosSignTransaction'\n  }),\n  binanceGetAddress: params => call({\n    ...params,\n    method: 'binanceGetAddress',\n    useEventListener: eventEmitter.listenerCount(events_1.UI.ADDRESS_VALIDATION) > 0\n  }),\n  binanceGetPublicKey: params => call({\n    ...params,\n    method: 'binanceGetPublicKey'\n  }),\n  binanceSignTransaction: params => call({\n    ...params,\n    method: 'binanceSignTransaction'\n  }),\n  verifyMessage: params => call({\n    ...params,\n    method: 'verifyMessage'\n  }),\n  resetDevice: params => call({\n    ...params,\n    method: 'resetDevice'\n  }),\n  loadDevice: params => call({\n    ...params,\n    method: 'loadDevice'\n  }),\n  wipeDevice: params => call({\n    ...params,\n    method: 'wipeDevice'\n  }),\n  applyFlags: params => call({\n    ...params,\n    method: 'applyFlags'\n  }),\n  applySettings: params => call({\n    ...params,\n    method: 'applySettings'\n  }),\n  getSettings: () => call({\n    method: 'getSettings'\n  }),\n  authenticateDevice: params => call({\n    ...params,\n    method: 'authenticateDevice'\n  }),\n  authorizeCoinjoin: params => call({\n    ...params,\n    method: 'authorizeCoinjoin'\n  }),\n  cancelCoinjoinAuthorization: params => call({\n    ...params,\n    method: 'cancelCoinjoinAuthorization'\n  }),\n  showDeviceTutorial: params => call({\n    ...params,\n    method: 'showDeviceTutorial'\n  }),\n  backupDevice: params => call({\n    ...params,\n    method: 'backupDevice'\n  }),\n  changeLanguage: params => call({\n    ...params,\n    method: 'changeLanguage'\n  }),\n  changePin: params => call({\n    ...params,\n    method: 'changePin'\n  }),\n  changeWipeCode: params => call({\n    ...params,\n    method: 'changeWipeCode'\n  }),\n  firmwareUpdate: params => call({\n    ...params,\n    method: 'firmwareUpdate'\n  }),\n  recoveryDevice: params => call({\n    ...params,\n    method: 'recoveryDevice'\n  }),\n  getCoinInfo: params => call({\n    ...params,\n    method: 'getCoinInfo'\n  }),\n  setBrightness: params => call({\n    ...params,\n    method: 'setBrightness'\n  }),\n  setBusy: params => call({\n    ...params,\n    method: 'setBusy'\n  }),\n  setProxy: params => call({\n    ...params,\n    method: 'setProxy'\n  }),\n  dispose,\n  cancel,\n  ...extraMethods\n});\nexports.factory = factory;\n//# sourceMappingURL=factory.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}