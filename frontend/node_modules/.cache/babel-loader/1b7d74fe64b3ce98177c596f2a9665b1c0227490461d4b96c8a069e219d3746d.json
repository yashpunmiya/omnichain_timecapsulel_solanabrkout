{"ast":null,"code":"import { EstimateGasExecutionError } from '../../errors/estimateGas.js';\nimport { UnknownNodeError } from '../../errors/node.js';\nimport { getNodeError } from './getNodeError.js';\nexport function getEstimateGasError(err, {\n  docsPath,\n  ...args\n}) {\n  const cause = (() => {\n    const cause = getNodeError(err, args);\n    if (cause instanceof UnknownNodeError) return err;\n    return cause;\n  })();\n  return new EstimateGasExecutionError(cause, {\n    docsPath,\n    ...args\n  });\n}","map":{"version":3,"names":["EstimateGasExecutionError","UnknownNodeError","getNodeError","getEstimateGasError","err","docsPath","args","cause"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\errors\\getEstimateGasError.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { EstimateGasParameters } from '../../actions/public/estimateGas.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  EstimateGasExecutionError,\n  type EstimateGasExecutionErrorType,\n} from '../../errors/estimateGas.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetEstimateGasErrorReturnType<cause = ErrorType> = Omit<\n  EstimateGasExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getEstimateGasError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: Omit<EstimateGasParameters, 'account'> & {\n    account?: Account | undefined\n    chain?: Chain | undefined\n    docsPath?: string | undefined\n  },\n): GetEstimateGasErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new EstimateGasExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetEstimateGasErrorReturnType<err>\n}\n"],"mappings":"AAGA,SACEA,yBAAyB,QAEpB,6BAA6B;AACpC,SAASC,gBAAgB,QAAQ,sBAAsB;AAIvD,SAGEC,YAAY,QACP,mBAAmB;AAO1B,OAAM,SAAUC,mBAAmBA,CACjCC,GAAQ,EACR;EACEC,QAAQ;EACR,GAAGC;AAAI,CAKR;EAED,MAAMC,KAAK,GAAG,CAAC,MAAK;IAClB,MAAMA,KAAK,GAAGL,YAAY,CACxBE,GAAsB,EACtBE,IAA8B,CAC/B;IACD,IAAIC,KAAK,YAAYN,gBAAgB,EAAE,OAAOG,GAAsB;IACpE,OAAOG,KAAK;EACd,CAAC,EAAC,CAAE;EACJ,OAAO,IAAIP,yBAAyB,CAACO,KAAK,EAAE;IAC1CF,QAAQ;IACR,GAAGC;GACJ,CAAuC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}