{"ast":null,"code":"import { encodeDeployData } from '../../utils/abi/encodeDeployData.js';\nimport { sendTransaction } from './sendTransaction.js';\n/**\n * Deploys a contract to the network, given bytecode and constructor arguments.\n *\n * - Docs: https://viem.sh/docs/contract/deployContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_deploying-contracts\n *\n * @param client - Client to use\n * @param parameters - {@link DeployContractParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n *\n * @example\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { deployContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await deployContract(client, {\n *   abi: [],\n *   account: '0x…,\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n * })\n */\nexport function deployContract(walletClient, parameters) {\n  const {\n    abi,\n    args,\n    bytecode,\n    ...request\n  } = parameters;\n  const calldata = encodeDeployData({\n    abi,\n    args,\n    bytecode\n  });\n  return sendTransaction(walletClient, {\n    ...request,\n    data: calldata\n  });\n}\n//# sourceMappingURL=deployContract.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}