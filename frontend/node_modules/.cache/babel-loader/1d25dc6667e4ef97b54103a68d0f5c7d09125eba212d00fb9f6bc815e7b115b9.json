{"ast":null,"code":"import { SOLANA_DEVNET_CHAIN, SOLANA_LOCALNET_CHAIN, SOLANA_MAINNET_CHAIN, SOLANA_TESTNET_CHAIN } from '@solana/wallet-standard-chains';\n/** TODO: docs */\nexport const MAINNET_ENDPOINT = 'https://api.mainnet-beta.solana.com';\n/** TODO: docs */\nexport const DEVNET_ENDPOINT = 'https://api.devnet.solana.com';\n/** TODO: docs */\nexport const TESTNET_ENDPOINT = 'https://api.testnet.solana.com';\n/** TODO: docs */\nexport const LOCALNET_ENDPOINT = 'http://localhost:8899';\n/**\n * TODO: docs\n */\nexport function getChainForEndpoint(endpoint) {\n  if (endpoint.includes(MAINNET_ENDPOINT)) return SOLANA_MAINNET_CHAIN;\n  if (/\\bdevnet\\b/i.test(endpoint)) return SOLANA_DEVNET_CHAIN;\n  if (/\\btestnet\\b/i.test(endpoint)) return SOLANA_TESTNET_CHAIN;\n  if (/\\blocalhost\\b/i.test(endpoint) || /\\b127\\.0\\.0\\.1\\b/.test(endpoint)) return SOLANA_LOCALNET_CHAIN;\n  return SOLANA_MAINNET_CHAIN;\n}\n/**\n * TODO: docs\n */\nexport function getEndpointForChain(chain, endpoint) {\n  if (endpoint) return endpoint;\n  if (chain === SOLANA_MAINNET_CHAIN) return MAINNET_ENDPOINT;\n  if (chain === SOLANA_DEVNET_CHAIN) return DEVNET_ENDPOINT;\n  if (chain === SOLANA_TESTNET_CHAIN) return TESTNET_ENDPOINT;\n  if (chain === SOLANA_LOCALNET_CHAIN) return LOCALNET_ENDPOINT;\n  return MAINNET_ENDPOINT;\n}","map":{"version":3,"names":["SOLANA_DEVNET_CHAIN","SOLANA_LOCALNET_CHAIN","SOLANA_MAINNET_CHAIN","SOLANA_TESTNET_CHAIN","MAINNET_ENDPOINT","DEVNET_ENDPOINT","TESTNET_ENDPOINT","LOCALNET_ENDPOINT","getChainForEndpoint","endpoint","includes","test","getEndpointForChain","chain"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@solana\\wallet-standard-util\\src\\endpoint.ts"],"sourcesContent":["import type { SolanaChain } from '@solana/wallet-standard-chains';\nimport {\n    SOLANA_DEVNET_CHAIN,\n    SOLANA_LOCALNET_CHAIN,\n    SOLANA_MAINNET_CHAIN,\n    SOLANA_TESTNET_CHAIN,\n} from '@solana/wallet-standard-chains';\n\n/** TODO: docs */\nexport const MAINNET_ENDPOINT = 'https://api.mainnet-beta.solana.com';\n/** TODO: docs */\nexport const DEVNET_ENDPOINT = 'https://api.devnet.solana.com';\n/** TODO: docs */\nexport const TESTNET_ENDPOINT = 'https://api.testnet.solana.com';\n/** TODO: docs */\nexport const LOCALNET_ENDPOINT = 'http://localhost:8899';\n\n/**\n * TODO: docs\n */\nexport function getChainForEndpoint(endpoint: string): SolanaChain {\n    if (endpoint.includes(MAINNET_ENDPOINT)) return SOLANA_MAINNET_CHAIN;\n    if (/\\bdevnet\\b/i.test(endpoint)) return SOLANA_DEVNET_CHAIN;\n    if (/\\btestnet\\b/i.test(endpoint)) return SOLANA_TESTNET_CHAIN;\n    if (/\\blocalhost\\b/i.test(endpoint) || /\\b127\\.0\\.0\\.1\\b/.test(endpoint)) return SOLANA_LOCALNET_CHAIN;\n    return SOLANA_MAINNET_CHAIN;\n}\n\n/**\n * TODO: docs\n */\nexport function getEndpointForChain(chain: SolanaChain, endpoint?: string): string {\n    if (endpoint) return endpoint;\n    if (chain === SOLANA_MAINNET_CHAIN) return MAINNET_ENDPOINT;\n    if (chain === SOLANA_DEVNET_CHAIN) return DEVNET_ENDPOINT;\n    if (chain === SOLANA_TESTNET_CHAIN) return TESTNET_ENDPOINT;\n    if (chain === SOLANA_LOCALNET_CHAIN) return LOCALNET_ENDPOINT;\n    return MAINNET_ENDPOINT;\n}\n"],"mappings":"AACA,SACIA,mBAAmB,EACnBC,qBAAqB,EACrBC,oBAAoB,EACpBC,oBAAoB,QACjB,gCAAgC;AAEvC;AACA,OAAO,MAAMC,gBAAgB,GAAG,qCAAqC;AACrE;AACA,OAAO,MAAMC,eAAe,GAAG,+BAA+B;AAC9D;AACA,OAAO,MAAMC,gBAAgB,GAAG,gCAAgC;AAChE;AACA,OAAO,MAAMC,iBAAiB,GAAG,uBAAuB;AAExD;;;AAGA,OAAM,SAAUC,mBAAmBA,CAACC,QAAgB;EAChD,IAAIA,QAAQ,CAACC,QAAQ,CAACN,gBAAgB,CAAC,EAAE,OAAOF,oBAAoB;EACpE,IAAI,aAAa,CAACS,IAAI,CAACF,QAAQ,CAAC,EAAE,OAAOT,mBAAmB;EAC5D,IAAI,cAAc,CAACW,IAAI,CAACF,QAAQ,CAAC,EAAE,OAAON,oBAAoB;EAC9D,IAAI,gBAAgB,CAACQ,IAAI,CAACF,QAAQ,CAAC,IAAI,kBAAkB,CAACE,IAAI,CAACF,QAAQ,CAAC,EAAE,OAAOR,qBAAqB;EACtG,OAAOC,oBAAoB;AAC/B;AAEA;;;AAGA,OAAM,SAAUU,mBAAmBA,CAACC,KAAkB,EAAEJ,QAAiB;EACrE,IAAIA,QAAQ,EAAE,OAAOA,QAAQ;EAC7B,IAAII,KAAK,KAAKX,oBAAoB,EAAE,OAAOE,gBAAgB;EAC3D,IAAIS,KAAK,KAAKb,mBAAmB,EAAE,OAAOK,eAAe;EACzD,IAAIQ,KAAK,KAAKV,oBAAoB,EAAE,OAAOG,gBAAgB;EAC3D,IAAIO,KAAK,KAAKZ,qBAAqB,EAAE,OAAOM,iBAAiB;EAC7D,OAAOH,gBAAgB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}