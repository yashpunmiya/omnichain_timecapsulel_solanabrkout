{"ast":null,"code":"const e = Symbol(),\n  t = Symbol(),\n  r = \"a\",\n  n = \"w\";\nlet o = (e, t) => new Proxy(e, t);\nconst s = Object.getPrototypeOf,\n  c = new WeakMap(),\n  l = e => e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype),\n  f = e => \"object\" == typeof e && null !== e,\n  i = e => {\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach(e => {\n      e.configurable = !0;\n    }), Object.create(s(e), t);\n  },\n  u = e => e[t] || e,\n  a = (s, c, f, p) => {\n    if (!l(s)) return s;\n    let g = p && p.get(s);\n    if (!g) {\n      const e = u(s);\n      g = (e => Object.values(Object.getOwnPropertyDescriptors(e)).some(e => !e.configurable && !e.writable))(e) ? [e, i(e)] : [e], null == p || p.set(s, g);\n    }\n    const [y, h] = g;\n    let w = f && f.get(y);\n    return w && w[1].f === !!h || (w = ((o, s) => {\n      const c = {\n        f: s\n      };\n      let l = !1;\n      const f = (e, t) => {\n          if (!l) {\n            let s = c[r].get(o);\n            if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;else {\n              let r = s[e];\n              r || (r = new Set(), s[e] = r), r.add(t);\n            }\n          }\n        },\n        i = {\n          get: (e, n) => n === t ? o : (f(\"k\", n), a(Reflect.get(e, n), c[r], c.c, c.t)),\n          has: (t, n) => n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n          getOwnPropertyDescriptor: (e, t) => (f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n          ownKeys: e => (f(n), Reflect.ownKeys(e))\n        };\n      return s && (i.set = i.deleteProperty = () => !1), [i, c];\n    })(y, !!h), w[1].p = o(h || y, w[0]), f && f.set(y, w)), w[1][r] = c, w[1].c = f, w[1].t = p, w[1].p;\n  },\n  p = (e, t, r, o, s = Object.is) => {\n    if (s(e, t)) return !1;\n    if (!f(e) || !f(t)) return !0;\n    const c = r.get(u(e));\n    if (!c) return !0;\n    if (o) {\n      const r = o.get(e);\n      if (r && r.n === t) return r.g;\n      o.set(e, {\n        n: t,\n        g: !1\n      });\n    }\n    let l = null;\n    try {\n      for (const r of c.h || []) if (l = Reflect.has(e, r) !== Reflect.has(t, r), l) return l;\n      if (!0 === c[n]) {\n        if (l = ((e, t) => {\n          const r = Reflect.ownKeys(e),\n            n = Reflect.ownKeys(t);\n          return r.length !== n.length || r.some((e, t) => e !== n[t]);\n        })(e, t), l) return l;\n      } else for (const r of c.o || []) if (l = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), l) return l;\n      for (const n of c.k || []) if (l = p(e[n], t[n], r, o, s), l) return l;\n      return null === l && (l = !0), l;\n    } finally {\n      o && o.set(e, {\n        n: t,\n        g: l\n      });\n    }\n  },\n  g = t => !!l(t) && e in t,\n  y = e => l(e) && e[t] || null,\n  h = (e, t = !0) => {\n    c.set(e, t);\n  },\n  w = (e, t, r) => {\n    const o = [],\n      s = new WeakSet(),\n      c = (e, l) => {\n        if (s.has(e)) return;\n        f(e) && s.add(e);\n        const i = f(e) && t.get(u(e));\n        if (i) {\n          var a, p;\n          if (null == (a = i.h) || a.forEach(e => {\n            const t = `:has(${String(e)})`;\n            o.push(l ? [...l, t] : [t]);\n          }), !0 === i[n]) {\n            const e = \":ownKeys\";\n            o.push(l ? [...l, e] : [e]);\n          } else {\n            var g;\n            null == (g = i.o) || g.forEach(e => {\n              const t = `:hasOwn(${String(e)})`;\n              o.push(l ? [...l, t] : [t]);\n            });\n          }\n          null == (p = i.k) || p.forEach(t => {\n            r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [...l, t] : [t]);\n          });\n        } else l && o.push(l);\n      };\n    return c(e), o;\n  },\n  O = e => {\n    o = e;\n  };\nexport { w as affectedToPathList, a as createProxy, y as getUntracked, p as isChanged, h as markToTrack, O as replaceNewProxy, g as trackMemo };","map":{"version":3,"names":["e","Symbol","t","r","n","o","Proxy","s","Object","getPrototypeOf","c","WeakMap","l","has","get","prototype","Array","f","i","isArray","from","getOwnPropertyDescriptors","values","forEach","configurable","create","u","a","p","g","some","writable","set","y","h","w","Set","add","Reflect","delete","getOwnPropertyDescriptor","ownKeys","deleteProperty","is","length","k","WeakSet","String","push","O","affectedToPathList","createProxy","getUntracked","isChanged","markToTrack","replaceNewProxy","trackMemo"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\proxy-compare\\src\\index.ts"],"sourcesContent":["// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst IS_TARGET_COPIED_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst TARGET_CACHE_PROPERTY = 't';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// Properties that are both non-configurable and non-writable will break\n// the proxy get trap when we try to return a recursive/child compare proxy\n// from them. We can avoid this by making a copy of the target object with\n// all descriptors marked as configurable, see `copyTargetObject`.\n// See: https://github.com/dai-shi/proxy-compare/pull/8\nconst needsToCopyTargetObject = (obj: object) => (\n  Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n    (descriptor) => !descriptor.configurable && !descriptor.writable,\n  )\n);\n\n// Make a copy with all descriptors marked as configurable.\nconst copyTargetObject = <T extends object>(obj: T): T => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj) as T;\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype HasKeySet = Set<string | symbol>\ntype HasOwnKeySet = Set<string | symbol>\ntype KeysSet = Set<string | symbol>\ntype Used = {\n  [HAS_KEY_PROPERTY]?: HasKeySet;\n  [ALL_OWN_KEYS_PROPERTY]?: true;\n  [HAS_OWN_KEY_PROPERTY]?: HasOwnKeySet;\n  [KEYS_PROPERTY]?: KeysSet;\n};\ntype Affected = WeakMap<object, Used>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [IS_TARGET_COPIED_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [TARGET_CACHE_PROPERTY]?: TargetCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\ntype TargetCache<T extends object> = WeakMap<\n  object,\n  readonly [target: T, copiedTarget?: T]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, isTargetCopied: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [IS_TARGET_COPIED_PROPERTY]: isTargetCopied,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (\n    type:\n      | typeof HAS_KEY_PROPERTY\n      | typeof ALL_OWN_KEYS_PROPERTY\n      | typeof HAS_OWN_KEY_PROPERTY\n      | typeof KEYS_PROPERTY,\n    key?: string | symbol,\n  ) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = {};\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (type === ALL_OWN_KEYS_PROPERTY) {\n        used[ALL_OWN_KEYS_PROPERTY] = true;\n      } else {\n        let set = used[type];\n        if (!set) {\n          set = new Set();\n          used[type] = set;\n        }\n        set.add(key as string | symbol);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(KEYS_PROPERTY, key);\n      return createProxy(\n        Reflect.get(target, key),\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n        state[TARGET_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      recordUsage(HAS_KEY_PROPERTY, key);\n      return Reflect.has(target, key);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      recordUsage(HAS_OWN_KEY_PROPERTY, key);\n      return Reflect.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(ALL_OWN_KEYS_PROPERTY);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (isTargetCopied) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n  targetCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  let targetAndCopied = (\n    targetCache && (targetCache as TargetCache<typeof obj>).get(obj)\n  );\n  if (!targetAndCopied) {\n    const target = getOriginalObject(obj);\n    if (needsToCopyTargetObject(target)) {\n      targetAndCopied = [target, copyTargetObject(target)];\n    } else {\n      targetAndCopied = [target];\n    }\n    targetCache?.set(obj, targetAndCopied);\n  }\n  const [target, copiedTarget] = targetAndCopied;\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (\n    !handlerAndState\n    || handlerAndState[1][IS_TARGET_COPIED_PROPERTY] !== !!copiedTarget\n  ) {\n    handlerAndState = createProxyHandler<typeof target>(target, !!copiedTarget);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      copiedTarget || target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  handlerAndState[1][TARGET_CACHE_PROPERTY] = targetCache as TargetCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isAllOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n  isEqual: (a: unknown, b: unknown) => boolean = Object.is,\n): boolean => {\n  if (isEqual(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  try {\n    for (const key of used[HAS_KEY_PROPERTY] || []) {\n      changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n      if (changed) return changed;\n    }\n    if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n      changed = isAllOwnKeysChanged(prevObj, nextObj);\n      if (changed) return changed;\n    } else {\n      for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n        const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n        const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n        changed = hasPrev !== hasNext;\n        if (changed) return changed;\n      }\n    }\n    for (const key of used[KEYS_PROPERTY] || []) {\n      changed = isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n        isEqual,\n      );\n      if (changed) return changed;\n    }\n    if (changed === null) changed = true;\n    return changed;\n  } finally {\n    if (cache) {\n      cache.set(prevObj, {\n        [NEXT_OBJECT_PROPERTY]: nextObj,\n        [CHANGED_PROPERTY]: changed,\n      });\n    }\n  }\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n  onlyWithValues?: boolean,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used[HAS_KEY_PROPERTY]?.forEach((key) => {\n        const segment = `:has(${String(key)})`;\n        list.push(path ? [...path, segment] : [segment]);\n      });\n      if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n        const segment = ':ownKeys';\n        list.push(path ? [...path, segment] : [segment]);\n      } else {\n        used[HAS_OWN_KEY_PROPERTY]?.forEach((key) => {\n          const segment = `:hasOwn(${String(key)})`;\n          list.push(path ? [...path, segment] : [segment]);\n        });\n      }\n      used[KEYS_PROPERTY]?.forEach((key) => {\n        if (!onlyWithValues || 'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n          walk((x as any)[key], path ? [...path, key] : [key]);\n        }\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}