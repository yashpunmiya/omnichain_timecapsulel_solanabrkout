{"ast":null,"code":"export var KeyEncoding;\n(function (KeyEncoding) {\n  KeyEncoding[\"String\"] = \"string\";\n  KeyEncoding[\"Bytes\"] = \"view\";\n  KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nexport var ValueEncoding;\n(function (ValueEncoding) {\n  ValueEncoding[\"String\"] = \"string\";\n  ValueEncoding[\"Bytes\"] = \"view\";\n  ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {}));","map":{"version":3,"names":["KeyEncoding","ValueEncoding"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\db.ts"],"sourcesContent":["export type DBObject = {\n  [key: string]: string | string[] | number\n}\nexport type BatchDBOp<\n  TKey extends Uint8Array | string | number = Uint8Array,\n  TValue extends Uint8Array | string | DBObject = Uint8Array\n> = PutBatch<TKey, TValue> | DelBatch<TKey>\n\nexport enum KeyEncoding {\n  String = 'string',\n  Bytes = 'view',\n  Number = 'number',\n}\n\nexport enum ValueEncoding {\n  String = 'string',\n  Bytes = 'view',\n  JSON = 'json',\n}\n\nexport type EncodingOpts = {\n  keyEncoding?: KeyEncoding\n  valueEncoding?: ValueEncoding\n}\nexport interface PutBatch<\n  TKey extends Uint8Array | string | number = Uint8Array,\n  TValue extends Uint8Array | string | DBObject = Uint8Array\n> {\n  type: 'put'\n  key: TKey\n  value: TValue\n  opts?: EncodingOpts\n}\n\nexport interface DelBatch<TKey extends Uint8Array | string | number = Uint8Array> {\n  type: 'del'\n  key: TKey\n  opts?: EncodingOpts\n}\n\nexport interface DB<\n  TKey extends Uint8Array | string | number = Uint8Array,\n  TValue extends Uint8Array | string | DBObject = Uint8Array\n> {\n  /**\n   * Retrieves a raw value from db.\n   * @param key\n   * @returns A Promise that resolves to `Uint8Array` if a value is found or `undefined` if no value is found.\n   */\n  get(key: TKey, opts?: EncodingOpts): Promise<TValue | undefined>\n\n  /**\n   * Writes a value directly to db.\n   * @param key The key as a `TValue`\n   * @param value The value to be stored\n   */\n  put(key: TKey, val: TValue, opts?: EncodingOpts): Promise<void>\n\n  /**\n   * Removes a raw value in the underlying db.\n   * @param keys\n   */\n  del(key: TKey, opts?: EncodingOpts): Promise<void>\n\n  /**\n   * Performs a batch operation on db.\n   * @param opStack A stack of levelup operations\n   */\n  batch(opStack: BatchDBOp<TKey, TValue>[]): Promise<void>\n\n  /**\n   * Returns a copy of the DB instance, with a reference\n   * to the **same** underlying db instance.\n   */\n  shallowCopy(): DB<TKey, TValue>\n\n  /**\n   * Opens the database -- if applicable\n   */\n  open(): Promise<void>\n  // TODO - decide if we actually need open/close - it's not required for maps and Level automatically opens the DB when you instantiate it\n}\n"],"mappings":"AAQA,WAAYA,WAIX;AAJD,WAAYA,WAAW;EACrBA,WAAA,qBAAiB;EACjBA,WAAA,kBAAc;EACdA,WAAA,qBAAiB;AACnB,CAAC,EAJWA,WAAW,KAAXA,WAAW;AAMvB,WAAYC,aAIX;AAJD,WAAYA,aAAa;EACvBA,aAAA,qBAAiB;EACjBA,aAAA,kBAAc;EACdA,aAAA,iBAAa;AACf,CAAC,EAJWA,aAAa,KAAbA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}