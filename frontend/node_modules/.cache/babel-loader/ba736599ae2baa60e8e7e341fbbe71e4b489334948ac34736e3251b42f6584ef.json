{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { isPrimitive } from '../directive-helpers.js';\nimport { directive, AsyncDirective } from '../async-directive.js';\nimport { Pauser, PseudoWeakRef } from './private-async-helpers.js';\nconst isPromise = x => {\n  return !isPrimitive(x) && typeof x.then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\nexport class UntilDirective extends AsyncDirective {\n  constructor() {\n    super(...arguments);\n    this.__lastRenderedIndex = _infinity;\n    this.__values = [];\n    this.__weakThis = new PseudoWeakRef(this);\n    this.__pauser = new Pauser();\n  }\n  render(...args) {\n    return args.find(x => !isPromise(x)) ?? noChange;\n  }\n  update(_part, args) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n      const value = args[i];\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async result => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n    return noChange;\n  }\n  disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n  reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};","map":{"version":3,"names":["noChange","isPrimitive","directive","AsyncDirective","Pauser","PseudoWeakRef","isPromise","x","then","_infinity","UntilDirective","constructor","__lastRenderedIndex","__values","__weakThis","__pauser","render","args","find","update","_part","previousValues","previousLength","length","weakThis","pauser","isConnected","disconnected","i","value","Promise","resolve","result","get","_this","deref","undefined","index","indexOf","setValue","disconnect","pause","reconnected","reconnect","resume","until"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\lit-html\\src\\directives\\until.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}