{"ast":null,"code":"import { erc6492MagicBytes } from '../../constants/bytes.js';\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js';\nimport { concatHex } from '../data/concat.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\n/**\n * @description Serializes a ERC-6492 flavoured signature into hex format.\n *\n * @param signature ERC-6492 signature in object format.\n * @returns ERC-6492 signature in hex format.\n *\n * @example\n * serializeSignature({ address: '0x...', data: '0x...', signature: '0x...' })\n * // '0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492'\n */\nexport function serializeErc6492Signature(parameters) {\n  const {\n    address,\n    data,\n    signature,\n    to = 'hex'\n  } = parameters;\n  const signature_ = concatHex([encodeAbiParameters([{\n    type: 'address'\n  }, {\n    type: 'bytes'\n  }, {\n    type: 'bytes'\n  }], [address, data, signature]), erc6492MagicBytes]);\n  if (to === 'hex') return signature_;\n  return hexToBytes(signature_);\n}","map":{"version":3,"names":["erc6492MagicBytes","encodeAbiParameters","concatHex","hexToBytes","serializeErc6492Signature","parameters","address","data","signature","to","signature_","type"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\signature\\serializeErc6492Signature.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport { erc6492MagicBytes } from '../../constants/bytes.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js'\nimport { concatHex } from '../data/concat.js'\nimport { hexToBytes } from '../encoding/toBytes.js'\n\ntype To = 'bytes' | 'hex'\n\nexport type SerializeErc6492SignatureParameters<to extends To = 'hex'> = {\n  /** The ERC-4337 Account Factory address to use for counterfactual verification. */\n  address: Address\n  /** Calldata to pass to deploy account (if not deployed) for counterfactual verification. */\n  data: Hex\n  /** The original signature. */\n  signature: Hex\n  to?: to | To | undefined\n}\n\nexport type SerializeErc6492SignatureReturnType<to extends To = 'hex'> =\n  | (to extends 'hex' ? Hex : never)\n  | (to extends 'bytes' ? ByteArray : never)\n\nexport type SerializeErc6492SignatureErrorType = ErrorType\n\n/**\n * @description Serializes a ERC-6492 flavoured signature into hex format.\n *\n * @param signature ERC-6492 signature in object format.\n * @returns ERC-6492 signature in hex format.\n *\n * @example\n * serializeSignature({ address: '0x...', data: '0x...', signature: '0x...' })\n * // '0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492'\n */\nexport function serializeErc6492Signature<to extends To = 'hex'>(\n  parameters: SerializeErc6492SignatureParameters<to>,\n): SerializeErc6492SignatureReturnType<to> {\n  const { address, data, signature, to = 'hex' } = parameters\n  const signature_ = concatHex([\n    encodeAbiParameters(\n      [{ type: 'address' }, { type: 'bytes' }, { type: 'bytes' }],\n      [address, data, signature],\n    ),\n    erc6492MagicBytes,\n  ])\n\n  if (to === 'hex') return signature_ as SerializeErc6492SignatureReturnType<to>\n  return hexToBytes(signature_) as SerializeErc6492SignatureReturnType<to>\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,0BAA0B;AAG5D,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,UAAU,QAAQ,wBAAwB;AAoBnD;;;;;;;;;;AAUA,OAAM,SAAUC,yBAAyBA,CACvCC,UAAmD;EAEnD,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,SAAS;IAAEC,EAAE,GAAG;EAAK,CAAE,GAAGJ,UAAU;EAC3D,MAAMK,UAAU,GAAGR,SAAS,CAAC,CAC3BD,mBAAmB,CACjB,CAAC;IAAEU,IAAI,EAAE;EAAS,CAAE,EAAE;IAAEA,IAAI,EAAE;EAAO,CAAE,EAAE;IAAEA,IAAI,EAAE;EAAO,CAAE,CAAC,EAC3D,CAACL,OAAO,EAAEC,IAAI,EAAEC,SAAS,CAAC,CAC3B,EACDR,iBAAiB,CAClB,CAAC;EAEF,IAAIS,EAAE,KAAK,KAAK,EAAE,OAAOC,UAAqD;EAC9E,OAAOP,UAAU,CAACO,UAAU,CAA4C;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}