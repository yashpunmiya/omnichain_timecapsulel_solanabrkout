{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeGuardUnknownTypeError = void 0;\nexports.IsReadonly = IsReadonly;\nexports.IsOptional = IsOptional;\nexports.IsAny = IsAny;\nexports.IsArray = IsArray;\nexports.IsAsyncIterator = IsAsyncIterator;\nexports.IsBigInt = IsBigInt;\nexports.IsBoolean = IsBoolean;\nexports.IsConstructor = IsConstructor;\nexports.IsDate = IsDate;\nexports.IsFunction = IsFunction;\nexports.IsInteger = IsInteger;\nexports.IsProperties = IsProperties;\nexports.IsIntersect = IsIntersect;\nexports.IsIterator = IsIterator;\nexports.IsKindOf = IsKindOf;\nexports.IsLiteralString = IsLiteralString;\nexports.IsLiteralNumber = IsLiteralNumber;\nexports.IsLiteralBoolean = IsLiteralBoolean;\nexports.IsLiteral = IsLiteral;\nexports.IsLiteralValue = IsLiteralValue;\nexports.IsMappedKey = IsMappedKey;\nexports.IsMappedResult = IsMappedResult;\nexports.IsNever = IsNever;\nexports.IsNot = IsNot;\nexports.IsNull = IsNull;\nexports.IsNumber = IsNumber;\nexports.IsObject = IsObject;\nexports.IsPromise = IsPromise;\nexports.IsRecord = IsRecord;\nexports.IsRecursive = IsRecursive;\nexports.IsRef = IsRef;\nexports.IsRegExp = IsRegExp;\nexports.IsString = IsString;\nexports.IsSymbol = IsSymbol;\nexports.IsTemplateLiteral = IsTemplateLiteral;\nexports.IsThis = IsThis;\nexports.IsTransform = IsTransform;\nexports.IsTuple = IsTuple;\nexports.IsUndefined = IsUndefined;\nexports.IsUnionLiteral = IsUnionLiteral;\nexports.IsUnion = IsUnion;\nexports.IsUint8Array = IsUint8Array;\nexports.IsUnknown = IsUnknown;\nexports.IsUnsafe = IsUnsafe;\nexports.IsVoid = IsVoid;\nexports.IsKind = IsKind;\nexports.IsSchema = IsSchema;\nconst ValueGuard = require(\"./value\");\nconst index_1 = require(\"../symbols/index\");\nconst index_2 = require(\"../error/index\");\nclass TypeGuardUnknownTypeError extends index_2.TypeBoxError {}\nexports.TypeGuardUnknownTypeError = TypeGuardUnknownTypeError;\nconst KnownTypes = ['Any', 'Array', 'AsyncIterator', 'BigInt', 'Boolean', 'Constructor', 'Date', 'Enum', 'Function', 'Integer', 'Intersect', 'Iterator', 'Literal', 'MappedKey', 'MappedResult', 'Not', 'Null', 'Number', 'Object', 'Promise', 'Record', 'Ref', 'RegExp', 'String', 'Symbol', 'TemplateLiteral', 'This', 'Tuple', 'Undefined', 'Union', 'Uint8Array', 'Unknown', 'Void'];\nfunction IsPattern(value) {\n  try {\n    new RegExp(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction IsControlCharacterFree(value) {\n  if (!ValueGuard.IsString(value)) return false;\n  for (let i = 0; i < value.length; i++) {\n    const code = value.charCodeAt(i);\n    if (code >= 7 && code <= 13 || code === 27 || code === 127) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction IsAdditionalProperties(value) {\n  return IsOptionalBoolean(value) || IsSchema(value);\n}\nfunction IsOptionalBigInt(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsBigInt(value);\n}\nfunction IsOptionalNumber(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsNumber(value);\n}\nfunction IsOptionalBoolean(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsBoolean(value);\n}\nfunction IsOptionalString(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value);\n}\nfunction IsOptionalPattern(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value) && IsControlCharacterFree(value) && IsPattern(value);\n}\nfunction IsOptionalFormat(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value) && IsControlCharacterFree(value);\n}\nfunction IsOptionalSchema(value) {\n  return ValueGuard.IsUndefined(value) || IsSchema(value);\n}\n// ------------------------------------------------------------------\n// Modifiers\n// ------------------------------------------------------------------\n/** Returns true if this value has a Readonly symbol */\nfunction IsReadonly(value) {\n  return ValueGuard.IsObject(value) && value[index_1.ReadonlyKind] === 'Readonly';\n}\n/** Returns true if this value has a Optional symbol */\nfunction IsOptional(value) {\n  return ValueGuard.IsObject(value) && value[index_1.OptionalKind] === 'Optional';\n}\n// ------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------\n/** Returns true if the given value is TAny */\nfunction IsAny(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Any') && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TArray */\nfunction IsArray(value) {\n  return IsKindOf(value, 'Array') && value.type === 'array' && IsOptionalString(value.$id) && IsSchema(value.items) && IsOptionalNumber(value.minItems) && IsOptionalNumber(value.maxItems) && IsOptionalBoolean(value.uniqueItems) && IsOptionalSchema(value.contains) && IsOptionalNumber(value.minContains) && IsOptionalNumber(value.maxContains);\n}\n/** Returns true if the given value is TAsyncIterator */\nfunction IsAsyncIterator(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'AsyncIterator') && value.type === 'AsyncIterator' && IsOptionalString(value.$id) && IsSchema(value.items);\n}\n/** Returns true if the given value is TBigInt */\nfunction IsBigInt(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'BigInt') && value.type === 'bigint' && IsOptionalString(value.$id) && IsOptionalBigInt(value.exclusiveMaximum) && IsOptionalBigInt(value.exclusiveMinimum) && IsOptionalBigInt(value.maximum) && IsOptionalBigInt(value.minimum) && IsOptionalBigInt(value.multipleOf);\n}\n/** Returns true if the given value is TBoolean */\nfunction IsBoolean(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Boolean') && value.type === 'boolean' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TConstructor */\nfunction IsConstructor(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Constructor') && value.type === 'Constructor' && IsOptionalString(value.$id) && ValueGuard.IsArray(value.parameters) && value.parameters.every(schema => IsSchema(schema)) && IsSchema(value.returns);\n}\n/** Returns true if the given value is TDate */\nfunction IsDate(value) {\n  return IsKindOf(value, 'Date') && value.type === 'Date' && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximumTimestamp) && IsOptionalNumber(value.exclusiveMinimumTimestamp) && IsOptionalNumber(value.maximumTimestamp) && IsOptionalNumber(value.minimumTimestamp) && IsOptionalNumber(value.multipleOfTimestamp);\n}\n/** Returns true if the given value is TFunction */\nfunction IsFunction(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Function') && value.type === 'Function' && IsOptionalString(value.$id) && ValueGuard.IsArray(value.parameters) && value.parameters.every(schema => IsSchema(schema)) && IsSchema(value.returns);\n}\n/** Returns true if the given value is TInteger */\nfunction IsInteger(value) {\n  return IsKindOf(value, 'Integer') && value.type === 'integer' && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximum) && IsOptionalNumber(value.exclusiveMinimum) && IsOptionalNumber(value.maximum) && IsOptionalNumber(value.minimum) && IsOptionalNumber(value.multipleOf);\n}\n/** Returns true if the given schema is TProperties */\nfunction IsProperties(value) {\n  // prettier-ignore\n  return ValueGuard.IsObject(value) && Object.entries(value).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema(schema));\n}\n/** Returns true if the given value is TIntersect */\nfunction IsIntersect(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Intersect') && (ValueGuard.IsString(value.type) && value.type !== 'object' ? false : true) && ValueGuard.IsArray(value.allOf) && value.allOf.every(schema => IsSchema(schema) && !IsTransform(schema)) && IsOptionalString(value.type) && (IsOptionalBoolean(value.unevaluatedProperties) || IsOptionalSchema(value.unevaluatedProperties)) && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TIterator */\nfunction IsIterator(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Iterator') && value.type === 'Iterator' && IsOptionalString(value.$id) && IsSchema(value.items);\n}\n/** Returns true if the given value is a TKind with the given name. */\nfunction IsKindOf(value, kind) {\n  return ValueGuard.IsObject(value) && index_1.Kind in value && value[index_1.Kind] === kind;\n}\n/** Returns true if the given value is TLiteral<string> */\nfunction IsLiteralString(value) {\n  return IsLiteral(value) && ValueGuard.IsString(value.const);\n}\n/** Returns true if the given value is TLiteral<number> */\nfunction IsLiteralNumber(value) {\n  return IsLiteral(value) && ValueGuard.IsNumber(value.const);\n}\n/** Returns true if the given value is TLiteral<boolean> */\nfunction IsLiteralBoolean(value) {\n  return IsLiteral(value) && ValueGuard.IsBoolean(value.const);\n}\n/** Returns true if the given value is TLiteral */\nfunction IsLiteral(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Literal') && IsOptionalString(value.$id) && IsLiteralValue(value.const);\n}\n/** Returns true if the given value is a TLiteralValue */\nfunction IsLiteralValue(value) {\n  return ValueGuard.IsBoolean(value) || ValueGuard.IsNumber(value) || ValueGuard.IsString(value);\n}\n/** Returns true if the given value is a TMappedKey */\nfunction IsMappedKey(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'MappedKey') && ValueGuard.IsArray(value.keys) && value.keys.every(key => ValueGuard.IsNumber(key) || ValueGuard.IsString(key));\n}\n/** Returns true if the given value is TMappedResult */\nfunction IsMappedResult(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'MappedResult') && IsProperties(value.properties);\n}\n/** Returns true if the given value is TNever */\nfunction IsNever(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Never') && ValueGuard.IsObject(value.not) && Object.getOwnPropertyNames(value.not).length === 0;\n}\n/** Returns true if the given value is TNot */\nfunction IsNot(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Not') && IsSchema(value.not);\n}\n/** Returns true if the given value is TNull */\nfunction IsNull(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Null') && value.type === 'null' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TNumber */\nfunction IsNumber(value) {\n  return IsKindOf(value, 'Number') && value.type === 'number' && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximum) && IsOptionalNumber(value.exclusiveMinimum) && IsOptionalNumber(value.maximum) && IsOptionalNumber(value.minimum) && IsOptionalNumber(value.multipleOf);\n}\n/** Returns true if the given value is TObject */\nfunction IsObject(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Object') && value.type === 'object' && IsOptionalString(value.$id) && IsProperties(value.properties) && IsAdditionalProperties(value.additionalProperties) && IsOptionalNumber(value.minProperties) && IsOptionalNumber(value.maxProperties);\n}\n/** Returns true if the given value is TPromise */\nfunction IsPromise(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Promise') && value.type === 'Promise' && IsOptionalString(value.$id) && IsSchema(value.item);\n}\n/** Returns true if the given value is TRecord */\nfunction IsRecord(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Record') && value.type === 'object' && IsOptionalString(value.$id) && IsAdditionalProperties(value.additionalProperties) && ValueGuard.IsObject(value.patternProperties) && (schema => {\n    const keys = Object.getOwnPropertyNames(schema.patternProperties);\n    return keys.length === 1 && IsPattern(keys[0]) && ValueGuard.IsObject(schema.patternProperties) && IsSchema(schema.patternProperties[keys[0]]);\n  })(value);\n}\n/** Returns true if this value is TRecursive */\nfunction IsRecursive(value) {\n  return ValueGuard.IsObject(value) && index_1.Hint in value && value[index_1.Hint] === 'Recursive';\n}\n/** Returns true if the given value is TRef */\nfunction IsRef(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Ref') && IsOptionalString(value.$id) && ValueGuard.IsString(value.$ref);\n}\n/** Returns true if the given value is TRegExp */\nfunction IsRegExp(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'RegExp') && IsOptionalString(value.$id) && ValueGuard.IsString(value.source) && ValueGuard.IsString(value.flags) && IsOptionalNumber(value.maxLength) && IsOptionalNumber(value.minLength);\n}\n/** Returns true if the given value is TString */\nfunction IsString(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'String') && value.type === 'string' && IsOptionalString(value.$id) && IsOptionalNumber(value.minLength) && IsOptionalNumber(value.maxLength) && IsOptionalPattern(value.pattern) && IsOptionalFormat(value.format);\n}\n/** Returns true if the given value is TSymbol */\nfunction IsSymbol(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Symbol') && value.type === 'symbol' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TTemplateLiteral */\nfunction IsTemplateLiteral(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'TemplateLiteral') && value.type === 'string' && ValueGuard.IsString(value.pattern) && value.pattern[0] === '^' && value.pattern[value.pattern.length - 1] === '$';\n}\n/** Returns true if the given value is TThis */\nfunction IsThis(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'This') && IsOptionalString(value.$id) && ValueGuard.IsString(value.$ref);\n}\n/** Returns true of this value is TTransform */\nfunction IsTransform(value) {\n  return ValueGuard.IsObject(value) && index_1.TransformKind in value;\n}\n/** Returns true if the given value is TTuple */\nfunction IsTuple(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Tuple') && value.type === 'array' && IsOptionalString(value.$id) && ValueGuard.IsNumber(value.minItems) && ValueGuard.IsNumber(value.maxItems) && value.minItems === value.maxItems && (\n  // empty\n  ValueGuard.IsUndefined(value.items) && ValueGuard.IsUndefined(value.additionalItems) && value.minItems === 0 || ValueGuard.IsArray(value.items) && value.items.every(schema => IsSchema(schema)));\n}\n/** Returns true if the given value is TUndefined */\nfunction IsUndefined(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Undefined') && value.type === 'undefined' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TUnion<Literal<string | number>[]> */\nfunction IsUnionLiteral(value) {\n  return IsUnion(value) && value.anyOf.every(schema => IsLiteralString(schema) || IsLiteralNumber(schema));\n}\n/** Returns true if the given value is TUnion */\nfunction IsUnion(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Union') && IsOptionalString(value.$id) && ValueGuard.IsObject(value) && ValueGuard.IsArray(value.anyOf) && value.anyOf.every(schema => IsSchema(schema));\n}\n/** Returns true if the given value is TUint8Array */\nfunction IsUint8Array(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Uint8Array') && value.type === 'Uint8Array' && IsOptionalString(value.$id) && IsOptionalNumber(value.minByteLength) && IsOptionalNumber(value.maxByteLength);\n}\n/** Returns true if the given value is TUnknown */\nfunction IsUnknown(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Unknown') && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is a raw TUnsafe */\nfunction IsUnsafe(value) {\n  return IsKindOf(value, 'Unsafe');\n}\n/** Returns true if the given value is TVoid */\nfunction IsVoid(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Void') && value.type === 'void' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TKind */\nfunction IsKind(value) {\n  return ValueGuard.IsObject(value) && index_1.Kind in value && ValueGuard.IsString(value[index_1.Kind]) && !KnownTypes.includes(value[index_1.Kind]);\n}\n/** Returns true if the given value is TSchema */\nfunction IsSchema(value) {\n  // prettier-ignore\n  return ValueGuard.IsObject(value) && (IsAny(value) || IsArray(value) || IsBoolean(value) || IsBigInt(value) || IsAsyncIterator(value) || IsConstructor(value) || IsDate(value) || IsFunction(value) || IsInteger(value) || IsIntersect(value) || IsIterator(value) || IsLiteral(value) || IsMappedKey(value) || IsMappedResult(value) || IsNever(value) || IsNot(value) || IsNull(value) || IsNumber(value) || IsObject(value) || IsPromise(value) || IsRecord(value) || IsRef(value) || IsRegExp(value) || IsString(value) || IsSymbol(value) || IsTemplateLiteral(value) || IsThis(value) || IsTuple(value) || IsUndefined(value) || IsUnion(value) || IsUint8Array(value) || IsUnknown(value) || IsUnsafe(value) || IsVoid(value) || IsKind(value));\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}