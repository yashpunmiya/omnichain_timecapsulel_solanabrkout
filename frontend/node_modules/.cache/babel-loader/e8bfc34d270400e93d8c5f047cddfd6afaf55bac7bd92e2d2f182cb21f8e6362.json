{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { AccountController, AssetController, AssetUtil, ChainController, ConnectionController, ConnectorController, EventsController, ModalController, OptionsController, RouterController, SIWXUtil } from '@reown/appkit-controllers';\nimport { customElement } from '@reown/appkit-ui';\nimport '@reown/appkit-ui/wui-flex';\nimport '@reown/appkit-ui/wui-icon-link';\nimport '@reown/appkit-ui/wui-select';\nimport '@reown/appkit-ui/wui-tag';\nimport '@reown/appkit-ui/wui-text';\nimport { ConstantsUtil } from '../../utils/ConstantsUtil.js';\nimport styles from './styles.js';\nconst BETA_SCREENS = ['SmartSessionList'];\nfunction headings() {\n  const connectorName = RouterController.state.data?.connector?.name;\n  const walletName = RouterController.state.data?.wallet?.name;\n  const networkName = RouterController.state.data?.network?.name;\n  const name = walletName ?? connectorName;\n  const connectors = ConnectorController.getConnectors();\n  const isEmail = connectors.length === 1 && connectors[0]?.id === 'w3m-email';\n  return {\n    Connect: `Connect ${isEmail ? 'Email' : ''} Wallet`,\n    Create: 'Create Wallet',\n    ChooseAccountName: undefined,\n    Account: undefined,\n    AccountSettings: undefined,\n    AllWallets: 'All Wallets',\n    ApproveTransaction: 'Approve Transaction',\n    BuyInProgress: 'Buy',\n    ConnectingExternal: name ?? 'Connect Wallet',\n    ConnectingWalletConnect: name ?? 'WalletConnect',\n    ConnectingWalletConnectBasic: 'WalletConnect',\n    ConnectingSiwe: 'Sign In',\n    Convert: 'Convert',\n    ConvertSelectToken: 'Select token',\n    ConvertPreview: 'Preview convert',\n    Downloads: name ? `Get ${name}` : 'Downloads',\n    EmailLogin: 'Email Login',\n    EmailVerifyOtp: 'Confirm Email',\n    EmailVerifyDevice: 'Register Device',\n    GetWallet: 'Get a wallet',\n    Networks: 'Choose Network',\n    OnRampProviders: 'Choose Provider',\n    OnRampActivity: 'Activity',\n    OnRampTokenSelect: 'Select Token',\n    OnRampFiatSelect: 'Select Currency',\n    Profile: undefined,\n    SwitchNetwork: networkName ?? 'Switch Network',\n    SwitchAddress: 'Switch Address',\n    Transactions: 'Activity',\n    UnsupportedChain: 'Switch Network',\n    UpgradeEmailWallet: 'Upgrade your Wallet',\n    UpdateEmailWallet: 'Edit Email',\n    UpdateEmailPrimaryOtp: 'Confirm Current Email',\n    UpdateEmailSecondaryOtp: 'Confirm New Email',\n    WhatIsABuy: 'What is Buy?',\n    RegisterAccountName: 'Choose name',\n    RegisterAccountNameSuccess: '',\n    WalletReceive: 'Receive',\n    WalletCompatibleNetworks: 'Compatible Networks',\n    Swap: 'Swap',\n    SwapSelectToken: 'Select token',\n    SwapPreview: 'Preview swap',\n    WalletSend: 'Send',\n    WalletSendPreview: 'Review send',\n    WalletSendSelectToken: 'Select Token',\n    WhatIsANetwork: 'What is a network?',\n    WhatIsAWallet: 'What is a wallet?',\n    ConnectWallets: 'Connect wallet',\n    ConnectSocials: 'All socials',\n    ConnectingSocial: AccountController.state.socialProvider ? AccountController.state.socialProvider : 'Connect Social',\n    ConnectingMultiChain: 'Select chain',\n    ConnectingFarcaster: 'Farcaster',\n    SwitchActiveChain: 'Switch chain',\n    SmartSessionCreated: undefined,\n    SmartSessionList: 'Smart Sessions',\n    SIWXSignMessage: 'Sign In'\n  };\n}\nlet W3mHeader = class W3mHeader extends LitElement {\n  constructor() {\n    super();\n    this.unsubscribe = [];\n    this.heading = headings()[RouterController.state.view];\n    this.network = ChainController.state.activeCaipNetwork;\n    this.networkImage = AssetUtil.getNetworkImage(this.network);\n    this.buffering = false;\n    this.showBack = false;\n    this.prevHistoryLength = 1;\n    this.view = RouterController.state.view;\n    this.viewDirection = '';\n    this.headerText = headings()[RouterController.state.view];\n    this.unsubscribe.push(AssetController.subscribeNetworkImages(() => {\n      this.networkImage = AssetUtil.getNetworkImage(this.network);\n    }), RouterController.subscribeKey('view', val => {\n      setTimeout(() => {\n        this.view = val;\n        this.headerText = headings()[val];\n      }, ConstantsUtil.ANIMATION_DURATIONS.HeaderText);\n      this.onViewChange();\n      this.onHistoryChange();\n    }), ConnectionController.subscribeKey('buffering', val => this.buffering = val), ChainController.subscribeKey('activeCaipNetwork', val => {\n      this.network = val;\n      this.networkImage = AssetUtil.getNetworkImage(this.network);\n    }));\n  }\n  disconnectCallback() {\n    this.unsubscribe.forEach(unsubscribe => unsubscribe());\n  }\n  render() {\n    return html`\n      <wui-flex .padding=${this.getPadding()} justifyContent=\"space-between\" alignItems=\"center\">\n        ${this.leftHeaderTemplate()} ${this.titleTemplate()} ${this.rightHeaderTemplate()}\n      </wui-flex>\n    `;\n  }\n  onWalletHelp() {\n    EventsController.sendEvent({\n      type: 'track',\n      event: 'CLICK_WALLET_HELP'\n    });\n    RouterController.push('WhatIsAWallet');\n  }\n  async onClose() {\n    const isUnsupportedChain = RouterController.state.view === 'UnsupportedChain';\n    if (isUnsupportedChain || (await SIWXUtil.isSIWXCloseDisabled())) {\n      ModalController.shake();\n    } else {\n      ModalController.close();\n    }\n  }\n  rightHeaderTemplate() {\n    const isSmartSessionsEnabled = OptionsController?.state?.features?.smartSessions;\n    if (RouterController.state.view !== 'Account' || !isSmartSessionsEnabled) {\n      return this.closeButtonTemplate();\n    }\n    return html`<wui-flex>\n      <wui-icon-link\n        icon=\"clock\"\n        @click=${() => RouterController.push('SmartSessionList')}\n        data-testid=\"w3m-header-smart-sessions\"\n      ></wui-icon-link>\n      ${this.closeButtonTemplate()}\n    </wui-flex> `;\n  }\n  closeButtonTemplate() {\n    return html`\n      <wui-icon-link\n        ?disabled=${this.buffering}\n        icon=\"close\"\n        @click=${this.onClose.bind(this)}\n        data-testid=\"w3m-header-close\"\n      ></wui-icon-link>\n    `;\n  }\n  titleTemplate() {\n    const isBeta = BETA_SCREENS.includes(this.view);\n    return html`\n      <wui-flex\n        view-direction=\"${this.viewDirection}\"\n        class=\"w3m-header-title\"\n        alignItems=\"center\"\n        gap=\"xs\"\n      >\n        <wui-text variant=\"paragraph-700\" color=\"fg-100\" data-testid=\"w3m-header-text\"\n          >${this.headerText}</wui-text\n        >\n        ${isBeta ? html`<wui-tag variant=\"main\">Beta</wui-tag>` : null}\n      </wui-flex>\n    `;\n  }\n  leftHeaderTemplate() {\n    const {\n      view\n    } = RouterController.state;\n    const isConnectHelp = view === 'Connect';\n    const isEmbeddedEnable = OptionsController.state.enableEmbedded;\n    const isApproveTransaction = view === 'ApproveTransaction';\n    const isConnectingSIWEView = view === 'ConnectingSiwe';\n    const isAccountView = view === 'Account';\n    const enableNetworkSwitch = OptionsController.state.enableNetworkSwitch;\n    const shouldHideBack = isApproveTransaction || isConnectingSIWEView || isConnectHelp && isEmbeddedEnable;\n    if (isAccountView && enableNetworkSwitch) {\n      return html`<wui-select\n        id=\"dynamic\"\n        data-testid=\"w3m-account-select-network\"\n        active-network=${ifDefined(this.network?.name)}\n        @click=${this.onNetworks.bind(this)}\n        imageSrc=${ifDefined(this.networkImage)}\n      ></wui-select>`;\n    }\n    if (this.showBack && !shouldHideBack) {\n      return html`<wui-icon-link\n        data-testid=\"header-back\"\n        id=\"dynamic\"\n        icon=\"chevronLeft\"\n        ?disabled=${this.buffering}\n        @click=${this.onGoBack.bind(this)}\n      ></wui-icon-link>`;\n    }\n    return html`<wui-icon-link\n      data-hidden=${!isConnectHelp}\n      id=\"dynamic\"\n      icon=\"helpCircle\"\n      @click=${this.onWalletHelp.bind(this)}\n    ></wui-icon-link>`;\n  }\n  onNetworks() {\n    if (this.isAllowedNetworkSwitch()) {\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'CLICK_NETWORKS'\n      });\n      RouterController.push('Networks');\n    }\n  }\n  isAllowedNetworkSwitch() {\n    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();\n    const isMultiNetwork = requestedCaipNetworks ? requestedCaipNetworks.length > 1 : false;\n    const isValidNetwork = requestedCaipNetworks?.find(({\n      id\n    }) => id === this.network?.id);\n    return isMultiNetwork || !isValidNetwork;\n  }\n  getPadding() {\n    if (this.heading) {\n      return ['l', '2l', 'l', '2l'];\n    }\n    return ['0', '2l', '0', '2l'];\n  }\n  onViewChange() {\n    const {\n      history\n    } = RouterController.state;\n    let direction = ConstantsUtil.VIEW_DIRECTION.Next;\n    if (history.length < this.prevHistoryLength) {\n      direction = ConstantsUtil.VIEW_DIRECTION.Prev;\n    }\n    this.prevHistoryLength = history.length;\n    this.viewDirection = direction;\n  }\n  async onHistoryChange() {\n    const {\n      history\n    } = RouterController.state;\n    const buttonEl = this.shadowRoot?.querySelector('#dynamic');\n    if (history.length > 1 && !this.showBack && buttonEl) {\n      await buttonEl.animate([{\n        opacity: 1\n      }, {\n        opacity: 0\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      }).finished;\n      this.showBack = true;\n      buttonEl.animate([{\n        opacity: 0\n      }, {\n        opacity: 1\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      });\n    } else if (history.length <= 1 && this.showBack && buttonEl) {\n      await buttonEl.animate([{\n        opacity: 1\n      }, {\n        opacity: 0\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      }).finished;\n      this.showBack = false;\n      buttonEl.animate([{\n        opacity: 0\n      }, {\n        opacity: 1\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      });\n    }\n  }\n  onGoBack() {\n    RouterController.goBack();\n  }\n};\nW3mHeader.styles = styles;\n__decorate([state()], W3mHeader.prototype, \"heading\", void 0);\n__decorate([state()], W3mHeader.prototype, \"network\", void 0);\n__decorate([state()], W3mHeader.prototype, \"networkImage\", void 0);\n__decorate([state()], W3mHeader.prototype, \"buffering\", void 0);\n__decorate([state()], W3mHeader.prototype, \"showBack\", void 0);\n__decorate([state()], W3mHeader.prototype, \"prevHistoryLength\", void 0);\n__decorate([state()], W3mHeader.prototype, \"view\", void 0);\n__decorate([state()], W3mHeader.prototype, \"viewDirection\", void 0);\n__decorate([state()], W3mHeader.prototype, \"headerText\", void 0);\nW3mHeader = __decorate([customElement('w3m-header')], W3mHeader);\nexport { W3mHeader };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}