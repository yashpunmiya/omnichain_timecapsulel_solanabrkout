{"ast":null,"code":"import { bytesToHex } from '../encoding/toHex.js';\nimport { sha256 } from '../hash/sha256.js';\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash(parameters) {\n  const {\n    commitment,\n    version = 1\n  } = parameters;\n  const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes');\n  const versionedHash = sha256(commitment, 'bytes');\n  versionedHash.set([version], 0);\n  return to === 'bytes' ? versionedHash : bytesToHex(versionedHash);\n}","map":{"version":3,"names":["bytesToHex","sha256","commitmentToVersionedHash","parameters","commitment","version","to","versionedHash","set"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\blob\\commitmentToVersionedHash.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Sha256ErrorType, sha256 } from '../hash/sha256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentToVersionedHashParameters<\n  commitment extends Uint8Array | Hex = Uint8Array | Hex,\n  to extends To | undefined = undefined,\n> = {\n  /** Commitment from blob. */\n  commitment: commitment | Uint8Array | Hex\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hash. */\n  version?: number | undefined\n}\n\nexport type CommitmentToVersionedHashReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type CommitmentToVersionedHashErrorType =\n  | Sha256ErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash<\n  const commitment extends Hex | ByteArray,\n  to extends To =\n    | (commitment extends Hex ? 'hex' : never)\n    | (commitment extends ByteArray ? 'bytes' : never),\n>(\n  parameters: CommitmentToVersionedHashParameters<commitment, to>,\n): CommitmentToVersionedHashReturnType<to> {\n  const { commitment, version = 1 } = parameters\n  const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes')\n\n  const versionedHash = sha256(commitment, 'bytes')\n  versionedHash.set([version], 0)\n  return (\n    to === 'bytes' ? versionedHash : bytesToHex(versionedHash)\n  ) as CommitmentToVersionedHashReturnType<to>\n}\n"],"mappings":"AAEA,SAAmCA,UAAU,QAAQ,sBAAsB;AAC3E,SAA+BC,MAAM,QAAQ,mBAAmB;AAyBhE;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,yBAAyBA,CAMvCC,UAA+D;EAE/D,MAAM;IAAEC,UAAU;IAAEC,OAAO,GAAG;EAAC,CAAE,GAAGF,UAAU;EAC9C,MAAMG,EAAE,GAAGH,UAAU,CAACG,EAAE,KAAK,OAAOF,UAAU,KAAK,QAAQ,GAAG,KAAK,GAAG,OAAO,CAAC;EAE9E,MAAMG,aAAa,GAAGN,MAAM,CAACG,UAAU,EAAE,OAAO,CAAC;EACjDG,aAAa,CAACC,GAAG,CAAC,CAACH,OAAO,CAAC,EAAE,CAAC,CAAC;EAC/B,OACEC,EAAE,KAAK,OAAO,GAAGC,aAAa,GAAGP,UAAU,CAACO,aAAa,CAAC;AAE9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}