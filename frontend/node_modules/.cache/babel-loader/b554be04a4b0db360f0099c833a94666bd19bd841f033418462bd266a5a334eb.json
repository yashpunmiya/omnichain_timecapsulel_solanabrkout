{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * Wraps up a few best practices when returning a property descriptor from a\n * decorator.\n *\n * Marks the defined property as configurable, and enumerable, and handles\n * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular\n * apps).\n *\n * @internal\n */\nexport const desc = (obj, name, descriptor) => {\n  // For backwards compatibility, we keep them configurable and enumerable.\n  descriptor.configurable = true;\n  descriptor.enumerable = true;\n  if (\n  // We check for Reflect.decorate each time, in case the zombiefill\n  // is applied via lazy loading some Angular code.\n  Reflect.decorate && typeof name !== 'object') {\n    // If we're called as a legacy decorator, and Reflect.decorate is present\n    // then we have no guarantees that the returned descriptor will be\n    // defined on the class, so we must apply it directly ourselves.\n    Object.defineProperty(obj, name, descriptor);\n  }\n  return descriptor;\n};\n//# sourceMappingURL=base.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}