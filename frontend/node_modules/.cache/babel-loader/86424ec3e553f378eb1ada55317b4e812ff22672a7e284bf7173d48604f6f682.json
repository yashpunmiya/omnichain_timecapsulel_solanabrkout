{"ast":null,"code":"import { parseEventLogs } from '../../utils/abi/parseEventLogs.js';\nimport { formatLog } from '../../utils/formatters/log.js';\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs(_client, {\n  filter\n}) {\n  const strict = filter.strict ?? false;\n  const logs = await filter.request({\n    method: 'eth_getFilterLogs',\n    params: [filter.id]\n  });\n  const formattedLogs = logs.map(log => formatLog(log));\n  if (!filter.abi) return formattedLogs;\n  return parseEventLogs({\n    abi: filter.abi,\n    logs: formattedLogs,\n    strict\n  });\n}\n//# sourceMappingURL=getFilterLogs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}