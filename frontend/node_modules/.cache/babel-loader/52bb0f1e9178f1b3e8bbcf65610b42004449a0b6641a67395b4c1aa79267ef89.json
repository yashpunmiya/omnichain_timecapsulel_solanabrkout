{"ast":null,"code":"import { createCursor } from '../cursor.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\nexport function fromBlobs(parameters) {\n  const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n  const blobs = typeof parameters.blobs[0] === 'string' ? parameters.blobs.map(x => hexToBytes(x)) : parameters.blobs;\n  const length = blobs.reduce((length, blob) => length + blob.length, 0);\n  const data = createCursor(new Uint8Array(length));\n  let active = true;\n  for (const blob of blobs) {\n    const cursor = createCursor(blob);\n    while (active && cursor.position < blob.length) {\n      // First byte will be a zero 0x00 byte â€“ we can skip.\n      cursor.incrementPosition(1);\n      let consume = 31;\n      if (blob.length - cursor.position < 31) consume = blob.length - cursor.position;\n      for (const _ in Array.from({\n        length: consume\n      })) {\n        const byte = cursor.readByte();\n        const isTerminator = byte === 0x80 && !cursor.inspectBytes(cursor.remaining).includes(0x80);\n        if (isTerminator) {\n          active = false;\n          break;\n        }\n        data.pushByte(byte);\n      }\n    }\n  }\n  const trimmedData = data.bytes.slice(0, data.position);\n  return to === 'hex' ? bytesToHex(trimmedData) : trimmedData;\n}\n//# sourceMappingURL=fromBlobs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}