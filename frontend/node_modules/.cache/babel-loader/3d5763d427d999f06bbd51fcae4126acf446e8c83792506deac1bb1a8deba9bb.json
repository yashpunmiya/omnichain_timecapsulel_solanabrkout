{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueHashError = void 0;\nexports.Hash = Hash;\nconst index_1 = require(\"../guard/index\");\nconst index_2 = require(\"../../type/error/index\");\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nclass ValueHashError extends index_2.TypeBoxError {\n  constructor(value) {\n    super(`Unable to hash value`);\n    this.value = value;\n  }\n}\nexports.ValueHashError = ValueHashError;\n// ------------------------------------------------------------------\n// ByteMarker\n// ------------------------------------------------------------------\nvar ByteMarker;\n(function (ByteMarker) {\n  ByteMarker[ByteMarker[\"Undefined\"] = 0] = \"Undefined\";\n  ByteMarker[ByteMarker[\"Null\"] = 1] = \"Null\";\n  ByteMarker[ByteMarker[\"Boolean\"] = 2] = \"Boolean\";\n  ByteMarker[ByteMarker[\"Number\"] = 3] = \"Number\";\n  ByteMarker[ByteMarker[\"String\"] = 4] = \"String\";\n  ByteMarker[ByteMarker[\"Object\"] = 5] = \"Object\";\n  ByteMarker[ByteMarker[\"Array\"] = 6] = \"Array\";\n  ByteMarker[ByteMarker[\"Date\"] = 7] = \"Date\";\n  ByteMarker[ByteMarker[\"Uint8Array\"] = 8] = \"Uint8Array\";\n  ByteMarker[ByteMarker[\"Symbol\"] = 9] = \"Symbol\";\n  ByteMarker[ByteMarker[\"BigInt\"] = 10] = \"BigInt\";\n})(ByteMarker || (ByteMarker = {}));\n// ------------------------------------------------------------------\n// State\n// ------------------------------------------------------------------\nlet Accumulator = BigInt('14695981039346656037');\nconst [Prime, Size] = [BigInt('1099511628211'), BigInt('18446744073709551616' /* 2 ^ 64 */)];\nconst Bytes = Array.from({\n  length: 256\n}).map((_, i) => BigInt(i));\nconst F64 = new Float64Array(1);\nconst F64In = new DataView(F64.buffer);\nconst F64Out = new Uint8Array(F64.buffer);\n// ------------------------------------------------------------------\n// NumberToBytes\n// ------------------------------------------------------------------\nfunction* NumberToBytes(value) {\n  const byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);\n  for (let i = 0; i < byteCount; i++) {\n    yield value >> 8 * (byteCount - 1 - i) & 0xff;\n  }\n}\n// ------------------------------------------------------------------\n// Hashing Functions\n// ------------------------------------------------------------------\nfunction ArrayType(value) {\n  FNV1A64(ByteMarker.Array);\n  for (const item of value) {\n    Visit(item);\n  }\n}\nfunction BooleanType(value) {\n  FNV1A64(ByteMarker.Boolean);\n  FNV1A64(value ? 1 : 0);\n}\nfunction BigIntType(value) {\n  FNV1A64(ByteMarker.BigInt);\n  F64In.setBigInt64(0, value);\n  for (const byte of F64Out) {\n    FNV1A64(byte);\n  }\n}\nfunction DateType(value) {\n  FNV1A64(ByteMarker.Date);\n  Visit(value.getTime());\n}\nfunction NullType(value) {\n  FNV1A64(ByteMarker.Null);\n}\nfunction NumberType(value) {\n  FNV1A64(ByteMarker.Number);\n  F64In.setFloat64(0, value);\n  for (const byte of F64Out) {\n    FNV1A64(byte);\n  }\n}\nfunction ObjectType(value) {\n  FNV1A64(ByteMarker.Object);\n  for (const key of globalThis.Object.getOwnPropertyNames(value).sort()) {\n    Visit(key);\n    Visit(value[key]);\n  }\n}\nfunction StringType(value) {\n  FNV1A64(ByteMarker.String);\n  for (let i = 0; i < value.length; i++) {\n    for (const byte of NumberToBytes(value.charCodeAt(i))) {\n      FNV1A64(byte);\n    }\n  }\n}\nfunction SymbolType(value) {\n  FNV1A64(ByteMarker.Symbol);\n  Visit(value.description);\n}\nfunction Uint8ArrayType(value) {\n  FNV1A64(ByteMarker.Uint8Array);\n  for (let i = 0; i < value.length; i++) {\n    FNV1A64(value[i]);\n  }\n}\nfunction UndefinedType(value) {\n  return FNV1A64(ByteMarker.Undefined);\n}\nfunction Visit(value) {\n  if ((0, index_1.IsArray)(value)) return ArrayType(value);\n  if ((0, index_1.IsBoolean)(value)) return BooleanType(value);\n  if ((0, index_1.IsBigInt)(value)) return BigIntType(value);\n  if ((0, index_1.IsDate)(value)) return DateType(value);\n  if ((0, index_1.IsNull)(value)) return NullType(value);\n  if ((0, index_1.IsNumber)(value)) return NumberType(value);\n  if ((0, index_1.IsObject)(value)) return ObjectType(value);\n  if ((0, index_1.IsString)(value)) return StringType(value);\n  if ((0, index_1.IsSymbol)(value)) return SymbolType(value);\n  if ((0, index_1.IsUint8Array)(value)) return Uint8ArrayType(value);\n  if ((0, index_1.IsUndefined)(value)) return UndefinedType(value);\n  throw new ValueHashError(value);\n}\nfunction FNV1A64(byte) {\n  Accumulator = Accumulator ^ Bytes[byte];\n  Accumulator = Accumulator * Prime % Size;\n}\n// ------------------------------------------------------------------\n// Hash\n// ------------------------------------------------------------------\n/** Creates a FNV1A-64 non cryptographic hash of the given value */\nfunction Hash(value) {\n  Accumulator = BigInt('14695981039346656037');\n  Visit(value);\n  return Accumulator;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}