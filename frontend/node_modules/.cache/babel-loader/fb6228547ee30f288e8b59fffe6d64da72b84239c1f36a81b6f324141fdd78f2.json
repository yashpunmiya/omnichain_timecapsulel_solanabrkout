{"ast":null,"code":"import { formatUnits } from 'viem';\nexport const ERC7811Utils = {\n  /**\n   * Creates a Balance object from an ERC7811 Asset object\n   * @param asset - Asset object to convert\n   * @param chainId - Chain ID in CAIP-2 format\n   * @returns Balance object\n   */\n  createBalance(asset, chainId) {\n    const metadata = {\n      name: asset.metadata['name'] || '',\n      symbol: asset.metadata['symbol'] || '',\n      decimals: asset.metadata['decimals'] || 0,\n      value: asset.metadata['value'] || 0,\n      price: asset.metadata['price'] || 0,\n      iconUrl: asset.metadata['iconUrl'] || ''\n    };\n    return {\n      name: metadata.name,\n      symbol: metadata.symbol,\n      chainId,\n      address: asset.address === 'native' ? undefined : this.convertAddressToCAIP10Address(asset.address, chainId),\n      value: metadata.value,\n      price: metadata.price,\n      quantity: {\n        decimals: metadata.decimals.toString(),\n        numeric: this.convertHexToBalance({\n          hex: asset.balance,\n          decimals: metadata.decimals\n        })\n      },\n      iconUrl: metadata.iconUrl\n    };\n  },\n  /**\n   * Converts a hex string to a Balance object\n   * @param hex - Hex string to convert\n   * @param decimals - Number of decimals to use\n   * @returns Balance object\n   */\n  convertHexToBalance({\n    hex,\n    decimals\n  }) {\n    return formatUnits(BigInt(hex), decimals);\n  },\n  /**\n   * Converts an address to a CAIP-10 address\n   * @param address - Address to convert\n   * @param chainId - Chain ID in CAIP-2 format\n   * @returns CAIP-10 address\n   */\n  convertAddressToCAIP10Address(address, chainId) {\n    return `${chainId}:${address}`;\n  },\n  /**\n   *  Creates a CAIP-2 Chain ID from a chain ID and namespace\n   * @param chainId  - Chain ID in hex format\n   * @param namespace  - Chain namespace\n   * @returns\n   */\n  createCAIP2ChainId(chainId, namespace) {\n    return `${namespace}:${parseInt(chainId, 16)}`;\n  },\n  /**\n   * Gets the chain ID in hex format from a CAIP-2 Chain ID\n   * @param caip2ChainId - CAIP-2 Chain ID\n   * @returns Chain ID in hex format\n   */\n  getChainIdHexFromCAIP2ChainId(caip2ChainId) {\n    const parts = caip2ChainId.split(':');\n    if (parts.length < 2 || !parts[1]) {\n      return '0x0';\n    }\n    const chainPart = parts[1];\n    const parsed = parseInt(chainPart, 10);\n    return isNaN(parsed) ? '0x0' : `0x${parsed.toString(16)}`;\n  },\n  /**\n   * Checks if a response is a valid WalletGetAssetsResponse\n   * @param response - The response to check\n   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise\n   */\n  isWalletGetAssetsResponse(response) {\n    // Check if response is an object and has the expected structure\n    if (typeof response !== 'object' || response === null) {\n      return false;\n    }\n    // Check if all values are arrays and conform to the expected asset structure\n    return Object.values(response).every(value => Array.isArray(value) && value.every(asset => this.isValidAsset(asset)));\n  },\n  /**\n   * Checks if an asset object is valid.\n   * @param asset - The asset object to check.\n   * @returns True if the asset is valid, false otherwise.\n   */\n  isValidAsset(asset) {\n    return typeof asset === 'object' && asset !== null && typeof asset.address === 'string' && typeof asset.balance === 'string' && (asset.type === 'ERC20' || asset.type === 'NATIVE') && typeof asset.metadata === 'object' && asset.metadata !== null && typeof asset.metadata['name'] === 'string' && typeof asset.metadata['symbol'] === 'string' && typeof asset.metadata['decimals'] === 'number' && typeof asset.metadata['price'] === 'number' && typeof asset.metadata['iconUrl'] === 'string';\n  }\n};\n//# sourceMappingURL=ERC7811Util.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}