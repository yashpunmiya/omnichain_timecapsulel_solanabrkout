{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoMultiAccounts = void 0;\nconst RegistryType_1 = require(\"../RegistryType\");\nconst CryptoHDKey_1 = require(\"../CryptoHDKey\");\nconst RegistryItem_1 = require(\"../RegistryItem\");\nconst lib_1 = require(\"../lib\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"masterFingerprint\"] = 1] = \"masterFingerprint\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n  Keys[Keys[\"device\"] = 3] = \"device\";\n  Keys[Keys[\"deviceId\"] = 4] = \"deviceId\";\n  Keys[Keys[\"version\"] = 5] = \"version\";\n})(Keys || (Keys = {}));\nclass CryptoMultiAccounts extends RegistryItem_1.RegistryItem {\n  constructor(masterFingerprint, keys, device, deviceId, version) {\n    super();\n    this.masterFingerprint = masterFingerprint;\n    this.keys = keys;\n    this.device = device;\n    this.deviceId = deviceId;\n    this.version = version;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n    this.getMasterFingerprint = () => this.masterFingerprint;\n    this.getKeys = () => this.keys;\n    this.getDevice = () => this.device;\n    this.getDeviceId = () => this.deviceId;\n    this.getVersion = () => this.version;\n    this.toDataItem = () => {\n      const map = {};\n      if (this.masterFingerprint) {\n        map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n      }\n      if (this.keys) {\n        map[Keys.keys] = this.keys.map(item => {\n          const dataItem = item.toDataItem();\n          dataItem.setTag(item.getRegistryType().getTag());\n          return dataItem;\n        });\n      }\n      if (this.device) {\n        map[Keys.device] = this.device;\n      }\n      if (this.deviceId) {\n        map[Keys.deviceId] = this.deviceId;\n      }\n      if (this.version) {\n        map[Keys.version] = this.version;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoMultiAccounts = CryptoMultiAccounts;\nCryptoMultiAccounts.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const masterFingerprint = Buffer.alloc(4);\n  const _masterFingerprint = map[Keys.masterFingerprint];\n  if (_masterFingerprint) {\n    masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n  }\n  const keys = map[Keys.keys];\n  const cryptoHDKeys = keys.map(item => CryptoHDKey_1.CryptoHDKey.fromDataItem(item));\n  const device = map[Keys.device];\n  const deviceId = map[Keys.deviceId];\n  const version = map[Keys.version];\n  return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device, deviceId, version);\n};\nCryptoMultiAccounts.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoMultiAccounts.fromDataItem(dataItem);\n};\n//# sourceMappingURL=CryptoMultiAccounts.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}