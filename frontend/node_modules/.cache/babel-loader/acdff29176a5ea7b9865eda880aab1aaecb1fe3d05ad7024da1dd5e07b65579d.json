{"ast":null,"code":"import { createContext, useContext } from 'react';\nconst EMPTY_ARRAY = [];\nconst DEFAULT_CONTEXT = {\n  autoConnect: false,\n  connecting: false,\n  connected: false,\n  disconnecting: false,\n  select() {\n    logMissingProviderError('call', 'select');\n  },\n  connect() {\n    return Promise.reject(logMissingProviderError('call', 'connect'));\n  },\n  disconnect() {\n    return Promise.reject(logMissingProviderError('call', 'disconnect'));\n  },\n  sendTransaction() {\n    return Promise.reject(logMissingProviderError('call', 'sendTransaction'));\n  },\n  signTransaction() {\n    return Promise.reject(logMissingProviderError('call', 'signTransaction'));\n  },\n  signAllTransactions() {\n    return Promise.reject(logMissingProviderError('call', 'signAllTransactions'));\n  },\n  signMessage() {\n    return Promise.reject(logMissingProviderError('call', 'signMessage'));\n  },\n  signIn() {\n    return Promise.reject(logMissingProviderError('call', 'signIn'));\n  }\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'wallets', {\n  get() {\n    logMissingProviderError('read', 'wallets');\n    return EMPTY_ARRAY;\n  }\n});\nObject.defineProperty(DEFAULT_CONTEXT, 'wallet', {\n  get() {\n    logMissingProviderError('read', 'wallet');\n    return null;\n  }\n});\nObject.defineProperty(DEFAULT_CONTEXT, 'publicKey', {\n  get() {\n    logMissingProviderError('read', 'publicKey');\n    return null;\n  }\n});\nfunction logMissingProviderError(action, property) {\n  const error = new Error(`You have tried to ${action} \"${property}\" on a WalletContext without providing one. ` + 'Make sure to render a WalletProvider as an ancestor of the component that uses WalletContext.');\n  console.error(error);\n  return error;\n}\nexport const WalletContext = createContext(DEFAULT_CONTEXT);\nexport function useWallet() {\n  return useContext(WalletContext);\n}\n//# sourceMappingURL=useWallet.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}