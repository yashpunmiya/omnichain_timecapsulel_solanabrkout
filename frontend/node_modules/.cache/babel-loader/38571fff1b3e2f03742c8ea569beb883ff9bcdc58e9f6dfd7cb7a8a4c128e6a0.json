{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransformEncodeBuilder = exports.TransformDecodeBuilder = void 0;\nexports.Transform = Transform;\nconst index_1 = require(\"../symbols/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// ------------------------------------------------------------------\n// TransformBuilders\n// ------------------------------------------------------------------\nclass TransformDecodeBuilder {\n  constructor(schema) {\n    this.schema = schema;\n  }\n  Decode(decode) {\n    return new TransformEncodeBuilder(this.schema, decode);\n  }\n}\nexports.TransformDecodeBuilder = TransformDecodeBuilder;\n// prettier-ignore\nclass TransformEncodeBuilder {\n  constructor(schema, decode) {\n    this.schema = schema;\n    this.decode = decode;\n  }\n  EncodeTransform(encode, schema) {\n    const Encode = value => schema[index_1.TransformKind].Encode(encode(value));\n    const Decode = value => this.decode(schema[index_1.TransformKind].Decode(value));\n    const Codec = {\n      Encode: Encode,\n      Decode: Decode\n    };\n    return {\n      ...schema,\n      [index_1.TransformKind]: Codec\n    };\n  }\n  EncodeSchema(encode, schema) {\n    const Codec = {\n      Decode: this.decode,\n      Encode: encode\n    };\n    return {\n      ...schema,\n      [index_1.TransformKind]: Codec\n    };\n  }\n  Encode(encode) {\n    return (0, kind_1.IsTransform)(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema);\n  }\n}\nexports.TransformEncodeBuilder = TransformEncodeBuilder;\n/** `[Json]` Creates a Transform type */\nfunction Transform(schema) {\n  return new TransformDecodeBuilder(schema);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","TransformEncodeBuilder","TransformDecodeBuilder","Transform","index_1","require","kind_1","constructor","schema","Decode","decode","EncodeTransform","encode","Encode","TransformKind","Codec","EncodeSchema","IsTransform"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@sinclair/typebox/build/cjs/type/transform/transform.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransformEncodeBuilder = exports.TransformDecodeBuilder = void 0;\nexports.Transform = Transform;\nconst index_1 = require(\"../symbols/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// ------------------------------------------------------------------\n// TransformBuilders\n// ------------------------------------------------------------------\nclass TransformDecodeBuilder {\n    constructor(schema) {\n        this.schema = schema;\n    }\n    Decode(decode) {\n        return new TransformEncodeBuilder(this.schema, decode);\n    }\n}\nexports.TransformDecodeBuilder = TransformDecodeBuilder;\n// prettier-ignore\nclass TransformEncodeBuilder {\n    constructor(schema, decode) {\n        this.schema = schema;\n        this.decode = decode;\n    }\n    EncodeTransform(encode, schema) {\n        const Encode = (value) => schema[index_1.TransformKind].Encode(encode(value));\n        const Decode = (value) => this.decode(schema[index_1.TransformKind].Decode(value));\n        const Codec = { Encode: Encode, Decode: Decode };\n        return { ...schema, [index_1.TransformKind]: Codec };\n    }\n    EncodeSchema(encode, schema) {\n        const Codec = { Decode: this.decode, Encode: encode };\n        return { ...schema, [index_1.TransformKind]: Codec };\n    }\n    Encode(encode) {\n        return ((0, kind_1.IsTransform)(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema));\n    }\n}\nexports.TransformEncodeBuilder = TransformEncodeBuilder;\n/** `[Json]` Creates a Transform type */\nfunction Transform(schema) {\n    return new TransformDecodeBuilder(schema);\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAGF,OAAO,CAACG,sBAAsB,GAAG,KAAK,CAAC;AACxEH,OAAO,CAACI,SAAS,GAAGA,SAAS;AAC7B,MAAMC,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C;AACA;AACA;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAe,CAAC;AACvC;AACA;AACA;AACA,MAAMH,sBAAsB,CAAC;EACzBK,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACAC,MAAMA,CAACC,MAAM,EAAE;IACX,OAAO,IAAIT,sBAAsB,CAAC,IAAI,CAACO,MAAM,EAAEE,MAAM,CAAC;EAC1D;AACJ;AACAX,OAAO,CAACG,sBAAsB,GAAGA,sBAAsB;AACvD;AACA,MAAMD,sBAAsB,CAAC;EACzBM,WAAWA,CAACC,MAAM,EAAEE,MAAM,EAAE;IACxB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,MAAM,GAAGA,MAAM;EACxB;EACAC,eAAeA,CAACC,MAAM,EAAEJ,MAAM,EAAE;IAC5B,MAAMK,MAAM,GAAIb,KAAK,IAAKQ,MAAM,CAACJ,OAAO,CAACU,aAAa,CAAC,CAACD,MAAM,CAACD,MAAM,CAACZ,KAAK,CAAC,CAAC;IAC7E,MAAMS,MAAM,GAAIT,KAAK,IAAK,IAAI,CAACU,MAAM,CAACF,MAAM,CAACJ,OAAO,CAACU,aAAa,CAAC,CAACL,MAAM,CAACT,KAAK,CAAC,CAAC;IAClF,MAAMe,KAAK,GAAG;MAAEF,MAAM,EAAEA,MAAM;MAAEJ,MAAM,EAAEA;IAAO,CAAC;IAChD,OAAO;MAAE,GAAGD,MAAM;MAAE,CAACJ,OAAO,CAACU,aAAa,GAAGC;IAAM,CAAC;EACxD;EACAC,YAAYA,CAACJ,MAAM,EAAEJ,MAAM,EAAE;IACzB,MAAMO,KAAK,GAAG;MAAEN,MAAM,EAAE,IAAI,CAACC,MAAM;MAAEG,MAAM,EAAED;IAAO,CAAC;IACrD,OAAO;MAAE,GAAGJ,MAAM;MAAE,CAACJ,OAAO,CAACU,aAAa,GAAGC;IAAM,CAAC;EACxD;EACAF,MAAMA,CAACD,MAAM,EAAE;IACX,OAAQ,CAAC,CAAC,EAAEN,MAAM,CAACW,WAAW,EAAE,IAAI,CAACT,MAAM,CAAC,GAAG,IAAI,CAACG,eAAe,CAACC,MAAM,EAAE,IAAI,CAACJ,MAAM,CAAC,GAAG,IAAI,CAACQ,YAAY,CAACJ,MAAM,EAAE,IAAI,CAACJ,MAAM,CAAC;EACrI;AACJ;AACAT,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB;AACvD;AACA,SAASE,SAASA,CAACK,MAAM,EAAE;EACvB,OAAO,IAAIN,sBAAsB,CAACM,MAAM,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}