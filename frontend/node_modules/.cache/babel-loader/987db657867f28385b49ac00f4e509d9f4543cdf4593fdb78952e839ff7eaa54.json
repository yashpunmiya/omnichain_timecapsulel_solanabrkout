{"ast":null,"code":"import { isWalletAdapterCompatibleWallet, StandardWalletAdapter } from '@solana/wallet-standard-wallet-adapter-base';\nimport { DEPRECATED_getWallets } from '@wallet-standard/app';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport function useStandardWalletAdapters(adapters) {\n  const warnings = useConstant(() => new Set());\n  const {\n    get,\n    on\n  } = useConstant(() => DEPRECATED_getWallets());\n  const [standardAdapters, setStandardAdapters] = useState(() => wrapWalletsWithAdapters(get()));\n  useEffect(() => {\n    const listeners = [on('register', (...wallets) => setStandardAdapters(standardAdapters => [...standardAdapters, ...wrapWalletsWithAdapters(wallets)])), on('unregister', (...wallets) => setStandardAdapters(standardAdapters => standardAdapters.filter(standardAdapter => wallets.some(wallet => wallet === standardAdapter.wallet))))];\n    return () => listeners.forEach(off => off());\n  }, [on]);\n  const prevStandardAdapters = usePrevious(standardAdapters);\n  useEffect(() => {\n    if (!prevStandardAdapters) return;\n    const currentAdapters = new Set(standardAdapters);\n    const removedAdapters = new Set(prevStandardAdapters.filter(previousAdapter => !currentAdapters.has(previousAdapter)));\n    removedAdapters.forEach(adapter => adapter.destroy());\n  }, [prevStandardAdapters, standardAdapters]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => () => standardAdapters.forEach(adapter => adapter.destroy()), []);\n  return useMemo(() => [...standardAdapters, ...adapters.filter(({\n    name\n  }) => {\n    if (standardAdapters.some(standardAdapter => standardAdapter.name === name)) {\n      if (!warnings.has(name)) {\n        warnings.add(name);\n        console.warn(`${name} was registered as a Standard Wallet. The Wallet Adapter for ${name} can be removed from your app.`);\n      }\n      return false;\n    }\n    return true;\n  })], [standardAdapters, adapters, warnings]);\n}\nfunction useConstant(fn) {\n  const ref = useRef(undefined);\n  if (ref.current === undefined) {\n    ref.current = {\n      value: fn()\n    };\n  }\n  return ref.current.value;\n}\nfunction usePrevious(state) {\n  const ref = useRef(undefined);\n  useEffect(() => {\n    ref.current = state;\n  });\n  return ref.current;\n}\nfunction wrapWalletsWithAdapters(wallets) {\n  return wallets.filter(isWalletAdapterCompatibleWallet).map(wallet => new StandardWalletAdapter({\n    wallet\n  }));\n}\n//# sourceMappingURL=useStandardWalletAdapters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}