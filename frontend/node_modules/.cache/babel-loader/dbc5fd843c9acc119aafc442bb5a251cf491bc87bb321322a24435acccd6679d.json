{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransformEncodeBuilder = exports.TransformDecodeBuilder = void 0;\nexports.Transform = Transform;\nconst index_1 = require(\"../symbols/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// ------------------------------------------------------------------\n// TransformBuilders\n// ------------------------------------------------------------------\nclass TransformDecodeBuilder {\n  constructor(schema) {\n    this.schema = schema;\n  }\n  Decode(decode) {\n    return new TransformEncodeBuilder(this.schema, decode);\n  }\n}\nexports.TransformDecodeBuilder = TransformDecodeBuilder;\n// prettier-ignore\nclass TransformEncodeBuilder {\n  constructor(schema, decode) {\n    this.schema = schema;\n    this.decode = decode;\n  }\n  EncodeTransform(encode, schema) {\n    const Encode = value => schema[index_1.TransformKind].Encode(encode(value));\n    const Decode = value => this.decode(schema[index_1.TransformKind].Decode(value));\n    const Codec = {\n      Encode: Encode,\n      Decode: Decode\n    };\n    return {\n      ...schema,\n      [index_1.TransformKind]: Codec\n    };\n  }\n  EncodeSchema(encode, schema) {\n    const Codec = {\n      Decode: this.decode,\n      Encode: encode\n    };\n    return {\n      ...schema,\n      [index_1.TransformKind]: Codec\n    };\n  }\n  Encode(encode) {\n    return (0, kind_1.IsTransform)(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema);\n  }\n}\nexports.TransformEncodeBuilder = TransformEncodeBuilder;\n/** `[Json]` Creates a Transform type */\nfunction Transform(schema) {\n  return new TransformDecodeBuilder(schema);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}