{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _SolflareMetaMaskWallet_instances, _SolflareMetaMaskWallet_listeners, _SolflareMetaMaskWallet_version, _SolflareMetaMaskWallet_name, _SolflareMetaMaskWallet_icon, _SolflareMetaMaskWallet_solflareMetaMask, _SolflareMetaMaskWallet_on, _SolflareMetaMaskWallet_emit, _SolflareMetaMaskWallet_off, _SolflareMetaMaskWallet_connect, _SolflareMetaMaskWallet_disconnect, _SolflareMetaMaskWallet_signAndSendTransaction, _SolflareMetaMaskWallet_signTransaction, _SolflareMetaMaskWallet_signMessage;\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { SOLANA_DEVNET_CHAIN, SOLANA_MAINNET_CHAIN, SOLANA_TESTNET_CHAIN } from '@solana/wallet-standard-chains';\nimport { SolanaSignAndSendTransaction, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { StandardConnect, StandardDisconnect, StandardEvents } from '@wallet-standard/features';\nimport { icon } from './icon.js';\nexport class SolflareMetaMaskWallet {\n  constructor() {\n    _SolflareMetaMaskWallet_instances.add(this);\n    _SolflareMetaMaskWallet_listeners.set(this, {});\n    _SolflareMetaMaskWallet_version.set(this, '1.0.0');\n    _SolflareMetaMaskWallet_name.set(this, 'MetaMask');\n    _SolflareMetaMaskWallet_icon.set(this, icon);\n    _SolflareMetaMaskWallet_solflareMetaMask.set(this, null);\n    _SolflareMetaMaskWallet_on.set(this, (event, listener) => {\n      __classPrivateFieldGet(this, _SolflareMetaMaskWallet_listeners, \"f\")[event]?.push(listener) || (__classPrivateFieldGet(this, _SolflareMetaMaskWallet_listeners, \"f\")[event] = [listener]);\n      return () => __classPrivateFieldGet(this, _SolflareMetaMaskWallet_instances, \"m\", _SolflareMetaMaskWallet_off).call(this, event, listener);\n    });\n    _SolflareMetaMaskWallet_connect.set(this, async () => {\n      if (!__classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\")) {\n        let SolflareMetaMaskClass;\n        try {\n          SolflareMetaMaskClass = (await import('@solflare-wallet/metamask-sdk')).default;\n        } catch (error) {\n          throw new Error('Unable to load Solflare MetaMask SDK');\n        }\n        __classPrivateFieldSet(this, _SolflareMetaMaskWallet_solflareMetaMask, new SolflareMetaMaskClass(), \"f\");\n        __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").on('standard_change', properties => __classPrivateFieldGet(this, _SolflareMetaMaskWallet_instances, \"m\", _SolflareMetaMaskWallet_emit).call(this, 'change', properties));\n      }\n      if (!this.accounts.length) {\n        await __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").connect();\n      }\n      return {\n        accounts: this.accounts\n      };\n    });\n    _SolflareMetaMaskWallet_disconnect.set(this, async () => {\n      if (!__classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\")) return;\n      await __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").disconnect();\n    });\n    _SolflareMetaMaskWallet_signAndSendTransaction.set(this, async (...inputs) => {\n      if (!__classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\")) throw new WalletNotConnectedError();\n      return await __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").standardSignAndSendTransaction(...inputs);\n    });\n    _SolflareMetaMaskWallet_signTransaction.set(this, async (...inputs) => {\n      if (!__classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\")) throw new WalletNotConnectedError();\n      return await __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").standardSignTransaction(...inputs);\n    });\n    _SolflareMetaMaskWallet_signMessage.set(this, async (...inputs) => {\n      if (!__classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\")) throw new WalletNotConnectedError();\n      return await __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").standardSignMessage(...inputs);\n    });\n  }\n  get version() {\n    return __classPrivateFieldGet(this, _SolflareMetaMaskWallet_version, \"f\");\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _SolflareMetaMaskWallet_name, \"f\");\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _SolflareMetaMaskWallet_icon, \"f\");\n  }\n  get chains() {\n    return [SOLANA_MAINNET_CHAIN, SOLANA_DEVNET_CHAIN, SOLANA_TESTNET_CHAIN];\n  }\n  get features() {\n    return {\n      [StandardConnect]: {\n        version: '1.0.0',\n        connect: __classPrivateFieldGet(this, _SolflareMetaMaskWallet_connect, \"f\")\n      },\n      [StandardDisconnect]: {\n        version: '1.0.0',\n        disconnect: __classPrivateFieldGet(this, _SolflareMetaMaskWallet_disconnect, \"f\")\n      },\n      [StandardEvents]: {\n        version: '1.0.0',\n        on: __classPrivateFieldGet(this, _SolflareMetaMaskWallet_on, \"f\")\n      },\n      [SolanaSignAndSendTransaction]: {\n        version: '1.0.0',\n        supportedTransactionVersions: ['legacy', 0],\n        signAndSendTransaction: __classPrivateFieldGet(this, _SolflareMetaMaskWallet_signAndSendTransaction, \"f\")\n      },\n      [SolanaSignTransaction]: {\n        version: '1.0.0',\n        supportedTransactionVersions: ['legacy', 0],\n        signTransaction: __classPrivateFieldGet(this, _SolflareMetaMaskWallet_signTransaction, \"f\")\n      },\n      [SolanaSignMessage]: {\n        version: '1.0.0',\n        signMessage: __classPrivateFieldGet(this, _SolflareMetaMaskWallet_signMessage, \"f\")\n      }\n    };\n  }\n  get accounts() {\n    return __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\") ? __classPrivateFieldGet(this, _SolflareMetaMaskWallet_solflareMetaMask, \"f\").standardAccounts : [];\n  }\n}\n_SolflareMetaMaskWallet_listeners = new WeakMap(), _SolflareMetaMaskWallet_version = new WeakMap(), _SolflareMetaMaskWallet_name = new WeakMap(), _SolflareMetaMaskWallet_icon = new WeakMap(), _SolflareMetaMaskWallet_solflareMetaMask = new WeakMap(), _SolflareMetaMaskWallet_on = new WeakMap(), _SolflareMetaMaskWallet_connect = new WeakMap(), _SolflareMetaMaskWallet_disconnect = new WeakMap(), _SolflareMetaMaskWallet_signAndSendTransaction = new WeakMap(), _SolflareMetaMaskWallet_signTransaction = new WeakMap(), _SolflareMetaMaskWallet_signMessage = new WeakMap(), _SolflareMetaMaskWallet_instances = new WeakSet(), _SolflareMetaMaskWallet_emit = function _SolflareMetaMaskWallet_emit(event, ...args) {\n  // eslint-disable-next-line prefer-spread\n  __classPrivateFieldGet(this, _SolflareMetaMaskWallet_listeners, \"f\")[event]?.forEach(listener => listener.apply(null, args));\n}, _SolflareMetaMaskWallet_off = function _SolflareMetaMaskWallet_off(event, listener) {\n  __classPrivateFieldGet(this, _SolflareMetaMaskWallet_listeners, \"f\")[event] = __classPrivateFieldGet(this, _SolflareMetaMaskWallet_listeners, \"f\")[event]?.filter(existingListener => listener !== existingListener);\n};\n//# sourceMappingURL=wallet.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}