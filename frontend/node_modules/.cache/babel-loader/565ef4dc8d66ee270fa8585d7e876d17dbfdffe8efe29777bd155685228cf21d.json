{"ast":null,"code":"import { maxUint256 } from '../constants/number.js';\nimport { InvalidAddressError } from '../errors/address.js';\nimport { BaseError } from '../errors/base.js';\nimport { InvalidChainIdError } from '../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js';\nimport { serializeTransaction as serializeTransaction_op } from '../op-stack/serializers.js';\nimport { isAddress } from '../utils/address/isAddress.js';\nimport { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js';\nimport { toYParitySignatureArray } from '../utils/transaction/serializeTransaction.js';\nimport { isCIP64, isEmpty, isPresent } from './utils.js';\nexport function serializeTransaction(transaction, signature) {\n  if (isCIP64(transaction)) return serializeTransactionCIP64(transaction, signature);\n  return serializeTransaction_op(transaction, signature);\n}\nexport const serializers = {\n  transaction: serializeTransaction\n};\nfunction serializeTransactionCIP64(transaction, signature) {\n  assertTransactionCIP64(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList), feeCurrency, ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x7b', toRlp(serializedTransaction)]);\n}\n// maxFeePerGas must be less than maxUint256\nconst MAX_MAX_FEE_PER_GAS = maxUint256;\nexport function assertTransactionCIP42(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-42 Transaction attribute.');\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient) || isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee)) {\n    throw new BaseError('`gatewayFee` and `gatewayFeeRecipient` must be provided together.');\n  }\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-42 transactions.');\n  }\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient);\n  }\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError('Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.');\n  }\n}\nexport function assertTransactionCIP64(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-64 Transaction attribute.');\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-64 transactions.');\n  }\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError('`feeCurrency` must be provided for CIP-64 transactions.');\n  }\n}","map":{"version":3,"names":["maxUint256","InvalidAddressError","BaseError","InvalidChainIdError","FeeCapTooHighError","TipAboveFeeCapError","serializeTransaction","serializeTransaction_op","isAddress","concatHex","toHex","toRlp","serializeAccessList","toYParitySignatureArray","isCIP64","isEmpty","isPresent","transaction","signature","serializeTransactionCIP64","serializers","assertTransactionCIP64","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","feeCurrency","data","serializedTransaction","MAX_MAX_FEE_PER_GAS","assertTransactionCIP42","gasPrice","gatewayFee","gatewayFeeRecipient","address"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\celo\\serializers.ts"],"sourcesContent":["import { maxUint256 } from '../constants/number.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport { BaseError } from '../errors/base.js'\nimport { InvalidChainIdError } from '../errors/chain.js'\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js'\nimport { serializeTransaction as serializeTransaction_op } from '../op-stack/serializers.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Signature } from '../types/misc.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js'\nimport { toYParitySignatureArray } from '../utils/transaction/serializeTransaction.js'\nimport type {\n  CeloTransactionSerializable,\n  TransactionSerializableCIP42,\n  TransactionSerializableCIP64,\n  TransactionSerializedCIP64,\n} from './types.js'\nimport { isCIP64, isEmpty, isPresent } from './utils.js'\n\nexport function serializeTransaction(\n  transaction: CeloTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isCIP64(transaction))\n    return serializeTransactionCIP64(transaction, signature)\n  return serializeTransaction_op(transaction, signature)\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionCIP64ReturnType = TransactionSerializedCIP64\n\nfunction serializeTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n  signature?: Signature | undefined,\n): SerializeTransactionCIP64ReturnType {\n  assertTransactionCIP64(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n    feeCurrency!,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x7b',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP64ReturnType\n}\n\n// maxFeePerGas must be less than maxUint256\nconst MAX_MAX_FEE_PER_GAS = maxUint256\n\nexport function assertTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient,\n  } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-42 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (\n    (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient)) ||\n    (isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee))\n  ) {\n    throw new BaseError(\n      '`gatewayFee` and `gatewayFeeRecipient` must be provided together.',\n    )\n  }\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-42 transactions.',\n    )\n  }\n\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient)\n  }\n\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError(\n      'Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.',\n    )\n  }\n}\n\nexport function assertTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n  } = transaction\n\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-64 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-64 transactions.',\n    )\n  }\n\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` must be provided for CIP-64 transactions.',\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}