{"ast":null,"code":"import { isHex } from './isHex.js';\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value) {\n  if (isHex(value, {\n    strict: false\n  })) return Math.ceil((value.length - 2) / 2);\n  return value.length;\n}","map":{"version":3,"names":["isHex","size","value","strict","Math","ceil","length"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\data\\size.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type SizeErrorType = IsHexErrorType | ErrorType\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value: Hex | ByteArray) {\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\n  return value.length\n}\n"],"mappings":"AAGA,SAA8BA,KAAK,QAAQ,YAAY;AAIvD;;;;;;AAMA,OAAM,SAAUC,IAAIA,CAACC,KAAsB;EACzC,IAAIF,KAAK,CAACE,KAAK,EAAE;IAAEC,MAAM,EAAE;EAAK,CAAE,CAAC,EAAE,OAAOC,IAAI,CAACC,IAAI,CAAC,CAACH,KAAK,CAACI,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;EAC7E,OAAOJ,KAAK,CAACI,MAAM;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}