{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_disconnecting, _StandardWalletAdapter_off, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_wallet, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connect, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_reset, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage, _StandardWalletAdapter_signIn;\nimport { BaseWalletAdapter, isVersionedTransaction, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignInError, WalletSignMessageError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { SolanaSignAndSendTransaction, SolanaSignIn, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { StandardConnect, StandardDisconnect, StandardEvents } from '@wallet-standard/features';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter {\n  get name() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n  }\n  get url() {\n    return 'https://github.com/solana-labs/wallet-standard';\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n  }\n  get readyState() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n  }\n  get publicKey() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n  }\n  get connecting() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n  }\n  get supportedTransactionVersions() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n  }\n  get wallet() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n  }\n  get standard() {\n    return true;\n  }\n  constructor({\n    wallet\n  }) {\n    super();\n    _StandardWalletAdapter_instances.add(this);\n    _StandardWalletAdapter_account.set(this, void 0);\n    _StandardWalletAdapter_publicKey.set(this, void 0);\n    _StandardWalletAdapter_connecting.set(this, void 0);\n    _StandardWalletAdapter_disconnecting.set(this, void 0);\n    _StandardWalletAdapter_off.set(this, void 0);\n    _StandardWalletAdapter_supportedTransactionVersions.set(this, void 0);\n    _StandardWalletAdapter_wallet.set(this, void 0);\n    _StandardWalletAdapter_readyState.set(this, typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.Installed);\n    _StandardWalletAdapter_changed.set(this, properties => {\n      // If accounts have changed on the wallet, reflect this on the adapter.\n      if ('accounts' in properties) {\n        const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n        // If the adapter isn't connected, or is disconnecting, or the first account hasn't changed, do nothing.\n        if (__classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\") && !__classPrivateFieldGet(this, _StandardWalletAdapter_disconnecting, \"f\") && account !== __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")) {\n          // If there's a connected account, connect the adapter. Otherwise, disconnect it.\n          if (account) {\n            // Connect the adapter.\n            __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account);\n          } else {\n            // Emit an error because the wallet spontaneously disconnected.\n            this.emit('error', new WalletDisconnectedError());\n            // Disconnect the adapter.\n            __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n          }\n        }\n      }\n      // After reflecting account changes, if features have changed on the wallet, reflect this on the adapter.\n      if ('features' in properties) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_reset).call(this);\n      }\n    });\n    __classPrivateFieldSet(this, _StandardWalletAdapter_wallet, wallet, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, false, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[StandardEvents].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_reset).call(this);\n  }\n  destroy() {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, false, \"f\");\n    const off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n    if (off) {\n      __classPrivateFieldSet(this, _StandardWalletAdapter_off, null, \"f\");\n      off();\n    }\n  }\n  async autoConnect() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connect).call(this, {\n      silent: true\n    });\n  }\n  async connect() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connect).call(this);\n  }\n  async disconnect() {\n    if (StandardDisconnect in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n      try {\n        __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, true, \"f\");\n        await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[StandardDisconnect].disconnect();\n      } catch (error) {\n        this.emit('error', new WalletDisconnectionError(error?.message, error));\n      } finally {\n        __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, false, \"f\");\n      }\n    }\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n  }\n  async sendTransaction(transaction, connection, options = {}) {\n    try {\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n      if (!account) throw new WalletNotConnectedError();\n      let feature;\n      if (SolanaSignAndSendTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (account.features.includes(SolanaSignAndSendTransaction)) {\n          feature = SolanaSignAndSendTransaction;\n        } else if (SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && account.features.includes(SolanaSignTransaction)) {\n          feature = SolanaSignTransaction;\n        } else {\n          throw new WalletAccountError();\n        }\n      } else if (SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n        feature = SolanaSignTransaction;\n      } else {\n        throw new WalletConfigError();\n      }\n      const chain = getChainForEndpoint(connection.rpcEndpoint);\n      if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n      try {\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        let serializedTransaction;\n        if (isVersionedTransaction(transaction)) {\n          signers?.length && transaction.sign(signers);\n          serializedTransaction = transaction.serialize();\n        } else {\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          signers?.length && transaction.partialSign(...signers);\n          serializedTransaction = new Uint8Array(transaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n        }\n        if (feature === SolanaSignAndSendTransaction) {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignAndSendTransaction].signAndSendTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              skipPreflight: sendOptions.skipPreflight,\n              maxRetries: sendOptions.maxRetries,\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          return bs58.encode(output.signature);\n        } else {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].signTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          return await connection.sendRawTransaction(output.signedTransaction, {\n            ...sendOptions,\n            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment)\n          });\n        }\n      } catch (error) {\n        if (error instanceof WalletError) throw error;\n        throw new WalletSendTransactionError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_disconnecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connect = async function _StandardWalletAdapter_connect(input) {\n  try {\n    if (this.connected || this.connecting) return;\n    if (__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed) throw new WalletNotReadyError();\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n    if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n      try {\n        await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[StandardConnect].connect(input);\n      } catch (error) {\n        throw new WalletConnectionError(error?.message, error);\n      }\n    }\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n    if (!account) throw new WalletAccountError();\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account);\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  } finally {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n  }\n}, _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account) {\n  let publicKey;\n  try {\n    // Use account.address instead of account.publicKey since address could be a PDA\n    publicKey = new PublicKey(account.address);\n  } catch (error) {\n    throw new WalletPublicKeyError(error?.message, error);\n  }\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_reset).call(this);\n  this.emit('connect', publicKey);\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_reset).call(this);\n  this.emit('disconnect');\n}, _StandardWalletAdapter_reset = function _StandardWalletAdapter_reset() {\n  const supportedTransactionVersions = SolanaSignAndSendTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features ? __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignAndSendTransaction].supportedTransactionVersions : __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].supportedTransactionVersions;\n  __classPrivateFieldSet(this, _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy']) ? null : new Set(supportedTransactionVersions), \"f\");\n  if (SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")?.features.includes(SolanaSignTransaction)) {\n    this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n    this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n  } else {\n    delete this.signTransaction;\n    delete this.signAllTransactions;\n  }\n  if (SolanaSignMessage in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")?.features.includes(SolanaSignMessage)) {\n    this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n  } else {\n    delete this.signMessage;\n  }\n  if (SolanaSignIn in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n    this.signIn = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signIn);\n  } else {\n    delete this.signIn;\n  }\n}, _StandardWalletAdapter_signTransaction = async function _StandardWalletAdapter_signTransaction(transaction) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!(SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].signTransaction({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      });\n      const serializedTransaction = signedTransactions[0].signedTransaction;\n      return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(serializedTransaction) : Transaction.from(serializedTransaction);\n    } catch (error) {\n      if (error instanceof WalletError) throw error;\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signAllTransactions = async function _StandardWalletAdapter_signAllTransactions(transactions) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!(SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].signTransaction(...transactions.map(transaction => ({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      })));\n      return transactions.map((transaction, index) => {\n        const signedTransaction = signedTransactions[index].signedTransaction;\n        return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(signedTransaction) : Transaction.from(signedTransaction);\n      });\n    } catch (error) {\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signMessage = async function _StandardWalletAdapter_signMessage(message) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!(SolanaSignMessage in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes(SolanaSignMessage)) throw new WalletAccountError();\n    try {\n      const signedMessages = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignMessage].signMessage({\n        account,\n        message\n      });\n      return signedMessages[0].signature;\n    } catch (error) {\n      throw new WalletSignMessageError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signIn = async function _StandardWalletAdapter_signIn(input = {}) {\n  try {\n    if (!(SolanaSignIn in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    let output;\n    try {\n      [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignIn].signIn(input);\n    } catch (error) {\n      throw new WalletSignInError(error?.message, error);\n    }\n    if (!output) throw new WalletSignInError();\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, output.account);\n    return output;\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n};\n//# sourceMappingURL=adapter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}