{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyDerivationSchema = exports.DerivationAlgorithm = exports.Curve = void 0;\nconst RegistryType_1 = require(\"../RegistryType\");\nconst RegistryItem_1 = require(\"../RegistryItem\");\nconst lib_1 = require(\"../lib\");\nconst CryptoKeypath_1 = require(\"../CryptoKeypath\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"keyPath\"] = 1] = \"keyPath\";\n  Keys[Keys[\"curve\"] = 2] = \"curve\";\n  Keys[Keys[\"algo\"] = 3] = \"algo\";\n  Keys[Keys[\"chainType\"] = 4] = \"chainType\";\n})(Keys || (Keys = {}));\nvar Curve;\n(function (Curve) {\n  Curve[Curve[\"secp256k1\"] = 0] = \"secp256k1\";\n  Curve[Curve[\"ed25519\"] = 1] = \"ed25519\";\n})(Curve = exports.Curve || (exports.Curve = {}));\nvar DerivationAlgorithm;\n(function (DerivationAlgorithm) {\n  DerivationAlgorithm[DerivationAlgorithm[\"slip10\"] = 0] = \"slip10\";\n  DerivationAlgorithm[DerivationAlgorithm[\"bip32ed25519\"] = 1] = \"bip32ed25519\";\n})(DerivationAlgorithm = exports.DerivationAlgorithm || (exports.DerivationAlgorithm = {}));\nclass KeyDerivationSchema extends RegistryItem_1.RegistryItem {\n  constructor(keypath, curve = Curve.secp256k1, algo = DerivationAlgorithm.slip10, chainType) {\n    super();\n    this.keypath = keypath;\n    this.curve = curve;\n    this.algo = algo;\n    this.chainType = chainType;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.KEY_DERIVATION_SCHEMA;\n    this.getKeypath = () => this.keypath;\n    this.getCurve = () => this.curve;\n    this.getAlgo = () => this.algo;\n    this.getChainType = () => this.chainType;\n    this.toDataItem = () => {\n      const map = {};\n      const dataItem = this.getKeypath().toDataItem();\n      dataItem.setTag(this.getKeypath().getRegistryType().getTag());\n      map[Keys.keyPath] = dataItem;\n      map[Keys.curve] = this.curve;\n      map[Keys.algo] = this.algo;\n      if (this.chainType) {\n        map[Keys.chainType] = this.chainType;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.KeyDerivationSchema = KeyDerivationSchema;\nKeyDerivationSchema.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const keypaths = CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.keyPath]);\n  const curve = map[Keys.curve];\n  const algo = map[Keys.algo];\n  const chainType = map[Keys.chainType];\n  return new KeyDerivationSchema(keypaths, curve, algo, chainType);\n};\nKeyDerivationSchema.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return KeyDerivationSchema.fromDataItem(dataItem);\n};","map":{"version":3,"names":["RegistryType_1","require","RegistryItem_1","lib_1","CryptoKeypath_1","Keys","Curve","exports","DerivationAlgorithm","KeyDerivationSchema","RegistryItem","constructor","keypath","curve","secp256k1","algo","slip10","chainType","getRegistryType","RegistryTypes","KEY_DERIVATION_SCHEMA","getKeypath","getCurve","getAlgo","getChainType","toDataItem","map","dataItem","setTag","getTag","keyPath","DataItem","fromDataItem","getData","keypaths","CryptoKeypath","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry-sol\\node_modules\\@keystonehq\\bc-ur-registry\\src\\extended\\DerivationSchema.ts"],"sourcesContent":["import { RegistryTypes } from '../RegistryType';\nimport { RegistryItem } from '../RegistryItem';\nimport { DataItem, decodeToDataItem } from '../lib';\nimport { DataItemMap } from '../types';\nimport { CryptoKeypath } from '../CryptoKeypath';\n\nenum Keys {\n  keyPath = 1,\n  curve,\n  algo,\n  chainType,\n}\n\nexport enum Curve {\n  secp256k1,\n  ed25519,\n}\n\nexport enum DerivationAlgorithm {\n  slip10,\n  bip32ed25519,\n}\n\nexport class KeyDerivationSchema extends RegistryItem {\n  getRegistryType = () => RegistryTypes.KEY_DERIVATION_SCHEMA;\n\n  constructor(\n    private keypath: CryptoKeypath,\n    private curve: Curve = Curve.secp256k1,\n    private algo: DerivationAlgorithm = DerivationAlgorithm.slip10,\n    private chainType?: String,\n  ) {\n    super();\n  }\n\n  public getKeypath = (): CryptoKeypath => this.keypath;\n  public getCurve = (): Curve => this.curve;\n  public getAlgo = (): DerivationAlgorithm => this.algo;\n  public getChainType = (): String => this.chainType;\n\n  public toDataItem = (): DataItem => {\n    const map: DataItemMap = {};\n    const dataItem = this.getKeypath().toDataItem();\n    dataItem.setTag(this.getKeypath().getRegistryType().getTag());\n    map[Keys.keyPath] = dataItem;\n    map[Keys.curve] = this.curve;\n    map[Keys.algo] = this.algo;\n    if (this.chainType) {\n      map[Keys.chainType] = this.chainType;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem): KeyDerivationSchema => {\n    const map = dataItem.getData();\n    const keypaths = CryptoKeypath.fromDataItem(map[Keys.keyPath]);\n    const curve = map[Keys.curve];\n    const algo = map[Keys.algo];\n    const chainType = map[Keys.chainType];\n    return new KeyDerivationSchema(keypaths, curve, algo, chainType);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer): KeyDerivationSchema => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return KeyDerivationSchema.fromDataItem(dataItem);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}