{"ast":null,"code":"import { concat } from '../data/concat.js';\nimport { isBytes } from '../data/isBytes.js';\nimport { pad } from '../data/pad.js';\nimport { slice } from '../data/slice.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { getAddress } from './getAddress.js';\nexport function getContractAddress(opts) {\n  if (opts.opcode === 'CREATE2') return getCreate2Address(opts);\n  return getCreateAddress(opts);\n}\nexport function getCreateAddress(opts) {\n  const from = toBytes(getAddress(opts.from));\n  let nonce = toBytes(opts.nonce);\n  if (nonce[0] === 0) nonce = new Uint8Array([]);\n  return getAddress(`0x${keccak256(toRlp([from, nonce], 'bytes')).slice(26)}`);\n}\nexport function getCreate2Address(opts) {\n  const from = toBytes(getAddress(opts.from));\n  const salt = pad(isBytes(opts.salt) ? opts.salt : toBytes(opts.salt), {\n    size: 32\n  });\n  const bytecodeHash = (() => {\n    if ('bytecodeHash' in opts) {\n      if (isBytes(opts.bytecodeHash)) return opts.bytecodeHash;\n      return toBytes(opts.bytecodeHash);\n    }\n    return keccak256(opts.bytecode, 'bytes');\n  })();\n  return getAddress(slice(keccak256(concat([toBytes('0xff'), from, salt, bytecodeHash])), 12));\n}\n//# sourceMappingURL=getContractAddress.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}