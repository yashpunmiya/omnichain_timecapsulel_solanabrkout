{"ast":null,"code":"import { verifyMessageSignature } from './signMessage.js';\nimport { arraysEqual } from './util.js';\n/**\n * TODO: docs\n */\nexport function verifySignIn(input, output) {\n  const {\n    signedMessage,\n    signature,\n    account: {\n      publicKey\n    }\n  } = output;\n  const message = deriveSignInMessage(input, output);\n  return !!message && verifyMessageSignature({\n    message,\n    signedMessage,\n    signature,\n    publicKey: publicKey\n  });\n}\n/**\n * TODO: docs\n */\nexport function deriveSignInMessage(input, output) {\n  const text = deriveSignInMessageText(input, output);\n  if (!text) return null;\n  return new TextEncoder().encode(text);\n}\n/**\n * TODO: docs\n */\nexport function deriveSignInMessageText(input, output) {\n  const parsed = parseSignInMessage(output.signedMessage);\n  if (!parsed) return null;\n  if (input.domain && input.domain !== parsed.domain) return null;\n  if (input.address && input.address !== parsed.address) return null;\n  if (input.statement !== parsed.statement) return null;\n  if (input.uri !== parsed.uri) return null;\n  if (input.version !== parsed.version) return null;\n  if (input.chainId !== parsed.chainId) return null;\n  if (input.nonce !== parsed.nonce) return null;\n  if (input.issuedAt !== parsed.issuedAt) return null;\n  if (input.expirationTime !== parsed.expirationTime) return null;\n  if (input.notBefore !== parsed.notBefore) return null;\n  if (input.requestId !== parsed.requestId) return null;\n  if (input.resources) {\n    if (!parsed.resources) return null;\n    if (!arraysEqual(input.resources, parsed.resources)) return null;\n  } else if (parsed.resources) return null;\n  return createSignInMessageText(parsed);\n}\n/**\n * TODO: docs\n */\nexport function parseSignInMessage(message) {\n  const text = new TextDecoder().decode(message);\n  return parseSignInMessageText(text);\n}\n// TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\nconst DOMAIN = '(?<domain>[^\\\\n]+?) wants you to sign in with your Solana account:\\\\n';\nconst ADDRESS = '(?<address>[^\\\\n]+)(?:\\\\n|$)';\nconst STATEMENT = '(?:\\\\n(?<statement>[\\\\S\\\\s]*?)(?:\\\\n|$))??';\nconst URI = '(?:\\\\nURI: (?<uri>[^\\\\n]+))?';\nconst VERSION = '(?:\\\\nVersion: (?<version>[^\\\\n]+))?';\nconst CHAIN_ID = '(?:\\\\nChain ID: (?<chainId>[^\\\\n]+))?';\nconst NONCE = '(?:\\\\nNonce: (?<nonce>[^\\\\n]+))?';\nconst ISSUED_AT = '(?:\\\\nIssued At: (?<issuedAt>[^\\\\n]+))?';\nconst EXPIRATION_TIME = '(?:\\\\nExpiration Time: (?<expirationTime>[^\\\\n]+))?';\nconst NOT_BEFORE = '(?:\\\\nNot Before: (?<notBefore>[^\\\\n]+))?';\nconst REQUEST_ID = '(?:\\\\nRequest ID: (?<requestId>[^\\\\n]+))?';\nconst RESOURCES = '(?:\\\\nResources:(?<resources>(?:\\\\n- [^\\\\n]+)*))?';\nconst FIELDS = `${URI}${VERSION}${CHAIN_ID}${NONCE}${ISSUED_AT}${EXPIRATION_TIME}${NOT_BEFORE}${REQUEST_ID}${RESOURCES}`;\nconst MESSAGE = new RegExp(`^${DOMAIN}${ADDRESS}${STATEMENT}${FIELDS}\\\\n*$`);\n/**\n * TODO: docs\n */\nexport function parseSignInMessageText(text) {\n  const match = MESSAGE.exec(text);\n  if (!match) return null;\n  const groups = match.groups;\n  if (!groups) return null;\n  return {\n    domain: groups.domain,\n    address: groups.address,\n    statement: groups.statement,\n    uri: groups.uri,\n    version: groups.version,\n    nonce: groups.nonce,\n    chainId: groups.chainId,\n    issuedAt: groups.issuedAt,\n    expirationTime: groups.expirationTime,\n    notBefore: groups.notBefore,\n    requestId: groups.requestId,\n    resources: groups.resources?.split('\\n- ').slice(1)\n  };\n}\n/**\n * TODO: docs\n */\nexport function createSignInMessage(input) {\n  const text = createSignInMessageText(input);\n  return new TextEncoder().encode(text);\n}\n/**\n * TODO: docs\n */\nexport function createSignInMessageText(input) {\n  // ${domain} wants you to sign in with your Solana account:\n  // ${address}\n  //\n  // ${statement}\n  //\n  // URI: ${uri}\n  // Version: ${version}\n  // Chain ID: ${chain}\n  // Nonce: ${nonce}\n  // Issued At: ${issued-at}\n  // Expiration Time: ${expiration-time}\n  // Not Before: ${not-before}\n  // Request ID: ${request-id}\n  // Resources:\n  // - ${resources[0]}\n  // - ${resources[1]}\n  // ...\n  // - ${resources[n]}\n  let message = `${input.domain} wants you to sign in with your Solana account:\\n`;\n  message += `${input.address}`;\n  if (input.statement) {\n    message += `\\n\\n${input.statement}`;\n  }\n  const fields = [];\n  if (input.uri) {\n    fields.push(`URI: ${input.uri}`);\n  }\n  if (input.version) {\n    fields.push(`Version: ${input.version}`);\n  }\n  if (input.chainId) {\n    fields.push(`Chain ID: ${input.chainId}`);\n  }\n  if (input.nonce) {\n    fields.push(`Nonce: ${input.nonce}`);\n  }\n  if (input.issuedAt) {\n    fields.push(`Issued At: ${input.issuedAt}`);\n  }\n  if (input.expirationTime) {\n    fields.push(`Expiration Time: ${input.expirationTime}`);\n  }\n  if (input.notBefore) {\n    fields.push(`Not Before: ${input.notBefore}`);\n  }\n  if (input.requestId) {\n    fields.push(`Request ID: ${input.requestId}`);\n  }\n  if (input.resources) {\n    fields.push(`Resources:`);\n    for (const resource of input.resources) {\n      fields.push(`- ${resource}`);\n    }\n  }\n  if (fields.length) {\n    message += `\\n\\n${fields.join('\\n')}`;\n  }\n  return message;\n}\n//# sourceMappingURL=signIn.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}