{"ast":null,"code":"import { DecodeLogDataMismatch, DecodeLogTopicsMismatch } from '../../errors/abi.js';\nimport { InvalidInputRpcError } from '../../errors/rpc.js';\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js';\nimport { encodeEventTopics } from '../../utils/abi/encodeEventTopics.js';\nimport { formatLog } from '../../utils/formatters/log.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { createContractEventFilter } from './createContractEventFilter.js';\nimport { getBlockNumber } from './getBlockNumber.js';\nimport { getContractEvents } from './getContractEvents.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent(client, parameters) {\n  const {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_\n  } = parameters;\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_;\n    if (typeof fromBlock === 'bigint') return true;\n    if (client.transport.type === 'webSocket') return false;\n    if (client.transport.type === 'fallback' && client.transport.transports[0].config.type === 'webSocket') return false;\n    return true;\n  })();\n  const pollContractEvent = () => {\n    const strict = strict_ ?? false;\n    const observerId = stringify(['watchContractEvent', address, args, batch, client.uid, eventName, pollingInterval, strict, fromBlock]);\n    return observe(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      let previousBlockNumber;\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n;\n      let filter;\n      let initialized = false;\n      const unwatch = poll(async () => {\n        if (!initialized) {\n          try {\n            filter = await getAction(client, createContractEventFilter, 'createContractEventFilter')({\n              abi,\n              address,\n              args: args,\n              eventName: eventName,\n              strict: strict,\n              fromBlock\n            });\n          } catch {}\n          initialized = true;\n          return;\n        }\n        try {\n          let logs;\n          if (filter) {\n            logs = await getAction(client, getFilterChanges, 'getFilterChanges')({\n              filter\n            });\n          } else {\n            // If the filter doesn't exist, we will fall back to use `getLogs`.\n            // The fall back exists because some RPC Providers do not support filters.\n            // Fetch the block number to use for `getLogs`.\n            const blockNumber = await getAction(client, getBlockNumber, 'getBlockNumber')({});\n            // If the block number has changed, we will need to fetch the logs.\n            // If the block number doesn't exist, we are yet to reach the first poll interval,\n            // so do not emit any logs.\n            if (previousBlockNumber && previousBlockNumber < blockNumber) {\n              logs = await getAction(client, getContractEvents, 'getContractEvents')({\n                abi,\n                address,\n                args,\n                eventName,\n                fromBlock: previousBlockNumber + 1n,\n                toBlock: blockNumber,\n                strict\n              });\n            } else {\n              logs = [];\n            }\n            previousBlockNumber = blockNumber;\n          }\n          if (logs.length === 0) return;\n          if (batch) emit.onLogs(logs);else for (const log of logs) emit.onLogs([log]);\n        } catch (err) {\n          // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n          // Reinitialize the filter when this occurs\n          if (filter && err instanceof InvalidInputRpcError) initialized = false;\n          emit.onError?.(err);\n        }\n      }, {\n        emitOnBegin: true,\n        interval: pollingInterval\n      });\n      return async () => {\n        if (filter) await getAction(client, uninstallFilter, 'uninstallFilter')({\n          filter\n        });\n        unwatch();\n      };\n    });\n  };\n  const subscribeContractEvent = () => {\n    const strict = strict_ ?? false;\n    const observerId = stringify(['watchContractEvent', address, args, batch, client.uid, eventName, pollingInterval, strict]);\n    let active = true;\n    let unsubscribe = () => active = false;\n    return observe(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      ;\n      (async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(transport => transport.config.type === 'webSocket');\n              if (!transport) return client.transport;\n              return transport.value;\n            }\n            return client.transport;\n          })();\n          const topics = eventName ? encodeEventTopics({\n            abi: abi,\n            eventName: eventName,\n            args\n          }) : [];\n          const {\n            unsubscribe: unsubscribe_\n          } = await transport.subscribe({\n            params: ['logs', {\n              address,\n              topics\n            }],\n            onData(data) {\n              if (!active) return;\n              const log = data.result;\n              try {\n                const {\n                  eventName,\n                  args\n                } = decodeEventLog({\n                  abi: abi,\n                  data: log.data,\n                  topics: log.topics,\n                  strict: strict_\n                });\n                const formatted = formatLog(log, {\n                  args,\n                  eventName: eventName\n                });\n                emit.onLogs([formatted]);\n              } catch (err) {\n                let eventName;\n                let isUnnamed;\n                if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\n                  // If strict mode is on, and log data/topics do not match event definition, skip.\n                  if (strict_) return;\n                  eventName = err.abiItem.name;\n                  isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n                }\n                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                const formatted = formatLog(log, {\n                  args: isUnnamed ? [] : {},\n                  eventName\n                });\n                emit.onLogs([formatted]);\n              }\n            },\n            onError(error) {\n              emit.onError?.(error);\n            }\n          });\n          unsubscribe = unsubscribe_;\n          if (!active) unsubscribe();\n        } catch (err) {\n          onError?.(err);\n        }\n      })();\n      return () => unsubscribe();\n    });\n  };\n  return enablePolling ? pollContractEvent() : subscribeContractEvent();\n}\n//# sourceMappingURL=watchContractEvent.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}