{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signTransaction'\n  });\n  const account = parseAccount(account_);\n  assertRequest({\n    account,\n    ...parameters\n  });\n  const chainId = await getAction(client, getChainId, 'getChainId')({});\n  if (chain !== null) assertCurrentChain({\n    currentChainId: chainId,\n    chain\n  });\n  const formatters = chain?.formatters || client.chain?.formatters;\n  const format = formatters?.transactionRequest?.format || formatTransactionRequest;\n  if (account.signTransaction) return account.signTransaction({\n    ...transaction,\n    chainId\n  }, {\n    serializer: client.chain?.serializers?.transaction\n  });\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [{\n      ...format(transaction),\n      chainId: numberToHex(chainId),\n      from: account.address\n    }]\n  }, {\n    retryCount: 0\n  });\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","assertCurrentChain","numberToHex","formatTransactionRequest","getAction","assertRequest","getChainId","signTransaction","client","parameters","account","account_","chain","transaction","docsPath","chainId","currentChainId","formatters","format","transactionRequest","serializer","serializers","request","method","params","from","address","retryCount"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\wallet\\signTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType as SignTransactionErrorType_account } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport type { NumberToHexErrorType } from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport type { GetTransactionType } from '../../utils/transaction/getTransactionType.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\n\nexport type SignTransactionRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'>\n\nexport type SignTransactionParameters<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  request extends SignTransactionRequest<\n    chain,\n    chainOverride\n  > = SignTransactionRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request>\n\nexport type SignTransactionReturnType<\n  request extends SignTransactionRequest = SignTransactionRequest,\n> = TransactionSerialized<GetTransactionType<request>>\n\nexport type SignTransactionErrorType =\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | GetChainIdErrorType\n  | AssertCurrentChainErrorType\n  | SignTransactionErrorType_account\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined = undefined,\n  const request extends SignTransactionRequest<\n    chain,\n    chainOverride\n  > = SignTransactionRequest<chain, chainOverride>,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SignTransactionParameters<chain, account, chainOverride, request>,\n): Promise<SignTransactionReturnType<request>> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTransaction',\n    })\n  const account = parseAccount(account_)\n\n  assertRequest({\n    account,\n    ...parameters,\n  })\n\n  const chainId = await getAction(client, getChainId, 'getChainId')({})\n  if (chain !== null)\n    assertCurrentChain({\n      currentChainId: chainId,\n      chain,\n    })\n\n  const formatters = chain?.formatters || client.chain?.formatters\n  const format =\n    formatters?.transactionRequest?.format || formatTransactionRequest\n\n  if (account.signTransaction)\n    return account.signTransaction(\n      {\n        ...transaction,\n        chainId,\n      } as TransactionSerializable,\n      { serializer: client.chain?.serializers?.transaction },\n    ) as Promise<SignTransactionReturnType<request>>\n\n  return await client.request(\n    {\n      method: 'eth_signTransaction',\n      params: [\n        {\n          ...format(transaction as unknown as TransactionRequest),\n          chainId: numberToHex(chainId),\n          from: account.address,\n        } as unknown as RpcTransactionRequest,\n      ],\n    },\n    { retryCount: 0 },\n  )\n}\n"],"mappings":"AACA,SAEEA,YAAY,QACP,sCAAsC;AAI7C,SAASC,oBAAoB,QAAQ,yBAAyB;AAiB9D,SAEEC,kBAAkB,QACb,yCAAyC;AAChD,SAASC,WAAW,QAAQ,+BAA+B;AAE3D,SAEEC,wBAAwB,QACnB,8CAA8C;AACrD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAEEC,aAAa,QACR,0CAA0C;AAEjD,SAAmCC,UAAU,QAAQ,yBAAyB;AAoC9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,OAAO,eAAeC,eAAeA,CASnCC,MAAyC,EACzCC,UAA6E;EAE7E,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpB,GAAGC;EAAW,CACf,GAAGJ,UAAU;EAEd,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIX,oBAAoB,CAAC;IAC7Bc,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMJ,OAAO,GAAGX,YAAY,CAACY,QAAQ,CAAC;EAEtCN,aAAa,CAAC;IACZK,OAAO;IACP,GAAGD;GACJ,CAAC;EAEF,MAAMM,OAAO,GAAG,MAAMX,SAAS,CAACI,MAAM,EAAEF,UAAU,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC;EACrE,IAAIM,KAAK,KAAK,IAAI,EAChBX,kBAAkB,CAAC;IACjBe,cAAc,EAAED,OAAO;IACvBH;GACD,CAAC;EAEJ,MAAMK,UAAU,GAAGL,KAAK,EAAEK,UAAU,IAAIT,MAAM,CAACI,KAAK,EAAEK,UAAU;EAChE,MAAMC,MAAM,GACVD,UAAU,EAAEE,kBAAkB,EAAED,MAAM,IAAIf,wBAAwB;EAEpE,IAAIO,OAAO,CAACH,eAAe,EACzB,OAAOG,OAAO,CAACH,eAAe,CAC5B;IACE,GAAGM,WAAW;IACdE;GAC0B,EAC5B;IAAEK,UAAU,EAAEZ,MAAM,CAACI,KAAK,EAAES,WAAW,EAAER;EAAW,CAAE,CACR;EAElD,OAAO,MAAML,MAAM,CAACc,OAAO,CACzB;IACEC,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE,CACN;MACE,GAAGN,MAAM,CAACL,WAA4C,CAAC;MACvDE,OAAO,EAAEb,WAAW,CAACa,OAAO,CAAC;MAC7BU,IAAI,EAAEf,OAAO,CAACgB;KACqB;GAExC,EACD;IAAEC,UAAU,EAAE;EAAC,CAAE,CAClB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}