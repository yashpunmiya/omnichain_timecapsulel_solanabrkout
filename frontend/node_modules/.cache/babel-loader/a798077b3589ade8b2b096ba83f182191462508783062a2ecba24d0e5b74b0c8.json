{"ast":null,"code":"import { BaseFeeScalarError, Eip1559FeesNotSupportedError } from '../../errors/fee.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { internal_estimateMaxPriorityFeePerGas } from './estimateMaxPriorityFeePerGas.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas(client, args) {\n  return internal_estimateFeesPerGas(client, args);\n}\nexport async function internal_estimateFeesPerGas(client, args) {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559'\n  } = args || {};\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function') return chain.fees.baseFeeMultiplier({\n      block: block_,\n      client,\n      request\n    });\n    return chain?.fees?.baseFeeMultiplier ?? 1.2;\n  })();\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError();\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0;\n  const denominator = 10 ** decimals;\n  const multiply = base => base * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);\n  const block = block_ ? block_ : await getAction(client, getBlock, 'getBlock')({});\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function') {\n    const fees = await chain.fees.estimateFeesPerGas({\n      block: block_,\n      client,\n      multiply,\n      request,\n      type\n    });\n    if (fees !== null) return fees;\n  }\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint') throw new Eip1559FeesNotSupportedError();\n    const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === 'bigint' ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas(client, {\n      block: block,\n      chain,\n      request\n    });\n    const baseFeePerGas = multiply(block.baseFeePerGas);\n    const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n  const gasPrice = request?.gasPrice ?? multiply(await getAction(client, getGasPrice, 'getGasPrice')({}));\n  return {\n    gasPrice\n  };\n}\n//# sourceMappingURL=estimateFeesPerGas.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}