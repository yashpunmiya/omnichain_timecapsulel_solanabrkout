{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrezorConnect = exports.CoreInSuiteDesktop = void 0;\nconst tslib_1 = require(\"tslib\");\nconst events_1 = tslib_1.__importDefault(require(\"events\"));\nconst ERRORS = tslib_1.__importStar(require(\"@trezor/connect/lib/constants/errors\"));\nconst events_2 = require(\"@trezor/connect/lib/events\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst websocket_client_1 = require(\"@trezor/websocket-client\");\nconst client_1 = require(\"@trezor/websocket-client/lib/client\");\nconst connectSettings_1 = require(\"../connectSettings\");\nclass CoreInSuiteDesktop {\n  eventEmitter = new events_1.default();\n  _settings;\n  ws;\n  constructor() {\n    this._settings = (0, connectSettings_1.parseConnectSettings)();\n  }\n  manifest(data) {\n    this._settings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings,\n      manifest: data\n    });\n  }\n  dispose() {\n    this.eventEmitter.removeAllListeners();\n    this._settings = (0, connectSettings_1.parseConnectSettings)();\n    this.ws?.dispose();\n    return Promise.resolve(undefined);\n  }\n  cancel(_error) {}\n  async handshake() {\n    try {\n      const response = await this.ws.sendMessage({\n        type: events_2.POPUP.HANDSHAKE\n      }, {\n        timeout: 1000\n      });\n      if (!response) {\n        throw ERRORS.TypedError('Desktop_ConnectionMissing', 'No response');\n      }\n      return response;\n    } catch (err) {\n      throw ERRORS.TypedError('Desktop_ConnectionMissing', err.message);\n    }\n  }\n  async init(settings = {}) {\n    const newSettings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings,\n      ...settings\n    });\n    if (!newSettings.transports?.length) {\n      newSettings.transports = ['BridgeTransport', 'WebUsbTransport'];\n    }\n    this._settings = newSettings;\n    try {\n      this.ws = new websocket_client_1.WebsocketClient({\n        url: 'ws://localhost:21335/connect-ws'\n      });\n      await this.ws.connect();\n      return await this.handshake();\n    } catch (err) {\n      throw err instanceof client_1.WebsocketError ? ERRORS.TypedError('Desktop_ConnectionMissing', err.message) : err;\n    }\n  }\n  setTransports() {\n    throw new Error('Unsupported');\n  }\n  async call(params) {\n    try {\n      if (!this.ws) {\n        await this.init();\n      } else {\n        await this.handshake();\n      }\n      const response = await this.ws?.sendMessage({\n        type: events_2.IFRAME.CALL,\n        payload: params\n      }, {\n        timeout: Number.MAX_SAFE_INTEGER\n      });\n      if (!response) {\n        throw ERRORS.TypedError('Desktop_ConnectionMissing', 'No response');\n      }\n      return response;\n    } catch (err) {\n      return {\n        success: false,\n        payload: ERRORS.serializeError(err instanceof client_1.WebsocketError ? ERRORS.TypedError('Desktop_ConnectionMissing', err.message) : err)\n      };\n    }\n  }\n  uiResponse(_response) {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  requestLogin() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  disableWebUSB() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  requestWebUSBDevice() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  renderWebUSBButton() {}\n}\nexports.CoreInSuiteDesktop = CoreInSuiteDesktop;\nconst impl = new CoreInSuiteDesktop();\nexports.TrezorConnect = (0, factory_1.factory)({\n  eventEmitter: impl.eventEmitter,\n  init: impl.init.bind(impl),\n  call: impl.call.bind(impl),\n  setTransports: impl.setTransports.bind(impl),\n  manifest: impl.manifest.bind(impl),\n  requestLogin: impl.requestLogin.bind(impl),\n  uiResponse: impl.uiResponse.bind(impl),\n  cancel: impl.cancel.bind(impl),\n  dispose: impl.dispose.bind(impl)\n});\n//# sourceMappingURL=core-in-suite-desktop.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}