{"ast":null,"code":"var once = require('once');\nvar eos = require('end-of-stream');\nvar fs;\ntry {\n  fs = require('fs'); // we only need fs to get the ReadStream and WriteStream prototypes\n} catch (e) {}\nvar noop = function () {};\nvar ancient = /^v?\\.0/.test(process.version);\nvar isFn = function (fn) {\n  return typeof fn === 'function';\n};\nvar isFS = function (stream) {\n  if (!ancient) return false; // newer node version do not need to care about fs is a special way\n  if (!fs) return false; // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);\n};\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort);\n};\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true;\n    if (isFS(stream)) return stream.close(noop); // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort(); // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy();\n    callback(err || new Error('stream was destroyed'));\n  };\n};\nvar call = function (fn) {\n  fn();\n};\nvar pipe = function (from, to) {\n  return from.pipe(to);\n};\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments);\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;\n  if (Array.isArray(streams[0])) streams = streams[0];\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum');\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n};\nmodule.exports = pump;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}