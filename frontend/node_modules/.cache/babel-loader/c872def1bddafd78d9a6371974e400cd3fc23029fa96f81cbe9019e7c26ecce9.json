{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsReadonly = IsReadonly;\nexports.IsOptional = IsOptional;\nexports.IsAny = IsAny;\nexports.IsArray = IsArray;\nexports.IsAsyncIterator = IsAsyncIterator;\nexports.IsBigInt = IsBigInt;\nexports.IsBoolean = IsBoolean;\nexports.IsConstructor = IsConstructor;\nexports.IsDate = IsDate;\nexports.IsFunction = IsFunction;\nexports.IsInteger = IsInteger;\nexports.IsProperties = IsProperties;\nexports.IsIntersect = IsIntersect;\nexports.IsIterator = IsIterator;\nexports.IsKindOf = IsKindOf;\nexports.IsLiteralString = IsLiteralString;\nexports.IsLiteralNumber = IsLiteralNumber;\nexports.IsLiteralBoolean = IsLiteralBoolean;\nexports.IsLiteral = IsLiteral;\nexports.IsMappedKey = IsMappedKey;\nexports.IsMappedResult = IsMappedResult;\nexports.IsNever = IsNever;\nexports.IsNot = IsNot;\nexports.IsNull = IsNull;\nexports.IsNumber = IsNumber;\nexports.IsObject = IsObject;\nexports.IsPromise = IsPromise;\nexports.IsRecord = IsRecord;\nexports.IsRecursive = IsRecursive;\nexports.IsRef = IsRef;\nexports.IsRegExp = IsRegExp;\nexports.IsString = IsString;\nexports.IsSymbol = IsSymbol;\nexports.IsTemplateLiteral = IsTemplateLiteral;\nexports.IsThis = IsThis;\nexports.IsTransform = IsTransform;\nexports.IsTuple = IsTuple;\nexports.IsUndefined = IsUndefined;\nexports.IsUnion = IsUnion;\nexports.IsUint8Array = IsUint8Array;\nexports.IsUnknown = IsUnknown;\nexports.IsUnsafe = IsUnsafe;\nexports.IsVoid = IsVoid;\nexports.IsKind = IsKind;\nexports.IsSchema = IsSchema;\nconst ValueGuard = require(\"./value\");\nconst index_1 = require(\"../symbols/index\");\n/** `[Kind-Only]` Returns true if this value has a Readonly symbol */\nfunction IsReadonly(value) {\n  return ValueGuard.IsObject(value) && value[index_1.ReadonlyKind] === 'Readonly';\n}\n/** `[Kind-Only]` Returns true if this value has a Optional symbol */\nfunction IsOptional(value) {\n  return ValueGuard.IsObject(value) && value[index_1.OptionalKind] === 'Optional';\n}\n/** `[Kind-Only]` Returns true if the given value is TAny */\nfunction IsAny(value) {\n  return IsKindOf(value, 'Any');\n}\n/** `[Kind-Only]` Returns true if the given value is TArray */\nfunction IsArray(value) {\n  return IsKindOf(value, 'Array');\n}\n/** `[Kind-Only]` Returns true if the given value is TAsyncIterator */\nfunction IsAsyncIterator(value) {\n  return IsKindOf(value, 'AsyncIterator');\n}\n/** `[Kind-Only]` Returns true if the given value is TBigInt */\nfunction IsBigInt(value) {\n  return IsKindOf(value, 'BigInt');\n}\n/** `[Kind-Only]` Returns true if the given value is TBoolean */\nfunction IsBoolean(value) {\n  return IsKindOf(value, 'Boolean');\n}\n/** `[Kind-Only]` Returns true if the given value is TConstructor */\nfunction IsConstructor(value) {\n  return IsKindOf(value, 'Constructor');\n}\n/** `[Kind-Only]` Returns true if the given value is TDate */\nfunction IsDate(value) {\n  return IsKindOf(value, 'Date');\n}\n/** `[Kind-Only]` Returns true if the given value is TFunction */\nfunction IsFunction(value) {\n  return IsKindOf(value, 'Function');\n}\n/** `[Kind-Only]` Returns true if the given value is TInteger */\nfunction IsInteger(value) {\n  return IsKindOf(value, 'Integer');\n}\n/** `[Kind-Only]` Returns true if the given schema is TProperties */\nfunction IsProperties(value) {\n  return ValueGuard.IsObject(value);\n}\n/** `[Kind-Only]` Returns true if the given value is TIntersect */\nfunction IsIntersect(value) {\n  return IsKindOf(value, 'Intersect');\n}\n/** `[Kind-Only]` Returns true if the given value is TIterator */\nfunction IsIterator(value) {\n  return IsKindOf(value, 'Iterator');\n}\n/** `[Kind-Only]` Returns true if the given value is a TKind with the given name. */\nfunction IsKindOf(value, kind) {\n  return ValueGuard.IsObject(value) && index_1.Kind in value && value[index_1.Kind] === kind;\n}\n/** `[Kind-Only]` Returns true if the given value is TLiteral<string> */\nfunction IsLiteralString(value) {\n  return IsLiteral(value) && ValueGuard.IsString(value.const);\n}\n/** `[Kind-Only]` Returns true if the given value is TLiteral<number> */\nfunction IsLiteralNumber(value) {\n  return IsLiteral(value) && ValueGuard.IsNumber(value.const);\n}\n/** `[Kind-Only]` Returns true if the given value is TLiteral<boolean> */\nfunction IsLiteralBoolean(value) {\n  return IsLiteral(value) && ValueGuard.IsBoolean(value.const);\n}\n/** `[Kind-Only]` Returns true if the given value is TLiteral */\nfunction IsLiteral(value) {\n  return IsKindOf(value, 'Literal');\n}\n/** `[Kind-Only]` Returns true if the given value is a TMappedKey */\nfunction IsMappedKey(value) {\n  return IsKindOf(value, 'MappedKey');\n}\n/** `[Kind-Only]` Returns true if the given value is TMappedResult */\nfunction IsMappedResult(value) {\n  return IsKindOf(value, 'MappedResult');\n}\n/** `[Kind-Only]` Returns true if the given value is TNever */\nfunction IsNever(value) {\n  return IsKindOf(value, 'Never');\n}\n/** `[Kind-Only]` Returns true if the given value is TNot */\nfunction IsNot(value) {\n  return IsKindOf(value, 'Not');\n}\n/** `[Kind-Only]` Returns true if the given value is TNull */\nfunction IsNull(value) {\n  return IsKindOf(value, 'Null');\n}\n/** `[Kind-Only]` Returns true if the given value is TNumber */\nfunction IsNumber(value) {\n  return IsKindOf(value, 'Number');\n}\n/** `[Kind-Only]` Returns true if the given value is TObject */\nfunction IsObject(value) {\n  return IsKindOf(value, 'Object');\n}\n/** `[Kind-Only]` Returns true if the given value is TPromise */\nfunction IsPromise(value) {\n  return IsKindOf(value, 'Promise');\n}\n/** `[Kind-Only]` Returns true if the given value is TRecord */\nfunction IsRecord(value) {\n  return IsKindOf(value, 'Record');\n}\n/** `[Kind-Only]` Returns true if this value is TRecursive */\nfunction IsRecursive(value) {\n  return ValueGuard.IsObject(value) && index_1.Hint in value && value[index_1.Hint] === 'Recursive';\n}\n/** `[Kind-Only]` Returns true if the given value is TRef */\nfunction IsRef(value) {\n  return IsKindOf(value, 'Ref');\n}\n/** `[Kind-Only]` Returns true if the given value is TRegExp */\nfunction IsRegExp(value) {\n  return IsKindOf(value, 'RegExp');\n}\n/** `[Kind-Only]` Returns true if the given value is TString */\nfunction IsString(value) {\n  return IsKindOf(value, 'String');\n}\n/** `[Kind-Only]` Returns true if the given value is TSymbol */\nfunction IsSymbol(value) {\n  return IsKindOf(value, 'Symbol');\n}\n/** `[Kind-Only]` Returns true if the given value is TTemplateLiteral */\nfunction IsTemplateLiteral(value) {\n  return IsKindOf(value, 'TemplateLiteral');\n}\n/** `[Kind-Only]` Returns true if the given value is TThis */\nfunction IsThis(value) {\n  return IsKindOf(value, 'This');\n}\n/** `[Kind-Only]` Returns true of this value is TTransform */\nfunction IsTransform(value) {\n  return ValueGuard.IsObject(value) && index_1.TransformKind in value;\n}\n/** `[Kind-Only]` Returns true if the given value is TTuple */\nfunction IsTuple(value) {\n  return IsKindOf(value, 'Tuple');\n}\n/** `[Kind-Only]` Returns true if the given value is TUndefined */\nfunction IsUndefined(value) {\n  return IsKindOf(value, 'Undefined');\n}\n/** `[Kind-Only]` Returns true if the given value is TUnion */\nfunction IsUnion(value) {\n  return IsKindOf(value, 'Union');\n}\n/** `[Kind-Only]` Returns true if the given value is TUint8Array */\nfunction IsUint8Array(value) {\n  return IsKindOf(value, 'Uint8Array');\n}\n/** `[Kind-Only]` Returns true if the given value is TUnknown */\nfunction IsUnknown(value) {\n  return IsKindOf(value, 'Unknown');\n}\n/** `[Kind-Only]` Returns true if the given value is a raw TUnsafe */\nfunction IsUnsafe(value) {\n  return IsKindOf(value, 'Unsafe');\n}\n/** `[Kind-Only]` Returns true if the given value is TVoid */\nfunction IsVoid(value) {\n  return IsKindOf(value, 'Void');\n}\n/** `[Kind-Only]` Returns true if the given value is TKind */\nfunction IsKind(value) {\n  return ValueGuard.IsObject(value) && index_1.Kind in value && ValueGuard.IsString(value[index_1.Kind]);\n}\n/** `[Kind-Only]` Returns true if the given value is TSchema */\nfunction IsSchema(value) {\n  // prettier-ignore\n  return IsAny(value) || IsArray(value) || IsBoolean(value) || IsBigInt(value) || IsAsyncIterator(value) || IsConstructor(value) || IsDate(value) || IsFunction(value) || IsInteger(value) || IsIntersect(value) || IsIterator(value) || IsLiteral(value) || IsMappedKey(value) || IsMappedResult(value) || IsNever(value) || IsNot(value) || IsNull(value) || IsNumber(value) || IsObject(value) || IsPromise(value) || IsRecord(value) || IsRef(value) || IsRegExp(value) || IsString(value) || IsSymbol(value) || IsTemplateLiteral(value) || IsThis(value) || IsTuple(value) || IsUndefined(value) || IsUnion(value) || IsUint8Array(value) || IsUnknown(value) || IsUnsafe(value) || IsVoid(value) || IsKind(value);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}