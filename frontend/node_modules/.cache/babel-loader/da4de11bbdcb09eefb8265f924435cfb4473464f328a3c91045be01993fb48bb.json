{"ast":null,"code":"export const UiHelperUtil = {\n  getSpacingStyles(spacing, index) {\n    if (Array.isArray(spacing)) {\n      return spacing[index] ? `var(--wui-spacing-${spacing[index]})` : undefined;\n    } else if (typeof spacing === 'string') {\n      return `var(--wui-spacing-${spacing})`;\n    }\n    return undefined;\n  },\n  getFormattedDate(date) {\n    return new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric'\n    }).format(date);\n  },\n  getHostName(url) {\n    try {\n      const newUrl = new URL(url);\n      return newUrl.hostname;\n    } catch (error) {\n      return '';\n    }\n  },\n  getTruncateString({\n    string,\n    charsStart,\n    charsEnd,\n    truncate\n  }) {\n    if (string.length <= charsStart + charsEnd) {\n      return string;\n    }\n    if (truncate === 'end') {\n      return `${string.substring(0, charsStart)}...`;\n    } else if (truncate === 'start') {\n      return `...${string.substring(string.length - charsEnd)}`;\n    }\n    return `${string.substring(0, Math.floor(charsStart))}...${string.substring(string.length - Math.floor(charsEnd))}`;\n  },\n  generateAvatarColors(address) {\n    const hash = address.toLowerCase().replace(/^0x/iu, '').replace(/[^a-f0-9]/gu, '');\n    const baseColor = hash.substring(0, 6).padEnd(6, '0');\n    const rgbColor = this.hexToRgb(baseColor);\n    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue('--w3m-border-radius-master');\n    const radius = Number(masterBorderRadius?.replace('px', ''));\n    const edge = 100 - 3 * radius;\n    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;\n    const colors = [];\n    for (let i = 0; i < 5; i += 1) {\n      const tintedColor = this.tintColor(rgbColor, 0.15 * i);\n      colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);\n    }\n    return `\n    --local-color-1: ${colors[0]};\n    --local-color-2: ${colors[1]};\n    --local-color-3: ${colors[2]};\n    --local-color-4: ${colors[3]};\n    --local-color-5: ${colors[4]};\n    --local-radial-circle: ${gradientCircle}\n   `;\n  },\n  hexToRgb(hex) {\n    const bigint = parseInt(hex, 16);\n    const r = bigint >> 16 & 255;\n    const g = bigint >> 8 & 255;\n    const b = bigint & 255;\n    return [r, g, b];\n  },\n  tintColor(rgb, tint) {\n    const [r, g, b] = rgb;\n    const tintedR = Math.round(r + (255 - r) * tint);\n    const tintedG = Math.round(g + (255 - g) * tint);\n    const tintedB = Math.round(b + (255 - b) * tint);\n    return [tintedR, tintedG, tintedB];\n  },\n  isNumber(character) {\n    const regex = {\n      number: /^[0-9]+$/u\n    };\n    return regex.number.test(character);\n  },\n  getColorTheme(theme) {\n    if (theme) {\n      return theme;\n    } else if (typeof window !== 'undefined' && window.matchMedia) {\n      if (window.matchMedia('(prefers-color-scheme: dark)')?.matches) {\n        return 'dark';\n      }\n      return 'light';\n    }\n    return 'dark';\n  },\n  splitBalance(input) {\n    const parts = input.split('.');\n    if (parts.length === 2) {\n      return [parts[0], parts[1]];\n    }\n    return ['0', '00'];\n  },\n  roundNumber(number, threshold, fixed) {\n    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;\n    return roundedNumber;\n  },\n  formatNumberToLocalString(value, decimals = 2) {\n    if (value === undefined) {\n      return '0.00';\n    }\n    if (typeof value === 'number') {\n      return value.toLocaleString('en-US', {\n        maximumFractionDigits: decimals,\n        minimumFractionDigits: decimals\n      });\n    }\n    return parseFloat(value).toLocaleString('en-US', {\n      maximumFractionDigits: decimals,\n      minimumFractionDigits: decimals\n    });\n  }\n};\n//# sourceMappingURL=UiHelperUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}