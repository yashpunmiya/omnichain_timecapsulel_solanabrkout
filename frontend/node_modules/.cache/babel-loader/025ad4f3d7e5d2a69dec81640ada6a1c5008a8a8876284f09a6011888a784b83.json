{"ast":null,"code":"import { formatEther } from '../utils/unit/formatEther.js';\nimport { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nexport function prettyPrint(args) {\n  const entries = Object.entries(args).map(([key, value]) => {\n    if (value === undefined || value === false) return null;\n    return [key, value];\n  }).filter(Boolean);\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);\n  return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join('\\n');\n}\nexport class FeeConflictError extends BaseError {\n  constructor() {\n    super(['Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.', 'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.'].join('\\n'), {\n      name: 'FeeConflictError'\n    });\n  }\n}\nexport class InvalidLegacyVError extends BaseError {\n  constructor({\n    v\n  }) {\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`, {\n      name: 'InvalidLegacyVError'\n    });\n  }\n}\nexport class InvalidSerializableTransactionError extends BaseError {\n  constructor({\n    transaction\n  }) {\n    super('Cannot infer a transaction type from provided transaction.', {\n      metaMessages: ['Provided Transaction:', '{', prettyPrint(transaction), '}', '', 'To infer the type, either provide:', '- a `type` to the Transaction, or', '- an EIP-1559 Transaction with `maxFeePerGas`, or', '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or', '- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or', '- an EIP-7702 Transaction with `authorizationList`, or', '- a Legacy Transaction with `gasPrice`'],\n      name: 'InvalidSerializableTransactionError'\n    });\n  }\n}\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n  constructor({\n    serializedType\n  }) {\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`, {\n      name: 'InvalidSerializedTransactionType'\n    });\n    Object.defineProperty(this, \"serializedType\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.serializedType = serializedType;\n  }\n}\nexport class InvalidSerializedTransactionError extends BaseError {\n  constructor({\n    attributes,\n    serializedTransaction,\n    type\n  }) {\n    const missing = Object.entries(attributes).map(([key, value]) => typeof value === 'undefined' ? key : undefined).filter(Boolean);\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [`Serialized Transaction: \"${serializedTransaction}\"`, missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : ''].filter(Boolean),\n      name: 'InvalidSerializedTransactionError'\n    });\n    Object.defineProperty(this, \"serializedTransaction\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"type\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.serializedTransaction = serializedTransaction;\n    this.type = type;\n  }\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n  constructor({\n    storageKey\n  }) {\n    super(`Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`, {\n      name: 'InvalidStorageKeySizeError'\n    });\n  }\n}\nexport class TransactionExecutionError extends BaseError {\n  constructor(cause, {\n    account,\n    docsPath,\n    chain,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value\n  }) {\n    const prettyArgs = prettyPrint({\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\n      from: account?.address,\n      to,\n      value: typeof value !== 'undefined' && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas: typeof maxFeePerGas !== 'undefined' && `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' && `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce\n    });\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [...(cause.metaMessages ? [...cause.metaMessages, ' '] : []), 'Request Arguments:', prettyArgs].filter(Boolean),\n      name: 'TransactionExecutionError'\n    });\n    Object.defineProperty(this, \"cause\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.cause = cause;\n  }\n}\nexport class TransactionNotFoundError extends BaseError {\n  constructor({\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    index\n  }) {\n    let identifier = 'Transaction';\n    if (blockTag && index !== undefined) identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`;\n    if (blockHash && index !== undefined) identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`;\n    if (blockNumber && index !== undefined) identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`;\n    if (hash) identifier = `Transaction with hash \"${hash}\"`;\n    super(`${identifier} could not be found.`, {\n      name: 'TransactionNotFoundError'\n    });\n  }\n}\nexport class TransactionReceiptNotFoundError extends BaseError {\n  constructor({\n    hash\n  }) {\n    super(`Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`, {\n      name: 'TransactionReceiptNotFoundError'\n    });\n  }\n}\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n  constructor({\n    hash\n  }) {\n    super(`Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`, {\n      name: 'WaitForTransactionReceiptTimeoutError'\n    });\n  }\n}\n//# sourceMappingURL=transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}