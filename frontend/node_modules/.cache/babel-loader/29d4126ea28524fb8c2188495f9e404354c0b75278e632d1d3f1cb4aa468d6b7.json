{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMutex = void 0;\nconst getMutex = () => {\n  const DEFAULT_ID = Symbol();\n  const locks = {};\n  return async (lockId = DEFAULT_ID) => {\n    while (locks[lockId]) {\n      await locks[lockId];\n    }\n    let resolve = () => {};\n    locks[lockId] = new Promise(res => {\n      resolve = res;\n    }).finally(() => {\n      delete locks[lockId];\n    });\n    return resolve;\n  };\n};\nexports.getMutex = getMutex;","map":{"version":3,"names":["Object","defineProperty","exports","value","getMutex","DEFAULT_ID","Symbol","locks","lockId","resolve","Promise","res","finally"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@trezor/utils/lib/getMutex.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMutex = void 0;\nconst getMutex = () => {\n    const DEFAULT_ID = Symbol();\n    const locks = {};\n    return async (lockId = DEFAULT_ID) => {\n        while (locks[lockId]) {\n            await locks[lockId];\n        }\n        let resolve = () => { };\n        locks[lockId] = new Promise(res => {\n            resolve = res;\n        }).finally(() => {\n            delete locks[lockId];\n        });\n        return resolve;\n    };\n};\nexports.getMutex = getMutex;\n//# sourceMappingURL=getMutex.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMA,QAAQ,GAAGA,CAAA,KAAM;EACnB,MAAMC,UAAU,GAAGC,MAAM,CAAC,CAAC;EAC3B,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,OAAO,OAAOC,MAAM,GAAGH,UAAU,KAAK;IAClC,OAAOE,KAAK,CAACC,MAAM,CAAC,EAAE;MAClB,MAAMD,KAAK,CAACC,MAAM,CAAC;IACvB;IACA,IAAIC,OAAO,GAAGA,CAAA,KAAM,CAAE,CAAC;IACvBF,KAAK,CAACC,MAAM,CAAC,GAAG,IAAIE,OAAO,CAACC,GAAG,IAAI;MAC/BF,OAAO,GAAGE,GAAG;IACjB,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM;MACb,OAAOL,KAAK,CAACC,MAAM,CAAC;IACxB,CAAC,CAAC;IACF,OAAOC,OAAO;EAClB,CAAC;AACL,CAAC;AACDP,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}