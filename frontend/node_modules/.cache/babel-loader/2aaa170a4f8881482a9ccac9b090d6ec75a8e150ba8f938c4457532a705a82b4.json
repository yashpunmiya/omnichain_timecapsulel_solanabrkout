{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMessageFromType = exports.createMessageFromName = exports.isPrimitiveField = void 0;\nexports.parseConfigure = parseConfigure;\nconst tslib_1 = require(\"tslib\");\nconst protobuf = tslib_1.__importStar(require(\"protobufjs/light\"));\nconst primitiveTypes = ['bool', 'string', 'bytes', 'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64', 'sfixed32', 'sfixed64', 'double', 'float'];\nconst isPrimitiveField = field => primitiveTypes.includes(field);\nexports.isPrimitiveField = isPrimitiveField;\nfunction parseConfigure(data) {\n  if (typeof data === 'string') {\n    return protobuf.Root.fromJSON(JSON.parse(data));\n  }\n  return protobuf.Root.fromJSON(data);\n}\nconst createMessageFromName = (messages, name) => {\n  const Message = messages.lookupType(name);\n  const messageTypes = messages.lookupEnum('MessageType');\n  let messageTypeId = messageTypes.values[name];\n  if (typeof messageTypeId !== 'number' && Message.options) {\n    messageTypeId = Message.options['(wire_type)'];\n  }\n  return {\n    Message,\n    messageType: messageTypeId ?? name\n  };\n};\nexports.createMessageFromName = createMessageFromName;\nconst createMessageFromType = (messages, messageType) => {\n  if (typeof messageType === 'string') {\n    const Message = messages.lookupType(messageType);\n    return {\n      Message,\n      messageName: messageType\n    };\n  }\n  const messageTypes = messages.lookupEnum('MessageType');\n  const messageName = messageTypes.valuesById[messageType];\n  const Message = messages.lookupType(messageName);\n  return {\n    Message,\n    messageName\n  };\n};\nexports.createMessageFromType = createMessageFromType;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMessageFromType","createMessageFromName","isPrimitiveField","parseConfigure","tslib_1","require","protobuf","__importStar","primitiveTypes","field","includes","data","Root","fromJSON","JSON","parse","messages","name","Message","lookupType","messageTypes","lookupEnum","messageTypeId","values","options","messageType","messageName","valuesById"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@trezor/protobuf/lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMessageFromType = exports.createMessageFromName = exports.isPrimitiveField = void 0;\nexports.parseConfigure = parseConfigure;\nconst tslib_1 = require(\"tslib\");\nconst protobuf = tslib_1.__importStar(require(\"protobufjs/light\"));\nconst primitiveTypes = [\n    'bool',\n    'string',\n    'bytes',\n    'int32',\n    'int64',\n    'uint32',\n    'uint64',\n    'sint32',\n    'sint64',\n    'fixed32',\n    'fixed64',\n    'sfixed32',\n    'sfixed64',\n    'double',\n    'float',\n];\nconst isPrimitiveField = (field) => primitiveTypes.includes(field);\nexports.isPrimitiveField = isPrimitiveField;\nfunction parseConfigure(data) {\n    if (typeof data === 'string') {\n        return protobuf.Root.fromJSON(JSON.parse(data));\n    }\n    return protobuf.Root.fromJSON(data);\n}\nconst createMessageFromName = (messages, name) => {\n    const Message = messages.lookupType(name);\n    const messageTypes = messages.lookupEnum('MessageType');\n    let messageTypeId = messageTypes.values[name];\n    if (typeof messageTypeId !== 'number' && Message.options) {\n        messageTypeId = Message.options['(wire_type)'];\n    }\n    return {\n        Message,\n        messageType: messageTypeId ?? name,\n    };\n};\nexports.createMessageFromName = createMessageFromName;\nconst createMessageFromType = (messages, messageType) => {\n    if (typeof messageType === 'string') {\n        const Message = messages.lookupType(messageType);\n        return {\n            Message,\n            messageName: messageType,\n        };\n    }\n    const messageTypes = messages.lookupEnum('MessageType');\n    const messageName = messageTypes.valuesById[messageType];\n    const Message = messages.lookupType(messageName);\n    return {\n        Message,\n        messageName,\n    };\n};\nexports.createMessageFromType = createMessageFromType;\n//# sourceMappingURL=utils.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACI,gBAAgB,GAAG,KAAK,CAAC;AACjGJ,OAAO,CAACK,cAAc,GAAGA,cAAc;AACvC,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,QAAQ,GAAGF,OAAO,CAACG,YAAY,CAACF,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAClE,MAAMG,cAAc,GAAG,CACnB,MAAM,EACN,QAAQ,EACR,OAAO,EACP,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,SAAS,EACT,UAAU,EACV,UAAU,EACV,QAAQ,EACR,OAAO,CACV;AACD,MAAMN,gBAAgB,GAAIO,KAAK,IAAKD,cAAc,CAACE,QAAQ,CAACD,KAAK,CAAC;AAClEX,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3C,SAASC,cAAcA,CAACQ,IAAI,EAAE;EAC1B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOL,QAAQ,CAACM,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAC;EACnD;EACA,OAAOL,QAAQ,CAACM,IAAI,CAACC,QAAQ,CAACF,IAAI,CAAC;AACvC;AACA,MAAMV,qBAAqB,GAAGA,CAACe,QAAQ,EAAEC,IAAI,KAAK;EAC9C,MAAMC,OAAO,GAAGF,QAAQ,CAACG,UAAU,CAACF,IAAI,CAAC;EACzC,MAAMG,YAAY,GAAGJ,QAAQ,CAACK,UAAU,CAAC,aAAa,CAAC;EACvD,IAAIC,aAAa,GAAGF,YAAY,CAACG,MAAM,CAACN,IAAI,CAAC;EAC7C,IAAI,OAAOK,aAAa,KAAK,QAAQ,IAAIJ,OAAO,CAACM,OAAO,EAAE;IACtDF,aAAa,GAAGJ,OAAO,CAACM,OAAO,CAAC,aAAa,CAAC;EAClD;EACA,OAAO;IACHN,OAAO;IACPO,WAAW,EAAEH,aAAa,IAAIL;EAClC,CAAC;AACL,CAAC;AACDnB,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD,MAAMD,qBAAqB,GAAGA,CAACgB,QAAQ,EAAES,WAAW,KAAK;EACrD,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IACjC,MAAMP,OAAO,GAAGF,QAAQ,CAACG,UAAU,CAACM,WAAW,CAAC;IAChD,OAAO;MACHP,OAAO;MACPQ,WAAW,EAAED;IACjB,CAAC;EACL;EACA,MAAML,YAAY,GAAGJ,QAAQ,CAACK,UAAU,CAAC,aAAa,CAAC;EACvD,MAAMK,WAAW,GAAGN,YAAY,CAACO,UAAU,CAACF,WAAW,CAAC;EACxD,MAAMP,OAAO,GAAGF,QAAQ,CAACG,UAAU,CAACO,WAAW,CAAC;EAChD,OAAO;IACHR,OAAO;IACPQ;EACJ,CAAC;AACL,CAAC;AACD5B,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}