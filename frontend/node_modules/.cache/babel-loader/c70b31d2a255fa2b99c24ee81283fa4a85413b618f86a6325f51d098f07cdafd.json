{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Exclude = Exclude;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../union/index\");\nconst index_2 = require(\"../never/index\");\nconst index_3 = require(\"../extends/index\");\nconst exclude_from_mapped_result_1 = require(\"./exclude-from-mapped-result\");\nconst exclude_from_template_literal_1 = require(\"./exclude-from-template-literal\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\nfunction ExcludeRest(L, R) {\n  const excluded = L.filter(inner => (0, index_3.ExtendsCheck)(inner, R) === index_3.ExtendsResult.False);\n  return excluded.length === 1 ? excluded[0] : (0, index_1.Union)(excluded);\n}\n/** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */\nfunction Exclude(L, R, options = {}) {\n  // overloads\n  if ((0, kind_1.IsTemplateLiteral)(L)) return (0, type_1.CreateType)((0, exclude_from_template_literal_1.ExcludeFromTemplateLiteral)(L, R), options);\n  if ((0, kind_1.IsMappedResult)(L)) return (0, type_1.CreateType)((0, exclude_from_mapped_result_1.ExcludeFromMappedResult)(L, R), options);\n  // prettier-ignore\n  return (0, type_1.CreateType)((0, kind_1.IsUnion)(L) ? ExcludeRest(L.anyOf, R) : (0, index_3.ExtendsCheck)(L, R) !== index_3.ExtendsResult.False ? (0, index_2.Never)() : L, options);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}