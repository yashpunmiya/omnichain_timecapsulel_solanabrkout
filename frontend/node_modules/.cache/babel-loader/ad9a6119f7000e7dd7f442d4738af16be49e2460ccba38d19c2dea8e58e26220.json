{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeDeepObject = void 0;\nconst isObject = obj => {\n  if (typeof obj === 'object' && obj !== null) {\n    if (typeof Object.getPrototypeOf === 'function') {\n      const prototype = Object.getPrototypeOf(obj);\n      return prototype === Object.prototype || prototype === null;\n    }\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  }\n  return false;\n};\nconst mergeValuesWithPath = (target, value, [key, ...rest]) => {\n  if (key === undefined) {\n    return mergeValues(target, value);\n  } else if (!isObject(target)) {\n    return {\n      [key]: mergeValuesWithPath({}, value, rest)\n    };\n  } else {\n    return {\n      ...target,\n      [key]: mergeValuesWithPath(target[key], value, rest)\n    };\n  }\n};\nconst mergeValues = (target, value) => {\n  if (Array.isArray(target) && Array.isArray(value)) {\n    return exports.mergeDeepObject.options.mergeArrays ? Array.from(new Set(target.concat(value))) : value;\n  } else if (isObject(target) && isObject(value)) {\n    return (0, exports.mergeDeepObject)(target, value);\n  } else {\n    return value;\n  }\n};\nconst mergeDeepObject = (...objects) => objects.reduce((result, current) => {\n  if (Array.isArray(current)) {\n    throw new TypeError('Arguments provided to ts-deepmerge must be objects, not arrays.');\n  }\n  Object.keys(current).forEach(key => {\n    if (['__proto__', 'constructor', 'prototype'].includes(key)) {\n      return;\n    }\n    if (exports.mergeDeepObject.options.dotNotation) {\n      const [first, ...rest] = key.split('.');\n      result[first] = mergeValuesWithPath(result[first], current[key], rest);\n    } else {\n      result[key] = mergeValues(result[key], current[key]);\n    }\n  });\n  return result;\n}, {});\nexports.mergeDeepObject = mergeDeepObject;\nconst defaultOptions = {\n  mergeArrays: true,\n  dotNotation: false\n};\nexports.mergeDeepObject.options = defaultOptions;\nexports.mergeDeepObject.withOptions = (options, ...objects) => {\n  exports.mergeDeepObject.options = {\n    ...defaultOptions,\n    ...options\n  };\n  const result = (0, exports.mergeDeepObject)(...objects);\n  exports.mergeDeepObject.options = defaultOptions;\n  return result;\n};\n//# sourceMappingURL=mergeDeepObject.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}