{"ast":null,"code":"import { addressResolverAbi, universalResolverResolveAbi } from '../../constants/abis.js';\nimport { decodeFunctionResult } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress } from '../../utils/chain/getChainContractAddress.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js';\nimport { namehash } from '../../utils/ens/namehash.js';\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract } from '../public/readContract.js';\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress(client, parameters) {\n  const {\n    blockNumber,\n    blockTag,\n    coinType,\n    name,\n    gatewayUrls,\n    strict\n  } = parameters;\n  const {\n    chain\n  } = client;\n  const universalResolverAddress = (() => {\n    if (parameters.universalResolverAddress) return parameters.universalResolverAddress;\n    if (!chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    return getChainContractAddress({\n      blockNumber,\n      chain,\n      contract: 'ensUniversalResolver'\n    });\n  })();\n  const tlds = chain?.ensTlds;\n  if (tlds && !tlds.some(tld => name.endsWith(tld))) return null;\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      ...(coinType != null ? {\n        args: [namehash(name), BigInt(coinType)]\n      } : {\n        args: [namehash(name)]\n      })\n    });\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [toHex(packetToBytes(name)), functionData, gatewayUrls ?? [localBatchGatewayUrl]],\n      blockNumber,\n      blockTag\n    };\n    const readContractAction = getAction(client, readContract, 'readContract');\n    const res = await readContractAction(readContractParameters);\n    if (res[0] === '0x') return null;\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n      functionName: 'addr',\n      data: res[0]\n    });\n    if (address === '0x') return null;\n    if (trim(address) === '0x00') return null;\n    return address;\n  } catch (err) {\n    if (strict) throw err;\n    if (isNullUniversalResolverError(err, 'resolve')) return null;\n    throw err;\n  }\n}","map":{"version":3,"names":["addressResolverAbi","universalResolverResolveAbi","decodeFunctionResult","encodeFunctionData","getChainContractAddress","trim","toHex","isNullUniversalResolverError","localBatchGatewayUrl","namehash","packetToBytes","getAction","readContract","getEnsAddress","client","parameters","blockNumber","blockTag","coinType","name","gatewayUrls","strict","chain","universalResolverAddress","Error","contract","tlds","ensTlds","some","tld","endsWith","functionData","abi","functionName","args","BigInt","readContractParameters","address","readContractAction","res","undefined","data","err"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\actions\\ens\\getEnsAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  addressResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type TrimErrorType, trim } from '../../utils/data/trim.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsAddressParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENSIP-9 compliant coinType used to resolve addresses for other chains */\n    coinType?: number | undefined\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Name to get the address for. */\n    name: string\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsAddressReturnType = Address | null\n\nexport type GetEnsAddressErrorType =\n  | GetChainContractAddressErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | DecodeFunctionResultErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: GetEnsAddressParameters,\n): Promise<GetEnsAddressReturnType> {\n  const { blockNumber, blockTag, coinType, name, gatewayUrls, strict } =\n    parameters\n  const { chain } = client\n\n  const universalResolverAddress = (() => {\n    if (parameters.universalResolverAddress)\n      return parameters.universalResolverAddress\n    if (!chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n    return getChainContractAddress({\n      blockNumber,\n      chain,\n      contract: 'ensUniversalResolver',\n    })\n  })()\n\n  const tlds = chain?.ensTlds\n  if (tlds && !tlds.some((tld) => name.endsWith(tld))) return null\n\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      ...(coinType != null\n        ? { args: [namehash(name), BigInt(coinType)] }\n        : { args: [namehash(name)] }),\n    })\n\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [\n        toHex(packetToBytes(name)),\n        functionData,\n        gatewayUrls ?? [localBatchGatewayUrl],\n      ],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const res = await readContractAction(readContractParameters)\n\n    if (res[0] === '0x') return null\n\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n      functionName: 'addr',\n      data: res[0],\n    })\n\n    if (address === '0x') return null\n    if (trim(address) === '0x00') return null\n    return address\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}