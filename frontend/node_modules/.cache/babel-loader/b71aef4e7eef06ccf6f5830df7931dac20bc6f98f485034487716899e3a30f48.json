{"ast":null,"code":"import { panicReasons } from '../../constants/solidity.js';\nimport { BaseError } from '../../errors/base.js';\nimport { ContractFunctionRevertedError } from '../../errors/contract.js';\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(err, callType) {\n  if (!(err instanceof BaseError)) return false;\n  const cause = err.walk(e => e instanceof ContractFunctionRevertedError);\n  if (!(cause instanceof ContractFunctionRevertedError)) return false;\n  if (cause.data?.errorName === 'ResolverNotFound') return true;\n  if (cause.data?.errorName === 'ResolverWildcardNotSupported') return true;\n  if (cause.data?.errorName === 'ResolverNotContract') return true;\n  if (cause.data?.errorName === 'ResolverError') return true;\n  if (cause.data?.errorName === 'HttpError') return true;\n  // Backwards compatibility for older UniversalResolver contracts\n  if (cause.reason?.includes('Wildcard on non-extended resolvers is not supported')) return true;\n  // No primary name set for address.\n  if (callType === 'reverse' && cause.reason === panicReasons[50]) return true;\n  return false;\n}","map":{"version":3,"names":["panicReasons","BaseError","ContractFunctionRevertedError","isNullUniversalResolverError","err","callType","cause","walk","e","data","errorName","reason","includes"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\ens\\errors.ts"],"sourcesContent":["import { panicReasons } from '../../constants/solidity.js'\nimport { BaseError } from '../../errors/base.js'\nimport { ContractFunctionRevertedError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\n/** @internal */\nexport type IsNullUniversalResolverErrorErrorType = ErrorType\n\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(\n  err: unknown,\n  callType: 'resolve' | 'reverse',\n): boolean {\n  if (!(err instanceof BaseError)) return false\n  const cause = err.walk((e) => e instanceof ContractFunctionRevertedError)\n  if (!(cause instanceof ContractFunctionRevertedError)) return false\n  if (cause.data?.errorName === 'ResolverNotFound') return true\n  if (cause.data?.errorName === 'ResolverWildcardNotSupported') return true\n  if (cause.data?.errorName === 'ResolverNotContract') return true\n  if (cause.data?.errorName === 'ResolverError') return true\n  if (cause.data?.errorName === 'HttpError') return true\n  // Backwards compatibility for older UniversalResolver contracts\n  if (\n    cause.reason?.includes(\n      'Wildcard on non-extended resolvers is not supported',\n    )\n  )\n    return true\n  // No primary name set for address.\n  if (callType === 'reverse' && cause.reason === panicReasons[50]) return true\n  return false\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,6BAA6B,QAAQ,0BAA0B;AAMxE;;;AAGA,OAAM,SAAUC,4BAA4BA,CAC1CC,GAAY,EACZC,QAA+B;EAE/B,IAAI,EAAED,GAAG,YAAYH,SAAS,CAAC,EAAE,OAAO,KAAK;EAC7C,MAAMK,KAAK,GAAGF,GAAG,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,YAAYN,6BAA6B,CAAC;EACzE,IAAI,EAAEI,KAAK,YAAYJ,6BAA6B,CAAC,EAAE,OAAO,KAAK;EACnE,IAAII,KAAK,CAACG,IAAI,EAAEC,SAAS,KAAK,kBAAkB,EAAE,OAAO,IAAI;EAC7D,IAAIJ,KAAK,CAACG,IAAI,EAAEC,SAAS,KAAK,8BAA8B,EAAE,OAAO,IAAI;EACzE,IAAIJ,KAAK,CAACG,IAAI,EAAEC,SAAS,KAAK,qBAAqB,EAAE,OAAO,IAAI;EAChE,IAAIJ,KAAK,CAACG,IAAI,EAAEC,SAAS,KAAK,eAAe,EAAE,OAAO,IAAI;EAC1D,IAAIJ,KAAK,CAACG,IAAI,EAAEC,SAAS,KAAK,WAAW,EAAE,OAAO,IAAI;EACtD;EACA,IACEJ,KAAK,CAACK,MAAM,EAAEC,QAAQ,CACpB,qDAAqD,CACtD,EAED,OAAO,IAAI;EACb;EACA,IAAIP,QAAQ,KAAK,SAAS,IAAIC,KAAK,CAACK,MAAM,KAAKX,YAAY,CAAC,EAAE,CAAC,EAAE,OAAO,IAAI;EAC5E,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}