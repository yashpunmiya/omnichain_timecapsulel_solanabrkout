{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrezorConnect = exports.CoreInPopup = void 0;\nconst tslib_1 = require(\"tslib\");\nconst events_1 = tslib_1.__importDefault(require(\"events\"));\nconst ERRORS = tslib_1.__importStar(require(\"@trezor/connect/lib/constants/errors\"));\nconst events_2 = require(\"@trezor/connect/lib/events\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst debug_1 = require(\"@trezor/connect/lib/utils/debug\");\nconst utils_1 = require(\"@trezor/utils\");\nconst connectSettings_1 = require(\"../connectSettings\");\nconst popup = tslib_1.__importStar(require(\"../popup\"));\nclass CoreInPopup {\n  eventEmitter = new events_1.default();\n  _settings;\n  logger;\n  popupManagerLogger;\n  _popupManager;\n  constructor() {\n    this._settings = (0, connectSettings_1.parseConnectSettings)();\n    this.logger = (0, debug_1.initLog)('@trezor/connect-web');\n    this.popupManagerLogger = (0, debug_1.initLog)('@trezor/connect-web/popupManager');\n  }\n  logWriterFactory(popupManager) {\n    return {\n      add: message => {\n        popupManager.channel.postMessage({\n          event: events_2.UI_EVENT,\n          type: events_2.IFRAME.LOG,\n          payload: message\n        }, {\n          usePromise: false,\n          useQueue: true\n        });\n      }\n    };\n  }\n  manifest(data) {\n    this._settings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings,\n      manifest: data\n    });\n  }\n  dispose() {\n    this.eventEmitter.removeAllListeners();\n    this._settings = (0, connectSettings_1.parseConnectSettings)();\n    if (this._popupManager) {\n      this._popupManager.close();\n    }\n    return Promise.resolve(undefined);\n  }\n  cancel(error) {\n    if (this._popupManager) {\n      this._popupManager.emit(events_2.POPUP.CLOSED, error);\n    }\n  }\n  init(settings) {\n    const oldSettings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings\n    });\n    const newSettings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings,\n      ...settings\n    });\n    if (!newSettings.transports?.length) {\n      newSettings.transports = ['BridgeTransport', 'WebUsbTransport'];\n    }\n    newSettings.useCoreInPopup = true;\n    if (typeof window !== 'undefined' && window?.location?.origin) {\n      newSettings.origin = window.location.origin;\n    }\n    const equalSettings = JSON.stringify(oldSettings) === JSON.stringify(newSettings);\n    this._settings = newSettings;\n    if (!this._popupManager || !equalSettings) {\n      if (this._popupManager) this._popupManager.close();\n      this._popupManager = new popup.PopupManager(this._settings, {\n        logger: this.popupManagerLogger\n      });\n      this._popupManager.on(events_2.DEVICE_EVENT, event => {\n        this.eventEmitter.emit(events_2.DEVICE_EVENT, event);\n      });\n      (0, debug_1.setLogWriter)(() => this.logWriterFactory(this._popupManager));\n    }\n    this.logger.enabled = !!settings.debug;\n    if (!this._settings.manifest) {\n      throw ERRORS.TypedError('Init_ManifestMissing');\n    }\n    this.logger.debug('initiated');\n    return Promise.resolve();\n  }\n  setTransports() {\n    throw new Error('Unsupported right now');\n  }\n  async call(params) {\n    this.logger.debug('call', params);\n    if (!this._popupManager) {\n      return (0, events_2.createErrorMessage)(ERRORS.TypedError('Init_NotInitialized'));\n    }\n    if (this._settings.popup) {\n      await this._popupManager.request();\n    }\n    const popupClosed = (0, utils_1.createDeferred)();\n    const popupClosedHandler = () => {\n      this.logger.log('Popup closed during initialization');\n      popupClosed.reject(ERRORS.TypedError('Method_Interrupted'));\n    };\n    this._popupManager.once(events_2.POPUP.CLOSED, popupClosedHandler);\n    try {\n      this.logger.debug('call: popup initialing');\n      await Promise.race([popupClosed.promise, this.callInit()]);\n      this.logger.debug('call: popup initialized');\n      const response = await this._popupManager.channel.postMessage({\n        type: events_2.IFRAME.CALL,\n        payload: params\n      });\n      this.logger.debug('call: response: ', response);\n      if (response) {\n        if (this._popupManager && response.success) {\n          this._popupManager.clear();\n        }\n        return {\n          success: response.success,\n          payload: response.payload,\n          device: response.device\n        };\n      }\n      throw ERRORS.TypedError('Method_NoResponse');\n    } catch (error) {\n      this.logger.error('call: error', error);\n      this._popupManager.clear(false);\n      return (0, events_2.createErrorMessage)(error);\n    } finally {\n      this._popupManager.removeListener(events_2.POPUP.CLOSED, popupClosedHandler);\n    }\n  }\n  async callInit() {\n    if (!this._popupManager) {\n      throw ERRORS.TypedError('Init_NotInitialized');\n    }\n    await this._popupManager.channel.init();\n    if (this._settings.env === 'webextension') {\n      await this._popupManager.popupPromise?.promise;\n      this._popupManager.channel.postMessage({\n        type: events_2.POPUP.INIT,\n        payload: {\n          settings: this._settings,\n          useCore: true\n        }\n      });\n    }\n    await this._popupManager.handshakePromise?.promise;\n  }\n  uiResponse(response) {\n    const {\n      type,\n      payload\n    } = response;\n    this._popupManager?.channel?.postMessage({\n      event: events_2.UI_EVENT,\n      type,\n      payload\n    });\n  }\n  renderWebUSBButton() {}\n  requestLogin() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  disableWebUSB() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  requestWebUSBDevice() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n}\nexports.CoreInPopup = CoreInPopup;\nconst impl = new CoreInPopup();\nexports.TrezorConnect = (0, factory_1.factory)({\n  eventEmitter: impl.eventEmitter,\n  init: impl.init.bind(impl),\n  call: impl.call.bind(impl),\n  setTransports: impl.setTransports.bind(impl),\n  manifest: impl.manifest.bind(impl),\n  requestLogin: impl.requestLogin.bind(impl),\n  uiResponse: impl.uiResponse.bind(impl),\n  cancel: impl.cancel.bind(impl),\n  dispose: impl.dispose.bind(impl)\n});\n//# sourceMappingURL=core-in-popup.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}