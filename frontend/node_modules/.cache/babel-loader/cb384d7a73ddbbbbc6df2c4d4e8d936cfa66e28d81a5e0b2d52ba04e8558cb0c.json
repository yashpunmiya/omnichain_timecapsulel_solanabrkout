{"ast":null,"code":"import { AccountController } from '../controllers/AccountController.js';\nimport { BlockchainApiController } from '../controllers/BlockchainApiController.js';\nimport { ChainController } from '../controllers/ChainController.js';\nimport { ConnectionController } from '../controllers/ConnectionController.js';\nimport { ERC7811Utils } from './ERC7811Util.js';\n// -- Controller ---------------------------------------- //\nexport const SendApiUtil = {\n  async getMyTokensWithBalance(forceUpdate) {\n    const address = AccountController.state.address;\n    const caipNetwork = ChainController.state.activeCaipNetwork;\n    if (!address || !caipNetwork) {\n      return [];\n    }\n    // Extract EIP-155 specific logic\n    if (caipNetwork.chainNamespace === 'eip155') {\n      const eip155Balances = await this.getEIP155Balances(address, caipNetwork);\n      if (eip155Balances) {\n        return this.filterLowQualityTokens(eip155Balances);\n      }\n    }\n    // Fallback to 1Inch API\n    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);\n    return this.filterLowQualityTokens(response.balances);\n  },\n  async getEIP155Balances(address, caipNetwork) {\n    try {\n      const chainIdHex = ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId);\n      const walletCapabilities = await ConnectionController.getCapabilities(address);\n      if (!walletCapabilities?.[chainIdHex]?.['assetDiscovery']?.supported) {\n        return null;\n      }\n      const walletGetAssetsResponse = await ConnectionController.walletGetAssets({\n        account: address,\n        chainFilter: [chainIdHex]\n      });\n      if (!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse)) {\n        return null;\n      }\n      const assets = walletGetAssetsResponse[chainIdHex] || [];\n      return assets.map(asset => ERC7811Utils.createBalance(asset, caipNetwork.caipNetworkId));\n    } catch (error) {\n      return null;\n    }\n  },\n  /**\n   * The 1Inch API includes many low-quality tokens in the balance response,\n   * which appear inconsistently. This filter prevents them from being displayed.\n   */\n  filterLowQualityTokens(balances) {\n    return balances.filter(balance => balance.quantity.decimals !== '0');\n  },\n  mapBalancesToSwapTokens(balances) {\n    return balances?.map(token => ({\n      ...token,\n      address: token?.address ? token.address : ChainController.getActiveNetworkTokenAddress(),\n      decimals: parseInt(token.quantity.decimals, 10),\n      logoUri: token.iconUrl,\n      eip2612: false\n    })) || [];\n  }\n};\n//# sourceMappingURL=SendApiUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}