{"ast":null,"code":"import { proxy } from 'valtio/vanilla';\nimport { ApiController } from '../controllers/ApiController.js';\nimport { AssetController } from '../controllers/AssetController.js';\nconst namespaceImageIds = {\n  // Ethereum\n  eip155: 'ba0ba0cd-17c6-4806-ad93-f9d174f17900',\n  // Solana\n  solana: 'a1b58899-f671-4276-6a5e-56ca5bd59700',\n  // Polkadot\n  polkadot: '',\n  // Bitcoin\n  bip122: '0b4838db-0161-4ffe-022d-532bf03dba00'\n};\n// -- State --------------------------------------------- //\nconst state = proxy({\n  networkImagePromises: {}\n});\n// -- Util ---------------------------------------- //\nexport const AssetUtil = {\n  async fetchWalletImage(imageId) {\n    if (!imageId) {\n      return undefined;\n    }\n    await ApiController._fetchWalletImage(imageId);\n    return this.getWalletImageById(imageId);\n  },\n  async fetchNetworkImage(imageId) {\n    if (!imageId) {\n      return undefined;\n    }\n    const existingImage = this.getNetworkImageById(imageId);\n    // Check if the image already exists\n    if (existingImage) {\n      return existingImage;\n    }\n    // Check if the promise is already created\n    if (!state.networkImagePromises[imageId]) {\n      state.networkImagePromises[imageId] = ApiController._fetchNetworkImage(imageId);\n    }\n    await state.networkImagePromises[imageId];\n    return this.getNetworkImageById(imageId);\n  },\n  getWalletImageById(imageId) {\n    if (!imageId) {\n      return undefined;\n    }\n    return AssetController.state.walletImages[imageId];\n  },\n  getWalletImage(wallet) {\n    if (wallet?.image_url) {\n      return wallet?.image_url;\n    }\n    if (wallet?.image_id) {\n      return AssetController.state.walletImages[wallet.image_id];\n    }\n    return undefined;\n  },\n  getNetworkImage(network) {\n    if (network?.assets?.imageUrl) {\n      return network?.assets?.imageUrl;\n    }\n    if (network?.assets?.imageId) {\n      return AssetController.state.networkImages[network.assets.imageId];\n    }\n    return undefined;\n  },\n  getNetworkImageById(imageId) {\n    if (!imageId) {\n      return undefined;\n    }\n    return AssetController.state.networkImages[imageId];\n  },\n  getConnectorImage(connector) {\n    if (connector?.imageUrl) {\n      return connector.imageUrl;\n    }\n    if (connector?.imageId) {\n      return AssetController.state.connectorImages[connector.imageId];\n    }\n    return undefined;\n  },\n  getChainImage(chain) {\n    return AssetController.state.networkImages[namespaceImageIds[chain]];\n  }\n};\n//# sourceMappingURL=AssetUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}