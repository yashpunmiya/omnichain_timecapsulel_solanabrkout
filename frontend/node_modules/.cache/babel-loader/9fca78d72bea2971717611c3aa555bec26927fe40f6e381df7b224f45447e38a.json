{"ast":null,"code":"/**\n * EvEmitter v2.1.1\n * Lil' event emitter\n * MIT License\n */\n\n(function (global, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n})(typeof window != 'undefined' ? window : this, function () {\n  function EvEmitter() {}\n  let proto = EvEmitter.prototype;\n  proto.on = function (eventName, listener) {\n    if (!eventName || !listener) return this;\n\n    // set events hash\n    let events = this._events = this._events || {};\n    // set listeners array\n    let listeners = events[eventName] = events[eventName] || [];\n    // only add once\n    if (!listeners.includes(listener)) {\n      listeners.push(listener);\n    }\n    return this;\n  };\n  proto.once = function (eventName, listener) {\n    if (!eventName || !listener) return this;\n\n    // add event\n    this.on(eventName, listener);\n    // set once flag\n    // set onceEvents hash\n    let onceEvents = this._onceEvents = this._onceEvents || {};\n    // set onceListeners object\n    let onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};\n    // set flag\n    onceListeners[listener] = true;\n    return this;\n  };\n  proto.off = function (eventName, listener) {\n    let listeners = this._events && this._events[eventName];\n    if (!listeners || !listeners.length) return this;\n    let index = listeners.indexOf(listener);\n    if (index != -1) {\n      listeners.splice(index, 1);\n    }\n    return this;\n  };\n  proto.emitEvent = function (eventName, args) {\n    let listeners = this._events && this._events[eventName];\n    if (!listeners || !listeners.length) return this;\n\n    // copy over to avoid interference if .off() in listener\n    listeners = listeners.slice(0);\n    args = args || [];\n    // once stuff\n    let onceListeners = this._onceEvents && this._onceEvents[eventName];\n    for (let listener of listeners) {\n      let isOnce = onceListeners && onceListeners[listener];\n      if (isOnce) {\n        // remove listener\n        // remove before trigger to prevent recursion\n        this.off(eventName, listener);\n        // unset once flag\n        delete onceListeners[listener];\n      }\n      // trigger listener\n      listener.apply(this, args);\n    }\n    return this;\n  };\n  proto.allOff = function () {\n    delete this._events;\n    delete this._onceEvents;\n    return this;\n  };\n  return EvEmitter;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}