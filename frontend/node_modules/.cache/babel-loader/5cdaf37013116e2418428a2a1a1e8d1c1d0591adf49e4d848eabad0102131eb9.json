{"ast":null,"code":"import { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js';\nimport { gasPerPubdataDefault } from './constants/number.js';\nimport { assertEip712Transaction } from './utils/assertEip712Transaction.js';\nimport { isEIP712Transaction } from './utils/isEip712Transaction.js';\nexport function serializeTransaction(transaction, signature) {\n  if (isEIP712Transaction(transaction)) return serializeTransactionEIP712(transaction);\n  return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n  transaction: serializeTransaction\n};\nfunction serializeTransactionEIP712(transaction) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data\n  } = transaction;\n  assertEip712Transaction(transaction);\n  const serializedTransaction = [nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', toHex(chainId), toHex(''), toHex(''), toHex(chainId), from ?? '0x', gasPerPubdata ? toHex(gasPerPubdata) : toHex(gasPerPubdataDefault), factoryDeps ?? [], customSignature ?? '0x',\n  // EIP712 signature\n  paymaster && paymasterInput ? [paymaster, paymasterInput] : []];\n  return concatHex(['0x71', toRlp(serializedTransaction)]);\n}\n//# sourceMappingURL=serializers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}