{"ast":null,"code":"export function withTimeout(fn, {\n  errorInstance = new Error('timed out'),\n  timeout,\n  signal\n}) {\n  return new Promise((resolve, reject) => {\n    ;\n    (async () => {\n      let timeoutId;\n      try {\n        const controller = new AbortController();\n        if (timeout > 0) {\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort();\n            } else {\n              reject(errorInstance);\n            }\n          }, timeout); // need to cast because bun globals.d.ts overrides @types/node\n        }\n        resolve(await fn({\n          signal: controller?.signal || null\n        }));\n      } catch (err) {\n        if (err?.name === 'AbortError') reject(errorInstance);\n        reject(err);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    })();\n  });\n}\n//# sourceMappingURL=withTimeout.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}