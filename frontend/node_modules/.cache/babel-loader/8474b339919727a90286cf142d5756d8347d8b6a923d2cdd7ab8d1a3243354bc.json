{"ast":null,"code":"import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into signature format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in signature format.\n *\n * @example\n * compactSignatureToSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * //   v: 27n\n * // }\n */\nexport function compactSignatureToSignature({\n  r,\n  yParityAndS\n}) {\n  const yParityAndS_bytes = hexToBytes(yParityAndS);\n  const yParity = yParityAndS_bytes[0] & 0x80 ? 1 : 0;\n  const s = yParityAndS_bytes;\n  if (yParity === 1) s[0] &= 0x7f;\n  return {\n    r,\n    s: bytesToHex(s),\n    yParity\n  };\n}\n//# sourceMappingURL=compactSignatureToSignature.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}