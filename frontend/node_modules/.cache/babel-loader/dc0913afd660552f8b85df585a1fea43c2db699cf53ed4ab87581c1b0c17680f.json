{"ast":null,"code":"import { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\n/**\n * Executes a transaction regardless of the signature.\n *\n * - Docs: https://viem.sh/docs/actions/test/sendUnsignedTransaction#sendunsignedtransaction\n *\n * @param client - Client to use\n * @param parameters – {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction(client, args) {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args;\n  const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n  const format = chainFormat || formatTransactionRequest;\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, {\n      format: chainFormat\n    }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value\n  });\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request]\n  });\n  return hash;\n}","map":{"version":3,"names":["extract","formatTransactionRequest","sendUnsignedTransaction","client","args","accessList","data","from","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","chainFormat","chain","formatters","transactionRequest","format","request","hash","method","params"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\test\\sendUnsignedTransaction.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\n\nexport type SendUnsignedTransactionParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<chain>\n\nexport type SendUnsignedTransactionReturnType = Hash\n\nexport type SendUnsignedTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Executes a transaction regardless of the signature.\n *\n * - Docs: https://viem.sh/docs/actions/test/sendUnsignedTransaction#sendunsignedtransaction\n *\n * @param client - Client to use\n * @param parameters – {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, chain, account, false>,\n  args: SendUnsignedTransactionParameters<chain>,\n): Promise<SendUnsignedTransactionReturnType> {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  const chainFormat = client.chain?.formatters?.transactionRequest?.format\n  const format = chainFormat || formatTransactionRequest\n\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, { format: chainFormat }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n  } as TransactionRequest)\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request],\n  })\n  return hash\n}\n"],"mappings":"AAWA,SAASA,OAAO,QAAQ,mCAAmC;AAC3D,SAEEC,wBAAwB,QACnB,8CAA8C;AAUrD;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,uBAAuBA,CAI3CC,MAAoE,EACpEC,IAA8C;EAE9C,MAAM;IACJC,UAAU;IACVC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,EAAE;IACFC,KAAK;IACL,GAAGC;EAAI,CACR,GAAGX,IAAI;EAER,MAAMY,WAAW,GAAGb,MAAM,CAACc,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;EACxE,MAAMA,MAAM,GAAGJ,WAAW,IAAIf,wBAAwB;EAEtD,MAAMoB,OAAO,GAAGD,MAAM,CAAC;IACrB;IACA,GAAGpB,OAAO,CAACe,IAAI,EAAE;MAAEK,MAAM,EAAEJ;IAAW,CAAE,CAAC;IACzCX,UAAU;IACVC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,EAAE;IACFC;GACqB,CAAC;EACxB,MAAMQ,IAAI,GAAG,MAAMnB,MAAM,CAACkB,OAAO,CAAC;IAChCE,MAAM,EAAE,6BAA6B;IACrCC,MAAM,EAAE,CAACH,OAAO;GACjB,CAAC;EACF,OAAOC,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}