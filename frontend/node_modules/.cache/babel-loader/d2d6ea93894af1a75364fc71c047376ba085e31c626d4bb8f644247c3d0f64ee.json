{"ast":null,"code":"import { concat } from '../data/concat.js';\nimport { stringToBytes, toBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { encodedLabelToLabelhash } from './encodedLabelToLabelhash.js';\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nexport function namehash(name) {\n  let result = new Uint8Array(32).fill(0);\n  if (!name) return bytesToHex(result);\n  const labels = name.split('.');\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i]);\n    const hashed = hashFromEncodedLabel ? toBytes(hashFromEncodedLabel) : keccak256(stringToBytes(labels[i]), 'bytes');\n    result = keccak256(concat([result, hashed]), 'bytes');\n  }\n  return bytesToHex(result);\n}","map":{"version":3,"names":["concat","stringToBytes","toBytes","bytesToHex","keccak256","encodedLabelToLabelhash","namehash","name","result","Uint8Array","fill","labels","split","i","length","hashFromEncodedLabel","hashed"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\ens\\namehash.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  type ToBytesErrorType,\n  stringToBytes,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type NamehashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | ToBytesErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ConcatErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nexport function namehash(name: string) {\n  let result = new Uint8Array(32).fill(0) as ByteArray\n  if (!name) return bytesToHex(result)\n\n  const labels = name.split('.')\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i])\n    const hashed = hashFromEncodedLabel\n      ? toBytes(hashFromEncodedLabel)\n      : keccak256(stringToBytes(labels[i]), 'bytes')\n    result = keccak256(concat([result, hashed]), 'bytes')\n  }\n\n  return bytesToHex(result)\n}\n"],"mappings":"AAEA,SAA+BA,MAAM,QAAQ,mBAAmB;AAChE,SAGEC,aAAa,EACbC,OAAO,QACF,wBAAwB;AAC/B,SAAmCC,UAAU,QAAQ,sBAAsB;AAC3E,SAAkCC,SAAS,QAAQ,sBAAsB;AACzE,SAEEC,uBAAuB,QAClB,8BAA8B;AAWrC;;;;;;;;;;;AAWA,OAAM,SAAUC,QAAQA,CAACC,IAAY;EACnC,IAAIC,MAAM,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAc;EACpD,IAAI,CAACH,IAAI,EAAE,OAAOJ,UAAU,CAACK,MAAM,CAAC;EAEpC,MAAMG,MAAM,GAAGJ,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC;EAC9B;EACA,KAAK,IAAIC,CAAC,GAAGF,MAAM,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC9C,MAAME,oBAAoB,GAAGV,uBAAuB,CAACM,MAAM,CAACE,CAAC,CAAC,CAAC;IAC/D,MAAMG,MAAM,GAAGD,oBAAoB,GAC/Bb,OAAO,CAACa,oBAAoB,CAAC,GAC7BX,SAAS,CAACH,aAAa,CAACU,MAAM,CAACE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;IAChDL,MAAM,GAAGJ,SAAS,CAACJ,MAAM,CAAC,CAACQ,MAAM,EAAEQ,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC;EACvD;EAEA,OAAOb,UAAU,CAACK,MAAM,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}