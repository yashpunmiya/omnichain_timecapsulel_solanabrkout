{"ast":null,"code":"import { InvalidLegacyVError } from '../../errors/transaction.js';\nimport { blobsToCommitments } from '../blob/blobsToCommitments.js';\nimport { blobsToProofs } from '../blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes } from '../blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars } from '../blob/toBlobSidecars.js';\nimport { concatHex } from '../data/concat.js';\nimport { trim } from '../data/trim.js';\nimport { bytesToHex, toHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { serializeAuthorizationList } from '../../experimental/eip7702/utils/serializeAuthorizationList.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionEIP4844, assertTransactionEIP7702, assertTransactionLegacy } from './assertTransaction.js';\nimport { getTransactionType } from './getTransactionType.js';\nimport { serializeAccessList } from './serializeAccessList.js';\nexport function serializeTransaction(transaction, signature) {\n  const type = getTransactionType(transaction);\n  if (type === 'eip1559') return serializeTransactionEIP1559(transaction, signature);\n  if (type === 'eip2930') return serializeTransactionEIP2930(transaction, signature);\n  if (type === 'eip4844') return serializeTransactionEIP4844(transaction, signature);\n  if (type === 'eip7702') return serializeTransactionEIP7702(transaction, signature);\n  return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP7702(transaction, signature) {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP7702(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedAuthorizationList = serializeAuthorizationList(authorizationList);\n  return concatHex(['0x04', toRlp([toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, serializedAuthorizationList, ...toYParitySignatureArray(transaction, signature)])]);\n}\nfunction serializeTransactionEIP4844(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP4844(transaction);\n  let blobVersionedHashes = transaction.blobVersionedHashes;\n  let sidecars = transaction.sidecars;\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (transaction.blobs && (typeof blobVersionedHashes === 'undefined' || typeof sidecars === 'undefined')) {\n    const blobs = typeof transaction.blobs[0] === 'string' ? transaction.blobs : transaction.blobs.map(x => bytesToHex(x));\n    const kzg = transaction.kzg;\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg\n    });\n    if (typeof blobVersionedHashes === 'undefined') blobVersionedHashes = commitmentsToVersionedHashes({\n      commitments\n    });\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({\n        blobs,\n        commitments,\n        kzg\n      });\n      sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs\n      });\n    }\n  }\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x', blobVersionedHashes ?? [], ...toYParitySignatureArray(transaction, signature)];\n  const blobs = [];\n  const commitments = [];\n  const proofs = [];\n  if (sidecars) for (let i = 0; i < sidecars.length; i++) {\n    const {\n      blob,\n      commitment,\n      proof\n    } = sidecars[i];\n    blobs.push(blob);\n    commitments.push(commitment);\n    proofs.push(proof);\n  }\n  return concatHex(['0x03', sidecars ?\n  // If sidecars are enabled, envelope turns into a \"wrapper\":\n  toRlp([serializedTransaction, blobs, commitments, proofs]) :\n  // If sidecars are disabled, standard envelope is used:\n  toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP1559(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x02', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    accessList,\n    gasPrice\n  } = transaction;\n  assertTransactionEIP2930(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x01', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice\n  } = transaction;\n  assertTransactionLegacy(transaction);\n  let serializedTransaction = [nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x'];\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n;\n        if (inferredChainId > 0) return signature.v;\n        return 27n + (signature.v === 35n ? 0n : 1n);\n      }\n      // EIP-155 (explicit chainId)\n      if (chainId > 0) return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n);\n      if (signature.v !== v) throw new InvalidLegacyVError({\n        v: signature.v\n      });\n      return v;\n    })();\n    const r = trim(signature.r);\n    const s = trim(signature.s);\n    serializedTransaction = [...serializedTransaction, toHex(v), r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s];\n  } else if (chainId > 0) {\n    serializedTransaction = [...serializedTransaction, toHex(chainId), '0x', '0x'];\n  }\n  return toRlp(serializedTransaction);\n}\nexport function toYParitySignatureArray(transaction, signature_) {\n  const signature = signature_ ?? transaction;\n  const {\n    v,\n    yParity\n  } = signature;\n  if (typeof signature.r === 'undefined') return [];\n  if (typeof signature.s === 'undefined') return [];\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return [];\n  const r = trim(signature.r);\n  const s = trim(signature.s);\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? toHex(1) : '0x';\n    if (v === 0n) return '0x';\n    if (v === 1n) return toHex(1);\n    return v === 27n ? '0x' : toHex(1);\n  })();\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s];\n}","map":{"version":3,"names":["InvalidLegacyVError","blobsToCommitments","blobsToProofs","commitmentsToVersionedHashes","toBlobSidecars","concatHex","trim","bytesToHex","toHex","toRlp","serializeAuthorizationList","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionEIP4844","assertTransactionEIP7702","assertTransactionLegacy","getTransactionType","serializeAccessList","serializeTransaction","transaction","signature","type","serializeTransactionEIP1559","serializeTransactionEIP2930","serializeTransactionEIP4844","serializeTransactionEIP7702","serializeTransactionLegacy","authorizationList","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","data","serializedAccessList","serializedAuthorizationList","toYParitySignatureArray","maxFeePerBlobGas","blobVersionedHashes","sidecars","blobs","map","x","kzg","commitments","proofs","serializedTransaction","i","length","blob","commitment","proof","push","gasPrice","v","inferredChainId","BigInt","r","s","signature_","yParity","yParity_"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\transaction\\serializeTransaction.ts"],"sourcesContent":["import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ByteArray,\n  Hex,\n  Signature,\n  SignatureLegacy,\n} from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from '../blob/blobsToCommitments.js'\nimport {\n  blobsToProofs,\n  type blobsToProofsErrorType,\n} from '../blob/blobsToProofs.js'\nimport {\n  type CommitmentsToVersionedHashesErrorType,\n  commitmentsToVersionedHashes,\n} from '../blob/commitmentsToVersionedHashes.js'\nimport {\n  type ToBlobSidecarsErrorType,\n  toBlobSidecars,\n} from '../blob/toBlobSidecars.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport { type ToHexErrorType, bytesToHex, toHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type SerializeAuthorizationListErrorType,\n  serializeAuthorizationList,\n} from '../../experimental/eip7702/utils/serializeAuthorizationList.js'\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionEIP7702ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionEIP7702,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransactionTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  transaction extends TransactionSerializable = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n> = TransactionSerialized<_transactionType>\n\nexport type SerializeTransactionFn<\n  transaction extends TransactionSerializableGeneric = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = never,\n> = typeof serializeTransaction<\n  OneOf<TransactionSerializable | transaction>,\n  _transactionType\n>\n\nexport type SerializeTransactionErrorType =\n  | GetTransactionTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionEIP4844ErrorType\n  | SerializeTransactionEIP7702ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  transaction: transaction,\n  signature?: Signature | undefined,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip4844')\n    return serializeTransactionEIP4844(\n      transaction as TransactionSerializableEIP4844,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip7702')\n    return serializeTransactionEIP7702(\n      transaction as TransactionSerializableEIP7702,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature as SignatureLegacy,\n  ) as SerializedTransactionReturnType<transaction>\n}\n\ntype SerializeTransactionEIP7702ErrorType =\n  | AssertTransactionEIP7702ErrorType\n  | SerializeAuthorizationListErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP7702 {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP7702(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n  const serializedAuthorizationList =\n    serializeAuthorizationList(authorizationList)\n\n  return concatHex([\n    '0x04',\n    toRlp([\n      toHex(chainId),\n      nonce ? toHex(nonce) : '0x',\n      maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n      maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n      gas ? toHex(gas) : '0x',\n      to ?? '0x',\n      value ? toHex(value) : '0x',\n      data ?? '0x',\n      serializedAccessList,\n      serializedAuthorizationList,\n      ...toYParitySignatureArray(transaction, signature),\n    ]),\n  ]) as TransactionSerializedEIP7702\n}\n\ntype SerializeTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | BlobsToCommitmentsErrorType\n  | CommitmentsToVersionedHashesErrorType\n  | blobsToProofsErrorType\n  | ToBlobSidecarsErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP4844 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP4844(transaction)\n\n  let blobVersionedHashes = transaction.blobVersionedHashes\n  let sidecars = transaction.sidecars\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (\n    transaction.blobs &&\n    (typeof blobVersionedHashes === 'undefined' ||\n      typeof sidecars === 'undefined')\n  ) {\n    const blobs = (\n      typeof transaction.blobs[0] === 'string'\n        ? transaction.blobs\n        : (transaction.blobs as ByteArray[]).map((x) => bytesToHex(x))\n    ) as Hex[]\n    const kzg = transaction.kzg!\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg,\n    })\n\n    if (typeof blobVersionedHashes === 'undefined')\n      blobVersionedHashes = commitmentsToVersionedHashes({\n        commitments,\n      })\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      sidecars = toBlobSidecars({ blobs, commitments, proofs })\n    }\n  }\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...toYParitySignatureArray(transaction, signature),\n  ] as const\n\n  const blobs: Hex[] = []\n  const commitments: Hex[] = []\n  const proofs: Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return concatHex([\n    '0x03',\n    sidecars\n      ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n        toRlp([serializedTransaction, blobs, commitments, proofs])\n      : // If sidecars are disabled, standard envelope is used:\n        toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP4844\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: SignatureLegacy | undefined,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    const r = trim(signature.r)\n    const s = trim(signature.s)\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v),\n      r === '0x00' ? '0x' : r,\n      s === '0x00' ? '0x' : s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy\n}\n\nexport function toYParitySignatureArray(\n  transaction: TransactionSerializableGeneric,\n  signature_?: Signature | undefined,\n) {\n  const signature = signature_ ?? transaction\n  const { v, yParity } = signature\n\n  if (typeof signature.r === 'undefined') return []\n  if (typeof signature.s === 'undefined') return []\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return []\n\n  const r = trim(signature.r)\n  const s = trim(signature.s)\n\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? toHex(1) : '0x'\n    if (v === 0n) return '0x'\n    if (v === 1n) return toHex(1)\n\n    return v === 27n ? '0x' : toHex(1)\n  })()\n\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}