{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { withResolvers } from '../../utils/promise/withResolvers.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { getCallsStatus } from './getCallsStatus.js';\n/**\n * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/waitForCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForCallsStatusParameters}\n * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { waitForCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function waitForCallsStatus(client, parameters) {\n  const {\n    id,\n    pollingInterval = client.pollingInterval,\n    status = ({\n      statusCode\n    }) => statusCode >= 200,\n    timeout = 60_000\n  } = parameters;\n  const observerId = stringify(['waitForCallsStatus', client.uid, id]);\n  const {\n    promise,\n    resolve,\n    reject\n  } = withResolvers();\n  let timer = undefined;\n  const unobserve = observe(observerId, {\n    resolve,\n    reject\n  }, emit => {\n    const unpoll = poll(async () => {\n      const done = fn => {\n        clearTimeout(timer);\n        unpoll();\n        fn();\n        unobserve();\n      };\n      try {\n        const result = await getCallsStatus(client, {\n          id\n        });\n        if (!status(result)) return;\n        done(() => emit.resolve(result));\n      } catch (error) {\n        done(() => emit.reject(error));\n      }\n    }, {\n      interval: pollingInterval,\n      emitOnBegin: true\n    });\n    return unpoll;\n  });\n  timer = timeout ? setTimeout(() => {\n    unobserve();\n    clearTimeout(timer);\n    reject(new WaitForCallsStatusTimeoutError({\n      id\n    }));\n  }, timeout) : undefined;\n  return await promise;\n}\nexport class WaitForCallsStatusTimeoutError extends BaseError {\n  constructor({\n    id\n  }) {\n    super(`Timed out while waiting for call bundle with id \"${id}\" to be confirmed.`, {\n      name: 'WaitForCallsStatusTimeoutError'\n    });\n  }\n}\n//# sourceMappingURL=waitForCallsStatus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}