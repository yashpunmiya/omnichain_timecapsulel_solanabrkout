{"ast":null,"code":"import { isHexString } from './internal.js';\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input) {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBytes = function (input) {\n  if (!(input instanceof Uint8Array)) {\n    const msg = `This method only supports Uint8Array but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};","map":{"version":3,"names":["isHexString","assertIsHexString","input","msg","Error","assertIsBytes","Uint8Array","assertIsArray","Array","isArray","assertIsString"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\helpers.ts"],"sourcesContent":["import { isHexString } from './internal.js'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBytes = function (input: Uint8Array): void {\n  if (!(input instanceof Uint8Array)) {\n    const msg = `This method only supports Uint8Array but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAE3C;;;;AAIA,OAAO,MAAMC,iBAAiB,GAAG,SAAAA,CAAUC,KAAa;EACtD,IAAI,CAACF,WAAW,CAACE,KAAK,CAAC,EAAE;IACvB,MAAMC,GAAG,GAAG,oEAAoED,KAAK,EAAE;IACvF,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AAED;;;;AAIA,OAAO,MAAME,aAAa,GAAG,SAAAA,CAAUH,KAAiB;EACtD,IAAI,EAAEA,KAAK,YAAYI,UAAU,CAAC,EAAE;IAClC,MAAMH,GAAG,GAAG,uDAAuDD,KAAK,EAAE;IAC1E,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AAED;;;;AAIA,OAAO,MAAMI,aAAa,GAAG,SAAAA,CAAUL,KAAe;EACpD,IAAI,CAACM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IACzB,MAAMC,GAAG,GAAG,0DAA0DD,KAAK,EAAE;IAC7E,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AAED;;;;AAIA,OAAO,MAAMO,cAAc,GAAG,SAAAA,CAAUR,KAAa;EACnD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAMC,GAAG,GAAG,oDAAoDD,KAAK,EAAE;IACvE,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}