{"ast":null,"code":"import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar version = \"2.1.0\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction isStream(stream) {\n  return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\nfunction isWritableStream(stream) {\n  return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\nfunction isReadableStream(stream) {\n  return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\nfunction isDuplexStream(stream) {\n  return isWritableStream(stream) && isReadableStream(stream);\n}\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: () => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: method => `'args.logger' must include required method '${method}'.`\n  },\n  info: {\n    connected: chainId => `Torus: Connected to chain with ID \"${chainId}\".`\n  },\n  warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`\n};\nvar log = loglevel.getLogger(\"solana-embed\");\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req\n      });\n    }\n    next(done => {\n      const {\n        error\n      } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error) {\n    const e = error;\n    return e && (\n    // everything except Firefox\n    e.code === 22 ||\n    // Firefox\n    e.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" ||\n    // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\n/**\n * popup handler utils\n */\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\nclass BaseProvider extends SafeEventEmitter {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n    /**\n     * Indicating that this provider is a Torus provider.\n     */\n    _defineProperty(this, \"isTorus\", void 0);\n    _defineProperty(this, \"_rpcEngine\", void 0);\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n    _defineProperty(this, \"_state\", void 0);\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\"));\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\"));\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nfunction isLegacyTransactionInstance(transaction) {\n  return transaction.version === undefined;\n}\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features,\n      timeout = 30000\n    } = _ref;\n    super();\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"features\", void 0);\n    _defineProperty(this, \"window\", void 0);\n    _defineProperty(this, \"windowTimer\", void 0);\n    _defineProperty(this, \"iClosedWindow\", void 0);\n    _defineProperty(this, \"timeout\", void 0);\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this.timeout = timeout;\n    this._setupTimer();\n  }\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n        setTimeout(() => {\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }, this.timeout);\n      }\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n  open() {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    });\n\n    // private state\n    _defineProperty(this, \"embedTranslations\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"windowRefs\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    this._state = _objectSpread({}, TorusCommunicationProvider._defaultState);\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n        // TODO: remove this method when wallet adds versioning and stops supporting this method\n      } else if (method === \"create_window\") {\n        const {\n          windowId,\n          url\n        } = params;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected() {\n    return this._state.isConnected;\n  }\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      });\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request({\n      method: \"opened_window\",\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n  getLogoUrl() {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\nclass TorusInPageProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    });\n\n    // private state\n    /**\n     * The chain ID of the currently connected Solana chain.\n     * See [chainId.network]{@link https://chainid.network} for more information.\n     */\n    _defineProperty(this, \"chainId\", void 0);\n    /**\n     * The user's currently selected Solana address.\n     * If null, Torus is either locked or the user has not permitted any\n     * addresses to be viewed.\n     */\n    _defineProperty(this, \"selectedAddress\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    this._state = _objectSpread({}, TorusInPageProvider._defaultState);\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      });\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", {\n        chainId\n      });\n      this._handleChainChanged({\n        chainId\n      });\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"isInitialized\", void 0);\n    _defineProperty(this, \"torusAlert\", void 0);\n    _defineProperty(this, \"modalZIndex\", void 0);\n    _defineProperty(this, \"alertZIndex\", void 0);\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"communicationProvider\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"isTopupHidden\", false);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    _defineProperty(this, \"styleLink\", void 0);\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {},\n      whiteLabel\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n    this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n    this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    return new Promise((resolve, reject) => {\n      try {\n        this.torusIframe.addEventListener(\"load\", async () => {\n          const dappMetadata = await getSiteMetadata();\n          // send init params here\n          this.torusIframe.contentWindow.postMessage({\n            buttonPosition,\n            apiKey,\n            network,\n            dappMetadata,\n            extraParams,\n            whiteLabel\n          }, torusIframeUrl.origin);\n          await this._setupWeb3({\n            torusUrl\n          });\n          if (showTorusButton) this.showTorusButton();\n          if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;else this.hideTorusButton();\n          this.isInitialized = true;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          window.torus = this;\n          resolve();\n        });\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? `/${path}` : \"\";\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n  async sendTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        isLegacyTransaction\n      }\n    });\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction, options) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        options,\n        isLegacyTransaction\n      }\n    });\n    return {\n      signature: response\n    };\n  }\n  async signTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    });\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n  async signAllTransactions(transactions) {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map(tx => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    });\n\n    // reconstruct signature pairs\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  handleDappStorageKey(useLocalStorage) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        _payload.params.windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          })\n          // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res))\n          // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return originalMethod.apply(this, [request, cb]);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"names":["_objectSpread","_defineProperty","PublicKey","createLoggerMiddleware","COMMUNICATION_JRPC_METHODS","COMMUNICATION_NOTIFICATIONS","PROVIDER_JRPC_METHODS","PROVIDER_NOTIFICATIONS","setAPIKey","SafeEventEmitter","ObjectMultiplex","createStreamMiddleware","JRPCEngine","createIdRemapMiddleware","getRpcPromiseCallback","BasePostMessageStream","ethErrors","EthereumRpcError","pump","loglevel","dequal","version","isStream","stream","pipe","isWritableStream","writable","_write","_writableState","isReadableStream","readable","_read","_readableState","isDuplexStream","messages","errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","configuration","supportedVerifierList","api","prodTorusUrl","localStorageKeyPrefix","log","getLogger","createErrorMiddleware","req","res","next","error","rpc","invalidRequest","message","data","done","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","getWindowId","Math","random","toString","slice","getTorusUrl","buildEnv","torusUrl","logLevel","getUserLanguage","userLanguage","window","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","setItem","removeItem","e","code","name","length","getPopupFeatures","_ref","w","h","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","BaseProvider","constructor","connectionStream","jsonRpcStreamName","Error","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","ignoreStream","jsonRpcConnection","createStream","rpcEngine","push","origin","location","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","params","Promise","resolve","reject","send","payload","callback","streamName","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","isLegacyTransactionInstance","transaction","PopupHandler","url","target","timeout","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","setTimeout","open","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","embedTranslations","windowRefs","on","isConnected","notificationHandler","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","addEventListener","GET_PROVIDER_STATE","initialized","_handleWindow","arguments","finalUrl","URL","hash","handledWindow","once","CLOSED_WINDOW","style","display","torusWidgetVisibility","buttonPosition","right","bottom","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","jsonRpcNotificationHandler","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","accounts","isUnlocked","isInternal","err","result","handle","isEthAccounts","finalAccounts","account","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","hostname","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","preLoadIframe","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","init","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","dappMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","body","login","loginProvider","provider","login_hint","loginWithPrivateKey","loginParams","privateKey","userInfo","success","logout","LOGOUT","cleanUp","clearInit","isElement","element","Element","Document","contains","setProvider","showWallet","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","walletWindow","getUserInfo","userInfoResponse","USER_INFO","initiateTopup","topupResponse","TOPUP","getAccounts","response","sendTransaction","isLegacyTransaction","serialize","requireAllSignatures","Buffer","signAndSendTransaction","options","signature","signTransaction","serializeMessage","messageOnly","parsed","JSON","parse","publicKey","addSignature","signAllTransactions","transactions","encodedMessage","map","tx","responses","signatures","item","idx","signMessage","getGaslessPublicKey","localStorageKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","providerFunc","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all","default"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js"],"sourcesContent":["import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar version = \"2.1.0\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction isStream(stream) {\n  return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\nfunction isWritableStream(stream) {\n  return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\nfunction isReadableStream(stream) {\n  return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\nfunction isDuplexStream(stream) {\n  return isWritableStream(stream) && isReadableStream(stream);\n}\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: () => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: method => `'args.logger' must include required method '${method}'.`\n  },\n  info: {\n    connected: chainId => `Torus: Connected to chain with ID \"${chainId}\".`\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req\n      });\n    }\n    next(done => {\n      const {\n        error\n      } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error) {\n    const e = error;\n    return e && (\n    // everything except Firefox\n    e.code === 22 ||\n    // Firefox\n    e.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" ||\n    // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\n/**\n * popup handler utils\n */\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nclass BaseProvider extends SafeEventEmitter {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n    /**\n     * Indicating that this provider is a Torus provider.\n     */\n    _defineProperty(this, \"isTorus\", void 0);\n    _defineProperty(this, \"_rpcEngine\", void 0);\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n    _defineProperty(this, \"_state\", void 0);\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\"));\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\"));\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n}\n\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nfunction isLegacyTransactionInstance(transaction) {\n  return transaction.version === undefined;\n}\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features,\n      timeout = 30000\n    } = _ref;\n    super();\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"features\", void 0);\n    _defineProperty(this, \"window\", void 0);\n    _defineProperty(this, \"windowTimer\", void 0);\n    _defineProperty(this, \"iClosedWindow\", void 0);\n    _defineProperty(this, \"timeout\", void 0);\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this.timeout = timeout;\n    this._setupTimer();\n  }\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n        setTimeout(() => {\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }, this.timeout);\n      }\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n  open() {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    });\n\n    // private state\n    _defineProperty(this, \"embedTranslations\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"windowRefs\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    this._state = _objectSpread({}, TorusCommunicationProvider._defaultState);\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n        // TODO: remove this method when wallet adds versioning and stops supporting this method\n      } else if (method === \"create_window\") {\n        const {\n          windowId,\n          url\n        } = params;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected() {\n    return this._state.isConnected;\n  }\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      });\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request({\n      method: \"opened_window\",\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n  getLogoUrl() {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nclass TorusInPageProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    });\n\n    // private state\n    /**\n     * The chain ID of the currently connected Solana chain.\n     * See [chainId.network]{@link https://chainid.network} for more information.\n     */\n    _defineProperty(this, \"chainId\", void 0);\n    /**\n     * The user's currently selected Solana address.\n     * If null, Torus is either locked or the user has not permitted any\n     * addresses to be viewed.\n     */\n    _defineProperty(this, \"selectedAddress\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    this._state = _objectSpread({}, TorusInPageProvider._defaultState);\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      });\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", {\n        chainId\n      });\n      this._handleChainChanged({\n        chainId\n      });\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"isInitialized\", void 0);\n    _defineProperty(this, \"torusAlert\", void 0);\n    _defineProperty(this, \"modalZIndex\", void 0);\n    _defineProperty(this, \"alertZIndex\", void 0);\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"communicationProvider\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"isTopupHidden\", false);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    _defineProperty(this, \"styleLink\", void 0);\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {},\n      whiteLabel\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n    this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n    this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    return new Promise((resolve, reject) => {\n      try {\n        this.torusIframe.addEventListener(\"load\", async () => {\n          const dappMetadata = await getSiteMetadata();\n          // send init params here\n          this.torusIframe.contentWindow.postMessage({\n            buttonPosition,\n            apiKey,\n            network,\n            dappMetadata,\n            extraParams,\n            whiteLabel\n          }, torusIframeUrl.origin);\n          await this._setupWeb3({\n            torusUrl\n          });\n          if (showTorusButton) this.showTorusButton();\n          if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;else this.hideTorusButton();\n          this.isInitialized = true;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          window.torus = this;\n          resolve();\n        });\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? `/${path}` : \"\";\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n  async sendTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        isLegacyTransaction\n      }\n    });\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction, options) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        options,\n        isLegacyTransaction\n      }\n    });\n    return {\n      signature: response\n    };\n  }\n  async signTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    });\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n  async signAllTransactions(transactions) {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map(tx => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    });\n\n    // reconstruct signature pairs\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  handleDappStorageKey(useLocalStorage) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        _payload.params.windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          })\n          // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res))\n          // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return originalMethod.apply(this, [request, cb]);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}