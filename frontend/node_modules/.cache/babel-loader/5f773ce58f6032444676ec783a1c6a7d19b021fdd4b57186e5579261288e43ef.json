{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegistryTypes = exports.RegistryType = void 0;\nclass RegistryType {\n  constructor(type, tag) {\n    this.type = type;\n    this.tag = tag;\n    this.getTag = () => this.tag;\n    this.getType = () => this.type;\n  }\n}\nexports.RegistryType = RegistryType;\nexports.RegistryTypes = {\n  UUID: new RegistryType('uuid', 37),\n  BYTES: new RegistryType('bytes', undefined),\n  CRYPTO_HDKEY: new RegistryType('crypto-hdkey', 303),\n  CRYPTO_KEYPATH: new RegistryType('crypto-keypath', 304),\n  CRYPTO_COIN_INFO: new RegistryType('crypto-coin-info', 305),\n  CRYPTO_ECKEY: new RegistryType('crypto-eckey', 306),\n  CRYPTO_OUTPUT: new RegistryType('crypto-output', 308),\n  CRYPTO_PSBT: new RegistryType('crypto-psbt', 310),\n  CRYPTO_ACCOUNT: new RegistryType('crypto-account', 311),\n  CRYPTO_MULTI_ACCOUNTS: new RegistryType(\"crypto-multi-accounts\", 1103),\n  QR_HARDWARE_CALL: new RegistryType(\"qr-hardware-call\", 1201),\n  KEY_DERIVATION_CALL: new RegistryType(\"key-derivation-call\", 1301),\n  KEY_DERIVATION_SCHEMA: new RegistryType(\"key-derivation-schema\", 1302)\n};","map":{"version":3,"names":["RegistryType","constructor","type","tag","getTag","getType","exports","RegistryTypes","UUID","BYTES","undefined","CRYPTO_HDKEY","CRYPTO_KEYPATH","CRYPTO_COIN_INFO","CRYPTO_ECKEY","CRYPTO_OUTPUT","CRYPTO_PSBT","CRYPTO_ACCOUNT","CRYPTO_MULTI_ACCOUNTS","QR_HARDWARE_CALL","KEY_DERIVATION_CALL","KEY_DERIVATION_SCHEMA"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry-sol\\node_modules\\@keystonehq\\bc-ur-registry\\src\\RegistryType.ts"],"sourcesContent":["// cbor registry types: https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md\n// Map<name, tag>\n\nexport class RegistryType {\n  constructor(private type: string, private tag?: number) {}\n  getTag = () => this.tag;\n  getType = () => this.type;\n}\n\nexport const RegistryTypes = {\n  UUID: new RegistryType('uuid', 37),\n  BYTES: new RegistryType('bytes', undefined),\n  CRYPTO_HDKEY: new RegistryType('crypto-hdkey', 303),\n  CRYPTO_KEYPATH: new RegistryType('crypto-keypath', 304),\n  CRYPTO_COIN_INFO: new RegistryType('crypto-coin-info', 305),\n  CRYPTO_ECKEY: new RegistryType('crypto-eckey', 306),\n  CRYPTO_OUTPUT: new RegistryType('crypto-output', 308),\n  CRYPTO_PSBT: new RegistryType('crypto-psbt', 310),\n  CRYPTO_ACCOUNT: new RegistryType('crypto-account', 311),\n  CRYPTO_MULTI_ACCOUNTS: new RegistryType(\"crypto-multi-accounts\", 1103),\n  QR_HARDWARE_CALL: new RegistryType(\"qr-hardware-call\", 1201),\n  KEY_DERIVATION_CALL: new RegistryType(\"key-derivation-call\", 1301),\n  KEY_DERIVATION_SCHEMA: new RegistryType(\"key-derivation-schema\", 1302),\n};\n"],"mappings":";;;;;;AAGA,MAAaA,YAAY;EACvBC,YAAoBC,IAAY,EAAUC,GAAY;IAAlC,KAAAD,IAAI,GAAJA,IAAI;IAAkB,KAAAC,GAAG,GAAHA,GAAG;IAC7C,KAAAC,MAAM,GAAG,MAAM,IAAI,CAACD,GAAG;IACvB,KAAAE,OAAO,GAAG,MAAM,IAAI,CAACH,IAAI;EAFgC;;AAD3DI,OAAA,CAAAN,YAAA,GAAAA,YAAA;AAMaM,OAAA,CAAAC,aAAa,GAAG;EAC3BC,IAAI,EAAE,IAAIR,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC;EAClCS,KAAK,EAAE,IAAIT,YAAY,CAAC,OAAO,EAAEU,SAAS,CAAC;EAC3CC,YAAY,EAAE,IAAIX,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC;EACnDY,cAAc,EAAE,IAAIZ,YAAY,CAAC,gBAAgB,EAAE,GAAG,CAAC;EACvDa,gBAAgB,EAAE,IAAIb,YAAY,CAAC,kBAAkB,EAAE,GAAG,CAAC;EAC3Dc,YAAY,EAAE,IAAId,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC;EACnDe,aAAa,EAAE,IAAIf,YAAY,CAAC,eAAe,EAAE,GAAG,CAAC;EACrDgB,WAAW,EAAE,IAAIhB,YAAY,CAAC,aAAa,EAAE,GAAG,CAAC;EACjDiB,cAAc,EAAE,IAAIjB,YAAY,CAAC,gBAAgB,EAAE,GAAG,CAAC;EACvDkB,qBAAqB,EAAE,IAAIlB,YAAY,CAAC,uBAAuB,EAAE,IAAI,CAAC;EACtEmB,gBAAgB,EAAE,IAAInB,YAAY,CAAC,kBAAkB,EAAE,IAAI,CAAC;EAC5DoB,mBAAmB,EAAE,IAAIpB,YAAY,CAAC,qBAAqB,EAAE,IAAI,CAAC;EAClEqB,qBAAqB,EAAE,IAAIrB,YAAY,CAAC,uBAAuB,EAAE,IAAI;CACtE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}