{"ast":null,"code":"import UniversalProvider from '@walletconnect/universal-provider';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { W3mFrameRpcConstants } from '@reown/appkit-wallet/utils';\nimport { AccountController } from '../controllers/AccountController.js';\nimport { ChainController } from '../controllers/ChainController.js';\nimport { ConnectionController } from '../controllers/ConnectionController.js';\nimport { ConnectorController } from '../controllers/ConnectorController.js';\nimport { EventsController } from '../controllers/EventsController.js';\nimport { ModalController } from '../controllers/ModalController.js';\nimport { OptionsController } from '../controllers/OptionsController.js';\nimport { RouterController } from '../controllers/RouterController.js';\nimport { SnackController } from '../controllers/SnackController.js';\nimport { CoreHelperUtil } from './CoreHelperUtil.js';\n/**\n * SIWXUtil holds the methods to interact with the SIWX plugin and must be called internally on AppKit.\n */\nexport const SIWXUtil = {\n  getSIWX() {\n    return OptionsController.state.siwx;\n  },\n  async initializeIfEnabled() {\n    const siwx = OptionsController.state.siwx;\n    const caipAddress = ChainController.getActiveCaipAddress();\n    if (!(siwx && caipAddress)) {\n      return;\n    }\n    const [namespace, chainId, address] = caipAddress.split(':');\n    if (!ChainController.checkIfSupportedNetwork(namespace)) {\n      return;\n    }\n    try {\n      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);\n      if (sessions.length) {\n        return;\n      }\n      await ModalController.open({\n        view: 'SIWXSignMessage'\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('SIWXUtil:initializeIfEnabled', error);\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'SIWX_AUTH_ERROR',\n        properties: this.getSIWXEventProperties()\n      });\n      // eslint-disable-next-line no-console\n      await ConnectionController._getClient()?.disconnect().catch(console.error);\n      RouterController.reset('Connect');\n      SnackController.showError('A problem occurred while trying initialize authentication');\n    }\n  },\n  async requestSignMessage() {\n    const siwx = OptionsController.state.siwx;\n    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());\n    const network = ChainController.getActiveCaipNetwork();\n    const client = ConnectionController._getClient();\n    if (!siwx) {\n      throw new Error('SIWX is not enabled');\n    }\n    if (!address) {\n      throw new Error('No ActiveCaipAddress found');\n    }\n    if (!network) {\n      throw new Error('No ActiveCaipNetwork or client found');\n    }\n    if (!client) {\n      throw new Error('No ConnectionController client found');\n    }\n    try {\n      const siwxMessage = await siwx.createMessage({\n        chainId: network.caipNetworkId,\n        accountAddress: address\n      });\n      const message = siwxMessage.toString();\n      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);\n      if (connectorId === CommonConstantsUtil.CONNECTOR_ID.AUTH) {\n        RouterController.pushTransactionStack({\n          view: null,\n          goBack: false,\n          replace: true\n        });\n      }\n      const signature = await client.signMessage(message);\n      await siwx.addSession({\n        data: siwxMessage,\n        message,\n        signature: signature\n      });\n      ModalController.close();\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'SIWX_AUTH_SUCCESS',\n        properties: this.getSIWXEventProperties()\n      });\n    } catch (error) {\n      const properties = this.getSIWXEventProperties();\n      if (!ModalController.state.open || RouterController.state.view === 'ApproveTransaction') {\n        await ModalController.open({\n          view: 'SIWXSignMessage'\n        });\n      }\n      if (properties.isSmartAccount) {\n        SnackController.showError('This application might not support Smart Accounts');\n      } else {\n        SnackController.showError('Signature declined');\n      }\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'SIWX_AUTH_ERROR',\n        properties\n      });\n      // eslint-disable-next-line no-console\n      console.error('SWIXUtil:requestSignMessage', error);\n    }\n  },\n  async cancelSignMessage() {\n    try {\n      const siwx = this.getSIWX();\n      const isRequired = siwx?.getRequired?.();\n      if (isRequired) {\n        await ConnectionController.disconnect();\n      } else {\n        ModalController.close();\n      }\n      RouterController.reset('Connect');\n      EventsController.sendEvent({\n        event: 'CLICK_CANCEL_SIWX',\n        type: 'track',\n        properties: this.getSIWXEventProperties()\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('SIWXUtil:cancelSignMessage', error);\n    }\n  },\n  async getSessions() {\n    const siwx = OptionsController.state.siwx;\n    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());\n    const network = ChainController.getActiveCaipNetwork();\n    if (!(siwx && address && network)) {\n      return [];\n    }\n    return siwx.getSessions(network.caipNetworkId, address);\n  },\n  async isSIWXCloseDisabled() {\n    const siwx = this.getSIWX();\n    if (siwx) {\n      const isApproveSignScreen = RouterController.state.view === 'ApproveTransaction';\n      const isSiwxSignMessage = RouterController.state.view === 'SIWXSignMessage';\n      if (isApproveSignScreen || isSiwxSignMessage) {\n        return siwx.getRequired?.() && (await this.getSessions()).length === 0;\n      }\n    }\n    return false;\n  },\n  async universalProviderAuthenticate({\n    universalProvider,\n    chains,\n    methods\n  }) {\n    const siwx = SIWXUtil.getSIWX();\n    const namespaces = new Set(chains.map(chain => chain.split(':')[0]));\n    if (!siwx || namespaces.size !== 1 || !namespaces.has('eip155')) {\n      return false;\n    }\n    // Ignores chainId and account address to get other message data\n    const siwxMessage = await siwx.createMessage({\n      chainId: ChainController.getActiveCaipNetwork()?.caipNetworkId || '',\n      accountAddress: ''\n    });\n    const result = await universalProvider.authenticate({\n      nonce: siwxMessage.nonce,\n      domain: siwxMessage.domain,\n      uri: siwxMessage.uri,\n      exp: siwxMessage.expirationTime,\n      iat: siwxMessage.issuedAt,\n      nbf: siwxMessage.notBefore,\n      requestId: siwxMessage.requestId,\n      version: siwxMessage.version,\n      resources: siwxMessage.resources,\n      statement: siwxMessage.statement,\n      chainId: siwxMessage.chainId,\n      methods,\n      // The first chainId is what is used for universal provider to build the message\n      chains: [siwxMessage.chainId, ...chains.filter(chain => chain !== siwxMessage.chainId)]\n    });\n    SnackController.showLoading('Authenticating...', {\n      autoClose: false\n    });\n    AccountController.setConnectedWalletInfo({\n      ...result.session.peer.metadata,\n      name: result.session.peer.metadata.name,\n      icon: result.session.peer.metadata.icons?.[0],\n      type: 'WALLET_CONNECT'\n    }, Array.from(namespaces)[0]);\n    if (result?.auths?.length) {\n      const sessions = result.auths.map(cacao => {\n        const message = universalProvider.client.formatAuthMessage({\n          request: cacao.p,\n          iss: cacao.p.iss\n        });\n        return {\n          data: {\n            ...cacao.p,\n            accountAddress: cacao.p.iss.split(':').slice(-1).join(''),\n            chainId: cacao.p.iss.split(':').slice(2, 4).join(':'),\n            uri: cacao.p.aud,\n            version: cacao.p.version || siwxMessage.version,\n            expirationTime: cacao.p.exp,\n            issuedAt: cacao.p.iat,\n            notBefore: cacao.p.nbf\n          },\n          message,\n          signature: cacao.s.s,\n          cacao\n        };\n      });\n      try {\n        await siwx.setSessions(sessions);\n        EventsController.sendEvent({\n          type: 'track',\n          event: 'SIWX_AUTH_SUCCESS',\n          properties: SIWXUtil.getSIWXEventProperties()\n        });\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('SIWX:universalProviderAuth - failed to set sessions', error);\n        EventsController.sendEvent({\n          type: 'track',\n          event: 'SIWX_AUTH_ERROR',\n          properties: SIWXUtil.getSIWXEventProperties()\n        });\n        // eslint-disable-next-line no-console\n        await universalProvider.disconnect().catch(console.error);\n        throw error;\n      } finally {\n        SnackController.hide();\n      }\n    }\n    return true;\n  },\n  getSIWXEventProperties() {\n    return {\n      network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n      isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n    };\n  },\n  async clearSessions() {\n    const siwx = this.getSIWX();\n    if (siwx) {\n      await siwx.setSessions([]);\n    }\n  }\n};\n//# sourceMappingURL=SIWXUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}