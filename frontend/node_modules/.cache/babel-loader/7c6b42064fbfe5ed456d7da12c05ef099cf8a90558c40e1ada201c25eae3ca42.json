{"ast":null,"code":"export function withTimeout(fn, {\n  errorInstance = new Error('timed out'),\n  timeout,\n  signal\n}) {\n  return new Promise((resolve, reject) => {\n    ;\n    (async () => {\n      let timeoutId;\n      try {\n        const controller = new AbortController();\n        if (timeout > 0) {\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort();\n            } else {\n              reject(errorInstance);\n            }\n          }, timeout); // need to cast because bun globals.d.ts overrides @types/node\n        }\n        resolve(await fn({\n          signal: controller?.signal || null\n        }));\n      } catch (err) {\n        if (err?.name === 'AbortError') reject(errorInstance);\n        reject(err);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    })();\n  });\n}","map":{"version":3,"names":["withTimeout","fn","errorInstance","Error","timeout","signal","Promise","resolve","reject","timeoutId","controller","AbortController","setTimeout","abort","err","name","clearTimeout"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\promise\\withTimeout.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\n\nexport type WithTimeoutErrorType = ErrorType\n\nexport function withTimeout<data>(\n  fn: ({\n    signal,\n  }: { signal: AbortController['signal'] | null }) => Promise<data>,\n  {\n    errorInstance = new Error('timed out'),\n    timeout,\n    signal,\n  }: {\n    // The error instance to throw when the timeout is reached.\n    errorInstance?: Error | undefined\n    // The timeout (in ms).\n    timeout: number\n    // Whether or not the timeout should use an abort signal.\n    signal?: boolean | undefined\n  },\n): Promise<data> {\n  return new Promise((resolve, reject) => {\n    ;(async () => {\n      let timeoutId!: NodeJS.Timeout\n      try {\n        const controller = new AbortController()\n        if (timeout > 0) {\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort()\n            } else {\n              reject(errorInstance)\n            }\n          }, timeout) as NodeJS.Timeout // need to cast because bun globals.d.ts overrides @types/node\n        }\n        resolve(await fn({ signal: controller?.signal || null }))\n      } catch (err) {\n        if ((err as Error)?.name === 'AbortError') reject(errorInstance)\n        reject(err)\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    })()\n  })\n}\n"],"mappings":"AAIA,OAAM,SAAUA,WAAWA,CACzBC,EAEiE,EACjE;EACEC,aAAa,GAAG,IAAIC,KAAK,CAAC,WAAW,CAAC;EACtCC,OAAO;EACPC;AAAM,CAQP;EAED,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrC;IAAC,CAAC,YAAW;MACX,IAAIC,SAA0B;MAC9B,IAAI;QACF,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;QACxC,IAAIP,OAAO,GAAG,CAAC,EAAE;UACfK,SAAS,GAAGG,UAAU,CAAC,MAAK;YAC1B,IAAIP,MAAM,EAAE;cACVK,UAAU,CAACG,KAAK,EAAE;YACpB,CAAC,MAAM;cACLL,MAAM,CAACN,aAAa,CAAC;YACvB;UACF,CAAC,EAAEE,OAAO,CAAmB,EAAC;QAChC;QACAG,OAAO,CAAC,MAAMN,EAAE,CAAC;UAAEI,MAAM,EAAEK,UAAU,EAAEL,MAAM,IAAI;QAAI,CAAE,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZ,IAAKA,GAAa,EAAEC,IAAI,KAAK,YAAY,EAAEP,MAAM,CAACN,aAAa,CAAC;QAChEM,MAAM,CAACM,GAAG,CAAC;MACb,CAAC,SAAS;QACRE,YAAY,CAACP,SAAS,CAAC;MACzB;IACF,CAAC,EAAC,CAAE;EACN,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}