{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Record = Record;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../object/index\");\nconst index_2 = require(\"../never/index\");\nconst index_3 = require(\"../union/index\");\nconst index_4 = require(\"../template-literal/index\");\nconst index_5 = require(\"../patterns/index\");\nconst index_6 = require(\"../indexed/index\");\nconst index_7 = require(\"../symbols/index\");\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nconst value_1 = require(\"../guard/value\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// ------------------------------------------------------------------\n// RecordCreateFromPattern\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RecordCreateFromPattern(pattern, T, options) {\n  return (0, type_1.CreateType)({\n    [index_7.Kind]: 'Record',\n    type: 'object',\n    patternProperties: {\n      [pattern]: T\n    }\n  }, options);\n}\n// ------------------------------------------------------------------\n// RecordCreateFromKeys\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RecordCreateFromKeys(K, T, options) {\n  const Acc = {};\n  for (const K2 of K) Acc[K2] = T;\n  return (0, index_1.Object)(Acc, {\n    ...options,\n    [index_7.Hint]: 'Record'\n  });\n}\n// prettier-ignore\nfunction FromTemplateLiteralKey(K, T, options) {\n  return (0, index_4.IsTemplateLiteralFinite)(K) ? RecordCreateFromKeys((0, index_6.IndexPropertyKeys)(K), T, options) : RecordCreateFromPattern(K.pattern, T, options);\n}\n// prettier-ignore\nfunction FromUnionKey(K, T, options) {\n  return RecordCreateFromKeys((0, index_6.IndexPropertyKeys)((0, index_3.Union)(K)), T, options);\n}\n// prettier-ignore\nfunction FromLiteralKey(K, T, options) {\n  return RecordCreateFromKeys([K.toString()], T, options);\n}\n// prettier-ignore\nfunction FromRegExpKey(K, T, options) {\n  return RecordCreateFromPattern(K.source, T, options);\n}\n// prettier-ignore\nfunction FromStringKey(K, T, options) {\n  const pattern = (0, value_1.IsUndefined)(K.pattern) ? index_5.PatternStringExact : K.pattern;\n  return RecordCreateFromPattern(pattern, T, options);\n}\n// prettier-ignore\nfunction FromAnyKey(K, T, options) {\n  return RecordCreateFromPattern(index_5.PatternStringExact, T, options);\n}\n// prettier-ignore\nfunction FromNeverKey(K, T, options) {\n  return RecordCreateFromPattern(index_5.PatternNeverExact, T, options);\n}\n// prettier-ignore\nfunction FromIntegerKey(_, T, options) {\n  return RecordCreateFromPattern(index_5.PatternNumberExact, T, options);\n}\n// prettier-ignore\nfunction FromNumberKey(_, T, options) {\n  return RecordCreateFromPattern(index_5.PatternNumberExact, T, options);\n}\n// ------------------------------------------------------------------\n// TRecordOrObject\n// ------------------------------------------------------------------\n/** `[Json]` Creates a Record type */\nfunction Record(K, T, options = {}) {\n  // prettier-ignore\n  return (0, kind_1.IsUnion)(K) ? FromUnionKey(K.anyOf, T, options) : (0, kind_1.IsTemplateLiteral)(K) ? FromTemplateLiteralKey(K, T, options) : (0, kind_1.IsLiteral)(K) ? FromLiteralKey(K.const, T, options) : (0, kind_1.IsInteger)(K) ? FromIntegerKey(K, T, options) : (0, kind_1.IsNumber)(K) ? FromNumberKey(K, T, options) : (0, kind_1.IsRegExp)(K) ? FromRegExpKey(K, T, options) : (0, kind_1.IsString)(K) ? FromStringKey(K, T, options) : (0, kind_1.IsAny)(K) ? FromAnyKey(K, T, options) : (0, kind_1.IsNever)(K) ? FromNeverKey(K, T, options) : (0, index_2.Never)(options);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}