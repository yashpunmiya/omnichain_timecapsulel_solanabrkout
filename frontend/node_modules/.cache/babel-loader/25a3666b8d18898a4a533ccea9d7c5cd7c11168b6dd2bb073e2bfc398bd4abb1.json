{"ast":null,"code":"import { EventEmitter as c } from \"events\";\nimport { IJsonRpcProvider as r, formatJsonRpcRequest as h, getBigIntRpcId as a, isJsonRpcError as d, isJsonRpcResponse as v } from \"@walletconnect/jsonrpc-utils\";\nclass o extends r {\n  constructor(t) {\n    super(t), this.events = new c(), this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();\n  }\n  async connect(t = this.connection) {\n    await this.open(t);\n  }\n  async disconnect() {\n    await this.close();\n  }\n  on(t, e) {\n    this.events.on(t, e);\n  }\n  once(t, e) {\n    this.events.once(t, e);\n  }\n  off(t, e) {\n    this.events.off(t, e);\n  }\n  removeListener(t, e) {\n    this.events.removeListener(t, e);\n  }\n  async request(t, e) {\n    return this.requestStrict(h(t.method, t.params || [], t.id || a().toString()), e);\n  }\n  async requestStrict(t, e) {\n    return new Promise(async (i, s) => {\n      if (!this.connection.connected) try {\n        await this.open();\n      } catch (n) {\n        s(n);\n      }\n      this.events.on(`${t.id}`, n => {\n        d(n) ? s(n.error) : i(n.result);\n      });\n      try {\n        await this.connection.send(t, e);\n      } catch (n) {\n        s(n);\n      }\n    });\n  }\n  setConnection(t = this.connection) {\n    return t;\n  }\n  onPayload(t) {\n    this.events.emit(\"payload\", t), v(t) ? this.events.emit(`${t.id}`, t) : this.events.emit(\"message\", {\n      type: t.method,\n      data: t.params\n    });\n  }\n  onClose(t) {\n    t && t.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n  }\n  async open(t = this.connection) {\n    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == \"string\" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n  }\n  async close() {\n    await this.connection.close();\n  }\n  registerEventListeners() {\n    this.hasRegisteredEventListeners || (this.connection.on(\"payload\", t => this.onPayload(t)), this.connection.on(\"close\", t => this.onClose(t)), this.connection.on(\"error\", t => this.events.emit(\"error\", t)), this.connection.on(\"register_error\", t => this.onClose()), this.hasRegisteredEventListeners = !0);\n  }\n}\nexport { o as JsonRpcProvider, o as default };","map":{"version":3,"names":[],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\jsonrpc-provider\\src\\provider.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport {\n  RequestArguments,\n  IJsonRpcProvider,\n  IJsonRpcConnection,\n  JsonRpcRequest,\n  JsonRpcPayload,\n  JsonRpcProviderMessage,\n  isJsonRpcResponse,\n  formatJsonRpcRequest,\n  isJsonRpcError,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\n\nexport class JsonRpcProvider extends IJsonRpcProvider {\n  public events = new EventEmitter();\n\n  public connection: IJsonRpcConnection;\n\n  private hasRegisteredEventListeners = false;\n\n  constructor(connection: IJsonRpcConnection) {\n    super(connection);\n    this.connection = this.setConnection(connection);\n    if (this.connection.connected) {\n      this.registerEventListeners();\n    }\n  }\n\n  public async connect(connection: string | IJsonRpcConnection = this.connection): Promise<void> {\n    await this.open(connection);\n  }\n\n  public async disconnect(): Promise<void> {\n    await this.close();\n  }\n\n  public on(event: string, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public async request<Result = any, Params = any>(\n    request: RequestArguments<Params>,\n    context?: any,\n  ): Promise<Result> {\n    return this.requestStrict(\n      formatJsonRpcRequest(\n        request.method,\n        request.params || [],\n        request.id || (getBigIntRpcId().toString() as any),\n      ), // casting to any is required in order to use BigInt as rpcId\n      context,\n    );\n  }\n\n  // ---------- Protected ----------------------------------------------- //\n\n  protected async requestStrict<Result = any, Params = any>(\n    request: JsonRpcRequest<Params>,\n    context?: any,\n  ): Promise<Result> {\n    return new Promise(async (resolve, reject) => {\n      if (!this.connection.connected) {\n        try {\n          await this.open();\n        } catch (e) {\n          reject(e);\n        }\n      }\n      this.events.on(`${request.id}`, (response) => {\n        if (isJsonRpcError(response)) {\n          reject(response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n      try {\n        await this.connection.send(request, context);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  protected setConnection(connection: IJsonRpcConnection = this.connection) {\n    return connection;\n  }\n\n  protected onPayload(payload: JsonRpcPayload): void {\n    this.events.emit(\"payload\", payload);\n    if (isJsonRpcResponse(payload)) {\n      this.events.emit(`${payload.id}`, payload);\n    } else {\n      this.events.emit(\"message\", {\n        type: payload.method,\n        data: payload.params,\n      } as JsonRpcProviderMessage);\n    }\n  }\n\n  protected onClose(event?: CloseEvent): void {\n    // Code 3000 indicates an abnormal closure signalled by the relay -> emit an error in this case.\n    if (event && event.code === 3000) {\n      this.events.emit(\n        \"error\",\n        new Error(\n          `WebSocket connection closed abnormally with code: ${event.code} ${\n            event.reason ? `(${event.reason})` : \"\"\n          }`,\n        ),\n      );\n    }\n    this.events.emit(\"disconnect\");\n  }\n\n  protected async open(connection: string | IJsonRpcConnection = this.connection) {\n    if (this.connection === connection && this.connection.connected) return;\n    if (this.connection.connected) this.close();\n    if (typeof connection === \"string\") {\n      await this.connection.open(connection);\n      connection = this.connection;\n    }\n    this.connection = this.setConnection(connection);\n    await this.connection.open();\n    this.registerEventListeners();\n    this.events.emit(\"connect\");\n  }\n\n  protected async close() {\n    await this.connection.close();\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private registerEventListeners() {\n    if (this.hasRegisteredEventListeners) return;\n    this.connection.on(\"payload\", (payload: JsonRpcPayload) => this.onPayload(payload));\n    this.connection.on(\"close\", (event?: CloseEvent) => this.onClose(event));\n    this.connection.on(\"error\", (error: Error) => this.events.emit(\"error\", error));\n    this.connection.on(\"register_error\", (_error: Error) => this.onClose());\n    this.hasRegisteredEventListeners = true;\n  }\n}\n\nexport default JsonRpcProvider;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}