{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueCheckUnknownTypeError = void 0;\nexports.Check = Check;\nconst index_1 = require(\"../../system/index\");\nconst index_2 = require(\"../deref/index\");\nconst index_3 = require(\"../hash/index\");\nconst index_4 = require(\"../../type/symbols/index\");\nconst index_5 = require(\"../../type/keyof/index\");\nconst index_6 = require(\"../../type/extends/index\");\nconst index_7 = require(\"../../type/registry/index\");\nconst index_8 = require(\"../../type/error/index\");\nconst index_9 = require(\"../../type/never/index\");\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nconst index_10 = require(\"../guard/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst type_1 = require(\"../../type/guard/type\");\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nclass ValueCheckUnknownTypeError extends index_8.TypeBoxError {\n  constructor(schema) {\n    super(`Unknown type`);\n    this.schema = schema;\n  }\n}\nexports.ValueCheckUnknownTypeError = ValueCheckUnknownTypeError;\n// ------------------------------------------------------------------\n// TypeGuards\n// ------------------------------------------------------------------\nfunction IsAnyOrUnknown(schema) {\n  return schema[index_4.Kind] === 'Any' || schema[index_4.Kind] === 'Unknown';\n}\n// ------------------------------------------------------------------\n// Guards\n// ------------------------------------------------------------------\nfunction IsDefined(value) {\n  return value !== undefined;\n}\n// ------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------\nfunction FromAny(schema, references, value) {\n  return true;\n}\nfunction FromArray(schema, references, value) {\n  if (!(0, index_10.IsArray)(value)) return false;\n  if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {\n    return false;\n  }\n  if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {\n    return false;\n  }\n  if (!value.every(value => Visit(schema.items, references, value))) {\n    return false;\n  }\n  // prettier-ignore\n  if (schema.uniqueItems === true && !function () {\n    const set = new Set();\n    for (const element of value) {\n      const hashed = (0, index_3.Hash)(element);\n      if (set.has(hashed)) {\n        return false;\n      } else {\n        set.add(hashed);\n      }\n    }\n    return true;\n  }()) {\n    return false;\n  }\n  // contains\n  if (!(IsDefined(schema.contains) || (0, index_10.IsNumber)(schema.minContains) || (0, index_10.IsNumber)(schema.maxContains))) {\n    return true; // exit\n  }\n  const containsSchema = IsDefined(schema.contains) ? schema.contains : (0, index_9.Never)();\n  const containsCount = value.reduce((acc, value) => Visit(containsSchema, references, value) ? acc + 1 : acc, 0);\n  if (containsCount === 0) {\n    return false;\n  }\n  if ((0, index_10.IsNumber)(schema.minContains) && containsCount < schema.minContains) {\n    return false;\n  }\n  if ((0, index_10.IsNumber)(schema.maxContains) && containsCount > schema.maxContains) {\n    return false;\n  }\n  return true;\n}\nfunction FromAsyncIterator(schema, references, value) {\n  return (0, index_10.IsAsyncIterator)(value);\n}\nfunction FromBigInt(schema, references, value) {\n  if (!(0, index_10.IsBigInt)(value)) return false;\n  if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n    return false;\n  }\n  if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n    return false;\n  }\n  if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n    return false;\n  }\n  if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n    return false;\n  }\n  if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {\n    return false;\n  }\n  return true;\n}\nfunction FromBoolean(schema, references, value) {\n  return (0, index_10.IsBoolean)(value);\n}\nfunction FromConstructor(schema, references, value) {\n  return Visit(schema.returns, references, value.prototype);\n}\nfunction FromDate(schema, references, value) {\n  if (!(0, index_10.IsDate)(value)) return false;\n  if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {\n    return false;\n  }\n  if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {\n    return false;\n  }\n  if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {\n    return false;\n  }\n  if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {\n    return false;\n  }\n  if (IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {\n    return false;\n  }\n  return true;\n}\nfunction FromFunction(schema, references, value) {\n  return (0, index_10.IsFunction)(value);\n}\nfunction FromInteger(schema, references, value) {\n  if (!(0, index_10.IsInteger)(value)) {\n    return false;\n  }\n  if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n    return false;\n  }\n  if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n    return false;\n  }\n  if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n    return false;\n  }\n  if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n    return false;\n  }\n  if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n    return false;\n  }\n  return true;\n}\nfunction FromIntersect(schema, references, value) {\n  const check1 = schema.allOf.every(schema => Visit(schema, references, value));\n  if (schema.unevaluatedProperties === false) {\n    const keyPattern = new RegExp((0, index_5.KeyOfPattern)(schema));\n    const check2 = Object.getOwnPropertyNames(value).every(key => keyPattern.test(key));\n    return check1 && check2;\n  } else if ((0, type_1.IsSchema)(schema.unevaluatedProperties)) {\n    const keyCheck = new RegExp((0, index_5.KeyOfPattern)(schema));\n    const check2 = Object.getOwnPropertyNames(value).every(key => keyCheck.test(key) || Visit(schema.unevaluatedProperties, references, value[key]));\n    return check1 && check2;\n  } else {\n    return check1;\n  }\n}\nfunction FromIterator(schema, references, value) {\n  return (0, index_10.IsIterator)(value);\n}\nfunction FromLiteral(schema, references, value) {\n  return value === schema.const;\n}\nfunction FromNever(schema, references, value) {\n  return false;\n}\nfunction FromNot(schema, references, value) {\n  return !Visit(schema.not, references, value);\n}\nfunction FromNull(schema, references, value) {\n  return (0, index_10.IsNull)(value);\n}\nfunction FromNumber(schema, references, value) {\n  if (!index_1.TypeSystemPolicy.IsNumberLike(value)) return false;\n  if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n    return false;\n  }\n  if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n    return false;\n  }\n  if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n    return false;\n  }\n  if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n    return false;\n  }\n  if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n    return false;\n  }\n  return true;\n}\nfunction FromObject(schema, references, value) {\n  if (!index_1.TypeSystemPolicy.IsObjectLike(value)) return false;\n  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n    return false;\n  }\n  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n    return false;\n  }\n  const knownKeys = Object.getOwnPropertyNames(schema.properties);\n  for (const knownKey of knownKeys) {\n    const property = schema.properties[knownKey];\n    if (schema.required && schema.required.includes(knownKey)) {\n      if (!Visit(property, references, value[knownKey])) {\n        return false;\n      }\n      if (((0, index_6.ExtendsUndefinedCheck)(property) || IsAnyOrUnknown(property)) && !(knownKey in value)) {\n        return false;\n      }\n    } else {\n      if (index_1.TypeSystemPolicy.IsExactOptionalProperty(value, knownKey) && !Visit(property, references, value[knownKey])) {\n        return false;\n      }\n    }\n  }\n  if (schema.additionalProperties === false) {\n    const valueKeys = Object.getOwnPropertyNames(value);\n    // optimization: value is valid if schemaKey length matches the valueKey length\n    if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {\n      return true;\n    } else {\n      return valueKeys.every(valueKey => knownKeys.includes(valueKey));\n    }\n  } else if (typeof schema.additionalProperties === 'object') {\n    const valueKeys = Object.getOwnPropertyNames(value);\n    return valueKeys.every(key => knownKeys.includes(key) || Visit(schema.additionalProperties, references, value[key]));\n  } else {\n    return true;\n  }\n}\nfunction FromPromise(schema, references, value) {\n  return (0, index_10.IsPromise)(value);\n}\nfunction FromRecord(schema, references, value) {\n  if (!index_1.TypeSystemPolicy.IsRecordLike(value)) {\n    return false;\n  }\n  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n    return false;\n  }\n  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n    return false;\n  }\n  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];\n  const regex = new RegExp(patternKey);\n  // prettier-ignore\n  const check1 = Object.entries(value).every(([key, value]) => {\n    return regex.test(key) ? Visit(patternSchema, references, value) : true;\n  });\n  // prettier-ignore\n  const check2 = typeof schema.additionalProperties === 'object' ? Object.entries(value).every(([key, value]) => {\n    return !regex.test(key) ? Visit(schema.additionalProperties, references, value) : true;\n  }) : true;\n  const check3 = schema.additionalProperties === false ? Object.getOwnPropertyNames(value).every(key => {\n    return regex.test(key);\n  }) : true;\n  return check1 && check2 && check3;\n}\nfunction FromRef(schema, references, value) {\n  return Visit((0, index_2.Deref)(schema, references), references, value);\n}\nfunction FromRegExp(schema, references, value) {\n  const regex = new RegExp(schema.source, schema.flags);\n  if (IsDefined(schema.minLength)) {\n    if (!(value.length >= schema.minLength)) return false;\n  }\n  if (IsDefined(schema.maxLength)) {\n    if (!(value.length <= schema.maxLength)) return false;\n  }\n  return regex.test(value);\n}\nfunction FromString(schema, references, value) {\n  if (!(0, index_10.IsString)(value)) {\n    return false;\n  }\n  if (IsDefined(schema.minLength)) {\n    if (!(value.length >= schema.minLength)) return false;\n  }\n  if (IsDefined(schema.maxLength)) {\n    if (!(value.length <= schema.maxLength)) return false;\n  }\n  if (IsDefined(schema.pattern)) {\n    const regex = new RegExp(schema.pattern);\n    if (!regex.test(value)) return false;\n  }\n  if (IsDefined(schema.format)) {\n    if (!index_7.FormatRegistry.Has(schema.format)) return false;\n    const func = index_7.FormatRegistry.Get(schema.format);\n    return func(value);\n  }\n  return true;\n}\nfunction FromSymbol(schema, references, value) {\n  return (0, index_10.IsSymbol)(value);\n}\nfunction FromTemplateLiteral(schema, references, value) {\n  return (0, index_10.IsString)(value) && new RegExp(schema.pattern).test(value);\n}\nfunction FromThis(schema, references, value) {\n  return Visit((0, index_2.Deref)(schema, references), references, value);\n}\nfunction FromTuple(schema, references, value) {\n  if (!(0, index_10.IsArray)(value)) {\n    return false;\n  }\n  if (schema.items === undefined && !(value.length === 0)) {\n    return false;\n  }\n  if (!(value.length === schema.maxItems)) {\n    return false;\n  }\n  if (!schema.items) {\n    return true;\n  }\n  for (let i = 0; i < schema.items.length; i++) {\n    if (!Visit(schema.items[i], references, value[i])) return false;\n  }\n  return true;\n}\nfunction FromUndefined(schema, references, value) {\n  return (0, index_10.IsUndefined)(value);\n}\nfunction FromUnion(schema, references, value) {\n  return schema.anyOf.some(inner => Visit(inner, references, value));\n}\nfunction FromUint8Array(schema, references, value) {\n  if (!(0, index_10.IsUint8Array)(value)) {\n    return false;\n  }\n  if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {\n    return false;\n  }\n  if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {\n    return false;\n  }\n  return true;\n}\nfunction FromUnknown(schema, references, value) {\n  return true;\n}\nfunction FromVoid(schema, references, value) {\n  return index_1.TypeSystemPolicy.IsVoidLike(value);\n}\nfunction FromKind(schema, references, value) {\n  if (!index_7.TypeRegistry.Has(schema[index_4.Kind])) return false;\n  const func = index_7.TypeRegistry.Get(schema[index_4.Kind]);\n  return func(schema, value);\n}\nfunction Visit(schema, references, value) {\n  const references_ = IsDefined(schema.$id) ? [...references, schema] : references;\n  const schema_ = schema;\n  switch (schema_[index_4.Kind]) {\n    case 'Any':\n      return FromAny(schema_, references_, value);\n    case 'Array':\n      return FromArray(schema_, references_, value);\n    case 'AsyncIterator':\n      return FromAsyncIterator(schema_, references_, value);\n    case 'BigInt':\n      return FromBigInt(schema_, references_, value);\n    case 'Boolean':\n      return FromBoolean(schema_, references_, value);\n    case 'Constructor':\n      return FromConstructor(schema_, references_, value);\n    case 'Date':\n      return FromDate(schema_, references_, value);\n    case 'Function':\n      return FromFunction(schema_, references_, value);\n    case 'Integer':\n      return FromInteger(schema_, references_, value);\n    case 'Intersect':\n      return FromIntersect(schema_, references_, value);\n    case 'Iterator':\n      return FromIterator(schema_, references_, value);\n    case 'Literal':\n      return FromLiteral(schema_, references_, value);\n    case 'Never':\n      return FromNever(schema_, references_, value);\n    case 'Not':\n      return FromNot(schema_, references_, value);\n    case 'Null':\n      return FromNull(schema_, references_, value);\n    case 'Number':\n      return FromNumber(schema_, references_, value);\n    case 'Object':\n      return FromObject(schema_, references_, value);\n    case 'Promise':\n      return FromPromise(schema_, references_, value);\n    case 'Record':\n      return FromRecord(schema_, references_, value);\n    case 'Ref':\n      return FromRef(schema_, references_, value);\n    case 'RegExp':\n      return FromRegExp(schema_, references_, value);\n    case 'String':\n      return FromString(schema_, references_, value);\n    case 'Symbol':\n      return FromSymbol(schema_, references_, value);\n    case 'TemplateLiteral':\n      return FromTemplateLiteral(schema_, references_, value);\n    case 'This':\n      return FromThis(schema_, references_, value);\n    case 'Tuple':\n      return FromTuple(schema_, references_, value);\n    case 'Undefined':\n      return FromUndefined(schema_, references_, value);\n    case 'Union':\n      return FromUnion(schema_, references_, value);\n    case 'Uint8Array':\n      return FromUint8Array(schema_, references_, value);\n    case 'Unknown':\n      return FromUnknown(schema_, references_, value);\n    case 'Void':\n      return FromVoid(schema_, references_, value);\n    default:\n      if (!index_7.TypeRegistry.Has(schema_[index_4.Kind])) throw new ValueCheckUnknownTypeError(schema_);\n      return FromKind(schema_, references_, value);\n  }\n}\n/** Returns true if the value matches the given type. */\nfunction Check(...args) {\n  return args.length === 3 ? Visit(args[0], args[1], args[2]) : Visit(args[0], [], args[1]);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ValueCheckUnknownTypeError","Check","index_1","require","index_2","index_3","index_4","index_5","index_6","index_7","index_8","index_9","index_10","type_1","TypeBoxError","constructor","schema","IsAnyOrUnknown","Kind","IsDefined","undefined","FromAny","references","FromArray","IsArray","minItems","length","maxItems","every","Visit","items","uniqueItems","set","Set","element","hashed","Hash","has","add","contains","IsNumber","minContains","maxContains","containsSchema","Never","containsCount","reduce","acc","FromAsyncIterator","IsAsyncIterator","FromBigInt","IsBigInt","exclusiveMaximum","exclusiveMinimum","maximum","minimum","multipleOf","BigInt","FromBoolean","IsBoolean","FromConstructor","returns","prototype","FromDate","IsDate","exclusiveMaximumTimestamp","getTime","exclusiveMinimumTimestamp","maximumTimestamp","minimumTimestamp","multipleOfTimestamp","FromFunction","IsFunction","FromInteger","IsInteger","FromIntersect","check1","allOf","unevaluatedProperties","keyPattern","RegExp","KeyOfPattern","check2","getOwnPropertyNames","key","test","IsSchema","keyCheck","FromIterator","IsIterator","FromLiteral","const","FromNever","FromNot","not","FromNull","IsNull","FromNumber","TypeSystemPolicy","IsNumberLike","FromObject","IsObjectLike","minProperties","maxProperties","knownKeys","properties","knownKey","property","required","includes","ExtendsUndefinedCheck","IsExactOptionalProperty","additionalProperties","valueKeys","valueKey","FromPromise","IsPromise","FromRecord","IsRecordLike","patternKey","patternSchema","entries","patternProperties","regex","check3","FromRef","Deref","FromRegExp","source","flags","minLength","maxLength","FromString","IsString","pattern","format","FormatRegistry","Has","func","Get","FromSymbol","IsSymbol","FromTemplateLiteral","FromThis","FromTuple","i","FromUndefined","IsUndefined","FromUnion","anyOf","some","inner","FromUint8Array","IsUint8Array","maxByteLength","minByteLength","FromUnknown","FromVoid","IsVoidLike","FromKind","TypeRegistry","references_","$id","schema_","args"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@sinclair/typebox/build/cjs/value/check/check.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueCheckUnknownTypeError = void 0;\nexports.Check = Check;\nconst index_1 = require(\"../../system/index\");\nconst index_2 = require(\"../deref/index\");\nconst index_3 = require(\"../hash/index\");\nconst index_4 = require(\"../../type/symbols/index\");\nconst index_5 = require(\"../../type/keyof/index\");\nconst index_6 = require(\"../../type/extends/index\");\nconst index_7 = require(\"../../type/registry/index\");\nconst index_8 = require(\"../../type/error/index\");\nconst index_9 = require(\"../../type/never/index\");\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nconst index_10 = require(\"../guard/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst type_1 = require(\"../../type/guard/type\");\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nclass ValueCheckUnknownTypeError extends index_8.TypeBoxError {\n    constructor(schema) {\n        super(`Unknown type`);\n        this.schema = schema;\n    }\n}\nexports.ValueCheckUnknownTypeError = ValueCheckUnknownTypeError;\n// ------------------------------------------------------------------\n// TypeGuards\n// ------------------------------------------------------------------\nfunction IsAnyOrUnknown(schema) {\n    return schema[index_4.Kind] === 'Any' || schema[index_4.Kind] === 'Unknown';\n}\n// ------------------------------------------------------------------\n// Guards\n// ------------------------------------------------------------------\nfunction IsDefined(value) {\n    return value !== undefined;\n}\n// ------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------\nfunction FromAny(schema, references, value) {\n    return true;\n}\nfunction FromArray(schema, references, value) {\n    if (!(0, index_10.IsArray)(value))\n        return false;\n    if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {\n        return false;\n    }\n    if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {\n        return false;\n    }\n    if (!value.every((value) => Visit(schema.items, references, value))) {\n        return false;\n    }\n    // prettier-ignore\n    if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {\n        const hashed = (0, index_3.Hash)(element);\n        if (set.has(hashed)) {\n            return false;\n        }\n        else {\n            set.add(hashed);\n        }\n    } return true; })())) {\n        return false;\n    }\n    // contains\n    if (!(IsDefined(schema.contains) || (0, index_10.IsNumber)(schema.minContains) || (0, index_10.IsNumber)(schema.maxContains))) {\n        return true; // exit\n    }\n    const containsSchema = IsDefined(schema.contains) ? schema.contains : (0, index_9.Never)();\n    const containsCount = value.reduce((acc, value) => (Visit(containsSchema, references, value) ? acc + 1 : acc), 0);\n    if (containsCount === 0) {\n        return false;\n    }\n    if ((0, index_10.IsNumber)(schema.minContains) && containsCount < schema.minContains) {\n        return false;\n    }\n    if ((0, index_10.IsNumber)(schema.maxContains) && containsCount > schema.maxContains) {\n        return false;\n    }\n    return true;\n}\nfunction FromAsyncIterator(schema, references, value) {\n    return (0, index_10.IsAsyncIterator)(value);\n}\nfunction FromBigInt(schema, references, value) {\n    if (!(0, index_10.IsBigInt)(value))\n        return false;\n    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n        return false;\n    }\n    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n        return false;\n    }\n    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n        return false;\n    }\n    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n        return false;\n    }\n    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {\n        return false;\n    }\n    return true;\n}\nfunction FromBoolean(schema, references, value) {\n    return (0, index_10.IsBoolean)(value);\n}\nfunction FromConstructor(schema, references, value) {\n    return Visit(schema.returns, references, value.prototype);\n}\nfunction FromDate(schema, references, value) {\n    if (!(0, index_10.IsDate)(value))\n        return false;\n    if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {\n        return false;\n    }\n    if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {\n        return false;\n    }\n    if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {\n        return false;\n    }\n    if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {\n        return false;\n    }\n    if (IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {\n        return false;\n    }\n    return true;\n}\nfunction FromFunction(schema, references, value) {\n    return (0, index_10.IsFunction)(value);\n}\nfunction FromInteger(schema, references, value) {\n    if (!(0, index_10.IsInteger)(value)) {\n        return false;\n    }\n    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n        return false;\n    }\n    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n        return false;\n    }\n    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n        return false;\n    }\n    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n        return false;\n    }\n    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n        return false;\n    }\n    return true;\n}\nfunction FromIntersect(schema, references, value) {\n    const check1 = schema.allOf.every((schema) => Visit(schema, references, value));\n    if (schema.unevaluatedProperties === false) {\n        const keyPattern = new RegExp((0, index_5.KeyOfPattern)(schema));\n        const check2 = Object.getOwnPropertyNames(value).every((key) => keyPattern.test(key));\n        return check1 && check2;\n    }\n    else if ((0, type_1.IsSchema)(schema.unevaluatedProperties)) {\n        const keyCheck = new RegExp((0, index_5.KeyOfPattern)(schema));\n        const check2 = Object.getOwnPropertyNames(value).every((key) => keyCheck.test(key) || Visit(schema.unevaluatedProperties, references, value[key]));\n        return check1 && check2;\n    }\n    else {\n        return check1;\n    }\n}\nfunction FromIterator(schema, references, value) {\n    return (0, index_10.IsIterator)(value);\n}\nfunction FromLiteral(schema, references, value) {\n    return value === schema.const;\n}\nfunction FromNever(schema, references, value) {\n    return false;\n}\nfunction FromNot(schema, references, value) {\n    return !Visit(schema.not, references, value);\n}\nfunction FromNull(schema, references, value) {\n    return (0, index_10.IsNull)(value);\n}\nfunction FromNumber(schema, references, value) {\n    if (!index_1.TypeSystemPolicy.IsNumberLike(value))\n        return false;\n    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n        return false;\n    }\n    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n        return false;\n    }\n    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n        return false;\n    }\n    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n        return false;\n    }\n    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n        return false;\n    }\n    return true;\n}\nfunction FromObject(schema, references, value) {\n    if (!index_1.TypeSystemPolicy.IsObjectLike(value))\n        return false;\n    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n        return false;\n    }\n    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n        return false;\n    }\n    const knownKeys = Object.getOwnPropertyNames(schema.properties);\n    for (const knownKey of knownKeys) {\n        const property = schema.properties[knownKey];\n        if (schema.required && schema.required.includes(knownKey)) {\n            if (!Visit(property, references, value[knownKey])) {\n                return false;\n            }\n            if (((0, index_6.ExtendsUndefinedCheck)(property) || IsAnyOrUnknown(property)) && !(knownKey in value)) {\n                return false;\n            }\n        }\n        else {\n            if (index_1.TypeSystemPolicy.IsExactOptionalProperty(value, knownKey) && !Visit(property, references, value[knownKey])) {\n                return false;\n            }\n        }\n    }\n    if (schema.additionalProperties === false) {\n        const valueKeys = Object.getOwnPropertyNames(value);\n        // optimization: value is valid if schemaKey length matches the valueKey length\n        if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {\n            return true;\n        }\n        else {\n            return valueKeys.every((valueKey) => knownKeys.includes(valueKey));\n        }\n    }\n    else if (typeof schema.additionalProperties === 'object') {\n        const valueKeys = Object.getOwnPropertyNames(value);\n        return valueKeys.every((key) => knownKeys.includes(key) || Visit(schema.additionalProperties, references, value[key]));\n    }\n    else {\n        return true;\n    }\n}\nfunction FromPromise(schema, references, value) {\n    return (0, index_10.IsPromise)(value);\n}\nfunction FromRecord(schema, references, value) {\n    if (!index_1.TypeSystemPolicy.IsRecordLike(value)) {\n        return false;\n    }\n    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n        return false;\n    }\n    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n        return false;\n    }\n    const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];\n    const regex = new RegExp(patternKey);\n    // prettier-ignore\n    const check1 = Object.entries(value).every(([key, value]) => {\n        return (regex.test(key)) ? Visit(patternSchema, references, value) : true;\n    });\n    // prettier-ignore\n    const check2 = typeof schema.additionalProperties === 'object' ? Object.entries(value).every(([key, value]) => {\n        return (!regex.test(key)) ? Visit(schema.additionalProperties, references, value) : true;\n    }) : true;\n    const check3 = schema.additionalProperties === false\n        ? Object.getOwnPropertyNames(value).every((key) => {\n            return regex.test(key);\n        })\n        : true;\n    return check1 && check2 && check3;\n}\nfunction FromRef(schema, references, value) {\n    return Visit((0, index_2.Deref)(schema, references), references, value);\n}\nfunction FromRegExp(schema, references, value) {\n    const regex = new RegExp(schema.source, schema.flags);\n    if (IsDefined(schema.minLength)) {\n        if (!(value.length >= schema.minLength))\n            return false;\n    }\n    if (IsDefined(schema.maxLength)) {\n        if (!(value.length <= schema.maxLength))\n            return false;\n    }\n    return regex.test(value);\n}\nfunction FromString(schema, references, value) {\n    if (!(0, index_10.IsString)(value)) {\n        return false;\n    }\n    if (IsDefined(schema.minLength)) {\n        if (!(value.length >= schema.minLength))\n            return false;\n    }\n    if (IsDefined(schema.maxLength)) {\n        if (!(value.length <= schema.maxLength))\n            return false;\n    }\n    if (IsDefined(schema.pattern)) {\n        const regex = new RegExp(schema.pattern);\n        if (!regex.test(value))\n            return false;\n    }\n    if (IsDefined(schema.format)) {\n        if (!index_7.FormatRegistry.Has(schema.format))\n            return false;\n        const func = index_7.FormatRegistry.Get(schema.format);\n        return func(value);\n    }\n    return true;\n}\nfunction FromSymbol(schema, references, value) {\n    return (0, index_10.IsSymbol)(value);\n}\nfunction FromTemplateLiteral(schema, references, value) {\n    return (0, index_10.IsString)(value) && new RegExp(schema.pattern).test(value);\n}\nfunction FromThis(schema, references, value) {\n    return Visit((0, index_2.Deref)(schema, references), references, value);\n}\nfunction FromTuple(schema, references, value) {\n    if (!(0, index_10.IsArray)(value)) {\n        return false;\n    }\n    if (schema.items === undefined && !(value.length === 0)) {\n        return false;\n    }\n    if (!(value.length === schema.maxItems)) {\n        return false;\n    }\n    if (!schema.items) {\n        return true;\n    }\n    for (let i = 0; i < schema.items.length; i++) {\n        if (!Visit(schema.items[i], references, value[i]))\n            return false;\n    }\n    return true;\n}\nfunction FromUndefined(schema, references, value) {\n    return (0, index_10.IsUndefined)(value);\n}\nfunction FromUnion(schema, references, value) {\n    return schema.anyOf.some((inner) => Visit(inner, references, value));\n}\nfunction FromUint8Array(schema, references, value) {\n    if (!(0, index_10.IsUint8Array)(value)) {\n        return false;\n    }\n    if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {\n        return false;\n    }\n    if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {\n        return false;\n    }\n    return true;\n}\nfunction FromUnknown(schema, references, value) {\n    return true;\n}\nfunction FromVoid(schema, references, value) {\n    return index_1.TypeSystemPolicy.IsVoidLike(value);\n}\nfunction FromKind(schema, references, value) {\n    if (!index_7.TypeRegistry.Has(schema[index_4.Kind]))\n        return false;\n    const func = index_7.TypeRegistry.Get(schema[index_4.Kind]);\n    return func(schema, value);\n}\nfunction Visit(schema, references, value) {\n    const references_ = IsDefined(schema.$id) ? [...references, schema] : references;\n    const schema_ = schema;\n    switch (schema_[index_4.Kind]) {\n        case 'Any':\n            return FromAny(schema_, references_, value);\n        case 'Array':\n            return FromArray(schema_, references_, value);\n        case 'AsyncIterator':\n            return FromAsyncIterator(schema_, references_, value);\n        case 'BigInt':\n            return FromBigInt(schema_, references_, value);\n        case 'Boolean':\n            return FromBoolean(schema_, references_, value);\n        case 'Constructor':\n            return FromConstructor(schema_, references_, value);\n        case 'Date':\n            return FromDate(schema_, references_, value);\n        case 'Function':\n            return FromFunction(schema_, references_, value);\n        case 'Integer':\n            return FromInteger(schema_, references_, value);\n        case 'Intersect':\n            return FromIntersect(schema_, references_, value);\n        case 'Iterator':\n            return FromIterator(schema_, references_, value);\n        case 'Literal':\n            return FromLiteral(schema_, references_, value);\n        case 'Never':\n            return FromNever(schema_, references_, value);\n        case 'Not':\n            return FromNot(schema_, references_, value);\n        case 'Null':\n            return FromNull(schema_, references_, value);\n        case 'Number':\n            return FromNumber(schema_, references_, value);\n        case 'Object':\n            return FromObject(schema_, references_, value);\n        case 'Promise':\n            return FromPromise(schema_, references_, value);\n        case 'Record':\n            return FromRecord(schema_, references_, value);\n        case 'Ref':\n            return FromRef(schema_, references_, value);\n        case 'RegExp':\n            return FromRegExp(schema_, references_, value);\n        case 'String':\n            return FromString(schema_, references_, value);\n        case 'Symbol':\n            return FromSymbol(schema_, references_, value);\n        case 'TemplateLiteral':\n            return FromTemplateLiteral(schema_, references_, value);\n        case 'This':\n            return FromThis(schema_, references_, value);\n        case 'Tuple':\n            return FromTuple(schema_, references_, value);\n        case 'Undefined':\n            return FromUndefined(schema_, references_, value);\n        case 'Union':\n            return FromUnion(schema_, references_, value);\n        case 'Uint8Array':\n            return FromUint8Array(schema_, references_, value);\n        case 'Unknown':\n            return FromUnknown(schema_, references_, value);\n        case 'Void':\n            return FromVoid(schema_, references_, value);\n        default:\n            if (!index_7.TypeRegistry.Has(schema_[index_4.Kind]))\n                throw new ValueCheckUnknownTypeError(schema_);\n            return FromKind(schema_, references_, value);\n    }\n}\n/** Returns true if the value matches the given type. */\nfunction Check(...args) {\n    return args.length === 3 ? Visit(args[0], args[1], args[2]) : Visit(args[0], [], args[1]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}