{"ast":null,"code":"async function fetchData(...args) {\n  const response = await fetch(...args);\n  if (!response.ok) {\n    // Create error object and reject if not a 2xx response code\n    const err = new Error(`HTTP status code: ${response.status}`, {\n      cause: response\n    });\n    throw err;\n  }\n  return response;\n}\n// -- Utility --------------------------------------------------------------------\nexport class FetchUtil {\n  constructor({\n    baseUrl,\n    clientId\n  }) {\n    this.baseUrl = baseUrl;\n    this.clientId = clientId;\n  }\n  async get({\n    headers,\n    signal,\n    cache,\n    ...args\n  }) {\n    const url = this.createUrl(args);\n    const response = await fetchData(url, {\n      method: 'GET',\n      headers,\n      signal,\n      cache\n    });\n    return response.json();\n  }\n  async getBlob({\n    headers,\n    signal,\n    ...args\n  }) {\n    const url = this.createUrl(args);\n    const response = await fetchData(url, {\n      method: 'GET',\n      headers,\n      signal\n    });\n    return response.blob();\n  }\n  async post({\n    body,\n    headers,\n    signal,\n    ...args\n  }) {\n    const url = this.createUrl(args);\n    const response = await fetchData(url, {\n      method: 'POST',\n      headers,\n      body: body ? JSON.stringify(body) : undefined,\n      signal\n    });\n    return response.json();\n  }\n  async put({\n    body,\n    headers,\n    signal,\n    ...args\n  }) {\n    const url = this.createUrl(args);\n    const response = await fetchData(url, {\n      method: 'PUT',\n      headers,\n      body: body ? JSON.stringify(body) : undefined,\n      signal\n    });\n    return response.json();\n  }\n  async delete({\n    body,\n    headers,\n    signal,\n    ...args\n  }) {\n    const url = this.createUrl(args);\n    const response = await fetchData(url, {\n      method: 'DELETE',\n      headers,\n      body: body ? JSON.stringify(body) : undefined,\n      signal\n    });\n    return response.json();\n  }\n  createUrl({\n    path,\n    params\n  }) {\n    const url = new URL(path, this.baseUrl);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value) {\n          url.searchParams.append(key, value);\n        }\n      });\n    }\n    if (this.clientId) {\n      url.searchParams.append('clientId', this.clientId);\n    }\n    return url;\n  }\n}\n//# sourceMappingURL=FetchUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}