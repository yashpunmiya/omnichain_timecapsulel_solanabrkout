{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/uuidv4.ts\nimport { v4 } from \"uuid\";\nvar uuidv4 = () => v4().toString();\nvar uuidv4_default = uuidv4;\n\n// src/url-crypto.ts\nvar url_crypto_exports = {};\n__export(url_crypto_exports, {\n  decryptData: () => decryptData,\n  decryptUrlParam: () => decryptUrlParam,\n  encryptData: () => encryptData,\n  encryptUrlParam: () => encryptUrlParam\n});\nimport CryptoJS from \"crypto-js\";\nimport { v4 as uuidv42 } from \"uuid\";\nfunction encryptUrlParam(params = {}, encoding = \"base64\") {\n  const secretKey = uuidv42().replace(/-/g, \"\").toUpperCase();\n  const cipherText = encryptData(params, secretKey, encoding);\n  return cipherText + secretKey;\n}\nfunction encryptData(data = {}, secretKey, encoding = \"base64\") {\n  if (typeof data !== \"string\") {\n    data = JSON.stringify(data);\n  }\n  const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n  const cipherText = CryptoJS.AES.encrypt(data, keyWA, {\n    mode: CryptoJS.mode.ECB,\n    algorithm: CryptoJS.algo.AES,\n    padding: CryptoJS.pad.Pkcs7,\n    formatter: CryptoJS.format.Hex\n  }).ciphertext;\n  if (encoding === \"base64\") {\n    return encodeURIComponent(CryptoJS.enc.Base64.stringify(cipherText));\n  } else {\n    return CryptoJS.enc.Hex.stringify(cipherText).toUpperCase();\n  }\n}\nfunction decryptUrlParam(params, encoding = \"base64\") {\n  if (params) {\n    const secretKey = params.slice(-32);\n    const data = params.slice(0, params.length - 32);\n    return decryptData(data, secretKey, encoding);\n  } else {\n    return \"\";\n  }\n}\nfunction decryptData(params, secretKey, encoding = \"base64\") {\n  let dec;\n  if (encoding === \"base64\") {\n    dec = CryptoJS.enc.Base64.parse(params);\n  } else {\n    dec = CryptoJS.enc.Hex.parse(params);\n  }\n  const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n  const bytes = CryptoJS.AES.decrypt(CryptoJS.lib.CipherParams.create({\n    ciphertext: dec,\n    key: keyWA,\n    algorithm: CryptoJS.algo.AES,\n    padding: CryptoJS.pad.Pkcs7,\n    formatter: CryptoJS.format.Hex\n  }), keyWA, {\n    mode: CryptoJS.mode.ECB\n  });\n  return bytes.toString(CryptoJS.enc.Utf8);\n}\nexport { url_crypto_exports as urlCrypto, uuidv4_default as uuidv4 };","map":{"version":3,"names":["v4","uuidv4","toString","uuidv4_default","url_crypto_exports","__export","decryptData","decryptUrlParam","encryptData","encryptUrlParam","CryptoJS","uuidv42","params","encoding","secretKey","replace","toUpperCase","cipherText","data","JSON","stringify","keyWA","enc","Utf8","parse","AES","encrypt","mode","ECB","algorithm","algo","padding","pad","Pkcs7","formatter","format","Hex","ciphertext","encodeURIComponent","Base64","slice","length","dec","bytes","decrypt","lib","CipherParams","create","key"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@particle-network\\crypto\\src\\uuidv4.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@particle-network\\crypto\\src\\url-crypto.ts"],"sourcesContent":["import { v4 } from 'uuid';\n\nconst uuidv4 = () => v4().toString();\n\nexport default uuidv4;\n","import CryptoJS from 'crypto-js';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype DataEncoding = 'base64' | 'hex';\n\nexport function encryptUrlParam(params = {}, encoding: DataEncoding = 'base64'): string {\n    const secretKey = uuidv4().replace(/-/g, '').toUpperCase();\n    const cipherText = encryptData(params, secretKey, encoding);\n\n    return cipherText + secretKey;\n}\n\nexport function encryptData(data = {}, secretKey: string, encoding: DataEncoding = 'base64'): string {\n    if (typeof data !== 'string') {\n        data = JSON.stringify(data);\n    }\n    const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n    const cipherText = CryptoJS.AES.encrypt(data as string, keyWA, {\n        mode: CryptoJS.mode.ECB,\n        algorithm: CryptoJS.algo.AES,\n        padding: CryptoJS.pad.Pkcs7,\n        formatter: CryptoJS.format.Hex,\n    }).ciphertext;\n    if (encoding === 'base64') {\n        return encodeURIComponent(CryptoJS.enc.Base64.stringify(cipherText));\n    } else {\n        return CryptoJS.enc.Hex.stringify(cipherText).toUpperCase();\n    }\n}\n\nexport function decryptUrlParam(params: string, encoding: DataEncoding = 'base64'): string {\n    if (params) {\n        const secretKey = params.slice(-32);\n        const data = params.slice(0, params.length - 32);\n        return decryptData(data, secretKey, encoding);\n    } else {\n        return '';\n    }\n}\n\nexport function decryptData(params: string, secretKey: string, encoding: DataEncoding = 'base64'): string {\n    let dec;\n    if (encoding === 'base64') {\n        dec = CryptoJS.enc.Base64.parse(params);\n    } else {\n        dec = CryptoJS.enc.Hex.parse(params);\n    }\n    const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n    const bytes = CryptoJS.AES.decrypt(\n        CryptoJS.lib.CipherParams.create({\n            ciphertext: dec,\n            key: keyWA,\n            algorithm: CryptoJS.algo.AES,\n            padding: CryptoJS.pad.Pkcs7,\n            formatter: CryptoJS.format.Hex,\n        }),\n        keyWA,\n        {\n            mode: CryptoJS.mode.ECB,\n        }\n    );\n    return bytes.toString(CryptoJS.enc.Utf8);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}