{"ast":null,"code":"import { DateUtil } from '@reown/appkit-common';\nimport { UiHelperUtil } from './UiHelperUtil.js';\nconst FLOAT_FIXED_VALUE = 3;\nconst plusTypes = ['receive', 'deposit', 'borrow', 'claim'];\nconst minusTypes = ['withdraw', 'repay', 'burn'];\nexport const TransactionUtil = {\n  getTransactionGroupTitle(year, month) {\n    const currentYear = DateUtil.getYear();\n    const monthName = DateUtil.getMonthNameByIndex(month);\n    const isCurrentYear = year === currentYear;\n    const groupTitle = isCurrentYear ? monthName : `${monthName} ${year}`;\n    return groupTitle;\n  },\n  getTransactionImages(transfers) {\n    const [transfer, secondTransfer] = transfers;\n    const isAllNFT = Boolean(transfer) && transfers?.every(item => Boolean(item.nft_info));\n    const haveMultipleTransfers = transfers?.length > 1;\n    const haveTwoTransfers = transfers?.length === 2;\n    if (haveTwoTransfers && !isAllNFT) {\n      return [this.getTransactionImage(transfer), this.getTransactionImage(secondTransfer)];\n    }\n    if (haveMultipleTransfers) {\n      return transfers.map(item => this.getTransactionImage(item));\n    }\n    return [this.getTransactionImage(transfer)];\n  },\n  getTransactionImage(transfer) {\n    return {\n      type: TransactionUtil.getTransactionTransferTokenType(transfer),\n      url: TransactionUtil.getTransactionImageURL(transfer)\n    };\n  },\n  getTransactionImageURL(transfer) {\n    let imageURL = undefined;\n    const isNFT = Boolean(transfer?.nft_info);\n    const isFungible = Boolean(transfer?.fungible_info);\n    if (transfer && isNFT) {\n      imageURL = transfer?.nft_info?.content?.preview?.url;\n    } else if (transfer && isFungible) {\n      imageURL = transfer?.fungible_info?.icon?.url;\n    }\n    return imageURL;\n  },\n  getTransactionTransferTokenType(transfer) {\n    if (transfer?.fungible_info) {\n      return 'FUNGIBLE';\n    } else if (transfer?.nft_info) {\n      return 'NFT';\n    }\n    return undefined;\n  },\n  getTransactionDescriptions(transaction) {\n    const type = transaction?.metadata?.operationType;\n    const transfers = transaction?.transfers;\n    const haveTransfer = transaction?.transfers?.length > 0;\n    const haveMultipleTransfers = transaction?.transfers?.length > 1;\n    const isFungible = haveTransfer && transfers?.every(transfer => Boolean(transfer?.fungible_info));\n    const [firstTransfer, secondTransfer] = transfers;\n    let firstDescription = this.getTransferDescription(firstTransfer);\n    let secondDescription = this.getTransferDescription(secondTransfer);\n    if (!haveTransfer) {\n      const isSendOrReceive = type === 'send' || type === 'receive';\n      if (isSendOrReceive && isFungible) {\n        firstDescription = UiHelperUtil.getTruncateString({\n          string: transaction?.metadata.sentFrom,\n          charsStart: 4,\n          charsEnd: 6,\n          truncate: 'middle'\n        });\n        secondDescription = UiHelperUtil.getTruncateString({\n          string: transaction?.metadata.sentTo,\n          charsStart: 4,\n          charsEnd: 6,\n          truncate: 'middle'\n        });\n        return [firstDescription, secondDescription];\n      }\n      return [transaction.metadata.status];\n    }\n    if (haveMultipleTransfers) {\n      return transfers.map(item => this.getTransferDescription(item));\n    }\n    let prefix = '';\n    if (plusTypes.includes(type)) {\n      prefix = '+';\n    } else if (minusTypes.includes(type)) {\n      prefix = '-';\n    }\n    firstDescription = prefix.concat(firstDescription);\n    return [firstDescription];\n  },\n  getTransferDescription(transfer) {\n    let description = '';\n    if (!transfer) {\n      return description;\n    }\n    if (transfer?.nft_info) {\n      description = transfer?.nft_info?.name || '-';\n    } else if (transfer?.fungible_info) {\n      description = this.getFungibleTransferDescription(transfer) || '-';\n    }\n    return description;\n  },\n  getFungibleTransferDescription(transfer) {\n    if (!transfer) {\n      return null;\n    }\n    const quantity = this.getQuantityFixedValue(transfer?.quantity.numeric);\n    const description = [quantity, transfer?.fungible_info?.symbol].join(' ').trim();\n    return description;\n  },\n  getQuantityFixedValue(value) {\n    if (!value) {\n      return null;\n    }\n    const parsedValue = parseFloat(value);\n    return parsedValue.toFixed(FLOAT_FIXED_VALUE);\n  }\n};\n//# sourceMappingURL=TransactionUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}