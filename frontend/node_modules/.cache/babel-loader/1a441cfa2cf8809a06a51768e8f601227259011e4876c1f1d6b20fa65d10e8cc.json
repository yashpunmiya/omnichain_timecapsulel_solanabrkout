{"ast":null,"code":"import { universalSignatureValidatorAbi } from '../../constants/abis.js';\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js';\nimport { CallExecutionError } from '../../errors/contract.js';\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js';\nimport { getAddress } from '../../utils/address/getAddress.js';\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js';\nimport { isHex } from '../../utils/data/isHex.js';\nimport { bytesToHex } from '../../utils/encoding/toHex.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { encodeFunctionData, hexToBool } from '../../utils/index.js';\nimport { isErc6492Signature } from '../../utils/signature/isErc6492Signature.js';\nimport { recoverAddress } from '../../utils/signature/recoverAddress.js';\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js';\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js';\nimport { call } from './call.js';\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash(client, parameters) {\n  const {\n    address,\n    factory,\n    factoryData,\n    hash,\n    signature,\n    universalSignatureVerifierAddress = client.chain?.contracts?.universalSignatureVerifier?.address,\n    ...rest\n  } = parameters;\n  const signatureHex = (() => {\n    if (isHex(signature)) return signature;\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature) return serializeSignature(signature);\n    return bytesToHex(signature);\n  })();\n  const wrappedSignature = await (async () => {\n    // If no `factory` or `factoryData` is provided, it is assumed that the\n    // address is not a Smart Account, or the Smart Account is already deployed.\n    if (!factory && !factoryData) return signatureHex;\n    // If the signature is already wrapped, return the signature.\n    if (isErc6492Signature(signatureHex)) return signatureHex;\n    // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\n    // to perform counterfactual validation.\n    return serializeErc6492Signature({\n      address: factory,\n      data: factoryData,\n      signature: signatureHex\n    });\n  })();\n  try {\n    const args = universalSignatureVerifierAddress ? {\n      to: universalSignatureVerifierAddress,\n      data: encodeFunctionData({\n        abi: universalSignatureValidatorAbi,\n        functionName: 'isValidSig',\n        args: [address, hash, wrappedSignature]\n      }),\n      ...rest\n    } : {\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, wrappedSignature],\n        bytecode: universalSignatureValidatorByteCode\n      }),\n      ...rest\n    };\n    const {\n      data\n    } = await getAction(client, call, 'call')(args);\n    return hexToBool(data ?? '0x0');\n  } catch (error) {\n    // Fallback attempt to verify the signature via ECDSA recovery.\n    try {\n      const verified = isAddressEqual(getAddress(address), await recoverAddress({\n        hash,\n        signature\n      }));\n      if (verified) return true;\n    } catch {}\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["universalSignatureValidatorAbi","universalSignatureValidatorByteCode","CallExecutionError","encodeDeployData","getAddress","isAddressEqual","isHex","bytesToHex","getAction","encodeFunctionData","hexToBool","isErc6492Signature","recoverAddress","serializeErc6492Signature","serializeSignature","call","verifyHash","client","parameters","address","factory","factoryData","hash","signature","universalSignatureVerifierAddress","chain","contracts","universalSignatureVerifier","rest","signatureHex","wrappedSignature","data","args","to","abi","functionName","bytecode","error","verified"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\verifyHash.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalSignatureValidatorAbi } from '../../constants/abis.js'\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport type { InvalidHexBooleanError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type EncodeDeployDataErrorType,\n  encodeDeployData,\n} from '../../utils/abi/encodeDeployData.js'\nimport { getAddress } from '../../utils/address/getAddress.js'\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type ToHexErrorType, bytesToHex } from '../../utils/encoding/toHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { encodeFunctionData, hexToBool } from '../../utils/index.js'\nimport { isErc6492Signature } from '../../utils/signature/isErc6492Signature.js'\nimport { recoverAddress } from '../../utils/signature/recoverAddress.js'\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js'\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type VerifyHashParameters = Pick<\n  CallParameters,\n  'blockNumber' | 'blockTag'\n> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hex\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray | Signature\n  universalSignatureVerifierAddress?: Address | undefined\n} & OneOf<{ factory: Address; factoryData: Hex } | {}>\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | CallErrorType\n  | IsHexErrorType\n  | ToHexErrorType\n  | InvalidHexBooleanError\n  | EncodeDeployDataErrorType\n  | ErrorType\n\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifyHashParameters,\n): Promise<VerifyHashReturnType> {\n  const {\n    address,\n    factory,\n    factoryData,\n    hash,\n    signature,\n    universalSignatureVerifierAddress = client.chain?.contracts\n      ?.universalSignatureVerifier?.address,\n    ...rest\n  } = parameters\n\n  const signatureHex = (() => {\n    if (isHex(signature)) return signature\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature)\n      return serializeSignature(signature)\n    return bytesToHex(signature)\n  })()\n\n  const wrappedSignature = await (async () => {\n    // If no `factory` or `factoryData` is provided, it is assumed that the\n    // address is not a Smart Account, or the Smart Account is already deployed.\n    if (!factory && !factoryData) return signatureHex\n\n    // If the signature is already wrapped, return the signature.\n    if (isErc6492Signature(signatureHex)) return signatureHex\n\n    // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\n    // to perform counterfactual validation.\n    return serializeErc6492Signature({\n      address: factory!,\n      data: factoryData!,\n      signature: signatureHex,\n    })\n  })()\n\n  try {\n    const args = universalSignatureVerifierAddress\n      ? ({\n          to: universalSignatureVerifierAddress,\n          data: encodeFunctionData({\n            abi: universalSignatureValidatorAbi,\n            functionName: 'isValidSig',\n            args: [address, hash, wrappedSignature],\n          }),\n          ...rest,\n        } as unknown as CallParameters)\n      : ({\n          data: encodeDeployData({\n            abi: universalSignatureValidatorAbi,\n            args: [address, hash, wrappedSignature],\n            bytecode: universalSignatureValidatorByteCode,\n          }),\n          ...rest,\n        } as unknown as CallParameters)\n\n    const { data } = await getAction(client, call, 'call')(args)\n\n    return hexToBool(data ?? '0x0')\n  } catch (error) {\n    // Fallback attempt to verify the signature via ECDSA recovery.\n    try {\n      const verified = isAddressEqual(\n        getAddress(address),\n        await recoverAddress({ hash, signature }),\n      )\n      if (verified) return true\n    } catch {}\n\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false\n    }\n\n    throw error\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}