{"ast":null,"code":"import { createDefaultAddressSelector, createDefaultAuthorizationResultCache, createDefaultWalletNotFoundHandler, SolanaMobileWalletAdapter, SolanaMobileWalletAdapterWalletName } from '@solana-mobile/wallet-adapter-mobile';\nimport { useStandardWalletAdapters } from '@solana/wallet-standard-wallet-adapter-react';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport getEnvironment, { Environment } from './getEnvironment.js';\nimport getInferredClusterFromEndpoint from './getInferredClusterFromEndpoint.js';\nimport { useConnection } from './useConnection.js';\nimport { useLocalStorage } from './useLocalStorage.js';\nimport { WalletProviderBase } from './WalletProviderBase.js';\nlet _userAgent;\nfunction getUserAgent() {\n  if (_userAgent === undefined) {\n    _userAgent = globalThis.navigator?.userAgent ?? null;\n  }\n  return _userAgent;\n}\nfunction getIsMobile(adapters) {\n  const userAgentString = getUserAgent();\n  return getEnvironment({\n    adapters,\n    userAgentString\n  }) === Environment.MOBILE_WEB;\n}\nfunction getUriForAppIdentity() {\n  const location = globalThis.location;\n  if (!location) return;\n  return `${location.protocol}//${location.host}`;\n}\nexport function WalletProvider({\n  children,\n  wallets: adapters,\n  autoConnect,\n  localStorageKey = 'walletName',\n  onError\n}) {\n  const {\n    connection\n  } = useConnection();\n  const adaptersWithStandardAdapters = useStandardWalletAdapters(adapters);\n  const mobileWalletAdapter = useMemo(() => {\n    if (!getIsMobile(adaptersWithStandardAdapters)) {\n      return null;\n    }\n    const existingMobileWalletAdapter = adaptersWithStandardAdapters.find(adapter => adapter.name === SolanaMobileWalletAdapterWalletName);\n    if (existingMobileWalletAdapter) {\n      return existingMobileWalletAdapter;\n    }\n    return new SolanaMobileWalletAdapter({\n      addressSelector: createDefaultAddressSelector(),\n      appIdentity: {\n        uri: getUriForAppIdentity()\n      },\n      authorizationResultCache: createDefaultAuthorizationResultCache(),\n      cluster: getInferredClusterFromEndpoint(connection?.rpcEndpoint),\n      onWalletNotFound: createDefaultWalletNotFoundHandler()\n    });\n  }, [adaptersWithStandardAdapters, connection?.rpcEndpoint]);\n  const adaptersWithMobileWalletAdapter = useMemo(() => {\n    if (mobileWalletAdapter == null || adaptersWithStandardAdapters.indexOf(mobileWalletAdapter) !== -1) {\n      return adaptersWithStandardAdapters;\n    }\n    return [mobileWalletAdapter, ...adaptersWithStandardAdapters];\n  }, [adaptersWithStandardAdapters, mobileWalletAdapter]);\n  const [walletName, setWalletName] = useLocalStorage(localStorageKey, null);\n  const adapter = useMemo(() => adaptersWithMobileWalletAdapter.find(a => a.name === walletName) ?? null, [adaptersWithMobileWalletAdapter, walletName]);\n  const changeWallet = useCallback(nextWalletName => {\n    if (walletName === nextWalletName) return;\n    if (adapter &&\n    // Selecting a wallet other than the mobile wallet adapter is not\n    // sufficient reason to call `disconnect` on the mobile wallet adapter.\n    // Calling `disconnect` on the mobile wallet adapter causes the entire\n    // authorization store to be wiped.\n    adapter.name !== SolanaMobileWalletAdapterWalletName) {\n      adapter.disconnect();\n    }\n    setWalletName(nextWalletName);\n  }, [adapter, setWalletName, walletName]);\n  useEffect(() => {\n    if (!adapter) return;\n    function handleDisconnect() {\n      if (isUnloadingRef.current) return;\n      setWalletName(null);\n    }\n    adapter.on('disconnect', handleDisconnect);\n    return () => {\n      adapter.off('disconnect', handleDisconnect);\n    };\n  }, [adapter, adaptersWithStandardAdapters, setWalletName, walletName]);\n  const hasUserSelectedAWallet = useRef(false);\n  const handleAutoConnectRequest = useMemo(() => {\n    if (!autoConnect || !adapter) return;\n    return async () => {\n      // If autoConnect is true or returns true, use the default autoConnect behavior.\n      if (autoConnect === true || (await autoConnect(adapter))) {\n        if (hasUserSelectedAWallet.current) {\n          await adapter.connect();\n        } else {\n          await adapter.autoConnect();\n        }\n      }\n    };\n  }, [autoConnect, adapter]);\n  const isUnloadingRef = useRef(false);\n  useEffect(() => {\n    if (walletName === SolanaMobileWalletAdapterWalletName && getIsMobile(adaptersWithStandardAdapters)) {\n      isUnloadingRef.current = false;\n      return;\n    }\n    function handleBeforeUnload() {\n      isUnloadingRef.current = true;\n    }\n    /**\n     * Some wallets fire disconnection events when the window unloads. Since there's no way to\n     * distinguish between a disconnection event received because a user initiated it, and one\n     * that was received because they've closed the window, we have to track window unload\n     * events themselves. Downstream components use this information to decide whether to act\n     * upon or drop wallet events and errors.\n     */\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [adaptersWithStandardAdapters, walletName]);\n  const handleConnectError = useCallback(() => {\n    if (adapter) {\n      // If any error happens while connecting, unset the adapter.\n      changeWallet(null);\n    }\n  }, [adapter, changeWallet]);\n  const selectWallet = useCallback(walletName => {\n    hasUserSelectedAWallet.current = true;\n    changeWallet(walletName);\n  }, [changeWallet]);\n  return React.createElement(WalletProviderBase, {\n    wallets: adaptersWithMobileWalletAdapter,\n    adapter: adapter,\n    isUnloadingRef: isUnloadingRef,\n    onAutoConnectRequest: handleAutoConnectRequest,\n    onConnectError: handleConnectError,\n    onError: onError,\n    onSelectWallet: selectWallet\n  }, children);\n}","map":{"version":3,"names":["createDefaultAddressSelector","createDefaultAuthorizationResultCache","createDefaultWalletNotFoundHandler","SolanaMobileWalletAdapter","SolanaMobileWalletAdapterWalletName","useStandardWalletAdapters","React","useCallback","useEffect","useMemo","useRef","getEnvironment","Environment","getInferredClusterFromEndpoint","useConnection","useLocalStorage","WalletProviderBase","_userAgent","getUserAgent","undefined","globalThis","navigator","userAgent","getIsMobile","adapters","userAgentString","MOBILE_WEB","getUriForAppIdentity","location","protocol","host","WalletProvider","children","wallets","autoConnect","localStorageKey","onError","connection","adaptersWithStandardAdapters","mobileWalletAdapter","existingMobileWalletAdapter","find","adapter","name","addressSelector","appIdentity","uri","authorizationResultCache","cluster","rpcEndpoint","onWalletNotFound","adaptersWithMobileWalletAdapter","indexOf","walletName","setWalletName","a","changeWallet","nextWalletName","disconnect","handleDisconnect","isUnloadingRef","current","on","off","hasUserSelectedAWallet","handleAutoConnectRequest","connect","handleBeforeUnload","window","addEventListener","removeEventListener","handleConnectError","selectWallet","createElement","onAutoConnectRequest","onConnectError","onSelectWallet"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@solana\\wallet-adapter-react\\src\\WalletProvider.tsx"],"sourcesContent":["import {\n    createDefaultAddressSelector,\n    createDefaultAuthorizationResultCache,\n    createDefaultWalletNotFoundHandler,\n    SolanaMobileWalletAdapter,\n    SolanaMobileWalletAdapterWalletName,\n} from '@solana-mobile/wallet-adapter-mobile';\nimport { type Adapter, type WalletError, type WalletName } from '@solana/wallet-adapter-base';\nimport { useStandardWalletAdapters } from '@solana/wallet-standard-wallet-adapter-react';\nimport React, { type ReactNode, useCallback, useEffect, useMemo, useRef } from 'react';\nimport getEnvironment, { Environment } from './getEnvironment.js';\nimport getInferredClusterFromEndpoint from './getInferredClusterFromEndpoint.js';\nimport { useConnection } from './useConnection.js';\nimport { useLocalStorage } from './useLocalStorage.js';\nimport { WalletProviderBase } from './WalletProviderBase.js';\n\nexport interface WalletProviderProps {\n    children: ReactNode;\n    wallets: Adapter[];\n    autoConnect?: boolean | ((adapter: Adapter) => Promise<boolean>);\n    localStorageKey?: string;\n    onError?: (error: WalletError, adapter?: Adapter) => void;\n}\n\nlet _userAgent: string | null;\nfunction getUserAgent() {\n    if (_userAgent === undefined) {\n        _userAgent = globalThis.navigator?.userAgent ?? null;\n    }\n    return _userAgent;\n}\n\nfunction getIsMobile(adapters: Adapter[]) {\n    const userAgentString = getUserAgent();\n    return getEnvironment({ adapters, userAgentString }) === Environment.MOBILE_WEB;\n}\n\nfunction getUriForAppIdentity() {\n    const location = globalThis.location;\n    if (!location) return;\n    return `${location.protocol}//${location.host}`;\n}\n\nexport function WalletProvider({\n    children,\n    wallets: adapters,\n    autoConnect,\n    localStorageKey = 'walletName',\n    onError,\n}: WalletProviderProps) {\n    const { connection } = useConnection();\n    const adaptersWithStandardAdapters = useStandardWalletAdapters(adapters);\n    const mobileWalletAdapter = useMemo(() => {\n        if (!getIsMobile(adaptersWithStandardAdapters)) {\n            return null;\n        }\n        const existingMobileWalletAdapter = adaptersWithStandardAdapters.find(\n            (adapter) => adapter.name === SolanaMobileWalletAdapterWalletName\n        );\n        if (existingMobileWalletAdapter) {\n            return existingMobileWalletAdapter;\n        }\n        return new SolanaMobileWalletAdapter({\n            addressSelector: createDefaultAddressSelector(),\n            appIdentity: {\n                uri: getUriForAppIdentity(),\n            },\n            authorizationResultCache: createDefaultAuthorizationResultCache(),\n            cluster: getInferredClusterFromEndpoint(connection?.rpcEndpoint),\n            onWalletNotFound: createDefaultWalletNotFoundHandler(),\n        });\n    }, [adaptersWithStandardAdapters, connection?.rpcEndpoint]);\n    const adaptersWithMobileWalletAdapter = useMemo(() => {\n        if (mobileWalletAdapter == null || adaptersWithStandardAdapters.indexOf(mobileWalletAdapter) !== -1) {\n            return adaptersWithStandardAdapters;\n        }\n        return [mobileWalletAdapter, ...adaptersWithStandardAdapters];\n    }, [adaptersWithStandardAdapters, mobileWalletAdapter]);\n    const [walletName, setWalletName] = useLocalStorage<WalletName | null>(localStorageKey, null);\n    const adapter = useMemo(\n        () => adaptersWithMobileWalletAdapter.find((a) => a.name === walletName) ?? null,\n        [adaptersWithMobileWalletAdapter, walletName]\n    );\n    const changeWallet = useCallback(\n        (nextWalletName: WalletName<string> | null) => {\n            if (walletName === nextWalletName) return;\n            if (\n                adapter &&\n                // Selecting a wallet other than the mobile wallet adapter is not\n                // sufficient reason to call `disconnect` on the mobile wallet adapter.\n                // Calling `disconnect` on the mobile wallet adapter causes the entire\n                // authorization store to be wiped.\n                adapter.name !== SolanaMobileWalletAdapterWalletName\n            ) {\n                adapter.disconnect();\n            }\n            setWalletName(nextWalletName);\n        },\n        [adapter, setWalletName, walletName]\n    );\n    useEffect(() => {\n        if (!adapter) return;\n        function handleDisconnect() {\n            if (isUnloadingRef.current) return;\n            setWalletName(null);\n        }\n        adapter.on('disconnect', handleDisconnect);\n        return () => {\n            adapter.off('disconnect', handleDisconnect);\n        };\n    }, [adapter, adaptersWithStandardAdapters, setWalletName, walletName]);\n    const hasUserSelectedAWallet = useRef(false);\n    const handleAutoConnectRequest = useMemo(() => {\n        if (!autoConnect || !adapter) return;\n        return async () => {\n            // If autoConnect is true or returns true, use the default autoConnect behavior.\n            if (autoConnect === true || (await autoConnect(adapter))) {\n                if (hasUserSelectedAWallet.current) {\n                    await adapter.connect();\n                } else {\n                    await adapter.autoConnect();\n                }\n            }\n        };\n    }, [autoConnect, adapter]);\n    const isUnloadingRef = useRef(false);\n    useEffect(() => {\n        if (walletName === SolanaMobileWalletAdapterWalletName && getIsMobile(adaptersWithStandardAdapters)) {\n            isUnloadingRef.current = false;\n            return;\n        }\n        function handleBeforeUnload() {\n            isUnloadingRef.current = true;\n        }\n        /**\n         * Some wallets fire disconnection events when the window unloads. Since there's no way to\n         * distinguish between a disconnection event received because a user initiated it, and one\n         * that was received because they've closed the window, we have to track window unload\n         * events themselves. Downstream components use this information to decide whether to act\n         * upon or drop wallet events and errors.\n         */\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, [adaptersWithStandardAdapters, walletName]);\n    const handleConnectError = useCallback(() => {\n        if (adapter) {\n            // If any error happens while connecting, unset the adapter.\n            changeWallet(null);\n        }\n    }, [adapter, changeWallet]);\n    const selectWallet = useCallback(\n        (walletName: WalletName | null) => {\n            hasUserSelectedAWallet.current = true;\n            changeWallet(walletName);\n        },\n        [changeWallet]\n    );\n    return (\n        <WalletProviderBase\n            wallets={adaptersWithMobileWalletAdapter}\n            adapter={adapter}\n            isUnloadingRef={isUnloadingRef}\n            onAutoConnectRequest={handleAutoConnectRequest}\n            onConnectError={handleConnectError}\n            onError={onError}\n            onSelectWallet={selectWallet}\n        >\n            {children}\n        </WalletProviderBase>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}