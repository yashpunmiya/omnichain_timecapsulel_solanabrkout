{"ast":null,"code":"/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n * const block = await fetchFromProvider(provider, params)\n * ```\n */\nexport const fetchFromProvider = async (url, params) => {\n  const data = JSON.stringify({\n    method: params.method,\n    params: params.params,\n    jsonrpc: '2.0',\n    id: 1\n  });\n  const res = await fetch(url, {\n    headers: {\n      'content-type': 'application/json'\n    },\n    method: 'POST',\n    body: data\n  });\n  if (!res.ok) {\n    throw new Error(`JSONRpcError: ${JSON.stringify({\n      method: params.method,\n      status: res.status,\n      message: await res.text().catch(() => {\n        return 'Could not parse error message likely because of a network error';\n      })\n    }, null, 2)}`);\n  }\n  const json = await res.json();\n  // TODO we should check json.error here\n  return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nexport const getProvider = provider => {\n  if (typeof provider === 'string') {\n    return provider;\n  } else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n    return provider._getConnection().url;\n  } else {\n    throw new Error('Must provide valid provider URL or Web3Provider');\n  }\n};\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}