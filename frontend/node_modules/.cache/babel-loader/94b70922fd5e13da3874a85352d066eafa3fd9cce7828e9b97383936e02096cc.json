{"ast":null,"code":"const colorString = require('color-string');\nconst convert = require('color-convert');\nconst skippedModels = [\n// To be honest, I don't really feel like keyword belongs in color convert, but eh.\n'keyword',\n// Gray conflicts with some method names, and has its own method defined.\n'gray',\n// Shouldn't really be in color-convert either...\n'hex'];\nconst hashedModelKeys = {};\nfor (const model of Object.keys(convert)) {\n  hashedModelKeys[[...convert[model].labels].sort().join('')] = model;\n}\nconst limiters = {};\nfunction Color(object, model) {\n  if (!(this instanceof Color)) {\n    return new Color(object, model);\n  }\n  if (model && model in skippedModels) {\n    model = null;\n  }\n  if (model && !(model in convert)) {\n    throw new Error('Unknown model: ' + model);\n  }\n  let i;\n  let channels;\n  if (object == null) {\n    // eslint-disable-line no-eq-null,eqeqeq\n    this.model = 'rgb';\n    this.color = [0, 0, 0];\n    this.valpha = 1;\n  } else if (object instanceof Color) {\n    this.model = object.model;\n    this.color = [...object.color];\n    this.valpha = object.valpha;\n  } else if (typeof object === 'string') {\n    const result = colorString.get(object);\n    if (result === null) {\n      throw new Error('Unable to parse color from string: ' + object);\n    }\n    this.model = result.model;\n    channels = convert[this.model].channels;\n    this.color = result.value.slice(0, channels);\n    this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n  } else if (object.length > 0) {\n    this.model = model || 'rgb';\n    channels = convert[this.model].channels;\n    const newArray = Array.prototype.slice.call(object, 0, channels);\n    this.color = zeroArray(newArray, channels);\n    this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;\n  } else if (typeof object === 'number') {\n    // This is always RGB - can be converted later on.\n    this.model = 'rgb';\n    this.color = [object >> 16 & 0xFF, object >> 8 & 0xFF, object & 0xFF];\n    this.valpha = 1;\n  } else {\n    this.valpha = 1;\n    const keys = Object.keys(object);\n    if ('alpha' in object) {\n      keys.splice(keys.indexOf('alpha'), 1);\n      this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;\n    }\n    const hashedKeys = keys.sort().join('');\n    if (!(hashedKeys in hashedModelKeys)) {\n      throw new Error('Unable to parse color from object: ' + JSON.stringify(object));\n    }\n    this.model = hashedModelKeys[hashedKeys];\n    const {\n      labels\n    } = convert[this.model];\n    const color = [];\n    for (i = 0; i < labels.length; i++) {\n      color.push(object[labels[i]]);\n    }\n    this.color = zeroArray(color);\n  }\n\n  // Perform limitations (clamping, etc.)\n  if (limiters[this.model]) {\n    channels = convert[this.model].channels;\n    for (i = 0; i < channels; i++) {\n      const limit = limiters[this.model][i];\n      if (limit) {\n        this.color[i] = limit(this.color[i]);\n      }\n    }\n  }\n  this.valpha = Math.max(0, Math.min(1, this.valpha));\n  if (Object.freeze) {\n    Object.freeze(this);\n  }\n}\nColor.prototype = {\n  toString() {\n    return this.string();\n  },\n  toJSON() {\n    return this[this.model]();\n  },\n  string(places) {\n    let self = this.model in colorString.to ? this : this.rgb();\n    self = self.round(typeof places === 'number' ? places : 1);\n    const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n    return colorString.to[self.model](args);\n  },\n  percentString(places) {\n    const self = this.rgb().round(typeof places === 'number' ? places : 1);\n    const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n    return colorString.to.rgb.percent(args);\n  },\n  array() {\n    return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];\n  },\n  object() {\n    const result = {};\n    const {\n      channels\n    } = convert[this.model];\n    const {\n      labels\n    } = convert[this.model];\n    for (let i = 0; i < channels; i++) {\n      result[labels[i]] = this.color[i];\n    }\n    if (this.valpha !== 1) {\n      result.alpha = this.valpha;\n    }\n    return result;\n  },\n  unitArray() {\n    const rgb = this.rgb().color;\n    rgb[0] /= 255;\n    rgb[1] /= 255;\n    rgb[2] /= 255;\n    if (this.valpha !== 1) {\n      rgb.push(this.valpha);\n    }\n    return rgb;\n  },\n  unitObject() {\n    const rgb = this.rgb().object();\n    rgb.r /= 255;\n    rgb.g /= 255;\n    rgb.b /= 255;\n    if (this.valpha !== 1) {\n      rgb.alpha = this.valpha;\n    }\n    return rgb;\n  },\n  round(places) {\n    places = Math.max(places || 0, 0);\n    return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);\n  },\n  alpha(value) {\n    if (value !== undefined) {\n      return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);\n    }\n    return this.valpha;\n  },\n  // Rgb\n  red: getset('rgb', 0, maxfn(255)),\n  green: getset('rgb', 1, maxfn(255)),\n  blue: getset('rgb', 2, maxfn(255)),\n  hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => (value % 360 + 360) % 360),\n  saturationl: getset('hsl', 1, maxfn(100)),\n  lightness: getset('hsl', 2, maxfn(100)),\n  saturationv: getset('hsv', 1, maxfn(100)),\n  value: getset('hsv', 2, maxfn(100)),\n  chroma: getset('hcg', 1, maxfn(100)),\n  gray: getset('hcg', 2, maxfn(100)),\n  white: getset('hwb', 1, maxfn(100)),\n  wblack: getset('hwb', 2, maxfn(100)),\n  cyan: getset('cmyk', 0, maxfn(100)),\n  magenta: getset('cmyk', 1, maxfn(100)),\n  yellow: getset('cmyk', 2, maxfn(100)),\n  black: getset('cmyk', 3, maxfn(100)),\n  x: getset('xyz', 0, maxfn(95.047)),\n  y: getset('xyz', 1, maxfn(100)),\n  z: getset('xyz', 2, maxfn(108.833)),\n  l: getset('lab', 0, maxfn(100)),\n  a: getset('lab', 1),\n  b: getset('lab', 2),\n  keyword(value) {\n    if (value !== undefined) {\n      return new Color(value);\n    }\n    return convert[this.model].keyword(this.color);\n  },\n  hex(value) {\n    if (value !== undefined) {\n      return new Color(value);\n    }\n    return colorString.to.hex(this.rgb().round().color);\n  },\n  hexa(value) {\n    if (value !== undefined) {\n      return new Color(value);\n    }\n    const rgbArray = this.rgb().round().color;\n    let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\n    if (alphaHex.length === 1) {\n      alphaHex = '0' + alphaHex;\n    }\n    return colorString.to.hex(rgbArray) + alphaHex;\n  },\n  rgbNumber() {\n    const rgb = this.rgb().color;\n    return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;\n  },\n  luminosity() {\n    // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n    const rgb = this.rgb().color;\n    const lum = [];\n    for (const [i, element] of rgb.entries()) {\n      const chan = element / 255;\n      lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n    }\n    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n  },\n  contrast(color2) {\n    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    const lum1 = this.luminosity();\n    const lum2 = color2.luminosity();\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  },\n  level(color2) {\n    // https://www.w3.org/TR/WCAG/#contrast-enhanced\n    const contrastRatio = this.contrast(color2);\n    if (contrastRatio >= 7) {\n      return 'AAA';\n    }\n    return contrastRatio >= 4.5 ? 'AA' : '';\n  },\n  isDark() {\n    // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n    const rgb = this.rgb().color;\n    const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;\n    return yiq < 128;\n  },\n  isLight() {\n    return !this.isDark();\n  },\n  negate() {\n    const rgb = this.rgb();\n    for (let i = 0; i < 3; i++) {\n      rgb.color[i] = 255 - rgb.color[i];\n    }\n    return rgb;\n  },\n  lighten(ratio) {\n    const hsl = this.hsl();\n    hsl.color[2] += hsl.color[2] * ratio;\n    return hsl;\n  },\n  darken(ratio) {\n    const hsl = this.hsl();\n    hsl.color[2] -= hsl.color[2] * ratio;\n    return hsl;\n  },\n  saturate(ratio) {\n    const hsl = this.hsl();\n    hsl.color[1] += hsl.color[1] * ratio;\n    return hsl;\n  },\n  desaturate(ratio) {\n    const hsl = this.hsl();\n    hsl.color[1] -= hsl.color[1] * ratio;\n    return hsl;\n  },\n  whiten(ratio) {\n    const hwb = this.hwb();\n    hwb.color[1] += hwb.color[1] * ratio;\n    return hwb;\n  },\n  blacken(ratio) {\n    const hwb = this.hwb();\n    hwb.color[2] += hwb.color[2] * ratio;\n    return hwb;\n  },\n  grayscale() {\n    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n    const rgb = this.rgb().color;\n    const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n    return Color.rgb(value, value, value);\n  },\n  fade(ratio) {\n    return this.alpha(this.valpha - this.valpha * ratio);\n  },\n  opaquer(ratio) {\n    return this.alpha(this.valpha + this.valpha * ratio);\n  },\n  rotate(degrees) {\n    const hsl = this.hsl();\n    let hue = hsl.color[0];\n    hue = (hue + degrees) % 360;\n    hue = hue < 0 ? 360 + hue : hue;\n    hsl.color[0] = hue;\n    return hsl;\n  },\n  mix(mixinColor, weight) {\n    // Ported from sass implementation in C\n    // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n    if (!mixinColor || !mixinColor.rgb) {\n      throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n    }\n    const color1 = mixinColor.rgb();\n    const color2 = this.rgb();\n    const p = weight === undefined ? 0.5 : weight;\n    const w = 2 * p - 1;\n    const a = color1.alpha() - color2.alpha();\n    const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;\n    const w2 = 1 - w1;\n    return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));\n  }\n};\n\n// Model conversion methods and static constructors\nfor (const model of Object.keys(convert)) {\n  if (skippedModels.includes(model)) {\n    continue;\n  }\n  const {\n    channels\n  } = convert[model];\n\n  // Conversion methods\n  Color.prototype[model] = function (...args) {\n    if (this.model === model) {\n      return new Color(this);\n    }\n    if (args.length > 0) {\n      return new Color(args, model);\n    }\n    return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);\n  };\n\n  // 'static' construction methods\n  Color[model] = function (...args) {\n    let color = args[0];\n    if (typeof color === 'number') {\n      color = zeroArray(args, channels);\n    }\n    return new Color(color, model);\n  };\n}\nfunction roundTo(number, places) {\n  return Number(number.toFixed(places));\n}\nfunction roundToPlace(places) {\n  return function (number) {\n    return roundTo(number, places);\n  };\n}\nfunction getset(model, channel, modifier) {\n  model = Array.isArray(model) ? model : [model];\n  for (const m of model) {\n    (limiters[m] || (limiters[m] = []))[channel] = modifier;\n  }\n  model = model[0];\n  return function (value) {\n    let result;\n    if (value !== undefined) {\n      if (modifier) {\n        value = modifier(value);\n      }\n      result = this[model]();\n      result.color[channel] = value;\n      return result;\n    }\n    result = this[model]().color[channel];\n    if (modifier) {\n      result = modifier(result);\n    }\n    return result;\n  };\n}\nfunction maxfn(max) {\n  return function (v) {\n    return Math.max(0, Math.min(max, v));\n  };\n}\nfunction assertArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\nfunction zeroArray(array, length) {\n  for (let i = 0; i < length; i++) {\n    if (typeof array[i] !== 'number') {\n      array[i] = 0;\n    }\n  }\n  return array;\n}\nmodule.exports = Color;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}