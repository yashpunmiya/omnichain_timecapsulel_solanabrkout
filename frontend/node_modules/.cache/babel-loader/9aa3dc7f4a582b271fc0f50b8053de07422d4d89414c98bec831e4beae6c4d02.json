{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMessageFromType = exports.createMessageFromName = exports.isPrimitiveField = void 0;\nexports.parseConfigure = parseConfigure;\nconst tslib_1 = require(\"tslib\");\nconst protobuf = tslib_1.__importStar(require(\"protobufjs/light\"));\nconst primitiveTypes = ['bool', 'string', 'bytes', 'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64', 'sfixed32', 'sfixed64', 'double', 'float'];\nconst isPrimitiveField = field => primitiveTypes.includes(field);\nexports.isPrimitiveField = isPrimitiveField;\nfunction parseConfigure(data) {\n  if (typeof data === 'string') {\n    return protobuf.Root.fromJSON(JSON.parse(data));\n  }\n  return protobuf.Root.fromJSON(data);\n}\nconst createMessageFromName = (messages, name) => {\n  const Message = messages.lookupType(name);\n  const messageTypes = messages.lookupEnum('MessageType');\n  let messageTypeId = messageTypes.values[name];\n  if (typeof messageTypeId !== 'number' && Message.options) {\n    messageTypeId = Message.options['(wire_type)'];\n  }\n  return {\n    Message,\n    messageType: messageTypeId ?? name\n  };\n};\nexports.createMessageFromName = createMessageFromName;\nconst createMessageFromType = (messages, messageType) => {\n  if (typeof messageType === 'string') {\n    const Message = messages.lookupType(messageType);\n    return {\n      Message,\n      messageName: messageType\n    };\n  }\n  const messageTypes = messages.lookupEnum('MessageType');\n  const messageName = messageTypes.valuesById[messageType];\n  const Message = messages.lookupType(messageName);\n  return {\n    Message,\n    messageName\n  };\n};\nexports.createMessageFromType = createMessageFromType;\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}