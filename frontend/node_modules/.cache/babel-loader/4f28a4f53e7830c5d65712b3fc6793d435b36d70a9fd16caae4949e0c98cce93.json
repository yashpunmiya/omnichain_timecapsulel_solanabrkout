{"ast":null,"code":"import { publicKeyToAddress } from '../../accounts/utils/publicKeyToAddress.js';\nimport { recoverPublicKey } from './recoverPublicKey.js';\nexport async function recoverAddress({\n  hash,\n  signature\n}) {\n  return publicKeyToAddress(await recoverPublicKey({\n    hash: hash,\n    signature\n  }));\n}","map":{"version":3,"names":["publicKeyToAddress","recoverPublicKey","recoverAddress","hash","signature"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\signature\\recoverAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { publicKeyToAddress } from '../../accounts/utils/publicKeyToAddress.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { recoverPublicKey } from './recoverPublicKey.js'\n\nexport type RecoverAddressParameters = {\n  hash: Hex | ByteArray\n  signature: Hex | ByteArray | Signature\n}\n\nexport type RecoverAddressReturnType = Address\n\nexport type RecoverAddressErrorType = ErrorType\n\nexport async function recoverAddress({\n  hash,\n  signature,\n}: RecoverAddressParameters): Promise<RecoverAddressReturnType> {\n  return publicKeyToAddress(await recoverPublicKey({ hash: hash, signature }))\n}\n"],"mappings":"AAEA,SAASA,kBAAkB,QAAQ,4CAA4C;AAI/E,SAASC,gBAAgB,QAAQ,uBAAuB;AAWxD,OAAO,eAAeC,cAAcA,CAAC;EACnCC,IAAI;EACJC;AAAS,CACgB;EACzB,OAAOJ,kBAAkB,CAAC,MAAMC,gBAAgB,CAAC;IAAEE,IAAI,EAAEA,IAAI;IAAEC;EAAS,CAAE,CAAC,CAAC;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}