{"ast":null,"code":"/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject } from \"./utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = /* @__PURE__ */BigInt(2),\n  _3n = /* @__PURE__ */BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */BigInt(4),\n  _5n = /* @__PURE__ */BigInt(5),\n  _8n = /* @__PURE__ */BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n  return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\nfunction sqrt5mod8(Fp, n) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n  // Initialization (precomputation).\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow(Fp, n) {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\nexport function validateField(field) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger'\n  };\n  const opts = FIELD_FIELDS.reduce((map, val) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return {\n    nBitLength: _nBitLength,\n    nByteLength\n  };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const {\n    nBitLength: BITS,\n    nByteLength: BYTES\n  } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP; // cached sqrtP\n  const f = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: num => mod(num, ORDER),\n    isValid: num => {\n      if (typeof num !== 'bigint') throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: num => num === _0n,\n    isOdd: num => (num & _1n) === _1n,\n    neg: num => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n    sqr: num => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n    // Same as above, but doesn't normalize\n    sqrN: num => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n    inv: num => invert(num, ORDER),\n    sqrt: redef.sqrt || (n => {\n      if (!sqrtP) sqrtP = FpSqrt(ORDER);\n      return sqrtP(f, n);\n    }),\n    toBytes: num => isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),\n    fromBytes: bytes => {\n      if (bytes.length !== BYTES) throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: lst => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => c ? b : a\n  });\n  return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024) throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}","map":{"version":3,"names":["anumber","bitMask","bytesToNumberBE","bytesToNumberLE","ensureBytes","numberToBytesBE","numberToBytesLE","validateObject","_0n","BigInt","_1n","_2n","_3n","_4n","_5n","_8n","mod","a","b","result","pow","num","power","modulo","FpPow","Field","pow2","x","res","invert","number","Error","y","u","v","q","r","m","n","gcd","sqrt3mod4","Fp","p1div4","ORDER","root","eql","sqr","sqrt5mod8","p5div8","n2","mul","nv","i","sub","ONE","tonelliShanks","P","Q","S","Z","_Fp","FpLegendre","cc","Q1div2","tonelliSlow","is0","M","c","t","R","ZERO","t_tmp","exponent","FpSqrt","isNegativeLE","FIELD_FIELDS","validateField","field","initial","MASK","BYTES","BITS","opts","reduce","map","val","p","d","FpInvertBatch","nums","passZero","inverted","Array","length","fill","undefined","multipliedAcc","acc","invertedAcc","inv","reduceRight","FpDiv","lhs","rhs","p1mod2","powered","yes","zero","no","neg","FpIsSquare","l","nLength","nBitLength","_nBitLength","toString","nByteLength","Math","ceil","bitLen","isLE","redef","sqrtP","f","Object","freeze","create","isValid","isOdd","add","div","sqrN","addN","subN","mulN","sqrt","toBytes","fromBytes","bytes","invertBatch","lst","cmov","FpSqrtOdd","elm","FpSqrtEven","hashToPrivateScalar","hash","groupOrder","hashLen","minLen","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","key","len","fieldLen","reduced"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@noble\\curves\\src\\abstract\\modular.ts"],"sourcesContent":["/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n"],"mappings":"AAAA;;;;;;AAMA;AACA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SACEC,OAAO,EACPC,eAAe,EACfC,eAAe,EACfC,WAAW,EACXC,eAAe,EACfC,eAAe,EACfC,cAAc,QACT,YAAY;AAEnB;AACA,MAAMC,GAAG,GAAGC,MAAM,CAAC,CAAC,CAAC;EAAEC,GAAG,GAAGD,MAAM,CAAC,CAAC,CAAC;EAAEE,GAAG,GAAG,eAAgBF,MAAM,CAAC,CAAC,CAAC;EAAEG,GAAG,GAAG,eAAgBH,MAAM,CAAC,CAAC,CAAC;AACxG;AACA,MAAMI,GAAG,GAAG,eAAgBJ,MAAM,CAAC,CAAC,CAAC;EAAEK,GAAG,GAAG,eAAgBL,MAAM,CAAC,CAAC,CAAC;EAAEM,GAAG,GAAG,eAAgBN,MAAM,CAAC,CAAC,CAAC;AAEvG;AACA,OAAM,SAAUO,GAAGA,CAACC,CAAS,EAAEC,CAAS;EACtC,MAAMC,MAAM,GAAGF,CAAC,GAAGC,CAAC;EACpB,OAAOC,MAAM,IAAIX,GAAG,GAAGW,MAAM,GAAGD,CAAC,GAAGC,MAAM;AAC5C;AACA;;;;;;;AAOA,OAAM,SAAUC,GAAGA,CAACC,GAAW,EAAEC,KAAa,EAAEC,MAAc;EAC5D,OAAOC,KAAK,CAACC,KAAK,CAACF,MAAM,CAAC,EAAEF,GAAG,EAAEC,KAAK,CAAC;AACzC;AAEA;AACA,OAAM,SAAUI,IAAIA,CAACC,CAAS,EAAEL,KAAa,EAAEC,MAAc;EAC3D,IAAIK,GAAG,GAAGD,CAAC;EACX,OAAOL,KAAK,EAAE,GAAGd,GAAG,EAAE;IACpBoB,GAAG,IAAIA,GAAG;IACVA,GAAG,IAAIL,MAAM;EACf;EACA,OAAOK,GAAG;AACZ;AAEA;;;;AAIA,OAAM,SAAUC,MAAMA,CAACC,MAAc,EAAEP,MAAc;EACnD,IAAIO,MAAM,KAAKtB,GAAG,EAAE,MAAM,IAAIuB,KAAK,CAAC,kCAAkC,CAAC;EACvE,IAAIR,MAAM,IAAIf,GAAG,EAAE,MAAM,IAAIuB,KAAK,CAAC,yCAAyC,GAAGR,MAAM,CAAC;EACtF;EACA,IAAIN,CAAC,GAAGD,GAAG,CAACc,MAAM,EAAEP,MAAM,CAAC;EAC3B,IAAIL,CAAC,GAAGK,MAAM;EACd;EACA,IAAII,CAAC,GAAGnB,GAAG;IAAEwB,CAAC,GAAGtB,GAAG;IAAEuB,CAAC,GAAGvB,GAAG;IAAEwB,CAAC,GAAG1B,GAAG;EACtC,OAAOS,CAAC,KAAKT,GAAG,EAAE;IAChB;IACA,MAAM2B,CAAC,GAAGjB,CAAC,GAAGD,CAAC;IACf,MAAMmB,CAAC,GAAGlB,CAAC,GAAGD,CAAC;IACf,MAAMoB,CAAC,GAAGV,CAAC,GAAGM,CAAC,GAAGE,CAAC;IACnB,MAAMG,CAAC,GAAGN,CAAC,GAAGE,CAAC,GAAGC,CAAC;IACnB;IACAjB,CAAC,GAAGD,CAAC,EAAEA,CAAC,GAAGmB,CAAC,EAAET,CAAC,GAAGM,CAAC,EAAED,CAAC,GAAGE,CAAC,EAAED,CAAC,GAAGI,CAAC,EAAEH,CAAC,GAAGI,CAAC;EAC1C;EACA,MAAMC,GAAG,GAAGrB,CAAC;EACb,IAAIqB,GAAG,KAAK7B,GAAG,EAAE,MAAM,IAAIqB,KAAK,CAAC,wBAAwB,CAAC;EAC1D,OAAOf,GAAG,CAACW,CAAC,EAAEJ,MAAM,CAAC;AACvB;AAEA;AACA;AACA;AACA;AACA,SAASiB,SAASA,CAAIC,EAAa,EAAEH,CAAI;EACvC,MAAMI,MAAM,GAAG,CAACD,EAAE,CAACE,KAAK,GAAGjC,GAAG,IAAIG,GAAG;EACrC,MAAM+B,IAAI,GAAGH,EAAE,CAACrB,GAAG,CAACkB,CAAC,EAAEI,MAAM,CAAC;EAC9B;EACA,IAAI,CAACD,EAAE,CAACI,GAAG,CAACJ,EAAE,CAACK,GAAG,CAACF,IAAI,CAAC,EAAEN,CAAC,CAAC,EAAE,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;EACxE,OAAOa,IAAI;AACb;AAEA,SAASG,SAASA,CAAIN,EAAa,EAAEH,CAAI;EACvC,MAAMU,MAAM,GAAG,CAACP,EAAE,CAACE,KAAK,GAAG7B,GAAG,IAAIC,GAAG;EACrC,MAAMkC,EAAE,GAAGR,EAAE,CAACS,GAAG,CAACZ,CAAC,EAAE3B,GAAG,CAAC;EACzB,MAAMuB,CAAC,GAAGO,EAAE,CAACrB,GAAG,CAAC6B,EAAE,EAAED,MAAM,CAAC;EAC5B,MAAMG,EAAE,GAAGV,EAAE,CAACS,GAAG,CAACZ,CAAC,EAAEJ,CAAC,CAAC;EACvB,MAAMkB,CAAC,GAAGX,EAAE,CAACS,GAAG,CAACT,EAAE,CAACS,GAAG,CAACC,EAAE,EAAExC,GAAG,CAAC,EAAEuB,CAAC,CAAC;EACpC,MAAMU,IAAI,GAAGH,EAAE,CAACS,GAAG,CAACC,EAAE,EAAEV,EAAE,CAACY,GAAG,CAACD,CAAC,EAAEX,EAAE,CAACa,GAAG,CAAC,CAAC;EAC1C,IAAI,CAACb,EAAE,CAACI,GAAG,CAACJ,EAAE,CAACK,GAAG,CAACF,IAAI,CAAC,EAAEN,CAAC,CAAC,EAAE,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;EACxE,OAAOa,IAAI;AACb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA,OAAM,SAAUW,aAAaA,CAACC,CAAS;EACrC;EACA,IAAIA,CAAC,GAAG/C,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,IAAIsB,KAAK,CAAC,qCAAqC,CAAC;EACzE;EACA,IAAI0B,CAAC,GAAGD,CAAC,GAAG9C,GAAG;EACf,IAAIgD,CAAC,GAAG,CAAC;EACT,OAAOD,CAAC,GAAG9C,GAAG,KAAKH,GAAG,EAAE;IACtBiD,CAAC,IAAI9C,GAAG;IACR+C,CAAC,EAAE;EACL;EAEA;EACA,IAAIC,CAAC,GAAGhD,GAAG;EACX,MAAMiD,GAAG,GAAGnC,KAAK,CAAC+B,CAAC,CAAC;EACpB,OAAOK,UAAU,CAACD,GAAG,EAAED,CAAC,CAAC,KAAK,CAAC,EAAE;IAC/B;IACA;IACA,IAAIA,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,IAAI5B,KAAK,CAAC,+CAA+C,CAAC;EAClF;EACA;EACA,IAAI2B,CAAC,KAAK,CAAC,EAAE,OAAOlB,SAAS;EAE7B;EACA;EACA,IAAIsB,EAAE,GAAGF,GAAG,CAACxC,GAAG,CAACuC,CAAC,EAAEF,CAAC,CAAC,CAAC,CAAC;EACxB,MAAMM,MAAM,GAAG,CAACN,CAAC,GAAG/C,GAAG,IAAIC,GAAG;EAC9B,OAAO,SAASqD,WAAWA,CAAIvB,EAAa,EAAEH,CAAI;IAChD,IAAIG,EAAE,CAACwB,GAAG,CAAC3B,CAAC,CAAC,EAAE,OAAOA,CAAC;IACvB;IACA,IAAIuB,UAAU,CAACpB,EAAE,EAAEH,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;IAEvE;IACA,IAAImC,CAAC,GAAGR,CAAC;IACT,IAAIS,CAAC,GAAG1B,EAAE,CAACS,GAAG,CAACT,EAAE,CAACa,GAAG,EAAEQ,EAAE,CAAC,CAAC,CAAC;IAC5B,IAAIM,CAAC,GAAG3B,EAAE,CAACrB,GAAG,CAACkB,CAAC,EAAEmB,CAAC,CAAC,CAAC,CAAC;IACtB,IAAIY,CAAC,GAAG5B,EAAE,CAACrB,GAAG,CAACkB,CAAC,EAAEyB,MAAM,CAAC,CAAC,CAAC;IAE3B;IACA;IACA,OAAO,CAACtB,EAAE,CAACI,GAAG,CAACuB,CAAC,EAAE3B,EAAE,CAACa,GAAG,CAAC,EAAE;MACzB,IAAIb,EAAE,CAACwB,GAAG,CAACG,CAAC,CAAC,EAAE,OAAO3B,EAAE,CAAC6B,IAAI,CAAC,CAAC;MAC/B,IAAIlB,CAAC,GAAG,CAAC;MAET;MACA,IAAImB,KAAK,GAAG9B,EAAE,CAACK,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC;MACvB,OAAO,CAAC3B,EAAE,CAACI,GAAG,CAAC0B,KAAK,EAAE9B,EAAE,CAACa,GAAG,CAAC,EAAE;QAC7BF,CAAC,EAAE;QACHmB,KAAK,GAAG9B,EAAE,CAACK,GAAG,CAACyB,KAAK,CAAC,CAAC,CAAC;QACvB,IAAInB,CAAC,KAAKc,CAAC,EAAE,MAAM,IAAInC,KAAK,CAAC,yBAAyB,CAAC;MACzD;MAEA;MACA,MAAMyC,QAAQ,GAAG9D,GAAG,IAAID,MAAM,CAACyD,CAAC,GAAGd,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3C,MAAMlC,CAAC,GAAGuB,EAAE,CAACrB,GAAG,CAAC+C,CAAC,EAAEK,QAAQ,CAAC,CAAC,CAAC;MAE/B;MACAN,CAAC,GAAGd,CAAC;MACLe,CAAC,GAAG1B,EAAE,CAACK,GAAG,CAAC5B,CAAC,CAAC,CAAC,CAAC;MACfkD,CAAC,GAAG3B,EAAE,CAACS,GAAG,CAACkB,CAAC,EAAED,CAAC,CAAC,CAAC,CAAC;MAClBE,CAAC,GAAG5B,EAAE,CAACS,GAAG,CAACmB,CAAC,EAAEnD,CAAC,CAAC,CAAC,CAAC;IACpB;IACA,OAAOmD,CAAC;EACV,CAAC;AACH;AAEA;;;;;;;;;;AAUA,OAAM,SAAUI,MAAMA,CAACjB,CAAS;EAC9B;EACA,IAAIA,CAAC,GAAG3C,GAAG,KAAKD,GAAG,EAAE,OAAO4B,SAAS;EACrC;EACA,IAAIgB,CAAC,GAAGzC,GAAG,KAAKD,GAAG,EAAE,OAAOiC,SAAS;EACrC;EACA;EACA,OAAOQ,aAAa,CAACC,CAAC,CAAC;AACzB;AAEA;AACA,OAAO,MAAMkB,YAAY,GAAGA,CAACrD,GAAW,EAAEE,MAAc,KACtD,CAACP,GAAG,CAACK,GAAG,EAAEE,MAAM,CAAC,GAAGb,GAAG,MAAMA,GAAG;AA4ClC;AACA,MAAMiE,YAAY,GAAG,CACnB,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EACvD,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EACxC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CACtB;AACV,OAAM,SAAUC,aAAaA,CAAIC,KAAgB;EAC/C,MAAMC,OAAO,GAAG;IACdnC,KAAK,EAAE,QAAQ;IACfoC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,eAAe;IACtBC,IAAI,EAAE;GACmB;EAC3B,MAAMC,IAAI,GAAGP,YAAY,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAW,KAAI;IACpDD,GAAG,CAACC,GAAG,CAAC,GAAG,UAAU;IACrB,OAAOD,GAAG;EACZ,CAAC,EAAEN,OAAO,CAAC;EACX,OAAOvE,cAAc,CAACsE,KAAK,EAAEK,IAAI,CAAC;AACpC;AAEA;AAEA;;;;AAIA,OAAM,SAAU1D,KAAKA,CAAIiB,EAAa,EAAEpB,GAAM,EAAEC,KAAa;EAC3D,IAAIA,KAAK,GAAGd,GAAG,EAAE,MAAM,IAAIuB,KAAK,CAAC,yCAAyC,CAAC;EAC3E,IAAIT,KAAK,KAAKd,GAAG,EAAE,OAAOiC,EAAE,CAACa,GAAG;EAChC,IAAIhC,KAAK,KAAKZ,GAAG,EAAE,OAAOW,GAAG;EAC7B,IAAIiE,CAAC,GAAG7C,EAAE,CAACa,GAAG;EACd,IAAIiC,CAAC,GAAGlE,GAAG;EACX,OAAOC,KAAK,GAAGd,GAAG,EAAE;IAClB,IAAIc,KAAK,GAAGZ,GAAG,EAAE4E,CAAC,GAAG7C,EAAE,CAACS,GAAG,CAACoC,CAAC,EAAEC,CAAC,CAAC;IACjCA,CAAC,GAAG9C,EAAE,CAACK,GAAG,CAACyC,CAAC,CAAC;IACbjE,KAAK,KAAKZ,GAAG;EACf;EACA,OAAO4E,CAAC;AACV;AAEA;;;;;AAKA,OAAM,SAAUE,aAAaA,CAAI/C,EAAa,EAAEgD,IAAS,EAAEC,QAAQ,GAAG,KAAK;EACzE,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,CAAC,CAACC,IAAI,CAACJ,QAAQ,GAAGjD,EAAE,CAAC6B,IAAI,GAAGyB,SAAS,CAAC;EAC5E;EACA,MAAMC,aAAa,GAAGP,IAAI,CAACN,MAAM,CAAC,CAACc,GAAG,EAAE5E,GAAG,EAAE+B,CAAC,KAAI;IAChD,IAAIX,EAAE,CAACwB,GAAG,CAAC5C,GAAG,CAAC,EAAE,OAAO4E,GAAG;IAC3BN,QAAQ,CAACvC,CAAC,CAAC,GAAG6C,GAAG;IACjB,OAAOxD,EAAE,CAACS,GAAG,CAAC+C,GAAG,EAAE5E,GAAG,CAAC;EACzB,CAAC,EAAEoB,EAAE,CAACa,GAAG,CAAC;EACV;EACA,MAAM4C,WAAW,GAAGzD,EAAE,CAAC0D,GAAG,CAACH,aAAa,CAAC;EACzC;EACAP,IAAI,CAACW,WAAW,CAAC,CAACH,GAAG,EAAE5E,GAAG,EAAE+B,CAAC,KAAI;IAC/B,IAAIX,EAAE,CAACwB,GAAG,CAAC5C,GAAG,CAAC,EAAE,OAAO4E,GAAG;IAC3BN,QAAQ,CAACvC,CAAC,CAAC,GAAGX,EAAE,CAACS,GAAG,CAAC+C,GAAG,EAAEN,QAAQ,CAACvC,CAAC,CAAC,CAAC;IACtC,OAAOX,EAAE,CAACS,GAAG,CAAC+C,GAAG,EAAE5E,GAAG,CAAC;EACzB,CAAC,EAAE6E,WAAW,CAAC;EACf,OAAOP,QAAQ;AACjB;AAEA;AACA,OAAM,SAAUU,KAAKA,CAAI5D,EAAa,EAAE6D,GAAM,EAAEC,GAAe;EAC7D,OAAO9D,EAAE,CAACS,GAAG,CAACoD,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAG1E,MAAM,CAAC0E,GAAG,EAAE9D,EAAE,CAACE,KAAK,CAAC,GAAGF,EAAE,CAAC0D,GAAG,CAACI,GAAG,CAAC,CAAC;AACnF;AAEA;;;;;;;;;AASA,OAAM,SAAU1C,UAAUA,CAAIpB,EAAa,EAAEH,CAAI;EAC/C;EACA;EACA,MAAMkE,MAAM,GAAG,CAAC/D,EAAE,CAACE,KAAK,GAAGjC,GAAG,IAAIC,GAAG;EACrC,MAAM8F,OAAO,GAAGhE,EAAE,CAACrB,GAAG,CAACkB,CAAC,EAAEkE,MAAM,CAAC;EACjC,MAAME,GAAG,GAAGjE,EAAE,CAACI,GAAG,CAAC4D,OAAO,EAAEhE,EAAE,CAACa,GAAG,CAAC;EACnC,MAAMqD,IAAI,GAAGlE,EAAE,CAACI,GAAG,CAAC4D,OAAO,EAAEhE,EAAE,CAAC6B,IAAI,CAAC;EACrC,MAAMsC,EAAE,GAAGnE,EAAE,CAACI,GAAG,CAAC4D,OAAO,EAAEhE,EAAE,CAACoE,GAAG,CAACpE,EAAE,CAACa,GAAG,CAAC,CAAC;EAC1C,IAAI,CAACoD,GAAG,IAAI,CAACC,IAAI,IAAI,CAACC,EAAE,EAAE,MAAM,IAAI7E,KAAK,CAAC,gCAAgC,CAAC;EAC3E,OAAO2E,GAAG,GAAG,CAAC,GAAGC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AAChC;AAEA;AACA,OAAM,SAAUG,UAAUA,CAAIrE,EAAa,EAAEH,CAAI;EAC/C,MAAMyE,CAAC,GAAGlD,UAAU,CAACpB,EAAE,EAAEH,CAAC,CAAC;EAC3B,OAAOyE,CAAC,KAAK,CAAC;AAChB;AAEA;AACA,OAAM,SAAUC,OAAOA,CACrB1E,CAAS,EACT2E,UAAmB;EAKnB;EACA,IAAIA,UAAU,KAAKlB,SAAS,EAAE/F,OAAO,CAACiH,UAAU,CAAC;EACjD,MAAMC,WAAW,GAAGD,UAAU,KAAKlB,SAAS,GAAGkB,UAAU,GAAG3E,CAAC,CAAC6E,QAAQ,CAAC,CAAC,CAAC,CAACtB,MAAM;EAChF,MAAMuB,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACJ,WAAW,GAAG,CAAC,CAAC;EAC9C,OAAO;IAAED,UAAU,EAAEC,WAAW;IAAEE;EAAW,CAAE;AACjD;AAGA;;;;;;;;;;;;;;;AAeA,OAAM,SAAU3F,KAAKA,CACnBkB,KAAa,EACb4E,MAAe,EACfC,IAAI,GAAG,KAAK,EACZC,KAAA,GAAiC,EAAE;EAEnC,IAAI9E,KAAK,IAAInC,GAAG,EAAE,MAAM,IAAIuB,KAAK,CAAC,yCAAyC,GAAGY,KAAK,CAAC;EACpF,MAAM;IAAEsE,UAAU,EAAEhC,IAAI;IAAEmC,WAAW,EAAEpC;EAAK,CAAE,GAAGgC,OAAO,CAACrE,KAAK,EAAE4E,MAAM,CAAC;EACvE,IAAIvC,KAAK,GAAG,IAAI,EAAE,MAAM,IAAIjD,KAAK,CAAC,gDAAgD,CAAC;EACnF,IAAI2F,KAAgC,CAAC,CAAC;EACtC,MAAMC,CAAC,GAAsBC,MAAM,CAACC,MAAM,CAAC;IACzClF,KAAK;IACL6E,IAAI;IACJvC,IAAI;IACJD,KAAK;IACLD,IAAI,EAAE9E,OAAO,CAACgF,IAAI,CAAC;IACnBX,IAAI,EAAE9D,GAAG;IACT8C,GAAG,EAAE5C,GAAG;IACRoH,MAAM,EAAGzG,GAAG,IAAKL,GAAG,CAACK,GAAG,EAAEsB,KAAK,CAAC;IAChCoF,OAAO,EAAG1G,GAAG,IAAI;MACf,IAAI,OAAOA,GAAG,KAAK,QAAQ,EACzB,MAAM,IAAIU,KAAK,CAAC,8CAA8C,GAAG,OAAOV,GAAG,CAAC;MAC9E,OAAOb,GAAG,IAAIa,GAAG,IAAIA,GAAG,GAAGsB,KAAK,CAAC,CAAC;IACpC,CAAC;IACDsB,GAAG,EAAG5C,GAAG,IAAKA,GAAG,KAAKb,GAAG;IACzBwH,KAAK,EAAG3G,GAAG,IAAK,CAACA,GAAG,GAAGX,GAAG,MAAMA,GAAG;IACnCmG,GAAG,EAAGxF,GAAG,IAAKL,GAAG,CAAC,CAACK,GAAG,EAAEsB,KAAK,CAAC;IAC9BE,GAAG,EAAEA,CAACyD,GAAG,EAAEC,GAAG,KAAKD,GAAG,KAAKC,GAAG;IAE9BzD,GAAG,EAAGzB,GAAG,IAAKL,GAAG,CAACK,GAAG,GAAGA,GAAG,EAAEsB,KAAK,CAAC;IACnCsF,GAAG,EAAEA,CAAC3B,GAAG,EAAEC,GAAG,KAAKvF,GAAG,CAACsF,GAAG,GAAGC,GAAG,EAAE5D,KAAK,CAAC;IACxCU,GAAG,EAAEA,CAACiD,GAAG,EAAEC,GAAG,KAAKvF,GAAG,CAACsF,GAAG,GAAGC,GAAG,EAAE5D,KAAK,CAAC;IACxCO,GAAG,EAAEA,CAACoD,GAAG,EAAEC,GAAG,KAAKvF,GAAG,CAACsF,GAAG,GAAGC,GAAG,EAAE5D,KAAK,CAAC;IACxCvB,GAAG,EAAEA,CAACC,GAAG,EAAEC,KAAK,KAAKE,KAAK,CAACmG,CAAC,EAAEtG,GAAG,EAAEC,KAAK,CAAC;IACzC4G,GAAG,EAAEA,CAAC5B,GAAG,EAAEC,GAAG,KAAKvF,GAAG,CAACsF,GAAG,GAAGzE,MAAM,CAAC0E,GAAG,EAAE5D,KAAK,CAAC,EAAEA,KAAK,CAAC;IAEvD;IACAwF,IAAI,EAAG9G,GAAG,IAAKA,GAAG,GAAGA,GAAG;IACxB+G,IAAI,EAAEA,CAAC9B,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG;IAC7B8B,IAAI,EAAEA,CAAC/B,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG;IAC7B+B,IAAI,EAAEA,CAAChC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG;IAE7BJ,GAAG,EAAG9E,GAAG,IAAKQ,MAAM,CAACR,GAAG,EAAEsB,KAAK,CAAC;IAChC4F,IAAI,EACFd,KAAK,CAACc,IAAI,KACRjG,CAAC,IAAI;MACL,IAAI,CAACoF,KAAK,EAAEA,KAAK,GAAGjD,MAAM,CAAC9B,KAAK,CAAC;MACjC,OAAO+E,KAAK,CAACC,CAAC,EAAErF,CAAC,CAAC;IACpB,CAAC,CAAC;IACJkG,OAAO,EAAGnH,GAAG,IAAMmG,IAAI,GAAGlH,eAAe,CAACe,GAAG,EAAE2D,KAAK,CAAC,GAAG3E,eAAe,CAACgB,GAAG,EAAE2D,KAAK,CAAE;IACpFyD,SAAS,EAAGC,KAAK,IAAI;MACnB,IAAIA,KAAK,CAAC7C,MAAM,KAAKb,KAAK,EACxB,MAAM,IAAIjD,KAAK,CAAC,4BAA4B,GAAGiD,KAAK,GAAG,cAAc,GAAG0D,KAAK,CAAC7C,MAAM,CAAC;MACvF,OAAO2B,IAAI,GAAGrH,eAAe,CAACuI,KAAK,CAAC,GAAGxI,eAAe,CAACwI,KAAK,CAAC;IAC/D,CAAC;IACD;IACAC,WAAW,EAAGC,GAAG,IAAKpD,aAAa,CAACmC,CAAC,EAAEiB,GAAG,CAAC;IAC3C;IACA;IACAC,IAAI,EAAEA,CAAC5H,CAAC,EAAEC,CAAC,EAAEiD,CAAC,KAAMA,CAAC,GAAGjD,CAAC,GAAGD;GAClB,CAAC;EACb,OAAO2G,MAAM,CAACC,MAAM,CAACF,CAAC,CAAC;AACzB;AAEA,OAAM,SAAUmB,SAASA,CAAIrG,EAAa,EAAEsG,GAAM;EAChD,IAAI,CAACtG,EAAE,CAACuF,KAAK,EAAE,MAAM,IAAIjG,KAAK,CAAC,0BAA0B,CAAC;EAC1D,MAAMa,IAAI,GAAGH,EAAE,CAAC8F,IAAI,CAACQ,GAAG,CAAC;EACzB,OAAOtG,EAAE,CAACuF,KAAK,CAACpF,IAAI,CAAC,GAAGA,IAAI,GAAGH,EAAE,CAACoE,GAAG,CAACjE,IAAI,CAAC;AAC7C;AAEA,OAAM,SAAUoG,UAAUA,CAAIvG,EAAa,EAAEsG,GAAM;EACjD,IAAI,CAACtG,EAAE,CAACuF,KAAK,EAAE,MAAM,IAAIjG,KAAK,CAAC,0BAA0B,CAAC;EAC1D,MAAMa,IAAI,GAAGH,EAAE,CAAC8F,IAAI,CAACQ,GAAG,CAAC;EACzB,OAAOtG,EAAE,CAACuF,KAAK,CAACpF,IAAI,CAAC,GAAGH,EAAE,CAACoE,GAAG,CAACjE,IAAI,CAAC,GAAGA,IAAI;AAC7C;AAEA;;;;;;AAMA,OAAM,SAAUqG,mBAAmBA,CACjCC,IAAyB,EACzBC,UAAkB,EAClB3B,IAAI,GAAG,KAAK;EAEZ0B,IAAI,GAAG9I,WAAW,CAAC,aAAa,EAAE8I,IAAI,CAAC;EACvC,MAAME,OAAO,GAAGF,IAAI,CAACrD,MAAM;EAC3B,MAAMwD,MAAM,GAAGrC,OAAO,CAACmC,UAAU,CAAC,CAAC/B,WAAW,GAAG,CAAC;EAClD,IAAIiC,MAAM,GAAG,EAAE,IAAID,OAAO,GAAGC,MAAM,IAAID,OAAO,GAAG,IAAI,EACnD,MAAM,IAAIrH,KAAK,CACb,gCAAgC,GAAGsH,MAAM,GAAG,4BAA4B,GAAGD,OAAO,CACnF;EACH,MAAM/H,GAAG,GAAGmG,IAAI,GAAGrH,eAAe,CAAC+I,IAAI,CAAC,GAAGhJ,eAAe,CAACgJ,IAAI,CAAC;EAChE,OAAOlI,GAAG,CAACK,GAAG,EAAE8H,UAAU,GAAGzI,GAAG,CAAC,GAAGA,GAAG;AACzC;AAEA;;;;;;AAMA,OAAM,SAAU4I,mBAAmBA,CAACC,UAAkB;EACpD,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE,MAAM,IAAIxH,KAAK,CAAC,4BAA4B,CAAC;EACjF,MAAMyH,SAAS,GAAGD,UAAU,CAACpC,QAAQ,CAAC,CAAC,CAAC,CAACtB,MAAM;EAC/C,OAAOwB,IAAI,CAACC,IAAI,CAACkC,SAAS,GAAG,CAAC,CAAC;AACjC;AAEA;;;;;;;AAOA,OAAM,SAAUC,gBAAgBA,CAACF,UAAkB;EACjD,MAAM1D,MAAM,GAAGyD,mBAAmB,CAACC,UAAU,CAAC;EAC9C,OAAO1D,MAAM,GAAGwB,IAAI,CAACC,IAAI,CAACzB,MAAM,GAAG,CAAC,CAAC;AACvC;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAU6D,cAAcA,CAACC,GAAe,EAAEJ,UAAkB,EAAE/B,IAAI,GAAG,KAAK;EAC9E,MAAMoC,GAAG,GAAGD,GAAG,CAAC9D,MAAM;EACtB,MAAMgE,QAAQ,GAAGP,mBAAmB,CAACC,UAAU,CAAC;EAChD,MAAMF,MAAM,GAAGI,gBAAgB,CAACF,UAAU,CAAC;EAC3C;EACA,IAAIK,GAAG,GAAG,EAAE,IAAIA,GAAG,GAAGP,MAAM,IAAIO,GAAG,GAAG,IAAI,EACxC,MAAM,IAAI7H,KAAK,CAAC,WAAW,GAAGsH,MAAM,GAAG,4BAA4B,GAAGO,GAAG,CAAC;EAC5E,MAAMvI,GAAG,GAAGmG,IAAI,GAAGrH,eAAe,CAACwJ,GAAG,CAAC,GAAGzJ,eAAe,CAACyJ,GAAG,CAAC;EAC9D;EACA,MAAMG,OAAO,GAAG9I,GAAG,CAACK,GAAG,EAAEkI,UAAU,GAAG7I,GAAG,CAAC,GAAGA,GAAG;EAChD,OAAO8G,IAAI,GAAGlH,eAAe,CAACwJ,OAAO,EAAED,QAAQ,CAAC,GAAGxJ,eAAe,CAACyJ,OAAO,EAAED,QAAQ,CAAC;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}