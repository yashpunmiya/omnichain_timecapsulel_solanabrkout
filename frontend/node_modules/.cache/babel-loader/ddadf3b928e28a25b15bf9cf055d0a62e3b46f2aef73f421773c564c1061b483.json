{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogsManager = void 0;\nconst logs_1 = require(\"./logs\");\nclass LogsManager {\n  logs = {};\n  writer;\n  colors = {};\n  constructor({\n    colors\n  }) {\n    this.colors = colors;\n  }\n  initLog(prefix, enabled, logWriter) {\n    const instanceWriter = logWriter || this.writer;\n    const instance = new logs_1.Log(prefix, !!enabled, instanceWriter);\n    if (this.colors) {\n      instance.setColors(this.colors);\n    }\n    this.logs[prefix] = instance;\n    return instance;\n  }\n  setLogWriter(logWriterFactory) {\n    Object.keys(this.logs).forEach(key => {\n      this.writer = logWriterFactory();\n      if (this.writer) {\n        this.logs[key].setWriter(this.writer);\n        const {\n          messages\n        } = this.logs[key];\n        messages.forEach(message => {\n          this.writer?.add(message);\n        });\n      }\n    });\n  }\n  enableLog(enabled) {\n    Object.keys(this.logs).forEach(key => {\n      this.logs[key].enabled = !!enabled;\n    });\n  }\n  enableLogByPrefix(prefix, enabled) {\n    if (this.logs[prefix]) {\n      this.logs[prefix].enabled = enabled;\n    }\n  }\n  getLog() {\n    let logs = [];\n    Object.keys(this.logs).forEach(key => {\n      logs = logs.concat(this.logs[key].messages);\n    });\n    logs.sort((a, b) => a.timestamp - b.timestamp);\n    return logs;\n  }\n}\nexports.LogsManager = LogsManager;\n//# sourceMappingURL=logsManager.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}