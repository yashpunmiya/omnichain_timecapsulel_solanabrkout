{"ast":null,"code":"'use strict';\n\nconst {\n  SymbolDispose\n} = require('../../ours/primordials');\nconst {\n  AbortError,\n  codes\n} = require('../../ours/errors');\nconst {\n  isNodeStream,\n  isWebStream,\n  kControllerErrorFunction\n} = require('./utils');\nconst eos = require('./end-of-stream');\nconst {\n  ERR_INVALID_ARG_TYPE\n} = codes;\nlet addAbortListener;\n\n// This method is inlined here for readable-stream\n// It also does not allow for signal to not exist on the stream\n// https://github.com/nodejs/node/pull/36061#discussion_r533718029\nconst validateAbortSignal = (signal, name) => {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal);\n  }\n};\nmodule.exports.addAbortSignal = function addAbortSignal(signal, stream) {\n  validateAbortSignal(signal, 'signal');\n  if (!isNodeStream(stream) && !isWebStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream);\n  }\n  return module.exports.addAbortSignalNoValidate(signal, stream);\n};\nmodule.exports.addAbortSignalNoValidate = function (signal, stream) {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    return stream;\n  }\n  const onAbort = isNodeStream(stream) ? () => {\n    stream.destroy(new AbortError(undefined, {\n      cause: signal.reason\n    }));\n  } : () => {\n    stream[kControllerErrorFunction](new AbortError(undefined, {\n      cause: signal.reason\n    }));\n  };\n  if (signal.aborted) {\n    onAbort();\n  } else {\n    addAbortListener = addAbortListener || require('../../ours/util').addAbortListener;\n    const disposable = addAbortListener(signal, onAbort);\n    eos(stream, disposable[SymbolDispose]);\n  }\n  return stream;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}