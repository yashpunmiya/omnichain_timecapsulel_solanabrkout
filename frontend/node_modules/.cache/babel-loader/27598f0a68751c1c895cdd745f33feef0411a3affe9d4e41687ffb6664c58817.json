{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CardanoSignedTxData = exports.CardanoAuxiliaryDataSupplement = exports.CardanoSignedTxWitness = exports.CardanoSignTransactionExtended = exports.CardanoSignTransaction = exports.CardanoAuxiliaryData = exports.CardanoCVoteRegistrationParameters = exports.CardanoCVoteRegistrationDelegation = exports.CardanoReferenceInput = exports.CardanoRequiredSigner = exports.CardanoCollateralInput = exports.CardanoMint = exports.CardanoWithdrawal = exports.CardanoCertificate = exports.CardanoDRep = exports.CardanoPoolParameters = exports.CardanoPoolMargin = exports.CardanoPoolMetadata = exports.CardanoPoolRelay = exports.CardanoPoolOwner = exports.CardanoOutput = exports.CardanoAssetGroup = exports.CardanoToken = exports.CardanoInput = exports.CardanoGetPublicKey = exports.CardanoNativeScriptHash = exports.CardanoGetNativeScriptHash = exports.CardanoNativeScript = exports.CardanoGetAddress = exports.CardanoAddressParameters = exports.CardanoCertificatePointer = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst constants_1 = require(\"../../../constants\");\nconst params_1 = require(\"../../params\");\nexports.CardanoCertificatePointer = schema_utils_1.Type.Object({\n  blockIndex: schema_utils_1.Type.Number(),\n  txIndex: schema_utils_1.Type.Number(),\n  certificateIndex: schema_utils_1.Type.Number()\n});\nexports.CardanoAddressParameters = schema_utils_1.Type.Object({\n  addressType: constants_1.PROTO.EnumCardanoAddressType,\n  path: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  stakingPath: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  stakingKeyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  certificatePointer: schema_utils_1.Type.Optional(exports.CardanoCertificatePointer),\n  paymentScriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  stakingScriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoGetAddress = schema_utils_1.Type.Object({\n  addressParameters: exports.CardanoAddressParameters,\n  protocolMagic: schema_utils_1.Type.Number(),\n  networkId: schema_utils_1.Type.Number(),\n  address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  showOnTrezor: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n});\nexports.CardanoNativeScript = schema_utils_1.Type.Recursive(This => schema_utils_1.Type.Object({\n  type: constants_1.PROTO.EnumCardanoNativeScriptType,\n  scripts: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(This)),\n  keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  keyPath: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  requiredSignaturesCount: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  invalidBefore: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  invalidHereafter: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}));\nexports.CardanoGetNativeScriptHash = schema_utils_1.Type.Object({\n  script: exports.CardanoNativeScript,\n  displayFormat: constants_1.PROTO.EnumCardanoNativeScriptHashDisplayFormat,\n  derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType)\n});\nexports.CardanoNativeScriptHash = schema_utils_1.Type.Object({\n  scriptHash: schema_utils_1.Type.String()\n});\nexports.CardanoGetPublicKey = schema_utils_1.Type.Intersect([params_1.GetPublicKey, schema_utils_1.Type.Object({\n  derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType)\n})]);\nexports.CardanoInput = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number()\n});\nexports.CardanoToken = schema_utils_1.Type.Object({\n  assetNameBytes: schema_utils_1.Type.String(),\n  amount: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  mintAmount: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoAssetGroup = schema_utils_1.Type.Object({\n  policyId: schema_utils_1.Type.String(),\n  tokenAmounts: schema_utils_1.Type.Array(exports.CardanoToken)\n});\nexports.CardanoOutput = schema_utils_1.Type.Intersect([schema_utils_1.Type.Union([schema_utils_1.Type.Object({\n  addressParameters: exports.CardanoAddressParameters\n}), schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n})]), schema_utils_1.Type.Object({\n  amount: schema_utils_1.Type.String(),\n  tokenBundle: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoAssetGroup)),\n  datumHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  format: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoTxOutputSerializationFormat),\n  inlineDatum: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  referenceScript: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n})]);\nexports.CardanoPoolOwner = schema_utils_1.Type.Object({\n  stakingKeyPath: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  stakingKeyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoPoolRelay = schema_utils_1.Type.Object({\n  type: constants_1.PROTO.EnumCardanoPoolRelayType,\n  ipv4Address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  ipv6Address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  port: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  hostName: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoPoolMetadata = schema_utils_1.Type.Object({\n  url: schema_utils_1.Type.String(),\n  hash: schema_utils_1.Type.String()\n});\nexports.CardanoPoolMargin = schema_utils_1.Type.Object({\n  numerator: schema_utils_1.Type.String(),\n  denominator: schema_utils_1.Type.String()\n});\nexports.CardanoPoolParameters = schema_utils_1.Type.Object({\n  poolId: schema_utils_1.Type.String(),\n  vrfKeyHash: schema_utils_1.Type.String(),\n  pledge: schema_utils_1.Type.String(),\n  cost: schema_utils_1.Type.String(),\n  margin: exports.CardanoPoolMargin,\n  rewardAccount: schema_utils_1.Type.String(),\n  owners: schema_utils_1.Type.Array(exports.CardanoPoolOwner, {\n    minItems: 1\n  }),\n  relays: schema_utils_1.Type.Array(exports.CardanoPoolRelay),\n  metadata: schema_utils_1.Type.Optional(exports.CardanoPoolMetadata)\n});\nexports.CardanoDRep = schema_utils_1.Type.Object({\n  type: constants_1.PROTO.EnumCardanoDRepType,\n  keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  scriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoCertificate = schema_utils_1.Type.Object({\n  type: constants_1.PROTO.EnumCardanoCertificateType,\n  path: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  pool: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  poolParameters: schema_utils_1.Type.Optional(exports.CardanoPoolParameters),\n  scriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  deposit: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  dRep: schema_utils_1.Type.Optional(exports.CardanoDRep)\n});\nexports.CardanoWithdrawal = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  amount: schema_utils_1.Type.String(),\n  scriptHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoMint = schema_utils_1.Type.Array(exports.CardanoAssetGroup);\nexports.CardanoCollateralInput = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number()\n});\nexports.CardanoRequiredSigner = schema_utils_1.Type.Object({\n  keyPath: schema_utils_1.Type.Optional(params_1.DerivationPath),\n  keyHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoReferenceInput = schema_utils_1.Type.Object({\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number()\n});\nexports.CardanoCVoteRegistrationDelegation = schema_utils_1.Type.Object({\n  votePublicKey: schema_utils_1.Type.String(),\n  weight: schema_utils_1.Type.Number()\n});\nexports.CardanoCVoteRegistrationParameters = schema_utils_1.Type.Object({\n  votePublicKey: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  stakingPath: params_1.DerivationPath,\n  paymentAddressParameters: schema_utils_1.Type.Optional(exports.CardanoAddressParameters),\n  nonce: schema_utils_1.Type.String(),\n  format: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoCVoteRegistrationFormat),\n  delegations: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCVoteRegistrationDelegation)),\n  votingPurpose: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  paymentAddress: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoAuxiliaryData = schema_utils_1.Type.Object({\n  hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  cVoteRegistrationParameters: schema_utils_1.Type.Optional(exports.CardanoCVoteRegistrationParameters)\n});\nexports.CardanoSignTransaction = schema_utils_1.Type.Object({\n  inputs: schema_utils_1.Type.Array(exports.CardanoInput),\n  outputs: schema_utils_1.Type.Array(exports.CardanoOutput),\n  fee: schema_utils_1.Type.Uint(),\n  ttl: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  certificates: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCertificate)),\n  withdrawals: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoWithdrawal)),\n  validityIntervalStart: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  auxiliaryData: schema_utils_1.Type.Optional(exports.CardanoAuxiliaryData),\n  mint: schema_utils_1.Type.Optional(exports.CardanoMint),\n  scriptDataHash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  collateralInputs: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCollateralInput)),\n  requiredSigners: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoRequiredSigner)),\n  collateralReturn: schema_utils_1.Type.Optional(exports.CardanoOutput),\n  totalCollateral: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  referenceInputs: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoReferenceInput)),\n  additionalWitnessRequests: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(params_1.DerivationPath)),\n  protocolMagic: schema_utils_1.Type.Number(),\n  networkId: schema_utils_1.Type.Number(),\n  signingMode: constants_1.PROTO.EnumCardanoTxSigningMode,\n  derivationType: schema_utils_1.Type.Optional(constants_1.PROTO.EnumCardanoDerivationType),\n  includeNetworkId: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  tagCborSets: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n});\nexports.CardanoSignTransactionExtended = schema_utils_1.Type.Intersect([exports.CardanoSignTransaction, schema_utils_1.Type.Object({\n  unsignedTx: schema_utils_1.Type.Object({\n    body: schema_utils_1.Type.String(),\n    hash: schema_utils_1.Type.String()\n  }),\n  testnet: schema_utils_1.Type.Boolean()\n})]);\nexports.CardanoSignedTxWitness = schema_utils_1.Type.Object({\n  type: constants_1.PROTO.EnumCardanoTxWitnessType,\n  pubKey: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String(),\n  chainCode: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoAuxiliaryDataSupplement = schema_utils_1.Type.Object({\n  type: constants_1.PROTO.EnumCardanoTxAuxiliaryDataSupplementType,\n  auxiliaryDataHash: schema_utils_1.Type.String(),\n  cVoteRegistrationSignature: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CardanoSignedTxData = schema_utils_1.Type.Object({\n  hash: schema_utils_1.Type.String(),\n  witnesses: schema_utils_1.Type.Array(exports.CardanoSignedTxWitness),\n  auxiliaryDataSupplement: schema_utils_1.Type.Optional(exports.CardanoAuxiliaryDataSupplement)\n});\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}