{"ast":null,"code":"import { BaseError } from './base.js';\nimport { RpcRequestError } from './request.js';\nconst unknownErrorCode = -1;\nexport class RpcError extends BaseError {\n  constructor(cause, {\n    code,\n    docsPath,\n    metaMessages,\n    name,\n    shortMessage\n  }) {\n    super(shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: metaMessages || cause?.metaMessages,\n      name: name || 'RpcError'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.name = name || cause.name;\n    this.code = cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode;\n  }\n}\nexport class ProviderRpcError extends RpcError {\n  constructor(cause, options) {\n    super(cause, options);\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.data = options.data;\n  }\n}\nexport class ParseRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: ParseRpcError.code,\n      name: 'ParseRpcError',\n      shortMessage: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'\n    });\n  }\n}\nObject.defineProperty(ParseRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32700\n});\nexport class InvalidRequestRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: InvalidRequestRpcError.code,\n      name: 'InvalidRequestRpcError',\n      shortMessage: 'JSON is not a valid request object.'\n    });\n  }\n}\nObject.defineProperty(InvalidRequestRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32600\n});\nexport class MethodNotFoundRpcError extends RpcError {\n  constructor(cause, {\n    method\n  } = {}) {\n    super(cause, {\n      code: MethodNotFoundRpcError.code,\n      name: 'MethodNotFoundRpcError',\n      shortMessage: `The method${method ? ` \"${method}\"` : ''} does not exist / is not available.`\n    });\n  }\n}\nObject.defineProperty(MethodNotFoundRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32601\n});\nexport class InvalidParamsRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: InvalidParamsRpcError.code,\n      name: 'InvalidParamsRpcError',\n      shortMessage: ['Invalid parameters were provided to the RPC method.', 'Double check you have provided the correct parameters.'].join('\\n')\n    });\n  }\n}\nObject.defineProperty(InvalidParamsRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32602\n});\nexport class InternalRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: InternalRpcError.code,\n      name: 'InternalRpcError',\n      shortMessage: 'An internal error was received.'\n    });\n  }\n}\nObject.defineProperty(InternalRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32603\n});\nexport class InvalidInputRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: InvalidInputRpcError.code,\n      name: 'InvalidInputRpcError',\n      shortMessage: ['Missing or invalid parameters.', 'Double check you have provided the correct parameters.'].join('\\n')\n    });\n  }\n}\nObject.defineProperty(InvalidInputRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32000\n});\nexport class ResourceNotFoundRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: ResourceNotFoundRpcError.code,\n      name: 'ResourceNotFoundRpcError',\n      shortMessage: 'Requested resource not found.'\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ResourceNotFoundRpcError'\n    });\n  }\n}\nObject.defineProperty(ResourceNotFoundRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32001\n});\nexport class ResourceUnavailableRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: ResourceUnavailableRpcError.code,\n      name: 'ResourceUnavailableRpcError',\n      shortMessage: 'Requested resource not available.'\n    });\n  }\n}\nObject.defineProperty(ResourceUnavailableRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32002\n});\nexport class TransactionRejectedRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: TransactionRejectedRpcError.code,\n      name: 'TransactionRejectedRpcError',\n      shortMessage: 'Transaction creation failed.'\n    });\n  }\n}\nObject.defineProperty(TransactionRejectedRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32003\n});\nexport class MethodNotSupportedRpcError extends RpcError {\n  constructor(cause, {\n    method\n  } = {}) {\n    super(cause, {\n      code: MethodNotSupportedRpcError.code,\n      name: 'MethodNotSupportedRpcError',\n      shortMessage: `Method${method ? ` \"${method}\"` : ''} is not supported.`\n    });\n  }\n}\nObject.defineProperty(MethodNotSupportedRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32004\n});\nexport class LimitExceededRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: LimitExceededRpcError.code,\n      name: 'LimitExceededRpcError',\n      shortMessage: 'Request exceeds defined limit.'\n    });\n  }\n}\nObject.defineProperty(LimitExceededRpcError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32005\n});\nexport class JsonRpcVersionUnsupportedError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      code: JsonRpcVersionUnsupportedError.code,\n      name: 'JsonRpcVersionUnsupportedError',\n      shortMessage: 'Version of JSON-RPC protocol is not supported.'\n    });\n  }\n}\nObject.defineProperty(JsonRpcVersionUnsupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32006\n});\nexport class UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(cause, {\n      code: UserRejectedRequestError.code,\n      name: 'UserRejectedRequestError',\n      shortMessage: 'User rejected the request.'\n    });\n  }\n}\nObject.defineProperty(UserRejectedRequestError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4001\n});\nexport class UnauthorizedProviderError extends ProviderRpcError {\n  constructor(cause) {\n    super(cause, {\n      code: UnauthorizedProviderError.code,\n      name: 'UnauthorizedProviderError',\n      shortMessage: 'The requested method and/or account has not been authorized by the user.'\n    });\n  }\n}\nObject.defineProperty(UnauthorizedProviderError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4100\n});\nexport class UnsupportedProviderMethodError extends ProviderRpcError {\n  constructor(cause, {\n    method\n  } = {}) {\n    super(cause, {\n      code: UnsupportedProviderMethodError.code,\n      name: 'UnsupportedProviderMethodError',\n      shortMessage: `The Provider does not support the requested method${method ? ` \" ${method}\"` : ''}.`\n    });\n  }\n}\nObject.defineProperty(UnsupportedProviderMethodError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4200\n});\nexport class ProviderDisconnectedError extends ProviderRpcError {\n  constructor(cause) {\n    super(cause, {\n      code: ProviderDisconnectedError.code,\n      name: 'ProviderDisconnectedError',\n      shortMessage: 'The Provider is disconnected from all chains.'\n    });\n  }\n}\nObject.defineProperty(ProviderDisconnectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4900\n});\nexport class ChainDisconnectedError extends ProviderRpcError {\n  constructor(cause) {\n    super(cause, {\n      code: ChainDisconnectedError.code,\n      name: 'ChainDisconnectedError',\n      shortMessage: 'The Provider is not connected to the requested chain.'\n    });\n  }\n}\nObject.defineProperty(ChainDisconnectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4901\n});\nexport class SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(cause, {\n      code: SwitchChainError.code,\n      name: 'SwitchChainError',\n      shortMessage: 'An error occurred when attempting to switch chain.'\n    });\n  }\n}\nObject.defineProperty(SwitchChainError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 4902\n});\nexport class UnknownRpcError extends RpcError {\n  constructor(cause) {\n    super(cause, {\n      name: 'UnknownRpcError',\n      shortMessage: 'An unknown RPC error occurred.'\n    });\n  }\n}\n//# sourceMappingURL=rpc.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}