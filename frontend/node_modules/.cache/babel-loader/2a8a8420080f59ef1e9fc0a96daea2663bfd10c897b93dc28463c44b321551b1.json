{"ast":null,"code":"import { getTransactionCount } from '../actions/public/getTransactionCount.js';\nimport { LruMap } from './lru.js';\n/**\n * Creates a nonce manager for auto-incrementing transaction nonces.\n *\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\n *\n * @example\n * ```ts\n * const nonceManager = createNonceManager({\n *   source: jsonRpc(),\n * })\n * ```\n */\nexport function createNonceManager(parameters) {\n  const {\n    source\n  } = parameters;\n  const deltaMap = new Map();\n  const nonceMap = new LruMap(8192);\n  const promiseMap = new Map();\n  const getKey = ({\n    address,\n    chainId\n  }) => `${address}.${chainId}`;\n  return {\n    async consume({\n      address,\n      chainId,\n      client\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      const promise = this.get({\n        address,\n        chainId,\n        client\n      });\n      this.increment({\n        address,\n        chainId\n      });\n      const nonce = await promise;\n      await source.set({\n        address,\n        chainId\n      }, nonce);\n      nonceMap.set(key, nonce);\n      return nonce;\n    },\n    async increment({\n      address,\n      chainId\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      const delta = deltaMap.get(key) ?? 0;\n      deltaMap.set(key, delta + 1);\n    },\n    async get({\n      address,\n      chainId,\n      client\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      let promise = promiseMap.get(key);\n      if (!promise) {\n        promise = (async () => {\n          try {\n            const nonce = await source.get({\n              address,\n              chainId,\n              client\n            });\n            const previousNonce = nonceMap.get(key) ?? 0;\n            if (previousNonce > 0 && nonce <= previousNonce) return previousNonce + 1;\n            nonceMap.delete(key);\n            return nonce;\n          } finally {\n            this.reset({\n              address,\n              chainId\n            });\n          }\n        })();\n        promiseMap.set(key, promise);\n      }\n      const delta = deltaMap.get(key) ?? 0;\n      return delta + (await promise);\n    },\n    reset({\n      address,\n      chainId\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      deltaMap.delete(key);\n      promiseMap.delete(key);\n    }\n  };\n}\n/** JSON-RPC source for a nonce manager. */\nexport function jsonRpc() {\n  return {\n    async get(parameters) {\n      const {\n        address,\n        client\n      } = parameters;\n      return getTransactionCount(client, {\n        address,\n        blockTag: 'pending'\n      });\n    },\n    set() {}\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////\n// Default\n/** Default Nonce Manager with a JSON-RPC source. */\nexport const nonceManager = /*#__PURE__*/createNonceManager({\n  source: jsonRpc()\n});","map":{"version":3,"names":["getTransactionCount","LruMap","createNonceManager","parameters","source","deltaMap","Map","nonceMap","promiseMap","getKey","address","chainId","consume","client","key","promise","get","increment","nonce","set","delta","previousNonce","delete","reset","jsonRpc","blockTag","nonceManager"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\nonceManager.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { getTransactionCount } from '../actions/public/getTransactionCount.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { MaybePromise } from '../types/utils.js'\nimport { LruMap } from './lru.js'\n\nexport type CreateNonceManagerParameters = {\n  source: NonceManagerSource\n}\n\ntype FunctionParameters = {\n  address: Address\n  chainId: number\n}\n\nexport type NonceManager = {\n  /** Get and increment a nonce. */\n  consume: (\n    parameters: FunctionParameters & { client: Client },\n  ) => Promise<number>\n  /** Increment a nonce. */\n  increment: (chainId: FunctionParameters) => void\n  /** Get a nonce. */\n  get: (chainId: FunctionParameters & { client: Client }) => Promise<number>\n  /** Reset a nonce. */\n  reset: (chainId: FunctionParameters) => void\n}\n\n/**\n * Creates a nonce manager for auto-incrementing transaction nonces.\n *\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\n *\n * @example\n * ```ts\n * const nonceManager = createNonceManager({\n *   source: jsonRpc(),\n * })\n * ```\n */\nexport function createNonceManager(\n  parameters: CreateNonceManagerParameters,\n): NonceManager {\n  const { source } = parameters\n\n  const deltaMap = new Map()\n  const nonceMap = new LruMap<number>(8192)\n  const promiseMap = new Map<string, Promise<number>>()\n\n  const getKey = ({ address, chainId }: FunctionParameters) =>\n    `${address}.${chainId}`\n\n  return {\n    async consume({ address, chainId, client }) {\n      const key = getKey({ address, chainId })\n      const promise = this.get({ address, chainId, client })\n\n      this.increment({ address, chainId })\n      const nonce = await promise\n\n      await source.set({ address, chainId }, nonce)\n      nonceMap.set(key, nonce)\n\n      return nonce\n    },\n    async increment({ address, chainId }) {\n      const key = getKey({ address, chainId })\n      const delta = deltaMap.get(key) ?? 0\n      deltaMap.set(key, delta + 1)\n    },\n    async get({ address, chainId, client }) {\n      const key = getKey({ address, chainId })\n\n      let promise = promiseMap.get(key)\n      if (!promise) {\n        promise = (async () => {\n          try {\n            const nonce = await source.get({ address, chainId, client })\n            const previousNonce = nonceMap.get(key) ?? 0\n            if (previousNonce > 0 && nonce <= previousNonce)\n              return previousNonce + 1\n            nonceMap.delete(key)\n            return nonce\n          } finally {\n            this.reset({ address, chainId })\n          }\n        })()\n        promiseMap.set(key, promise)\n      }\n\n      const delta = deltaMap.get(key) ?? 0\n      return delta + (await promise)\n    },\n    reset({ address, chainId }) {\n      const key = getKey({ address, chainId })\n      deltaMap.delete(key)\n      promiseMap.delete(key)\n    },\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Sources\n\nexport type NonceManagerSource = {\n  /** Get a nonce. */\n  get(parameters: FunctionParameters & { client: Client }): MaybePromise<number>\n  /** Set a nonce. */\n  set(parameters: FunctionParameters, nonce: number): MaybePromise<void>\n}\n\n/** JSON-RPC source for a nonce manager. */\nexport function jsonRpc(): NonceManagerSource {\n  return {\n    async get(parameters) {\n      const { address, client } = parameters\n      return getTransactionCount(client, {\n        address,\n        blockTag: 'pending',\n      })\n    },\n    set() {},\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Default\n\n/** Default Nonce Manager with a JSON-RPC source. */\nexport const nonceManager = /*#__PURE__*/ createNonceManager({\n  source: jsonRpc(),\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}