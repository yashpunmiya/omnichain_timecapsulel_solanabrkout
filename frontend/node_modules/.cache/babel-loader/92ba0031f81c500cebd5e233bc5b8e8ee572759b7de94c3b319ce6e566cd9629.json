{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatProof } from '../../utils/formatters/proof.js';\n/**\n * Returns the account and storage values of the specified account including the Merkle-proof.\n *\n * - Docs: https://viem.sh/docs/actions/public/getProof\n * - JSON-RPC Methods:\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n *\n * @param client - Client to use\n * @param parameters - {@link GetProofParameters}\n * @returns Proof data. {@link GetProofReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getProof } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getProof(client, {\n *  address: '0x...',\n *  storageKeys: ['0x...'],\n * })\n */\nexport async function getProof(client, {\n  address,\n  blockNumber,\n  blockTag: blockTag_,\n  storageKeys\n}) {\n  const blockTag = blockTag_ ?? 'latest';\n  const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n  const proof = await client.request({\n    method: 'eth_getProof',\n    params: [address, storageKeys, blockNumberHex || blockTag]\n  });\n  return formatProof(proof);\n}","map":{"version":3,"names":["numberToHex","formatProof","getProof","client","address","blockNumber","blockTag","blockTag_","storageKeys","blockNumberHex","undefined","proof","request","method","params"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\getProof.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatProofErrorType,\n  formatProof,\n} from '../../utils/formatters/proof.js'\n\nexport type GetProofParameters = {\n  /** Account address. */\n  address: Address\n  /** Array of storage-keys that should be proofed and included. */\n  storageKeys: Hash[]\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type GetProofReturnType = Proof\n\nexport type GetProofErrorType =\n  | NumberToHexErrorType\n  | FormatProofErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the account and storage values of the specified account including the Merkle-proof.\n *\n * - Docs: https://viem.sh/docs/actions/public/getProof\n * - JSON-RPC Methods:\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n *\n * @param client - Client to use\n * @param parameters - {@link GetProofParameters}\n * @returns Proof data. {@link GetProofReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getProof } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getProof(client, {\n *  address: '0x...',\n *  storageKeys: ['0x...'],\n * })\n */\nexport async function getProof<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockNumber,\n    blockTag: blockTag_,\n    storageKeys,\n  }: GetProofParameters,\n): Promise<GetProofReturnType> {\n  const blockTag = blockTag_ ?? 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  const proof = await client.request({\n    method: 'eth_getProof',\n    params: [address, storageKeys, blockNumberHex || blockTag],\n  })\n\n  return formatProof(proof)\n}\n"],"mappings":"AASA,SAEEA,WAAW,QACN,+BAA+B;AACtC,SAEEC,WAAW,QACN,iCAAiC;AA+BxC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,QAAQA,CAC5BC,MAAgC,EAChC;EACEC,OAAO;EACPC,WAAW;EACXC,QAAQ,EAAEC,SAAS;EACnBC;AAAW,CACQ;EAErB,MAAMF,QAAQ,GAAGC,SAAS,IAAI,QAAQ;EAEtC,MAAME,cAAc,GAClBJ,WAAW,KAAKK,SAAS,GAAGV,WAAW,CAACK,WAAW,CAAC,GAAGK,SAAS;EAElE,MAAMC,KAAK,GAAG,MAAMR,MAAM,CAACS,OAAO,CAAC;IACjCC,MAAM,EAAE,cAAc;IACtBC,MAAM,EAAE,CAACV,OAAO,EAAEI,WAAW,EAAEC,cAAc,IAAIH,QAAQ;GAC1D,CAAC;EAEF,OAAOL,WAAW,CAACU,KAAK,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}