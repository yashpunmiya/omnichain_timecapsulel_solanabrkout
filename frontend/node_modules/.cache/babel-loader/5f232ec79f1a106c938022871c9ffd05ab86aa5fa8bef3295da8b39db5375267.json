{"ast":null,"code":"/*!\n * Infinite Scroll v2.0.4\n * measure size of elements\n * MIT license\n */\n\n(function (window, factory) {\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n})(window, function factory() {\n  // -------------------------- helpers -------------------------- //\n\n  // get a number from a string, not a percentage\n  function getStyleSize(value) {\n    let num = parseFloat(value);\n    // not a percent like '100%', and a number\n    let isValid = value.indexOf('%') == -1 && !isNaN(num);\n    return isValid && num;\n  }\n\n  // -------------------------- measurements -------------------------- //\n\n  let measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];\n  let measurementsLength = measurements.length;\n  function getZeroSize() {\n    let size = {\n      width: 0,\n      height: 0,\n      innerWidth: 0,\n      innerHeight: 0,\n      outerWidth: 0,\n      outerHeight: 0\n    };\n    measurements.forEach(measurement => {\n      size[measurement] = 0;\n    });\n    return size;\n  }\n\n  // -------------------------- getSize -------------------------- //\n\n  function getSize(elem) {\n    // use querySeletor if elem is string\n    if (typeof elem == 'string') elem = document.querySelector(elem);\n\n    // do not proceed on non-objects\n    let isElement = elem && typeof elem == 'object' && elem.nodeType;\n    if (!isElement) return;\n    let style = getComputedStyle(elem);\n\n    // if hidden, everything is 0\n    if (style.display == 'none') return getZeroSize();\n    let size = {};\n    size.width = elem.offsetWidth;\n    size.height = elem.offsetHeight;\n    let isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n    // get all measurements\n    measurements.forEach(measurement => {\n      let value = style[measurement];\n      let num = parseFloat(value);\n      // any 'auto', 'medium' value will be 0\n      size[measurement] = !isNaN(num) ? num : 0;\n    });\n    let paddingWidth = size.paddingLeft + size.paddingRight;\n    let paddingHeight = size.paddingTop + size.paddingBottom;\n    let marginWidth = size.marginLeft + size.marginRight;\n    let marginHeight = size.marginTop + size.marginBottom;\n    let borderWidth = size.borderLeftWidth + size.borderRightWidth;\n    let borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n    // overwrite width and height if we can get it from style\n    let styleWidth = getStyleSize(style.width);\n    if (styleWidth !== false) {\n      size.width = styleWidth + (\n      // add padding and border unless it's already including it\n      isBorderBox ? 0 : paddingWidth + borderWidth);\n    }\n    let styleHeight = getStyleSize(style.height);\n    if (styleHeight !== false) {\n      size.height = styleHeight + (\n      // add padding and border unless it's already including it\n      isBorderBox ? 0 : paddingHeight + borderHeight);\n    }\n    size.innerWidth = size.width - (paddingWidth + borderWidth);\n    size.innerHeight = size.height - (paddingHeight + borderHeight);\n    size.outerWidth = size.width + marginWidth;\n    size.outerHeight = size.height + marginHeight;\n    return size;\n  }\n  return getSize;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}