{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.envUtils = exports.getJWSPublicKey = exports.getEnvironment = exports.isNative = exports.isDesktop = exports.isWeb = void 0;\nconst ua_parser_js_1 = require(\"ua-parser-js\");\nconst jws_1 = require(\"./jws\");\nconst isWeb = () => process.env.SUITE_TYPE === 'web';\nexports.isWeb = isWeb;\nconst isDesktop = () => process.env.SUITE_TYPE === 'desktop';\nexports.isDesktop = isDesktop;\nconst isNative = () => false;\nexports.isNative = isNative;\nconst getEnvironment = () => {\n  if ((0, exports.isWeb)()) return 'web';\n  return 'desktop';\n};\nexports.getEnvironment = getEnvironment;\nlet userAgentParser;\nconst getUserAgent = () => window.navigator.userAgent;\nconst getUserAgentParser = () => {\n  if (!userAgentParser) {\n    const ua = getUserAgent();\n    userAgentParser = new ua_parser_js_1.UAParser(ua);\n  }\n  return userAgentParser;\n};\nconst isAndroid = () => /Android/.test(getUserAgent());\nconst isChromeOs = () => /CrOS/.test(getUserAgent());\nconst getBrowserVersion = () => getUserAgentParser().getBrowser().version || '';\nconst getCommitHash = () => process.env.COMMITHASH || '';\nconst getOsVersion = async () => {\n  const {\n    version\n  } = await getUserAgentParser().getOS().withClientHints();\n  return version ?? '';\n};\nconst getDeprecatedOsVersion = () => getUserAgentParser().getOS().version || '';\nconst getCpuArch = async () => {\n  const {\n    architecture\n  } = await getUserAgentParser().getCPU().withClientHints();\n  return architecture ?? '';\n};\nconst getSuiteVersion = () => process.env.VERSION || '';\nconst getBrowserName = () => {\n  const browserName = getUserAgentParser().getBrowser().name?.replace(' ', '');\n  return browserName?.toLowerCase() || '';\n};\nconst isFirefox = () => getBrowserName() === 'firefox';\nconst getPlatform = () => window.navigator.platform;\nconst getPlatformLanguages = () => window.navigator.languages;\nconst getScreenWidth = () => window.screen.width;\nconst getScreenHeight = () => window.screen.height;\nconst getWindowWidth = () => window.innerWidth;\nconst getWindowHeight = () => window.innerHeight;\nconst getLocationOrigin = () => window.location.origin;\nconst getLocationHostname = () => window.location.hostname;\nconst getProcessPlatform = () => typeof process !== 'undefined' ? process.platform : '';\nconst isMacOs = () => {\n  if (getProcessPlatform() === 'darwin') return true;\n  if (typeof window === 'undefined') return false;\n  return getPlatform().toLowerCase().startsWith('mac');\n};\nconst isWindows = () => {\n  if (getProcessPlatform() === 'win32') return true;\n  if (typeof window === 'undefined') return false;\n  return getPlatform().toLowerCase().startsWith('win');\n};\nconst isIOs = () => ['iPhone', 'iPad', 'iPod'].includes(getPlatform());\nconst isLinux = () => {\n  if (getProcessPlatform() === 'linux') return true;\n  if (typeof window === 'undefined') return false;\n  if (isAndroid() || isChromeOs()) return false;\n  return getPlatform().toLowerCase().startsWith('linux');\n};\nconst isCodesignBuild = () => process.env.IS_CODESIGN_BUILD === 'true';\nconst getOsName = () => {\n  if (isWindows()) return 'windows';\n  if (isMacOs()) return 'macos';\n  if (isAndroid()) return 'android';\n  if (isChromeOs()) return 'chromeos';\n  if (isLinux()) return 'linux';\n  if (isIOs()) return 'ios';\n  return '';\n};\nconst getOsNameWeb = () => getUserAgentParser().getOS().name?.replaceAll(' ', '');\nconst getOsFamily = () => {\n  const osName = getUserAgentParser().getOS().name?.toLowerCase().replaceAll(' ', '');\n  if (osName === 'windows') {\n    return 'Windows';\n  }\n  if (osName === 'macos') {\n    return 'MacOS';\n  }\n  return 'Linux';\n};\nconst getDeviceType = () => getUserAgentParser().getDevice().type;\nconst getJWSPublicKey = () => isCodesignBuild() ? jws_1.publicKey.codesign : jws_1.publicKey.dev;\nexports.getJWSPublicKey = getJWSPublicKey;\nexports.envUtils = {\n  isWeb: exports.isWeb,\n  isDesktop: exports.isDesktop,\n  isNative: exports.isNative,\n  getEnvironment: exports.getEnvironment,\n  getUserAgent,\n  isAndroid,\n  isChromeOs,\n  getOsVersion,\n  getDeprecatedOsVersion,\n  getCpuArch,\n  getBrowserName,\n  getBrowserVersion,\n  getCommitHash,\n  getDeviceType,\n  getSuiteVersion,\n  isFirefox,\n  getPlatform,\n  getPlatformLanguages,\n  getScreenWidth,\n  getScreenHeight,\n  getWindowWidth,\n  getWindowHeight,\n  getLocationOrigin,\n  getLocationHostname,\n  getProcessPlatform,\n  isMacOs,\n  isWindows,\n  isIOs,\n  isLinux,\n  isCodesignBuild,\n  getOsName,\n  getOsNameWeb,\n  getOsFamily,\n  getJWSPublicKey: exports.getJWSPublicKey\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","envUtils","getJWSPublicKey","getEnvironment","isNative","isDesktop","isWeb","ua_parser_js_1","require","jws_1","process","env","SUITE_TYPE","userAgentParser","getUserAgent","window","navigator","userAgent","getUserAgentParser","ua","UAParser","isAndroid","test","isChromeOs","getBrowserVersion","getBrowser","version","getCommitHash","COMMITHASH","getOsVersion","getOS","withClientHints","getDeprecatedOsVersion","getCpuArch","architecture","getCPU","getSuiteVersion","VERSION","getBrowserName","browserName","name","replace","toLowerCase","isFirefox","getPlatform","platform","getPlatformLanguages","languages","getScreenWidth","screen","width","getScreenHeight","height","getWindowWidth","innerWidth","getWindowHeight","innerHeight","getLocationOrigin","location","origin","getLocationHostname","hostname","getProcessPlatform","isMacOs","startsWith","isWindows","isIOs","includes","isLinux","isCodesignBuild","IS_CODESIGN_BUILD","getOsName","getOsNameWeb","replaceAll","getOsFamily","osName","getDeviceType","getDevice","type","publicKey","codesign","dev"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@trezor/env-utils/lib/envUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.envUtils = exports.getJWSPublicKey = exports.getEnvironment = exports.isNative = exports.isDesktop = exports.isWeb = void 0;\nconst ua_parser_js_1 = require(\"ua-parser-js\");\nconst jws_1 = require(\"./jws\");\nconst isWeb = () => process.env.SUITE_TYPE === 'web';\nexports.isWeb = isWeb;\nconst isDesktop = () => process.env.SUITE_TYPE === 'desktop';\nexports.isDesktop = isDesktop;\nconst isNative = () => false;\nexports.isNative = isNative;\nconst getEnvironment = () => {\n    if ((0, exports.isWeb)())\n        return 'web';\n    return 'desktop';\n};\nexports.getEnvironment = getEnvironment;\nlet userAgentParser;\nconst getUserAgent = () => window.navigator.userAgent;\nconst getUserAgentParser = () => {\n    if (!userAgentParser) {\n        const ua = getUserAgent();\n        userAgentParser = new ua_parser_js_1.UAParser(ua);\n    }\n    return userAgentParser;\n};\nconst isAndroid = () => /Android/.test(getUserAgent());\nconst isChromeOs = () => /CrOS/.test(getUserAgent());\nconst getBrowserVersion = () => getUserAgentParser().getBrowser().version || '';\nconst getCommitHash = () => process.env.COMMITHASH || '';\nconst getOsVersion = async () => {\n    const { version } = await getUserAgentParser().getOS().withClientHints();\n    return version ?? '';\n};\nconst getDeprecatedOsVersion = () => getUserAgentParser().getOS().version || '';\nconst getCpuArch = async () => {\n    const { architecture } = await getUserAgentParser().getCPU().withClientHints();\n    return architecture ?? '';\n};\nconst getSuiteVersion = () => process.env.VERSION || '';\nconst getBrowserName = () => {\n    const browserName = getUserAgentParser().getBrowser().name?.replace(' ', '');\n    return browserName?.toLowerCase() || '';\n};\nconst isFirefox = () => getBrowserName() === 'firefox';\nconst getPlatform = () => window.navigator.platform;\nconst getPlatformLanguages = () => window.navigator.languages;\nconst getScreenWidth = () => window.screen.width;\nconst getScreenHeight = () => window.screen.height;\nconst getWindowWidth = () => window.innerWidth;\nconst getWindowHeight = () => window.innerHeight;\nconst getLocationOrigin = () => window.location.origin;\nconst getLocationHostname = () => window.location.hostname;\nconst getProcessPlatform = () => (typeof process !== 'undefined' ? process.platform : '');\nconst isMacOs = () => {\n    if (getProcessPlatform() === 'darwin')\n        return true;\n    if (typeof window === 'undefined')\n        return false;\n    return getPlatform().toLowerCase().startsWith('mac');\n};\nconst isWindows = () => {\n    if (getProcessPlatform() === 'win32')\n        return true;\n    if (typeof window === 'undefined')\n        return false;\n    return getPlatform().toLowerCase().startsWith('win');\n};\nconst isIOs = () => ['iPhone', 'iPad', 'iPod'].includes(getPlatform());\nconst isLinux = () => {\n    if (getProcessPlatform() === 'linux')\n        return true;\n    if (typeof window === 'undefined')\n        return false;\n    if (isAndroid() || isChromeOs())\n        return false;\n    return getPlatform().toLowerCase().startsWith('linux');\n};\nconst isCodesignBuild = () => process.env.IS_CODESIGN_BUILD === 'true';\nconst getOsName = () => {\n    if (isWindows())\n        return 'windows';\n    if (isMacOs())\n        return 'macos';\n    if (isAndroid())\n        return 'android';\n    if (isChromeOs())\n        return 'chromeos';\n    if (isLinux())\n        return 'linux';\n    if (isIOs())\n        return 'ios';\n    return '';\n};\nconst getOsNameWeb = () => getUserAgentParser().getOS().name?.replaceAll(' ', '');\nconst getOsFamily = () => {\n    const osName = getUserAgentParser().getOS().name?.toLowerCase().replaceAll(' ', '');\n    if (osName === 'windows') {\n        return 'Windows';\n    }\n    if (osName === 'macos') {\n        return 'MacOS';\n    }\n    return 'Linux';\n};\nconst getDeviceType = () => getUserAgentParser().getDevice().type;\nconst getJWSPublicKey = () => (isCodesignBuild() ? jws_1.publicKey.codesign : jws_1.publicKey.dev);\nexports.getJWSPublicKey = getJWSPublicKey;\nexports.envUtils = {\n    isWeb: exports.isWeb,\n    isDesktop: exports.isDesktop,\n    isNative: exports.isNative,\n    getEnvironment: exports.getEnvironment,\n    getUserAgent,\n    isAndroid,\n    isChromeOs,\n    getOsVersion,\n    getDeprecatedOsVersion,\n    getCpuArch,\n    getBrowserName,\n    getBrowserVersion,\n    getCommitHash,\n    getDeviceType,\n    getSuiteVersion,\n    isFirefox,\n    getPlatform,\n    getPlatformLanguages,\n    getScreenWidth,\n    getScreenHeight,\n    getWindowWidth,\n    getWindowHeight,\n    getLocationOrigin,\n    getLocationHostname,\n    getProcessPlatform,\n    isMacOs,\n    isWindows,\n    isIOs,\n    isLinux,\n    isCodesignBuild,\n    getOsName,\n    getOsNameWeb,\n    getOsFamily,\n    getJWSPublicKey: exports.getJWSPublicKey,\n};\n//# sourceMappingURL=envUtils.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}