{"ast":null,"code":"import { SolanaMobileWalletAdapterWalletName } from '@solana-mobile/wallet-adapter-mobile';\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nexport var Environment;\n(function (Environment) {\n  Environment[Environment[\"DESKTOP_WEB\"] = 0] = \"DESKTOP_WEB\";\n  Environment[Environment[\"MOBILE_WEB\"] = 1] = \"MOBILE_WEB\";\n})(Environment || (Environment = {}));\nfunction isWebView(userAgentString) {\n  return /(WebView|Version\\/.+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)|; wv\\).+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))/i.test(userAgentString);\n}\nexport default function getEnvironment({\n  adapters,\n  userAgentString\n}) {\n  if (adapters.some(adapter => adapter.name !== SolanaMobileWalletAdapterWalletName && adapter.readyState === WalletReadyState.Installed)) {\n    /**\n     * There are only two ways a browser extension adapter should be able to reach `Installed` status:\n     *\n     *     1. Its browser extension is installed.\n     *     2. The app is running on a mobile wallet's in-app browser.\n     *\n     * In either case, we consider the environment to be desktop-like.\n     */\n    return Environment.DESKTOP_WEB;\n  }\n  if (userAgentString &&\n  // Step 1: Check whether we're on a platform that supports MWA at all.\n  /android/i.test(userAgentString) &&\n  // Step 2: Determine that we are *not* running in a WebView.\n  !isWebView(userAgentString)) {\n    return Environment.MOBILE_WEB;\n  } else {\n    return Environment.DESKTOP_WEB;\n  }\n}\n//# sourceMappingURL=getEnvironment.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}