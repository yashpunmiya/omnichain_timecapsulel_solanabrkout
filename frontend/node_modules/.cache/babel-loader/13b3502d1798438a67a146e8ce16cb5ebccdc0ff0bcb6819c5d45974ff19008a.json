{"ast":null,"code":"/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction(client, actionFn,\n// Some minifiers drop `Function.prototype.name`, or replace it with short letters,\n// meaning that `actionFn.name` will not always work. For that case, the consumer\n// needs to pass the name explicitly.\nname) {\n  const action_implicit = client[actionFn.name];\n  if (typeof action_implicit === 'function') return action_implicit;\n  const action_explicit = client[name];\n  if (typeof action_explicit === 'function') return action_explicit;\n  return params => actionFn(client, params);\n}","map":{"version":3,"names":["getAction","client","actionFn","name","action_implicit","action_explicit","params"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\getAction.ts"],"sourcesContent":["import type { Client } from '../clients/createClient.js'\nimport type { PublicActions } from '../clients/decorators/public.js'\nimport type { WalletActions } from '../clients/decorators/wallet.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { Account } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { RpcSchema } from '../types/eip1193.js'\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction<\n  transport extends Transport,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  rpcSchema extends RpcSchema | undefined,\n  extended extends { [key: string]: unknown },\n  client extends Client<transport, chain, account, rpcSchema, extended>,\n  parameters,\n  returnType,\n>(\n  client: client,\n  actionFn: (_: any, parameters: parameters) => returnType,\n  // Some minifiers drop `Function.prototype.name`, or replace it with short letters,\n  // meaning that `actionFn.name` will not always work. For that case, the consumer\n  // needs to pass the name explicitly.\n  name: keyof PublicActions | keyof WalletActions | (string & {}),\n): (parameters: parameters) => returnType {\n  const action_implicit = client[actionFn.name]\n  if (typeof action_implicit === 'function')\n    return action_implicit as (params: parameters) => returnType\n\n  const action_explicit = client[name]\n  if (typeof action_explicit === 'function')\n    return action_explicit as (params: parameters) => returnType\n\n  return (params) => actionFn(client, params)\n}\n"],"mappings":"AAQA;;;;;;;AAOA,OAAM,SAAUA,SAASA,CAUvBC,MAAc,EACdC,QAAwD;AACxD;AACA;AACA;AACAC,IAA+D;EAE/D,MAAMC,eAAe,GAAGH,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;EAC7C,IAAI,OAAOC,eAAe,KAAK,UAAU,EACvC,OAAOA,eAAqD;EAE9D,MAAMC,eAAe,GAAGJ,MAAM,CAACE,IAAI,CAAC;EACpC,IAAI,OAAOE,eAAe,KAAK,UAAU,EACvC,OAAOA,eAAqD;EAE9D,OAAQC,MAAM,IAAKJ,QAAQ,CAACD,MAAM,EAAEK,MAAM,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}