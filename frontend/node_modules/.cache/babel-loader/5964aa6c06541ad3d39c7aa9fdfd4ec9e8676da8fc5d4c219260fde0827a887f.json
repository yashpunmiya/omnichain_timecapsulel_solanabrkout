{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\n/**\n * Requests the connected wallet to send a batch of calls.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Transaction identifier. {@link SendCallsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const id = await sendCalls(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCalls(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    forceAtomic = false,\n    id,\n    version = '2.0.0'\n  } = parameters;\n  if (typeof account_ === 'undefined') throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendCalls'\n  });\n  const account = account_ ? parseAccount(account_) : null;\n  const calls = parameters.calls.map(call_ => {\n    const call = call_;\n    const data = call.abi ? encodeFunctionData({\n      abi: call.abi,\n      functionName: call.functionName,\n      args: call.args\n    }) : call.data;\n    return {\n      data,\n      to: call.to,\n      value: call.value ? numberToHex(call.value) : undefined\n    };\n  });\n  try {\n    const response = await client.request({\n      method: 'wallet_sendCalls',\n      params: [{\n        atomicRequired: forceAtomic,\n        calls,\n        capabilities: formatRequestCapabilities(parameters.capabilities),\n        chainId: numberToHex(chain.id),\n        from: account?.address,\n        id,\n        version\n      }]\n    }, {\n      retryCount: 0\n    });\n    if (typeof response === 'string') return {\n      id: response\n    };\n    return response;\n  } catch (err) {\n    throw getTransactionError(err, {\n      ...parameters,\n      account,\n      chain: parameters.chain\n    });\n  }\n}\nfunction formatRequestCapabilities(capabilities) {\n  const paymasterService = capabilities?.paymasterService ? Object.entries(capabilities.paymasterService).reduce((paymasterService, [chainId, value]) => ({\n    ...(paymasterService ?? {}),\n    [numberToHex(Number(chainId))]: value\n  }), {}) : undefined;\n  return {\n    ...capabilities,\n    ...(paymasterService ? {\n      paymasterService\n    } : {})\n  };\n}\n//# sourceMappingURL=sendCalls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}