{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StellarOperationMessage = exports.StellarSignedTx = exports.StellarSignTransaction = exports.StellarTransaction = exports.StellarOperation = exports.StellarClaimClaimableBalanceOperation = exports.StellarInflationOperation = exports.StellarBumpSequenceOperation = exports.StellarManageDataOperation = exports.StellarAccountMergeOperation = exports.StellarAllowTrustOperation = exports.StellarChangeTrustOperation = exports.StellarSetOptionsOperation = exports.StellarManageBuyOfferOperation = exports.StellarManageSellOfferOperation = exports.StellarPassiveSellOfferOperation = exports.StellarPathPaymentStrictSendOperation = exports.StellarPathPaymentStrictReceiveOperation = exports.StellarPaymentOperation = exports.StellarCreateAccountOperation = exports.StellarAsset = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst constants_1 = require(\"../../../constants\");\nconst params_1 = require(\"../../params\");\nexports.StellarAsset = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Union([constants_1.PROTO.EnumStellarAssetType, schema_utils_1.Type.KeyOfEnum(constants_1.PROTO.StellarAssetType)]),\n  code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  issuer: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.StellarCreateAccountOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('createAccount'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  destination: schema_utils_1.Type.String(),\n  startingBalance: schema_utils_1.Type.String()\n});\nexports.StellarPaymentOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('payment'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  destination: schema_utils_1.Type.String(),\n  asset: exports.StellarAsset,\n  amount: schema_utils_1.Type.String()\n});\nexports.StellarPathPaymentStrictReceiveOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('pathPaymentStrictReceive'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  sendAsset: exports.StellarAsset,\n  sendMax: schema_utils_1.Type.Uint(),\n  destination: schema_utils_1.Type.String(),\n  destAsset: exports.StellarAsset,\n  destAmount: schema_utils_1.Type.Uint(),\n  path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset))\n});\nexports.StellarPathPaymentStrictSendOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('pathPaymentStrictSend'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  sendAsset: exports.StellarAsset,\n  sendAmount: schema_utils_1.Type.Uint(),\n  destination: schema_utils_1.Type.String(),\n  destAsset: exports.StellarAsset,\n  destMin: schema_utils_1.Type.Uint(),\n  path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset))\n});\nexports.StellarPassiveSellOfferOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('createPassiveSellOffer'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  buying: exports.StellarAsset,\n  selling: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint(),\n  price: schema_utils_1.Type.Object({\n    n: schema_utils_1.Type.Number(),\n    d: schema_utils_1.Type.Number()\n  })\n});\nexports.StellarManageSellOfferOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('manageSellOffer'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  buying: exports.StellarAsset,\n  selling: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint(),\n  offerId: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  price: schema_utils_1.Type.Object({\n    n: schema_utils_1.Type.Number(),\n    d: schema_utils_1.Type.Number()\n  })\n});\nexports.StellarManageBuyOfferOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('manageBuyOffer'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  buying: exports.StellarAsset,\n  selling: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint(),\n  offerId: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  price: schema_utils_1.Type.Object({\n    n: schema_utils_1.Type.Number(),\n    d: schema_utils_1.Type.Number()\n  })\n});\nexports.StellarSetOptionsOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('setOptions'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  signer: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    type: constants_1.PROTO.EnumStellarSignerType,\n    key: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Buffer()]),\n    weight: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n  })),\n  inflationDest: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  clearFlags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  setFlags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  masterWeight: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  lowThreshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  medThreshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  highThreshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  homeDomain: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.StellarChangeTrustOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('changeTrust'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  line: exports.StellarAsset,\n  limit: schema_utils_1.Type.String()\n});\nexports.StellarAllowTrustOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('allowTrust'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  trustor: schema_utils_1.Type.String(),\n  assetCode: schema_utils_1.Type.String(),\n  assetType: constants_1.PROTO.EnumStellarAssetType,\n  authorize: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Undefined()]))\n});\nexports.StellarAccountMergeOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('accountMerge'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  destination: schema_utils_1.Type.String()\n});\nexports.StellarManageDataOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('manageData'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  name: schema_utils_1.Type.String(),\n  value: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Buffer()]))\n});\nexports.StellarBumpSequenceOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('bumpSequence'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  bumpTo: schema_utils_1.Type.Uint()\n});\nexports.StellarInflationOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('inflation'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.StellarClaimClaimableBalanceOperation = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('claimClaimableBalance'),\n  source: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  balanceId: schema_utils_1.Type.String()\n});\nexports.StellarOperation = schema_utils_1.Type.Union([exports.StellarCreateAccountOperation, exports.StellarPaymentOperation, exports.StellarPathPaymentStrictReceiveOperation, exports.StellarPathPaymentStrictSendOperation, exports.StellarPassiveSellOfferOperation, exports.StellarManageSellOfferOperation, exports.StellarManageBuyOfferOperation, exports.StellarSetOptionsOperation, exports.StellarChangeTrustOperation, exports.StellarAllowTrustOperation, exports.StellarAccountMergeOperation, exports.StellarInflationOperation, exports.StellarManageDataOperation, exports.StellarBumpSequenceOperation, exports.StellarClaimClaimableBalanceOperation]);\nexports.StellarTransaction = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.String(),\n  fee: schema_utils_1.Type.Number(),\n  sequence: schema_utils_1.Type.Uint(),\n  timebounds: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    minTime: schema_utils_1.Type.Number(),\n    maxTime: schema_utils_1.Type.Number()\n  })),\n  memo: schema_utils_1.Type.Optional(schema_utils_1.Type.Object({\n    type: constants_1.PROTO.EnumStellarMemoType,\n    id: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n    text: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n    hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Buffer()]))\n  })),\n  operations: schema_utils_1.Type.Array(exports.StellarOperation)\n});\nexports.StellarSignTransaction = schema_utils_1.Type.Object({\n  path: params_1.DerivationPath,\n  networkPassphrase: schema_utils_1.Type.String(),\n  transaction: exports.StellarTransaction\n});\nexports.StellarSignedTx = schema_utils_1.Type.Object({\n  publicKey: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String()\n});\nexports.StellarOperationMessage = schema_utils_1.Type.Union([schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarCreateAccountOp')\n}), constants_1.PROTO.StellarCreateAccountOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarPaymentOp')\n}), constants_1.PROTO.StellarPaymentOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarPathPaymentStrictReceiveOp')\n}), constants_1.PROTO.StellarPathPaymentStrictReceiveOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarPathPaymentStrictSendOp')\n}), constants_1.PROTO.StellarPathPaymentStrictSendOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarManageSellOfferOp')\n}), constants_1.PROTO.StellarManageSellOfferOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarManageBuyOfferOp')\n}), constants_1.PROTO.StellarManageBuyOfferOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarCreatePassiveSellOfferOp')\n}), constants_1.PROTO.StellarCreatePassiveSellOfferOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarSetOptionsOp')\n}), constants_1.PROTO.StellarSetOptionsOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarChangeTrustOp')\n}), constants_1.PROTO.StellarChangeTrustOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarAllowTrustOp')\n}), constants_1.PROTO.StellarAllowTrustOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarAccountMergeOp')\n}), constants_1.PROTO.StellarAccountMergeOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarManageDataOp')\n}), constants_1.PROTO.StellarManageDataOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarBumpSequenceOp')\n}), constants_1.PROTO.StellarBumpSequenceOp]), schema_utils_1.Type.Intersect([schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('StellarClaimClaimableBalanceOp')\n}), constants_1.PROTO.StellarClaimClaimableBalanceOp])]);\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}