{"ast":null,"code":"// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base(ALPHABET) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  const BASE_MAP = new Uint8Array(256);\n  for (let j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i);\n    const xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  const BASE = ALPHABET.length;\n  const LEADER = ALPHABET.charAt(0);\n  const FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode(source) {\n    // eslint-disable-next-line no-empty\n    if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    // Skip & count leading zeroes.\n    let zeroes = 0;\n    let length = 0;\n    let pbegin = 0;\n    const pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    const b58 = new Uint8Array(size);\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin];\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0;\n      for (let it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    let psz = 0;\n    // Skip and count leading '1's.\n    let zeroes = 0;\n    let length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size);\n    // Process the characters.\n    while (psz < source.length) {\n      // Find code of next character\n      const charCode = source.charCodeAt(psz);\n      // Base map can not be indexed using char code\n      if (charCode > 255) {\n        return;\n      }\n      // Decode character\n      let carry = BASE_MAP[charCode];\n      // Invalid character\n      if (carry === 255) {\n        return;\n      }\n      let i = 0;\n      for (let it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    const vch = new Uint8Array(zeroes + (size - it4));\n    let j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    const buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error('Non-base' + BASE + ' character');\n  }\n  return {\n    encode,\n    decodeUnsafe,\n    decode\n  };\n}\nexport default base;","map":{"version":3,"names":["base","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","psz","b256","charCode","it3","it4","vch","decode","string"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@reown/appkit/node_modules/base-x/src/esm/index.js"],"sourcesContent":["// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  const BASE_MAP = new Uint8Array(256)\n  for (let j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    // eslint-disable-next-line no-empty\n    if (source instanceof Uint8Array) { } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    let psz = 0\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n    // Process the characters.\n    while (psz < source.length) {\n      // Find code of next character\n      const charCode = source.charCodeAt(psz)\n      // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n      // Decode character\n      let carry = BASE_MAP[charCode]\n      // Invalid character\n      if (carry === 255) { return }\n      let i = 0\n      for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    const vch = new Uint8Array(zeroes + (size - it4))\n    let j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode,\n    decodeUnsafe,\n    decode\n  }\n}\nexport default base\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}