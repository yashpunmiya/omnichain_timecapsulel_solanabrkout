{"ast":null,"code":"import { BytesSizeMismatchError } from '../errors/abi.js';\nimport { InvalidAddressError } from '../errors/address.js';\nimport { InvalidDomainError, InvalidPrimaryTypeError, InvalidStructTypeError } from '../errors/typedData.js';\nimport { isAddress } from './address/isAddress.js';\nimport { size } from './data/size.js';\nimport { numberToHex } from './encoding/toHex.js';\nimport { bytesRegex, integerRegex } from './regex.js';\nimport { hashDomain } from './signature/hashTypedData.js';\nimport { stringify } from './stringify.js';\nexport function serializeTypedData(parameters) {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types\n  } = parameters;\n  const normalizeData = (struct, data_) => {\n    const data = {\n      ...data_\n    };\n    for (const param of struct) {\n      const {\n        name,\n        type\n      } = param;\n      if (type === 'address') data[name] = data[name].toLowerCase();\n    }\n    return data;\n  };\n  const domain = (() => {\n    if (!types.EIP712Domain) return {};\n    if (!domain_) return {};\n    return normalizeData(types.EIP712Domain, domain_);\n  })();\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined;\n    return normalizeData(types[primaryType], message_);\n  })();\n  return stringify({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n}\nexport function validateTypedData(parameters) {\n  const {\n    domain,\n    message,\n    primaryType,\n    types\n  } = parameters;\n  const validateData = (struct, data) => {\n    for (const param of struct) {\n      const {\n        name,\n        type\n      } = param;\n      const value = data[name];\n      const integerMatch = type.match(integerRegex);\n      if (integerMatch && (typeof value === 'number' || typeof value === 'bigint')) {\n        const [_type, base, size_] = integerMatch;\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8\n        });\n      }\n      if (type === 'address' && typeof value === 'string' && !isAddress(value)) throw new InvalidAddressError({\n        address: value\n      });\n      const bytesMatch = type.match(bytesRegex);\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch;\n        if (size_ && size(value) !== Number.parseInt(size_)) throw new BytesSizeMismatchError({\n          expectedSize: Number.parseInt(size_),\n          givenSize: size(value)\n        });\n      }\n      const struct = types[type];\n      if (struct) {\n        validateReference(type);\n        validateData(struct, value);\n      }\n    }\n  };\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({\n      domain\n    });\n    validateData(types.EIP712Domain, domain);\n  }\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message);else throw new InvalidPrimaryTypeError({\n      primaryType,\n      types\n    });\n  }\n}\nexport function getTypesForEIP712Domain({\n  domain\n}) {\n  return [typeof domain?.name === 'string' && {\n    name: 'name',\n    type: 'string'\n  }, domain?.version && {\n    name: 'version',\n    type: 'string'\n  }, (typeof domain?.chainId === 'number' || typeof domain?.chainId === 'bigint') && {\n    name: 'chainId',\n    type: 'uint256'\n  }, domain?.verifyingContract && {\n    name: 'verifyingContract',\n    type: 'address'\n  }, domain?.salt && {\n    name: 'salt',\n    type: 'bytes32'\n  }].filter(Boolean);\n}\nexport function domainSeparator({\n  domain\n}) {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({\n        domain\n      })\n    }\n  });\n}\n/** @internal */\nfunction validateReference(type) {\n  // Struct type must not be a Solidity type.\n  if (type === 'address' || type === 'bool' || type === 'string' || type.startsWith('bytes') || type.startsWith('uint') || type.startsWith('int')) throw new InvalidStructTypeError({\n    type\n  });\n}","map":{"version":3,"names":["BytesSizeMismatchError","InvalidAddressError","InvalidDomainError","InvalidPrimaryTypeError","InvalidStructTypeError","isAddress","size","numberToHex","bytesRegex","integerRegex","hashDomain","stringify","serializeTypedData","parameters","domain","domain_","message","message_","primaryType","types","normalizeData","struct","data_","data","param","name","type","toLowerCase","EIP712Domain","undefined","validateTypedData","validateData","value","integerMatch","match","_type","base","size_","signed","Number","parseInt","address","bytesMatch","expectedSize","givenSize","validateReference","getTypesForEIP712Domain","version","chainId","verifyingContract","salt","filter","Boolean","domainSeparator","startsWith"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\typedData.ts"],"sourcesContent":["import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport {\n  InvalidDomainError,\n  InvalidPrimaryTypeError,\n  InvalidStructTypeError,\n} from '../errors/typedData.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\nimport { stringify } from './stringify.js'\n\nexport type SerializeTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function serializeTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = parameters as unknown as TypedDataDefinition\n\n  const normalizeData = (\n    struct: readonly TypedDataParameter[],\n    data_: Record<string, unknown>,\n  ) => {\n    const data = { ...data_ }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!types.EIP712Domain) return {}\n    if (!domain_) return {}\n    return normalizeData(types.EIP712Domain, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return stringify({ domain, message, primaryType, types })\n}\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) {\n        validateReference(type)\n        validateData(struct, value as Record<string, unknown>)\n      }\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({ domain })\n    validateData(types.EIP712Domain, domain)\n  }\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message)\n    else throw new InvalidPrimaryTypeError({ primaryType, types })\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    (typeof domain?.chainId === 'number' ||\n      typeof domain?.chainId === 'bigint') && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n\n/** @internal */\nfunction validateReference(type: string) {\n  // Struct type must not be a Solidity type.\n  if (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'string' ||\n    type.startsWith('bytes') ||\n    type.startsWith('uint') ||\n    type.startsWith('int')\n  )\n    throw new InvalidStructTypeError({ type })\n}\n"],"mappings":"AAEA,SAASA,sBAAsB,QAAQ,kBAAkB;AACzD,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SACEC,kBAAkB,EAClBC,uBAAuB,EACvBC,sBAAsB,QACjB,wBAAwB;AAI/B,SAAkCC,SAAS,QAAQ,wBAAwB;AAC3E,SAA6BC,IAAI,QAAQ,gBAAgB;AACzD,SAAoCC,WAAW,QAAQ,qBAAqB;AAC5E,SAASC,UAAU,EAAEC,YAAY,QAAQ,YAAY;AACrD,SAEEC,UAAU,QACL,8BAA8B;AACrC,SAASC,SAAS,QAAQ,gBAAgB;AAS1C,OAAM,SAAUC,kBAAkBA,CAGhCC,UAAuD;EACvD,MAAM;IACJC,MAAM,EAAEC,OAAO;IACfC,OAAO,EAAEC,QAAQ;IACjBC,WAAW;IACXC;EAAK,CACN,GAAGN,UAA4C;EAEhD,MAAMO,aAAa,GAAGA,CACpBC,MAAqC,EACrCC,KAA8B,KAC5B;IACF,MAAMC,IAAI,GAAG;MAAE,GAAGD;IAAK,CAAE;IACzB,KAAK,MAAME,KAAK,IAAIH,MAAM,EAAE;MAC1B,MAAM;QAAEI,IAAI;QAAEC;MAAI,CAAE,GAAGF,KAAK;MAC5B,IAAIE,IAAI,KAAK,SAAS,EAAEH,IAAI,CAACE,IAAI,CAAC,GAAIF,IAAI,CAACE,IAAI,CAAY,CAACE,WAAW,EAAE;IAC3E;IACA,OAAOJ,IAAI;EACb,CAAC;EAED,MAAMT,MAAM,GAAG,CAAC,MAAK;IACnB,IAAI,CAACK,KAAK,CAACS,YAAY,EAAE,OAAO,EAAE;IAClC,IAAI,CAACb,OAAO,EAAE,OAAO,EAAE;IACvB,OAAOK,aAAa,CAACD,KAAK,CAACS,YAAY,EAAEb,OAAO,CAAC;EACnD,CAAC,EAAC,CAAE;EAEJ,MAAMC,OAAO,GAAG,CAAC,MAAK;IACpB,IAAIE,WAAW,KAAK,cAAc,EAAE,OAAOW,SAAS;IACpD,OAAOT,aAAa,CAACD,KAAK,CAACD,WAAW,CAAC,EAAED,QAAQ,CAAC;EACpD,CAAC,EAAC,CAAE;EAEJ,OAAON,SAAS,CAAC;IAAEG,MAAM;IAAEE,OAAO;IAAEE,WAAW;IAAEC;EAAK,CAAE,CAAC;AAC3D;AASA,OAAM,SAAUW,iBAAiBA,CAG/BjB,UAAuD;EACvD,MAAM;IAAEC,MAAM;IAAEE,OAAO;IAAEE,WAAW;IAAEC;EAAK,CAAE,GAC3CN,UAA4C;EAE9C,MAAMkB,YAAY,GAAGA,CACnBV,MAAqC,EACrCE,IAA6B,KAC3B;IACF,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;MAC1B,MAAM;QAAEI,IAAI;QAAEC;MAAI,CAAE,GAAGF,KAAK;MAC5B,MAAMQ,KAAK,GAAGT,IAAI,CAACE,IAAI,CAAC;MAExB,MAAMQ,YAAY,GAAGP,IAAI,CAACQ,KAAK,CAACzB,YAAY,CAAC;MAC7C,IACEwB,YAAY,KACX,OAAOD,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,CAAC,EACxD;QACA,MAAM,CAACG,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC,GAAGJ,YAAY;QACzC;QACA;QACA1B,WAAW,CAACyB,KAAK,EAAE;UACjBM,MAAM,EAAEF,IAAI,KAAK,KAAK;UACtB9B,IAAI,EAAEiC,MAAM,CAACC,QAAQ,CAACH,KAAK,CAAC,GAAG;SAChC,CAAC;MACJ;MAEA,IAAIX,IAAI,KAAK,SAAS,IAAI,OAAOM,KAAK,KAAK,QAAQ,IAAI,CAAC3B,SAAS,CAAC2B,KAAK,CAAC,EACtE,MAAM,IAAI/B,mBAAmB,CAAC;QAAEwC,OAAO,EAAET;MAAK,CAAE,CAAC;MAEnD,MAAMU,UAAU,GAAGhB,IAAI,CAACQ,KAAK,CAAC1B,UAAU,CAAC;MACzC,IAAIkC,UAAU,EAAE;QACd,MAAM,CAACP,KAAK,EAAEE,KAAK,CAAC,GAAGK,UAAU;QACjC,IAAIL,KAAK,IAAI/B,IAAI,CAAC0B,KAAY,CAAC,KAAKO,MAAM,CAACC,QAAQ,CAACH,KAAK,CAAC,EACxD,MAAM,IAAIrC,sBAAsB,CAAC;UAC/B2C,YAAY,EAAEJ,MAAM,CAACC,QAAQ,CAACH,KAAK,CAAC;UACpCO,SAAS,EAAEtC,IAAI,CAAC0B,KAAY;SAC7B,CAAC;MACN;MAEA,MAAMX,MAAM,GAAGF,KAAK,CAACO,IAAI,CAAC;MAC1B,IAAIL,MAAM,EAAE;QACVwB,iBAAiB,CAACnB,IAAI,CAAC;QACvBK,YAAY,CAACV,MAAM,EAAEW,KAAgC,CAAC;MACxD;IACF;EACF,CAAC;EAED;EACA,IAAIb,KAAK,CAACS,YAAY,IAAId,MAAM,EAAE;IAChC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE,MAAM,IAAIZ,kBAAkB,CAAC;MAAEY;IAAM,CAAE,CAAC;IACxEiB,YAAY,CAACZ,KAAK,CAACS,YAAY,EAAEd,MAAM,CAAC;EAC1C;EAEA;EACA,IAAII,WAAW,KAAK,cAAc,EAAE;IAClC,IAAIC,KAAK,CAACD,WAAW,CAAC,EAAEa,YAAY,CAACZ,KAAK,CAACD,WAAW,CAAC,EAAEF,OAAO,CAAC,MAC5D,MAAM,IAAIb,uBAAuB,CAAC;MAAEe,WAAW;MAAEC;IAAK,CAAE,CAAC;EAChE;AACF;AAIA,OAAM,SAAU2B,uBAAuBA,CAAC;EACtChC;AAAM,CACmC;EACzC,OAAO,CACL,OAAOA,MAAM,EAAEW,IAAI,KAAK,QAAQ,IAAI;IAAEA,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAQ,CAAE,EACpEZ,MAAM,EAAEiC,OAAO,IAAI;IAAEtB,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAQ,CAAE,EACtD,CAAC,OAAOZ,MAAM,EAAEkC,OAAO,KAAK,QAAQ,IAClC,OAAOlC,MAAM,EAAEkC,OAAO,KAAK,QAAQ,KAAK;IACxCvB,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;GACP,EACDZ,MAAM,EAAEmC,iBAAiB,IAAI;IAC3BxB,IAAI,EAAE,mBAAmB;IACzBC,IAAI,EAAE;GACP,EACDZ,MAAM,EAAEoC,IAAI,IAAI;IAAEzB,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAS,CAAE,CAClD,CAACyB,MAAM,CAACC,OAAO,CAAyB;AAC3C;AAOA,OAAM,SAAUC,eAAeA,CAAC;EAAEvC;AAAM,CAA+B;EACrE,OAAOJ,UAAU,CAAC;IAChBI,MAAM;IACNK,KAAK,EAAE;MACLS,YAAY,EAAEkB,uBAAuB,CAAC;QAAEhC;MAAM,CAAE;;GAEnD,CAAC;AACJ;AAEA;AACA,SAAS+B,iBAAiBA,CAACnB,IAAY;EACrC;EACA,IACEA,IAAI,KAAK,SAAS,IAClBA,IAAI,KAAK,MAAM,IACfA,IAAI,KAAK,QAAQ,IACjBA,IAAI,CAAC4B,UAAU,CAAC,OAAO,CAAC,IACxB5B,IAAI,CAAC4B,UAAU,CAAC,MAAM,CAAC,IACvB5B,IAAI,CAAC4B,UAAU,CAAC,KAAK,CAAC,EAEtB,MAAM,IAAIlD,sBAAsB,CAAC;IAAEsB;EAAI,CAAE,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}