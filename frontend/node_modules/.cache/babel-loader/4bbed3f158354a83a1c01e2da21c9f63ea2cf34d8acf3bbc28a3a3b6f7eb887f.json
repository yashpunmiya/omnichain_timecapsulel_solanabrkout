{"ast":null,"code":"import { batchGatewayAbi } from '../../constants/abis.js';\nimport { solidityError } from '../../constants/solidity.js';\nimport { decodeFunctionData } from '../abi/decodeFunctionData.js';\nimport { encodeErrorResult } from '../abi/encodeErrorResult.js';\nimport { encodeFunctionResult } from '../abi/encodeFunctionResult.js';\nexport const localBatchGatewayUrl = 'x-batch-gateway:true';\nexport async function localBatchGatewayRequest(parameters) {\n  const {\n    data,\n    ccipRequest\n  } = parameters;\n  const {\n    args: [queries]\n  } = decodeFunctionData({\n    abi: batchGatewayAbi,\n    data\n  });\n  const failures = [];\n  const responses = [];\n  await Promise.all(queries.map(async (query, i) => {\n    try {\n      responses[i] = await ccipRequest(query);\n      failures[i] = false;\n    } catch (err) {\n      failures[i] = true;\n      responses[i] = encodeError(err);\n    }\n  }));\n  return encodeFunctionResult({\n    abi: batchGatewayAbi,\n    functionName: 'query',\n    result: [failures, responses]\n  });\n}\nfunction encodeError(error) {\n  if (error.name === 'HttpRequestError' && error.status) return encodeErrorResult({\n    abi: batchGatewayAbi,\n    errorName: 'HttpError',\n    args: [error.status, error.shortMessage]\n  });\n  return encodeErrorResult({\n    abi: [solidityError],\n    errorName: 'Error',\n    args: ['shortMessage' in error ? error.shortMessage : error.message]\n  });\n}\n//# sourceMappingURL=localBatchGatewayRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}