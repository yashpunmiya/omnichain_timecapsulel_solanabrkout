{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ApiController, ConnectorController, CoreHelperUtil } from '@reown/appkit-controllers';\nimport { customElement } from '@reown/appkit-ui';\nimport '@reown/appkit-ui/wui-card-select-loader';\nimport '@reown/appkit-ui/wui-grid';\nimport { WalletUtil } from '../../utils/WalletUtil.js';\nimport '../w3m-all-wallets-list-item/index.js';\nimport styles from './styles.js';\nconst PAGINATOR_ID = 'local-paginator';\nlet W3mAllWalletsList = class W3mAllWalletsList extends LitElement {\n  constructor() {\n    super();\n    this.unsubscribe = [];\n    this.paginationObserver = undefined;\n    this.loading = !ApiController.state.wallets.length;\n    this.wallets = ApiController.state.wallets;\n    this.recommended = ApiController.state.recommended;\n    this.featured = ApiController.state.featured;\n    this.unsubscribe.push(...[ApiController.subscribeKey('wallets', val => this.wallets = val), ApiController.subscribeKey('recommended', val => this.recommended = val), ApiController.subscribeKey('featured', val => this.featured = val)]);\n  }\n  firstUpdated() {\n    this.initialFetch();\n    this.createPaginationObserver();\n  }\n  disconnectedCallback() {\n    this.unsubscribe.forEach(unsubscribe => unsubscribe());\n    this.paginationObserver?.disconnect();\n  }\n  render() {\n    return html`\n      <wui-grid\n        data-scroll=${!this.loading}\n        .padding=${['0', 's', 's', 's']}\n        columnGap=\"xxs\"\n        rowGap=\"l\"\n        justifyContent=\"space-between\"\n      >\n        ${this.loading ? this.shimmerTemplate(16) : this.walletsTemplate()}\n        ${this.paginationLoaderTemplate()}\n      </wui-grid>\n    `;\n  }\n  async initialFetch() {\n    this.loading = true;\n    const gridEl = this.shadowRoot?.querySelector('wui-grid');\n    if (gridEl) {\n      await ApiController.fetchWallets({\n        page: 1\n      });\n      await gridEl.animate([{\n        opacity: 1\n      }, {\n        opacity: 0\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      }).finished;\n      this.loading = false;\n      gridEl.animate([{\n        opacity: 0\n      }, {\n        opacity: 1\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      });\n    }\n  }\n  shimmerTemplate(items, id) {\n    return [...Array(items)].map(() => html`\n        <wui-card-select-loader type=\"wallet\" id=${ifDefined(id)}></wui-card-select-loader>\n      `);\n  }\n  walletsTemplate() {\n    const wallets = CoreHelperUtil.uniqueBy([...this.featured, ...this.recommended, ...this.wallets], 'id');\n    const walletsWithInstalled = WalletUtil.markWalletsAsInstalled(wallets);\n    return walletsWithInstalled.map(wallet => html`\n        <w3m-all-wallets-list-item\n          @click=${() => this.onConnectWallet(wallet)}\n          .wallet=${wallet}\n        ></w3m-all-wallets-list-item>\n      `);\n  }\n  paginationLoaderTemplate() {\n    const {\n      wallets,\n      recommended,\n      featured,\n      count\n    } = ApiController.state;\n    const columns = window.innerWidth < 352 ? 3 : 4;\n    const currentWallets = wallets.length + recommended.length;\n    const minimumRows = Math.ceil(currentWallets / columns);\n    let shimmerCount = minimumRows * columns - currentWallets + columns;\n    shimmerCount -= wallets.length ? featured.length % columns : 0;\n    if (count === 0 && featured.length > 0) {\n      return null;\n    }\n    if (count === 0 || [...featured, ...wallets, ...recommended].length < count) {\n      return this.shimmerTemplate(shimmerCount, PAGINATOR_ID);\n    }\n    return null;\n  }\n  createPaginationObserver() {\n    const loaderEl = this.shadowRoot?.querySelector(`#${PAGINATOR_ID}`);\n    if (loaderEl) {\n      this.paginationObserver = new IntersectionObserver(([element]) => {\n        if (element?.isIntersecting && !this.loading) {\n          const {\n            page,\n            count,\n            wallets\n          } = ApiController.state;\n          if (wallets.length < count) {\n            ApiController.fetchWallets({\n              page: page + 1\n            });\n          }\n        }\n      });\n      this.paginationObserver.observe(loaderEl);\n    }\n  }\n  onConnectWallet(wallet) {\n    ConnectorController.selectWalletConnector(wallet);\n  }\n};\nW3mAllWalletsList.styles = styles;\n__decorate([state()], W3mAllWalletsList.prototype, \"loading\", void 0);\n__decorate([state()], W3mAllWalletsList.prototype, \"wallets\", void 0);\n__decorate([state()], W3mAllWalletsList.prototype, \"recommended\", void 0);\n__decorate([state()], W3mAllWalletsList.prototype, \"featured\", void 0);\nW3mAllWalletsList = __decorate([customElement('w3m-all-wallets-list')], W3mAllWalletsList);\nexport { W3mAllWalletsList };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}