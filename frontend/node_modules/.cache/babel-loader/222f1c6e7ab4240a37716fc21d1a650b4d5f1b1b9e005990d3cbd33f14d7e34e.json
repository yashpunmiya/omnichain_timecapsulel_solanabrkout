{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URRegistryDecoder = void 0;\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\nconst __1 = require(\"..\");\nconst RegistryType_1 = require(\"../RegistryType\");\nconst errors_1 = require(\"../errors\");\nclass URRegistryDecoder extends bc_ur_1.URDecoder {\n  constructor() {\n    super(...arguments);\n    this.resultRegistryType = () => {\n      const ur = this.resultUR();\n      switch (ur.type) {\n        case RegistryType_1.RegistryTypes.BYTES.getType():\n          return __1.Bytes.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getType():\n          return __1.CryptoHDKey.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_KEYPATH.getType():\n          return __1.CryptoKeypath.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO.getType():\n          return __1.CryptoCoinInfo.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getType():\n          return __1.CryptoECKey.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_OUTPUT.getType():\n          return __1.CryptoOutput.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_PSBT.getType():\n          return __1.CryptoPSBT.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT.getType():\n          return __1.CryptoAccount.fromCBOR(ur.cbor);\n        default:\n          throw new errors_1.UnknownURTypeError(`#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`);\n      }\n    };\n  }\n}\nexports.URRegistryDecoder = URRegistryDecoder;","map":{"version":3,"names":["bc_ur_1","require","__1","RegistryType_1","errors_1","URRegistryDecoder","URDecoder","constructor","resultRegistryType","ur","resultUR","type","RegistryTypes","BYTES","getType","Bytes","fromCBOR","cbor","CRYPTO_HDKEY","CryptoHDKey","CRYPTO_KEYPATH","CryptoKeypath","CRYPTO_COIN_INFO","CryptoCoinInfo","CRYPTO_ECKEY","CryptoECKey","CRYPTO_OUTPUT","CryptoOutput","CRYPTO_PSBT","CryptoPSBT","CRYPTO_ACCOUNT","CryptoAccount","UnknownURTypeError","exports"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry\\src\\Decoder\\index.ts"],"sourcesContent":["import { URDecoder } from '@ngraveio/bc-ur';\nimport {\n  Bytes,\n  CryptoAccount,\n  CryptoCoinInfo,\n  CryptoECKey,\n  CryptoHDKey,\n  CryptoKeypath,\n  CryptoOutput,\n  CryptoPSBT,\n} from '..';\nimport { RegistryTypes } from '../RegistryType';\nimport { UnknownURTypeError } from '../errors';\n\nexport class URRegistryDecoder extends URDecoder {\n  public resultRegistryType = () => {\n    const ur = this.resultUR();\n    switch (ur.type) {\n      case RegistryTypes.BYTES.getType():\n        return Bytes.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_HDKEY.getType():\n        return CryptoHDKey.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_KEYPATH.getType():\n        return CryptoKeypath.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_COIN_INFO.getType():\n        return CryptoCoinInfo.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_ECKEY.getType():\n        return CryptoECKey.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_OUTPUT.getType():\n        return CryptoOutput.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_PSBT.getType():\n        return CryptoPSBT.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_ACCOUNT.getType():\n        return CryptoAccount.fromCBOR(ur.cbor);\n      default:\n        throw new UnknownURTypeError(\n          `#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`,\n        );\n    }\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,GAAA,GAAAD,OAAA;AAUA,MAAAE,cAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AAEA,MAAaI,iBAAkB,SAAQL,OAAA,CAAAM,SAAS;EAAhDC,YAAA;;IACS,KAAAC,kBAAkB,GAAG,MAAK;MAC/B,MAAMC,EAAE,GAAG,IAAI,CAACC,QAAQ,EAAE;MAC1B,QAAQD,EAAE,CAACE,IAAI;QACb,KAAKR,cAAA,CAAAS,aAAa,CAACC,KAAK,CAACC,OAAO,EAAE;UAChC,OAAOZ,GAAA,CAAAa,KAAK,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QAChC,KAAKd,cAAA,CAAAS,aAAa,CAACM,YAAY,CAACJ,OAAO,EAAE;UACvC,OAAOZ,GAAA,CAAAiB,WAAW,CAACH,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACtC,KAAKd,cAAA,CAAAS,aAAa,CAACQ,cAAc,CAACN,OAAO,EAAE;UACzC,OAAOZ,GAAA,CAAAmB,aAAa,CAACL,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACxC,KAAKd,cAAA,CAAAS,aAAa,CAACU,gBAAgB,CAACR,OAAO,EAAE;UAC3C,OAAOZ,GAAA,CAAAqB,cAAc,CAACP,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACzC,KAAKd,cAAA,CAAAS,aAAa,CAACY,YAAY,CAACV,OAAO,EAAE;UACvC,OAAOZ,GAAA,CAAAuB,WAAW,CAACT,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACtC,KAAKd,cAAA,CAAAS,aAAa,CAACc,aAAa,CAACZ,OAAO,EAAE;UACxC,OAAOZ,GAAA,CAAAyB,YAAY,CAACX,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACvC,KAAKd,cAAA,CAAAS,aAAa,CAACgB,WAAW,CAACd,OAAO,EAAE;UACtC,OAAOZ,GAAA,CAAA2B,UAAU,CAACb,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACrC,KAAKd,cAAA,CAAAS,aAAa,CAACkB,cAAc,CAAChB,OAAO,EAAE;UACzC,OAAOZ,GAAA,CAAA6B,aAAa,CAACf,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACxC;UACE,MAAM,IAAIb,QAAA,CAAA4B,kBAAkB,CAC1B,iEAAiEvB,EAAE,CAACE,IAAI,uBAAuB,CAChG;;IAEP,CAAC;EACH;;AA1BAsB,OAAA,CAAA5B,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}