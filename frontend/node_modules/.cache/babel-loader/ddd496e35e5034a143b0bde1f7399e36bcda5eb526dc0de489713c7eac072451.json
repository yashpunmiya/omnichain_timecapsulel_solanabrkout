{"ast":null,"code":"import { proxy, ref, subscribe } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nconst CLEAN_PROVIDERS_STATE = {\n  eip155: undefined,\n  solana: undefined,\n  polkadot: undefined,\n  bip122: undefined\n};\nconst state = proxy({\n  providers: {\n    ...CLEAN_PROVIDERS_STATE\n  },\n  providerIds: {\n    ...CLEAN_PROVIDERS_STATE\n  }\n});\nexport const ProviderUtil = {\n  state,\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  subscribe(callback) {\n    return subscribe(state, () => {\n      callback(state);\n    });\n  },\n  subscribeProviders(callback) {\n    return subscribe(state.providers, () => callback(state.providers));\n  },\n  setProvider(chainNamespace, provider) {\n    if (provider) {\n      state.providers[chainNamespace] = ref(provider);\n    }\n  },\n  getProvider(chainNamespace) {\n    return state.providers[chainNamespace];\n  },\n  setProviderId(chainNamespace, providerId) {\n    if (providerId) {\n      state.providerIds[chainNamespace] = providerId;\n    }\n  },\n  getProviderId(chainNamespace) {\n    if (!chainNamespace) {\n      return undefined;\n    }\n    return state.providerIds[chainNamespace];\n  },\n  reset() {\n    state.providers = {\n      ...CLEAN_PROVIDERS_STATE\n    };\n    state.providerIds = {\n      ...CLEAN_PROVIDERS_STATE\n    };\n  },\n  resetChain(chainNamespace) {\n    state.providers[chainNamespace] = undefined;\n    state.providerIds[chainNamespace] = undefined;\n  }\n};\n//# sourceMappingURL=ProviderUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}