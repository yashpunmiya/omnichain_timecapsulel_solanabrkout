{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSystemInfo = exports.getInstallerPackage = void 0;\nconst env_utils_1 = require(\"@trezor/env-utils\");\nconst getInstallerPackage = () => {\n  const agent = (0, env_utils_1.getUserAgent)();\n  switch ((0, env_utils_1.getOsFamily)()) {\n    case 'MacOS':\n      return 'mac';\n    case 'Windows':\n      {\n        const arch = agent.match(/(Win64|WOW64)/) ? '64' : '32';\n        return `win${arch}`;\n      }\n    case 'Linux':\n      {\n        const isRpm = agent.match(/CentOS|Fedora|Mandriva|Mageia|Red Hat|Scientific|SUSE/) ? 'rpm' : 'deb';\n        const is64x = agent.match(/Linux i[3456]86/) ? '32' : '64';\n        return `${isRpm}${is64x}`;\n      }\n    default:\n  }\n};\nexports.getInstallerPackage = getInstallerPackage;\nconst getSystemInfo = supportedBrowsers => {\n  const browserName = (0, env_utils_1.getBrowserName)();\n  const browserVersion = (0, env_utils_1.getBrowserVersion)();\n  const supportedBrowser = browserName ? supportedBrowsers[browserName.toLowerCase()] : undefined;\n  const outdatedBrowser = supportedBrowser ? supportedBrowser.version > parseInt(browserVersion, 10) : false;\n  const mobile = (0, env_utils_1.getDeviceType)() === 'mobile';\n  const supportedMobile = mobile ? 'usb' in navigator : true;\n  const supported = !!(supportedBrowser && !outdatedBrowser && supportedMobile);\n  return {\n    os: {\n      family: (0, env_utils_1.getOsFamily)(),\n      mobile\n    },\n    browser: {\n      supported,\n      outdated: outdatedBrowser\n    }\n  };\n};\nexports.getSystemInfo = getSystemInfo;\n//# sourceMappingURL=systemInfo.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}