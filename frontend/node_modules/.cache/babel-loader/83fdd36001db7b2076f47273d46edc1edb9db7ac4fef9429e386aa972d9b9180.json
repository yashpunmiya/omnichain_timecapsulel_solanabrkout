{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nimport { InvalidHexValueError } from '../../errors/encoding.js';\nimport { createCursor } from '../cursor.js';\nimport { hexToBytes } from './toBytes.js';\nimport { bytesToHex } from './toHex.js';\nexport function fromRlp(value, to = 'hex') {\n  const bytes = (() => {\n    if (typeof value === 'string') {\n      if (value.length > 3 && value.length % 2 !== 0) throw new InvalidHexValueError(value);\n      return hexToBytes(value);\n    }\n    return value;\n  })();\n  const cursor = createCursor(bytes, {\n    recursiveReadLimit: Number.POSITIVE_INFINITY\n  });\n  const result = fromRlpCursor(cursor, to);\n  return result;\n}\nfunction fromRlpCursor(cursor, to = 'hex') {\n  if (cursor.bytes.length === 0) return to === 'hex' ? bytesToHex(cursor.bytes) : cursor.bytes;\n  const prefix = cursor.readByte();\n  if (prefix < 0x80) cursor.decrementPosition(1);\n  // bytes\n  if (prefix < 0xc0) {\n    const length = readLength(cursor, prefix, 0x80);\n    const bytes = cursor.readBytes(length);\n    return to === 'hex' ? bytesToHex(bytes) : bytes;\n  }\n  // list\n  const length = readLength(cursor, prefix, 0xc0);\n  return readList(cursor, length, to);\n}\nfunction readLength(cursor, prefix, offset) {\n  if (offset === 0x80 && prefix < 0x80) return 1;\n  if (prefix <= offset + 55) return prefix - offset;\n  if (prefix === offset + 55 + 1) return cursor.readUint8();\n  if (prefix === offset + 55 + 2) return cursor.readUint16();\n  if (prefix === offset + 55 + 3) return cursor.readUint24();\n  if (prefix === offset + 55 + 4) return cursor.readUint32();\n  throw new BaseError('Invalid RLP prefix');\n}\nfunction readList(cursor, length, to) {\n  const position = cursor.position;\n  const value = [];\n  while (cursor.position - position < length) value.push(fromRlpCursor(cursor, to));\n  return value;\n}\n//# sourceMappingURL=fromRlp.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}