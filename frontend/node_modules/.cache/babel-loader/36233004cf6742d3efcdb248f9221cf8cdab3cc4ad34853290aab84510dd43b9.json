{"ast":null,"code":"const JSONStringify = data => JSON.stringify(data, (_, value) => typeof value === \"bigint\" ? value.toString() + \"n\" : value);\nconst JSONParse = json => {\n  const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n  const serializedData = json.replace(numbersBiggerThanMaxInt, \"$1\\\"$2n\\\"$3\");\n  return JSON.parse(serializedData, (_, value) => {\n    const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n    if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n    return value;\n  });\n};\nexport function safeJsonParse(value) {\n  if (typeof value !== \"string\") {\n    throw new Error(`Cannot safe json parse value of type ${typeof value}`);\n  }\n  try {\n    return JSONParse(value);\n  } catch (_a) {\n    return value;\n  }\n}\nexport function safeJsonStringify(value) {\n  return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}