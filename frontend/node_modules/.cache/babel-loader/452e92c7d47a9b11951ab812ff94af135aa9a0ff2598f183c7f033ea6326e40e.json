{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { isAddress } from '../../utils/address/isAddress.js';\nimport { InvalidEip712TransactionError } from '../errors/transaction.js';\nimport { isEIP712Transaction } from './isEip712Transaction.js';\nexport function assertEip712Transaction(transaction) {\n  const {\n    chainId,\n    to,\n    from,\n    paymaster,\n    paymasterInput\n  } = transaction;\n  if (!isEIP712Transaction(transaction)) throw new InvalidEip712TransactionError();\n  if (!chainId || chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (from && !isAddress(from)) throw new InvalidAddressError({\n    address: from\n  });\n  if (paymaster && !isAddress(paymaster)) throw new InvalidAddressError({\n    address: paymaster\n  });\n  if (paymaster && !paymasterInput) {\n    throw new BaseError('`paymasterInput` must be provided when `paymaster` is defined');\n  }\n  if (!paymaster && paymasterInput) {\n    throw new BaseError('`paymaster` must be provided when `paymasterInput` is defined');\n  }\n}","map":{"version":3,"names":["InvalidAddressError","BaseError","InvalidChainIdError","isAddress","InvalidEip712TransactionError","isEIP712Transaction","assertEip712Transaction","transaction","chainId","to","from","paymaster","paymasterInput","address"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\zksync\\utils\\assertEip712Transaction.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { InvalidChainIdError } from '../../errors/chain.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../../utils/address/isAddress.js'\nimport { InvalidEip712TransactionError } from '../errors/transaction.js'\nimport type {\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n} from '../types/transaction.js'\nimport { isEIP712Transaction } from './isEip712Transaction.js'\n\nexport function assertEip712Transaction(\n  transaction: ExactPartial<ZksyncTransactionSerializable>,\n) {\n  const { chainId, to, from, paymaster, paymasterInput } =\n    transaction as ZksyncTransactionSerializableEIP712\n\n  if (!isEIP712Transaction(transaction))\n    throw new InvalidEip712TransactionError()\n  if (!chainId || chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (paymaster && !isAddress(paymaster))\n    throw new InvalidAddressError({ address: paymaster })\n  if (paymaster && !paymasterInput) {\n    throw new BaseError(\n      '`paymasterInput` must be provided when `paymaster` is defined',\n    )\n  }\n  if (!paymaster && paymasterInput) {\n    throw new BaseError(\n      '`paymaster` must be provided when `paymasterInput` is defined',\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,SAASC,SAAS,QAAQ,kCAAkC;AAC5D,SAASC,6BAA6B,QAAQ,0BAA0B;AAKxE,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,OAAM,SAAUC,uBAAuBA,CACrCC,WAAwD;EAExD,MAAM;IAAEC,OAAO;IAAEC,EAAE;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAc,CAAE,GACpDL,WAAkD;EAEpD,IAAI,CAACF,mBAAmB,CAACE,WAAW,CAAC,EACnC,MAAM,IAAIH,6BAA6B,EAAE;EAC3C,IAAI,CAACI,OAAO,IAAIA,OAAO,IAAI,CAAC,EAAE,MAAM,IAAIN,mBAAmB,CAAC;IAAEM;EAAO,CAAE,CAAC;EACxE,IAAIC,EAAE,IAAI,CAACN,SAAS,CAACM,EAAE,CAAC,EAAE,MAAM,IAAIT,mBAAmB,CAAC;IAAEa,OAAO,EAAEJ;EAAE,CAAE,CAAC;EACxE,IAAIC,IAAI,IAAI,CAACP,SAAS,CAACO,IAAI,CAAC,EAAE,MAAM,IAAIV,mBAAmB,CAAC;IAAEa,OAAO,EAAEH;EAAI,CAAE,CAAC;EAC9E,IAAIC,SAAS,IAAI,CAACR,SAAS,CAACQ,SAAS,CAAC,EACpC,MAAM,IAAIX,mBAAmB,CAAC;IAAEa,OAAO,EAAEF;EAAS,CAAE,CAAC;EACvD,IAAIA,SAAS,IAAI,CAACC,cAAc,EAAE;IAChC,MAAM,IAAIX,SAAS,CACjB,+DAA+D,CAChE;EACH;EACA,IAAI,CAACU,SAAS,IAAIC,cAAc,EAAE;IAChC,MAAM,IAAIX,SAAS,CACjB,+DAA+D,CAChE;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}