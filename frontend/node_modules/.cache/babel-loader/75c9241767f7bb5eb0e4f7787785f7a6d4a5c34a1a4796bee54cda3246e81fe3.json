{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __export = (target, all) => {\n  for (var name2 in all) __defProp(target, name2, {\n    get: all[name2],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// package.json\nvar package_exports = {};\n__export(package_exports, {\n  default: () => package_default,\n  dependencies: () => dependencies,\n  devDependencies: () => devDependencies,\n  files: () => files,\n  gitHead: () => gitHead,\n  license: () => license,\n  main: () => main,\n  module: () => module,\n  name: () => name,\n  peerDependencies: () => peerDependencies,\n  publishConfig: () => publishConfig,\n  scripts: () => scripts,\n  type: () => type,\n  types: () => types,\n  version: () => version\n});\nvar name, version, files, type, main, module, types, license, publishConfig, dependencies, peerDependencies, devDependencies, scripts, gitHead, package_default;\nvar init_package = __esm({\n  \"package.json\"() {\n    name = \"@particle-network/solana-wallet\";\n    version = \"1.3.2\";\n    files = [\"es\", \"lib\", \"LICENSE\"];\n    type = \"module\";\n    main = \"lib/index.js\";\n    module = \"es/index.js\";\n    types = \"lib/types/index.d.ts\";\n    license = \"Apache-2.0\";\n    publishConfig = {\n      access: \"public\"\n    };\n    dependencies = {\n      \"@particle-network/auth\": \"^1.3.1\"\n    };\n    peerDependencies = {\n      \"@solana/web3.js\": \"^1.50.1\",\n      bs58: \"^4.0.1\"\n    };\n    devDependencies = {\n      \"@solana/web3.js\": \"^1.50.1\",\n      \"@types/bs58\": \"^4.0.1\",\n      bs58: \"^4.0.1\",\n      \"ts-loader\": \"^9.3.1\",\n      \"webpack-cli\": \"^4.10.0\"\n    };\n    scripts = {\n      clean: \"shx rm -rf lib/* && shx rm -rf es/*\",\n      package: `shx echo '{ \"type\": \"commonjs\" }' > lib/package.json`,\n      build: \"yarn clean && node ./esBuild.js && tsc --emitDeclarationOnly -p tsconfig.json && yarn package\",\n      \"build:min.js\": \"webpack\",\n      version: \"yarn build\"\n    };\n    gitHead = \"cc999e430ebfb1dd821783f7cf099ddd51f3495a\";\n    package_default = {\n      name,\n      version,\n      files,\n      type,\n      main,\n      module,\n      types,\n      license,\n      publishConfig,\n      dependencies,\n      peerDependencies,\n      devDependencies,\n      scripts,\n      gitHead\n    };\n  }\n});\n\n// src/solana-wallet.ts\nimport { rpcUrl } from \"@particle-network/auth\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport { Buffer as Buffer2 } from \"buffer\";\nimport { EventEmitter } from \"events\";\n\n// src/utils.ts\nfunction getVersion() {\n  const packages = (init_package(), __toCommonJS(package_exports));\n  return `web_${packages.version}`;\n}\n\n// src/solana-wallet.ts\nvar SolanaWallet = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.isParticleNetwork = true;\n    this.name = \"Particle\";\n    this.url = \"https://particle.network\";\n    this.icon = \"https://static.particle.network/wallet-icons/Particle.png\";\n    this.events = new EventEmitter();\n    this.auth = auth;\n    this._connecting = false;\n    const userInfo = this.auth.getUserInfo();\n    if (userInfo) {\n      const wallet = userInfo.wallets.find(w => w.chain_name === \"solana\" && w.public_address.length > 0);\n      if (wallet) {\n        this._publicKey = new PublicKey(wallet.public_address);\n      } else {\n        this._publicKey = null;\n      }\n    } else {\n      this._publicKey = null;\n    }\n    this.auth.on(\"connect\", userInfo2 => {\n      const wallet = userInfo2.wallets.find(w => w.chain_name === \"solana\" && w.public_address.length > 0);\n      if (wallet) {\n        this._publicKey = new PublicKey(wallet.public_address);\n        this.events.emit(\"connect\", this._publicKey);\n      }\n    });\n    this.auth.on(\"disconnect\", () => {\n      this._publicKey = null;\n      this.events.emit(\"disconnect\");\n    });\n    if (typeof window !== \"undefined\" && window.particle) {\n      window.particle.solanaWallet = this;\n    }\n  }\n  get version() {\n    return getVersion();\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  get connecting() {\n    return this._connecting;\n  }\n  get connected() {\n    return this._publicKey !== null;\n  }\n  get publicKey() {\n    return this._publicKey;\n  }\n  connect(config) {\n    return __async(this, null, function* () {\n      try {\n        this._connecting = true;\n        let wallet = this.auth.getWallet();\n        if (wallet) {\n          this._publicKey = new PublicKey(wallet.public_address);\n          return Promise.resolve();\n        }\n        yield this.auth.login(config);\n        wallet = this.auth.getWallet();\n        if (wallet) {\n          this._publicKey = new PublicKey(wallet.public_address);\n          return Promise.resolve();\n        } else {\n          return Promise.reject(\"wallet create failed\");\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n  disconnect() {\n    return __async(this, null, function* () {\n      yield this.auth.logout();\n      this._publicKey = null;\n      return Promise.resolve();\n    });\n  }\n  signTransaction(transaction) {\n    return __async(this, null, function* () {\n      const signature = yield this.auth.sign(\"signTransaction\", bs58.encode(transaction.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n      })));\n      return Transaction.from(Buffer2.from(signature, \"base64\"));\n    });\n  }\n  signAllTransactions(transactions) {\n    return __async(this, null, function* () {\n      const signatures = yield this.auth.signAllTransactions(transactions.map(tx => bs58.encode(tx.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n      }))));\n      return signatures.map(signed => Transaction.from(Buffer2.from(signed, \"base64\")));\n    });\n  }\n  signAndSendTransaction(transaction) {\n    return __async(this, null, function* () {\n      return this.auth.sendTransaction(bs58.encode(transaction.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n      })));\n    });\n  }\n  signMessage(message) {\n    return __async(this, null, function* () {\n      const signature = yield this.auth.sign(\"signMessage\", bs58.encode(message));\n      return Buffer2.from(signature, \"base64\");\n    });\n  }\n  getConnection(config) {\n    const url = `${rpcUrl()}/solana`;\n    return new Connection(`${url}?chainId=${this.auth.getChainId()}&projectUuid=${this.auth.config.projectId}&projectKey=${this.auth.config.clientKey}`, {\n      commitment: config == null ? void 0 : config.commitment,\n      wsEndpoint: config == null ? void 0 : config.wsEndpoint,\n      httpHeaders: {\n        Authorization: this.auth.basicCredentials()\n      },\n      fetch: config == null ? void 0 : config.fetch,\n      fetchMiddleware: config == null ? void 0 : config.fetchMiddleware,\n      disableRetryOnRateLimit: config == null ? void 0 : config.disableRetryOnRateLimit,\n      confirmTransactionInitialTimeout: config == null ? void 0 : config.confirmTransactionInitialTimeout\n    });\n  }\n};\n\n// src/index.ts\nimport { ParticleNetwork } from \"@particle-network/auth\";\nexport { ParticleNetwork, SolanaWallet };","map":{"version":3,"names":["rpcUrl","Connection","PublicKey","Transaction","bs58","Buffer","Buffer2","EventEmitter","getVersion","packages","init_package","__toCommonJS","package_exports","version","SolanaWallet","constructor","auth","isParticleNetwork","name","url","icon","events","_connecting","userInfo","getUserInfo","wallet","wallets","find","w","chain_name","public_address","length","_publicKey","on","userInfo2","emit","window","particle","solanaWallet","event","listener","once","off","removeListener","connecting","connected","publicKey","connect","config","__async","getWallet","Promise","resolve","login","reject","e","disconnect","logout","signTransaction","transaction","signature","sign","encode","serialize","requireAllSignatures","verifySignatures","from","signAllTransactions","transactions","signatures","map","tx","signed","signAndSendTransaction","sendTransaction","signMessage","message","getConnection","getChainId","projectId","clientKey","commitment","wsEndpoint","httpHeaders","Authorization","basicCredentials","fetch","fetchMiddleware","disableRetryOnRateLimit","confirmTransactionInitialTimeout","ParticleNetwork"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@particle-network\\solana-wallet\\src\\solana-wallet.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@particle-network\\solana-wallet\\src\\utils.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@particle-network\\solana-wallet\\src\\index.ts"],"sourcesContent":["import { Auth, LoginOptions, UserInfo, rpcUrl } from '@particle-network/auth';\nimport { Connection, ConnectionConfig, PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\nimport { EventEmitter } from 'events';\nimport { ISolanaWallet } from './types';\nimport { getVersion } from './utils';\n\nexport class SolanaWallet implements ISolanaWallet {\n    public readonly isParticleNetwork = true;\n\n    name = 'Particle';\n    url = 'https://particle.network';\n    icon = 'https://static.particle.network/wallet-icons/Particle.png';\n\n    private _publicKey: PublicKey | null;\n\n    private _connecting: boolean;\n\n    private events = new EventEmitter();\n\n    constructor(private auth: Auth) {\n        this.auth = auth;\n        this._connecting = false;\n\n        const userInfo = this.auth.getUserInfo();\n        if (userInfo) {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n            } else {\n                this._publicKey = null;\n            }\n        } else {\n            this._publicKey = null;\n        }\n\n        this.auth.on('connect', (userInfo: UserInfo) => {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                this.events.emit('connect', this._publicKey);\n            }\n        });\n        this.auth.on('disconnect', () => {\n            this._publicKey = null;\n            this.events.emit('disconnect');\n        });\n        if (typeof window !== 'undefined' && window.particle) {\n            window.particle.solanaWallet = this;\n        }\n    }\n\n    get version() {\n        return getVersion();\n    }\n\n    on(event: string, listener: any): void {\n        this.events.on(event, listener);\n    }\n\n    once(event: string, listener: any): void {\n        this.events.once(event, listener);\n    }\n\n    off(event: string, listener: any): void {\n        this.events.off(event, listener);\n    }\n\n    removeListener(event: string, listener: any): void {\n        this.events.removeListener(event, listener);\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return this._publicKey !== null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    public async connect(config?: LoginOptions): Promise<void> {\n        try {\n            this._connecting = true;\n            let wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            }\n            await this.auth.login(config);\n            wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            } else {\n                return Promise.reject('wallet create failed');\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n        await this.auth.logout();\n        this._publicKey = null;\n        return Promise.resolve();\n    }\n\n    public async signTransaction(transaction: Transaction): Promise<Transaction> {\n        const signature = await this.auth.sign(\n            'signTransaction',\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n        return Transaction.from(Buffer.from(signature, 'base64'));\n    }\n\n    public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        const signatures = await this.auth.signAllTransactions(\n            transactions.map((tx) =>\n                bs58.encode(tx.serialize({ requireAllSignatures: false, verifySignatures: false }))\n            )\n        );\n        return signatures.map((signed: string) => Transaction.from(Buffer.from(signed, 'base64')));\n    }\n\n    public async signAndSendTransaction(transaction: Transaction): Promise<string> {\n        return this.auth.sendTransaction(\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n    }\n\n    public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        const signature = await this.auth.sign('signMessage', bs58.encode(message));\n        return Buffer.from(signature, 'base64');\n    }\n\n    public getConnection(config?: ConnectionConfig): Connection {\n        const url = `${rpcUrl()}/solana`;\n        return new Connection(\n            `${url}?chainId=${this.auth.getChainId()}&projectUuid=${this.auth.config.projectId}&projectKey=${\n                this.auth.config.clientKey\n            }`,\n            {\n                commitment: config?.commitment,\n                wsEndpoint: config?.wsEndpoint,\n                httpHeaders: {\n                    Authorization: this.auth.basicCredentials(),\n                },\n                fetch: config?.fetch,\n                fetchMiddleware: config?.fetchMiddleware,\n                disableRetryOnRateLimit: config?.disableRetryOnRateLimit,\n                confirmTransactionInitialTimeout: config?.confirmTransactionInitialTimeout,\n            }\n        );\n    }\n}\n","export function getVersion(): string {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const packages = require('../package.json');\n    return `web_${packages.version}`;\n}\n","export * from './solana-wallet';\nexport { ParticleNetwork } from '@particle-network/auth';\nexport type { Config } from '@particle-network/auth';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}