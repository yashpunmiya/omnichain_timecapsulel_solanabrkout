{"ast":null,"code":"import UniversalProvider from '@walletconnect/universal-provider';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { AccountController, OptionsController } from '@reown/appkit-controllers';\nimport { PresetsUtil } from '@reown/appkit-utils';\nimport { WalletConnectConnector } from '../connectors/WalletConnectConnector.js';\n/**\n * Abstract class representing a chain adapter blueprint.\n * @template Connector - The type of connector extending ChainAdapterConnector\n */\nexport class AdapterBlueprint {\n  /**\n   * Creates an instance of AdapterBlueprint.\n   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter\n   */\n  constructor(params) {\n    this.availableConnectors = [];\n    this.eventListeners = new Map();\n    if (params) {\n      this.construct(params);\n    }\n  }\n  /**\n   * Initializes the adapter with the given parameters.\n   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter\n   */\n  construct(params) {\n    this.caipNetworks = params.networks;\n    this.projectId = params.projectId;\n    this.namespace = params.namespace;\n    this.adapterType = params.adapterType;\n  }\n  /**\n   * Gets the available connectors.\n   * @returns {Connector[]} An array of available connectors\n   */\n  get connectors() {\n    return this.availableConnectors;\n  }\n  /**\n   * Gets the supported networks.\n   * @returns {CaipNetwork[]} An array of supported networks\n   */\n  get networks() {\n    return this.caipNetworks || [];\n  }\n  /**\n   * Sets the auth provider.\n   * @param {W3mFrameProvider} authProvider - The auth provider instance\n   */\n  setAuthProvider(authProvider) {\n    this.addConnector({\n      id: CommonConstantsUtil.CONNECTOR_ID.AUTH,\n      type: 'AUTH',\n      name: CommonConstantsUtil.CONNECTOR_NAMES.AUTH,\n      provider: authProvider,\n      imageId: PresetsUtil.ConnectorImageIds[CommonConstantsUtil.CONNECTOR_ID.AUTH],\n      chain: this.namespace,\n      chains: []\n    });\n  }\n  /**\n   * Adds one or more connectors to the available connectors list.\n   * @param {...Connector} connectors - The connectors to add\n   */\n  addConnector(...connectors) {\n    const connectorsAdded = new Set();\n    this.availableConnectors = [...connectors, ...this.availableConnectors].filter(connector => {\n      if (connectorsAdded.has(connector.id)) {\n        return false;\n      }\n      connectorsAdded.add(connector.id);\n      return true;\n    });\n    this.emit('connectors', this.availableConnectors);\n  }\n  setStatus(status, chainNamespace) {\n    AccountController.setStatus(status, chainNamespace);\n  }\n  /**\n   * Adds an event listener for a specific event.\n   * @template T\n   * @param {T} eventName - The name of the event\n   * @param {EventCallback<T>} callback - The callback function to be called when the event is emitted\n   */\n  on(eventName, callback) {\n    if (!this.eventListeners.has(eventName)) {\n      this.eventListeners.set(eventName, new Set());\n    }\n    this.eventListeners.get(eventName)?.add(callback);\n  }\n  /**\n   * Removes an event listener for a specific event.\n   * @template T\n   * @param {T} eventName - The name of the event\n   * @param {EventCallback<T>} callback - The callback function to be removed\n   */\n  off(eventName, callback) {\n    const listeners = this.eventListeners.get(eventName);\n    if (listeners) {\n      listeners.delete(callback);\n    }\n  }\n  /**\n   * Removes all event listeners.\n   */\n  removeAllEventListeners() {\n    this.eventListeners.forEach(listeners => {\n      listeners.clear();\n    });\n  }\n  /**\n   * Emits an event with the given name and optional data.\n   * @template T\n   * @param {T} eventName - The name of the event to emit\n   * @param {EventData[T]} [data] - The optional data to be passed to the event listeners\n   */\n  emit(eventName, data) {\n    const listeners = this.eventListeners.get(eventName);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n  /**\n   * Connects to WalletConnect.\n   * @param {number | string} [_chainId] - Optional chain ID to connect to\n   */\n  async connectWalletConnect(_chainId) {\n    const connector = this.getWalletConnectConnector();\n    const result = await connector.connectWalletConnect();\n    return {\n      clientId: result.clientId\n    };\n  }\n  /**\n   * Switches the network.\n   * @param {AdapterBlueprint.SwitchNetworkParams} params - Network switching parameters\n   */\n  async switchNetwork(params) {\n    const {\n      caipNetwork,\n      providerType\n    } = params;\n    if (!params.provider) {\n      return;\n    }\n    const provider = 'provider' in params.provider ? params.provider.provider : params.provider;\n    if (providerType === 'WALLET_CONNECT') {\n      ;\n      provider.setDefaultChain(caipNetwork.caipNetworkId);\n      return;\n    }\n    if (provider && providerType === 'AUTH') {\n      const authProvider = provider;\n      await authProvider.switchNetwork(caipNetwork.caipNetworkId);\n      const user = await authProvider.getUser({\n        chainId: caipNetwork.caipNetworkId,\n        preferredAccountType: OptionsController.state.defaultAccountTypes[caipNetwork.chainNamespace]\n      });\n      this.emit('switchNetwork', user);\n    }\n  }\n  getWalletConnectConnector() {\n    const connector = this.connectors.find(c => c instanceof WalletConnectConnector);\n    if (!connector) {\n      throw new Error('WalletConnectConnector not found');\n    }\n    return connector;\n  }\n}","map":{"version":3,"names":["UniversalProvider","ConstantsUtil","CommonConstantsUtil","AccountController","OptionsController","PresetsUtil","WalletConnectConnector","AdapterBlueprint","constructor","params","availableConnectors","eventListeners","Map","construct","caipNetworks","networks","projectId","namespace","adapterType","connectors","setAuthProvider","authProvider","addConnector","id","CONNECTOR_ID","AUTH","type","name","CONNECTOR_NAMES","provider","imageId","ConnectorImageIds","chain","chains","connectorsAdded","Set","filter","connector","has","add","emit","setStatus","status","chainNamespace","on","eventName","callback","set","get","off","listeners","delete","removeAllEventListeners","forEach","clear","data","connectWalletConnect","_chainId","getWalletConnectConnector","result","clientId","switchNetwork","caipNetwork","providerType","setDefaultChain","caipNetworkId","user","getUser","chainId","preferredAccountType","state","defaultAccountTypes","find","c","Error"],"sources":["../../../../src/adapters/ChainAdapterBlueprint.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}