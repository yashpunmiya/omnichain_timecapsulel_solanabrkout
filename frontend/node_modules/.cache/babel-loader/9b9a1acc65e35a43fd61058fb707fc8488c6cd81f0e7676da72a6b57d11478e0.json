{"ast":null,"code":"import { EventEmitter as c } from \"events\";\nimport { IJsonRpcProvider as r, formatJsonRpcRequest as h, getBigIntRpcId as a, isJsonRpcError as d, isJsonRpcResponse as v } from \"@walletconnect/jsonrpc-utils\";\nclass o extends r {\n  constructor(t) {\n    super(t), this.events = new c(), this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();\n  }\n  async connect(t = this.connection) {\n    await this.open(t);\n  }\n  async disconnect() {\n    await this.close();\n  }\n  on(t, e) {\n    this.events.on(t, e);\n  }\n  once(t, e) {\n    this.events.once(t, e);\n  }\n  off(t, e) {\n    this.events.off(t, e);\n  }\n  removeListener(t, e) {\n    this.events.removeListener(t, e);\n  }\n  async request(t, e) {\n    return this.requestStrict(h(t.method, t.params || [], t.id || a().toString()), e);\n  }\n  async requestStrict(t, e) {\n    return new Promise(async (i, s) => {\n      if (!this.connection.connected) try {\n        await this.open();\n      } catch (n) {\n        s(n);\n      }\n      this.events.on(`${t.id}`, n => {\n        d(n) ? s(n.error) : i(n.result);\n      });\n      try {\n        await this.connection.send(t, e);\n      } catch (n) {\n        s(n);\n      }\n    });\n  }\n  setConnection(t = this.connection) {\n    return t;\n  }\n  onPayload(t) {\n    this.events.emit(\"payload\", t), v(t) ? this.events.emit(`${t.id}`, t) : this.events.emit(\"message\", {\n      type: t.method,\n      data: t.params\n    });\n  }\n  onClose(t) {\n    t && t.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n  }\n  async open(t = this.connection) {\n    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == \"string\" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n  }\n  async close() {\n    await this.connection.close();\n  }\n  registerEventListeners() {\n    this.hasRegisteredEventListeners || (this.connection.on(\"payload\", t => this.onPayload(t)), this.connection.on(\"close\", t => this.onClose(t)), this.connection.on(\"error\", t => this.events.emit(\"error\", t)), this.connection.on(\"register_error\", t => this.onClose()), this.hasRegisteredEventListeners = !0);\n  }\n}\nexport { o as JsonRpcProvider, o as default };\n//# sourceMappingURL=index.es.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}