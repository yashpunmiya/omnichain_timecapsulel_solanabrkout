{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { AccountController } from './AccountController.js';\nimport { ApiController } from './ApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { OptionsController } from './OptionsController.js';\nimport { PublicStateController } from './PublicStateController.js';\nimport { RouterController } from './RouterController.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  loading: false,\n  loadingNamespaceMap: new Map(),\n  open: false,\n  shake: false,\n  namespace: undefined\n});\n// -- Controller ---------------------------------------- //\nexport const ModalController = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  async open(options) {\n    const isConnected = AccountController.state.status === 'connected';\n    if (ConnectionController.state.wcBasic) {\n      // No need to add an await here if we are use basic\n      ApiController.prefetch({\n        fetchNetworkImages: false,\n        fetchConnectorImages: false\n      });\n    } else {\n      await ApiController.prefetch({\n        fetchConnectorImages: !isConnected,\n        fetchFeaturedWallets: !isConnected,\n        fetchRecommendedWallets: !isConnected\n      });\n    }\n    if (options?.namespace) {\n      await ChainController.switchActiveNamespace(options.namespace);\n      ModalController.setLoading(true, options.namespace);\n    } else {\n      ModalController.setLoading(true);\n    }\n    ConnectorController.setFilterByNamespace(options?.namespace);\n    const caipAddress = ChainController.getAccountData(options?.namespace)?.caipAddress;\n    const hasNoAdapters = ChainController.state.noAdapters;\n    if (hasNoAdapters && !caipAddress) {\n      if (CoreHelperUtil.isMobile()) {\n        RouterController.reset('AllWallets');\n      } else {\n        RouterController.reset('ConnectingWalletConnectBasic');\n      }\n    } else if (options?.view) {\n      RouterController.reset(options.view);\n    } else if (caipAddress) {\n      RouterController.reset('Account');\n    } else {\n      RouterController.reset('Connect');\n    }\n    state.open = true;\n    PublicStateController.set({\n      open: true\n    });\n    EventsController.sendEvent({\n      type: 'track',\n      event: 'MODAL_OPEN',\n      properties: {\n        connected: Boolean(caipAddress)\n      }\n    });\n  },\n  close() {\n    const isEmbeddedEnabled = OptionsController.state.enableEmbedded;\n    const isConnected = Boolean(ChainController.state.activeCaipAddress);\n    // Only send the event if the modal is open and is about to be closed\n    if (state.open) {\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'MODAL_CLOSE',\n        properties: {\n          connected: isConnected\n        }\n      });\n    }\n    state.open = false;\n    ModalController.clearLoading();\n    if (isEmbeddedEnabled) {\n      if (isConnected) {\n        RouterController.replace('Account');\n      } else {\n        RouterController.push('Connect');\n      }\n    } else {\n      PublicStateController.set({\n        open: false\n      });\n    }\n    ConnectionController.resetUri();\n  },\n  setLoading(loading, namespace) {\n    if (namespace) {\n      state.loadingNamespaceMap.set(namespace, loading);\n    }\n    state.loading = loading;\n    PublicStateController.set({\n      loading\n    });\n  },\n  clearLoading() {\n    state.loadingNamespaceMap.clear();\n    state.loading = false;\n  },\n  shake() {\n    if (state.shake) {\n      return;\n    }\n    state.shake = true;\n    setTimeout(() => {\n      state.shake = false;\n    }, 500);\n  }\n};\n//# sourceMappingURL=ModalController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}