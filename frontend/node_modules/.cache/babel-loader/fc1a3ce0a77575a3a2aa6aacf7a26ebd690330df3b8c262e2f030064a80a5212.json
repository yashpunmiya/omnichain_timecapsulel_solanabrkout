{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\nimport bs58 from 'bs58';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isLegacyTransactionInstance, serializeTransaction } from './utils';\nimport { detectProvider } from './detectProvider';\nimport { StandardSolflareMetaMaskWalletAccount } from './standard/account';\nimport { isSolanaChain } from './standard/solana';\nexport * from './types';\nexport * from './standard/account';\nclass SolflareMetaMask extends EventEmitter {\n  constructor(config) {\n    super();\n    this._network = 'mainnet-beta';\n    this._iframeParams = {};\n    this._element = null;\n    this._iframe = null;\n    this._publicKey = null;\n    this._account = null;\n    this._isConnected = false;\n    this._connectHandler = null;\n    this._messageHandlers = {};\n    this._handleEvent = event => {\n      var _a, _b;\n      switch (event.type) {\n        case 'connect':\n          {\n            this._collapseIframe();\n            if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.publicKey) {\n              this._publicKey = event.data.publicKey;\n              this._isConnected = true;\n              if (this._connectHandler) {\n                this._connectHandler.resolve();\n                this._connectHandler = null;\n              }\n              this._connected();\n            } else {\n              if (this._connectHandler) {\n                this._connectHandler.reject();\n                this._connectHandler = null;\n              }\n              this._disconnected();\n            }\n            return;\n          }\n        case 'disconnect':\n          {\n            if (this._connectHandler) {\n              this._connectHandler.reject();\n              this._connectHandler = null;\n            }\n            this._disconnected();\n            return;\n          }\n        case 'accountChanged':\n          {\n            if ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) {\n              this._publicKey = event.data.publicKey;\n              this.emit('accountChanged', this.publicKey);\n              this._standardConnected();\n            } else {\n              this.emit('accountChanged', undefined);\n              this._standardDisconnected();\n            }\n            return;\n          }\n        default:\n          {\n            return;\n          }\n      }\n    };\n    this._handleResize = data => {\n      if (data.resizeMode === 'full') {\n        if (data.params.mode === 'fullscreen') {\n          this._expandIframe();\n        } else if (data.params.mode === 'hide') {\n          this._collapseIframe();\n        }\n      } else if (data.resizeMode === 'coordinates') {\n        this._resizeIframe(data.params);\n      }\n    };\n    this._handleMessage = event => {\n      var _a;\n      if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== 'solflareIframeToWalletAdapter') {\n        return;\n      }\n      const data = event.data.data || {};\n      if (data.type === 'event') {\n        this._handleEvent(data.event);\n      } else if (data.type === 'resize') {\n        this._handleResize(data);\n      } else if (data.type === 'response') {\n        if (this._messageHandlers[data.id]) {\n          const {\n            resolve,\n            reject\n          } = this._messageHandlers[data.id];\n          delete this._messageHandlers[data.id];\n          if (data.error) {\n            reject(data.error);\n          } else {\n            resolve(data.result);\n          }\n        }\n      }\n    };\n    this._removeElement = () => {\n      if (this._element) {\n        this._element.remove();\n        this._element = null;\n      }\n    };\n    this._removeDanglingElements = () => {\n      const elements = document.getElementsByClassName('solflare-metamask-wallet-adapter-iframe');\n      for (const element of elements) {\n        if (element.parentElement) {\n          element.remove();\n        }\n      }\n    };\n    this._injectElement = () => {\n      this._removeElement();\n      this._removeDanglingElements();\n      const params = Object.assign(Object.assign({}, this._iframeParams), {\n        mm: true,\n        v: 1,\n        cluster: this._network || 'mainnet-beta',\n        origin: window.location.origin || '',\n        title: document.title || ''\n      });\n      const queryString = Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join('&');\n      const iframeUrl = `${SolflareMetaMask.IFRAME_URL}?${queryString}`;\n      this._element = document.createElement('div');\n      this._element.className = 'solflare-metamask-wallet-adapter-iframe';\n      this._element.innerHTML = `\n      <iframe src='${iframeUrl}' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>\n    `;\n      document.body.appendChild(this._element);\n      this._iframe = this._element.querySelector('iframe');\n      window.addEventListener('message', this._handleMessage, false);\n    };\n    this._collapseIframe = () => {\n      if (this._iframe) {\n        this._iframe.style.top = '';\n        this._iframe.style.right = '';\n        this._iframe.style.height = '2px';\n        this._iframe.style.width = '2px';\n      }\n    };\n    this._expandIframe = () => {\n      if (this._iframe) {\n        this._iframe.style.top = '0px';\n        this._iframe.style.bottom = '0px';\n        this._iframe.style.left = '0px';\n        this._iframe.style.right = '0px';\n        this._iframe.style.width = '100%';\n        this._iframe.style.height = '100%';\n      }\n    };\n    this._resizeIframe = params => {\n      if (!this._iframe) {\n        return;\n      }\n      this._iframe.style.top = isFinite(params.top) ? `${params.top}px` : '';\n      this._iframe.style.bottom = isFinite(params.bottom) ? `${params.bottom}px` : '';\n      this._iframe.style.left = isFinite(params.left) ? `${params.left}px` : '';\n      this._iframe.style.right = isFinite(params.right) ? `${params.right}px` : '';\n      this._iframe.style.width = isFinite(params.width) ? `${params.width}px` : params.width;\n      this._iframe.style.height = isFinite(params.height) ? `${params.height}px` : params.height;\n    };\n    this._sendIframeMessage = data => {\n      if (!this.connected || !this.publicKey) {\n        throw new Error('Wallet not connected');\n      }\n      return new Promise((resolve, reject) => {\n        var _a, _b;\n        const messageId = uuidv4();\n        this._messageHandlers[messageId] = {\n          resolve,\n          reject\n        };\n        (_b = (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n          channel: 'solflareWalletAdapterToIframe',\n          data: Object.assign({\n            id: messageId\n          }, data)\n        }, '*');\n      });\n    };\n    this._connected = () => {\n      this._isConnected = true;\n      this.emit('connect', this.publicKey);\n      this._standardConnected();\n    };\n    this._disconnected = () => {\n      this._publicKey = null;\n      this._isConnected = false;\n      window.removeEventListener('message', this._handleMessage, false);\n      this._removeElement();\n      this.emit('disconnect');\n      this._standardDisconnected();\n    };\n    this._standardConnected = () => {\n      if (!this.publicKey) {\n        return;\n      }\n      const address = this.publicKey.toString();\n      if (!this._account || this._account.address !== address) {\n        this._account = new StandardSolflareMetaMaskWalletAccount({\n          address,\n          publicKey: this.publicKey.toBytes()\n        });\n        this.emit('standard_change', {\n          accounts: this.standardAccounts\n        });\n      }\n    };\n    this._standardDisconnected = () => {\n      if (this._account) {\n        this._account = null;\n        this.emit('standard_change', {\n          accounts: this.standardAccounts\n        });\n      }\n    };\n    if (config === null || config === void 0 ? void 0 : config.network) {\n      this._network = config === null || config === void 0 ? void 0 : config.network;\n    }\n    if (window.SolflareMetaMaskParams) {\n      this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), window.SolflareMetaMaskParams);\n    }\n    if (config === null || config === void 0 ? void 0 : config.params) {\n      this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), config === null || config === void 0 ? void 0 : config.params);\n    }\n  }\n  get publicKey() {\n    return this._publicKey ? new PublicKey(this._publicKey) : null;\n  }\n  get standardAccount() {\n    return this._account;\n  }\n  get standardAccounts() {\n    return this._account ? [this._account] : [];\n  }\n  get isConnected() {\n    return this._isConnected;\n  }\n  get connected() {\n    return this.isConnected;\n  }\n  get autoApprove() {\n    return false;\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.connected) {\n        return;\n      }\n      this._injectElement();\n      yield new Promise((resolve, reject) => {\n        this._connectHandler = {\n          resolve,\n          reject\n        };\n      });\n    });\n  }\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._sendIframeMessage({\n        method: 'disconnect'\n      });\n      this._disconnected();\n    });\n  }\n  signTransaction(transaction) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected || !this.publicKey) {\n        throw new Error('Wallet not connected');\n      }\n      try {\n        const serializedTransaction = serializeTransaction(transaction);\n        const response = yield this._sendIframeMessage({\n          method: 'signTransactionV2',\n          params: {\n            transaction: bs58.encode(serializedTransaction)\n          }\n        });\n        const {\n          transaction: signedTransaction\n        } = response;\n        return isLegacyTransactionInstance(transaction) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n      } catch (e) {\n        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transaction');\n      }\n    });\n  }\n  signAllTransactions(transactions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected || !this.publicKey) {\n        throw new Error('Wallet not connected');\n      }\n      try {\n        const serializedTransactions = transactions.map(transaction => serializeTransaction(transaction));\n        const {\n          transactions: signedTransactions\n        } = yield this._sendIframeMessage({\n          method: 'signAllTransactionsV2',\n          params: {\n            transactions: serializedTransactions.map(transaction => bs58.encode(transaction))\n          }\n        });\n        return signedTransactions.map((signedTransaction, index) => {\n          return isLegacyTransactionInstance(transactions[index]) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n        });\n      } catch (e) {\n        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transactions');\n      }\n    });\n  }\n  signAndSendTransaction(transaction, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected || !this.publicKey) {\n        throw new Error('Wallet not connected');\n      }\n      try {\n        const serializedTransaction = serializeTransaction(transaction);\n        const {\n          signature\n        } = yield this._sendIframeMessage({\n          method: 'signAndSendTransaction',\n          params: {\n            transaction: bs58.encode(serializedTransaction),\n            options\n          }\n        });\n        return signature;\n      } catch (e) {\n        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign and send transaction');\n      }\n    });\n  }\n  signMessage(data, display = 'utf8') {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected || !this.publicKey) {\n        throw new Error('Wallet not connected');\n      }\n      try {\n        const {\n          signature\n        } = yield this._sendIframeMessage({\n          method: 'signMessage',\n          params: {\n            data: bs58.encode(data),\n            display\n          }\n        });\n        return Uint8Array.from(bs58.decode(signature));\n      } catch (e) {\n        throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign message');\n      }\n    });\n  }\n  sign(data, display = 'utf8') {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.signMessage(data, display);\n    });\n  }\n  static isSupported() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = yield detectProvider();\n      return !!provider;\n    });\n  }\n  standardSignAndSendTransaction(...inputs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected) throw new Error('not connected');\n      const outputs = [];\n      if (inputs.length === 1) {\n        const {\n          transaction,\n          account,\n          chain,\n          options\n        } = inputs[0];\n        const {\n          minContextSlot,\n          preflightCommitment,\n          skipPreflight,\n          maxRetries\n        } = options || {};\n        if (account !== this._account) throw new Error('invalid account');\n        if (!isSolanaChain(chain)) throw new Error('invalid chain');\n        const signature = yield this.signAndSendTransaction(VersionedTransaction.deserialize(transaction), {\n          preflightCommitment,\n          minContextSlot,\n          maxRetries,\n          skipPreflight\n        });\n        outputs.push({\n          signature: bs58.decode(signature)\n        });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          outputs.push(...(yield this.standardSignAndSendTransaction(input)));\n        }\n      }\n      return outputs;\n    });\n  }\n  standardSignTransaction(...inputs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected) throw new Error('not connected');\n      const outputs = [];\n      if (inputs.length === 1) {\n        const {\n          transaction,\n          account,\n          chain\n        } = inputs[0];\n        if (account !== this._account) throw new Error('invalid account');\n        if (chain && !isSolanaChain(chain)) throw new Error('invalid chain');\n        const signedTransaction = yield this.signTransaction(VersionedTransaction.deserialize(transaction));\n        outputs.push({\n          signedTransaction: signedTransaction.serialize()\n        });\n      } else if (inputs.length > 1) {\n        let chain;\n        for (const input of inputs) {\n          if (input.account !== this._account) throw new Error('invalid account');\n          if (input.chain) {\n            if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n            if (chain) {\n              if (input.chain !== chain) throw new Error('conflicting chain');\n            } else {\n              chain = input.chain;\n            }\n          }\n        }\n        const transactions = inputs.map(({\n          transaction\n        }) => VersionedTransaction.deserialize(transaction));\n        const signedTransactions = yield this.signAllTransactions(transactions);\n        outputs.push(...signedTransactions.map(signedTransaction => ({\n          signedTransaction: signedTransaction.serialize()\n        })));\n      }\n      return outputs;\n    });\n  }\n  standardSignMessage(...inputs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.connected) throw new Error('not connected');\n      const outputs = [];\n      if (inputs.length === 1) {\n        const {\n          message,\n          account\n        } = inputs[0];\n        if (account !== this._account) throw new Error('invalid account');\n        const signature = yield this.signMessage(message);\n        outputs.push({\n          signedMessage: message,\n          signature\n        });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          outputs.push(...(yield this.standardSignMessage(input)));\n        }\n      }\n      return outputs;\n    });\n  }\n}\nSolflareMetaMask.IFRAME_URL = 'https://widget.solflare.com/';\nexport default SolflareMetaMask;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","PublicKey","Transaction","VersionedTransaction","EventEmitter","bs58","v4","uuidv4","isLegacyTransactionInstance","serializeTransaction","detectProvider","StandardSolflareMetaMaskWalletAccount","isSolanaChain","SolflareMetaMask","constructor","config","_network","_iframeParams","_element","_iframe","_publicKey","_account","_isConnected","_connectHandler","_messageHandlers","_handleEvent","event","_a","_b","type","_collapseIframe","data","publicKey","_connected","_disconnected","emit","_standardConnected","undefined","_standardDisconnected","_handleResize","resizeMode","params","mode","_expandIframe","_resizeIframe","_handleMessage","channel","id","error","_removeElement","remove","_removeDanglingElements","elements","document","getElementsByClassName","element","parentElement","_injectElement","Object","assign","mm","v","cluster","origin","window","location","title","queryString","keys","map","key","encodeURIComponent","join","iframeUrl","IFRAME_URL","createElement","className","innerHTML","body","appendChild","querySelector","addEventListener","style","top","right","height","width","bottom","left","isFinite","_sendIframeMessage","connected","Error","messageId","contentWindow","postMessage","removeEventListener","address","toString","toBytes","accounts","standardAccounts","network","SolflareMetaMaskParams","standardAccount","isConnected","autoApprove","connect","disconnect","method","signTransaction","transaction","serializedTransaction","response","encode","signedTransaction","from","decode","deserialize","call","signAllTransactions","transactions","serializedTransactions","signedTransactions","index","signAndSendTransaction","options","signature","signMessage","display","Uint8Array","sign","isSupported","provider","standardSignAndSendTransaction","inputs","outputs","length","account","chain","minContextSlot","preflightCommitment","skipPreflight","maxRetries","push","input","standardSignTransaction","serialize","standardSignMessage","message","signedMessage"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\nimport bs58 from 'bs58';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isLegacyTransactionInstance, serializeTransaction } from './utils';\nimport { detectProvider } from './detectProvider';\nimport { StandardSolflareMetaMaskWalletAccount } from './standard/account';\nimport { isSolanaChain } from './standard/solana';\nexport * from './types';\nexport * from './standard/account';\nclass SolflareMetaMask extends EventEmitter {\n    constructor(config) {\n        super();\n        this._network = 'mainnet-beta';\n        this._iframeParams = {};\n        this._element = null;\n        this._iframe = null;\n        this._publicKey = null;\n        this._account = null;\n        this._isConnected = false;\n        this._connectHandler = null;\n        this._messageHandlers = {};\n        this._handleEvent = (event) => {\n            var _a, _b;\n            switch (event.type) {\n                case 'connect': {\n                    this._collapseIframe();\n                    if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.publicKey) {\n                        this._publicKey = event.data.publicKey;\n                        this._isConnected = true;\n                        if (this._connectHandler) {\n                            this._connectHandler.resolve();\n                            this._connectHandler = null;\n                        }\n                        this._connected();\n                    }\n                    else {\n                        if (this._connectHandler) {\n                            this._connectHandler.reject();\n                            this._connectHandler = null;\n                        }\n                        this._disconnected();\n                    }\n                    return;\n                }\n                case 'disconnect': {\n                    if (this._connectHandler) {\n                        this._connectHandler.reject();\n                        this._connectHandler = null;\n                    }\n                    this._disconnected();\n                    return;\n                }\n                case 'accountChanged': {\n                    if ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) {\n                        this._publicKey = event.data.publicKey;\n                        this.emit('accountChanged', this.publicKey);\n                        this._standardConnected();\n                    }\n                    else {\n                        this.emit('accountChanged', undefined);\n                        this._standardDisconnected();\n                    }\n                    return;\n                }\n                default: {\n                    return;\n                }\n            }\n        };\n        this._handleResize = (data) => {\n            if (data.resizeMode === 'full') {\n                if (data.params.mode === 'fullscreen') {\n                    this._expandIframe();\n                }\n                else if (data.params.mode === 'hide') {\n                    this._collapseIframe();\n                }\n            }\n            else if (data.resizeMode === 'coordinates') {\n                this._resizeIframe(data.params);\n            }\n        };\n        this._handleMessage = (event) => {\n            var _a;\n            if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== 'solflareIframeToWalletAdapter') {\n                return;\n            }\n            const data = event.data.data || {};\n            if (data.type === 'event') {\n                this._handleEvent(data.event);\n            }\n            else if (data.type === 'resize') {\n                this._handleResize(data);\n            }\n            else if (data.type === 'response') {\n                if (this._messageHandlers[data.id]) {\n                    const { resolve, reject } = this._messageHandlers[data.id];\n                    delete this._messageHandlers[data.id];\n                    if (data.error) {\n                        reject(data.error);\n                    }\n                    else {\n                        resolve(data.result);\n                    }\n                }\n            }\n        };\n        this._removeElement = () => {\n            if (this._element) {\n                this._element.remove();\n                this._element = null;\n            }\n        };\n        this._removeDanglingElements = () => {\n            const elements = document.getElementsByClassName('solflare-metamask-wallet-adapter-iframe');\n            for (const element of elements) {\n                if (element.parentElement) {\n                    element.remove();\n                }\n            }\n        };\n        this._injectElement = () => {\n            this._removeElement();\n            this._removeDanglingElements();\n            const params = Object.assign(Object.assign({}, this._iframeParams), { mm: true, v: 1, cluster: this._network || 'mainnet-beta', origin: window.location.origin || '', title: document.title || '' });\n            const queryString = Object.keys(params)\n                .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n                .join('&');\n            const iframeUrl = `${SolflareMetaMask.IFRAME_URL}?${queryString}`;\n            this._element = document.createElement('div');\n            this._element.className = 'solflare-metamask-wallet-adapter-iframe';\n            this._element.innerHTML = `\n      <iframe src='${iframeUrl}' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>\n    `;\n            document.body.appendChild(this._element);\n            this._iframe = this._element.querySelector('iframe');\n            window.addEventListener('message', this._handleMessage, false);\n        };\n        this._collapseIframe = () => {\n            if (this._iframe) {\n                this._iframe.style.top = '';\n                this._iframe.style.right = '';\n                this._iframe.style.height = '2px';\n                this._iframe.style.width = '2px';\n            }\n        };\n        this._expandIframe = () => {\n            if (this._iframe) {\n                this._iframe.style.top = '0px';\n                this._iframe.style.bottom = '0px';\n                this._iframe.style.left = '0px';\n                this._iframe.style.right = '0px';\n                this._iframe.style.width = '100%';\n                this._iframe.style.height = '100%';\n            }\n        };\n        this._resizeIframe = (params) => {\n            if (!this._iframe) {\n                return;\n            }\n            this._iframe.style.top = isFinite(params.top) ? `${params.top}px` : '';\n            this._iframe.style.bottom = isFinite(params.bottom) ? `${params.bottom}px` : '';\n            this._iframe.style.left = isFinite(params.left) ? `${params.left}px` : '';\n            this._iframe.style.right = isFinite(params.right) ? `${params.right}px` : '';\n            this._iframe.style.width = isFinite(params.width)\n                ? `${params.width}px`\n                : params.width;\n            this._iframe.style.height = isFinite(params.height)\n                ? `${params.height}px`\n                : params.height;\n        };\n        this._sendIframeMessage = (data) => {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            return new Promise((resolve, reject) => {\n                var _a, _b;\n                const messageId = uuidv4();\n                this._messageHandlers[messageId] = { resolve, reject };\n                (_b = (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n                    channel: 'solflareWalletAdapterToIframe',\n                    data: Object.assign({ id: messageId }, data)\n                }, '*');\n            });\n        };\n        this._connected = () => {\n            this._isConnected = true;\n            this.emit('connect', this.publicKey);\n            this._standardConnected();\n        };\n        this._disconnected = () => {\n            this._publicKey = null;\n            this._isConnected = false;\n            window.removeEventListener('message', this._handleMessage, false);\n            this._removeElement();\n            this.emit('disconnect');\n            this._standardDisconnected();\n        };\n        this._standardConnected = () => {\n            if (!this.publicKey) {\n                return;\n            }\n            const address = this.publicKey.toString();\n            if (!this._account || this._account.address !== address) {\n                this._account = new StandardSolflareMetaMaskWalletAccount({\n                    address,\n                    publicKey: this.publicKey.toBytes()\n                });\n                this.emit('standard_change', { accounts: this.standardAccounts });\n            }\n        };\n        this._standardDisconnected = () => {\n            if (this._account) {\n                this._account = null;\n                this.emit('standard_change', { accounts: this.standardAccounts });\n            }\n        };\n        if (config === null || config === void 0 ? void 0 : config.network) {\n            this._network = config === null || config === void 0 ? void 0 : config.network;\n        }\n        if (window.SolflareMetaMaskParams) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), window.SolflareMetaMaskParams);\n        }\n        if (config === null || config === void 0 ? void 0 : config.params) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), config === null || config === void 0 ? void 0 : config.params);\n        }\n    }\n    get publicKey() {\n        return this._publicKey ? new PublicKey(this._publicKey) : null;\n    }\n    get standardAccount() {\n        return this._account;\n    }\n    get standardAccounts() {\n        return this._account ? [this._account] : [];\n    }\n    get isConnected() {\n        return this._isConnected;\n    }\n    get connected() {\n        return this.isConnected;\n    }\n    get autoApprove() {\n        return false;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                return;\n            }\n            this._injectElement();\n            yield new Promise((resolve, reject) => {\n                this._connectHandler = { resolve, reject };\n            });\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._sendIframeMessage({\n                method: 'disconnect'\n            });\n            this._disconnected();\n        });\n    }\n    signTransaction(transaction) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransaction = serializeTransaction(transaction);\n                const response = yield this._sendIframeMessage({\n                    method: 'signTransactionV2',\n                    params: {\n                        transaction: bs58.encode(serializedTransaction)\n                    }\n                });\n                const { transaction: signedTransaction } = response;\n                return isLegacyTransactionInstance(transaction) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transaction');\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransactions = transactions.map((transaction) => serializeTransaction(transaction));\n                const { transactions: signedTransactions } = yield this._sendIframeMessage({\n                    method: 'signAllTransactionsV2',\n                    params: {\n                        transactions: serializedTransactions.map((transaction) => bs58.encode(transaction))\n                    }\n                });\n                return signedTransactions.map((signedTransaction, index) => {\n                    return isLegacyTransactionInstance(transactions[index]) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n                });\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transactions');\n            }\n        });\n    }\n    signAndSendTransaction(transaction, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransaction = serializeTransaction(transaction);\n                const { signature } = yield this._sendIframeMessage({\n                    method: 'signAndSendTransaction',\n                    params: {\n                        transaction: bs58.encode(serializedTransaction),\n                        options\n                    }\n                });\n                return signature;\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign and send transaction');\n            }\n        });\n    }\n    signMessage(data, display = 'utf8') {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const { signature } = yield this._sendIframeMessage({\n                    method: 'signMessage',\n                    params: {\n                        data: bs58.encode(data),\n                        display\n                    }\n                });\n                return Uint8Array.from(bs58.decode(signature));\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign message');\n            }\n        });\n    }\n    sign(data, display = 'utf8') {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.signMessage(data, display);\n        });\n    }\n    static isSupported() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = yield detectProvider();\n            return !!provider;\n        });\n    }\n    standardSignAndSendTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain, options } = inputs[0];\n                const { minContextSlot, preflightCommitment, skipPreflight, maxRetries } = options || {};\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                if (!isSolanaChain(chain))\n                    throw new Error('invalid chain');\n                const signature = yield this.signAndSendTransaction(VersionedTransaction.deserialize(transaction), {\n                    preflightCommitment,\n                    minContextSlot,\n                    maxRetries,\n                    skipPreflight\n                });\n                outputs.push({ signature: bs58.decode(signature) });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    outputs.push(...(yield this.standardSignAndSendTransaction(input)));\n                }\n            }\n            return outputs;\n        });\n    }\n    standardSignTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain } = inputs[0];\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                if (chain && !isSolanaChain(chain))\n                    throw new Error('invalid chain');\n                const signedTransaction = yield this.signTransaction(VersionedTransaction.deserialize(transaction));\n                outputs.push({ signedTransaction: signedTransaction.serialize() });\n            }\n            else if (inputs.length > 1) {\n                let chain;\n                for (const input of inputs) {\n                    if (input.account !== this._account)\n                        throw new Error('invalid account');\n                    if (input.chain) {\n                        if (!isSolanaChain(input.chain))\n                            throw new Error('invalid chain');\n                        if (chain) {\n                            if (input.chain !== chain)\n                                throw new Error('conflicting chain');\n                        }\n                        else {\n                            chain = input.chain;\n                        }\n                    }\n                }\n                const transactions = inputs.map(({ transaction }) => VersionedTransaction.deserialize(transaction));\n                const signedTransactions = yield this.signAllTransactions(transactions);\n                outputs.push(...signedTransactions.map((signedTransaction) => ({\n                    signedTransaction: signedTransaction.serialize()\n                })));\n            }\n            return outputs;\n        });\n    }\n    standardSignMessage(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { message, account } = inputs[0];\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                const signature = yield this.signMessage(message);\n                outputs.push({ signedMessage: message, signature });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    outputs.push(...(yield this.standardSignMessage(input)));\n                }\n            }\n            return outputs;\n        });\n    }\n}\nSolflareMetaMask.IFRAME_URL = 'https://widget.solflare.com/';\nexport default SolflareMetaMask;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}