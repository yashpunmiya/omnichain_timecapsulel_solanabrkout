{"ast":null,"code":"import { RpcRequestError } from '../../errors/request.js';\nimport { UrlRequiredError } from '../../errors/transport.js';\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js';\nimport { getHttpRpcClient } from '../../utils/rpc/http.js';\nimport { createTransport } from './createTransport.js';\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\nurl, config = {}) {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay\n  } = config;\n  return ({\n    chain,\n    retryCount: retryCount_,\n    timeout: timeout_\n  }) => {\n    const {\n      batchSize = 1000,\n      wait = 0\n    } = typeof batch === 'object' ? batch : {};\n    const retryCount = config.retryCount ?? retryCount_;\n    const timeout = timeout_ ?? config.timeout ?? 10_000;\n    const url_ = url || chain?.rpcUrls.default.http[0];\n    if (!url_) throw new UrlRequiredError();\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout\n    });\n    return createTransport({\n      key,\n      methods,\n      name,\n      async request({\n        method,\n        params\n      }) {\n        const body = {\n          method,\n          params\n        };\n        const {\n          schedule\n        } = createBatchScheduler({\n          id: url_,\n          wait,\n          shouldSplitBatch(requests) {\n            return requests.length > batchSize;\n          },\n          fn: body => rpcClient.request({\n            body\n          }),\n          sort: (a, b) => a.id - b.id\n        });\n        const fn = async body => batch ? schedule(body) : [await rpcClient.request({\n          body\n        })];\n        const [{\n          error,\n          result\n        }] = await fn(body);\n        if (error) throw new RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'http'\n    }, {\n      fetchOptions,\n      url: url_\n    });\n  };\n}\n//# sourceMappingURL=http.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}