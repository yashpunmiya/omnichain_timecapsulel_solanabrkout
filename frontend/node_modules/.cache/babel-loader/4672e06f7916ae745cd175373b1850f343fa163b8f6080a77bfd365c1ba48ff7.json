{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Immutable = Immutable;\nconst ValueGuard = require(\"../guard/value\");\nfunction ImmutableArray(value) {\n  return globalThis.Object.freeze(value).map(value => Immutable(value));\n}\nfunction ImmutableDate(value) {\n  return value;\n}\nfunction ImmutableUint8Array(value) {\n  return value;\n}\nfunction ImmutableRegExp(value) {\n  return value;\n}\nfunction ImmutableObject(value) {\n  const result = {};\n  for (const key of Object.getOwnPropertyNames(value)) {\n    result[key] = Immutable(value[key]);\n  }\n  for (const key of Object.getOwnPropertySymbols(value)) {\n    result[key] = Immutable(value[key]);\n  }\n  return globalThis.Object.freeze(result);\n}\n/** Specialized deep immutable value. Applies freeze recursively to the given value */\n// prettier-ignore\nfunction Immutable(value) {\n  return ValueGuard.IsArray(value) ? ImmutableArray(value) : ValueGuard.IsDate(value) ? ImmutableDate(value) : ValueGuard.IsUint8Array(value) ? ImmutableUint8Array(value) : ValueGuard.IsRegExp(value) ? ImmutableRegExp(value) : ValueGuard.IsObject(value) ? ImmutableObject(value) : value;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}