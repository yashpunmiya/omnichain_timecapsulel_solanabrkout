{"ast":null,"code":"'use strict';\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/util/inspect.js file defined at\n\n  https://github.com/nodejs/node/blob/main/lib/internal/util/inspect.js\n\n  Don't try to replace with the original file and keep it up to date with the upstream file.\n*/\nmodule.exports = {\n  format(format, ...args) {\n    // Simplified version of https://nodejs.org/api/util.html#utilformatformat-args\n    return format.replace(/%([sdifj])/g, function (...[_unused, type]) {\n      const replacement = args.shift();\n      if (type === 'f') {\n        return replacement.toFixed(6);\n      } else if (type === 'j') {\n        return JSON.stringify(replacement);\n      } else if (type === 's' && typeof replacement === 'object') {\n        const ctor = replacement.constructor !== Object ? replacement.constructor.name : '';\n        return `${ctor} {}`.trim();\n      } else {\n        return replacement.toString();\n      }\n    });\n  },\n  inspect(value) {\n    // Vastly simplified version of https://nodejs.org/api/util.html#utilinspectobject-options\n    switch (typeof value) {\n      case 'string':\n        if (value.includes(\"'\")) {\n          if (!value.includes('\"')) {\n            return `\"${value}\"`;\n          } else if (!value.includes('`') && !value.includes('${')) {\n            return `\\`${value}\\``;\n          }\n        }\n        return `'${value}'`;\n      case 'number':\n        if (isNaN(value)) {\n          return 'NaN';\n        } else if (Object.is(value, -0)) {\n          return String(value);\n        }\n        return value;\n      case 'bigint':\n        return `${String(value)}n`;\n      case 'boolean':\n      case 'undefined':\n        return String(value);\n      case 'object':\n        return '{}';\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}