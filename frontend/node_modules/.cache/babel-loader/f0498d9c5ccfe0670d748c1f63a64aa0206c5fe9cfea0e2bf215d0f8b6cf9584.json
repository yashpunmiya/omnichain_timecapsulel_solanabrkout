{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeSystemPolicy = void 0;\nconst index_1 = require(\"../value/guard/index\");\nvar TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n  // ------------------------------------------------------------------\n  // TypeSystemPolicy: Instancing\n  // ------------------------------------------------------------------\n  /**\n   * Configures the instantiation behavior of TypeBox types. The `default` option assigns raw JavaScript\n   * references for embedded types, which may cause side effects if type properties are explicitly updated\n   * outside the TypeBox type builder. The `clone` option creates copies of any shared types upon creation,\n   * preventing unintended side effects. The `freeze` option applies `Object.freeze()` to the type, making\n   * it fully readonly and immutable. Implementations should use `default` whenever possible, as it is the\n   * fastest way to instantiate types. The default setting is `default`.\n   */\n  TypeSystemPolicy.InstanceMode = 'default';\n  // ------------------------------------------------------------------\n  // TypeSystemPolicy: Checking\n  // ------------------------------------------------------------------\n  /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n  TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n  /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n  TypeSystemPolicy.AllowArrayObject = false;\n  /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n  TypeSystemPolicy.AllowNaN = false;\n  /** Sets whether `null` should validate for void types. The default is `false` */\n  TypeSystemPolicy.AllowNullVoid = false;\n  /** Checks this value using the ExactOptionalPropertyTypes policy */\n  function IsExactOptionalProperty(value, key) {\n    return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n  }\n  TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n  /** Checks this value using the AllowArrayObjects policy */\n  function IsObjectLike(value) {\n    const isObject = (0, index_1.IsObject)(value);\n    return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !(0, index_1.IsArray)(value);\n  }\n  TypeSystemPolicy.IsObjectLike = IsObjectLike;\n  /** Checks this value as a record using the AllowArrayObjects policy */\n  function IsRecordLike(value) {\n    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n  }\n  TypeSystemPolicy.IsRecordLike = IsRecordLike;\n  /** Checks this value using the AllowNaN policy */\n  function IsNumberLike(value) {\n    return TypeSystemPolicy.AllowNaN ? (0, index_1.IsNumber)(value) : Number.isFinite(value);\n  }\n  TypeSystemPolicy.IsNumberLike = IsNumberLike;\n  /** Checks this value using the AllowVoidNull policy */\n  function IsVoidLike(value) {\n    const isUndefined = (0, index_1.IsUndefined)(value);\n    return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n  }\n  TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (exports.TypeSystemPolicy = TypeSystemPolicy = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeSystemPolicy","index_1","require","InstanceMode","ExactOptionalPropertyTypes","AllowArrayObject","AllowNaN","AllowNullVoid","IsExactOptionalProperty","key","undefined","IsObjectLike","isObject","IsObject","IsArray","IsRecordLike","Date","Uint8Array","IsNumberLike","IsNumber","Number","isFinite","IsVoidLike","isUndefined","IsUndefined"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@sinclair/typebox/build/cjs/system/policy.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeSystemPolicy = void 0;\nconst index_1 = require(\"../value/guard/index\");\nvar TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n    // ------------------------------------------------------------------\n    // TypeSystemPolicy: Instancing\n    // ------------------------------------------------------------------\n    /**\n     * Configures the instantiation behavior of TypeBox types. The `default` option assigns raw JavaScript\n     * references for embedded types, which may cause side effects if type properties are explicitly updated\n     * outside the TypeBox type builder. The `clone` option creates copies of any shared types upon creation,\n     * preventing unintended side effects. The `freeze` option applies `Object.freeze()` to the type, making\n     * it fully readonly and immutable. Implementations should use `default` whenever possible, as it is the\n     * fastest way to instantiate types. The default setting is `default`.\n     */\n    TypeSystemPolicy.InstanceMode = 'default';\n    // ------------------------------------------------------------------\n    // TypeSystemPolicy: Checking\n    // ------------------------------------------------------------------\n    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n    TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n    TypeSystemPolicy.AllowArrayObject = false;\n    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n    TypeSystemPolicy.AllowNaN = false;\n    /** Sets whether `null` should validate for void types. The default is `false` */\n    TypeSystemPolicy.AllowNullVoid = false;\n    /** Checks this value using the ExactOptionalPropertyTypes policy */\n    function IsExactOptionalProperty(value, key) {\n        return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n    }\n    TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n    /** Checks this value using the AllowArrayObjects policy */\n    function IsObjectLike(value) {\n        const isObject = (0, index_1.IsObject)(value);\n        return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !(0, index_1.IsArray)(value);\n    }\n    TypeSystemPolicy.IsObjectLike = IsObjectLike;\n    /** Checks this value as a record using the AllowArrayObjects policy */\n    function IsRecordLike(value) {\n        return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n    }\n    TypeSystemPolicy.IsRecordLike = IsRecordLike;\n    /** Checks this value using the AllowNaN policy */\n    function IsNumberLike(value) {\n        return TypeSystemPolicy.AllowNaN ? (0, index_1.IsNumber)(value) : Number.isFinite(value);\n    }\n    TypeSystemPolicy.IsNumberLike = IsNumberLike;\n    /** Checks this value using the AllowVoidNull policy */\n    function IsVoidLike(value) {\n        const isUndefined = (0, index_1.IsUndefined)(value);\n        return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n    }\n    TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (exports.TypeSystemPolicy = TypeSystemPolicy = {}));\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,OAAO,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC/C,IAAIF,gBAAgB;AACpB,CAAC,UAAUA,gBAAgB,EAAE;EACzB;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,gBAAgB,CAACG,YAAY,GAAG,SAAS;EACzC;EACA;EACA;EACA;EACAH,gBAAgB,CAACI,0BAA0B,GAAG,KAAK;EACnD;EACAJ,gBAAgB,CAACK,gBAAgB,GAAG,KAAK;EACzC;EACAL,gBAAgB,CAACM,QAAQ,GAAG,KAAK;EACjC;EACAN,gBAAgB,CAACO,aAAa,GAAG,KAAK;EACtC;EACA,SAASC,uBAAuBA,CAACT,KAAK,EAAEU,GAAG,EAAE;IACzC,OAAOT,gBAAgB,CAACI,0BAA0B,GAAGK,GAAG,IAAIV,KAAK,GAAGA,KAAK,CAACU,GAAG,CAAC,KAAKC,SAAS;EAChG;EACAV,gBAAgB,CAACQ,uBAAuB,GAAGA,uBAAuB;EAClE;EACA,SAASG,YAAYA,CAACZ,KAAK,EAAE;IACzB,MAAMa,QAAQ,GAAG,CAAC,CAAC,EAAEX,OAAO,CAACY,QAAQ,EAAEd,KAAK,CAAC;IAC7C,OAAOC,gBAAgB,CAACK,gBAAgB,GAAGO,QAAQ,GAAGA,QAAQ,IAAI,CAAC,CAAC,CAAC,EAAEX,OAAO,CAACa,OAAO,EAAEf,KAAK,CAAC;EAClG;EACAC,gBAAgB,CAACW,YAAY,GAAGA,YAAY;EAC5C;EACA,SAASI,YAAYA,CAAChB,KAAK,EAAE;IACzB,OAAOY,YAAY,CAACZ,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYiB,IAAI,CAAC,IAAI,EAAEjB,KAAK,YAAYkB,UAAU,CAAC;EAC5F;EACAjB,gBAAgB,CAACe,YAAY,GAAGA,YAAY;EAC5C;EACA,SAASG,YAAYA,CAACnB,KAAK,EAAE;IACzB,OAAOC,gBAAgB,CAACM,QAAQ,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACkB,QAAQ,EAAEpB,KAAK,CAAC,GAAGqB,MAAM,CAACC,QAAQ,CAACtB,KAAK,CAAC;EAC5F;EACAC,gBAAgB,CAACkB,YAAY,GAAGA,YAAY;EAC5C;EACA,SAASI,UAAUA,CAACvB,KAAK,EAAE;IACvB,MAAMwB,WAAW,GAAG,CAAC,CAAC,EAAEtB,OAAO,CAACuB,WAAW,EAAEzB,KAAK,CAAC;IACnD,OAAOC,gBAAgB,CAACO,aAAa,GAAGgB,WAAW,IAAIxB,KAAK,KAAK,IAAI,GAAGwB,WAAW;EACvF;EACAvB,gBAAgB,CAACsB,UAAU,GAAGA,UAAU;AAC5C,CAAC,EAAEtB,gBAAgB,KAAKF,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}