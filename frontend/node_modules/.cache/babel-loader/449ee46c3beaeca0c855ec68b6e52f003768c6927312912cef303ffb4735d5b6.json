{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Deref = Deref;\nconst type_1 = require(\"../clone/type\");\nconst index_1 = require(\"../discard/index\");\nconst value_1 = require(\"../guard/value\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\nfunction FromRest(schema, references) {\n  return schema.map(schema => Deref(schema, references));\n}\n// prettier-ignore\nfunction FromProperties(properties, references) {\n  const Acc = {};\n  for (const K of globalThis.Object.getOwnPropertyNames(properties)) {\n    Acc[K] = Deref(properties[K], references);\n  }\n  return Acc;\n}\n// prettier-ignore\nfunction FromConstructor(schema, references) {\n  schema.parameters = FromRest(schema.parameters, references);\n  schema.returns = Deref(schema.returns, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromFunction(schema, references) {\n  schema.parameters = FromRest(schema.parameters, references);\n  schema.returns = Deref(schema.returns, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromIntersect(schema, references) {\n  schema.allOf = FromRest(schema.allOf, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromUnion(schema, references) {\n  schema.anyOf = FromRest(schema.anyOf, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromTuple(schema, references) {\n  if ((0, value_1.IsUndefined)(schema.items)) return schema;\n  schema.items = FromRest(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromArray(schema, references) {\n  schema.items = Deref(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromObject(schema, references) {\n  schema.properties = FromProperties(schema.properties, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromPromise(schema, references) {\n  schema.item = Deref(schema.item, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromAsyncIterator(schema, references) {\n  schema.items = Deref(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromIterator(schema, references) {\n  schema.items = Deref(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromRef(schema, references) {\n  const target = references.find(remote => remote.$id === schema.$ref);\n  if (target === undefined) throw Error(`Unable to dereference schema with $id ${schema.$ref}`);\n  const discard = (0, index_1.Discard)(target, ['$id']);\n  return Deref(discard, references);\n}\n// prettier-ignore\nfunction DerefResolve(schema, references) {\n  return (0, kind_1.IsConstructor)(schema) ? FromConstructor(schema, references) : (0, kind_1.IsFunction)(schema) ? FromFunction(schema, references) : (0, kind_1.IsIntersect)(schema) ? FromIntersect(schema, references) : (0, kind_1.IsUnion)(schema) ? FromUnion(schema, references) : (0, kind_1.IsTuple)(schema) ? FromTuple(schema, references) : (0, kind_1.IsArray)(schema) ? FromArray(schema, references) : (0, kind_1.IsObject)(schema) ? FromObject(schema, references) : (0, kind_1.IsPromise)(schema) ? FromPromise(schema, references) : (0, kind_1.IsAsyncIterator)(schema) ? FromAsyncIterator(schema, references) : (0, kind_1.IsIterator)(schema) ? FromIterator(schema, references) : (0, kind_1.IsRef)(schema) ? FromRef(schema, references) : schema;\n}\n// ------------------------------------------------------------------\n// TDeref\n// ------------------------------------------------------------------\n/** `[Json]` Creates a dereferenced type */\nfunction Deref(schema, references) {\n  return DerefResolve((0, type_1.CloneType)(schema), (0, type_1.CloneRest)(references));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Deref","type_1","require","index_1","value_1","kind_1","FromRest","schema","references","map","FromProperties","properties","Acc","K","globalThis","getOwnPropertyNames","FromConstructor","parameters","returns","FromFunction","FromIntersect","allOf","FromUnion","anyOf","FromTuple","IsUndefined","items","FromArray","FromObject","FromPromise","item","FromAsyncIterator","FromIterator","FromRef","target","find","remote","$id","$ref","undefined","Error","discard","Discard","DerefResolve","IsConstructor","IsFunction","IsIntersect","IsUnion","IsTuple","IsArray","IsObject","IsPromise","IsAsyncIterator","IsIterator","IsRef","CloneType","CloneRest"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@sinclair/typebox/build/cjs/type/deref/deref.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Deref = Deref;\nconst type_1 = require(\"../clone/type\");\nconst index_1 = require(\"../discard/index\");\nconst value_1 = require(\"../guard/value\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\nfunction FromRest(schema, references) {\n    return schema.map((schema) => Deref(schema, references));\n}\n// prettier-ignore\nfunction FromProperties(properties, references) {\n    const Acc = {};\n    for (const K of globalThis.Object.getOwnPropertyNames(properties)) {\n        Acc[K] = Deref(properties[K], references);\n    }\n    return Acc;\n}\n// prettier-ignore\nfunction FromConstructor(schema, references) {\n    schema.parameters = FromRest(schema.parameters, references);\n    schema.returns = Deref(schema.returns, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromFunction(schema, references) {\n    schema.parameters = FromRest(schema.parameters, references);\n    schema.returns = Deref(schema.returns, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromIntersect(schema, references) {\n    schema.allOf = FromRest(schema.allOf, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromUnion(schema, references) {\n    schema.anyOf = FromRest(schema.anyOf, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromTuple(schema, references) {\n    if ((0, value_1.IsUndefined)(schema.items))\n        return schema;\n    schema.items = FromRest(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromArray(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromObject(schema, references) {\n    schema.properties = FromProperties(schema.properties, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromPromise(schema, references) {\n    schema.item = Deref(schema.item, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromAsyncIterator(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromIterator(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromRef(schema, references) {\n    const target = references.find(remote => remote.$id === schema.$ref);\n    if (target === undefined)\n        throw Error(`Unable to dereference schema with $id ${schema.$ref}`);\n    const discard = (0, index_1.Discard)(target, ['$id']);\n    return Deref(discard, references);\n}\n// prettier-ignore\nfunction DerefResolve(schema, references) {\n    return ((0, kind_1.IsConstructor)(schema) ? FromConstructor(schema, references) :\n        (0, kind_1.IsFunction)(schema) ? FromFunction(schema, references) :\n            (0, kind_1.IsIntersect)(schema) ? FromIntersect(schema, references) :\n                (0, kind_1.IsUnion)(schema) ? FromUnion(schema, references) :\n                    (0, kind_1.IsTuple)(schema) ? FromTuple(schema, references) :\n                        (0, kind_1.IsArray)(schema) ? FromArray(schema, references) :\n                            (0, kind_1.IsObject)(schema) ? FromObject(schema, references) :\n                                (0, kind_1.IsPromise)(schema) ? FromPromise(schema, references) :\n                                    (0, kind_1.IsAsyncIterator)(schema) ? FromAsyncIterator(schema, references) :\n                                        (0, kind_1.IsIterator)(schema) ? FromIterator(schema, references) :\n                                            (0, kind_1.IsRef)(schema) ? FromRef(schema, references) :\n                                                schema);\n}\n// ------------------------------------------------------------------\n// TDeref\n// ------------------------------------------------------------------\n/** `[Json]` Creates a dereferenced type */\nfunction Deref(schema, references) {\n    return DerefResolve((0, type_1.CloneType)(schema), (0, type_1.CloneRest)(references));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}