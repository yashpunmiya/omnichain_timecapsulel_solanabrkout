{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { ChainController, ConnectionController, CoreHelperUtil, EventsController, ModalController, OptionsController, RouterController, SnackController } from '@reown/appkit-controllers';\nimport { customElement } from '@reown/appkit-ui';\nimport '../../partials/w3m-connecting-header/index.js';\nimport '../../partials/w3m-connecting-wc-browser/index.js';\nimport '../../partials/w3m-connecting-wc-desktop/index.js';\nimport '../../partials/w3m-connecting-wc-mobile/index.js';\nimport '../../partials/w3m-connecting-wc-qrcode/index.js';\nimport '../../partials/w3m-connecting-wc-unsupported/index.js';\nimport '../../partials/w3m-connecting-wc-web/index.js';\nlet W3mConnectingWcView = class W3mConnectingWcView extends LitElement {\n  constructor() {\n    super();\n    this.wallet = RouterController.state.data?.wallet;\n    this.platform = undefined;\n    this.platforms = [];\n    this.isSiwxEnabled = Boolean(OptionsController.state.siwx);\n    this.determinePlatforms();\n    this.initializeConnection();\n  }\n  render() {\n    return html`\n      ${this.headerTemplate()}\n      <div>${this.platformTemplate()}</div>\n      <wui-ux-by-reown></wui-ux-by-reown>\n    `;\n  }\n  async initializeConnection(retry = false) {\n    if (this.platform === 'browser' || OptionsController.state.manualWCControl && !retry) {\n      return;\n    }\n    try {\n      const {\n        wcPairingExpiry,\n        status\n      } = ConnectionController.state;\n      if (retry || CoreHelperUtil.isPairingExpired(wcPairingExpiry) || status === 'connecting') {\n        await ConnectionController.connectWalletConnect();\n        if (!this.isSiwxEnabled) {\n          ModalController.close();\n        }\n      }\n    } catch (error) {\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'CONNECT_ERROR',\n        properties: {\n          message: error?.message ?? 'Unknown'\n        }\n      });\n      ConnectionController.setWcError(true);\n      SnackController.showError(error.message ?? 'Connection error');\n      ConnectionController.resetWcConnection();\n      RouterController.goBack();\n    }\n  }\n  determinePlatforms() {\n    if (!this.wallet) {\n      this.platforms.push('qrcode');\n      this.platform = 'qrcode';\n      return;\n    }\n    if (this.platform) {\n      return;\n    }\n    const {\n      mobile_link,\n      desktop_link,\n      webapp_link,\n      injected,\n      rdns\n    } = this.wallet;\n    const injectedIds = injected?.map(({\n      injected_id\n    }) => injected_id).filter(Boolean);\n    const browserIds = [...(rdns ? [rdns] : injectedIds ?? [])];\n    const isBrowser = OptionsController.state.isUniversalProvider ? false : browserIds.length;\n    const isMobileWc = mobile_link;\n    const isWebWc = webapp_link;\n    const isBrowserInstalled = ConnectionController.checkInstalled(browserIds);\n    const isBrowserWc = isBrowser && isBrowserInstalled;\n    const isDesktopWc = desktop_link && !CoreHelperUtil.isMobile();\n    if (isBrowserWc && !ChainController.state.noAdapters) {\n      this.platforms.push('browser');\n    }\n    if (isMobileWc) {\n      this.platforms.push(CoreHelperUtil.isMobile() ? 'mobile' : 'qrcode');\n    }\n    if (isWebWc) {\n      this.platforms.push('web');\n    }\n    if (isDesktopWc) {\n      this.platforms.push('desktop');\n    }\n    if (!isBrowserWc && isBrowser && !ChainController.state.noAdapters) {\n      this.platforms.push('unsupported');\n    }\n    this.platform = this.platforms[0];\n  }\n  platformTemplate() {\n    switch (this.platform) {\n      case 'browser':\n        return html`<w3m-connecting-wc-browser></w3m-connecting-wc-browser>`;\n      case 'web':\n        return html`<w3m-connecting-wc-web></w3m-connecting-wc-web>`;\n      case 'desktop':\n        return html`\n          <w3m-connecting-wc-desktop .onRetry=${() => this.initializeConnection(true)}>\n          </w3m-connecting-wc-desktop>\n        `;\n      case 'mobile':\n        return html`\n          <w3m-connecting-wc-mobile isMobile .onRetry=${() => this.initializeConnection(true)}>\n          </w3m-connecting-wc-mobile>\n        `;\n      case 'qrcode':\n        return html`<w3m-connecting-wc-qrcode></w3m-connecting-wc-qrcode>`;\n      default:\n        return html`<w3m-connecting-wc-unsupported></w3m-connecting-wc-unsupported>`;\n    }\n  }\n  headerTemplate() {\n    const multiPlatform = this.platforms.length > 1;\n    if (!multiPlatform) {\n      return null;\n    }\n    return html`\n      <w3m-connecting-header\n        .platforms=${this.platforms}\n        .onSelectPlatfrom=${this.onSelectPlatform.bind(this)}\n      >\n      </w3m-connecting-header>\n    `;\n  }\n  async onSelectPlatform(platform) {\n    const container = this.shadowRoot?.querySelector('div');\n    if (container) {\n      await container.animate([{\n        opacity: 1\n      }, {\n        opacity: 0\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      }).finished;\n      this.platform = platform;\n      container.animate([{\n        opacity: 0\n      }, {\n        opacity: 1\n      }], {\n        duration: 200,\n        fill: 'forwards',\n        easing: 'ease'\n      });\n    }\n  }\n};\n__decorate([state()], W3mConnectingWcView.prototype, \"platform\", void 0);\n__decorate([state()], W3mConnectingWcView.prototype, \"platforms\", void 0);\n__decorate([state()], W3mConnectingWcView.prototype, \"isSiwxEnabled\", void 0);\nW3mConnectingWcView = __decorate([customElement('w3m-connecting-wc-view')], W3mConnectingWcView);\nexport { W3mConnectingWcView };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}