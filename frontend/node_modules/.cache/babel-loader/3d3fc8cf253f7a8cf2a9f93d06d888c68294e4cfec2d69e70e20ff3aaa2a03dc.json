{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport EventEmitter from 'eventemitter3';\nimport WebAdapter from './adapters/web';\nimport ExtensionAdapter from './adapters/extension';\nvar Salmon = /** @class */function (_super) {\n  __extends(Salmon, _super);\n  function Salmon(config) {\n    var _this = _super.call(this) || this;\n    _this._network = 'mainnet-beta';\n    _this._adapterInstance = null;\n    _this._connectHandler = null;\n    _this._connected = function () {\n      if (_this._connectHandler) {\n        _this._connectHandler.resolve();\n        _this._connectHandler = null;\n      }\n      _this.emit('connect', _this.publicKey);\n    };\n    _this._disconnected = function () {\n      if (_this._connectHandler) {\n        _this._connectHandler.reject();\n        _this._connectHandler = null;\n      }\n      _this._adapterInstance = null;\n      _this.emit('disconnect');\n    };\n    if (config === null || config === void 0 ? void 0 : config.network) {\n      _this._network = config === null || config === void 0 ? void 0 : config.network;\n    }\n    if (config === null || config === void 0 ? void 0 : config.provider) {\n      _this._provider = config === null || config === void 0 ? void 0 : config.provider;\n    } else if (window.salmon) {\n      _this._provider = window.salmon;\n    } else {\n      _this._provider = 'https://app.salmonwallet.io';\n    }\n    return _this;\n  }\n  Object.defineProperty(Salmon.prototype, \"publicKey\", {\n    get: function () {\n      var _a;\n      return ((_a = this._adapterInstance) === null || _a === void 0 ? void 0 : _a.publicKey) || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Salmon.prototype, \"isConnected\", {\n    get: function () {\n      var _a;\n      return !!((_a = this._adapterInstance) === null || _a === void 0 ? void 0 : _a.connected);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Salmon.prototype, \"connected\", {\n    get: function () {\n      return this.isConnected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Salmon.prototype, \"autoApprove\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Salmon.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.connected) {\n              return [2 /*return*/];\n            }\n            if (typeof this._provider === 'string') {\n              this._adapterInstance = new WebAdapter(this._provider, this._network);\n            } else {\n              this._adapterInstance = new ExtensionAdapter(this._provider, this._network);\n            }\n            this._adapterInstance.on('connect', this._connected);\n            this._adapterInstance.on('disconnect', this._disconnected);\n            this._adapterInstance.connect();\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              _this._connectHandler = {\n                resolve: resolve,\n                reject: reject\n              };\n            })];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  Salmon.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._adapterInstance) {\n              return [2 /*return*/];\n            }\n            return [4 /*yield*/, this._adapterInstance.disconnect()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  Salmon.prototype.signTransaction = function (transaction) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.connected) {\n              throw new Error('Wallet not connected');\n            }\n            return [4 /*yield*/, this._adapterInstance.signTransaction(transaction)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  Salmon.prototype.signAllTransactions = function (transactions) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.connected) {\n              throw new Error('Wallet not connected');\n            }\n            return [4 /*yield*/, this._adapterInstance.signAllTransactions(transactions)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  Salmon.prototype.signMessage = function (data, display) {\n    if (display === void 0) {\n      display = 'utf8';\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.connected) {\n              throw new Error('Wallet not connected');\n            }\n            return [4 /*yield*/, this._adapterInstance.signMessage(data, display)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  Salmon.prototype.sign = function (data, display) {\n    if (display === void 0) {\n      display = 'utf8';\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.signMessage(data, display)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return Salmon;\n}(EventEmitter);\nexport default Salmon;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}