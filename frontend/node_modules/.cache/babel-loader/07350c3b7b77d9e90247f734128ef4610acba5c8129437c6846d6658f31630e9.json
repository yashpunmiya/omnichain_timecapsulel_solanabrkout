{"ast":null,"code":"import { SolanaChainIDs as Chains, WalletConnectRPCMethods } from './constants.js';\nexport function getChainsFromChainId(chainId) {\n  let chains = [chainId];\n  if (chainId === Chains.Mainnet || chainId === Chains.Deprecated_Mainnet) {\n    chains = [Chains.Mainnet, Chains.Deprecated_Mainnet];\n    if (chainId === Chains.Deprecated_Mainnet) {\n      console.warn(chainWarns.mainnet);\n    }\n  } else if (chainId === Chains.Deprecated_Devnet || chainId === Chains.Devnet) {\n    chains = [Chains.Devnet, Chains.Deprecated_Devnet];\n    if (Chains.Deprecated_Devnet) {\n      console.warn(chainWarns.devnet);\n    }\n  }\n  return chains;\n}\nconst chainWarns = {\n  mainnet: `You are using a deprecated chain ID for Solana Mainnet, please use ${Chains.Mainnet} instead.`,\n  devnet: `You are using a deprecated chain ID for Solana Devnet, please use ${Chains.Devnet} instead.`,\n  wallet: 'The connected wallet is using a deprecated chain ID for Solana. Please, contact them to upgrade. You can learn more at https://github.com/ChainAgnostic/namespaces/blob/main/solana/caip10.md#chain-ids'\n};\nexport function getDefaultChainFromSession(session, selectedChain) {\n  const chains = session.namespaces['solana']?.accounts.map(account => `solana:${account.split(':')[1]}`);\n  if (selectedChain === Chains.Mainnet) {\n    if (chains?.find(chain => chain === Chains.Mainnet)) {\n      return Chains.Mainnet;\n    }\n    console.warn(chainWarns.wallet);\n    return Chains.Deprecated_Mainnet;\n  } else if (selectedChain === Chains.Devnet) {\n    if (chains?.find(chain => chain === Chains.Devnet)) {\n      return Chains.Devnet;\n    }\n    console.warn(chainWarns.wallet);\n    return Chains.Deprecated_Devnet;\n  }\n  throw Error('WalletConnect Solana Adapter: Unable to get a default chain from the session.');\n}\nexport function getConnectParams(chainId) {\n  /** Workaround to support old chain Id configuration */\n  const chains = getChainsFromChainId(chainId);\n  return {\n    optionalNamespaces: {\n      solana: {\n        chains,\n        methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],\n        events: []\n      }\n    }\n  };\n}\nexport function isVersionedTransaction(transaction) {\n  return 'version' in transaction;\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}