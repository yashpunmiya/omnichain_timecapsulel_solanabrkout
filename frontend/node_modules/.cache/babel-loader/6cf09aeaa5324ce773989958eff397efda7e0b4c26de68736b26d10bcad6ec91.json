{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isChanged = void 0;\nconst isChanged = (prev, current, filter) => {\n  if (prev === current) return false;\n  if (!prev || !current) return true;\n  const prevType = Object.prototype.toString.call(prev);\n  const currentType = Object.prototype.toString.call(current);\n  if (prevType !== currentType) return true;\n  if (currentType === '[object Array]') {\n    if (prev.length !== current.length) return true;\n    for (let i = 0; i < current.length; i++) {\n      if ((0, exports.isChanged)(prev[i], current[i], filter)) return true;\n    }\n  } else if (currentType === '[object Object]') {\n    const prevKeys = Object.keys(prev);\n    const currentKeys = Object.keys(current);\n    if (prevKeys.length !== currentKeys.length) return true;\n    const prevDifference = prevKeys.find(k => currentKeys.indexOf(k) < 0);\n    if (prevDifference) return true;\n    for (let i = 0; i < currentKeys.length; i++) {\n      const key = currentKeys[i];\n      if (filter && Object.prototype.hasOwnProperty.call(filter, key) && prev[key] && current[key]) {\n        const prevFiltered = {};\n        const currentFiltered = {};\n        for (let i2 = 0; i2 < filter[key].length; i2++) {\n          const field = filter[key][i2];\n          prevFiltered[field] = prev[key][field];\n          currentFiltered[field] = current[key][field];\n        }\n        if ((0, exports.isChanged)(prevFiltered, currentFiltered)) return true;\n      } else if ((0, exports.isChanged)(prev[key], current[key])) {\n        return true;\n      }\n    }\n  } else if (prev !== current) {\n    return true;\n  }\n  return false;\n};\nexports.isChanged = isChanged;\n//# sourceMappingURL=comparison.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}