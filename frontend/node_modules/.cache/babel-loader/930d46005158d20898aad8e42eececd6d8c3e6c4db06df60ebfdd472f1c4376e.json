{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyDerivationSchema = exports.DerivationAlgorithm = exports.Curve = void 0;\nconst RegistryType_1 = require(\"../RegistryType\");\nconst RegistryItem_1 = require(\"../RegistryItem\");\nconst lib_1 = require(\"../lib\");\nconst CryptoKeypath_1 = require(\"../CryptoKeypath\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"keyPath\"] = 1] = \"keyPath\";\n  Keys[Keys[\"curve\"] = 2] = \"curve\";\n  Keys[Keys[\"algo\"] = 3] = \"algo\";\n  Keys[Keys[\"chainType\"] = 4] = \"chainType\";\n})(Keys || (Keys = {}));\nvar Curve;\n(function (Curve) {\n  Curve[Curve[\"secp256k1\"] = 0] = \"secp256k1\";\n  Curve[Curve[\"ed25519\"] = 1] = \"ed25519\";\n})(Curve = exports.Curve || (exports.Curve = {}));\nvar DerivationAlgorithm;\n(function (DerivationAlgorithm) {\n  DerivationAlgorithm[DerivationAlgorithm[\"slip10\"] = 0] = \"slip10\";\n  DerivationAlgorithm[DerivationAlgorithm[\"bip32ed25519\"] = 1] = \"bip32ed25519\";\n})(DerivationAlgorithm = exports.DerivationAlgorithm || (exports.DerivationAlgorithm = {}));\nclass KeyDerivationSchema extends RegistryItem_1.RegistryItem {\n  constructor(keypath, curve = Curve.secp256k1, algo = DerivationAlgorithm.slip10, chainType) {\n    super();\n    this.keypath = keypath;\n    this.curve = curve;\n    this.algo = algo;\n    this.chainType = chainType;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.KEY_DERIVATION_SCHEMA;\n    this.getKeypath = () => this.keypath;\n    this.getCurve = () => this.curve;\n    this.getAlgo = () => this.algo;\n    this.getChainType = () => this.chainType;\n    this.toDataItem = () => {\n      const map = {};\n      const dataItem = this.getKeypath().toDataItem();\n      dataItem.setTag(this.getKeypath().getRegistryType().getTag());\n      map[Keys.keyPath] = dataItem;\n      map[Keys.curve] = this.curve;\n      map[Keys.algo] = this.algo;\n      if (this.chainType) {\n        map[Keys.chainType] = this.chainType;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.KeyDerivationSchema = KeyDerivationSchema;\nKeyDerivationSchema.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const keypaths = CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.keyPath]);\n  const curve = map[Keys.curve];\n  const algo = map[Keys.algo];\n  const chainType = map[Keys.chainType];\n  return new KeyDerivationSchema(keypaths, curve, algo, chainType);\n};\nKeyDerivationSchema.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return KeyDerivationSchema.fromDataItem(dataItem);\n};\n//# sourceMappingURL=DerivationSchema.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}