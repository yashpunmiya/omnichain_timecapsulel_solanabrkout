{"ast":null,"code":"import { AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError } from '../../errors/abi.js';\nimport { decodeAbiParameters } from './decodeAbiParameters.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/decodeFunctionResult';\nexport function decodeFunctionResult(parameters) {\n  const {\n    abi,\n    args,\n    functionName,\n    data\n  } = parameters;\n  let abiItem = abi[0];\n  if (functionName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: functionName\n    });\n    if (!item) throw new AbiFunctionNotFoundError(functionName, {\n      docsPath\n    });\n    abiItem = item;\n  }\n  if (abiItem.type !== 'function') throw new AbiFunctionNotFoundError(undefined, {\n    docsPath\n  });\n  if (!abiItem.outputs) throw new AbiFunctionOutputsNotFoundError(abiItem.name, {\n    docsPath\n  });\n  const values = decodeAbiParameters(abiItem.outputs, data);\n  if (values && values.length > 1) return values;\n  if (values && values.length === 1) return values[0];\n  return undefined;\n}","map":{"version":3,"names":["AbiFunctionNotFoundError","AbiFunctionOutputsNotFoundError","decodeAbiParameters","getAbiItem","docsPath","decodeFunctionResult","parameters","abi","args","functionName","data","abiItem","item","name","type","undefined","outputs","values","length"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\abi\\decodeFunctionResult.ts"],"sourcesContent":["import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n  AbiFunctionOutputsNotFoundError,\n  type AbiFunctionOutputsNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionReturnType,\n  Widen,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/decodeFunctionResult'\n\nexport type DecodeFunctionResultParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  args extends ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  > = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n  data: Hex\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | undefined }\n      : { functionName: functionName | allFunctionNames }\n    : { functionName?: functionName | allFunctionNames | undefined }\n> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? {\n          args?:\n            | allArgs // show all options\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\n            | (abi extends Abi\n                ? args extends allArgs\n                  ? Widen<args>\n                  : never\n                : never)\n            | undefined\n        }\n      : {\n          args?:\n            | allArgs // show all options\n            | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\n            | undefined\n        }\n  > &\n  (hasFunctions extends true ? unknown : never)\n\nexport type DecodeFunctionResultReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  args extends ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  > = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n> = ContractFunctionReturnType<\n  abi,\n  AbiStateMutability,\n  functionName extends ContractFunctionName<abi>\n    ? functionName\n    : ContractFunctionName<abi>,\n  args\n>\n\nexport type DecodeFunctionResultErrorType =\n  | AbiFunctionNotFoundErrorType\n  | AbiFunctionOutputsNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | GetAbiItemErrorType\n  | ErrorType\n\nexport function decodeFunctionResult<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n  const args extends ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  > = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n>(\n  parameters: DecodeFunctionResultParameters<abi, functionName, args>,\n): DecodeFunctionResultReturnType<abi, functionName, args> {\n  const { abi, args, functionName, data } =\n    parameters as DecodeFunctionResultParameters\n\n  let abiItem = abi[0]\n  if (functionName) {\n    const item = getAbiItem({ abi, args, name: functionName })\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n  if (!abiItem.outputs)\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\n\n  const values = decodeAbiParameters(abiItem.outputs, data)\n  if (values && values.length > 1)\n    return values as DecodeFunctionResultReturnType<abi, functionName, args>\n  if (values && values.length === 1)\n    return values[0] as DecodeFunctionResultReturnType<abi, functionName, args>\n  return undefined as DecodeFunctionResultReturnType<abi, functionName, args>\n}\n"],"mappings":"AAEA,SACEA,wBAAwB,EAExBC,+BAA+B,QAE1B,qBAAqB;AAW5B,SAEEC,mBAAmB,QACd,0BAA0B;AACjC,SAAmCC,UAAU,QAAQ,iBAAiB;AAEtE,MAAMC,QAAQ,GAAG,qCAAqC;AAsGtD,OAAM,SAAUC,oBAAoBA,CAiBlCC,UAAmE;EAEnE,MAAM;IAAEC,GAAG;IAAEC,IAAI;IAAEC,YAAY;IAAEC;EAAI,CAAE,GACrCJ,UAA4C;EAE9C,IAAIK,OAAO,GAAGJ,GAAG,CAAC,CAAC,CAAC;EACpB,IAAIE,YAAY,EAAE;IAChB,MAAMG,IAAI,GAAGT,UAAU,CAAC;MAAEI,GAAG;MAAEC,IAAI;MAAEK,IAAI,EAAEJ;IAAY,CAAE,CAAC;IAC1D,IAAI,CAACG,IAAI,EAAE,MAAM,IAAIZ,wBAAwB,CAACS,YAAY,EAAE;MAAEL;IAAQ,CAAE,CAAC;IACzEO,OAAO,GAAGC,IAAI;EAChB;EAEA,IAAID,OAAO,CAACG,IAAI,KAAK,UAAU,EAC7B,MAAM,IAAId,wBAAwB,CAACe,SAAS,EAAE;IAAEX;EAAQ,CAAE,CAAC;EAC7D,IAAI,CAACO,OAAO,CAACK,OAAO,EAClB,MAAM,IAAIf,+BAA+B,CAACU,OAAO,CAACE,IAAI,EAAE;IAAET;EAAQ,CAAE,CAAC;EAEvE,MAAMa,MAAM,GAAGf,mBAAmB,CAACS,OAAO,CAACK,OAAO,EAAEN,IAAI,CAAC;EACzD,IAAIO,MAAM,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAC7B,OAAOD,MAAiE;EAC1E,IAAIA,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAC/B,OAAOD,MAAM,CAAC,CAAC,CAA4D;EAC7E,OAAOF,SAAoE;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}