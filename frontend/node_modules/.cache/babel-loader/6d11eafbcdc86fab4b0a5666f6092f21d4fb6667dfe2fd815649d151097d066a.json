{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoMultiAccounts = void 0;\nconst RegistryType_1 = require(\"../RegistryType\");\nconst CryptoHDKey_1 = require(\"../CryptoHDKey\");\nconst RegistryItem_1 = require(\"../RegistryItem\");\nconst lib_1 = require(\"../lib\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"masterFingerprint\"] = 1] = \"masterFingerprint\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n  Keys[Keys[\"device\"] = 3] = \"device\";\n  Keys[Keys[\"deviceId\"] = 4] = \"deviceId\";\n  Keys[Keys[\"version\"] = 5] = \"version\";\n})(Keys || (Keys = {}));\nclass CryptoMultiAccounts extends RegistryItem_1.RegistryItem {\n  constructor(masterFingerprint, keys, device, deviceId, version) {\n    super();\n    this.masterFingerprint = masterFingerprint;\n    this.keys = keys;\n    this.device = device;\n    this.deviceId = deviceId;\n    this.version = version;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n    this.getMasterFingerprint = () => this.masterFingerprint;\n    this.getKeys = () => this.keys;\n    this.getDevice = () => this.device;\n    this.getDeviceId = () => this.deviceId;\n    this.getVersion = () => this.version;\n    this.toDataItem = () => {\n      const map = {};\n      if (this.masterFingerprint) {\n        map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n      }\n      if (this.keys) {\n        map[Keys.keys] = this.keys.map(item => {\n          const dataItem = item.toDataItem();\n          dataItem.setTag(item.getRegistryType().getTag());\n          return dataItem;\n        });\n      }\n      if (this.device) {\n        map[Keys.device] = this.device;\n      }\n      if (this.deviceId) {\n        map[Keys.deviceId] = this.deviceId;\n      }\n      if (this.version) {\n        map[Keys.version] = this.version;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoMultiAccounts = CryptoMultiAccounts;\nCryptoMultiAccounts.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const masterFingerprint = Buffer.alloc(4);\n  const _masterFingerprint = map[Keys.masterFingerprint];\n  if (_masterFingerprint) {\n    masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n  }\n  const keys = map[Keys.keys];\n  const cryptoHDKeys = keys.map(item => CryptoHDKey_1.CryptoHDKey.fromDataItem(item));\n  const device = map[Keys.device];\n  const deviceId = map[Keys.deviceId];\n  const version = map[Keys.version];\n  return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device, deviceId, version);\n};\nCryptoMultiAccounts.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoMultiAccounts.fromDataItem(dataItem);\n};","map":{"version":3,"names":["RegistryType_1","require","CryptoHDKey_1","RegistryItem_1","lib_1","Keys","CryptoMultiAccounts","RegistryItem","constructor","masterFingerprint","keys","device","deviceId","version","getRegistryType","RegistryTypes","CRYPTO_MULTI_ACCOUNTS","getMasterFingerprint","getKeys","getDevice","getDeviceId","getVersion","toDataItem","map","readUInt32BE","item","dataItem","setTag","getTag","DataItem","exports","fromDataItem","getData","Buffer","alloc","_masterFingerprint","writeUInt32BE","cryptoHDKeys","CryptoHDKey","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry-sol\\node_modules\\@keystonehq\\bc-ur-registry\\src\\extended\\CryptoMultiAccounts.ts"],"sourcesContent":["import {RegistryTypes} from \"../RegistryType\";\nimport {CryptoHDKey} from \"../CryptoHDKey\";\nimport {RegistryItem} from \"../RegistryItem\";\nimport {decodeToDataItem,DataItem} from '../lib';\nimport {DataItemMap} from '../types';\nenum Keys {\n  masterFingerprint = 1,\n  keys,\n  device,\n  deviceId,\n  version,\n}\n\nexport class CryptoMultiAccounts extends RegistryItem {\n  getRegistryType = () => RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n\n  constructor(\n    private masterFingerprint: Buffer,\n    private keys: CryptoHDKey[],\n    private device?: string,\n    private deviceId?: string,\n    private version?: string\n  ) {\n    super();\n  }\n\n  public getMasterFingerprint = () => this.masterFingerprint;\n  public getKeys = () => this.keys;\n  public getDevice = () => this.device;\n  public getDeviceId = () => this.deviceId;\n  public getVersion = () => this.version;\n\n  public toDataItem = (): DataItem => {\n    const map: DataItemMap = {};\n    if (this.masterFingerprint) {\n      map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n    }\n    if (this.keys) {\n      map[Keys.keys] = this.keys.map((item) => {\n        const dataItem = item.toDataItem();\n        dataItem.setTag(item.getRegistryType().getTag());\n        return dataItem;\n      });\n    }\n    if (this.device) {\n      map[Keys.device] = this.device;\n    }\n    if (this.deviceId) {\n      map[Keys.deviceId] = this.deviceId;\n    }\n    if (this.version) {\n      map[Keys.version] = this.version;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const masterFingerprint = Buffer.alloc(4);\n    const _masterFingerprint = map[Keys.masterFingerprint];\n    if (_masterFingerprint) {\n      masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n    }\n    const keys = map[Keys.keys] as DataItem[];\n    const cryptoHDKeys = keys.map((item) => CryptoHDKey.fromDataItem(item));\n    const device = map[Keys.device];\n    const deviceId = map[Keys.deviceId];\n    const version = map[Keys.version];\n    return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device, deviceId, version);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoMultiAccounts.fromDataItem(dataItem);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}