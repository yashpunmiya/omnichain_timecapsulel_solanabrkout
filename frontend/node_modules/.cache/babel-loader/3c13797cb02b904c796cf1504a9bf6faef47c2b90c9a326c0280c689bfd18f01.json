{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoPSBT = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nclass CryptoPSBT extends RegistryItem_1.RegistryItem {\n  constructor(psbt) {\n    super();\n    this.psbt = psbt;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_PSBT;\n    this.getPSBT = () => this.psbt;\n    this.toDataItem = () => {\n      return new lib_1.DataItem(this.psbt);\n    };\n  }\n}\nexports.CryptoPSBT = CryptoPSBT;\nCryptoPSBT.fromDataItem = dataItem => {\n  const psbt = dataItem.getData();\n  if (!psbt) {\n    throw new Error(`#[ur-registry][CryptoPSBT][fn.fromDataItem]: decoded [dataItem][#data] is undefined: ${dataItem}`);\n  }\n  return new CryptoPSBT(psbt);\n};\nCryptoPSBT.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoPSBT.fromDataItem(dataItem);\n};","map":{"version":3,"names":["lib_1","require","RegistryItem_1","RegistryType_1","CryptoPSBT","RegistryItem","constructor","psbt","getRegistryType","RegistryTypes","CRYPTO_PSBT","getPSBT","toDataItem","DataItem","exports","fromDataItem","dataItem","getData","Error","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry-sol\\node_modules\\@keystonehq\\bc-ur-registry\\src\\CryptoPSBT.ts"],"sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\n\nexport class CryptoPSBT extends RegistryItem {\n  getRegistryType = () => RegistryTypes.CRYPTO_PSBT;\n\n  constructor(private psbt: Buffer) {\n    super();\n  }\n\n  public getPSBT = () => this.psbt;\n\n  public toDataItem = () => {\n    return new DataItem(this.psbt);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const psbt = dataItem.getData();\n    if (!psbt) {\n      throw new Error(\n        `#[ur-registry][CryptoPSBT][fn.fromDataItem]: decoded [dataItem][#data] is undefined: ${dataItem}`,\n      );\n    }\n    return new CryptoPSBT(psbt);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoPSBT.fromDataItem(dataItem);\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AAEA,MAAaG,UAAW,SAAQF,cAAA,CAAAG,YAAY;EAG1CC,YAAoBC,IAAY;IAC9B,KAAK,EAAE;IADW,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,eAAe,GAAG,MAAML,cAAA,CAAAM,aAAa,CAACC,WAAW;IAM1C,KAAAC,OAAO,GAAG,MAAM,IAAI,CAACJ,IAAI;IAEzB,KAAAK,UAAU,GAAG,MAAK;MACvB,OAAO,IAAIZ,KAAA,CAAAa,QAAQ,CAAC,IAAI,CAACN,IAAI,CAAC;IAChC,CAAC;EAND;;AALFO,OAAA,CAAAV,UAAA,GAAAA,UAAA;AAagBA,UAAA,CAAAW,YAAY,GAAIC,QAAkB,IAAI;EAClD,MAAMT,IAAI,GAAGS,QAAQ,CAACC,OAAO,EAAE;EAC/B,IAAI,CAACV,IAAI,EAAE;IACT,MAAM,IAAIW,KAAK,CACb,wFAAwFF,QAAQ,EAAE,CACnG;;EAEH,OAAO,IAAIZ,UAAU,CAACG,IAAI,CAAC;AAC7B,CAAC;AAEaH,UAAA,CAAAe,QAAQ,GAAIC,YAAoB,IAAI;EAChD,MAAMJ,QAAQ,GAAG,IAAAhB,KAAA,CAAAqB,gBAAgB,EAACD,YAAY,CAAC;EAC/C,OAAOhB,UAAU,CAACW,YAAY,CAACC,QAAQ,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}