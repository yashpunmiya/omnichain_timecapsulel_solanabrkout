{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storage = void 0;\nconst utils_1 = require(\"@trezor/utils\");\nconst storageVersion = 2;\nconst storageName = `storage_v${storageVersion}`;\nconst getEmptyState = () => ({\n  origin: {}\n});\nlet memoryStorage = getEmptyState();\nconst getPermanentStorage = () => {\n  const ls = localStorage.getItem(storageName);\n  return ls ? JSON.parse(ls) : getEmptyState();\n};\nclass Storage extends utils_1.TypedEmitter {\n  save(getNewState, temporary = false) {\n    if (temporary || !global.window) {\n      memoryStorage = getNewState(memoryStorage);\n      return;\n    }\n    try {\n      const newState = getNewState(getPermanentStorage());\n      localStorage.setItem(storageName, JSON.stringify(newState));\n      this.emit('changed', newState);\n    } catch {\n      console.warn('long term storage not available');\n      memoryStorage = getNewState(memoryStorage);\n    }\n  }\n  saveForOrigin(getNewState, origin, temporary = false) {\n    this.save(state => ({\n      ...state,\n      origin: {\n        ...state.origin,\n        [origin]: getNewState(state.origin?.[origin] || {})\n      }\n    }), temporary);\n  }\n  load(temporary = false) {\n    if (temporary || !global?.window?.localStorage) {\n      return memoryStorage;\n    }\n    try {\n      return getPermanentStorage();\n    } catch {\n      console.warn('long term storage not available');\n      return memoryStorage;\n    }\n  }\n  loadForOrigin(origin, temporary = false) {\n    const state = this.load(temporary);\n    return state.origin?.[origin] || {};\n  }\n}\nconst storage = new Storage();\nexports.storage = storage;\n//# sourceMappingURL=storage.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}