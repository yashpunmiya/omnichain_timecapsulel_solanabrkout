{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport '../../components/wui-icon/index.js';\nimport '../../components/wui-text/index.js';\nimport { elementStyles, resetStyles } from '../../utils/ThemeUtil.js';\nimport { customElement } from '../../utils/WebComponentsUtil.js';\nimport styles from './styles.js';\nlet WuiTabs = class WuiTabs extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.tabs = [];\n    this.onTabChange = () => null;\n    this.buttons = [];\n    this.disabled = false;\n    this.localTabWidth = '100px';\n    this.activeTab = 0;\n    this.isDense = false;\n  }\n  render() {\n    this.isDense = this.tabs.length > 3;\n    this.style.cssText = `\n      --local-tab: ${this.activeTab};\n      --local-tab-width: ${this.localTabWidth};\n    `;\n    this.dataset['type'] = this.isDense ? 'flex' : 'block';\n    return this.tabs.map((tab, index) => {\n      const isActive = index === this.activeTab;\n      return html`\n        <button\n          ?disabled=${this.disabled}\n          @click=${() => this.onTabClick(index)}\n          data-active=${isActive}\n          data-testid=\"tab-${tab.label?.toLowerCase()}\"\n        >\n          ${this.iconTemplate(tab)}\n          <wui-text variant=\"small-600\" color=\"inherit\"> ${tab.label} </wui-text>\n        </button>\n      `;\n    });\n  }\n  firstUpdated() {\n    if (this.shadowRoot && this.isDense) {\n      this.buttons = [...this.shadowRoot.querySelectorAll('button')];\n      setTimeout(() => {\n        this.animateTabs(0, true);\n      }, 0);\n    }\n  }\n  iconTemplate(tab) {\n    if (tab.icon) {\n      return html`<wui-icon size=\"xs\" color=\"inherit\" name=${tab.icon}></wui-icon>`;\n    }\n    return null;\n  }\n  onTabClick(index) {\n    if (this.buttons) {\n      this.animateTabs(index, false);\n    }\n    this.activeTab = index;\n    this.onTabChange(index);\n  }\n  animateTabs(index, initialAnimation) {\n    const passiveBtn = this.buttons[this.activeTab];\n    const activeBtn = this.buttons[index];\n    const passiveBtnText = passiveBtn?.querySelector('wui-text');\n    const activeBtnText = activeBtn?.querySelector('wui-text');\n    const activeBtnBounds = activeBtn?.getBoundingClientRect();\n    const activeBtnTextBounds = activeBtnText?.getBoundingClientRect();\n    if (passiveBtn && passiveBtnText && !initialAnimation && index !== this.activeTab) {\n      passiveBtnText.animate([{\n        opacity: 0\n      }], {\n        duration: 50,\n        easing: 'ease',\n        fill: 'forwards'\n      });\n      passiveBtn.animate([{\n        width: `34px`\n      }], {\n        duration: 500,\n        easing: 'ease',\n        fill: 'forwards'\n      });\n    }\n    if (activeBtn && activeBtnBounds && activeBtnTextBounds && activeBtnText) {\n      if (index !== this.activeTab || initialAnimation) {\n        this.localTabWidth = `${Math.round(activeBtnBounds.width + activeBtnTextBounds.width) + 6}px`;\n        activeBtn.animate([{\n          width: `${activeBtnBounds.width + activeBtnTextBounds.width}px`\n        }], {\n          duration: initialAnimation ? 0 : 500,\n          fill: 'forwards',\n          easing: 'ease'\n        });\n        activeBtnText.animate([{\n          opacity: 1\n        }], {\n          duration: initialAnimation ? 0 : 125,\n          delay: initialAnimation ? 0 : 200,\n          fill: 'forwards',\n          easing: 'ease'\n        });\n      }\n    }\n  }\n};\nWuiTabs.styles = [resetStyles, elementStyles, styles];\n__decorate([property({\n  type: Array\n})], WuiTabs.prototype, \"tabs\", void 0);\n__decorate([property()], WuiTabs.prototype, \"onTabChange\", void 0);\n__decorate([property({\n  type: Array\n})], WuiTabs.prototype, \"buttons\", void 0);\n__decorate([property({\n  type: Boolean\n})], WuiTabs.prototype, \"disabled\", void 0);\n__decorate([property()], WuiTabs.prototype, \"localTabWidth\", void 0);\n__decorate([state()], WuiTabs.prototype, \"activeTab\", void 0);\n__decorate([state()], WuiTabs.prototype, \"isDense\", void 0);\nWuiTabs = __decorate([customElement('wui-tabs')], WuiTabs);\nexport { WuiTabs };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}