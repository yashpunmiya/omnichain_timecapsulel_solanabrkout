{"ast":null,"code":"// -- Types --------------------------------------------- //\nimport { NumberUtil } from '@reown/appkit-common';\n// -- Util ---------------------------------------- //\nexport const SwapCalculationUtil = {\n  getGasPriceInEther(gas, gasPrice) {\n    const totalGasCostInWei = gasPrice * gas;\n    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;\n    return totalGasCostInEther;\n  },\n  getGasPriceInUSD(networkPrice, gas, gasPrice) {\n    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);\n    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);\n    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);\n    return gasCostInUSD.toNumber();\n  },\n  getPriceImpact({\n    sourceTokenAmount,\n    sourceTokenPriceInUSD,\n    toTokenPriceInUSD,\n    toTokenAmount\n  }) {\n    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);\n    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);\n    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);\n    return priceImpact.toNumber();\n  },\n  getMaxSlippage(slippage, toTokenAmount) {\n    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);\n    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);\n    return maxSlippageAmount.toNumber();\n  },\n  getProviderFee(sourceTokenAmount, feePercentage = 0.0085) {\n    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);\n    return providerFee.toString();\n  },\n  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {\n    const gasPrice = gasPriceInUSD || '0';\n    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {\n      return true;\n    }\n    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);\n  },\n  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {\n    const sourceTokenBalance = balance?.find(token => token.address === sourceTokenAddress)?.quantity?.numeric;\n    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || '0').lt(sourceTokenAmount);\n    return isInSufficientBalance;\n  },\n  getToTokenAmount({\n    sourceToken,\n    toToken,\n    sourceTokenPrice,\n    toTokenPrice,\n    sourceTokenAmount\n  }) {\n    if (sourceTokenAmount === '0') {\n      return '0';\n    }\n    if (!sourceToken || !toToken) {\n      return '0';\n    }\n    const sourceTokenDecimals = sourceToken.decimals;\n    const sourceTokenPriceInUSD = sourceTokenPrice;\n    const toTokenDecimals = toToken.decimals;\n    const toTokenPriceInUSD = toTokenPrice;\n    if (toTokenPriceInUSD <= 0) {\n      return '0';\n    }\n    // Calculate the provider fee (0.85% of the source token amount)\n    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(0.0085);\n    // Adjust the source token amount by subtracting the provider fee\n    const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);\n    // Proceed with conversion using the adjusted source token amount\n    const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));\n    const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);\n    const decimalDifference = sourceTokenDecimals - toTokenDecimals;\n    const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit.times(priceRatio).div(NumberUtil.bigNumber(10).pow(decimalDifference));\n    const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));\n    const amount = toTokenAmount.toFixed(toTokenDecimals).toString();\n    return amount;\n  }\n};\n//# sourceMappingURL=SwapCalculationUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}