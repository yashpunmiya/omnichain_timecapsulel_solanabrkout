{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertTaprootXpub = void 0;\nconst convertTaprootXpub = ({\n  xpub,\n  direction\n}) => {\n  const find = direction === 'h-to-apostrophe' ? 'h' : \"'\";\n  const replace = direction === 'h-to-apostrophe' ? \"'\" : 'h';\n  const openingSquareBracketSplit = xpub.split('[');\n  if (openingSquareBracketSplit.length === 2) {\n    const [beforeOpeningBracket, afterOpeningBracket] = openingSquareBracketSplit;\n    const closingSquareBracketSplit = afterOpeningBracket.split(']');\n    if (closingSquareBracketSplit.length === 2) {\n      const [path, afterClosingBracket] = closingSquareBracketSplit;\n      const correctedPath = path.replace(new RegExp(find, 'g'), replace);\n      return `${beforeOpeningBracket}[${correctedPath}]${afterClosingBracket}`;\n    }\n  }\n  return null;\n};\nexports.convertTaprootXpub = convertTaprootXpub;","map":{"version":3,"names":["Object","defineProperty","exports","value","convertTaprootXpub","xpub","direction","find","replace","openingSquareBracketSplit","split","length","beforeOpeningBracket","afterOpeningBracket","closingSquareBracketSplit","path","afterClosingBracket","correctedPath","RegExp"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@trezor/utils/lib/convertTaprootXpub.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertTaprootXpub = void 0;\nconst convertTaprootXpub = ({ xpub, direction }) => {\n    const find = direction === 'h-to-apostrophe' ? 'h' : \"'\";\n    const replace = direction === 'h-to-apostrophe' ? \"'\" : 'h';\n    const openingSquareBracketSplit = xpub.split('[');\n    if (openingSquareBracketSplit.length === 2) {\n        const [beforeOpeningBracket, afterOpeningBracket] = openingSquareBracketSplit;\n        const closingSquareBracketSplit = afterOpeningBracket.split(']');\n        if (closingSquareBracketSplit.length === 2) {\n            const [path, afterClosingBracket] = closingSquareBracketSplit;\n            const correctedPath = path.replace(new RegExp(find, 'g'), replace);\n            return `${beforeOpeningBracket}[${correctedPath}]${afterClosingBracket}`;\n        }\n    }\n    return null;\n};\nexports.convertTaprootXpub = convertTaprootXpub;\n//# sourceMappingURL=convertTaprootXpub.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMA,kBAAkB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAU,CAAC,KAAK;EAChD,MAAMC,IAAI,GAAGD,SAAS,KAAK,iBAAiB,GAAG,GAAG,GAAG,GAAG;EACxD,MAAME,OAAO,GAAGF,SAAS,KAAK,iBAAiB,GAAG,GAAG,GAAG,GAAG;EAC3D,MAAMG,yBAAyB,GAAGJ,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC;EACjD,IAAID,yBAAyB,CAACE,MAAM,KAAK,CAAC,EAAE;IACxC,MAAM,CAACC,oBAAoB,EAAEC,mBAAmB,CAAC,GAAGJ,yBAAyB;IAC7E,MAAMK,yBAAyB,GAAGD,mBAAmB,CAACH,KAAK,CAAC,GAAG,CAAC;IAChE,IAAII,yBAAyB,CAACH,MAAM,KAAK,CAAC,EAAE;MACxC,MAAM,CAACI,IAAI,EAAEC,mBAAmB,CAAC,GAAGF,yBAAyB;MAC7D,MAAMG,aAAa,GAAGF,IAAI,CAACP,OAAO,CAAC,IAAIU,MAAM,CAACX,IAAI,EAAE,GAAG,CAAC,EAAEC,OAAO,CAAC;MAClE,OAAO,GAAGI,oBAAoB,IAAIK,aAAa,IAAID,mBAAmB,EAAE;IAC5E;EACJ;EACA,OAAO,IAAI;AACf,CAAC;AACDd,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}