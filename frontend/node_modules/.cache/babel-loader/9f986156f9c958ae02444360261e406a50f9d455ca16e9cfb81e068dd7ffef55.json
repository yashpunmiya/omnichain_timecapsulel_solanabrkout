{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinInfo = exports.MiscNetworkInfo = exports.EthereumNetworkInfoDefinitionValues = exports.EthereumNetworkInfo = exports.BitcoinNetworkInfo = exports.BlockchainLink = exports.CoinSupport = exports.CoinObj = exports.Network = exports.Bip32 = void 0;\nconst device_utils_1 = require(\"@trezor/device-utils\");\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst fees_1 = require(\"./fees\");\nexports.Bip32 = schema_utils_1.Type.Object({\n  public: schema_utils_1.Type.Number(),\n  private: schema_utils_1.Type.Number()\n});\nexports.Network = schema_utils_1.Type.Object({\n  messagePrefix: schema_utils_1.Type.String(),\n  bech32: schema_utils_1.Type.String(),\n  bip32: exports.Bip32,\n  pubKeyHash: schema_utils_1.Type.Number(),\n  scriptHash: schema_utils_1.Type.Number(),\n  wif: schema_utils_1.Type.Number(),\n  forkId: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n});\nexports.CoinObj = schema_utils_1.Type.Object({\n  coin: schema_utils_1.Type.String(),\n  identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CoinSupport = schema_utils_1.Type.Composite([schema_utils_1.Type.Object({\n  connect: schema_utils_1.Type.Boolean()\n}), schema_utils_1.Type.Record(schema_utils_1.Type.KeyOfEnum(device_utils_1.DeviceModelInternal), schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Literal(false)]))]);\nexports.BlockchainLink = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.String(),\n  url: schema_utils_1.Type.Array(schema_utils_1.Type.String())\n});\nconst Common = schema_utils_1.Type.Object({\n  label: schema_utils_1.Type.String(),\n  name: schema_utils_1.Type.String(),\n  shortcut: schema_utils_1.Type.String(),\n  slip44: schema_utils_1.Type.Number(),\n  support: exports.CoinSupport,\n  decimals: schema_utils_1.Type.Number(),\n  blockchainLink: schema_utils_1.Type.Optional(exports.BlockchainLink),\n  blockTime: schema_utils_1.Type.Number(),\n  minFee: schema_utils_1.Type.Number(),\n  maxFee: schema_utils_1.Type.Number(),\n  defaultFees: schema_utils_1.Type.Array(fees_1.FeeLevel)\n});\nexports.BitcoinNetworkInfo = schema_utils_1.Type.Intersect([Common, schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('bitcoin'),\n  cashAddrPrefix: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  curveName: schema_utils_1.Type.String(),\n  dustLimit: schema_utils_1.Type.Number(),\n  forceBip143: schema_utils_1.Type.Boolean(),\n  hashGenesisBlock: schema_utils_1.Type.String(),\n  maxAddressLength: schema_utils_1.Type.Number(),\n  maxFeeSatoshiKb: schema_utils_1.Type.Number(),\n  minAddressLength: schema_utils_1.Type.Number(),\n  minFeeSatoshiKb: schema_utils_1.Type.Number(),\n  segwit: schema_utils_1.Type.Boolean(),\n  xPubMagic: schema_utils_1.Type.Number(),\n  xPubMagicSegwitNative: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  xPubMagicSegwit: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  taproot: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  network: exports.Network,\n  isBitcoin: schema_utils_1.Type.Boolean()\n})]);\nexports.EthereumNetworkInfo = schema_utils_1.Type.Intersect([Common, schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('ethereum'),\n  chainId: schema_utils_1.Type.Number(),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined())\n})]);\nexports.EthereumNetworkInfoDefinitionValues = schema_utils_1.Type.Omit(exports.EthereumNetworkInfo, ['minFee', 'maxFee', 'defaultFees', 'blockTime']);\nexports.MiscNetworkInfo = schema_utils_1.Type.Intersect([Common, schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Union([schema_utils_1.Type.Literal('misc'), schema_utils_1.Type.Literal('nem')]),\n  curve: schema_utils_1.Type.String(),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined())\n})]);\nexports.CoinInfo = schema_utils_1.Type.Union([exports.BitcoinNetworkInfo, exports.EthereumNetworkInfo, exports.MiscNetworkInfo]);","map":{"version":3,"names":["Object","defineProperty","exports","value","CoinInfo","MiscNetworkInfo","EthereumNetworkInfoDefinitionValues","EthereumNetworkInfo","BitcoinNetworkInfo","BlockchainLink","CoinSupport","CoinObj","Network","Bip32","device_utils_1","require","schema_utils_1","fees_1","Type","public","Number","private","messagePrefix","String","bech32","bip32","pubKeyHash","scriptHash","wif","forkId","Optional","coin","identity","Composite","connect","Boolean","Record","KeyOfEnum","DeviceModelInternal","Union","Literal","type","url","Array","Common","label","name","shortcut","slip44","support","decimals","blockchainLink","blockTime","minFee","maxFee","defaultFees","FeeLevel","Intersect","cashAddrPrefix","curveName","dustLimit","forceBip143","hashGenesisBlock","maxAddressLength","maxFeeSatoshiKb","minAddressLength","minFeeSatoshiKb","segwit","xPubMagic","xPubMagicSegwitNative","xPubMagicSegwit","taproot","network","isBitcoin","chainId","Undefined","Omit","curve"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@trezor/connect/lib/types/coinInfo.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinInfo = exports.MiscNetworkInfo = exports.EthereumNetworkInfoDefinitionValues = exports.EthereumNetworkInfo = exports.BitcoinNetworkInfo = exports.BlockchainLink = exports.CoinSupport = exports.CoinObj = exports.Network = exports.Bip32 = void 0;\nconst device_utils_1 = require(\"@trezor/device-utils\");\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst fees_1 = require(\"./fees\");\nexports.Bip32 = schema_utils_1.Type.Object({\n    public: schema_utils_1.Type.Number(),\n    private: schema_utils_1.Type.Number(),\n});\nexports.Network = schema_utils_1.Type.Object({\n    messagePrefix: schema_utils_1.Type.String(),\n    bech32: schema_utils_1.Type.String(),\n    bip32: exports.Bip32,\n    pubKeyHash: schema_utils_1.Type.Number(),\n    scriptHash: schema_utils_1.Type.Number(),\n    wif: schema_utils_1.Type.Number(),\n    forkId: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n});\nexports.CoinObj = schema_utils_1.Type.Object({\n    coin: schema_utils_1.Type.String(),\n    identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n});\nexports.CoinSupport = schema_utils_1.Type.Composite([\n    schema_utils_1.Type.Object({\n        connect: schema_utils_1.Type.Boolean(),\n    }),\n    schema_utils_1.Type.Record(schema_utils_1.Type.KeyOfEnum(device_utils_1.DeviceModelInternal), schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Literal(false)])),\n]);\nexports.BlockchainLink = schema_utils_1.Type.Object({\n    type: schema_utils_1.Type.String(),\n    url: schema_utils_1.Type.Array(schema_utils_1.Type.String()),\n});\nconst Common = schema_utils_1.Type.Object({\n    label: schema_utils_1.Type.String(),\n    name: schema_utils_1.Type.String(),\n    shortcut: schema_utils_1.Type.String(),\n    slip44: schema_utils_1.Type.Number(),\n    support: exports.CoinSupport,\n    decimals: schema_utils_1.Type.Number(),\n    blockchainLink: schema_utils_1.Type.Optional(exports.BlockchainLink),\n    blockTime: schema_utils_1.Type.Number(),\n    minFee: schema_utils_1.Type.Number(),\n    maxFee: schema_utils_1.Type.Number(),\n    defaultFees: schema_utils_1.Type.Array(fees_1.FeeLevel),\n});\nexports.BitcoinNetworkInfo = schema_utils_1.Type.Intersect([\n    Common,\n    schema_utils_1.Type.Object({\n        type: schema_utils_1.Type.Literal('bitcoin'),\n        cashAddrPrefix: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n        curveName: schema_utils_1.Type.String(),\n        dustLimit: schema_utils_1.Type.Number(),\n        forceBip143: schema_utils_1.Type.Boolean(),\n        hashGenesisBlock: schema_utils_1.Type.String(),\n        maxAddressLength: schema_utils_1.Type.Number(),\n        maxFeeSatoshiKb: schema_utils_1.Type.Number(),\n        minAddressLength: schema_utils_1.Type.Number(),\n        minFeeSatoshiKb: schema_utils_1.Type.Number(),\n        segwit: schema_utils_1.Type.Boolean(),\n        xPubMagic: schema_utils_1.Type.Number(),\n        xPubMagicSegwitNative: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n        xPubMagicSegwit: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n        taproot: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n        network: exports.Network,\n        isBitcoin: schema_utils_1.Type.Boolean(),\n    }),\n]);\nexports.EthereumNetworkInfo = schema_utils_1.Type.Intersect([\n    Common,\n    schema_utils_1.Type.Object({\n        type: schema_utils_1.Type.Literal('ethereum'),\n        chainId: schema_utils_1.Type.Number(),\n        network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n    }),\n]);\nexports.EthereumNetworkInfoDefinitionValues = schema_utils_1.Type.Omit(exports.EthereumNetworkInfo, [\n    'minFee',\n    'maxFee',\n    'defaultFees',\n    'blockTime',\n]);\nexports.MiscNetworkInfo = schema_utils_1.Type.Intersect([\n    Common,\n    schema_utils_1.Type.Object({\n        type: schema_utils_1.Type.Union([schema_utils_1.Type.Literal('misc'), schema_utils_1.Type.Literal('nem')]),\n        curve: schema_utils_1.Type.String(),\n        network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n    }),\n]);\nexports.CoinInfo = schema_utils_1.Type.Union([exports.BitcoinNetworkInfo, exports.EthereumNetworkInfo, exports.MiscNetworkInfo]);\n//# sourceMappingURL=coinInfo.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,eAAe,GAAGH,OAAO,CAACI,mCAAmC,GAAGJ,OAAO,CAACK,mBAAmB,GAAGL,OAAO,CAACM,kBAAkB,GAAGN,OAAO,CAACO,cAAc,GAAGP,OAAO,CAACQ,WAAW,GAAGR,OAAO,CAACS,OAAO,GAAGT,OAAO,CAACU,OAAO,GAAGV,OAAO,CAACW,KAAK,GAAG,KAAK,CAAC;AAC/P,MAAMC,cAAc,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACtD,MAAMC,cAAc,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACtD,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChCb,OAAO,CAACW,KAAK,GAAGG,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACvCmB,MAAM,EAAEH,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACpCC,OAAO,EAAEL,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC;AACxC,CAAC,CAAC;AACFlB,OAAO,CAACU,OAAO,GAAGI,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACzCsB,aAAa,EAAEN,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EAC3CC,MAAM,EAAER,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EACpCE,KAAK,EAAEvB,OAAO,CAACW,KAAK;EACpBa,UAAU,EAAEV,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACxCO,UAAU,EAAEX,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACxCQ,GAAG,EAAEZ,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACjCS,MAAM,EAAEb,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;AACrE,CAAC,CAAC;AACFlB,OAAO,CAACS,OAAO,GAAGK,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACzC+B,IAAI,EAAEf,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EAClCS,QAAQ,EAAEhB,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;AACvE,CAAC,CAAC;AACFrB,OAAO,CAACQ,WAAW,GAAGM,cAAc,CAACE,IAAI,CAACe,SAAS,CAAC,CAChDjB,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACvBkC,OAAO,EAAElB,cAAc,CAACE,IAAI,CAACiB,OAAO,CAAC;AACzC,CAAC,CAAC,EACFnB,cAAc,CAACE,IAAI,CAACkB,MAAM,CAACpB,cAAc,CAACE,IAAI,CAACmB,SAAS,CAACvB,cAAc,CAACwB,mBAAmB,CAAC,EAAEtB,cAAc,CAACE,IAAI,CAACqB,KAAK,CAAC,CAACvB,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC,EAAEP,cAAc,CAACE,IAAI,CAACsB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC/L,CAAC;AACFtC,OAAO,CAACO,cAAc,GAAGO,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EAChDyC,IAAI,EAAEzB,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EAClCmB,GAAG,EAAE1B,cAAc,CAACE,IAAI,CAACyB,KAAK,CAAC3B,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;AAC/D,CAAC,CAAC;AACF,MAAMqB,MAAM,GAAG5B,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACtC6C,KAAK,EAAE7B,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EACnCuB,IAAI,EAAE9B,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EAClCwB,QAAQ,EAAE/B,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EACtCyB,MAAM,EAAEhC,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACpC6B,OAAO,EAAE/C,OAAO,CAACQ,WAAW;EAC5BwC,QAAQ,EAAElC,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACtC+B,cAAc,EAAEnC,cAAc,CAACE,IAAI,CAACY,QAAQ,CAAC5B,OAAO,CAACO,cAAc,CAAC;EACpE2C,SAAS,EAAEpC,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACvCiC,MAAM,EAAErC,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACpCkC,MAAM,EAAEtC,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACpCmC,WAAW,EAAEvC,cAAc,CAACE,IAAI,CAACyB,KAAK,CAAC1B,MAAM,CAACuC,QAAQ;AAC1D,CAAC,CAAC;AACFtD,OAAO,CAACM,kBAAkB,GAAGQ,cAAc,CAACE,IAAI,CAACuC,SAAS,CAAC,CACvDb,MAAM,EACN5B,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACvByC,IAAI,EAAEzB,cAAc,CAACE,IAAI,CAACsB,OAAO,CAAC,SAAS,CAAC;EAC5CkB,cAAc,EAAE1C,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC;EAC1EoC,SAAS,EAAE3C,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EACvCqC,SAAS,EAAE5C,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACvCyC,WAAW,EAAE7C,cAAc,CAACE,IAAI,CAACiB,OAAO,CAAC,CAAC;EAC1C2B,gBAAgB,EAAE9C,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EAC9CwC,gBAAgB,EAAE/C,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EAC9C4C,eAAe,EAAEhD,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EAC7C6C,gBAAgB,EAAEjD,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EAC9C8C,eAAe,EAAElD,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EAC7C+C,MAAM,EAAEnD,cAAc,CAACE,IAAI,CAACiB,OAAO,CAAC,CAAC;EACrCiC,SAAS,EAAEpD,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACvCiD,qBAAqB,EAAErD,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;EACjFkD,eAAe,EAAEtD,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;EAC3EmD,OAAO,EAAEvD,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACiB,OAAO,CAAC,CAAC,CAAC;EACpEqC,OAAO,EAAEtE,OAAO,CAACU,OAAO;EACxB6D,SAAS,EAAEzD,cAAc,CAACE,IAAI,CAACiB,OAAO,CAAC;AAC3C,CAAC,CAAC,CACL,CAAC;AACFjC,OAAO,CAACK,mBAAmB,GAAGS,cAAc,CAACE,IAAI,CAACuC,SAAS,CAAC,CACxDb,MAAM,EACN5B,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACvByC,IAAI,EAAEzB,cAAc,CAACE,IAAI,CAACsB,OAAO,CAAC,UAAU,CAAC;EAC7CkC,OAAO,EAAE1D,cAAc,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC;EACrCoD,OAAO,EAAExD,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACyD,SAAS,CAAC,CAAC;AACzE,CAAC,CAAC,CACL,CAAC;AACFzE,OAAO,CAACI,mCAAmC,GAAGU,cAAc,CAACE,IAAI,CAAC0D,IAAI,CAAC1E,OAAO,CAACK,mBAAmB,EAAE,CAChG,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,WAAW,CACd,CAAC;AACFL,OAAO,CAACG,eAAe,GAAGW,cAAc,CAACE,IAAI,CAACuC,SAAS,CAAC,CACpDb,MAAM,EACN5B,cAAc,CAACE,IAAI,CAAClB,MAAM,CAAC;EACvByC,IAAI,EAAEzB,cAAc,CAACE,IAAI,CAACqB,KAAK,CAAC,CAACvB,cAAc,CAACE,IAAI,CAACsB,OAAO,CAAC,MAAM,CAAC,EAAExB,cAAc,CAACE,IAAI,CAACsB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;EAC1GqC,KAAK,EAAE7D,cAAc,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC;EACnCiD,OAAO,EAAExD,cAAc,CAACE,IAAI,CAACY,QAAQ,CAACd,cAAc,CAACE,IAAI,CAACyD,SAAS,CAAC,CAAC;AACzE,CAAC,CAAC,CACL,CAAC;AACFzE,OAAO,CAACE,QAAQ,GAAGY,cAAc,CAACE,IAAI,CAACqB,KAAK,CAAC,CAACrC,OAAO,CAACM,kBAAkB,EAAEN,OAAO,CAACK,mBAAmB,EAAEL,OAAO,CAACG,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}