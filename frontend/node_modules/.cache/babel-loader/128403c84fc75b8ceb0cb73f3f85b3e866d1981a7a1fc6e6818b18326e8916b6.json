{"ast":null,"code":"import { bytesToBigInt, bytesToHex, toBytes } from './bytes.js';\nimport { isHexString } from './internal.js';\nexport function isNestedUint8Array(value) {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  for (const item of value) {\n    if (Array.isArray(item)) {\n      if (!isNestedUint8Array(item)) {\n        return false;\n      }\n    } else if (!(item instanceof Uint8Array)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Type output options\n */\nexport var TypeOutput;\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n  TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nexport function toType(input, outputType) {\n  if (input === null) {\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n  const output = toBytes(input);\n  switch (outputType) {\n    case TypeOutput.Uint8Array:\n      return output;\n    case TypeOutput.BigInt:\n      return bytesToBigInt(output);\n    case TypeOutput.Number:\n      {\n        const bigInt = bytesToBigInt(output);\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return Number(bigInt);\n      }\n    case TypeOutput.PrefixedHexString:\n      return bytesToHex(output);\n    default:\n      throw new Error('unknown outputType');\n  }\n}","map":{"version":3,"names":["bytesToBigInt","bytesToHex","toBytes","isHexString","isNestedUint8Array","value","Array","isArray","item","Uint8Array","TypeOutput","toType","input","outputType","undefined","Error","Number","isSafeInteger","output","BigInt","bigInt","MAX_SAFE_INTEGER","PrefixedHexString"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\types.ts"],"sourcesContent":["import { bytesToBigInt, bytesToHex, toBytes } from './bytes.js'\nimport { isHexString } from './internal.js'\n\nimport type { Address } from './address.js'\nimport type { ToBytesInputTypes } from './bytes.js'\n\n/*\n * A type that represents an input that can be converted to a BigInt.\n */\nexport type BigIntLike = bigint | PrefixedHexString | number | Uint8Array\n\n/*\n * A type that represents an input that can be converted to a Uint8Array.\n */\nexport type BytesLike =\n  | Uint8Array\n  | number[]\n  | number\n  | bigint\n  | TransformabletoBytes\n  | PrefixedHexString\n\n/*\n * A type that represents a `0x`-prefixed hex string.\n */\nexport type PrefixedHexString = `0x${string}`\n\n/**\n * A type that represents an input that can be converted to an Address.\n */\nexport type AddressLike = Address | Uint8Array | PrefixedHexString\n\nexport interface TransformabletoBytes {\n  toBytes?(): Uint8Array\n}\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\n\nexport function isNestedUint8Array(value: unknown): value is NestedUint8Array {\n  if (!Array.isArray(value)) {\n    return false\n  }\n  for (const item of value) {\n    if (Array.isArray(item)) {\n      if (!isNestedUint8Array(item)) {\n        return false\n      }\n    } else if (!(item instanceof Uint8Array)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BigInt,\n  Uint8Array,\n  PrefixedHexString,\n}\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number\n  [TypeOutput.BigInt]: bigint\n  [TypeOutput.Uint8Array]: Uint8Array\n  [TypeOutput.PrefixedHexString]: PrefixedHexString\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined\nexport function toType<T extends TypeOutput>(\n  input: ToBytesInputTypes,\n  outputType: T\n): TypeOutputReturnType[T]\nexport function toType<T extends TypeOutput>(\n  input: ToBytesInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null\n  }\n  if (input === undefined) {\n    return undefined\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`)\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    )\n  }\n\n  const output = toBytes(input)\n\n  switch (outputType) {\n    case TypeOutput.Uint8Array:\n      return output as TypeOutputReturnType[T]\n    case TypeOutput.BigInt:\n      return bytesToBigInt(output) as TypeOutputReturnType[T]\n    case TypeOutput.Number: {\n      const bigInt = bytesToBigInt(output)\n      if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n        throw new Error(\n          'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n        )\n      }\n      return Number(bigInt) as TypeOutputReturnType[T]\n    }\n    case TypeOutput.PrefixedHexString:\n      return bytesToHex(output) as TypeOutputReturnType[T]\n    default:\n      throw new Error('unknown outputType')\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,OAAO,QAAQ,YAAY;AAC/D,SAASC,WAAW,QAAQ,eAAe;AAqC3C,OAAM,SAAUC,kBAAkBA,CAACC,KAAc;EAC/C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACzB,OAAO,KAAK;;EAEd,KAAK,MAAMG,IAAI,IAAIH,KAAK,EAAE;IACxB,IAAIC,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC,EAAE;MACvB,IAAI,CAACJ,kBAAkB,CAACI,IAAI,CAAC,EAAE;QAC7B,OAAO,KAAK;;KAEf,MAAM,IAAI,EAAEA,IAAI,YAAYC,UAAU,CAAC,EAAE;MACxC,OAAO,KAAK;;;EAGhB,OAAO,IAAI;AACb;AAEA;;;AAGA,WAAYC,UAKX;AALD,WAAYA,UAAU;EACpBA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,kCAAU;EACVA,UAAA,CAAAA,UAAA,gDAAiB;AACnB,CAAC,EALWA,UAAU,KAAVA,UAAU;AA0BtB,OAAM,SAAUC,MAAMA,CACpBC,KAAwB,EACxBC,UAAa;EAEb,IAAID,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;;EAEb,IAAIA,KAAK,KAAKE,SAAS,EAAE;IACvB,OAAOA,SAAS;;EAGlB,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAI,CAACT,WAAW,CAACS,KAAK,CAAC,EAAE;IACpD,MAAM,IAAIG,KAAK,CAAC,sDAAsDH,KAAK,EAAE,CAAC;GAC/E,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACI,MAAM,CAACC,aAAa,CAACL,KAAK,CAAC,EAAE;IACpE,MAAM,IAAIG,KAAK,CACb,6FAA6F,CAC9F;;EAGH,MAAMG,MAAM,GAAGhB,OAAO,CAACU,KAAK,CAAC;EAE7B,QAAQC,UAAU;IAChB,KAAKH,UAAU,CAACD,UAAU;MACxB,OAAOS,MAAiC;IAC1C,KAAKR,UAAU,CAACS,MAAM;MACpB,OAAOnB,aAAa,CAACkB,MAAM,CAA4B;IACzD,KAAKR,UAAU,CAACM,MAAM;MAAE;QACtB,MAAMI,MAAM,GAAGpB,aAAa,CAACkB,MAAM,CAAC;QACpC,IAAIE,MAAM,GAAGD,MAAM,CAACH,MAAM,CAACK,gBAAgB,CAAC,EAAE;UAC5C,MAAM,IAAIN,KAAK,CACb,8FAA8F,CAC/F;;QAEH,OAAOC,MAAM,CAACI,MAAM,CAA4B;;IAElD,KAAKV,UAAU,CAACY,iBAAiB;MAC/B,OAAOrB,UAAU,CAACiB,MAAM,CAA4B;IACtD;MACE,MAAM,IAAIH,KAAK,CAAC,oBAAoB,CAAC;;AAE3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}