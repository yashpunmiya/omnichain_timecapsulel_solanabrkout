{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initIframeLogger = exports.clearTimeout = exports.postMessage = exports.init = exports.dispose = exports.error = exports.timeout = exports.initPromise = exports.origin = exports.instance = void 0;\nconst tslib_1 = require(\"tslib\");\nconst ERRORS = tslib_1.__importStar(require(\"@trezor/connect/lib/constants/errors\"));\nconst events_1 = require(\"@trezor/connect/lib/events\");\nconst debug_1 = require(\"@trezor/connect/lib/utils/debug\");\nconst urlUtils_1 = require(\"@trezor/connect/lib/utils/urlUtils\");\nconst utils_1 = require(\"@trezor/utils\");\nconst inlineStyles_1 = tslib_1.__importDefault(require(\"./inlineStyles\"));\nexports.initPromise = (0, utils_1.createDeferred)();\nexports.timeout = 0;\nconst dispose = () => {\n  if (exports.instance && exports.instance.parentNode) {\n    try {\n      exports.instance.parentNode.removeChild(exports.instance);\n    } catch {}\n  }\n  exports.instance = null;\n  exports.timeout = 0;\n};\nexports.dispose = dispose;\nconst handleIframeBlocked = () => {\n  window.clearTimeout(exports.timeout);\n  exports.error = ERRORS.TypedError('Init_IframeBlocked');\n  (0, exports.dispose)();\n  exports.initPromise.reject(exports.error);\n};\nconst injectStyleSheet = () => {\n  if (!exports.instance) {\n    throw ERRORS.TypedError('Init_IframeBlocked');\n  }\n  const doc = exports.instance.ownerDocument;\n  const head = doc.head || doc.getElementsByTagName('head')[0];\n  const style = document.createElement('style');\n  style.setAttribute('type', 'text/css');\n  style.setAttribute('id', 'TrezorConnectStylesheet');\n  if (style.styleSheet) {\n    style.styleSheet.cssText = inlineStyles_1.default;\n    head.appendChild(style);\n  } else {\n    style.appendChild(document.createTextNode(inlineStyles_1.default));\n    head.append(style);\n  }\n};\nconst init = async settings => {\n  exports.initPromise = (0, utils_1.createDeferred)();\n  const existedFrame = document.getElementById('trezorconnect');\n  if (existedFrame) {\n    exports.instance = existedFrame;\n  } else {\n    exports.instance = document.createElement('iframe');\n    exports.instance.frameBorder = '0';\n    exports.instance.width = '0px';\n    exports.instance.height = '0px';\n    exports.instance.style.position = 'absolute';\n    exports.instance.style.display = 'none';\n    exports.instance.style.border = '0px';\n    exports.instance.style.width = '0px';\n    exports.instance.style.height = '0px';\n    exports.instance.id = 'trezorconnect';\n  }\n  let src;\n  if (settings.env === 'web') {\n    const manifestString = settings.manifest ? JSON.stringify(settings.manifest) : 'undefined';\n    const manifest = `version=${settings.version}&manifest=${encodeURIComponent(btoa(JSON.stringify(manifestString)))}`;\n    src = `${settings.iframeSrc}?${manifest}`;\n  } else {\n    src = settings.iframeSrc;\n  }\n  if (!src.startsWith('http://') && !src.startsWith('https://')) {\n    return;\n  }\n  exports.instance.setAttribute('src', src);\n  if (navigator.usb) {\n    exports.instance.setAttribute('allow', 'usb');\n  }\n  exports.origin = (0, urlUtils_1.getOrigin)(exports.instance.src);\n  exports.timeout = window.setTimeout(() => {\n    exports.initPromise.reject(ERRORS.TypedError('Init_IframeTimeout'));\n  }, 10000);\n  const onLoad = () => {\n    if (!exports.instance) {\n      exports.initPromise.reject(ERRORS.TypedError('Init_IframeBlocked'));\n      return;\n    }\n    try {\n      const iframeOrigin = exports.instance.contentWindow?.location.origin;\n      if (!iframeOrigin || iframeOrigin === 'null') {\n        handleIframeBlocked();\n        return;\n      }\n    } catch {}\n    let extension;\n    if (typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined') {\n      chrome.runtime.onConnect.addListener(() => {});\n      extension = chrome.runtime.id;\n    }\n    exports.instance.contentWindow?.postMessage({\n      type: events_1.IFRAME.INIT,\n      payload: {\n        settings,\n        extension\n      }\n    }, exports.origin);\n    exports.instance.onload = null;\n  };\n  if (exports.instance.attachEvent) {\n    exports.instance.attachEvent('onload', onLoad);\n  } else {\n    exports.instance.onload = onLoad;\n  }\n  if (document.body) {\n    document.body.appendChild(exports.instance);\n    injectStyleSheet();\n  }\n  try {\n    await exports.initPromise.promise;\n  } catch (e) {\n    if (exports.instance) {\n      if (exports.instance.parentNode) {\n        exports.instance.parentNode.removeChild(exports.instance);\n      }\n      exports.instance = null;\n    }\n    throw e;\n  } finally {\n    window.clearTimeout(exports.timeout);\n    exports.timeout = 0;\n  }\n};\nexports.init = init;\nconst postMessage = message => {\n  if (!exports.instance) {\n    throw ERRORS.TypedError('Init_IframeBlocked');\n  }\n  exports.instance.contentWindow?.postMessage(message, exports.origin);\n};\nexports.postMessage = postMessage;\nconst clearTimeout = () => {\n  window.clearTimeout(exports.timeout);\n};\nexports.clearTimeout = clearTimeout;\nconst initIframeLogger = () => {\n  const logWriterFactory = () => ({\n    add: message => {\n      (0, exports.postMessage)({\n        type: events_1.IFRAME.LOG,\n        payload: message\n      });\n    }\n  });\n  (0, debug_1.setLogWriter)(logWriterFactory);\n};\nexports.initIframeLogger = initIframeLogger;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}