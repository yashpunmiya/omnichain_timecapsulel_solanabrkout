{"ast":null,"code":"import { AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, InvalidArrayError } from '../../errors/abi.js';\nimport { encodeAbiParameters } from './encodeAbiParameters.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeFunctionResult';\nexport function encodeFunctionResult(parameters) {\n  const {\n    abi,\n    functionName,\n    result\n  } = parameters;\n  let abiItem = abi[0];\n  if (functionName) {\n    const item = getAbiItem({\n      abi,\n      name: functionName\n    });\n    if (!item) throw new AbiFunctionNotFoundError(functionName, {\n      docsPath\n    });\n    abiItem = item;\n  }\n  if (abiItem.type !== 'function') throw new AbiFunctionNotFoundError(undefined, {\n    docsPath\n  });\n  if (!abiItem.outputs) throw new AbiFunctionOutputsNotFoundError(abiItem.name, {\n    docsPath\n  });\n  const values = (() => {\n    if (abiItem.outputs.length === 0) return [];\n    if (abiItem.outputs.length === 1) return [result];\n    if (Array.isArray(result)) return result;\n    throw new InvalidArrayError(result);\n  })();\n  return encodeAbiParameters(abiItem.outputs, values);\n}\n//# sourceMappingURL=encodeFunctionResult.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}