{"ast":null,"code":"'use strict';\n\n/** @type {typeof JSON.stringify} */\nvar jsonStringify = (typeof JSON !== 'undefined' ? JSON : require('jsonify')).stringify;\nvar isArray = require('isarray');\nvar objectKeys = require('object-keys');\nvar callBind = require('call-bind');\nvar callBound = require('call-bound');\nvar $join = callBound('Array.prototype.join');\nvar $indexOf = callBound('Array.prototype.indexOf');\nvar $splice = callBound('Array.prototype.splice');\nvar $sort = callBound('Array.prototype.sort');\n\n/** @type {(n: number, char: string) => string} */\nvar strRepeat = function repeat(n, char) {\n  var str = '';\n  for (var i = 0; i < n; i += 1) {\n    str += char;\n  }\n  return str;\n};\n\n/** @type {(parent: import('.').Node, key: import('.').Key, value: unknown) => unknown} */\nvar defaultReplacer = function (_parent, _key, value) {\n  return value;\n};\n\n/** @type {import('.')} */\nmodule.exports = function stableStringify(obj) {\n  /** @type {Parameters<import('.')>[1]} */\n  var opts = arguments.length > 1 ? arguments[1] : void undefined;\n  var space = opts && opts.space || '';\n  if (typeof space === 'number') {\n    space = strRepeat(space, ' ');\n  }\n  var cycles = !!opts && typeof opts.cycles === 'boolean' && opts.cycles;\n  /** @type {undefined | typeof defaultReplacer} */\n  var replacer = opts && opts.replacer ? callBind(opts.replacer) : defaultReplacer;\n  if (opts && typeof opts.collapseEmpty !== 'undefined' && typeof opts.collapseEmpty !== 'boolean') {\n    throw new TypeError('`collapseEmpty` must be a boolean, if provided');\n  }\n  var collapseEmpty = !!opts && opts.collapseEmpty;\n  var cmpOpt = typeof opts === 'function' ? opts : opts && opts.cmp;\n  /** @type {undefined | (<T extends import('.').NonArrayNode>(node: T) => (a: Exclude<keyof T, symbol | number>, b: Exclude<keyof T, symbol | number>) => number)} */\n  var cmp = cmpOpt && function (node) {\n    // eslint-disable-next-line no-extra-parens\n    var get = /** @type {NonNullable<typeof cmpOpt>} */cmpOpt.length > 2 && /** @type {import('.').Getter['get']} */function get(k) {\n      return node[k];\n    };\n    return function (a, b) {\n      // eslint-disable-next-line no-extra-parens\n      return /** @type {NonNullable<typeof cmpOpt>} */cmpOpt({\n        key: a,\n        value: node[a]\n      }, {\n        key: b,\n        value: node[b]\n      },\n      // @ts-expect-error TS doesn't understand the optimization used here\n      get ? /** @type {import('.').Getter} */{\n        __proto__: null,\n        get: get\n      } : void undefined);\n    };\n  };\n\n  /** @type {import('.').Node[]} */\n  var seen = [];\n  return /** @type {(parent: import('.').Node, key: string | number, node: unknown, level: number) => string | undefined} */function stringify(parent, key, node, level) {\n    var indent = space ? '\\n' + strRepeat(level, space) : '';\n    var colonSeparator = space ? ': ' : ':';\n\n    // eslint-disable-next-line no-extra-parens\n    if (node && /** @type {{ toJSON?: unknown }} */node.toJSON && typeof /** @type {{ toJSON?: unknown }} */node.toJSON === 'function') {\n      // eslint-disable-next-line no-extra-parens\n      node = /** @type {{ toJSON: Function }} */node.toJSON();\n    }\n    node = replacer(parent, key, node);\n    if (node === undefined) {\n      return;\n    }\n    if (typeof node !== 'object' || node === null) {\n      return jsonStringify(node);\n    }\n\n    /** @type {(out: string[], brackets: '[]' | '{}') => string} */\n    var groupOutput = function (out, brackets) {\n      return collapseEmpty && out.length === 0 ? brackets : (brackets === '[]' ? '[' : '{') + $join(out, ',') + indent + (brackets === '[]' ? ']' : '}');\n    };\n    if (isArray(node)) {\n      var out = [];\n      for (var i = 0; i < node.length; i++) {\n        var item = stringify(node, i, node[i], level + 1) || jsonStringify(null);\n        out[out.length] = indent + space + item;\n      }\n      return groupOutput(out, '[]');\n    }\n    if ($indexOf(seen, node) !== -1) {\n      if (cycles) {\n        return jsonStringify('__cycle__');\n      }\n      throw new TypeError('Converting circular structure to JSON');\n    } else {\n      seen[seen.length] = /** @type {import('.').NonArrayNode} */node;\n    }\n\n    /** @type {import('.').Key[]} */\n    // eslint-disable-next-line no-extra-parens\n    var keys = $sort(objectKeys(node), cmp && cmp(/** @type {import('.').NonArrayNode} */node));\n    var out = [];\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // eslint-disable-next-line no-extra-parens\n      var value = stringify(/** @type {import('.').Node} */node, key, /** @type {import('.').NonArrayNode} */node[key], level + 1);\n      if (!value) {\n        continue;\n      }\n      var keyValue = jsonStringify(key) + colonSeparator + value;\n      out[out.length] = indent + space + keyValue;\n    }\n    $splice(seen, $indexOf(seen, node), 1);\n    return groupOutput(out, '{}');\n  }({\n    '': obj\n  }, '', obj, 0);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}