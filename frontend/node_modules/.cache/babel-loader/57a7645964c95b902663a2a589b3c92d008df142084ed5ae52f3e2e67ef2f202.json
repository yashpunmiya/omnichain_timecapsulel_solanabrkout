{"ast":null,"code":"/* eslint-disable no-continue */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\nconst errorClasses = {};\nconst deserializers = {};\nexport const addCustomErrorDeserializer = (name, deserializer) => {\n  deserializers[name] = deserializer;\n};\nexport const createCustomErrorClass = name => {\n  class CustomErrorClass extends Error {\n    constructor(message, fields, options) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      super(message || name, options);\n      // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, CustomErrorClass.prototype);\n      this.name = name;\n      if (fields) {\n        for (const k in fields) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          this[k] = fields[k];\n        }\n      }\n      if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n        // .cause was specified but the superconstructor\n        // did not create an instance property.\n        const cause = options.cause;\n        this.cause = cause;\n        if (\"stack\" in cause) {\n          this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n        }\n      }\n    }\n  }\n  errorClasses[name] = CustomErrorClass;\n  return CustomErrorClass;\n};\nfunction isObject(value) {\n  return typeof value === \"object\";\n}\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = object => {\n  if (object && typeof object === \"object\") {\n    try {\n      if (typeof object.message === \"string\") {\n        const msg = JSON.parse(object.message);\n        if (msg.message && msg.name) {\n          object = msg;\n        }\n      }\n    } catch (e) {\n      // nothing\n    }\n    let error;\n    if (typeof object.name === \"string\") {\n      const {\n        name\n      } = object;\n      const des = deserializers[name];\n      if (des) {\n        error = des(object);\n      } else {\n        let constructor = name === \"Error\" ? Error : errorClasses[name];\n        if (!constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          constructor = createCustomErrorClass(name);\n        }\n        error = Object.create(constructor.prototype);\n        try {\n          for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {\n          // sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      if (typeof object.message === \"string\") {\n        error = new Error(object.message);\n      }\n    }\n    if (error && !error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = value => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from, seen) {\n  const to = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}","map":{"version":3,"names":["errorClasses","deserializers","addCustomErrorDeserializer","name","deserializer","createCustomErrorClass","CustomErrorClass","Error","constructor","message","fields","options","Object","setPrototypeOf","prototype","k","isObject","cause","stack","value","deserializeError","object","msg","JSON","parse","e","error","des","console","warn","create","prop","hasOwnProperty","captureStackTrace","String","serializeError","destroyCircular","from","seen","to","push","key","keys","indexOf","slice"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ledgerhq\\errors\\src\\helpers.ts"],"sourcesContent":["/* eslint-disable no-continue */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n\nconst errorClasses = {};\nconst deserializers = {};\n\nexport const addCustomErrorDeserializer = (name: string, deserializer: (obj: any) => any): void => {\n  deserializers[name] = deserializer;\n};\n\nexport interface LedgerErrorConstructor<F extends { [key: string]: unknown }>\n  extends ErrorConstructor {\n  new (message?: string, fields?: F, options?: any): Error;\n  (message?: string, fields?: F, options?: any): Error;\n  readonly prototype: Error;\n}\n\nexport const createCustomErrorClass = <\n  F extends { [key: string]: unknown },\n  T extends LedgerErrorConstructor<F> = LedgerErrorConstructor<F>,\n>(\n  name: string,\n): T => {\n  class CustomErrorClass extends Error {\n    cause?: Error;\n    constructor(message?: string, fields?: F, options?: any) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      super(message || name, options);\n      // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, CustomErrorClass.prototype);\n      this.name = name;\n      if (fields) {\n        for (const k in fields) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          this[k] = fields[k];\n        }\n      }\n      if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n        // .cause was specified but the superconstructor\n        // did not create an instance property.\n        const cause = options.cause;\n        this.cause = cause;\n        if (\"stack\" in cause) {\n          this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n        }\n      }\n    }\n  }\n\n  errorClasses[name] = CustomErrorClass;\n\n  return CustomErrorClass as unknown as T;\n};\n\nfunction isObject(value) {\n  return typeof value === \"object\";\n}\n\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object: any): Error | undefined => {\n  if (object && typeof object === \"object\") {\n    try {\n      if (typeof object.message === \"string\") {\n        const msg = JSON.parse(object.message);\n        if (msg.message && msg.name) {\n          object = msg;\n        }\n      }\n    } catch (e) {\n      // nothing\n    }\n\n    let error;\n    if (typeof object.name === \"string\") {\n      const { name } = object;\n      const des = deserializers[name];\n      if (des) {\n        error = des(object);\n      } else {\n        let constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(constructor.prototype);\n        try {\n          for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {\n          // sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      if (typeof object.message === \"string\") {\n        error = new Error(object.message);\n      }\n    }\n\n    if (error && !error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (\n  value: undefined | To | string | (() => unknown),\n): undefined | To | string => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n\ninterface To {\n  name?: string;\n  message?: string;\n  stack?: string;\n}\n\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from: To, seen: Array<To>): To {\n  const to: To = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}