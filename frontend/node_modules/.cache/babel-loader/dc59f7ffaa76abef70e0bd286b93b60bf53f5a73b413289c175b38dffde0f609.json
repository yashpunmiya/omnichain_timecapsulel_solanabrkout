{"ast":null,"code":"import { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { isVersionedTransaction } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nimport './polyfills/index.js';\nexport function getDerivationPath(account, change) {\n  const length = account !== undefined ? change === undefined ? 3 : 4 : 2;\n  const derivationPath = Buffer.alloc(1 + length * 4);\n  let offset = derivationPath.writeUInt8(length, 0);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n  if (account !== undefined) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n    if (change !== undefined) {\n      derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n  return derivationPath;\n}\nconst BIP32_HARDENED_BIT = 1 << 31 >>> 0;\nfunction harden(n) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\n/** @internal */\nexport async function getPublicKey(transport, derivationPath) {\n  const bytes = await send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n  return new PublicKey(bytes);\n}\n/** @internal */\nexport async function signTransaction(transport, transaction, derivationPath) {\n  const paths = Buffer.alloc(1);\n  paths.writeUInt8(1, 0);\n  const message = isVersionedTransaction(transaction) ? transaction.message.serialize() : transaction.serializeMessage();\n  const data = Buffer.concat([paths, derivationPath, message]);\n  return await send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n}\nasync function send(transport, instruction, p1, data) {\n  let p2 = 0;\n  let offset = 0;\n  if (data.length > MAX_PAYLOAD) {\n    while (data.length - offset > MAX_PAYLOAD) {\n      const buffer = data.slice(offset, offset + MAX_PAYLOAD);\n      const response = await transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, buffer);\n      // @ts-ignore -- TransportStatusError is a constructor Function, not a Class\n      if (response.length !== 2) throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n      p2 |= P2_EXTEND;\n      offset += MAX_PAYLOAD;\n    }\n  }\n  const buffer = data.slice(offset);\n  const response = await transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n  return response.slice(0, response.length - 2);\n}","map":{"version":3,"names":["StatusCodes","TransportStatusError","isVersionedTransaction","PublicKey","getDerivationPath","account","change","length","undefined","derivationPath","Buffer","alloc","offset","writeUInt8","writeUInt32BE","harden","BIP32_HARDENED_BIT","n","INS_GET_PUBKEY","INS_SIGN_MESSAGE","P1_NON_CONFIRM","P1_CONFIRM","P2_EXTEND","P2_MORE","MAX_PAYLOAD","LEDGER_CLA","getPublicKey","transport","bytes","send","signTransaction","transaction","paths","message","serialize","serializeMessage","data","concat","instruction","p1","p2","buffer","slice","response","INCORRECT_DATA"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@solana\\wallet-adapter-ledger\\src\\util.ts"],"sourcesContent":["import type { default as Transport } from '@ledgerhq/hw-transport';\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { isVersionedTransaction } from '@solana/wallet-adapter-base';\nimport type { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport './polyfills/index.js';\n\nexport function getDerivationPath(account?: number, change?: number): Buffer {\n    const length = account !== undefined ? (change === undefined ? 3 : 4) : 2;\n    const derivationPath = Buffer.alloc(1 + length * 4);\n\n    let offset = derivationPath.writeUInt8(length, 0);\n    offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n    offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n    if (account !== undefined) {\n        offset = derivationPath.writeUInt32BE(harden(account), offset);\n        if (change !== undefined) {\n            derivationPath.writeUInt32BE(harden(change), offset);\n        }\n    }\n\n    return derivationPath;\n}\n\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\n\nfunction harden(n: number): number {\n    return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\n\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\n\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\n\nconst MAX_PAYLOAD = 255;\n\nconst LEDGER_CLA = 0xe0;\n\n/** @internal */\nexport async function getPublicKey(transport: Transport, derivationPath: Buffer): Promise<PublicKey> {\n    const bytes = await send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n    return new PublicKey(bytes);\n}\n\n/** @internal */\nexport async function signTransaction(\n    transport: Transport,\n    transaction: Transaction | VersionedTransaction,\n    derivationPath: Buffer\n): Promise<Buffer> {\n    const paths = Buffer.alloc(1);\n    paths.writeUInt8(1, 0);\n\n    const message = isVersionedTransaction(transaction)\n        ? transaction.message.serialize()\n        : transaction.serializeMessage();\n    const data = Buffer.concat([paths, derivationPath, message]);\n\n    return await send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n}\n\nasync function send(transport: Transport, instruction: number, p1: number, data: Buffer): Promise<Buffer> {\n    let p2 = 0;\n    let offset = 0;\n\n    if (data.length > MAX_PAYLOAD) {\n        while (data.length - offset > MAX_PAYLOAD) {\n            const buffer = data.slice(offset, offset + MAX_PAYLOAD);\n            const response = await transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, buffer);\n            // @ts-ignore -- TransportStatusError is a constructor Function, not a Class\n            if (response.length !== 2) throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n\n            p2 |= P2_EXTEND;\n            offset += MAX_PAYLOAD;\n        }\n    }\n\n    const buffer = data.slice(offset);\n    const response = await transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n\n    return response.slice(0, response.length - 2);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}