{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ConnectionController } from '@reown/appkit-controllers';\nimport { customElement } from '@reown/appkit-ui';\nimport '@reown/appkit-ui/wui-flex';\nimport '@reown/appkit-ui/wui-tabs';\nlet W3mConnectingHeader = class W3mConnectingHeader extends LitElement {\n  constructor() {\n    super();\n    this.platformTabs = [];\n    this.unsubscribe = [];\n    this.platforms = [];\n    this.onSelectPlatfrom = undefined;\n    this.buffering = false;\n    this.unsubscribe.push(ConnectionController.subscribeKey('buffering', val => this.buffering = val));\n  }\n  disconnectCallback() {\n    this.unsubscribe.forEach(unsubscribe => unsubscribe());\n  }\n  render() {\n    const tabs = this.generateTabs();\n    return html`\n      <wui-flex justifyContent=\"center\" .padding=${['0', '0', 'l', '0']}>\n        <wui-tabs\n          ?disabled=${this.buffering}\n          .tabs=${tabs}\n          .onTabChange=${this.onTabChange.bind(this)}\n        ></wui-tabs>\n      </wui-flex>\n    `;\n  }\n  generateTabs() {\n    const tabs = this.platforms.map(platform => {\n      if (platform === 'browser') {\n        return {\n          label: 'Browser',\n          icon: 'extension',\n          platform: 'browser'\n        };\n      } else if (platform === 'mobile') {\n        return {\n          label: 'Mobile',\n          icon: 'mobile',\n          platform: 'mobile'\n        };\n      } else if (platform === 'qrcode') {\n        return {\n          label: 'Mobile',\n          icon: 'mobile',\n          platform: 'qrcode'\n        };\n      } else if (platform === 'web') {\n        return {\n          label: 'Webapp',\n          icon: 'browser',\n          platform: 'web'\n        };\n      } else if (platform === 'desktop') {\n        return {\n          label: 'Desktop',\n          icon: 'desktop',\n          platform: 'desktop'\n        };\n      }\n      return {\n        label: 'Browser',\n        icon: 'extension',\n        platform: 'unsupported'\n      };\n    });\n    this.platformTabs = tabs.map(({\n      platform\n    }) => platform);\n    return tabs;\n  }\n  onTabChange(index) {\n    const tab = this.platformTabs[index];\n    if (tab) {\n      this.onSelectPlatfrom?.(tab);\n    }\n  }\n};\n__decorate([property({\n  type: Array\n})], W3mConnectingHeader.prototype, \"platforms\", void 0);\n__decorate([property()], W3mConnectingHeader.prototype, \"onSelectPlatfrom\", void 0);\n__decorate([state()], W3mConnectingHeader.prototype, \"buffering\", void 0);\nW3mConnectingHeader = __decorate([customElement('w3m-connecting-header')], W3mConnectingHeader);\nexport { W3mConnectingHeader };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}