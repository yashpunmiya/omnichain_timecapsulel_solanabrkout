{"ast":null,"code":"import { bytesToHex, numberToHex } from '../encoding/toHex.js';\nimport { defineFormatter } from './formatter.js';\nexport const rpcTransactionType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4'\n};\nexport function formatTransactionRequest(request) {\n  const rpcRequest = {};\n  if (typeof request.authorizationList !== 'undefined') rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);\n  if (typeof request.accessList !== 'undefined') rpcRequest.accessList = request.accessList;\n  if (typeof request.blobVersionedHashes !== 'undefined') rpcRequest.blobVersionedHashes = request.blobVersionedHashes;\n  if (typeof request.blobs !== 'undefined') {\n    if (typeof request.blobs[0] !== 'string') rpcRequest.blobs = request.blobs.map(x => bytesToHex(x));else rpcRequest.blobs = request.blobs;\n  }\n  if (typeof request.data !== 'undefined') rpcRequest.data = request.data;\n  if (typeof request.from !== 'undefined') rpcRequest.from = request.from;\n  if (typeof request.gas !== 'undefined') rpcRequest.gas = numberToHex(request.gas);\n  if (typeof request.gasPrice !== 'undefined') rpcRequest.gasPrice = numberToHex(request.gasPrice);\n  if (typeof request.maxFeePerBlobGas !== 'undefined') rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas);\n  if (typeof request.maxFeePerGas !== 'undefined') rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas);\n  if (typeof request.maxPriorityFeePerGas !== 'undefined') rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas);\n  if (typeof request.nonce !== 'undefined') rpcRequest.nonce = numberToHex(request.nonce);\n  if (typeof request.to !== 'undefined') rpcRequest.to = request.to;\n  if (typeof request.type !== 'undefined') rpcRequest.type = rpcTransactionType[request.type];\n  if (typeof request.value !== 'undefined') rpcRequest.value = numberToHex(request.value);\n  return rpcRequest;\n}\nexport const defineTransactionRequest = /*#__PURE__*/defineFormatter('transactionRequest', formatTransactionRequest);\n//////////////////////////////////////////////////////////////////////////////\nfunction formatAuthorizationList(authorizationList) {\n  return authorizationList.map(authorization => ({\n    address: authorization.contractAddress,\n    r: authorization.r,\n    s: authorization.s,\n    chainId: numberToHex(authorization.chainId),\n    nonce: numberToHex(authorization.nonce),\n    ...(typeof authorization.yParity !== 'undefined' ? {\n      yParity: numberToHex(authorization.yParity)\n    } : {}),\n    ...(typeof authorization.v !== 'undefined' && typeof authorization.yParity === 'undefined' ? {\n      v: numberToHex(authorization.v)\n    } : {})\n  }));\n}\n//# sourceMappingURL=transactionRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}