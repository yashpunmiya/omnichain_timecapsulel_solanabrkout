{"ast":null,"code":"import { stringToBytes } from '../encoding/toBytes.js';\nimport { encodeLabelhash } from './encodeLabelhash.js';\nimport { labelhash } from './labelhash.js';\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n *\n * @example\n * packetToBytes('awkweb.eth')\n * '0x0661776b7765620365746800'\n *\n * @see https://docs.ens.domains/resolution/names#dns\n *\n */\nexport function packetToBytes(packet) {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, '');\n  if (value.length === 0) return new Uint8Array(1);\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2);\n  let offset = 0;\n  const list = value.split('.');\n  for (let i = 0; i < list.length; i++) {\n    let encoded = stringToBytes(list[i]);\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255) encoded = stringToBytes(encodeLabelhash(labelhash(list[i])));\n    bytes[offset] = encoded.length;\n    bytes.set(encoded, offset + 1);\n    offset += encoded.length + 1;\n  }\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1);\n  return bytes;\n}\n//# sourceMappingURL=packetToBytes.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}