{"ast":null,"code":"import { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nexport class ExecutionRevertedError extends BaseError {\n  constructor({\n    cause,\n    message\n  } = {}) {\n    const reason = message?.replace('execution reverted: ', '')?.replace('execution reverted', '');\n    super(`Execution reverted ${reason ? `with reason: ${reason}` : 'for an unknown reason'}.`, {\n      cause,\n      name: 'ExecutionRevertedError'\n    });\n  }\n}\nObject.defineProperty(ExecutionRevertedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 3\n});\nObject.defineProperty(ExecutionRevertedError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /execution reverted/\n});\nexport class FeeCapTooHighError extends BaseError {\n  constructor({\n    cause,\n    maxFeePerGas\n  } = {}) {\n    super(`The fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''}) cannot be higher than the maximum allowed value (2^256-1).`, {\n      cause,\n      name: 'FeeCapTooHighError'\n    });\n  }\n}\nObject.defineProperty(FeeCapTooHighError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\n});\nexport class FeeCapTooLowError extends BaseError {\n  constructor({\n    cause,\n    maxFeePerGas\n  } = {}) {\n    super(`The fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ''} gwei) cannot be lower than the block base fee.`, {\n      cause,\n      name: 'FeeCapTooLowError'\n    });\n  }\n}\nObject.defineProperty(FeeCapTooLowError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\n});\nexport class NonceTooHighError extends BaseError {\n  constructor({\n    cause,\n    nonce\n  } = {}) {\n    super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ''}is higher than the next one expected.`, {\n      cause,\n      name: 'NonceTooHighError'\n    });\n  }\n}\nObject.defineProperty(NonceTooHighError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /nonce too high/\n});\nexport class NonceTooLowError extends BaseError {\n  constructor({\n    cause,\n    nonce\n  } = {}) {\n    super([`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ''}is lower than the current nonce of the account.`, 'Try increasing the nonce or find the latest nonce with `getTransactionCount`.'].join('\\n'), {\n      cause,\n      name: 'NonceTooLowError'\n    });\n  }\n}\nObject.defineProperty(NonceTooLowError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /nonce too low|transaction already imported|already known/\n});\nexport class NonceMaxValueError extends BaseError {\n  constructor({\n    cause,\n    nonce\n  } = {}) {\n    super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ''}exceeds the maximum allowed nonce.`, {\n      cause,\n      name: 'NonceMaxValueError'\n    });\n  }\n}\nObject.defineProperty(NonceMaxValueError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /nonce has max value/\n});\nexport class InsufficientFundsError extends BaseError {\n  constructor({\n    cause\n  } = {}) {\n    super(['The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.'].join('\\n'), {\n      cause,\n      metaMessages: ['This error could arise when the account does not have enough funds to:', ' - pay for the total gas fee,', ' - pay for the value to send.', ' ', 'The cost of the transaction is calculated as `gas * gas fee + value`, where:', ' - `gas` is the amount of gas needed for transaction to execute,', ' - `gas fee` is the gas fee,', ' - `value` is the amount of ether to send to the recipient.'],\n      name: 'InsufficientFundsError'\n    });\n  }\n}\nObject.defineProperty(InsufficientFundsError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /insufficient funds|exceeds transaction sender account balance/\n});\nexport class IntrinsicGasTooHighError extends BaseError {\n  constructor({\n    cause,\n    gas\n  } = {}) {\n    super(`The amount of gas ${gas ? `(${gas}) ` : ''}provided for the transaction exceeds the limit allowed for the block.`, {\n      cause,\n      name: 'IntrinsicGasTooHighError'\n    });\n  }\n}\nObject.defineProperty(IntrinsicGasTooHighError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /intrinsic gas too high|gas limit reached/\n});\nexport class IntrinsicGasTooLowError extends BaseError {\n  constructor({\n    cause,\n    gas\n  } = {}) {\n    super(`The amount of gas ${gas ? `(${gas}) ` : ''}provided for the transaction is too low.`, {\n      cause,\n      name: 'IntrinsicGasTooLowError'\n    });\n  }\n}\nObject.defineProperty(IntrinsicGasTooLowError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /intrinsic gas too low/\n});\nexport class TransactionTypeNotSupportedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('The transaction type is not supported for this chain.', {\n      cause,\n      name: 'TransactionTypeNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(TransactionTypeNotSupportedError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /transaction type not valid/\n});\nexport class TipAboveFeeCapError extends BaseError {\n  constructor({\n    cause,\n    maxPriorityFeePerGas,\n    maxFeePerGas\n  } = {}) {\n    super([`The provided tip (\\`maxPriorityFeePerGas\\`${maxPriorityFeePerGas ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei` : ''}) cannot be higher than the fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''}).`].join('\\n'), {\n      cause,\n      name: 'TipAboveFeeCapError'\n    });\n  }\n}\nObject.defineProperty(TipAboveFeeCapError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\n});\nexport class UnknownNodeError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super(`An error occurred while executing: ${cause?.shortMessage}`, {\n      cause,\n      name: 'UnknownNodeError'\n    });\n  }\n}\n//# sourceMappingURL=node.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}