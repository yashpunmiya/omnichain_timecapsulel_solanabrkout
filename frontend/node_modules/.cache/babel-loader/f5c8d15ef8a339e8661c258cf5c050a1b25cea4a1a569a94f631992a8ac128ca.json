{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TemplateLiteralGenerateError = void 0;\nexports.TemplateLiteralExpressionGenerate = TemplateLiteralExpressionGenerate;\nexports.TemplateLiteralGenerate = TemplateLiteralGenerate;\nconst finite_1 = require(\"./finite\");\nconst parse_1 = require(\"./parse\");\nconst index_1 = require(\"../error/index\");\n// ------------------------------------------------------------------\n// TemplateLiteralGenerateError\n// ------------------------------------------------------------------\nclass TemplateLiteralGenerateError extends index_1.TypeBoxError {}\nexports.TemplateLiteralGenerateError = TemplateLiteralGenerateError;\n// ------------------------------------------------------------------\n// TemplateLiteralExpressionGenerate\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction* GenerateReduce(buffer) {\n  if (buffer.length === 1) return yield* buffer[0];\n  for (const left of buffer[0]) {\n    for (const right of GenerateReduce(buffer.slice(1))) {\n      yield `${left}${right}`;\n    }\n  }\n}\n// prettier-ignore\nfunction* GenerateAnd(expression) {\n  return yield* GenerateReduce(expression.expr.map(expr => [...TemplateLiteralExpressionGenerate(expr)]));\n}\n// prettier-ignore\nfunction* GenerateOr(expression) {\n  for (const expr of expression.expr) yield* TemplateLiteralExpressionGenerate(expr);\n}\n// prettier-ignore\nfunction* GenerateConst(expression) {\n  return yield expression.const;\n}\nfunction* TemplateLiteralExpressionGenerate(expression) {\n  return expression.type === 'and' ? yield* GenerateAnd(expression) : expression.type === 'or' ? yield* GenerateOr(expression) : expression.type === 'const' ? yield* GenerateConst(expression) : (() => {\n    throw new TemplateLiteralGenerateError('Unknown expression');\n  })();\n}\n/** Generates a tuple of strings from the given TemplateLiteral. Returns an empty tuple if infinite. */\nfunction TemplateLiteralGenerate(schema) {\n  const expression = (0, parse_1.TemplateLiteralParseExact)(schema.pattern);\n  // prettier-ignore\n  return (0, finite_1.IsTemplateLiteralExpressionFinite)(expression) ? [...TemplateLiteralExpressionGenerate(expression)] : [];\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}