{"ast":null,"code":"import { EnsController } from '@reown/appkit-controllers';\nimport { solana, solanaDevnet } from '../networks/index.js';\nexport const DEFAULT_METHODS = {\n  solana: ['solana_signMessage', 'solana_signTransaction', 'solana_requestAccounts', 'solana_getAccounts', 'solana_signAllTransactions', 'solana_signAndSendTransaction'],\n  eip155: ['eth_accounts', 'eth_requestAccounts', 'eth_sendRawTransaction', 'eth_sign', 'eth_signTransaction', 'eth_signTypedData', 'eth_signTypedData_v3', 'eth_signTypedData_v4', 'eth_sendTransaction', 'personal_sign', 'wallet_switchEthereumChain', 'wallet_addEthereumChain', 'wallet_getPermissions', 'wallet_requestPermissions', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode',\n  // EIP-5792\n  'wallet_getCallsStatus', 'wallet_showCallsStatus', 'wallet_sendCalls', 'wallet_getCapabilities',\n  // EIP-7715\n  'wallet_grantPermissions', 'wallet_revokePermissions',\n  //EIP-7811\n  'wallet_getAssets'],\n  bip122: ['sendTransfer', 'signMessage', 'signPsbt', 'getAccountAddresses']\n};\nexport const WcHelpersUtil = {\n  getMethodsByChainNamespace(chainNamespace) {\n    return DEFAULT_METHODS[chainNamespace] || [];\n  },\n  createDefaultNamespace(chainNamespace) {\n    return {\n      methods: this.getMethodsByChainNamespace(chainNamespace),\n      events: ['accountsChanged', 'chainChanged'],\n      chains: [],\n      rpcMap: {}\n    };\n  },\n  applyNamespaceOverrides(baseNamespaces, overrides) {\n    if (!overrides) {\n      return {\n        ...baseNamespaces\n      };\n    }\n    const result = {\n      ...baseNamespaces\n    };\n    const namespacesToOverride = new Set();\n    if (overrides.methods) {\n      Object.keys(overrides.methods).forEach(ns => namespacesToOverride.add(ns));\n    }\n    if (overrides.chains) {\n      Object.keys(overrides.chains).forEach(ns => namespacesToOverride.add(ns));\n    }\n    if (overrides.events) {\n      Object.keys(overrides.events).forEach(ns => namespacesToOverride.add(ns));\n    }\n    if (overrides.rpcMap) {\n      Object.keys(overrides.rpcMap).forEach(chainId => {\n        const [ns] = chainId.split(':');\n        if (ns) {\n          namespacesToOverride.add(ns);\n        }\n      });\n    }\n    namespacesToOverride.forEach(ns => {\n      if (!result[ns]) {\n        result[ns] = this.createDefaultNamespace(ns);\n      }\n    });\n    if (overrides.methods) {\n      Object.entries(overrides.methods).forEach(([ns, methods]) => {\n        if (result[ns]) {\n          result[ns].methods = methods;\n        }\n      });\n    }\n    if (overrides.chains) {\n      Object.entries(overrides.chains).forEach(([ns, chains]) => {\n        if (result[ns]) {\n          result[ns].chains = chains;\n        }\n      });\n    }\n    if (overrides.events) {\n      Object.entries(overrides.events).forEach(([ns, events]) => {\n        if (result[ns]) {\n          result[ns].events = events;\n        }\n      });\n    }\n    if (overrides.rpcMap) {\n      const processedNamespaces = new Set();\n      Object.entries(overrides.rpcMap).forEach(([chainId, rpcUrl]) => {\n        const [ns, id] = chainId.split(':');\n        if (!ns || !id || !result[ns]) {\n          return;\n        }\n        if (!result[ns].rpcMap) {\n          result[ns].rpcMap = {};\n        }\n        if (!processedNamespaces.has(ns)) {\n          result[ns].rpcMap = {};\n          processedNamespaces.add(ns);\n        }\n        result[ns].rpcMap[id] = rpcUrl;\n      });\n    }\n    return result;\n  },\n  createNamespaces(caipNetworks, configOverride) {\n    const defaultNamespaces = caipNetworks.reduce((acc, chain) => {\n      const {\n        id,\n        chainNamespace,\n        rpcUrls\n      } = chain;\n      const rpcUrl = rpcUrls.default.http[0];\n      if (!acc[chainNamespace]) {\n        acc[chainNamespace] = this.createDefaultNamespace(chainNamespace);\n      }\n      const caipNetworkId = `${chainNamespace}:${id}`;\n      // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style\n      const namespace = acc[chainNamespace];\n      namespace.chains.push(caipNetworkId);\n      // Workaround for wallets that only support deprecated Solana network ID\n      switch (caipNetworkId) {\n        case solana.caipNetworkId:\n          namespace.chains.push(solana.deprecatedCaipNetworkId);\n          break;\n        case solanaDevnet.caipNetworkId:\n          namespace.chains.push(solanaDevnet.deprecatedCaipNetworkId);\n          break;\n        default:\n      }\n      if (namespace?.rpcMap && rpcUrl) {\n        namespace.rpcMap[id] = rpcUrl;\n      }\n      return acc;\n    }, {});\n    return this.applyNamespaceOverrides(defaultNamespaces, configOverride);\n  },\n  resolveReownName: async name => {\n    const wcNameAddress = await EnsController.resolveName(name);\n    const networkNameAddresses = Object.values(wcNameAddress?.addresses) || [];\n    return networkNameAddresses[0]?.address || false;\n  },\n  getChainsFromNamespaces(namespaces = {}) {\n    return Object.values(namespaces).flatMap(namespace => {\n      const chains = namespace.chains || [];\n      const accountsChains = namespace.accounts.map(account => {\n        const [chainNamespace, chainId] = account.split(':');\n        return `${chainNamespace}:${chainId}`;\n      });\n      return Array.from(new Set([...chains, ...accountsChains]));\n    });\n  },\n  isSessionEventData(data) {\n    return typeof data === 'object' && data !== null && 'id' in data && 'topic' in data && 'params' in data && typeof data.params === 'object' && data.params !== null && 'chainId' in data.params && 'event' in data.params && typeof data.params.event === 'object' && data.params.event !== null;\n  }\n};\n//# sourceMappingURL=HelpersUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}