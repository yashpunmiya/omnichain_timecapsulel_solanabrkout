{"ast":null,"code":"import { AbiEncodingArrayLengthMismatchError, AbiEncodingBytesSizeMismatchError, AbiEncodingLengthMismatchError, InvalidAbiEncodingTypeError, InvalidArrayError } from '../../errors/abi.js';\nimport { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { IntegerOutOfRangeError } from '../../errors/encoding.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { concat } from '../data/concat.js';\nimport { padHex } from '../data/pad.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { boolToHex, numberToHex, stringToHex } from '../encoding/toHex.js';\nimport { integerRegex } from '../regex.js';\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nexport function encodeAbiParameters(params, values) {\n  if (params.length !== values.length) throw new AbiEncodingLengthMismatchError({\n    expectedLength: params.length,\n    givenLength: values.length\n  });\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params,\n    values: values\n  });\n  const data = encodeParams(preparedParams);\n  if (data.length === 0) return '0x';\n  return data;\n}\nfunction prepareParams({\n  params,\n  values\n}) {\n  const preparedParams = [];\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({\n      param: params[i],\n      value: values[i]\n    }));\n  }\n  return preparedParams;\n}\nfunction prepareParam({\n  param,\n  value\n}) {\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents) {\n    const [length, type] = arrayComponents;\n    return encodeArray(value, {\n      length,\n      param: {\n        ...param,\n        type\n      }\n    });\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value, {\n      param: param\n    });\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value);\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value);\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int');\n    const [,, size = '256'] = integerRegex.exec(param.type) ?? [];\n    return encodeNumber(value, {\n      signed,\n      size: Number(size)\n    });\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value, {\n      param\n    });\n  }\n  if (param.type === 'string') {\n    return encodeString(value);\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters'\n  });\n}\nfunction encodeParams(preparedParams) {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0;\n  for (let i = 0; i < preparedParams.length; i++) {\n    const {\n      dynamic,\n      encoded\n    } = preparedParams[i];\n    if (dynamic) staticSize += 32;else staticSize += size(encoded);\n  }\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams = [];\n  const dynamicParams = [];\n  let dynamicSize = 0;\n  for (let i = 0; i < preparedParams.length; i++) {\n    const {\n      dynamic,\n      encoded\n    } = preparedParams[i];\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, {\n        size: 32\n      }));\n      dynamicParams.push(encoded);\n      dynamicSize += size(encoded);\n    } else {\n      staticParams.push(encoded);\n    }\n  }\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams]);\n}\nfunction encodeAddress(value) {\n  if (!isAddress(value)) throw new InvalidAddressError({\n    address: value\n  });\n  return {\n    dynamic: false,\n    encoded: padHex(value.toLowerCase())\n  };\n}\nfunction encodeArray(value, {\n  length,\n  param\n}) {\n  const dynamic = length === null;\n  if (!Array.isArray(value)) throw new InvalidArrayError(value);\n  if (!dynamic && value.length !== length) throw new AbiEncodingArrayLengthMismatchError({\n    expectedLength: length,\n    givenLength: value.length,\n    type: `${param.type}[${length}]`\n  });\n  let dynamicChild = false;\n  const preparedParams = [];\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({\n      param,\n      value: value[i]\n    });\n    if (preparedParam.dynamic) dynamicChild = true;\n    preparedParams.push(preparedParam);\n  }\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams);\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, {\n        size: 32\n      });\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length\n      };\n    }\n    if (dynamicChild) return {\n      dynamic: true,\n      encoded: data\n    };\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({\n      encoded\n    }) => encoded))\n  };\n}\nfunction encodeBytes(value, {\n  param\n}) {\n  const [, paramSize] = param.type.split('bytes');\n  const bytesSize = size(value);\n  if (!paramSize) {\n    let value_ = value;\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0) value_ = padHex(value_, {\n      dir: 'right',\n      size: Math.ceil((value.length - 2) / 2 / 32) * 32\n    });\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, {\n        size: 32\n      })), value_])\n    };\n  }\n  if (bytesSize !== Number.parseInt(paramSize)) throw new AbiEncodingBytesSizeMismatchError({\n    expectedSize: Number.parseInt(paramSize),\n    value\n  });\n  return {\n    dynamic: false,\n    encoded: padHex(value, {\n      dir: 'right'\n    })\n  };\n}\nfunction encodeBool(value) {\n  if (typeof value !== 'boolean') throw new BaseError(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`);\n  return {\n    dynamic: false,\n    encoded: padHex(boolToHex(value))\n  };\n}\nfunction encodeNumber(value, {\n  signed,\n  size = 256\n}) {\n  if (typeof size === 'number') {\n    const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n;\n    const min = signed ? -max - 1n : 0n;\n    if (value > max || value < min) throw new IntegerOutOfRangeError({\n      max: max.toString(),\n      min: min.toString(),\n      signed,\n      size: size / 8,\n      value: value.toString()\n    });\n  }\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed\n    })\n  };\n}\nfunction encodeString(value) {\n  const hexValue = stringToHex(value);\n  const partsLength = Math.ceil(size(hexValue) / 32);\n  const parts = [];\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n      dir: 'right'\n    }));\n  }\n  return {\n    dynamic: true,\n    encoded: concat([padHex(numberToHex(size(hexValue), {\n      size: 32\n    })), ...parts])\n  };\n}\nfunction encodeTuple(value, {\n  param\n}) {\n  let dynamic = false;\n  const preparedParams = [];\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i];\n    const index = Array.isArray(value) ? i : param_.name;\n    const preparedParam = prepareParam({\n      param: param_,\n      value: value[index]\n    });\n    preparedParams.push(preparedParam);\n    if (preparedParam.dynamic) dynamic = true;\n  }\n  return {\n    dynamic,\n    encoded: dynamic ? encodeParams(preparedParams) : concat(preparedParams.map(({\n      encoded\n    }) => encoded))\n  };\n}\nexport function getArrayComponents(type) {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n  return matches ?\n  // Return `null` if the array is dynamic.\n  [matches[2] ? Number(matches[2]) : null, matches[1]] : undefined;\n}","map":{"version":3,"names":["AbiEncodingArrayLengthMismatchError","AbiEncodingBytesSizeMismatchError","AbiEncodingLengthMismatchError","InvalidAbiEncodingTypeError","InvalidArrayError","InvalidAddressError","BaseError","IntegerOutOfRangeError","isAddress","concat","padHex","size","slice","boolToHex","numberToHex","stringToHex","integerRegex","encodeAbiParameters","params","values","length","expectedLength","givenLength","preparedParams","prepareParams","data","encodeParams","i","push","prepareParam","param","value","arrayComponents","getArrayComponents","type","encodeArray","encodeTuple","encodeAddress","encodeBool","startsWith","signed","exec","encodeNumber","Number","encodeBytes","encodeString","docsPath","staticSize","dynamic","encoded","staticParams","dynamicParams","dynamicSize","address","toLowerCase","Array","isArray","dynamicChild","preparedParam","map","paramSize","split","bytesSize","value_","dir","Math","ceil","parseInt","expectedSize","max","BigInt","min","toString","hexValue","partsLength","parts","components","param_","index","name","matches","match","undefined"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\abi\\encodeAbiParameters.ts"],"sourcesContent":["import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { IntegerOutOfRangeError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\nimport { integerRegex } from '../regex.js'\n\nexport type EncodeAbiParametersReturnType = Hex\n\nexport type EncodeAbiParametersErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | PrepareParamsErrorType\n  | EncodeParamsErrorType\n  | ErrorType\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nexport function encodeAbiParameters<\n  const params extends readonly AbiParameter[] | readonly unknown[],\n>(\n  params: params,\n  values: params extends readonly AbiParameter[]\n    ? AbiParametersToPrimitiveTypes<params>\n    : never,\n): EncodeAbiParametersReturnType {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length as number,\n      givenLength: values.length as any,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params as readonly AbiParameter[],\n    values: values as any,\n  })\n  const data = encodeParams(preparedParams)\n  if (data.length === 0) return '0x'\n  return data\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\n\ntype PrepareParamsErrorType = PrepareParamErrorType | ErrorType\n\nfunction prepareParams<const params extends readonly AbiParameter[]>({\n  params,\n  values,\n}: {\n  params: params\n  values: AbiParametersToPrimitiveTypes<params>\n}) {\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\n  }\n  return preparedParams\n}\n\ntype PrepareParamErrorType =\n  | EncodeAddressErrorType\n  | EncodeArrayErrorType\n  | EncodeBytesErrorType\n  | EncodeBoolErrorType\n  | EncodeNumberErrorType\n  | EncodeStringErrorType\n  | EncodeTupleErrorType\n  | GetArrayComponentsErrorType\n  | InvalidAbiEncodingTypeErrorType\n  | ErrorType\n\nfunction prepareParam<const param extends AbiParameter>({\n  param,\n  value,\n}: {\n  param: param\n  value: AbiParameterToPrimitiveType<param>\n}): PreparedParam {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, { length, param: { ...param, type } })\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      param: param as TupleAbiParameter,\n    })\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value as unknown as Hex)\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value as unknown as boolean)\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int')\n    const [, , size = '256'] = integerRegex.exec(param.type) ?? []\n    return encodeNumber(value as unknown as number, {\n      signed,\n      size: Number(size),\n    })\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex, { param })\n  }\n  if (param.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters',\n  })\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype EncodeParamsErrorType = NumberToHexErrorType | SizeErrorType | ErrorType\n\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) staticSize += 32\n    else staticSize += size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams: Hex[] = []\n  const dynamicParams: Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\n      dynamicParams.push(encoded)\n      dynamicSize += size(encoded)\n    } else {\n      staticParams.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams])\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype EncodeAddressErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nfunction encodeAddress(value: Hex): PreparedParam {\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\n}\n\ntype EncodeArrayErrorType =\n  | AbiEncodingArrayLengthMismatchErrorType\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | InvalidArrayErrorType\n  | NumberToHexErrorType\n  // TODO: Add back once circular type reference is resolved\n  // | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeArray<const param extends AbiParameter>(\n  value: AbiParameterToPrimitiveType<param>,\n  {\n    length,\n    param,\n  }: {\n    length: number | null\n    param: param\n  },\n): PreparedParam {\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParams.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams)\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\ntype EncodeBytesErrorType =\n  | AbiEncodingBytesSizeMismatchErrorType\n  | ConcatErrorType\n  | PadHexErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeBytes<const param extends AbiParameter>(\n  value: Hex,\n  { param }: { param: param },\n): PreparedParam {\n  const [, paramSize] = param.type.split('bytes')\n  const bytesSize = size(value)\n  if (!paramSize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: 'right',\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n      })\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n    }\n  }\n  if (bytesSize !== Number.parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: Number.parseInt(paramSize),\n      value,\n    })\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\n}\n\ntype EncodeBoolErrorType = PadHexErrorType | BoolToHexErrorType | ErrorType\n\nfunction encodeBool(value: boolean): PreparedParam {\n  if (typeof value !== 'boolean')\n    throw new BaseError(\n      `Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`,\n    )\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\n}\n\ntype EncodeNumberErrorType = NumberToHexErrorType | ErrorType\n\nfunction encodeNumber(\n  value: number,\n  { signed, size = 256 }: { signed: boolean; size?: number | undefined },\n): PreparedParam {\n  if (typeof size === 'number') {\n    const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n\n    const min = signed ? -max - 1n : 0n\n    if (value > max || value < min)\n      throw new IntegerOutOfRangeError({\n        max: max.toString(),\n        min: min.toString(),\n        signed,\n        size: size / 8,\n        value: value.toString(),\n      })\n  }\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\ntype EncodeStringErrorType =\n  | ConcatErrorType\n  | NumberToHexErrorType\n  | PadHexErrorType\n  | SizeErrorType\n  | SliceErrorType\n  | StringToHexErrorType\n  | ErrorType\n\nfunction encodeString(value: string): PreparedParam {\n  const hexValue = stringToHex(value)\n  const partsLength = Math.ceil(size(hexValue) / 32)\n  const parts: Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n        dir: 'right',\n      }),\n    )\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts,\n    ]),\n  }\n}\n\ntype EncodeTupleErrorType =\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  // TODO: Add back once circular type reference is resolved\n  // | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeTuple<\n  const param extends AbiParameter & { components: readonly AbiParameter[] },\n>(\n  value: AbiParameterToPrimitiveType<param>,\n  { param }: { param: param },\n): PreparedParam {\n  let dynamic = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i]\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParam({\n      param: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParams.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encodeParams(preparedParams)\n      : concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\ntype GetArrayComponentsErrorType = ErrorType\n\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\n    : undefined\n}\n"],"mappings":"AAMA,SACEA,mCAAmC,EAEnCC,iCAAiC,EAEjCC,8BAA8B,EAE9BC,2BAA2B,EAE3BC,iBAAiB,QAEZ,qBAAqB;AAC5B,SACEC,mBAAmB,QAEd,yBAAyB;AAChC,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,sBAAsB,QAAQ,0BAA0B;AAGjE,SAAkCC,SAAS,QAAQ,yBAAyB;AAC5E,SAA+BC,MAAM,QAAQ,mBAAmB;AAChE,SAA+BC,MAAM,QAAQ,gBAAgB;AAC7D,SAA6BC,IAAI,QAAQ,iBAAiB;AAC1D,SAA8BC,KAAK,QAAQ,kBAAkB;AAC7D,SAIEC,SAAS,EACTC,WAAW,EACXC,WAAW,QACN,sBAAsB;AAC7B,SAASC,YAAY,QAAQ,aAAa;AAU1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAM,SAAUC,mBAAmBA,CAGjCC,MAAc,EACdC,MAES;EAET,IAAID,MAAM,CAACE,MAAM,KAAKD,MAAM,CAACC,MAAM,EACjC,MAAM,IAAIlB,8BAA8B,CAAC;IACvCmB,cAAc,EAAEH,MAAM,CAACE,MAAgB;IACvCE,WAAW,EAAEH,MAAM,CAACC;GACrB,CAAC;EACJ;EACA,MAAMG,cAAc,GAAGC,aAAa,CAAC;IACnCN,MAAM,EAAEA,MAAiC;IACzCC,MAAM,EAAEA;GACT,CAAC;EACF,MAAMM,IAAI,GAAGC,YAAY,CAACH,cAAc,CAAC;EACzC,IAAIE,IAAI,CAACL,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAClC,OAAOK,IAAI;AACb;AAWA,SAASD,aAAaA,CAA+C;EACnEN,MAAM;EACNC;AAAM,CAIP;EACC,MAAMI,cAAc,GAAoB,EAAE;EAC1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,CAACE,MAAM,EAAEO,CAAC,EAAE,EAAE;IACtCJ,cAAc,CAACK,IAAI,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAEZ,MAAM,CAACS,CAAC,CAAC;MAAEI,KAAK,EAAEZ,MAAM,CAACQ,CAAC;IAAC,CAAE,CAAC,CAAC;EAC3E;EACA,OAAOJ,cAAc;AACvB;AAcA,SAASM,YAAYA,CAAmC;EACtDC,KAAK;EACLC;AAAK,CAIN;EACC,MAAMC,eAAe,GAAGC,kBAAkB,CAACH,KAAK,CAACI,IAAI,CAAC;EACtD,IAAIF,eAAe,EAAE;IACnB,MAAM,CAACZ,MAAM,EAAEc,IAAI,CAAC,GAAGF,eAAe;IACtC,OAAOG,WAAW,CAACJ,KAAK,EAAE;MAAEX,MAAM;MAAEU,KAAK,EAAE;QAAE,GAAGA,KAAK;QAAEI;MAAI;IAAE,CAAE,CAAC;EAClE;EACA,IAAIJ,KAAK,CAACI,IAAI,KAAK,OAAO,EAAE;IAC1B,OAAOE,WAAW,CAACL,KAAyB,EAAE;MAC5CD,KAAK,EAAEA;KACR,CAAC;EACJ;EACA,IAAIA,KAAK,CAACI,IAAI,KAAK,SAAS,EAAE;IAC5B,OAAOG,aAAa,CAACN,KAAuB,CAAC;EAC/C;EACA,IAAID,KAAK,CAACI,IAAI,KAAK,MAAM,EAAE;IACzB,OAAOI,UAAU,CAACP,KAA2B,CAAC;EAChD;EACA,IAAID,KAAK,CAACI,IAAI,CAACK,UAAU,CAAC,MAAM,CAAC,IAAIT,KAAK,CAACI,IAAI,CAACK,UAAU,CAAC,KAAK,CAAC,EAAE;IACjE,MAAMC,MAAM,GAAGV,KAAK,CAACI,IAAI,CAACK,UAAU,CAAC,KAAK,CAAC;IAC3C,MAAM,IAAK5B,IAAI,GAAG,KAAK,CAAC,GAAGK,YAAY,CAACyB,IAAI,CAACX,KAAK,CAACI,IAAI,CAAC,IAAI,EAAE;IAC9D,OAAOQ,YAAY,CAACX,KAA0B,EAAE;MAC9CS,MAAM;MACN7B,IAAI,EAAEgC,MAAM,CAAChC,IAAI;KAClB,CAAC;EACJ;EACA,IAAImB,KAAK,CAACI,IAAI,CAACK,UAAU,CAAC,OAAO,CAAC,EAAE;IAClC,OAAOK,WAAW,CAACb,KAAuB,EAAE;MAAED;IAAK,CAAE,CAAC;EACxD;EACA,IAAIA,KAAK,CAACI,IAAI,KAAK,QAAQ,EAAE;IAC3B,OAAOW,YAAY,CAACd,KAA0B,CAAC;EACjD;EACA,MAAM,IAAI5B,2BAA2B,CAAC2B,KAAK,CAACI,IAAI,EAAE;IAChDY,QAAQ,EAAE;GACX,CAAC;AACJ;AAMA,SAASpB,YAAYA,CAACH,cAA+B;EACnD;EACA,IAAIwB,UAAU,GAAG,CAAC;EAClB,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,cAAc,CAACH,MAAM,EAAEO,CAAC,EAAE,EAAE;IAC9C,MAAM;MAAEqB,OAAO;MAAEC;IAAO,CAAE,GAAG1B,cAAc,CAACI,CAAC,CAAC;IAC9C,IAAIqB,OAAO,EAAED,UAAU,IAAI,EAAE,MACxBA,UAAU,IAAIpC,IAAI,CAACsC,OAAO,CAAC;EAClC;EAEA;EACA,MAAMC,YAAY,GAAU,EAAE;EAC9B,MAAMC,aAAa,GAAU,EAAE;EAC/B,IAAIC,WAAW,GAAG,CAAC;EACnB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,cAAc,CAACH,MAAM,EAAEO,CAAC,EAAE,EAAE;IAC9C,MAAM;MAAEqB,OAAO;MAAEC;IAAO,CAAE,GAAG1B,cAAc,CAACI,CAAC,CAAC;IAC9C,IAAIqB,OAAO,EAAE;MACXE,YAAY,CAACtB,IAAI,CAACd,WAAW,CAACiC,UAAU,GAAGK,WAAW,EAAE;QAAEzC,IAAI,EAAE;MAAE,CAAE,CAAC,CAAC;MACtEwC,aAAa,CAACvB,IAAI,CAACqB,OAAO,CAAC;MAC3BG,WAAW,IAAIzC,IAAI,CAACsC,OAAO,CAAC;IAC9B,CAAC,MAAM;MACLC,YAAY,CAACtB,IAAI,CAACqB,OAAO,CAAC;IAC5B;EACF;EAEA;EACA,OAAOxC,MAAM,CAAC,CAAC,GAAGyC,YAAY,EAAE,GAAGC,aAAa,CAAC,CAAC;AACpD;AASA,SAASd,aAAaA,CAACN,KAAU;EAC/B,IAAI,CAACvB,SAAS,CAACuB,KAAK,CAAC,EAAE,MAAM,IAAI1B,mBAAmB,CAAC;IAAEgD,OAAO,EAAEtB;EAAK,CAAE,CAAC;EACxE,OAAO;IAAEiB,OAAO,EAAE,KAAK;IAAEC,OAAO,EAAEvC,MAAM,CAACqB,KAAK,CAACuB,WAAW,EAAS;EAAC,CAAE;AACxE;AAYA,SAASnB,WAAWA,CAClBJ,KAAyC,EACzC;EACEX,MAAM;EACNU;AAAK,CAIN;EAED,MAAMkB,OAAO,GAAG5B,MAAM,KAAK,IAAI;EAE/B,IAAI,CAACmC,KAAK,CAACC,OAAO,CAACzB,KAAK,CAAC,EAAE,MAAM,IAAI3B,iBAAiB,CAAC2B,KAAK,CAAC;EAC7D,IAAI,CAACiB,OAAO,IAAIjB,KAAK,CAACX,MAAM,KAAKA,MAAM,EACrC,MAAM,IAAIpB,mCAAmC,CAAC;IAC5CqB,cAAc,EAAED,MAAO;IACvBE,WAAW,EAAES,KAAK,CAACX,MAAM;IACzBc,IAAI,EAAE,GAAGJ,KAAK,CAACI,IAAI,IAAId,MAAM;GAC9B,CAAC;EAEJ,IAAIqC,YAAY,GAAG,KAAK;EACxB,MAAMlC,cAAc,GAAoB,EAAE;EAC1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,KAAK,CAACX,MAAM,EAAEO,CAAC,EAAE,EAAE;IACrC,MAAM+B,aAAa,GAAG7B,YAAY,CAAC;MAAEC,KAAK;MAAEC,KAAK,EAAEA,KAAK,CAACJ,CAAC;IAAC,CAAE,CAAC;IAC9D,IAAI+B,aAAa,CAACV,OAAO,EAAES,YAAY,GAAG,IAAI;IAC9ClC,cAAc,CAACK,IAAI,CAAC8B,aAAa,CAAC;EACpC;EAEA,IAAIV,OAAO,IAAIS,YAAY,EAAE;IAC3B,MAAMhC,IAAI,GAAGC,YAAY,CAACH,cAAc,CAAC;IACzC,IAAIyB,OAAO,EAAE;MACX,MAAM5B,MAAM,GAAGN,WAAW,CAACS,cAAc,CAACH,MAAM,EAAE;QAAET,IAAI,EAAE;MAAE,CAAE,CAAC;MAC/D,OAAO;QACLqC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE1B,cAAc,CAACH,MAAM,GAAG,CAAC,GAAGX,MAAM,CAAC,CAACW,MAAM,EAAEK,IAAI,CAAC,CAAC,GAAGL;OAC/D;IACH;IACA,IAAIqC,YAAY,EAAE,OAAO;MAAET,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAExB;IAAI,CAAE;EAC3D;EACA,OAAO;IACLuB,OAAO,EAAE,KAAK;IACdC,OAAO,EAAExC,MAAM,CAACc,cAAc,CAACoC,GAAG,CAAC,CAAC;MAAEV;IAAO,CAAE,KAAKA,OAAO,CAAC;GAC7D;AACH;AAUA,SAASL,WAAWA,CAClBb,KAAU,EACV;EAAED;AAAK,CAAoB;EAE3B,MAAM,GAAG8B,SAAS,CAAC,GAAG9B,KAAK,CAACI,IAAI,CAAC2B,KAAK,CAAC,OAAO,CAAC;EAC/C,MAAMC,SAAS,GAAGnD,IAAI,CAACoB,KAAK,CAAC;EAC7B,IAAI,CAAC6B,SAAS,EAAE;IACd,IAAIG,MAAM,GAAGhC,KAAK;IAClB;IACA;IACA,IAAI+B,SAAS,GAAG,EAAE,KAAK,CAAC,EACtBC,MAAM,GAAGrD,MAAM,CAACqD,MAAM,EAAE;MACtBC,GAAG,EAAE,OAAO;MACZrD,IAAI,EAAEsD,IAAI,CAACC,IAAI,CAAC,CAACnC,KAAK,CAACX,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG;KAChD,CAAC;IACJ,OAAO;MACL4B,OAAO,EAAE,IAAI;MACbC,OAAO,EAAExC,MAAM,CAAC,CAACC,MAAM,CAACI,WAAW,CAACgD,SAAS,EAAE;QAAEnD,IAAI,EAAE;MAAE,CAAE,CAAC,CAAC,EAAEoD,MAAM,CAAC;KACvE;EACH;EACA,IAAID,SAAS,KAAKnB,MAAM,CAACwB,QAAQ,CAACP,SAAS,CAAC,EAC1C,MAAM,IAAI3D,iCAAiC,CAAC;IAC1CmE,YAAY,EAAEzB,MAAM,CAACwB,QAAQ,CAACP,SAAS,CAAC;IACxC7B;GACD,CAAC;EACJ,OAAO;IAAEiB,OAAO,EAAE,KAAK;IAAEC,OAAO,EAAEvC,MAAM,CAACqB,KAAK,EAAE;MAAEiC,GAAG,EAAE;IAAO,CAAE;EAAC,CAAE;AACrE;AAIA,SAAS1B,UAAUA,CAACP,KAAc;EAChC,IAAI,OAAOA,KAAK,KAAK,SAAS,EAC5B,MAAM,IAAIzB,SAAS,CACjB,2BAA2ByB,KAAK,YAAY,OAAOA,KAAK,qCAAqC,CAC9F;EACH,OAAO;IAAEiB,OAAO,EAAE,KAAK;IAAEC,OAAO,EAAEvC,MAAM,CAACG,SAAS,CAACkB,KAAK,CAAC;EAAC,CAAE;AAC9D;AAIA,SAASW,YAAYA,CACnBX,KAAa,EACb;EAAES,MAAM;EAAE7B,IAAI,GAAG;AAAG,CAAkD;EAEtE,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM0D,GAAG,GAAG,EAAE,KAAKC,MAAM,CAAC3D,IAAI,CAAC,IAAI6B,MAAM,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE;IAC1D,MAAM+B,GAAG,GAAG/B,MAAM,GAAG,CAAC6B,GAAG,GAAG,EAAE,GAAG,EAAE;IACnC,IAAItC,KAAK,GAAGsC,GAAG,IAAItC,KAAK,GAAGwC,GAAG,EAC5B,MAAM,IAAIhE,sBAAsB,CAAC;MAC/B8D,GAAG,EAAEA,GAAG,CAACG,QAAQ,EAAE;MACnBD,GAAG,EAAEA,GAAG,CAACC,QAAQ,EAAE;MACnBhC,MAAM;MACN7B,IAAI,EAAEA,IAAI,GAAG,CAAC;MACdoB,KAAK,EAAEA,KAAK,CAACyC,QAAQ;KACtB,CAAC;EACN;EACA,OAAO;IACLxB,OAAO,EAAE,KAAK;IACdC,OAAO,EAAEnC,WAAW,CAACiB,KAAK,EAAE;MAC1BpB,IAAI,EAAE,EAAE;MACR6B;KACD;GACF;AACH;AAWA,SAASK,YAAYA,CAACd,KAAa;EACjC,MAAM0C,QAAQ,GAAG1D,WAAW,CAACgB,KAAK,CAAC;EACnC,MAAM2C,WAAW,GAAGT,IAAI,CAACC,IAAI,CAACvD,IAAI,CAAC8D,QAAQ,CAAC,GAAG,EAAE,CAAC;EAClD,MAAME,KAAK,GAAU,EAAE;EACvB,KAAK,IAAIhD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+C,WAAW,EAAE/C,CAAC,EAAE,EAAE;IACpCgD,KAAK,CAAC/C,IAAI,CACRlB,MAAM,CAACE,KAAK,CAAC6D,QAAQ,EAAE9C,CAAC,GAAG,EAAE,EAAE,CAACA,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;MAC5CqC,GAAG,EAAE;KACN,CAAC,CACH;EACH;EACA,OAAO;IACLhB,OAAO,EAAE,IAAI;IACbC,OAAO,EAAExC,MAAM,CAAC,CACdC,MAAM,CAACI,WAAW,CAACH,IAAI,CAAC8D,QAAQ,CAAC,EAAE;MAAE9D,IAAI,EAAE;IAAE,CAAE,CAAC,CAAC,EACjD,GAAGgE,KAAK,CACT;GACF;AACH;AASA,SAASvC,WAAWA,CAGlBL,KAAyC,EACzC;EAAED;AAAK,CAAoB;EAE3B,IAAIkB,OAAO,GAAG,KAAK;EACnB,MAAMzB,cAAc,GAAoB,EAAE;EAC1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAAC8C,UAAU,CAACxD,MAAM,EAAEO,CAAC,EAAE,EAAE;IAChD,MAAMkD,MAAM,GAAG/C,KAAK,CAAC8C,UAAU,CAACjD,CAAC,CAAC;IAClC,MAAMmD,KAAK,GAAGvB,KAAK,CAACC,OAAO,CAACzB,KAAK,CAAC,GAAGJ,CAAC,GAAGkD,MAAM,CAACE,IAAI;IACpD,MAAMrB,aAAa,GAAG7B,YAAY,CAAC;MACjCC,KAAK,EAAE+C,MAAM;MACb9C,KAAK,EAAGA,KAAa,CAAC+C,KAAM;KAC7B,CAAC;IACFvD,cAAc,CAACK,IAAI,CAAC8B,aAAa,CAAC;IAClC,IAAIA,aAAa,CAACV,OAAO,EAAEA,OAAO,GAAG,IAAI;EAC3C;EACA,OAAO;IACLA,OAAO;IACPC,OAAO,EAAED,OAAO,GACZtB,YAAY,CAACH,cAAc,CAAC,GAC5Bd,MAAM,CAACc,cAAc,CAACoC,GAAG,CAAC,CAAC;MAAEV;IAAO,CAAE,KAAKA,OAAO,CAAC;GACxD;AACH;AAIA,OAAM,SAAUhB,kBAAkBA,CAChCC,IAAY;EAEZ,MAAM8C,OAAO,GAAG9C,IAAI,CAAC+C,KAAK,CAAC,kBAAkB,CAAC;EAC9C,OAAOD,OAAO;EACV;EACA,CAACA,OAAO,CAAC,CAAC,CAAC,GAAGrC,MAAM,CAACqC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAEA,OAAO,CAAC,CAAC,CAAC,CAAC,GACpDE,SAAS;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}