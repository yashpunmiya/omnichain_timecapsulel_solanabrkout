{"ast":null,"code":"import { SliceOffsetOutOfBoundsError } from '../../errors/data.js';\nimport { isHex } from './isHex.js';\nimport { size } from './size.js';\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice(value, start, end, {\n  strict\n} = {}) {\n  if (isHex(value, {\n    strict: false\n  })) return sliceHex(value, start, end, {\n    strict\n  });\n  return sliceBytes(value, start, end, {\n    strict\n  });\n}\nfunction assertStartOffset(value, start) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1) throw new SliceOffsetOutOfBoundsError({\n    offset: start,\n    position: 'start',\n    size: size(value)\n  });\n}\nfunction assertEndOffset(value, start, end) {\n  if (typeof start === 'number' && typeof end === 'number' && size(value) !== end - start) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value)\n    });\n  }\n}\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(value_, start, end, {\n  strict\n} = {}) {\n  assertStartOffset(value_, start);\n  const value = value_.slice(start, end);\n  if (strict) assertEndOffset(value, start, end);\n  return value;\n}\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(value_, start, end, {\n  strict\n} = {}) {\n  assertStartOffset(value_, start);\n  const value = `0x${value_.replace('0x', '').slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\n  if (strict) assertEndOffset(value, start, end);\n  return value;\n}","map":{"version":3,"names":["SliceOffsetOutOfBoundsError","isHex","size","slice","value","start","end","strict","sliceHex","sliceBytes","assertStartOffset","offset","position","assertEndOffset","value_","replace","length"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\data\\slice.ts"],"sourcesContent":["import {\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\nimport { type SizeErrorType, size } from './size.js'\n\nexport type SliceReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type SliceErrorType =\n  | IsHexErrorType\n  | SliceBytesErrorType\n  | SliceHexErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice<value extends ByteArray | Hex>(\n  value: value,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): SliceReturnType<value> {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value as Hex, start, end, {\n      strict,\n    }) as SliceReturnType<value>\n  return sliceBytes(value as ByteArray, start, end, {\n    strict,\n  }) as SliceReturnType<value>\n}\n\nexport type AssertStartOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertStartOffset(value: Hex | ByteArray, start?: number | undefined) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: size(value),\n    })\n}\n\nexport type AssertEndOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertEndOffset(\n  value: Hex | ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n) {\n  if (\n    typeof start === 'number' &&\n    typeof end === 'number' &&\n    size(value) !== end - start\n  ) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value),\n    })\n  }\n}\n\nexport type SliceBytesErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(\n  value_: ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): ByteArray {\n  assertStartOffset(value_, start)\n  const value = value_.slice(start, end)\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n\nexport type SliceHexErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(\n  value_: Hex,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): Hex {\n  assertStartOffset(value_, start)\n  const value = `0x${value_\n    .replace('0x', '')\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n"],"mappings":"AAAA,SACEA,2BAA2B,QAEtB,sBAAsB;AAI7B,SAA8BC,KAAK,QAAQ,YAAY;AACvD,SAA6BC,IAAI,QAAQ,WAAW;AAYpD;;;;;;;AAOA,OAAM,SAAUC,KAAKA,CACnBC,KAAY,EACZC,KAA0B,EAC1BC,GAAwB,EACxB;EAAEC;AAAM,IAAuC,EAAE;EAEjD,IAAIN,KAAK,CAACG,KAAK,EAAE;IAAEG,MAAM,EAAE;EAAK,CAAE,CAAC,EACjC,OAAOC,QAAQ,CAACJ,KAAY,EAAEC,KAAK,EAAEC,GAAG,EAAE;IACxCC;GACD,CAA2B;EAC9B,OAAOE,UAAU,CAACL,KAAkB,EAAEC,KAAK,EAAEC,GAAG,EAAE;IAChDC;GACD,CAA2B;AAC9B;AAOA,SAASG,iBAAiBA,CAACN,KAAsB,EAAEC,KAA0B;EAC3E,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGH,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,EACnE,MAAM,IAAIJ,2BAA2B,CAAC;IACpCW,MAAM,EAAEN,KAAK;IACbO,QAAQ,EAAE,OAAO;IACjBV,IAAI,EAAEA,IAAI,CAACE,KAAK;GACjB,CAAC;AACN;AAOA,SAASS,eAAeA,CACtBT,KAAsB,EACtBC,KAA0B,EAC1BC,GAAwB;EAExB,IACE,OAAOD,KAAK,KAAK,QAAQ,IACzB,OAAOC,GAAG,KAAK,QAAQ,IACvBJ,IAAI,CAACE,KAAK,CAAC,KAAKE,GAAG,GAAGD,KAAK,EAC3B;IACA,MAAM,IAAIL,2BAA2B,CAAC;MACpCW,MAAM,EAAEL,GAAG;MACXM,QAAQ,EAAE,KAAK;MACfV,IAAI,EAAEA,IAAI,CAACE,KAAK;KACjB,CAAC;EACJ;AACF;AAOA;;;;;;;AAOA,OAAM,SAAUK,UAAUA,CACxBK,MAAiB,EACjBT,KAA0B,EAC1BC,GAAwB,EACxB;EAAEC;AAAM,IAAuC,EAAE;EAEjDG,iBAAiB,CAACI,MAAM,EAAET,KAAK,CAAC;EAChC,MAAMD,KAAK,GAAGU,MAAM,CAACX,KAAK,CAACE,KAAK,EAAEC,GAAG,CAAC;EACtC,IAAIC,MAAM,EAAEM,eAAe,CAACT,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC;EAC9C,OAAOF,KAAK;AACd;AAOA;;;;;;;AAOA,OAAM,SAAUI,QAAQA,CACtBM,MAAW,EACXT,KAA0B,EAC1BC,GAAwB,EACxB;EAAEC;AAAM,IAAuC,EAAE;EAEjDG,iBAAiB,CAACI,MAAM,EAAET,KAAK,CAAC;EAChC,MAAMD,KAAK,GAAG,KAAKU,MAAM,CACtBC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACjBZ,KAAK,CAAC,CAACE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,CAACC,GAAG,IAAIQ,MAAM,CAACE,MAAM,IAAI,CAAC,CAAC,EAAW;EACjE,IAAIT,MAAM,EAAEM,eAAe,CAACT,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC;EAC9C,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}