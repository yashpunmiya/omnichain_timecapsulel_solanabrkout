{"ast":null,"code":"import { SizeExceedsPaddingSizeError } from '../../errors/data.js';\nexport function pad(hexOrBytes, {\n  dir,\n  size = 32\n} = {}) {\n  if (typeof hexOrBytes === 'string') return padHex(hexOrBytes, {\n    dir,\n    size\n  });\n  return padBytes(hexOrBytes, {\n    dir,\n    size\n  });\n}\nexport function padHex(hex_, {\n  dir,\n  size = 32\n} = {}) {\n  if (size === null) return hex_;\n  const hex = hex_.replace('0x', '');\n  if (hex.length > size * 2) throw new SizeExceedsPaddingSizeError({\n    size: Math.ceil(hex.length / 2),\n    targetSize: size,\n    type: 'hex'\n  });\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n}\nexport function padBytes(bytes, {\n  dir,\n  size = 32\n} = {}) {\n  if (size === null) return bytes;\n  if (bytes.length > size) throw new SizeExceedsPaddingSizeError({\n    size: bytes.length,\n    targetSize: size,\n    type: 'bytes'\n  });\n  const paddedBytes = new Uint8Array(size);\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right';\n    paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n  }\n  return paddedBytes;\n}\n//# sourceMappingURL=pad.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}