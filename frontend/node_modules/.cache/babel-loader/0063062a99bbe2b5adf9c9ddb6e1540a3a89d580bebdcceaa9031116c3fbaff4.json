{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsAsyncIterator = IsAsyncIterator;\nexports.IsIterator = IsIterator;\nexports.IsStandardObject = IsStandardObject;\nexports.IsInstanceObject = IsInstanceObject;\nexports.IsPromise = IsPromise;\nexports.IsDate = IsDate;\nexports.IsMap = IsMap;\nexports.IsSet = IsSet;\nexports.IsRegExp = IsRegExp;\nexports.IsTypedArray = IsTypedArray;\nexports.IsInt8Array = IsInt8Array;\nexports.IsUint8Array = IsUint8Array;\nexports.IsUint8ClampedArray = IsUint8ClampedArray;\nexports.IsInt16Array = IsInt16Array;\nexports.IsUint16Array = IsUint16Array;\nexports.IsInt32Array = IsInt32Array;\nexports.IsUint32Array = IsUint32Array;\nexports.IsFloat32Array = IsFloat32Array;\nexports.IsFloat64Array = IsFloat64Array;\nexports.IsBigInt64Array = IsBigInt64Array;\nexports.IsBigUint64Array = IsBigUint64Array;\nexports.HasPropertyKey = HasPropertyKey;\nexports.IsObject = IsObject;\nexports.IsArray = IsArray;\nexports.IsUndefined = IsUndefined;\nexports.IsNull = IsNull;\nexports.IsBoolean = IsBoolean;\nexports.IsNumber = IsNumber;\nexports.IsInteger = IsInteger;\nexports.IsBigInt = IsBigInt;\nexports.IsString = IsString;\nexports.IsFunction = IsFunction;\nexports.IsSymbol = IsSymbol;\nexports.IsValueType = IsValueType;\n// --------------------------------------------------------------------------\n// Iterators\n// --------------------------------------------------------------------------\n/** Returns true if this value is an async iterator */\nfunction IsAsyncIterator(value) {\n  return IsObject(value) && Symbol.asyncIterator in value;\n}\n/** Returns true if this value is an iterator */\nfunction IsIterator(value) {\n  return IsObject(value) && Symbol.iterator in value;\n}\n// --------------------------------------------------------------------------\n// Object Instances\n// --------------------------------------------------------------------------\n/** Returns true if this value is not an instance of a class */\nfunction IsStandardObject(value) {\n  return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);\n}\n/** Returns true if this value is an instance of a class */\nfunction IsInstanceObject(value) {\n  return IsObject(value) && !IsArray(value) && IsFunction(value.constructor) && value.constructor.name !== 'Object';\n}\n// --------------------------------------------------------------------------\n// JavaScript\n// --------------------------------------------------------------------------\n/** Returns true if this value is a Promise */\nfunction IsPromise(value) {\n  return value instanceof Promise;\n}\n/** Returns true if this value is a Date */\nfunction IsDate(value) {\n  return value instanceof Date && Number.isFinite(value.getTime());\n}\n/** Returns true if this value is an instance of Map<K, T> */\nfunction IsMap(value) {\n  return value instanceof globalThis.Map;\n}\n/** Returns true if this value is an instance of Set<T> */\nfunction IsSet(value) {\n  return value instanceof globalThis.Set;\n}\n/** Returns true if this value is RegExp */\nfunction IsRegExp(value) {\n  return value instanceof globalThis.RegExp;\n}\n/** Returns true if this value is a typed array */\nfunction IsTypedArray(value) {\n  return ArrayBuffer.isView(value);\n}\n/** Returns true if the value is a Int8Array */\nfunction IsInt8Array(value) {\n  return value instanceof globalThis.Int8Array;\n}\n/** Returns true if the value is a Uint8Array */\nfunction IsUint8Array(value) {\n  return value instanceof globalThis.Uint8Array;\n}\n/** Returns true if the value is a Uint8ClampedArray */\nfunction IsUint8ClampedArray(value) {\n  return value instanceof globalThis.Uint8ClampedArray;\n}\n/** Returns true if the value is a Int16Array */\nfunction IsInt16Array(value) {\n  return value instanceof globalThis.Int16Array;\n}\n/** Returns true if the value is a Uint16Array */\nfunction IsUint16Array(value) {\n  return value instanceof globalThis.Uint16Array;\n}\n/** Returns true if the value is a Int32Array */\nfunction IsInt32Array(value) {\n  return value instanceof globalThis.Int32Array;\n}\n/** Returns true if the value is a Uint32Array */\nfunction IsUint32Array(value) {\n  return value instanceof globalThis.Uint32Array;\n}\n/** Returns true if the value is a Float32Array */\nfunction IsFloat32Array(value) {\n  return value instanceof globalThis.Float32Array;\n}\n/** Returns true if the value is a Float64Array */\nfunction IsFloat64Array(value) {\n  return value instanceof globalThis.Float64Array;\n}\n/** Returns true if the value is a BigInt64Array */\nfunction IsBigInt64Array(value) {\n  return value instanceof globalThis.BigInt64Array;\n}\n/** Returns true if the value is a BigUint64Array */\nfunction IsBigUint64Array(value) {\n  return value instanceof globalThis.BigUint64Array;\n}\n// --------------------------------------------------------------------------\n// PropertyKey\n// --------------------------------------------------------------------------\n/** Returns true if this value has this property key */\nfunction HasPropertyKey(value, key) {\n  return key in value;\n}\n// --------------------------------------------------------------------------\n// Standard\n// --------------------------------------------------------------------------\n/** Returns true of this value is an object type */\nfunction IsObject(value) {\n  return value !== null && typeof value === 'object';\n}\n/** Returns true if this value is an array, but not a typed array */\nfunction IsArray(value) {\n  return Array.isArray(value) && !ArrayBuffer.isView(value);\n}\n/** Returns true if this value is an undefined */\nfunction IsUndefined(value) {\n  return value === undefined;\n}\n/** Returns true if this value is an null */\nfunction IsNull(value) {\n  return value === null;\n}\n/** Returns true if this value is an boolean */\nfunction IsBoolean(value) {\n  return typeof value === 'boolean';\n}\n/** Returns true if this value is an number */\nfunction IsNumber(value) {\n  return typeof value === 'number';\n}\n/** Returns true if this value is an integer */\nfunction IsInteger(value) {\n  return Number.isInteger(value);\n}\n/** Returns true if this value is bigint */\nfunction IsBigInt(value) {\n  return typeof value === 'bigint';\n}\n/** Returns true if this value is string */\nfunction IsString(value) {\n  return typeof value === 'string';\n}\n/** Returns true if this value is a function */\nfunction IsFunction(value) {\n  return typeof value === 'function';\n}\n/** Returns true if this value is a symbol */\nfunction IsSymbol(value) {\n  return typeof value === 'symbol';\n}\n/** Returns true if this value is a value type such as number, string, boolean */\nfunction IsValueType(value) {\n  // prettier-ignore\n  return IsBigInt(value) || IsBoolean(value) || IsNull(value) || IsNumber(value) || IsString(value) || IsSymbol(value) || IsUndefined(value);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}