{"ast":null,"code":"import { fallback, http } from 'viem';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { ChainController, StorageUtil } from '@reown/appkit-controllers';\nimport { PresetsUtil } from './PresetsUtil.js';\nconst RPC_URL_HOST = 'rpc.walletconnect.org';\nexport function getBlockchainApiRpcUrl(caipNetworkId, projectId) {\n  const url = new URL('https://rpc.walletconnect.org/v1/');\n  url.searchParams.set('chainId', caipNetworkId);\n  url.searchParams.set('projectId', projectId);\n  return url.toString();\n}\nconst WC_HTTP_RPC_SUPPORTED_CHAINS = ['near:mainnet', 'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp', 'eip155:1101', 'eip155:56', 'eip155:42161', 'eip155:7777777', 'eip155:59144', 'eip155:324', 'solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1', 'eip155:5000', 'solana:4sgjmw1sunhzsxgspuhpqldx6wiyjntz', 'eip155:80084', 'eip155:5003', 'eip155:100', 'eip155:8453', 'eip155:42220', 'eip155:1313161555', 'eip155:17000', 'eip155:1', 'eip155:300', 'eip155:1313161554', 'eip155:1329', 'eip155:84532', 'eip155:421614', 'eip155:11155111', 'eip155:8217', 'eip155:43114', 'solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z', 'eip155:999999999', 'eip155:11155420', 'eip155:80002', 'eip155:97', 'eip155:43113', 'eip155:137', 'eip155:10', 'eip155:1301', 'bip122:000000000019d6689c085ae165831e93', 'bip122:000000000933ea01ad0ee984209779ba'];\nexport const CaipNetworksUtil = {\n  extendRpcUrlWithProjectId(rpcUrl, projectId) {\n    let isReownUrl = false;\n    try {\n      const url = new URL(rpcUrl);\n      isReownUrl = url.host === RPC_URL_HOST;\n    } catch (e) {\n      isReownUrl = false;\n    }\n    if (isReownUrl) {\n      const url = new URL(rpcUrl);\n      if (!url.searchParams.has('projectId')) {\n        url.searchParams.set('projectId', projectId);\n      }\n      return url.toString();\n    }\n    return rpcUrl;\n  },\n  isCaipNetwork(network) {\n    return 'chainNamespace' in network && 'caipNetworkId' in network;\n  },\n  getChainNamespace(network) {\n    if (this.isCaipNetwork(network)) {\n      return network.chainNamespace;\n    }\n    return ConstantsUtil.CHAIN.EVM;\n  },\n  getCaipNetworkId(network) {\n    if (this.isCaipNetwork(network)) {\n      return network.caipNetworkId;\n    }\n    return `${ConstantsUtil.CHAIN.EVM}:${network.id}`;\n  },\n  getDefaultRpcUrl(caipNetwork, caipNetworkId, projectId) {\n    const defaultRpcUrl = caipNetwork.rpcUrls?.default?.http?.[0];\n    if (WC_HTTP_RPC_SUPPORTED_CHAINS.includes(caipNetworkId)) {\n      return getBlockchainApiRpcUrl(caipNetworkId, projectId);\n    }\n    return defaultRpcUrl || '';\n  },\n  extendCaipNetwork(caipNetwork, {\n    customNetworkImageUrls,\n    projectId,\n    customRpcUrls\n  }) {\n    const chainNamespace = this.getChainNamespace(caipNetwork);\n    const caipNetworkId = this.getCaipNetworkId(caipNetwork);\n    const networkDefaultRpcUrl = caipNetwork.rpcUrls.default.http?.[0];\n    const reownRpcUrl = this.getDefaultRpcUrl(caipNetwork, caipNetworkId, projectId);\n    const chainDefaultRpcUrl = caipNetwork?.rpcUrls?.['chainDefault']?.http?.[0] || networkDefaultRpcUrl;\n    const customRpcUrlsOfNetwork = customRpcUrls?.[caipNetworkId]?.map(i => i.url) || [];\n    const rpcUrls = [...customRpcUrlsOfNetwork, reownRpcUrl];\n    const rpcUrlsWithoutReown = [...customRpcUrlsOfNetwork];\n    if (chainDefaultRpcUrl && !rpcUrlsWithoutReown.includes(chainDefaultRpcUrl)) {\n      rpcUrlsWithoutReown.push(chainDefaultRpcUrl);\n    }\n    return {\n      ...caipNetwork,\n      chainNamespace,\n      caipNetworkId,\n      assets: {\n        imageId: PresetsUtil.NetworkImageIds[caipNetwork.id],\n        imageUrl: customNetworkImageUrls?.[caipNetwork.id]\n      },\n      rpcUrls: {\n        ...caipNetwork.rpcUrls,\n        default: {\n          http: rpcUrls\n        },\n        chainDefault: {\n          http: rpcUrlsWithoutReown\n        }\n      }\n    };\n  },\n  extendCaipNetworks(caipNetworks, {\n    customNetworkImageUrls,\n    projectId,\n    customRpcUrls\n  }) {\n    return caipNetworks.map(caipNetwork => CaipNetworksUtil.extendCaipNetwork(caipNetwork, {\n      customNetworkImageUrls,\n      customRpcUrls,\n      projectId\n    }));\n  },\n  getViemTransport(caipNetwork, projectId, customRpcUrls) {\n    const transports = [];\n    customRpcUrls?.forEach(rpcUrl => {\n      transports.push(http(rpcUrl.url, rpcUrl.config));\n    });\n    if (WC_HTTP_RPC_SUPPORTED_CHAINS.includes(caipNetwork.caipNetworkId)) {\n      const reownRpcUrl = this.getDefaultRpcUrl(caipNetwork, caipNetwork.caipNetworkId, projectId);\n      transports.push(http(reownRpcUrl, {\n        fetchOptions: {\n          headers: {\n            'Content-Type': 'text/plain'\n          }\n        }\n      }));\n    }\n    return fallback(transports);\n  },\n  extendWagmiTransports(caipNetwork, projectId, transport) {\n    if (WC_HTTP_RPC_SUPPORTED_CHAINS.includes(caipNetwork.caipNetworkId)) {\n      const reownRpcUrl = this.getDefaultRpcUrl(caipNetwork, caipNetwork.caipNetworkId, projectId);\n      return fallback([transport, http(reownRpcUrl)]);\n    }\n    return transport;\n  },\n  getUnsupportedNetwork(caipNetworkId) {\n    return {\n      id: caipNetworkId.split(':')[1],\n      caipNetworkId,\n      name: ConstantsUtil.UNSUPPORTED_NETWORK_NAME,\n      chainNamespace: caipNetworkId.split(':')[0],\n      nativeCurrency: {\n        name: '',\n        decimals: 0,\n        symbol: ''\n      },\n      rpcUrls: {\n        default: {\n          http: []\n        }\n      }\n    };\n  },\n  getCaipNetworkFromStorage(defaultCaipNetwork) {\n    const caipNetworkIdFromStorage = StorageUtil.getActiveCaipNetworkId();\n    const caipNetworks = ChainController.getAllRequestedCaipNetworks();\n    const availableNamespaces = Array.from(ChainController.state.chains?.keys() || []);\n    const namespace = caipNetworkIdFromStorage?.split(':')[0];\n    const isNamespaceAvailable = namespace ? availableNamespaces.includes(namespace) : false;\n    const caipNetwork = caipNetworks?.find(cn => cn.caipNetworkId === caipNetworkIdFromStorage);\n    const isUnsupportedNetwork = isNamespaceAvailable && !caipNetwork && caipNetworkIdFromStorage;\n    if (isUnsupportedNetwork) {\n      return this.getUnsupportedNetwork(caipNetworkIdFromStorage);\n    }\n    if (caipNetwork) {\n      return caipNetwork;\n    }\n    if (defaultCaipNetwork) {\n      return defaultCaipNetwork;\n    }\n    return caipNetworks?.[0];\n  }\n};\n//# sourceMappingURL=CaipNetworkUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}