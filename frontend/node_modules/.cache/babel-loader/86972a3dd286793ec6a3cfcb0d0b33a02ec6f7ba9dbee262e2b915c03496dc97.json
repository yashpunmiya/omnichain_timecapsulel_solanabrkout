{"ast":null,"code":"import { defineFormatter } from './formatter.js';\nimport { formatTransaction } from './transaction.js';\nexport function formatBlock(block) {\n  const transactions = (block.transactions ?? []).map(transaction => {\n    if (typeof transaction === 'string') return transaction;\n    return formatTransaction(transaction);\n  });\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : undefined,\n    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n    hash: block.hash ? block.hash : null,\n    logsBloom: block.logsBloom ? block.logsBloom : null,\n    nonce: block.nonce ? block.nonce : null,\n    number: block.number ? BigInt(block.number) : null,\n    size: block.size ? BigInt(block.size) : undefined,\n    timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n    transactions,\n    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null\n  };\n}\nexport const defineBlock = /*#__PURE__*/defineFormatter('block', formatBlock);","map":{"version":3,"names":["defineFormatter","formatTransaction","formatBlock","block","transactions","map","transaction","baseFeePerGas","BigInt","blobGasUsed","undefined","difficulty","excessBlobGas","gasLimit","gasUsed","hash","logsBloom","nonce","number","size","timestamp","totalDifficulty","defineBlock"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\formatters\\block.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Block, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { type FormattedTransaction, formatTransaction } from './transaction.js'\n\ntype BlockPendingDependencies = 'hash' | 'logsBloom' | 'nonce' | 'number'\n\nexport type FormattedBlock<\n  chain extends Chain | undefined = undefined,\n  includeTransactions extends boolean = boolean,\n  blockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    chain,\n    'block',\n    Block<bigint, includeTransactions>\n  >,\n  _ExcludedPendingDependencies extends string = BlockPendingDependencies &\n    ExtractChainFormatterExclude<chain, 'block'>,\n  _Formatted = Omit<_FormatterReturnType, BlockPendingDependencies> & {\n    [_key in _ExcludedPendingDependencies]: never\n  } & Pick<\n      Block<bigint, includeTransactions, blockTag>,\n      BlockPendingDependencies\n    >,\n  _Transactions = includeTransactions extends true\n    ? Prettify<FormattedTransaction<chain, blockTag>>[]\n    : Hash[],\n> = Omit<_Formatted, 'transactions'> & {\n  transactions: _Transactions\n}\n\nexport type FormatBlockErrorType = ErrorType\n\nexport function formatBlock(block: ExactPartial<RpcBlock>) {\n  const transactions = (block.transactions ?? []).map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return formatTransaction(transaction)\n  })\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas\n      ? BigInt(block.excessBlobGas)\n      : undefined,\n    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n    hash: block.hash ? block.hash : null,\n    logsBloom: block.logsBloom ? block.logsBloom : null,\n    nonce: block.nonce ? block.nonce : null,\n    number: block.number ? BigInt(block.number) : null,\n    size: block.size ? BigInt(block.size) : undefined,\n    timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n    transactions,\n    totalDifficulty: block.totalDifficulty\n      ? BigInt(block.totalDifficulty)\n      : null,\n  } as Block\n}\n\nexport type DefineBlockErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock)\n"],"mappings":"AAWA,SAAwCA,eAAe,QAAQ,gBAAgB;AAC/E,SAAoCC,iBAAiB,QAAQ,kBAAkB;AA8B/E,OAAM,SAAUC,WAAWA,CAACC,KAA6B;EACvD,MAAMC,YAAY,GAAG,CAACD,KAAK,CAACC,YAAY,IAAI,EAAE,EAAEC,GAAG,CAAEC,WAAW,IAAI;IAClE,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;IACvD,OAAOL,iBAAiB,CAACK,WAAW,CAAC;EACvC,CAAC,CAAC;EACF,OAAO;IACL,GAAGH,KAAK;IACRI,aAAa,EAAEJ,KAAK,CAACI,aAAa,GAAGC,MAAM,CAACL,KAAK,CAACI,aAAa,CAAC,GAAG,IAAI;IACvEE,WAAW,EAAEN,KAAK,CAACM,WAAW,GAAGD,MAAM,CAACL,KAAK,CAACM,WAAW,CAAC,GAAGC,SAAS;IACtEC,UAAU,EAAER,KAAK,CAACQ,UAAU,GAAGH,MAAM,CAACL,KAAK,CAACQ,UAAU,CAAC,GAAGD,SAAS;IACnEE,aAAa,EAAET,KAAK,CAACS,aAAa,GAC9BJ,MAAM,CAACL,KAAK,CAACS,aAAa,CAAC,GAC3BF,SAAS;IACbG,QAAQ,EAAEV,KAAK,CAACU,QAAQ,GAAGL,MAAM,CAACL,KAAK,CAACU,QAAQ,CAAC,GAAGH,SAAS;IAC7DI,OAAO,EAAEX,KAAK,CAACW,OAAO,GAAGN,MAAM,CAACL,KAAK,CAACW,OAAO,CAAC,GAAGJ,SAAS;IAC1DK,IAAI,EAAEZ,KAAK,CAACY,IAAI,GAAGZ,KAAK,CAACY,IAAI,GAAG,IAAI;IACpCC,SAAS,EAAEb,KAAK,CAACa,SAAS,GAAGb,KAAK,CAACa,SAAS,GAAG,IAAI;IACnDC,KAAK,EAAEd,KAAK,CAACc,KAAK,GAAGd,KAAK,CAACc,KAAK,GAAG,IAAI;IACvCC,MAAM,EAAEf,KAAK,CAACe,MAAM,GAAGV,MAAM,CAACL,KAAK,CAACe,MAAM,CAAC,GAAG,IAAI;IAClDC,IAAI,EAAEhB,KAAK,CAACgB,IAAI,GAAGX,MAAM,CAACL,KAAK,CAACgB,IAAI,CAAC,GAAGT,SAAS;IACjDU,SAAS,EAAEjB,KAAK,CAACiB,SAAS,GAAGZ,MAAM,CAACL,KAAK,CAACiB,SAAS,CAAC,GAAGV,SAAS;IAChEN,YAAY;IACZiB,eAAe,EAAElB,KAAK,CAACkB,eAAe,GAClCb,MAAM,CAACL,KAAK,CAACkB,eAAe,CAAC,GAC7B;GACI;AACZ;AAIA,OAAO,MAAMC,WAAW,GAAG,aAActB,eAAe,CAAC,OAAO,EAAEE,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}