{"ast":null,"code":"/* eslint-disable no-console */\nimport { SafeLocalStorage, SafeLocalStorageKeys, getSafeConnectorIdKey } from '@reown/appkit-common';\n// -- Utility -----------------------------------------------------------------\nexport const StorageUtil = {\n  // Cache expiry in milliseconds\n  cacheExpiry: {\n    portfolio: 30000,\n    nativeBalance: 30000,\n    ens: 300000,\n    identity: 300000\n  },\n  isCacheExpired(timestamp, cacheExpiry) {\n    return Date.now() - timestamp > cacheExpiry;\n  },\n  getActiveNetworkProps() {\n    const namespace = StorageUtil.getActiveNamespace();\n    const caipNetworkId = StorageUtil.getActiveCaipNetworkId();\n    const stringChainId = caipNetworkId ? caipNetworkId.split(':')[1] : undefined;\n    // eslint-disable-next-line no-nested-ternary\n    const chainId = stringChainId ? isNaN(Number(stringChainId)) ? stringChainId : Number(stringChainId) : undefined;\n    return {\n      namespace,\n      caipNetworkId,\n      chainId\n    };\n  },\n  setWalletConnectDeepLink({\n    name,\n    href\n  }) {\n    try {\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.DEEPLINK_CHOICE, JSON.stringify({\n        href,\n        name\n      }));\n    } catch {\n      console.info('Unable to set WalletConnect deep link');\n    }\n  },\n  getWalletConnectDeepLink() {\n    try {\n      const deepLink = SafeLocalStorage.getItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);\n      if (deepLink) {\n        return JSON.parse(deepLink);\n      }\n    } catch {\n      console.info('Unable to get WalletConnect deep link');\n    }\n    return undefined;\n  },\n  deleteWalletConnectDeepLink() {\n    try {\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);\n    } catch {\n      console.info('Unable to delete WalletConnect deep link');\n    }\n  },\n  setActiveNamespace(namespace) {\n    try {\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE, namespace);\n    } catch {\n      console.info('Unable to set active namespace');\n    }\n  },\n  setActiveCaipNetworkId(caipNetworkId) {\n    try {\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID, caipNetworkId);\n      StorageUtil.setActiveNamespace(caipNetworkId.split(':')[0]);\n    } catch {\n      console.info('Unable to set active caip network id');\n    }\n  },\n  getActiveCaipNetworkId() {\n    try {\n      return SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);\n    } catch {\n      console.info('Unable to get active caip network id');\n      return undefined;\n    }\n  },\n  deleteActiveCaipNetworkId() {\n    try {\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);\n    } catch {\n      console.info('Unable to delete active caip network id');\n    }\n  },\n  deleteConnectedConnectorId(namespace) {\n    try {\n      const key = getSafeConnectorIdKey(namespace);\n      SafeLocalStorage.removeItem(key);\n    } catch {\n      console.info('Unable to delete connected connector id');\n    }\n  },\n  setAppKitRecent(wallet) {\n    try {\n      const recentWallets = StorageUtil.getRecentWallets();\n      const exists = recentWallets.find(w => w.id === wallet.id);\n      if (!exists) {\n        recentWallets.unshift(wallet);\n        if (recentWallets.length > 2) {\n          recentWallets.pop();\n        }\n        SafeLocalStorage.setItem(SafeLocalStorageKeys.RECENT_WALLETS, JSON.stringify(recentWallets));\n      }\n    } catch {\n      console.info('Unable to set AppKit recent');\n    }\n  },\n  getRecentWallets() {\n    try {\n      const recent = SafeLocalStorage.getItem(SafeLocalStorageKeys.RECENT_WALLETS);\n      return recent ? JSON.parse(recent) : [];\n    } catch {\n      console.info('Unable to get AppKit recent');\n    }\n    return [];\n  },\n  setConnectedConnectorId(namespace, connectorId) {\n    try {\n      const key = getSafeConnectorIdKey(namespace);\n      SafeLocalStorage.setItem(key, connectorId);\n    } catch {\n      console.info('Unable to set Connected Connector Id');\n    }\n  },\n  getActiveNamespace() {\n    try {\n      const activeNamespace = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE);\n      return activeNamespace;\n    } catch {\n      console.info('Unable to get active namespace');\n    }\n    return undefined;\n  },\n  getConnectedConnectorId(namespace) {\n    if (!namespace) {\n      return undefined;\n    }\n    try {\n      const key = getSafeConnectorIdKey(namespace);\n      return SafeLocalStorage.getItem(key);\n    } catch (e) {\n      console.info('Unable to get connected connector id in namespace ', namespace);\n    }\n    return undefined;\n  },\n  setConnectedSocialProvider(socialProvider) {\n    try {\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_SOCIAL, socialProvider);\n    } catch {\n      console.info('Unable to set connected social provider');\n    }\n  },\n  getConnectedSocialProvider() {\n    try {\n      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);\n    } catch {\n      console.info('Unable to get connected social provider');\n    }\n    return undefined;\n  },\n  deleteConnectedSocialProvider() {\n    try {\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);\n    } catch {\n      console.info('Unable to delete connected social provider');\n    }\n  },\n  getConnectedSocialUsername() {\n    try {\n      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL_USERNAME);\n    } catch {\n      console.info('Unable to get connected social username');\n    }\n    return undefined;\n  },\n  getStoredActiveCaipNetworkId() {\n    const storedCaipNetworkId = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);\n    const networkId = storedCaipNetworkId?.split(':')?.[1];\n    return networkId;\n  },\n  setConnectionStatus(status) {\n    try {\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTION_STATUS, status);\n    } catch {\n      console.info('Unable to set connection status');\n    }\n  },\n  getConnectionStatus() {\n    try {\n      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTION_STATUS);\n    } catch {\n      return undefined;\n    }\n  },\n  getConnectedNamespaces() {\n    try {\n      const namespaces = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES);\n      if (!namespaces?.length) {\n        return [];\n      }\n      return namespaces.split(',');\n    } catch {\n      return [];\n    }\n  },\n  setConnectedNamespaces(namespaces) {\n    try {\n      const uniqueNamespaces = Array.from(new Set(namespaces));\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES, uniqueNamespaces.join(','));\n    } catch {\n      console.info('Unable to set namespaces in storage');\n    }\n  },\n  addConnectedNamespace(namespace) {\n    try {\n      const namespaces = StorageUtil.getConnectedNamespaces();\n      if (!namespaces.includes(namespace)) {\n        namespaces.push(namespace);\n        StorageUtil.setConnectedNamespaces(namespaces);\n      }\n    } catch {\n      console.info('Unable to add connected namespace');\n    }\n  },\n  removeConnectedNamespace(namespace) {\n    try {\n      const namespaces = StorageUtil.getConnectedNamespaces();\n      const index = namespaces.indexOf(namespace);\n      if (index > -1) {\n        namespaces.splice(index, 1);\n        StorageUtil.setConnectedNamespaces(namespaces);\n      }\n    } catch {\n      console.info('Unable to remove connected namespace');\n    }\n  },\n  getTelegramSocialProvider() {\n    try {\n      return SafeLocalStorage.getItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);\n    } catch {\n      console.info('Unable to get telegram social provider');\n      return null;\n    }\n  },\n  setTelegramSocialProvider(socialProvider) {\n    try {\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER, socialProvider);\n    } catch {\n      console.info('Unable to set telegram social provider');\n    }\n  },\n  removeTelegramSocialProvider() {\n    try {\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);\n    } catch {\n      console.info('Unable to remove telegram social provider');\n    }\n  },\n  getBalanceCache() {\n    let cache = {};\n    try {\n      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);\n      cache = result ? JSON.parse(result) : {};\n    } catch {\n      console.info('Unable to get balance cache');\n    }\n    return cache;\n  },\n  removeAddressFromBalanceCache(caipAddress) {\n    try {\n      const cache = StorageUtil.getBalanceCache();\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify({\n        ...cache,\n        [caipAddress]: undefined\n      }));\n    } catch {\n      console.info('Unable to remove address from balance cache', caipAddress);\n    }\n  },\n  getBalanceCacheForCaipAddress(caipAddress) {\n    try {\n      const cache = StorageUtil.getBalanceCache();\n      const balanceCache = cache[caipAddress];\n      // We want to discard cache if it's older than the cache expiry\n      if (balanceCache && !this.isCacheExpired(balanceCache.timestamp, this.cacheExpiry.portfolio)) {\n        return balanceCache.balance;\n      }\n      StorageUtil.removeAddressFromBalanceCache(caipAddress);\n    } catch {\n      console.info('Unable to get balance cache for address', caipAddress);\n    }\n    return undefined;\n  },\n  updateBalanceCache(params) {\n    try {\n      const cache = StorageUtil.getBalanceCache();\n      cache[params.caipAddress] = params;\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify(cache));\n    } catch {\n      console.info('Unable to update balance cache', params);\n    }\n  },\n  getNativeBalanceCache() {\n    let cache = {};\n    try {\n      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);\n      cache = result ? JSON.parse(result) : {};\n    } catch {\n      console.info('Unable to get balance cache');\n    }\n    return cache;\n  },\n  removeAddressFromNativeBalanceCache(caipAddress) {\n    try {\n      const cache = StorageUtil.getBalanceCache();\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify({\n        ...cache,\n        [caipAddress]: undefined\n      }));\n    } catch {\n      console.info('Unable to remove address from balance cache', caipAddress);\n    }\n  },\n  getNativeBalanceCacheForCaipAddress(caipAddress) {\n    try {\n      const cache = StorageUtil.getNativeBalanceCache();\n      const nativeBalanceCache = cache[caipAddress];\n      // We want to discard cache if it's older than the cache expiry\n      if (nativeBalanceCache && !this.isCacheExpired(nativeBalanceCache.timestamp, this.cacheExpiry.nativeBalance)) {\n        return nativeBalanceCache;\n      }\n      console.info('Discarding cache for address', caipAddress);\n      StorageUtil.removeAddressFromBalanceCache(caipAddress);\n    } catch {\n      console.info('Unable to get balance cache for address', caipAddress);\n    }\n    return undefined;\n  },\n  updateNativeBalanceCache(params) {\n    try {\n      const cache = StorageUtil.getNativeBalanceCache();\n      cache[params.caipAddress] = params;\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify(cache));\n    } catch {\n      console.info('Unable to update balance cache', params);\n    }\n  },\n  getEnsCache() {\n    let cache = {};\n    try {\n      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.ENS_CACHE);\n      cache = result ? JSON.parse(result) : {};\n    } catch {\n      console.info('Unable to get ens name cache');\n    }\n    return cache;\n  },\n  getEnsFromCacheForAddress(address) {\n    try {\n      const cache = StorageUtil.getEnsCache();\n      const ensCache = cache[address];\n      // We want to discard cache if it's older than the cache expiry\n      if (ensCache && !this.isCacheExpired(ensCache.timestamp, this.cacheExpiry.ens)) {\n        return ensCache.ens;\n      }\n      StorageUtil.removeEnsFromCache(address);\n    } catch {\n      console.info('Unable to get ens name from cache', address);\n    }\n    return undefined;\n  },\n  updateEnsCache(params) {\n    try {\n      const cache = StorageUtil.getEnsCache();\n      cache[params.address] = params;\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify(cache));\n    } catch {\n      console.info('Unable to update ens name cache', params);\n    }\n  },\n  removeEnsFromCache(address) {\n    try {\n      const cache = StorageUtil.getEnsCache();\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify({\n        ...cache,\n        [address]: undefined\n      }));\n    } catch {\n      console.info('Unable to remove ens name from cache', address);\n    }\n  },\n  getIdentityCache() {\n    let cache = {};\n    try {\n      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.IDENTITY_CACHE);\n      cache = result ? JSON.parse(result) : {};\n    } catch {\n      console.info('Unable to get identity cache');\n    }\n    return cache;\n  },\n  getIdentityFromCacheForAddress(address) {\n    try {\n      const cache = StorageUtil.getIdentityCache();\n      const identityCache = cache[address];\n      // We want to discard cache if it's older than the cache expiry\n      if (identityCache && !this.isCacheExpired(identityCache.timestamp, this.cacheExpiry.identity)) {\n        return identityCache.identity;\n      }\n      StorageUtil.removeIdentityFromCache(address);\n    } catch {\n      console.info('Unable to get identity from cache', address);\n    }\n    return undefined;\n  },\n  updateIdentityCache(params) {\n    try {\n      const cache = StorageUtil.getIdentityCache();\n      cache[params.address] = {\n        identity: params.identity,\n        timestamp: params.timestamp\n      };\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify(cache));\n    } catch {\n      console.info('Unable to update identity cache', params);\n    }\n  },\n  removeIdentityFromCache(address) {\n    try {\n      const cache = StorageUtil.getIdentityCache();\n      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify({\n        ...cache,\n        [address]: undefined\n      }));\n    } catch {\n      console.info('Unable to remove identity from cache', address);\n    }\n  },\n  clearAddressCache() {\n    try {\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ENS_CACHE);\n      SafeLocalStorage.removeItem(SafeLocalStorageKeys.IDENTITY_CACHE);\n    } catch {\n      console.info('Unable to clear address cache');\n    }\n  }\n};\n//# sourceMappingURL=StorageUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}