{"ast":null,"code":"export function isLegacyTransactionInstance(transaction) {\n  return transaction.version === undefined;\n}\nexport function serializeTransaction(transaction) {\n  return isLegacyTransactionInstance(transaction) ? transaction.serialize({\n    verifySignatures: false,\n    requireAllSignatures: false\n  }) : transaction.serialize();\n}\nexport function serializeTransactionMessage(transaction) {\n  return isLegacyTransactionInstance(transaction) ? transaction.serializeMessage() : transaction.message.serialize();\n}\nexport function addSignature(transaction, publicKey, signature) {\n  if (isLegacyTransactionInstance(transaction)) {\n    transaction.addSignature(publicKey, Buffer.from(signature));\n  } else {\n    const signerPubkeys = transaction.message.staticAccountKeys.slice(0, transaction.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    if (signerIndex >= 0) {\n      transaction.signatures[signerIndex] = signature;\n    }\n  }\n}","map":{"version":3,"names":["isLegacyTransactionInstance","transaction","version","undefined","serializeTransaction","serialize","verifySignatures","requireAllSignatures","serializeTransactionMessage","serializeMessage","message","addSignature","publicKey","signature","Buffer","from","signerPubkeys","staticAccountKeys","slice","header","numRequiredSignatures","signerIndex","findIndex","pubkey","equals","signatures"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js"],"sourcesContent":["export function isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nexport function serializeTransaction(transaction) {\n    return isLegacyTransactionInstance(transaction)\n        ? transaction.serialize({\n            verifySignatures: false,\n            requireAllSignatures: false\n        })\n        : transaction.serialize();\n}\nexport function serializeTransactionMessage(transaction) {\n    return isLegacyTransactionInstance(transaction)\n        ? transaction.serializeMessage()\n        : transaction.message.serialize();\n}\nexport function addSignature(transaction, publicKey, signature) {\n    if (isLegacyTransactionInstance(transaction)) {\n        transaction.addSignature(publicKey, Buffer.from(signature));\n    }\n    else {\n        const signerPubkeys = transaction.message.staticAccountKeys.slice(0, transaction.message.header.numRequiredSignatures);\n        const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(publicKey));\n        if (signerIndex >= 0) {\n            transaction.signatures[signerIndex] = signature;\n        }\n    }\n}\n"],"mappings":"AAAA,OAAO,SAASA,2BAA2BA,CAACC,WAAW,EAAE;EACrD,OAAOA,WAAW,CAACC,OAAO,KAAKC,SAAS;AAC5C;AACA,OAAO,SAASC,oBAAoBA,CAACH,WAAW,EAAE;EAC9C,OAAOD,2BAA2B,CAACC,WAAW,CAAC,GACzCA,WAAW,CAACI,SAAS,CAAC;IACpBC,gBAAgB,EAAE,KAAK;IACvBC,oBAAoB,EAAE;EAC1B,CAAC,CAAC,GACAN,WAAW,CAACI,SAAS,CAAC,CAAC;AACjC;AACA,OAAO,SAASG,2BAA2BA,CAACP,WAAW,EAAE;EACrD,OAAOD,2BAA2B,CAACC,WAAW,CAAC,GACzCA,WAAW,CAACQ,gBAAgB,CAAC,CAAC,GAC9BR,WAAW,CAACS,OAAO,CAACL,SAAS,CAAC,CAAC;AACzC;AACA,OAAO,SAASM,YAAYA,CAACV,WAAW,EAAEW,SAAS,EAAEC,SAAS,EAAE;EAC5D,IAAIb,2BAA2B,CAACC,WAAW,CAAC,EAAE;IAC1CA,WAAW,CAACU,YAAY,CAACC,SAAS,EAAEE,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAAC;EAC/D,CAAC,MACI;IACD,MAAMG,aAAa,GAAGf,WAAW,CAACS,OAAO,CAACO,iBAAiB,CAACC,KAAK,CAAC,CAAC,EAAEjB,WAAW,CAACS,OAAO,CAACS,MAAM,CAACC,qBAAqB,CAAC;IACtH,MAAMC,WAAW,GAAGL,aAAa,CAACM,SAAS,CAAEC,MAAM,IAAKA,MAAM,CAACC,MAAM,CAACZ,SAAS,CAAC,CAAC;IACjF,IAAIS,WAAW,IAAI,CAAC,EAAE;MAClBpB,WAAW,CAACwB,UAAU,CAACJ,WAAW,CAAC,GAAGR,SAAS;IACnD;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}