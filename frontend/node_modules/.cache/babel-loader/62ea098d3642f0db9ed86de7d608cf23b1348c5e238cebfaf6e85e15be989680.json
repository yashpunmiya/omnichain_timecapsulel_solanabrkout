{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport '../../components/wui-loading-spinner/index.js';\nimport '../../components/wui-text/index.js';\nimport { elementStyles, resetStyles } from '../../utils/ThemeUtil.js';\nimport { customElement } from '../../utils/WebComponentsUtil.js';\nimport styles from './styles.js';\nconst SPINNER_COLOR_BY_VARIANT = {\n  main: 'inverse-100',\n  inverse: 'inverse-000',\n  accent: 'accent-100',\n  'accent-error': 'error-100',\n  'accent-success': 'success-100',\n  neutral: 'fg-100',\n  disabled: 'gray-glass-020'\n};\nconst TEXT_VARIANT_BY_SIZE = {\n  lg: 'paragraph-600',\n  md: 'small-600'\n};\nconst SPINNER_SIZE_BY_SIZE = {\n  lg: 'md',\n  md: 'md'\n};\nlet WuiButton = class WuiButton extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.size = 'lg';\n    this.disabled = false;\n    this.fullWidth = false;\n    this.loading = false;\n    this.variant = 'main';\n    this.hasIconLeft = false;\n    this.hasIconRight = false;\n    this.borderRadius = 'm';\n  }\n  render() {\n    this.style.cssText = `\n    --local-width: ${this.fullWidth ? '100%' : 'auto'};\n    --local-opacity-100: ${this.loading ? 0 : 1};\n    --local-opacity-000: ${this.loading ? 1 : 0};\n    --local-border-radius: var(--wui-border-radius-${this.borderRadius});\n    `;\n    const textVariant = this.textVariant ?? TEXT_VARIANT_BY_SIZE[this.size];\n    return html`\n      <button\n        data-variant=${this.variant}\n        data-icon-left=${this.hasIconLeft}\n        data-icon-right=${this.hasIconRight}\n        data-size=${this.size}\n        ?disabled=${this.disabled}\n      >\n        ${this.loadingTemplate()}\n        <slot name=\"iconLeft\" @slotchange=${() => this.handleSlotLeftChange()}></slot>\n        <wui-text variant=${textVariant} color=\"inherit\">\n          <slot></slot>\n        </wui-text>\n        <slot name=\"iconRight\" @slotchange=${() => this.handleSlotRightChange()}></slot>\n      </button>\n    `;\n  }\n  handleSlotLeftChange() {\n    this.hasIconLeft = true;\n  }\n  handleSlotRightChange() {\n    this.hasIconRight = true;\n  }\n  loadingTemplate() {\n    if (this.loading) {\n      const size = SPINNER_SIZE_BY_SIZE[this.size];\n      const color = this.disabled ? SPINNER_COLOR_BY_VARIANT['disabled'] : SPINNER_COLOR_BY_VARIANT[this.variant];\n      return html`<wui-loading-spinner color=${color} size=${size}></wui-loading-spinner>`;\n    }\n    return html``;\n  }\n};\nWuiButton.styles = [resetStyles, elementStyles, styles];\n__decorate([property()], WuiButton.prototype, \"size\", void 0);\n__decorate([property({\n  type: Boolean\n})], WuiButton.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean\n})], WuiButton.prototype, \"fullWidth\", void 0);\n__decorate([property({\n  type: Boolean\n})], WuiButton.prototype, \"loading\", void 0);\n__decorate([property()], WuiButton.prototype, \"variant\", void 0);\n__decorate([property({\n  type: Boolean\n})], WuiButton.prototype, \"hasIconLeft\", void 0);\n__decorate([property({\n  type: Boolean\n})], WuiButton.prototype, \"hasIconRight\", void 0);\n__decorate([property()], WuiButton.prototype, \"borderRadius\", void 0);\n__decorate([property()], WuiButton.prototype, \"textVariant\", void 0);\nWuiButton = __decorate([customElement('wui-button')], WuiButton);\nexport { WuiButton };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}