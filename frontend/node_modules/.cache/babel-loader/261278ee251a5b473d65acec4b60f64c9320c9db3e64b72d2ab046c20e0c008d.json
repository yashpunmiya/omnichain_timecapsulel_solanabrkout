{"ast":null,"code":"import { HttpRequestError, TimeoutError } from '../../errors/request.js';\nimport { withTimeout } from '../promise/withTimeout.js';\nimport { stringify } from '../stringify.js';\nimport { idCache } from './id.js';\nexport function getHttpRpcClient(url, options = {}) {\n  return {\n    async request(params) {\n      const {\n        body,\n        onRequest = options.onRequest,\n        onResponse = options.onResponse,\n        timeout = options.timeout ?? 10_000\n      } = params;\n      const fetchOptions = {\n        ...(options.fetchOptions ?? {}),\n        ...(params.fetchOptions ?? {})\n      };\n      const {\n        headers,\n        method,\n        signal: signal_\n      } = fetchOptions;\n      try {\n        const response = await withTimeout(async ({\n          signal\n        }) => {\n          const init = {\n            ...fetchOptions,\n            body: Array.isArray(body) ? stringify(body.map(body => ({\n              jsonrpc: '2.0',\n              id: body.id ?? idCache.take(),\n              ...body\n            }))) : stringify({\n              jsonrpc: '2.0',\n              id: body.id ?? idCache.take(),\n              ...body\n            }),\n            headers: {\n              'Content-Type': 'application/json',\n              ...headers\n            },\n            method: method || 'POST',\n            signal: signal_ || (timeout > 0 ? signal : null)\n          };\n          const request = new Request(url, init);\n          const args = (await onRequest?.(request, init)) ?? {\n            ...init,\n            url\n          };\n          const response = await fetch(args.url ?? url, args);\n          return response;\n        }, {\n          errorInstance: new TimeoutError({\n            body,\n            url\n          }),\n          timeout,\n          signal: true\n        });\n        if (onResponse) await onResponse(response);\n        let data;\n        if (response.headers.get('Content-Type')?.startsWith('application/json')) data = await response.json();else {\n          data = await response.text();\n          try {\n            data = JSON.parse(data || '{}');\n          } catch (err) {\n            if (response.ok) throw err;\n            data = {\n              error: data\n            };\n          }\n        }\n        if (!response.ok) {\n          throw new HttpRequestError({\n            body,\n            details: stringify(data.error) || response.statusText,\n            headers: response.headers,\n            status: response.status,\n            url\n          });\n        }\n        return data;\n      } catch (err) {\n        if (err instanceof HttpRequestError) throw err;\n        if (err instanceof TimeoutError) throw err;\n        throw new HttpRequestError({\n          body,\n          cause: err,\n          url\n        });\n      }\n    }\n  };\n}\n//# sourceMappingURL=http.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}