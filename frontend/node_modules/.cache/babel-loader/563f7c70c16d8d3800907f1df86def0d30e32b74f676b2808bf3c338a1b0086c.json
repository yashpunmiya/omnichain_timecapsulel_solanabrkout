{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\n/**\n * Requests the connected wallet to send a batch of calls.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Transaction identifier. {@link SendCallsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const id = await sendCalls(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCalls(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    forceAtomic = false,\n    id,\n    version = '2.0.0'\n  } = parameters;\n  if (typeof account_ === 'undefined') throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendCalls'\n  });\n  const account = account_ ? parseAccount(account_) : null;\n  const calls = parameters.calls.map(call_ => {\n    const call = call_;\n    const data = call.abi ? encodeFunctionData({\n      abi: call.abi,\n      functionName: call.functionName,\n      args: call.args\n    }) : call.data;\n    return {\n      data,\n      to: call.to,\n      value: call.value ? numberToHex(call.value) : undefined\n    };\n  });\n  try {\n    const response = await client.request({\n      method: 'wallet_sendCalls',\n      params: [{\n        atomicRequired: forceAtomic,\n        calls,\n        capabilities: formatRequestCapabilities(parameters.capabilities),\n        chainId: numberToHex(chain.id),\n        from: account?.address,\n        id,\n        version\n      }]\n    }, {\n      retryCount: 0\n    });\n    if (typeof response === 'string') return {\n      id: response\n    };\n    return response;\n  } catch (err) {\n    throw getTransactionError(err, {\n      ...parameters,\n      account,\n      chain: parameters.chain\n    });\n  }\n}\nfunction formatRequestCapabilities(capabilities) {\n  const paymasterService = capabilities?.paymasterService ? Object.entries(capabilities.paymasterService).reduce((paymasterService, [chainId, value]) => ({\n    ...(paymasterService ?? {}),\n    [numberToHex(Number(chainId))]: value\n  }), {}) : undefined;\n  return {\n    ...capabilities,\n    ...(paymasterService ? {\n      paymasterService\n    } : {})\n  };\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","encodeFunctionData","numberToHex","getTransactionError","sendCalls","client","parameters","account","account_","chain","forceAtomic","id","version","docsPath","calls","map","call_","call","data","abi","functionName","args","to","value","undefined","response","request","method","params","atomicRequired","capabilities","formatRequestCapabilities","chainId","from","address","retryCount","err","paymasterService","Object","entries","reduce","Number"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\actions\\wallet\\sendCalls.ts"],"sourcesContent":["import type { Address, Narrow } from 'abitype'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account, GetAccountParameter } from '../../types/account.js'\nimport type { Call, Calls } from '../../types/calls.js'\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { WalletSendCallsParameters } from '../../types/eip1193.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js'\n\nexport type SendCallsParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  calls extends readonly unknown[] = readonly unknown[],\n  //\n  _chain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = {\n  chain?: chainOverride | Chain | undefined\n  calls: Calls<Narrow<calls>>\n  capabilities?: ExtractCapabilities<'sendCalls', 'Request'> | undefined\n  forceAtomic?: boolean | undefined\n  id?: string | undefined\n  version?: WalletSendCallsParameters[number]['version'] | undefined\n} & GetAccountParameter<account, Account | Address, true, true>\n\nexport type SendCallsReturnType = Prettify<{\n  capabilities?: ExtractCapabilities<'sendCalls', 'ReturnType'> | undefined\n  id: string\n}>\n\nexport type SendCallsErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests the connected wallet to send a batch of calls.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Transaction identifier. {@link SendCallsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const id = await sendCalls(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCalls<\n  const calls extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendCallsParameters<chain, account, chainOverride, calls>,\n): Promise<SendCallsReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    forceAtomic = false,\n    id,\n    version = '2.0.0',\n  } = parameters\n\n  if (typeof account_ === 'undefined')\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendCalls',\n    })\n  const account = account_ ? parseAccount(account_) : null\n\n  const calls = parameters.calls.map((call_: unknown) => {\n    const call = call_ as Call\n\n    const data = call.abi\n      ? encodeFunctionData({\n          abi: call.abi,\n          functionName: call.functionName,\n          args: call.args,\n        })\n      : call.data\n\n    return {\n      data,\n      to: call.to,\n      value: call.value ? numberToHex(call.value) : undefined,\n    }\n  })\n\n  try {\n    const response = await client.request(\n      {\n        method: 'wallet_sendCalls',\n        params: [\n          {\n            atomicRequired: forceAtomic,\n            calls,\n            capabilities: formatRequestCapabilities(parameters.capabilities),\n            chainId: numberToHex(chain!.id),\n            from: account?.address,\n            id,\n            version,\n          },\n        ],\n      },\n      { retryCount: 0 },\n    )\n    if (typeof response === 'string') return { id: response }\n    return response as never\n  } catch (err) {\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain!,\n    })\n  }\n}\n\nfunction formatRequestCapabilities(\n  capabilities: ExtractCapabilities<'sendCalls', 'Request'> | undefined,\n) {\n  const paymasterService = capabilities?.paymasterService\n    ? Object.entries(capabilities.paymasterService).reduce(\n        (paymasterService, [chainId, value]) => ({\n          ...(paymasterService ?? {}),\n          [numberToHex(Number(chainId))]: value,\n        }),\n        {},\n      )\n    : undefined\n\n  return {\n    ...capabilities,\n    ...(paymasterService\n      ? {\n          paymasterService,\n        }\n      : {}),\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,sCAAsC;AAGnE,SAASC,oBAAoB,QAAQ,yBAAyB;AAS9D,SAASC,kBAAkB,QAAQ,uCAAuC;AAE1E,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,mBAAmB,QAAQ,2CAA2C;AAyB/E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,eAAeC,SAASA,CAM7BC,MAAyC,EACzCC,UAAqE;EAErE,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpBC,WAAW,GAAG,KAAK;IACnBC,EAAE;IACFC,OAAO,GAAG;EAAO,CAClB,GAAGN,UAAU;EAEd,IAAI,OAAOE,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAIR,oBAAoB,CAAC;IAC7Ba,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMN,OAAO,GAAGC,QAAQ,GAAGT,YAAY,CAACS,QAAQ,CAAC,GAAG,IAAI;EAExD,MAAMM,KAAK,GAAGR,UAAU,CAACQ,KAAK,CAACC,GAAG,CAAEC,KAAc,IAAI;IACpD,MAAMC,IAAI,GAAGD,KAAa;IAE1B,MAAME,IAAI,GAAGD,IAAI,CAACE,GAAG,GACjBlB,kBAAkB,CAAC;MACjBkB,GAAG,EAAEF,IAAI,CAACE,GAAG;MACbC,YAAY,EAAEH,IAAI,CAACG,YAAY;MAC/BC,IAAI,EAAEJ,IAAI,CAACI;KACZ,CAAC,GACFJ,IAAI,CAACC,IAAI;IAEb,OAAO;MACLA,IAAI;MACJI,EAAE,EAAEL,IAAI,CAACK,EAAE;MACXC,KAAK,EAAEN,IAAI,CAACM,KAAK,GAAGrB,WAAW,CAACe,IAAI,CAACM,KAAK,CAAC,GAAGC;KAC/C;EACH,CAAC,CAAC;EAEF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMpB,MAAM,CAACqB,OAAO,CACnC;MACEC,MAAM,EAAE,kBAAkB;MAC1BC,MAAM,EAAE,CACN;QACEC,cAAc,EAAEnB,WAAW;QAC3BI,KAAK;QACLgB,YAAY,EAAEC,yBAAyB,CAACzB,UAAU,CAACwB,YAAY,CAAC;QAChEE,OAAO,EAAE9B,WAAW,CAACO,KAAM,CAACE,EAAE,CAAC;QAC/BsB,IAAI,EAAE1B,OAAO,EAAE2B,OAAO;QACtBvB,EAAE;QACFC;OACD;KAEJ,EACD;MAAEuB,UAAU,EAAE;IAAC,CAAE,CAClB;IACD,IAAI,OAAOV,QAAQ,KAAK,QAAQ,EAAE,OAAO;MAAEd,EAAE,EAAEc;IAAQ,CAAE;IACzD,OAAOA,QAAiB;EAC1B,CAAC,CAAC,OAAOW,GAAG,EAAE;IACZ,MAAMjC,mBAAmB,CAACiC,GAAgB,EAAE;MAC1C,GAAG9B,UAAU;MACbC,OAAO;MACPE,KAAK,EAAEH,UAAU,CAACG;KACnB,CAAC;EACJ;AACF;AAEA,SAASsB,yBAAyBA,CAChCD,YAAqE;EAErE,MAAMO,gBAAgB,GAAGP,YAAY,EAAEO,gBAAgB,GACnDC,MAAM,CAACC,OAAO,CAACT,YAAY,CAACO,gBAAgB,CAAC,CAACG,MAAM,CAClD,CAACH,gBAAgB,EAAE,CAACL,OAAO,EAAET,KAAK,CAAC,MAAM;IACvC,IAAIc,gBAAgB,IAAI,EAAE,CAAC;IAC3B,CAACnC,WAAW,CAACuC,MAAM,CAACT,OAAO,CAAC,CAAC,GAAGT;GACjC,CAAC,EACF,EAAE,CACH,GACDC,SAAS;EAEb,OAAO;IACL,GAAGM,YAAY;IACf,IAAIO,gBAAgB,GAChB;MACEA;KACD,GACD,EAAE;GACP;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}