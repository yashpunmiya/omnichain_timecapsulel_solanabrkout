{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoOutput = void 0;\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\nconst lib_1 = require(\"./lib\");\nconst MultiKey_1 = require(\"./MultiKey\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\nclass CryptoOutput extends RegistryItem_1.RegistryItem {\n  constructor(scriptExpressions, cryptoKey) {\n    super();\n    this.scriptExpressions = scriptExpressions;\n    this.cryptoKey = cryptoKey;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_OUTPUT;\n    };\n    this.getCryptoKey = () => this.cryptoKey;\n    this.getHDKey = () => {\n      if (this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n    this.getECKey = () => {\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n    this.getMultiKey = () => {\n      if (this.cryptoKey instanceof MultiKey_1.MultiKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n    this.getScriptExpressions = () => this.scriptExpressions;\n    this._toOutputDescriptor = seIndex => {\n      if (seIndex >= this.scriptExpressions.length) {\n        return this.cryptoKey.getOutputDescriptorContent();\n      } else {\n        return `${this.scriptExpressions[seIndex].getExpression()}(${this._toOutputDescriptor(seIndex + 1)})`;\n      }\n    };\n    this.toString = () => {\n      return this._toOutputDescriptor(0);\n    };\n    this.toDataItem = () => {\n      let dataItem = this.cryptoKey.toDataItem();\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey || this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        dataItem.setTag(this.cryptoKey.getRegistryType().getTag());\n      }\n      const clonedSe = [...this.scriptExpressions];\n      clonedSe.reverse().forEach(se => {\n        const tagValue = se.getTag();\n        if (dataItem.getTag() === undefined) {\n          dataItem.setTag(tagValue);\n        } else {\n          dataItem = new lib_1.DataItem(dataItem, tagValue);\n        }\n      });\n      return dataItem;\n    };\n  }\n}\nexports.CryptoOutput = CryptoOutput;\nCryptoOutput.fromDataItem = dataItem => {\n  const scriptExpressions = [];\n  let _dataItem = dataItem;\n  while (true) {\n    let _tag = _dataItem.getTag();\n    const se = ScriptExpression_1.ScriptExpression.fromTag(_tag);\n    if (se) {\n      scriptExpressions.push(se);\n      if (_dataItem.getData() instanceof lib_1.DataItem) {\n        _dataItem = _dataItem.getData();\n        _tag = _dataItem.getTag();\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  const seLength = scriptExpressions.length;\n  const isMultiKey = seLength > 0 && (scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.MULTISIG.getExpression() || scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.SORTED_MULTISIG.getExpression());\n  if (isMultiKey) {\n    const multiKey = MultiKey_1.MultiKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, multiKey);\n  }\n  if (_dataItem.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n    const cryptoHDKey = CryptoHDKey_1.CryptoHDKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoHDKey);\n  } else {\n    const cryptoECKey = CryptoECKey_1.CryptoECKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoECKey);\n  }\n};\nCryptoOutput.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoOutput.fromDataItem(dataItem);\n};\n//# sourceMappingURL=CryptoOutput.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}