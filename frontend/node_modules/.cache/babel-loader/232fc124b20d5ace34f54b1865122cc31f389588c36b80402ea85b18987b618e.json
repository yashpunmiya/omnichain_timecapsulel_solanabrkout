{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoAccount = void 0;\nconst _1 = require(\".\");\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"masterFingerprint\"] = 1] = \"masterFingerprint\";\n  Keys[Keys[\"outputDescriptors\"] = 2] = \"outputDescriptors\";\n})(Keys || (Keys = {}));\nclass CryptoAccount extends RegistryItem_1.RegistryItem {\n  constructor(masterFingerprint, outputDescriptors) {\n    super();\n    this.masterFingerprint = masterFingerprint;\n    this.outputDescriptors = outputDescriptors;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT;\n    };\n    this.getMasterFingerprint = () => this.masterFingerprint;\n    this.getOutputDescriptors = () => this.outputDescriptors;\n    this.toDataItem = () => {\n      const map = {};\n      if (this.masterFingerprint) {\n        map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n      }\n      if (this.outputDescriptors) {\n        map[Keys.outputDescriptors] = this.outputDescriptors.map(item => item.toDataItem());\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoAccount = CryptoAccount;\nCryptoAccount.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const masterFingerprint = Buffer.alloc(4);\n  const _masterFingerprint = map[Keys.masterFingerprint];\n  if (_masterFingerprint) {\n    masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n  }\n  const outputDescriptors = map[Keys.outputDescriptors];\n  const cryptoOutputs = outputDescriptors.map(item => _1.CryptoOutput.fromDataItem(item));\n  return new CryptoAccount(masterFingerprint, cryptoOutputs);\n};\nCryptoAccount.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoAccount.fromDataItem(dataItem);\n};","map":{"version":3,"names":["_1","require","lib_1","RegistryItem_1","RegistryType_1","Keys","CryptoAccount","RegistryItem","constructor","masterFingerprint","outputDescriptors","getRegistryType","RegistryTypes","CRYPTO_ACCOUNT","getMasterFingerprint","getOutputDescriptors","toDataItem","map","readUInt32BE","item","DataItem","exports","fromDataItem","dataItem","getData","Buffer","alloc","_masterFingerprint","writeUInt32BE","cryptoOutputs","CryptoOutput","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry\\src\\CryptoAccount.ts"],"sourcesContent":["import { CryptoOutput } from '.';\nimport { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\nimport { DataItemMap } from './types';\n\nenum Keys {\n  masterFingerprint = 1,\n  outputDescriptors,\n}\n\nexport class CryptoAccount extends RegistryItem {\n  getRegistryType = () => {\n    return RegistryTypes.CRYPTO_ACCOUNT;\n  };\n\n  constructor(\n    private masterFingerprint: Buffer,\n    private outputDescriptors: CryptoOutput[],\n  ) {\n    super();\n  }\n\n  public getMasterFingerprint = () => this.masterFingerprint;\n  public getOutputDescriptors = () => this.outputDescriptors;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.masterFingerprint) {\n      map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n    }\n    if (this.outputDescriptors) {\n      map[Keys.outputDescriptors] = this.outputDescriptors.map((item) =>\n        item.toDataItem(),\n      );\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const masterFingerprint = Buffer.alloc(4);\n    const _masterFingerprint = map[Keys.masterFingerprint];\n    if (_masterFingerprint) {\n      masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n    }\n    const outputDescriptors = map[Keys.outputDescriptors] as DataItem[];\n    const cryptoOutputs = outputDescriptors.map((item) =>\n      CryptoOutput.fromDataItem(item),\n    );\n    return new CryptoAccount(masterFingerprint, cryptoOutputs);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoAccount.fromDataItem(dataItem);\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,EAAA,GAAAC,OAAA;AACA,MAAAC,KAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AACA,MAAAG,cAAA,GAAAH,OAAA;AAGA,IAAKI,IAGJ;AAHD,WAAKA,IAAI;EACPA,IAAA,CAAAA,IAAA,gDAAqB;EACrBA,IAAA,CAAAA,IAAA,gDAAiB;AACnB,CAAC,EAHIA,IAAI,KAAJA,IAAI;AAKT,MAAaC,aAAc,SAAQH,cAAA,CAAAI,YAAY;EAK7CC,YACUC,iBAAyB,EACzBC,iBAAiC;IAEzC,KAAK,EAAE;IAHC,KAAAD,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAN3B,KAAAC,eAAe,GAAG,MAAK;MACrB,OAAOP,cAAA,CAAAQ,aAAa,CAACC,cAAc;IACrC,CAAC;IASM,KAAAC,oBAAoB,GAAG,MAAM,IAAI,CAACL,iBAAiB;IACnD,KAAAM,oBAAoB,GAAG,MAAM,IAAI,CAACL,iBAAiB;IAEnD,KAAAM,UAAU,GAAG,MAAK;MACvB,MAAMC,GAAG,GAAgB,EAAE;MAC3B,IAAI,IAAI,CAACR,iBAAiB,EAAE;QAC1BQ,GAAG,CAACZ,IAAI,CAACI,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAACS,YAAY,CAAC,CAAC,CAAC;;MAEtE,IAAI,IAAI,CAACR,iBAAiB,EAAE;QAC1BO,GAAG,CAACZ,IAAI,CAACK,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAACO,GAAG,CAAEE,IAAI,IAC5DA,IAAI,CAACH,UAAU,EAAE,CAClB;;MAEH,OAAO,IAAId,KAAA,CAAAkB,QAAQ,CAACH,GAAG,CAAC;IAC1B,CAAC;EAhBD;;AAVFI,OAAA,CAAAf,aAAA,GAAAA,aAAA;AA4BgBA,aAAA,CAAAgB,YAAY,GAAIC,QAAkB,IAAI;EAClD,MAAMN,GAAG,GAAGM,QAAQ,CAACC,OAAO,EAAE;EAC9B,MAAMf,iBAAiB,GAAGgB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACzC,MAAMC,kBAAkB,GAAGV,GAAG,CAACZ,IAAI,CAACI,iBAAiB,CAAC;EACtD,IAAIkB,kBAAkB,EAAE;IACtBlB,iBAAiB,CAACmB,aAAa,CAACD,kBAAkB,EAAE,CAAC,CAAC;;EAExD,MAAMjB,iBAAiB,GAAGO,GAAG,CAACZ,IAAI,CAACK,iBAAiB,CAAe;EACnE,MAAMmB,aAAa,GAAGnB,iBAAiB,CAACO,GAAG,CAAEE,IAAI,IAC/CnB,EAAA,CAAA8B,YAAY,CAACR,YAAY,CAACH,IAAI,CAAC,CAChC;EACD,OAAO,IAAIb,aAAa,CAACG,iBAAiB,EAAEoB,aAAa,CAAC;AAC5D,CAAC;AAEavB,aAAA,CAAAyB,QAAQ,GAAIC,YAAoB,IAAI;EAChD,MAAMT,QAAQ,GAAG,IAAArB,KAAA,CAAA+B,gBAAgB,EAACD,YAAY,CAAC;EAC/C,OAAO1B,aAAa,CAACgB,YAAY,CAACC,QAAQ,CAAC;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}