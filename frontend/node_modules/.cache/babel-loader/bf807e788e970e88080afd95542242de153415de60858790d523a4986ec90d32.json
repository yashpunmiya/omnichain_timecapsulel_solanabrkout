{"ast":null,"code":"import bs58 from 'bs58';\nimport { toHex } from 'viem';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { AccountController, ChainController, ConstantsUtil as CoreConstantsUtil, CoreHelperUtil } from '@reown/appkit-controllers';\nimport { AdapterBlueprint } from '../adapters/ChainAdapterBlueprint.js';\nimport { WalletConnectConnector } from '../connectors/WalletConnectConnector.js';\nimport { WcConstantsUtil } from '../utils/ConstantsUtil.js';\nexport class UniversalAdapter extends AdapterBlueprint {\n  setUniversalProvider(universalProvider) {\n    this.addConnector(new WalletConnectConnector({\n      provider: universalProvider,\n      caipNetworks: this.caipNetworks || [],\n      namespace: this.namespace\n    }));\n  }\n  async connect(params) {\n    return Promise.resolve({\n      id: 'WALLET_CONNECT',\n      type: 'WALLET_CONNECT',\n      chainId: Number(params.chainId),\n      provider: this.provider,\n      address: ''\n    });\n  }\n  async disconnect() {\n    try {\n      const connector = this.getWalletConnectConnector();\n      await connector.disconnect();\n    } catch (error) {\n      console.warn('UniversalAdapter:disconnect - error', error);\n    }\n  }\n  async getAccounts({\n    namespace\n  }) {\n    const provider = this.provider;\n    const addresses = provider?.session?.namespaces?.[namespace]?.accounts?.map(account => {\n      const [,, address] = account.split(':');\n      return address;\n    }).filter((address, index, self) => self.indexOf(address) === index) || [];\n    return Promise.resolve({\n      accounts: addresses.map(address => CoreHelperUtil.createAccount(namespace, address, namespace === 'bip122' ? 'payment' : 'eoa'))\n    });\n  }\n  async syncConnectors() {\n    return Promise.resolve();\n  }\n  async getBalance(params) {\n    const isBalanceSupported = params.caipNetwork && CoreConstantsUtil.BALANCE_SUPPORTED_CHAINS.includes(params.caipNetwork?.chainNamespace);\n    if (!isBalanceSupported || params.caipNetwork?.testnet) {\n      return {\n        balance: '0.00',\n        symbol: params.caipNetwork?.nativeCurrency.symbol || ''\n      };\n    }\n    if (AccountController.state.balanceLoading && params.chainId === ChainController.state.activeCaipNetwork?.id) {\n      return {\n        balance: AccountController.state.balance || '0.00',\n        symbol: AccountController.state.balanceSymbol || ''\n      };\n    }\n    const balances = await AccountController.fetchTokenBalance();\n    const balance = balances.find(b => b.chainId === `${params.caipNetwork?.chainNamespace}:${params.chainId}` && b.symbol === params.caipNetwork?.nativeCurrency.symbol);\n    return {\n      balance: balance?.quantity.numeric || '0.00',\n      symbol: balance?.symbol || params.caipNetwork?.nativeCurrency.symbol || ''\n    };\n  }\n  async signMessage(params) {\n    const {\n      provider,\n      message,\n      address\n    } = params;\n    if (!provider) {\n      throw new Error('UniversalAdapter:signMessage - provider is undefined');\n    }\n    let signature = '';\n    if (ChainController.state.activeCaipNetwork?.chainNamespace === ConstantsUtil.CHAIN.SOLANA) {\n      const response = await provider.request({\n        method: 'solana_signMessage',\n        params: {\n          message: bs58.encode(new TextEncoder().encode(message)),\n          pubkey: address\n        }\n      }, ChainController.state.activeCaipNetwork?.caipNetworkId);\n      signature = response.signature;\n    } else {\n      signature = await provider.request({\n        method: 'personal_sign',\n        params: [message, address]\n      }, ChainController.state.activeCaipNetwork?.caipNetworkId);\n    }\n    return {\n      signature\n    };\n  }\n  // -- Transaction methods ---------------------------------------------------\n  /**\n   *\n   * These methods are supported only on `wagmi` and `ethers` since the Solana SDK does not support them in the same way.\n   * These function definition is to have a type parity between the clients. Currently not in use.\n   */\n  async estimateGas() {\n    return Promise.resolve({\n      gas: BigInt(0)\n    });\n  }\n  async getProfile() {\n    return Promise.resolve({\n      profileImage: '',\n      profileName: ''\n    });\n  }\n  async sendTransaction() {\n    return Promise.resolve({\n      hash: ''\n    });\n  }\n  walletGetAssets(_params) {\n    return Promise.resolve({});\n  }\n  async writeContract() {\n    return Promise.resolve({\n      hash: ''\n    });\n  }\n  async getEnsAddress() {\n    return Promise.resolve({\n      address: false\n    });\n  }\n  parseUnits() {\n    return 0n;\n  }\n  formatUnits() {\n    return '0';\n  }\n  async getCapabilities() {\n    return Promise.resolve({});\n  }\n  async grantPermissions() {\n    return Promise.resolve({});\n  }\n  async revokePermissions() {\n    return Promise.resolve('0x');\n  }\n  async syncConnection() {\n    return Promise.resolve({\n      id: 'WALLET_CONNECT',\n      type: 'WALLET_CONNECT',\n      chainId: 1,\n      provider: this.provider,\n      address: ''\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async switchNetwork(params) {\n    const {\n      caipNetwork\n    } = params;\n    const connector = this.getWalletConnectConnector();\n    if (caipNetwork.chainNamespace === ConstantsUtil.CHAIN.EVM) {\n      try {\n        await connector.provider?.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: toHex(caipNetwork.id)\n          }]\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (switchError) {\n        if (switchError.code === WcConstantsUtil.ERROR_CODE_UNRECOGNIZED_CHAIN_ID || switchError.code === WcConstantsUtil.ERROR_INVALID_CHAIN_ID || switchError.code === WcConstantsUtil.ERROR_CODE_DEFAULT || switchError?.data?.originalError?.code === WcConstantsUtil.ERROR_CODE_UNRECOGNIZED_CHAIN_ID) {\n          try {\n            await connector.provider?.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: toHex(caipNetwork.id),\n                rpcUrls: [caipNetwork?.rpcUrls['chainDefault']?.http],\n                chainName: caipNetwork.name,\n                nativeCurrency: caipNetwork.nativeCurrency,\n                blockExplorerUrls: [caipNetwork.blockExplorers?.default.url]\n              }]\n            });\n          } catch (error) {\n            throw new Error('Chain is not supported');\n          }\n        }\n      }\n    }\n    connector.provider.setDefaultChain(caipNetwork.caipNetworkId);\n  }\n  getWalletConnectProvider() {\n    const connector = this.connectors.find(c => c.type === 'WALLET_CONNECT');\n    const provider = connector?.provider;\n    return provider;\n  }\n}\n//# sourceMappingURL=client.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}