{"ast":null,"code":"import { proxy } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\n// -- Constants ----------------------------------------- //\nconst DEFAULT_STATE = Object.freeze({\n  message: '',\n  variant: 'success',\n  svg: undefined,\n  open: false,\n  autoClose: true\n});\n// -- State --------------------------------------------- //\nconst state = proxy({\n  ...DEFAULT_STATE\n});\n// -- Controller ---------------------------------------- //\nexport const SnackController = {\n  state,\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  showLoading(message, options = {}) {\n    this._showMessage({\n      message,\n      variant: 'loading',\n      ...options\n    });\n  },\n  showSuccess(message) {\n    this._showMessage({\n      message,\n      variant: 'success'\n    });\n  },\n  showSvg(message, svg) {\n    this._showMessage({\n      message,\n      svg\n    });\n  },\n  showError(message) {\n    const errorMessage = CoreHelperUtil.parseError(message);\n    this._showMessage({\n      message: errorMessage,\n      variant: 'error'\n    });\n  },\n  hide() {\n    state.message = DEFAULT_STATE.message;\n    state.variant = DEFAULT_STATE.variant;\n    state.svg = DEFAULT_STATE.svg;\n    state.open = DEFAULT_STATE.open;\n    state.autoClose = DEFAULT_STATE.autoClose;\n  },\n  _showMessage({\n    message,\n    svg,\n    variant = 'success',\n    autoClose = DEFAULT_STATE.autoClose\n  }) {\n    if (state.open) {\n      state.open = false;\n      setTimeout(() => {\n        state.message = message;\n        state.variant = variant;\n        state.svg = svg;\n        state.open = true;\n        state.autoClose = autoClose;\n      }, 150);\n    } else {\n      state.message = message;\n      state.variant = variant;\n      state.svg = svg;\n      state.open = true;\n      state.autoClose = autoClose;\n    }\n  }\n};\n//# sourceMappingURL=SnackController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}