{"ast":null,"code":"import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * @description Converts a signature into an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098).\n *\n * @param signature The signature to convert.\n * @returns The signature in compact format.\n *\n * @example\n * signatureToCompactSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n *   yParity: 0\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'\n * // }\n */\nexport function signatureToCompactSignature(signature) {\n  const {\n    r,\n    s,\n    v,\n    yParity\n  } = signature;\n  const yParity_ = Number(yParity ?? v - 27n);\n  let yParityAndS = s;\n  if (yParity_ === 1) {\n    const bytes = hexToBytes(s);\n    bytes[0] |= 0x80;\n    yParityAndS = bytesToHex(bytes);\n  }\n  return {\n    r,\n    yParityAndS\n  };\n}\n//# sourceMappingURL=signatureToCompactSignature.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}