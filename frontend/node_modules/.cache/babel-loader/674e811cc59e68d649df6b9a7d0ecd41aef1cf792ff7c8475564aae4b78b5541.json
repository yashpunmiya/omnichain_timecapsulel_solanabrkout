{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeVersion = exports.isNewerOrEqual = exports.isEqual = exports.isNewer = exports.isVersionArray = void 0;\nconst throwError_1 = require(\"./throwError\");\nconst isVersionArray = arr => Array.isArray(arr) && arr.length === 3 && arr.every(number => typeof number === 'number' && number >= 0);\nexports.isVersionArray = isVersionArray;\nconst tryParse = version => version.match(/^(\\d+)\\.(\\d+)\\.(\\d+)([+-].*)?$/)?.slice(1, 4).map(n => Number(n));\nconst validateArray = version => (0, exports.isVersionArray)(version) ? version : null;\nconst ensureArray = version => (typeof version === 'string' ? tryParse(version) : validateArray(version)) ?? (0, throwError_1.throwError)(`version string is in wrong format: ${version}`);\nconst compare = ([majorX, minorX, patchX], [majorY, minorY, patchY]) => majorX - majorY || minorX - minorY || patchX - patchY;\nconst isNewer = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) > 0;\nexports.isNewer = isNewer;\nconst isEqual = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) === 0;\nexports.isEqual = isEqual;\nconst isNewerOrEqual = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) >= 0;\nexports.isNewerOrEqual = isNewerOrEqual;\nconst normalizeVersion = version => version.replace(/\\b0+(\\d)/g, '$1');\nexports.normalizeVersion = normalizeVersion;\n//# sourceMappingURL=versionUtils.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}