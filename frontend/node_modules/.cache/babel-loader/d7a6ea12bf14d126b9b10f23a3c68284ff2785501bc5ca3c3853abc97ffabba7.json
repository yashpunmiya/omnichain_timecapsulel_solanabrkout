{"ast":null,"code":"import { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\n/**\n * Executes a transaction regardless of the signature.\n *\n * - Docs: https://viem.sh/docs/actions/test/sendUnsignedTransaction#sendunsignedtransaction\n *\n * @param client - Client to use\n * @param parameters â€“ {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction(client, args) {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args;\n  const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n  const format = chainFormat || formatTransactionRequest;\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, {\n      format: chainFormat\n    }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value\n  });\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request]\n  });\n  return hash;\n}\n//# sourceMappingURL=sendUnsignedTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}