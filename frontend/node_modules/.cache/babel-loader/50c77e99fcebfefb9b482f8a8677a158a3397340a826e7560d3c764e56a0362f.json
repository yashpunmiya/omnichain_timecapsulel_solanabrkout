{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCapabilities } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const capabilities = await getCapabilities(client)\n */\nexport async function getCapabilities(client, parameters = {}) {\n  const {\n    account = client.account,\n    chainId\n  } = parameters;\n  const account_ = account ? parseAccount(account) : undefined;\n  const params = chainId ? [account_?.address, [numberToHex(chainId)]] : [account_?.address];\n  const capabilities_raw = await client.request({\n    method: 'wallet_getCapabilities',\n    params\n  });\n  const capabilities = {};\n  for (const [chainId, capabilities_] of Object.entries(capabilities_raw)) {\n    capabilities[Number(chainId)] = {};\n    for (let [key, value] of Object.entries(capabilities_)) {\n      if (key === 'addSubAccount') key = 'unstable_addSubAccount';\n      capabilities[Number(chainId)][key] = value;\n    }\n  }\n  return typeof chainId === 'number' ? capabilities[chainId] : capabilities;\n}\n//# sourceMappingURL=getCapabilities.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}