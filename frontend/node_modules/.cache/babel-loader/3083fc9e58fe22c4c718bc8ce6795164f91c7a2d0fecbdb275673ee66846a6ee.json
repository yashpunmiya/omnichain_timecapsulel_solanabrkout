{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Extends = Extends;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../union/index\");\nconst extends_check_1 = require(\"./extends-check\");\nconst extends_from_mapped_key_1 = require(\"./extends-from-mapped-key\");\nconst extends_from_mapped_result_1 = require(\"./extends-from-mapped-result\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// prettier-ignore\nfunction ExtendsResolve(left, right, trueType, falseType) {\n  const R = (0, extends_check_1.ExtendsCheck)(left, right);\n  return R === extends_check_1.ExtendsResult.Union ? (0, index_1.Union)([trueType, falseType]) : R === extends_check_1.ExtendsResult.True ? trueType : falseType;\n}\n/** `[Json]` Creates a Conditional type */\nfunction Extends(L, R, T, F, options) {\n  // prettier-ignore\n  return (0, kind_1.IsMappedResult)(L) ? (0, extends_from_mapped_result_1.ExtendsFromMappedResult)(L, R, T, F, options) : (0, kind_1.IsMappedKey)(L) ? (0, type_1.CreateType)((0, extends_from_mapped_key_1.ExtendsFromMappedKey)(L, R, T, F, options)) : (0, type_1.CreateType)(ExtendsResolve(L, R, T, F), options);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}