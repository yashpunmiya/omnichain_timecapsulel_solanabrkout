{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoHDKey = void 0;\nconst bs58check_1 = require(\"bs58check\");\nconst CryptoCoinInfo_1 = require(\"./CryptoCoinInfo\");\nconst CryptoKeypath_1 = require(\"./CryptoKeypath\");\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"is_master\"] = 1] = \"is_master\";\n  Keys[Keys[\"is_private\"] = 2] = \"is_private\";\n  Keys[Keys[\"key_data\"] = 3] = \"key_data\";\n  Keys[Keys[\"chain_code\"] = 4] = \"chain_code\";\n  Keys[Keys[\"use_info\"] = 5] = \"use_info\";\n  Keys[Keys[\"origin\"] = 6] = \"origin\";\n  Keys[Keys[\"children\"] = 7] = \"children\";\n  Keys[Keys[\"parent_fingerprint\"] = 8] = \"parent_fingerprint\";\n  Keys[Keys[\"name\"] = 9] = \"name\";\n  Keys[Keys[\"note\"] = 10] = \"note\";\n})(Keys || (Keys = {}));\nclass CryptoHDKey extends RegistryItem_1.RegistryItem {\n  constructor(args) {\n    super();\n    this.isECKey = () => {\n      return false;\n    };\n    this.getKey = () => this.key;\n    this.getChainCode = () => this.chainCode;\n    this.isMaster = () => this.master;\n    this.isPrivateKey = () => !!this.privateKey;\n    this.getUseInfo = () => this.useInfo;\n    this.getOrigin = () => this.origin;\n    this.getChildren = () => this.children;\n    this.getParentFingerprint = () => this.parentFingerprint;\n    this.getName = () => this.name;\n    this.getNote = () => this.note;\n    this.getBip32Key = () => {\n      var _a, _b, _c;\n      let version;\n      let depth;\n      let index = 0;\n      let parentFingerprint = Buffer.alloc(4).fill(0);\n      if (this.isMaster()) {\n        version = Buffer.from('0488ADE4', 'hex');\n        depth = 0;\n        index = 0;\n      } else {\n        depth = ((_a = this.getOrigin()) === null || _a === void 0 ? void 0 : _a.getComponents().length) || ((_b = this.getOrigin()) === null || _b === void 0 ? void 0 : _b.getDepth());\n        const paths = (_c = this.getOrigin()) === null || _c === void 0 ? void 0 : _c.getComponents();\n        const lastPath = paths[paths.length - 1];\n        if (lastPath) {\n          index = lastPath.isHardened() ? lastPath.getIndex() + 0x80000000 : lastPath.getIndex();\n          if (this.getParentFingerprint()) {\n            parentFingerprint = this.getParentFingerprint();\n          }\n        }\n        if (this.isPrivateKey()) {\n          version = Buffer.from('0488ADE4', 'hex');\n        } else {\n          version = Buffer.from('0488B21E', 'hex');\n        }\n      }\n      const depthBuffer = Buffer.alloc(1);\n      depthBuffer.writeUInt8(depth, 0);\n      const indexBuffer = Buffer.alloc(4);\n      indexBuffer.writeUInt32BE(index, 0);\n      const chainCode = this.getChainCode();\n      const key = this.getKey();\n      return (0, bs58check_1.encode)(Buffer.concat([version, depthBuffer, parentFingerprint, indexBuffer, chainCode, key]));\n    };\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_HDKEY;\n    };\n    this.getOutputDescriptorContent = () => {\n      var _a, _b, _c, _d, _e, _f, _g;\n      let result = '';\n      if (this.getOrigin()) {\n        if (((_a = this.getOrigin()) === null || _a === void 0 ? void 0 : _a.getSourceFingerprint()) && ((_b = this.getOrigin()) === null || _b === void 0 ? void 0 : _b.getPath())) {\n          result += `${(_d = (_c = this.getOrigin()) === null || _c === void 0 ? void 0 : _c.getSourceFingerprint()) === null || _d === void 0 ? void 0 : _d.toString('hex')}/${(_e = this.getOrigin()) === null || _e === void 0 ? void 0 : _e.getPath()}`;\n        }\n      }\n      result += this.getBip32Key();\n      if (this.getChildren()) {\n        if ((_f = this.getChildren()) === null || _f === void 0 ? void 0 : _f.getPath()) {\n          result += `/${(_g = this.getChildren()) === null || _g === void 0 ? void 0 : _g.getPath()}`;\n        }\n      }\n      return result;\n    };\n    this.setupMasterKey = args => {\n      this.master = true;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n    };\n    this.setupDeriveKey = args => {\n      this.master = false;\n      this.privateKey = args.isPrivateKey;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n      this.useInfo = args.useInfo;\n      this.origin = args.origin;\n      this.children = args.children;\n      this.parentFingerprint = args.parentFingerprint;\n      this.name = args.name;\n      this.note = args.note;\n    };\n    this.toDataItem = () => {\n      const map = {};\n      if (this.master) {\n        map[Keys.is_master] = true;\n        map[Keys.key_data] = this.key;\n        map[Keys.chain_code] = this.chainCode;\n      } else {\n        if (this.privateKey !== undefined) {\n          map[Keys.is_private] = this.privateKey;\n        }\n        map[Keys.key_data] = this.key;\n        if (this.chainCode) {\n          map[Keys.chain_code] = this.chainCode;\n        }\n        if (this.useInfo) {\n          const useInfo = this.useInfo.toDataItem();\n          useInfo.setTag(this.useInfo.getRegistryType().getTag());\n          map[Keys.use_info] = useInfo;\n        }\n        if (this.origin) {\n          const origin = this.origin.toDataItem();\n          origin.setTag(this.origin.getRegistryType().getTag());\n          map[Keys.origin] = origin;\n        }\n        if (this.children) {\n          const children = this.children.toDataItem();\n          children.setTag(this.children.getRegistryType().getTag());\n          map[Keys.children] = children;\n        }\n        if (this.parentFingerprint) {\n          map[Keys.parent_fingerprint] = this.parentFingerprint.readUInt32BE(0);\n        }\n        if (this.name !== undefined) {\n          map[Keys.name] = this.name;\n        }\n        if (this.note !== undefined) {\n          map[Keys.note] = this.note;\n        }\n      }\n      return new lib_1.DataItem(map);\n    };\n    if (args.isMaster) {\n      this.setupMasterKey(args);\n    } else {\n      this.setupDeriveKey(args);\n    }\n  }\n}\nexports.CryptoHDKey = CryptoHDKey;\nCryptoHDKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const isMaster = !!map[Keys.is_master];\n  const isPrivateKey = map[Keys.is_private];\n  const key = map[Keys.key_data];\n  const chainCode = map[Keys.chain_code];\n  const useInfo = map[Keys.use_info] ? CryptoCoinInfo_1.CryptoCoinInfo.fromDataItem(map[Keys.use_info]) : undefined;\n  const origin = map[Keys.origin] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.origin]) : undefined;\n  const children = map[Keys.children] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.children]) : undefined;\n  const _parentFingerprint = map[Keys.parent_fingerprint];\n  let parentFingerprint = undefined;\n  if (_parentFingerprint) {\n    parentFingerprint = Buffer.alloc(4);\n    parentFingerprint.writeUInt32BE(_parentFingerprint, 0);\n  }\n  const name = map[Keys.name];\n  const note = map[Keys.note];\n  return new CryptoHDKey({\n    isMaster,\n    isPrivateKey,\n    key,\n    chainCode,\n    useInfo,\n    origin,\n    children,\n    parentFingerprint,\n    name,\n    note\n  });\n};\nCryptoHDKey.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoHDKey.fromDataItem(dataItem);\n};\n//# sourceMappingURL=CryptoHDKey.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}