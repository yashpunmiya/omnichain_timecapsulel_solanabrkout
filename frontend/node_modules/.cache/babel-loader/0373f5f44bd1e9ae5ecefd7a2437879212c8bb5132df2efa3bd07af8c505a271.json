{"ast":null,"code":"import { secp256k1 } from 'ethereum-cryptography/secp256k1.js';\nimport { hexToBytes } from './bytes.js';\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexport const MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nexport const SECP256K1_ORDER = secp256k1.CURVE.n;\nexport const SECP256K1_ORDER_DIV_2 = secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nexport const TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = hexToBytes(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = hexToBytes(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = hexToBytes(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */\nexport const RLP_EMPTY_STRING = Uint8Array.from([0x80]);\nexport const MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nexport const RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';\n/**\n * BigInt constants\n */\nexport const BIGINT_NEG1 = BigInt(-1);\nexport const BIGINT_0 = BigInt(0);\nexport const BIGINT_1 = BigInt(1);\nexport const BIGINT_2 = BigInt(2);\nexport const BIGINT_3 = BigInt(3);\nexport const BIGINT_7 = BigInt(7);\nexport const BIGINT_8 = BigInt(8);\nexport const BIGINT_27 = BigInt(27);\nexport const BIGINT_28 = BigInt(28);\nexport const BIGINT_31 = BigInt(31);\nexport const BIGINT_32 = BigInt(32);\nexport const BIGINT_64 = BigInt(64);\nexport const BIGINT_128 = BigInt(128);\nexport const BIGINT_255 = BigInt(255);\nexport const BIGINT_256 = BigInt(256);\nexport const BIGINT_96 = BigInt(96);\nexport const BIGINT_100 = BigInt(100);\nexport const BIGINT_160 = BigInt(160);\nexport const BIGINT_224 = BigInt(224);\nexport const BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nexport const BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nexport const BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nexport const BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256;\n//# sourceMappingURL=constants.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}