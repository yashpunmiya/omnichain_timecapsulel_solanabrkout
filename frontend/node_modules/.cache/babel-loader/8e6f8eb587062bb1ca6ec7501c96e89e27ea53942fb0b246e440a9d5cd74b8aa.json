{"ast":null,"code":"import { commitmentToVersionedHash } from './commitmentToVersionedHash.js';\n/**\n * Transforms a list of sidecars to their versioned hashes.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * const versionedHashes = sidecarsToVersionedHashes({ sidecars })\n * ```\n */\nexport function sidecarsToVersionedHashes(parameters) {\n  const {\n    sidecars,\n    version\n  } = parameters;\n  const to = parameters.to ?? (typeof sidecars[0].blob === 'string' ? 'hex' : 'bytes');\n  const hashes = [];\n  for (const {\n    commitment\n  } of sidecars) {\n    hashes.push(commitmentToVersionedHash({\n      commitment,\n      to,\n      version\n    }));\n  }\n  return hashes;\n}","map":{"version":3,"names":["commitmentToVersionedHash","sidecarsToVersionedHashes","parameters","sidecars","version","to","blob","hashes","commitment","push"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\blob\\sidecarsToVersionedHashes.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { BlobSidecars } from '../../types/eip4844.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CommitmentToVersionedHashErrorType,\n  commitmentToVersionedHash,\n} from './commitmentToVersionedHash.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type SidecarsToVersionedHashesParameters<\n  sidecars extends BlobSidecars = BlobSidecars,\n  to extends To | undefined = undefined,\n> = {\n  /** Sidecars from blobs. */\n  sidecars: sidecars | BlobSidecars\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hashes. */\n  version?: number | undefined\n}\n\nexport type SidecarsToVersionedHashesReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type SidecarsToVersionedHashesErrorType =\n  | CommitmentToVersionedHashErrorType\n  | ErrorType\n\n/**\n * Transforms a list of sidecars to their versioned hashes.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * const versionedHashes = sidecarsToVersionedHashes({ sidecars })\n * ```\n */\nexport function sidecarsToVersionedHashes<\n  const sidecars extends BlobSidecars,\n  to extends To =\n    | (sidecars extends BlobSidecars<Hex> ? 'hex' : never)\n    | (sidecars extends BlobSidecars<ByteArray> ? 'bytes' : never),\n>(\n  parameters: SidecarsToVersionedHashesParameters<sidecars, to>,\n): SidecarsToVersionedHashesReturnType<to> {\n  const { sidecars, version } = parameters\n\n  const to =\n    parameters.to ?? (typeof sidecars[0].blob === 'string' ? 'hex' : 'bytes')\n\n  const hashes: Uint8Array[] | Hex[] = []\n  for (const { commitment } of sidecars) {\n    hashes.push(\n      commitmentToVersionedHash({\n        commitment,\n        to,\n        version,\n      }) as any,\n    )\n  }\n  return hashes as any\n}\n"],"mappings":"AAGA,SAEEA,yBAAyB,QACpB,gCAAgC;AAwBvC;;;;;;;;;;;AAWA,OAAM,SAAUC,yBAAyBA,CAMvCC,UAA6D;EAE7D,MAAM;IAAEC,QAAQ;IAAEC;EAAO,CAAE,GAAGF,UAAU;EAExC,MAAMG,EAAE,GACNH,UAAU,CAACG,EAAE,KAAK,OAAOF,QAAQ,CAAC,CAAC,CAAC,CAACG,IAAI,KAAK,QAAQ,GAAG,KAAK,GAAG,OAAO,CAAC;EAE3E,MAAMC,MAAM,GAAyB,EAAE;EACvC,KAAK,MAAM;IAAEC;EAAU,CAAE,IAAIL,QAAQ,EAAE;IACrCI,MAAM,CAACE,IAAI,CACTT,yBAAyB,CAAC;MACxBQ,UAAU;MACVH,EAAE;MACFD;KACD,CAAQ,CACV;EACH;EACA,OAAOG,MAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}