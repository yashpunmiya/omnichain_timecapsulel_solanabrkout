{"ast":null,"code":"import { versionedHashVersionKzg } from '../../constants/kzg.js';\nimport { maxUint256 } from '../../constants/number.js';\nimport { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { EmptyBlobError, InvalidVersionedHashSizeError, InvalidVersionedHashVersionError } from '../../errors/blob.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { hexToNumber } from '../encoding/fromHex.js';\nexport function assertTransactionEIP7702(transaction) {\n  const {\n    authorizationList\n  } = transaction;\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const {\n        chainId\n      } = authorization;\n      const address = authorization.address;\n      if (!isAddress(address)) throw new InvalidAddressError({\n        address\n      });\n      if (chainId < 0) throw new InvalidChainIdError({\n        chainId\n      });\n    }\n  }\n  assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP4844(transaction) {\n  const {\n    blobVersionedHashes\n  } = transaction;\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError();\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash);\n      const version = hexToNumber(slice(hash, 0, 1));\n      if (size_ !== 32) throw new InvalidVersionedHashSizeError({\n        hash,\n        size: size_\n      });\n      if (version !== versionedHashVersionKzg) throw new InvalidVersionedHashVersionError({\n        hash,\n        version\n      });\n    }\n  }\n  assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP1559(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (maxFeePerGas && maxFeePerGas > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n}\nexport function assertTransactionEIP2930(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (maxPriorityFeePerGas || maxFeePerGas) throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.');\n  if (gasPrice && gasPrice > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas: gasPrice\n  });\n}\nexport function assertTransactionLegacy(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (typeof chainId !== 'undefined' && chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (maxPriorityFeePerGas || maxFeePerGas) throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.');\n  if (gasPrice && gasPrice > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas: gasPrice\n  });\n}","map":{"version":3,"names":["versionedHashVersionKzg","maxUint256","InvalidAddressError","BaseError","EmptyBlobError","InvalidVersionedHashSizeError","InvalidVersionedHashVersionError","InvalidChainIdError","FeeCapTooHighError","TipAboveFeeCapError","isAddress","size","slice","hexToNumber","assertTransactionEIP7702","transaction","authorizationList","authorization","chainId","address","assertTransactionEIP1559","assertTransactionEIP4844","blobVersionedHashes","length","hash","size_","version","maxPriorityFeePerGas","maxFeePerGas","to","assertTransactionEIP2930","gasPrice","assertTransactionLegacy"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\transaction\\assertTransaction.ts"],"sourcesContent":["import { versionedHashVersionKzg } from '../../constants/kzg.js'\nimport { maxUint256 } from '../../constants/number.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n  InvalidVersionedHashSizeError,\n  type InvalidVersionedHashSizeErrorType,\n  InvalidVersionedHashVersionError,\n  type InvalidVersionedHashVersionErrorType,\n} from '../../errors/blob.js'\nimport {\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from '../../errors/chain.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { size } from '../data/size.js'\nimport { slice } from '../data/slice.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nexport type AssertTransactionEIP7702ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | ErrorType\n\nexport function assertTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n) {\n  const { authorizationList } = transaction\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const { chainId } = authorization\n      const address = authorization.address\n      if (!isAddress(address)) throw new InvalidAddressError({ address })\n      if (chainId < 0) throw new InvalidChainIdError({ chainId })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP4844ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | EmptyBlobErrorType\n  | InvalidVersionedHashSizeErrorType\n  | InvalidVersionedHashVersionErrorType\n  | ErrorType\n\nexport function assertTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n) {\n  const { blobVersionedHashes } = transaction\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError()\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash)\n      const version = hexToNumber(slice(hash, 0, 1))\n      if (size_ !== 32)\n        throw new InvalidVersionedHashSizeError({ hash, size: size_ })\n      if (version !== versionedHashVersionKzg)\n        throw new InvalidVersionedHashVersionError({\n          hash,\n          version,\n        })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP1559ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n\nexport type AssertTransactionEIP2930ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n\nexport type AssertTransactionLegacyErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new InvalidChainIdError({ chainId })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}