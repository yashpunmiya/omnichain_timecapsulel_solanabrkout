{"ast":null,"code":"import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n\n// #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n  const tracingHeader = response.headers.get(\"x-web3-correlation-id\");\n  if (tracingHeader) log.info(`Request tracing with traceID = ${tracingHeader}`);\n}\nconst promiseTimeout = async (ms, promise) => {\n  let timeoutFunc = null;\n  try {\n    const timeout = new Promise((_resolve, reject) => {\n      timeoutFunc = setTimeout(() => {\n        reject(new Error(`Timed out in ${ms}ms`));\n      }, ms);\n    });\n    const result = await Promise.race([promise, timeout]);\n    // promise.race will return the first resolved promise\n    // then we clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    return result;\n  } catch (err) {\n    // clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    // rethrow the original error\n    throw err;\n  }\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (customOptions.logTracingHeader) {\n      logTracingHeader(response);\n    }\n    if (response.ok) {\n      const responseContentType = response.headers.get(\"content-type\");\n      if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n        return response.json();\n      }\n      return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((_resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"names":["_objectSpread","merge","logLevel","levels","log","getLogger","setLevel","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","logTracingHeader","tracingHeader","get","promiseTimeout","ms","promise","timeoutFunc","timeout","Promise","_resolve","reject","setTimeout","Error","result","race","clearTimeout","err","options_","arguments","length","undefined","customOptions","defaultOptions","mode","useAPIKey","options","method","ok","responseContentType","json","text","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","id","params","promiseRace"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js"],"sourcesContent":["import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n\n// #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n  const tracingHeader = response.headers.get(\"x-web3-correlation-id\");\n  if (tracingHeader) log.info(`Request tracing with traceID = ${tracingHeader}`);\n}\nconst promiseTimeout = async (ms, promise) => {\n  let timeoutFunc = null;\n  try {\n    const timeout = new Promise((_resolve, reject) => {\n      timeoutFunc = setTimeout(() => {\n        reject(new Error(`Timed out in ${ms}ms`));\n      }, ms);\n    });\n    const result = await Promise.race([promise, timeout]);\n    // promise.race will return the first resolved promise\n    // then we clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    return result;\n  } catch (err) {\n    // clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    // rethrow the original error\n    throw err;\n  }\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (customOptions.logTracingHeader) {\n      logTracingHeader(response);\n    }\n    if (response.ok) {\n      const responseContentType = response.headers.get(\"content-type\");\n      if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n        return response.json();\n      }\n      return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    return response.text();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((_resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,sCAAsC;AAChE,OAAOC,KAAK,MAAM,cAAc;AAChC,OAAOC,QAAQ,IAAIC,MAAM,QAAQ,UAAU;AAE3C,MAAMC,GAAG,GAAGF,QAAQ,CAACG,SAAS,CAAC,cAAc,CAAC;AAC9CD,GAAG,CAACE,QAAQ,CAACH,MAAM,CAACI,IAAI,CAAC;AACzB,IAAIC,MAAM,GAAG,eAAe;AAC5B,IAAIC,SAAS,GAAG,EAAE;;AAElB;AACA,MAAMC,iBAAiB,GAAG,WAAW;AACrC,MAAMC,sBAAsB,GAAG,cAAc;AAC7C,IAAIC,MAAM,GAAG,IAAI;AACjB,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,YAAY,GAAG,EAAE;AACvB,SAASC,mBAAmBA,CAACC,OAAO,EAAEC,eAAe,EAAEC,aAAa,EAAE;EACpEN,MAAM,GAAGI,OAAO;EAChBH,cAAc,CAACM,IAAI,CAAC,GAAGF,eAAe,CAAC;EACvCH,YAAY,CAACK,IAAI,CAAC,GAAGD,aAAa,CAAC;AACrC;AACA,SAASE,YAAYA,CAACC,UAAU,EAAE;EAChCZ,SAAS,GAAGY,UAAU;AACxB;AACA,SAASC,cAAcA,CAAA,EAAG;EACxBb,SAAS,GAAG,EAAE;AAChB;AACA,SAASc,YAAYA,CAAA,EAAG;EACtB,OAAOd,SAAS;AAClB;AACA,SAASe,SAASA,CAACC,OAAO,EAAE;EAC1BjB,MAAM,GAAGiB,OAAO;AAClB;AACA,SAASC,WAAWA,CAAA,EAAG;EACrBlB,MAAM,GAAG,eAAe;AAC1B;AACA,SAASmB,SAASA,CAAA,EAAG;EACnB,OAAOnB,MAAM;AACf;;AAEA;;AAEA,SAASoB,WAAWA,CAACC,KAAK,EAAE;EAC1BzB,GAAG,CAACE,QAAQ,CAACuB,KAAK,CAAC;AACrB;AACA,eAAeC,aAAaA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACtC,IAAIC,IAAI,GAAG,IAAI;EACf,IAAI;IACFA,IAAI,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE,CAAC;EACjB,IAAIvB,MAAM,IAAIqB,IAAI,KAAKpB,cAAc,CAACuB,QAAQ,CAACH,IAAI,CAACI,MAAM,CAAC,IAAIvB,YAAY,CAACsB,QAAQ,CAACH,IAAI,CAACK,QAAQ,CAAC,CAAC,EAAE;IACpG,MAAMC,WAAW,GAAG3B,MAAM,CAAC4B,gBAAgB,CAAC;MAC1CC,IAAI,EAAEV;IACR,CAAC,CAAC;IACF,MAAMW,IAAI,GAAGH,WAAW,CAACI,UAAU,CAAC;MAClCC,EAAE,EAAE;IACN,CAAC,CAAC,CAAC,CAAC;;IAEJ,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACf,GAAG,EAAEC,IAAI,CAAC;IACvCU,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEfR,WAAW,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEtB,OAAOF,QAAQ;EACjB;EACA,OAAOC,KAAK,CAACf,GAAG,EAAEC,IAAI,CAAC;AACzB;AACA,SAASgB,gBAAgBA,CAAA,EAAG;EAC1B,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,IAAIzC,MAAM,EAAEyC,OAAO,CAACvC,iBAAiB,CAAC,GAAGF,MAAM;EAC/C,IAAIC,SAAS,EAAEwC,OAAO,CAACtC,sBAAsB,CAAC,GAAGF,SAAS;EAC1D,OAAOwC,OAAO;AAChB;AACA,SAASC,gBAAgBA,CAACL,QAAQ,EAAE;EAClCzC,GAAG,CAAC+C,IAAI,CAAC,aAAaN,QAAQ,CAACO,MAAM,IAAIP,QAAQ,CAACQ,UAAU,EAAE,CAAC;EAC/DjD,GAAG,CAAC+C,IAAI,CAAC,QAAQN,QAAQ,CAACd,GAAG,EAAE,CAAC;AAClC;AACA,SAASuB,gBAAgBA,CAACT,QAAQ,EAAE;EAClC,MAAMU,aAAa,GAAGV,QAAQ,CAACI,OAAO,CAACO,GAAG,CAAC,uBAAuB,CAAC;EACnE,IAAID,aAAa,EAAEnD,GAAG,CAAC+C,IAAI,CAAC,kCAAkCI,aAAa,EAAE,CAAC;AAChF;AACA,MAAME,cAAc,GAAG,MAAAA,CAAOC,EAAE,EAAEC,OAAO,KAAK;EAC5C,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAI;IACF,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,QAAQ,EAAEC,MAAM,KAAK;MAChDJ,WAAW,GAAGK,UAAU,CAAC,MAAM;QAC7BD,MAAM,CAAC,IAAIE,KAAK,CAAC,gBAAgBR,EAAE,IAAI,CAAC,CAAC;MAC3C,CAAC,EAAEA,EAAE,CAAC;IACR,CAAC,CAAC;IACF,MAAMS,MAAM,GAAG,MAAML,OAAO,CAACM,IAAI,CAAC,CAACT,OAAO,EAAEE,OAAO,CAAC,CAAC;IACrD;IACA;IACA,IAAID,WAAW,IAAI,IAAI,EAAE;MACvBS,YAAY,CAACT,WAAW,CAAC;IAC3B;IACA,OAAOO,MAAM;EACf,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZ;IACA,IAAIV,WAAW,IAAI,IAAI,EAAE;MACvBS,YAAY,CAACT,WAAW,CAAC;IAC3B;IACA;IACA,MAAMU,GAAG;EACX;AACF,CAAC;AACD,MAAMd,GAAG,GAAG,eAAAA,CAAgBzB,GAAG,EAAE;EAC/B,IAAIwC,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrF,IAAIG,aAAa,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1F,MAAMI,cAAc,GAAG;IACrBC,IAAI,EAAE,MAAM;IACZ5B,OAAO,EAAE,CAAC;EACZ,CAAC;EACD,IAAI0B,aAAa,CAACG,SAAS,EAAE;IAC3BF,cAAc,CAAC3B,OAAO,GAAGjD,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE4E,cAAc,CAAC3B,OAAO,CAAC,EAAED,gBAAgB,CAAC,CAAC,CAAC;EACvG;EACA,MAAM+B,OAAO,GAAG9E,KAAK,CAAC2E,cAAc,EAAEL,QAAQ,EAAE;IAC9CS,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMnC,QAAQ,GAAG,MAAMf,aAAa,CAACC,GAAG,EAAEgD,OAAO,CAAC;EAClD,IAAIlC,QAAQ,CAACoC,EAAE,EAAE;IACf,MAAMC,mBAAmB,GAAGrC,QAAQ,CAACI,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;IAChE,IAAI0B,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,IAAIA,mBAAmB,CAAC9C,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACtH,OAAOS,QAAQ,CAACsC,IAAI,CAAC,CAAC;IACxB;IACA,OAAOtC,QAAQ,CAACuC,IAAI,CAAC,CAAC;EACxB;EACAlC,gBAAgB,CAACL,QAAQ,CAAC;EAC1B,MAAMA,QAAQ;AAChB,CAAC;AACD,MAAMwC,IAAI,GAAG,SAAAA,CAAUtD,GAAG,EAAE;EAC1B,IAAIuD,IAAI,GAAGd,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjF,IAAID,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrF,IAAIG,aAAa,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1F,MAAMI,cAAc,GAAG;IACrBC,IAAI,EAAE,MAAM;IACZ5B,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EACD,IAAI0B,aAAa,CAACG,SAAS,EAAE;IAC3BF,cAAc,CAAC3B,OAAO,GAAGjD,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE4E,cAAc,CAAC3B,OAAO,CAAC,EAAED,gBAAgB,CAAC,CAAC,CAAC;EACvG;EACA,MAAM+B,OAAO,GAAG9E,KAAK,CAAC2E,cAAc,EAAEL,QAAQ,EAAE;IAC9CS,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA;EACA,IAAIL,aAAa,CAACY,gBAAgB,EAAE;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAI,GAAGF,IAAI;IACnB;IACA,IAAIP,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC,KAAK,iCAAiC,EAAE,OAAO8B,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC;EACnH,CAAC,MAAM;IACL8B,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;EACrC;EACA,OAAO7B,cAAc,CAACkB,aAAa,CAACd,OAAO,IAAI,KAAK,EAAE/B,aAAa,CAACC,GAAG,EAAEgD,OAAO,CAAC,CAACY,IAAI,CAAC9C,QAAQ,IAAI;IACjG,IAAI8B,aAAa,CAACrB,gBAAgB,EAAE;MAClCA,gBAAgB,CAACT,QAAQ,CAAC;IAC5B;IACA,IAAIA,QAAQ,CAACoC,EAAE,EAAE;MACf,MAAMC,mBAAmB,GAAGrC,QAAQ,CAACI,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;MAChE,IAAI0B,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,IAAIA,mBAAmB,CAAC9C,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QACtH,OAAOS,QAAQ,CAACsC,IAAI,CAAC,CAAC;MACxB;MACA,OAAOtC,QAAQ,CAACuC,IAAI,CAAC,CAAC;IACxB;IACAlC,gBAAgB,CAACL,QAAQ,CAAC;IAC1B,MAAMA,QAAQ;EAChB,CAAC,CAAC,CAAC;AACL,CAAC;AACD,MAAM+C,KAAK,GAAG,eAAAA,CAAgB7D,GAAG,EAAE;EACjC,IAAIuD,IAAI,GAAGd,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjF,IAAID,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrF,IAAIG,aAAa,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1F,MAAMI,cAAc,GAAG;IACrBC,IAAI,EAAE,MAAM;IACZ5B,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EACD;EACA;EACA;EACA,IAAI0B,aAAa,CAACG,SAAS,EAAE;IAC3BF,cAAc,CAAC3B,OAAO,GAAGjD,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE4E,cAAc,CAAC3B,OAAO,CAAC,EAAED,gBAAgB,CAAC,CAAC,CAAC;EACvG;EACA,MAAM+B,OAAO,GAAG9E,KAAK,CAAC2E,cAAc,EAAEL,QAAQ,EAAE;IAC9CS,MAAM,EAAE;EACV,CAAC,CAAC;EACF;EACA;EACA,IAAIL,aAAa,CAACY,gBAAgB,EAAE;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAI,GAAGF,IAAI;IACnB;IACA,IAAIP,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC,KAAK,iCAAiC,EAAE,OAAO8B,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC;EACnH,CAAC,MAAM;IACL8B,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;EACrC;EACA,MAAMzC,QAAQ,GAAG,MAAMf,aAAa,CAACC,GAAG,EAAEgD,OAAO,CAAC;EAClD,IAAIlC,QAAQ,CAACoC,EAAE,EAAE;IACf,MAAMC,mBAAmB,GAAGrC,QAAQ,CAACI,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;IAChE,IAAI0B,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,IAAIA,mBAAmB,CAAC9C,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACtH,OAAOS,QAAQ,CAACsC,IAAI,CAAC,CAAC;IACxB;IACA,OAAOtC,QAAQ,CAACuC,IAAI,CAAC,CAAC;EACxB;EACAlC,gBAAgB,CAACL,QAAQ,CAAC;EAC1B,MAAMA,QAAQ;AAChB,CAAC;AACD,MAAMgD,GAAG,GAAG,eAAAA,CAAgB9D,GAAG,EAAE;EAC/B,IAAIuD,IAAI,GAAGd,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjF,IAAID,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrF,IAAIG,aAAa,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1F,MAAMI,cAAc,GAAG;IACrBC,IAAI,EAAE,MAAM;IACZ5B,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EACD;EACA;EACA;EACA,IAAI0B,aAAa,CAACG,SAAS,EAAE;IAC3BF,cAAc,CAAC3B,OAAO,GAAGjD,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE4E,cAAc,CAAC3B,OAAO,CAAC,EAAED,gBAAgB,CAAC,CAAC,CAAC;EACvG;EACA,MAAM+B,OAAO,GAAG9E,KAAK,CAAC2E,cAAc,EAAEL,QAAQ,EAAE;IAC9CS,MAAM,EAAE;EACV,CAAC,CAAC;EACF;EACA;EACA,IAAIL,aAAa,CAACY,gBAAgB,EAAE;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAI,GAAGF,IAAI;IACnB;IACA,IAAIP,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC,KAAK,iCAAiC,EAAE,OAAO8B,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC;EACnH,CAAC,MAAM;IACL8B,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;EACrC;EACA,MAAMzC,QAAQ,GAAG,MAAMf,aAAa,CAACC,GAAG,EAAEgD,OAAO,CAAC;EAClD,IAAIlC,QAAQ,CAACoC,EAAE,EAAE;IACf,MAAMC,mBAAmB,GAAGrC,QAAQ,CAACI,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;IAChE,IAAI0B,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,IAAIA,mBAAmB,CAAC9C,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACtH,OAAOS,QAAQ,CAACsC,IAAI,CAAC,CAAC;IACxB;IACA,OAAOtC,QAAQ,CAACuC,IAAI,CAAC,CAAC;EACxB;EACAlC,gBAAgB,CAACL,QAAQ,CAAC;EAC1B,MAAMA,QAAQ;AAChB,CAAC;AACD,MAAMiD,MAAM,GAAG,eAAAA,CAAgB/D,GAAG,EAAE;EAClC,IAAIuD,IAAI,GAAGd,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjF,IAAID,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrF,IAAIG,aAAa,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1F,MAAMI,cAAc,GAAG;IACrBC,IAAI,EAAE,MAAM;IACZ5B,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EACD;EACA;EACA;EACA,IAAI0B,aAAa,CAACG,SAAS,EAAE;IAC3BF,cAAc,CAAC3B,OAAO,GAAGjD,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE4E,cAAc,CAAC3B,OAAO,CAAC,EAAED,gBAAgB,CAAC,CAAC,CAAC;EACvG;EACA,MAAM+B,OAAO,GAAG9E,KAAK,CAAC2E,cAAc,EAAEL,QAAQ,EAAE;IAC9CS,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAIL,aAAa,CAACY,gBAAgB,EAAE;IAClC;IACA;IACA;IACAR,OAAO,CAACS,IAAI,GAAGF,IAAI;IACnB;IACA,IAAIP,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC,KAAK,iCAAiC,EAAE,OAAO8B,OAAO,CAAC9B,OAAO,CAAC,cAAc,CAAC;EACnH,CAAC,MAAM;IACL8B,OAAO,CAACS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;EACrC;EACA,MAAMzC,QAAQ,GAAG,MAAMf,aAAa,CAACC,GAAG,EAAEgD,OAAO,CAAC;EAClD,IAAIlC,QAAQ,CAACoC,EAAE,EAAE;IACf,MAAMC,mBAAmB,GAAGrC,QAAQ,CAACI,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;IAChE,IAAI0B,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,IAAIA,mBAAmB,CAAC9C,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACtH,OAAOS,QAAQ,CAACsC,IAAI,CAAC,CAAC;IACxB;IACA,OAAOtC,QAAQ,CAACuC,IAAI,CAAC,CAAC;EACxB;EACAlC,gBAAgB,CAACL,QAAQ,CAAC;EAC1B,MAAMA,QAAQ;AAChB,CAAC;AACD,MAAMkD,qBAAqB,GAAGA,CAACf,MAAM,EAAEgB,UAAU,MAAM;EACrDC,OAAO,EAAE,KAAK;EACdjB,MAAM;EACNkB,EAAE,EAAE,EAAE;EACNC,MAAM,EAAEH;AACV,CAAC,CAAC;AACF,MAAMI,WAAW,GAAG,SAAAA,CAAUrE,GAAG,EAAEgD,OAAO,EAAE;EAC1C,IAAIlB,OAAO,GAAGW,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;EACvF,OAAOV,OAAO,CAACM,IAAI,CAAC,CAACZ,GAAG,CAACzB,GAAG,EAAEgD,OAAO,CAAC,EAAE,IAAIjB,OAAO,CAAC,CAACC,QAAQ,EAAEC,MAAM,KAAK;IACxEC,UAAU,CAAC,MAAM;MACfD,MAAM,CAAC,IAAIE,KAAK,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC,EAAEL,OAAO,CAAC;EACb,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;AAED,SAASnC,WAAW,EAAEJ,cAAc,EAAEP,mBAAmB,EAAEL,iBAAiB,EAAEC,sBAAsB,EAAEoF,qBAAqB,EAAEvC,GAAG,EAAE7B,SAAS,EAAEJ,YAAY,EAAEqE,KAAK,EAAEP,IAAI,EAAEe,WAAW,EAAE3C,cAAc,EAAEoC,GAAG,EAAEC,MAAM,EAAEtE,SAAS,EAAEJ,YAAY,EAAEQ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}