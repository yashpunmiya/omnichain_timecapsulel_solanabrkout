{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { MELD_PUBLIC_KEY, ONRAMP_PROVIDERS } from '../utils/ConstantsUtil.js';\nimport { AccountController } from './AccountController.js';\nimport { ApiController } from './ApiController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nexport const USDC_CURRENCY_DEFAULT = {\n  id: '2b92315d-eab7-5bef-84fa-089a131333f5',\n  name: 'USD Coin',\n  symbol: 'USDC',\n  networks: [{\n    name: 'ethereum-mainnet',\n    display_name: 'Ethereum',\n    chain_id: '1',\n    contract_address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'\n  }, {\n    name: 'polygon-mainnet',\n    display_name: 'Polygon',\n    chain_id: '137',\n    contract_address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n  }]\n};\nexport const USD_CURRENCY_DEFAULT = {\n  id: 'USD',\n  payment_method_limits: [{\n    id: 'card',\n    min: '10.00',\n    max: '7500.00'\n  }, {\n    id: 'ach_bank_account',\n    min: '10.00',\n    max: '25000.00'\n  }]\n};\nconst defaultState = {\n  providers: ONRAMP_PROVIDERS,\n  selectedProvider: null,\n  error: null,\n  purchaseCurrency: USDC_CURRENCY_DEFAULT,\n  paymentCurrency: USD_CURRENCY_DEFAULT,\n  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],\n  paymentCurrencies: [],\n  quotesLoading: false\n};\n// -- State --------------------------------------------- //\nconst state = proxy(defaultState);\n// -- Controller ---------------------------------------- //\nexport const OnRampController = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  setSelectedProvider(provider) {\n    if (provider && provider.name === 'meld') {\n      const currency = ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA ? 'SOL' : 'USDC';\n      const address = AccountController.state.address ?? '';\n      const url = new URL(provider.url);\n      url.searchParams.append('publicKey', MELD_PUBLIC_KEY);\n      url.searchParams.append('destinationCurrencyCode', currency);\n      url.searchParams.append('walletAddress', address);\n      provider.url = url.toString();\n    }\n    state.selectedProvider = provider;\n  },\n  setPurchaseCurrency(currency) {\n    state.purchaseCurrency = currency;\n  },\n  setPaymentCurrency(currency) {\n    state.paymentCurrency = currency;\n  },\n  setPurchaseAmount(amount) {\n    this.state.purchaseAmount = amount;\n  },\n  setPaymentAmount(amount) {\n    this.state.paymentAmount = amount;\n  },\n  async getAvailableCurrencies() {\n    const options = await BlockchainApiController.getOnrampOptions();\n    state.purchaseCurrencies = options.purchaseCurrencies;\n    state.paymentCurrencies = options.paymentCurrencies;\n    state.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;\n    state.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;\n    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map(currency => currency.id));\n    await ApiController.fetchTokenImages(options.purchaseCurrencies.map(currency => currency.symbol));\n  },\n  async getQuote() {\n    state.quotesLoading = true;\n    try {\n      const quote = await BlockchainApiController.getOnrampQuote({\n        purchaseCurrency: state.purchaseCurrency,\n        paymentCurrency: state.paymentCurrency,\n        amount: state.paymentAmount?.toString() || '0',\n        network: state.purchaseCurrency?.symbol\n      });\n      state.quotesLoading = false;\n      state.purchaseAmount = Number(quote?.purchaseAmount.amount);\n      return quote;\n    } catch (error) {\n      state.error = error.message;\n      state.quotesLoading = false;\n      return null;\n    } finally {\n      state.quotesLoading = false;\n    }\n  },\n  resetState() {\n    state.providers = ONRAMP_PROVIDERS;\n    state.selectedProvider = null;\n    state.error = null;\n    state.purchaseCurrency = USDC_CURRENCY_DEFAULT;\n    state.paymentCurrency = USD_CURRENCY_DEFAULT;\n    state.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];\n    state.paymentCurrencies = [];\n    state.paymentAmount = undefined;\n    state.purchaseAmount = undefined;\n    state.quotesLoading = false;\n  }\n};","map":{"version":3,"names":["proxy","subscribe","sub","subscribeKey","subKey","ConstantsUtil","MELD_PUBLIC_KEY","ONRAMP_PROVIDERS","AccountController","ApiController","BlockchainApiController","ChainController","USDC_CURRENCY_DEFAULT","id","name","symbol","networks","display_name","chain_id","contract_address","USD_CURRENCY_DEFAULT","payment_method_limits","min","max","defaultState","providers","selectedProvider","error","purchaseCurrency","paymentCurrency","purchaseCurrencies","paymentCurrencies","quotesLoading","state","OnRampController","callback","key","setSelectedProvider","provider","currency","activeChain","CHAIN","SOLANA","address","url","URL","searchParams","append","toString","setPurchaseCurrency","setPaymentCurrency","setPurchaseAmount","amount","purchaseAmount","setPaymentAmount","paymentAmount","getAvailableCurrencies","options","getOnrampOptions","fetchCurrencyImages","map","fetchTokenImages","getQuote","quote","getOnrampQuote","network","Number","message","resetState","undefined"],"sources":["../../../../src/controllers/OnRampController.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}