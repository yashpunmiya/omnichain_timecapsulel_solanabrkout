{"ast":null,"code":"import { RpcRequestError } from '../../errors/request.js';\nimport { UrlRequiredError } from '../../errors/transport.js';\nimport { getSocket } from '../../utils/rpc/compat.js';\nimport { getWebSocketRpcClient } from '../../utils/rpc/webSocket.js';\nimport { createTransport } from './createTransport.js';\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\nurl, config = {}) {\n  const {\n    keepAlive,\n    key = 'webSocket',\n    methods,\n    name = 'WebSocket JSON-RPC',\n    reconnect,\n    retryDelay\n  } = config;\n  return ({\n    chain,\n    retryCount: retryCount_,\n    timeout: timeout_\n  }) => {\n    const retryCount = config.retryCount ?? retryCount_;\n    const timeout = timeout_ ?? config.timeout ?? 10_000;\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0];\n    if (!url_) throw new UrlRequiredError();\n    return createTransport({\n      key,\n      methods,\n      name,\n      async request({\n        method,\n        params\n      }) {\n        const body = {\n          method,\n          params\n        };\n        const rpcClient = await getWebSocketRpcClient(url_, {\n          keepAlive,\n          reconnect\n        });\n        const {\n          error,\n          result\n        } = await rpcClient.requestAsync({\n          body,\n          timeout\n        });\n        if (error) throw new RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'webSocket'\n    }, {\n      getSocket() {\n        return getSocket(url_);\n      },\n      getRpcClient() {\n        return getWebSocketRpcClient(url_);\n      },\n      async subscribe({\n        params,\n        onData,\n        onError\n      }) {\n        const rpcClient = await getWebSocketRpcClient(url_);\n        const {\n          result: subscriptionId\n        } = await new Promise((resolve, reject) => rpcClient.request({\n          body: {\n            method: 'eth_subscribe',\n            params\n          },\n          onError(error) {\n            reject(error);\n            onError?.(error);\n            return;\n          },\n          onResponse(response) {\n            if (response.error) {\n              reject(response.error);\n              onError?.(response.error);\n              return;\n            }\n            if (typeof response.id === 'number') {\n              resolve(response);\n              return;\n            }\n            if (response.method !== 'eth_subscription') return;\n            onData(response.params);\n          }\n        }));\n        return {\n          subscriptionId,\n          async unsubscribe() {\n            return new Promise(resolve => rpcClient.request({\n              body: {\n                method: 'eth_unsubscribe',\n                params: [subscriptionId]\n              },\n              onResponse: resolve\n            }));\n          }\n        };\n      }\n    });\n  };\n}\n//# sourceMappingURL=webSocket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}