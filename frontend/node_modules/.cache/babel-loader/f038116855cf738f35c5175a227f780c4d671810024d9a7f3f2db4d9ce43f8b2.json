{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LIBUSB_ERROR_MESSAGE = exports.serializeError = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;\nexports.ERROR_CODES = {\n  Init_NotInitialized: 'TrezorConnect not initialized',\n  Init_AlreadyInitialized: 'TrezorConnect has been already initialized',\n  Init_IframeBlocked: 'Iframe blocked',\n  Init_IframeTimeout: 'Iframe timeout',\n  Init_ManifestMissing: 'Manifest not set. Read more at https://github.com/trezor/trezor-suite/blob/develop/docs/packages/connect/index.md',\n  Popup_ConnectionMissing: 'Unable to establish connection with iframe',\n  Desktop_ConnectionMissing: 'Unable to establish connection with Suite',\n  Transport_Missing: 'Transport is missing',\n  Method_InvalidPackage: 'This package is not suitable to work with browser. Use @trezor/connect-web package instead',\n  Method_InvalidParameter: '',\n  Method_NotAllowed: 'Method not allowed for this configuration',\n  Method_PermissionsNotGranted: 'Permissions not granted',\n  Method_Cancel: 'Cancelled',\n  Method_Interrupted: 'Popup closed',\n  Method_UnknownCoin: 'Coin not found',\n  Method_AddressNotMatch: 'Addresses do not match',\n  Method_Discovery_BundleException: '',\n  Method_Override: 'override',\n  Method_NoResponse: 'Call resolved without response',\n  Backend_NotSupported: 'BlockchainLink settings not found in coins.json',\n  Backend_WorkerMissing: '',\n  Backend_Disconnected: 'Backend disconnected',\n  Backend_Invalid: 'Invalid backend',\n  Backend_Error: '',\n  Runtime: '',\n  Device_NotFound: 'Device not found',\n  Device_InitializeFailed: '',\n  Device_FwException: '',\n  Device_ModeException: '',\n  Device_Disconnected: 'Device disconnected',\n  Device_UsedElsewhere: 'Device is used in another window',\n  Device_InvalidState: 'Passphrase is incorrect',\n  Device_CallInProgress: 'Device call in progress',\n  Device_MultipleNotSupported: 'Multiple devices are not supported',\n  Device_MissingCapability: 'Device is missing capability',\n  Device_MissingCapabilityBtcOnly: 'Device is missing capability (BTC only)',\n  Failure_ActionCancelled: 'Action cancelled by user',\n  Failure_FirmwareError: 'Firmware installation failed',\n  Failure_UnknownCode: 'Unknown error',\n  Failure_PinCancelled: 'PIN cancelled',\n  Failure_PinInvalid: 'PIN invalid',\n  Failure_PinMismatch: 'PIN mismatch',\n  Failure_WipeCodeMismatch: 'Wipe code mismatch',\n  Failure_EntropyCheck: '',\n  Deeplink_VersionMismatch: 'Not compatible with current version of the app'\n};\nclass TrezorError extends Error {\n  code;\n  message;\n  constructor(code, message) {\n    super(message);\n    this.code = code;\n    this.message = message;\n  }\n  toString() {\n    return `${this.name} (code: ${this.code}): ${this.message}`;\n  }\n}\nexports.TrezorError = TrezorError;\nconst TypedError = (id, message) => new TrezorError(id, message || exports.ERROR_CODES[id]);\nexports.TypedError = TypedError;\nconst serializeError = payload => {\n  if (payload && payload.error instanceof Error) {\n    return {\n      error: payload.error.message,\n      code: payload.error.code\n    };\n  }\n  if (payload instanceof TrezorError) {\n    return {\n      error: payload.message,\n      code: payload.code\n    };\n  }\n  if (payload instanceof Error) {\n    return {\n      error: payload.message,\n      code: 'code' in payload ? payload.code : 'Failure_UnknownCode'\n    };\n  }\n  return {\n    ...payload\n  };\n};\nexports.serializeError = serializeError;\nexports.LIBUSB_ERROR_MESSAGE = 'LIBUSB_ERROR';\n//# sourceMappingURL=errors.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}