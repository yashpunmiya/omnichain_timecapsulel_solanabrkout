{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signTransaction'\n  });\n  const account = parseAccount(account_);\n  assertRequest({\n    account,\n    ...parameters\n  });\n  const chainId = await getAction(client, getChainId, 'getChainId')({});\n  if (chain !== null) assertCurrentChain({\n    currentChainId: chainId,\n    chain\n  });\n  const formatters = chain?.formatters || client.chain?.formatters;\n  const format = formatters?.transactionRequest?.format || formatTransactionRequest;\n  if (account.signTransaction) return account.signTransaction({\n    ...transaction,\n    chainId\n  }, {\n    serializer: client.chain?.serializers?.transaction\n  });\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [{\n      ...format(transaction),\n      chainId: numberToHex(chainId),\n      from: account.address\n    }]\n  }, {\n    retryCount: 0\n  });\n}\n//# sourceMappingURL=signTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}