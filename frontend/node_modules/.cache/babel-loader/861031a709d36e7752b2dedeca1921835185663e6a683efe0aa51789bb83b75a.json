{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst index_1 = require(\"../type/registry/index\");\nconst index_2 = require(\"../type/unsafe/index\");\nconst index_3 = require(\"../type/symbols/index\");\nconst index_4 = require(\"../type/error/index\");\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nclass TypeSystemDuplicateTypeKind extends index_4.TypeBoxError {\n  constructor(kind) {\n    super(`Duplicate type kind '${kind}' detected`);\n  }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends index_4.TypeBoxError {\n  constructor(kind) {\n    super(`Duplicate string format '${kind}' detected`);\n  }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n  /** Creates a new type */\n  function Type(kind, check) {\n    if (index_1.TypeRegistry.Has(kind)) throw new TypeSystemDuplicateTypeKind(kind);\n    index_1.TypeRegistry.Set(kind, check);\n    return (options = {}) => (0, index_2.Unsafe)({\n      ...options,\n      [index_3.Kind]: kind\n    });\n  }\n  TypeSystem.Type = Type;\n  /** Creates a new string format */\n  function Format(format, check) {\n    if (index_1.FormatRegistry.Has(format)) throw new TypeSystemDuplicateFormat(format);\n    index_1.FormatRegistry.Set(format, check);\n    return format;\n  }\n  TypeSystem.Format = Format;\n})(TypeSystem || (exports.TypeSystem = TypeSystem = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeSystem","TypeSystemDuplicateFormat","TypeSystemDuplicateTypeKind","index_1","require","index_2","index_3","index_4","TypeBoxError","constructor","kind","Type","check","TypeRegistry","Has","Set","options","Unsafe","Kind","Format","format","FormatRegistry"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@sinclair/typebox/build/cjs/system/system.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst index_1 = require(\"../type/registry/index\");\nconst index_2 = require(\"../type/unsafe/index\");\nconst index_3 = require(\"../type/symbols/index\");\nconst index_4 = require(\"../type/error/index\");\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nclass TypeSystemDuplicateTypeKind extends index_4.TypeBoxError {\n    constructor(kind) {\n        super(`Duplicate type kind '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends index_4.TypeBoxError {\n    constructor(kind) {\n        super(`Duplicate string format '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n    /** Creates a new type */\n    function Type(kind, check) {\n        if (index_1.TypeRegistry.Has(kind))\n            throw new TypeSystemDuplicateTypeKind(kind);\n        index_1.TypeRegistry.Set(kind, check);\n        return (options = {}) => (0, index_2.Unsafe)({ ...options, [index_3.Kind]: kind });\n    }\n    TypeSystem.Type = Type;\n    /** Creates a new string format */\n    function Format(format, check) {\n        if (index_1.FormatRegistry.Has(format))\n            throw new TypeSystemDuplicateFormat(format);\n        index_1.FormatRegistry.Set(format, check);\n        return format;\n    }\n    TypeSystem.Format = Format;\n})(TypeSystem || (exports.TypeSystem = TypeSystem = {}));\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,yBAAyB,GAAGH,OAAO,CAACI,2BAA2B,GAAG,KAAK,CAAC;AACrG,MAAMC,OAAO,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAMC,OAAO,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAC/C,MAAME,OAAO,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAChD,MAAMG,OAAO,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAC9C;AACA;AACA;AACA,MAAMF,2BAA2B,SAASK,OAAO,CAACC,YAAY,CAAC;EAC3DC,WAAWA,CAACC,IAAI,EAAE;IACd,KAAK,CAAC,wBAAwBA,IAAI,YAAY,CAAC;EACnD;AACJ;AACAZ,OAAO,CAACI,2BAA2B,GAAGA,2BAA2B;AACjE,MAAMD,yBAAyB,SAASM,OAAO,CAACC,YAAY,CAAC;EACzDC,WAAWA,CAACC,IAAI,EAAE;IACd,KAAK,CAAC,4BAA4BA,IAAI,YAAY,CAAC;EACvD;AACJ;AACAZ,OAAO,CAACG,yBAAyB,GAAGA,yBAAyB;AAC7D;AACA,IAAID,UAAU;AACd,CAAC,UAAUA,UAAU,EAAE;EACnB;EACA,SAASW,IAAIA,CAACD,IAAI,EAAEE,KAAK,EAAE;IACvB,IAAIT,OAAO,CAACU,YAAY,CAACC,GAAG,CAACJ,IAAI,CAAC,EAC9B,MAAM,IAAIR,2BAA2B,CAACQ,IAAI,CAAC;IAC/CP,OAAO,CAACU,YAAY,CAACE,GAAG,CAACL,IAAI,EAAEE,KAAK,CAAC;IACrC,OAAO,CAACI,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAEX,OAAO,CAACY,MAAM,EAAE;MAAE,GAAGD,OAAO;MAAE,CAACV,OAAO,CAACY,IAAI,GAAGR;IAAK,CAAC,CAAC;EACtF;EACAV,UAAU,CAACW,IAAI,GAAGA,IAAI;EACtB;EACA,SAASQ,MAAMA,CAACC,MAAM,EAAER,KAAK,EAAE;IAC3B,IAAIT,OAAO,CAACkB,cAAc,CAACP,GAAG,CAACM,MAAM,CAAC,EAClC,MAAM,IAAInB,yBAAyB,CAACmB,MAAM,CAAC;IAC/CjB,OAAO,CAACkB,cAAc,CAACN,GAAG,CAACK,MAAM,EAAER,KAAK,CAAC;IACzC,OAAOQ,MAAM;EACjB;EACApB,UAAU,CAACmB,MAAM,GAAGA,MAAM;AAC9B,CAAC,EAAEnB,UAAU,KAAKF,OAAO,CAACE,UAAU,GAAGA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}