{"ast":null,"code":"import { parseAbi } from 'abitype';\nimport { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { multicall3Abi } from '../../constants/abis.js';\nimport { aggregate3Signature } from '../../constants/contract.js';\nimport { deploylessCallViaBytecodeBytecode, deploylessCallViaFactoryBytecode } from '../../constants/contracts.js';\nimport { BaseError } from '../../errors/base.js';\nimport { ChainDoesNotSupportContract, ClientChainNotConfiguredError } from '../../errors/chain.js';\nimport { CounterfactualDeploymentFailedError, RawContractError } from '../../errors/contract.js';\nimport { decodeFunctionResult } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress } from '../../utils/chain/getChainContractAddress.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getCallError } from '../../utils/errors/getCallError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js';\nimport { serializeStateOverride } from '../../utils/stateOverride.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\n/**\n * Executes a new message call immediately without submitting a transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/call\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n *\n * @param client - Client to use\n * @param parameters - {@link CallParameters}\n * @returns The call data. {@link CallReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { call } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await call(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function call(client, args) {\n  const {\n    account: account_ = client.account,\n    batch = Boolean(client.batch?.multicall),\n    blockNumber,\n    blockTag = 'latest',\n    accessList,\n    blobs,\n    code,\n    data: data_,\n    factory,\n    factoryData,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    stateOverride,\n    ...rest\n  } = args;\n  const account = account_ ? parseAccount(account_) : undefined;\n  if (code && (factory || factoryData)) throw new BaseError('Cannot provide both `code` & `factory`/`factoryData` as parameters.');\n  if (code && to) throw new BaseError('Cannot provide both `code` & `to` as parameters.');\n  // Check if the call is deployless via bytecode.\n  const deploylessCallViaBytecode = code && data_;\n  // Check if the call is deployless via a factory.\n  const deploylessCallViaFactory = factory && factoryData && to && data_;\n  const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory;\n  const data = (() => {\n    if (deploylessCallViaBytecode) return toDeploylessCallViaBytecodeData({\n      code,\n      data: data_\n    });\n    if (deploylessCallViaFactory) return toDeploylessCallViaFactoryData({\n      data: data_,\n      factory,\n      factoryData,\n      to\n    });\n    return data_;\n  })();\n  try {\n    assertRequest(args);\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const rpcStateOverride = serializeStateOverride(stateOverride);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format: chainFormat\n      }),\n      from: account?.address,\n      accessList,\n      blobs,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to: deploylessCall ? undefined : to,\n      value\n    });\n    if (batch && shouldPerformMulticall({\n      request\n    }) && !rpcStateOverride) {\n      try {\n        return await scheduleMulticall(client, {\n          ...request,\n          blockNumber,\n          blockTag\n        });\n      } catch (err) {\n        if (!(err instanceof ClientChainNotConfiguredError) && !(err instanceof ChainDoesNotSupportContract)) throw err;\n      }\n    }\n    const response = await client.request({\n      method: 'eth_call',\n      params: rpcStateOverride ? [request, block, rpcStateOverride] : [request, block]\n    });\n    if (response === '0x') return {\n      data: undefined\n    };\n    return {\n      data: response\n    };\n  } catch (err) {\n    const data = getRevertErrorData(err);\n    // Check for CCIP-Read offchain lookup signature.\n    const {\n      offchainLookup,\n      offchainLookupSignature\n    } = await import('../../utils/ccip.js');\n    if (client.ccipRead !== false && data?.slice(0, 10) === offchainLookupSignature && to) return {\n      data: await offchainLookup(client, {\n        data,\n        to\n      })\n    };\n    // Check for counterfactual deployment error.\n    if (deploylessCall && data?.slice(0, 10) === '0x101bb98d') throw new CounterfactualDeploymentFailedError({\n      factory\n    });\n    throw getCallError(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}\n// We only want to perform a scheduled multicall if:\n// - The request has calldata,\n// - The request has a target address,\n// - The target address is not already the aggregate3 signature,\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\nfunction shouldPerformMulticall({\n  request\n}) {\n  const {\n    data,\n    to,\n    ...request_\n  } = request;\n  if (!data) return false;\n  if (data.startsWith(aggregate3Signature)) return false;\n  if (!to) return false;\n  if (Object.values(request_).filter(x => typeof x !== 'undefined').length > 0) return false;\n  return true;\n}\nasync function scheduleMulticall(client, args) {\n  const {\n    batchSize = 1024,\n    wait = 0\n  } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};\n  const {\n    blockNumber,\n    blockTag = 'latest',\n    data,\n    multicallAddress: multicallAddress_,\n    to\n  } = args;\n  let multicallAddress = multicallAddress_;\n  if (!multicallAddress) {\n    if (!client.chain) throw new ClientChainNotConfiguredError();\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'multicall3'\n    });\n  }\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n  const block = blockNumberHex || blockTag;\n  const {\n    schedule\n  } = createBatchScheduler({\n    id: `${client.uid}.${block}`,\n    wait,\n    shouldSplitBatch(args) {\n      const size = args.reduce((size, {\n        data\n      }) => size + (data.length - 2), 0);\n      return size > batchSize * 2;\n    },\n    fn: async requests => {\n      const calls = requests.map(request => ({\n        allowFailure: true,\n        callData: request.data,\n        target: request.to\n      }));\n      const calldata = encodeFunctionData({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3'\n      });\n      const data = await client.request({\n        method: 'eth_call',\n        params: [{\n          data: calldata,\n          to: multicallAddress\n        }, block]\n      });\n      return decodeFunctionResult({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n        data: data || '0x'\n      });\n    }\n  });\n  const [{\n    returnData,\n    success\n  }] = await schedule({\n    data,\n    to\n  });\n  if (!success) throw new RawContractError({\n    data: returnData\n  });\n  if (returnData === '0x') return {\n    data: undefined\n  };\n  return {\n    data: returnData\n  };\n}\nfunction toDeploylessCallViaBytecodeData(parameters) {\n  const {\n    code,\n    data\n  } = parameters;\n  return encodeDeployData({\n    abi: parseAbi(['constructor(bytes, bytes)']),\n    bytecode: deploylessCallViaBytecodeBytecode,\n    args: [code, data]\n  });\n}\nfunction toDeploylessCallViaFactoryData(parameters) {\n  const {\n    data,\n    factory,\n    factoryData,\n    to\n  } = parameters;\n  return encodeDeployData({\n    abi: parseAbi(['constructor(address, bytes, address, bytes)']),\n    bytecode: deploylessCallViaFactoryBytecode,\n    args: [to, data, factory, factoryData]\n  });\n}\n/** @internal */\nexport function getRevertErrorData(err) {\n  if (!(err instanceof BaseError)) return undefined;\n  const error = err.walk();\n  return typeof error?.data === 'object' ? error.data?.data : error.data;\n}","map":{"version":3,"names":["parseAbi","parseAccount","multicall3Abi","aggregate3Signature","deploylessCallViaBytecodeBytecode","deploylessCallViaFactoryBytecode","BaseError","ChainDoesNotSupportContract","ClientChainNotConfiguredError","CounterfactualDeploymentFailedError","RawContractError","decodeFunctionResult","encodeDeployData","encodeFunctionData","getChainContractAddress","numberToHex","getCallError","extract","formatTransactionRequest","createBatchScheduler","serializeStateOverride","assertRequest","call","client","args","account","account_","batch","Boolean","multicall","blockNumber","blockTag","accessList","blobs","code","data","data_","factory","factoryData","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","stateOverride","rest","undefined","deploylessCallViaBytecode","deploylessCallViaFactory","deploylessCall","toDeploylessCallViaBytecodeData","toDeploylessCallViaFactoryData","blockNumberHex","block","rpcStateOverride","chainFormat","chain","formatters","transactionRequest","format","request","from","address","shouldPerformMulticall","scheduleMulticall","err","response","method","params","getRevertErrorData","offchainLookup","offchainLookupSignature","ccipRead","slice","request_","startsWith","Object","values","filter","x","length","batchSize","wait","multicallAddress","multicallAddress_","contract","schedule","id","uid","shouldSplitBatch","size","reduce","fn","requests","calls","map","allowFailure","callData","target","calldata","abi","functionName","returnData","success","parameters","bytecode","error","walk"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\call.ts"],"sourcesContent":["import { type Address, parseAbi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { multicall3Abi } from '../../constants/abis.js'\nimport { aggregate3Signature } from '../../constants/contract.js'\nimport {\n  deploylessCallViaBytecodeBytecode,\n  deploylessCallViaFactoryBytecode,\n} from '../../constants/contracts.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ChainDoesNotSupportContract,\n  ClientChainNotConfiguredError,\n} from '../../errors/chain.js'\nimport {\n  CounterfactualDeploymentFailedError,\n  RawContractError,\n  type RawContractErrorType,\n} from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { ExactPartial, UnionOmit } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeDeployDataErrorType,\n  encodeDeployData,\n} from '../../utils/abi/encodeDeployData.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetCallErrorReturnType,\n  getCallError,\n} from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormatTransactionRequestErrorType,\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from '../../utils/promise/createBatchScheduler.js'\nimport {\n  type SerializeStateOverrideErrorType,\n  serializeStateOverride,\n} from '../../utils/stateOverride.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\n\nexport type CallParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedCall<chain>, 'from'> & {\n  /** Account attached to the call (msg.sender). */\n  account?: Account | Address | undefined\n  /** Whether or not to enable multicall batching on this call. */\n  batch?: boolean | undefined\n  /** Bytecode to perform the call on. */\n  code?: Hex | undefined\n  /** Contract deployment factory address (ie. Create2 factory, Smart Account factory, etc). */\n  factory?: Address | undefined\n  /** Calldata to execute on the factory to deploy the contract. */\n  factoryData?: Hex | undefined\n  /** State overrides for the call. */\n  stateOverride?: StateOverride | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: undefined\n      }\n    | {\n        blockNumber?: undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\ntype FormattedCall<chain extends Chain | undefined = Chain | undefined> =\n  FormattedTransactionRequest<chain>\n\nexport type CallReturnType = { data: Hex | undefined }\n\nexport type CallErrorType = GetCallErrorReturnType<\n  | ParseAccountErrorType\n  | SerializeStateOverrideErrorType\n  | AssertRequestErrorType\n  | NumberToHexErrorType\n  | FormatTransactionRequestErrorType\n  | ScheduleMulticallErrorType\n  | RequestErrorType\n  | ToDeploylessCallViaBytecodeDataErrorType\n  | ToDeploylessCallViaFactoryDataErrorType\n>\n\n/**\n * Executes a new message call immediately without submitting a transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/call\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n *\n * @param client - Client to use\n * @param parameters - {@link CallParameters}\n * @returns The call data. {@link CallReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { call } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await call(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function call<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  args: CallParameters<chain>,\n): Promise<CallReturnType> {\n  const {\n    account: account_ = client.account,\n    batch = Boolean(client.batch?.multicall),\n    blockNumber,\n    blockTag = 'latest',\n    accessList,\n    blobs,\n    code,\n    data: data_,\n    factory,\n    factoryData,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    stateOverride,\n    ...rest\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  if (code && (factory || factoryData))\n    throw new BaseError(\n      'Cannot provide both `code` & `factory`/`factoryData` as parameters.',\n    )\n  if (code && to)\n    throw new BaseError('Cannot provide both `code` & `to` as parameters.')\n\n  // Check if the call is deployless via bytecode.\n  const deploylessCallViaBytecode = code && data_\n  // Check if the call is deployless via a factory.\n  const deploylessCallViaFactory = factory && factoryData && to && data_\n  const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory\n\n  const data = (() => {\n    if (deploylessCallViaBytecode)\n      return toDeploylessCallViaBytecodeData({\n        code,\n        data: data_,\n      })\n    if (deploylessCallViaFactory)\n      return toDeploylessCallViaFactoryData({\n        data: data_,\n        factory,\n        factoryData,\n        to,\n      })\n    return data_\n  })()\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const rpcStateOverride = serializeStateOverride(stateOverride)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      blobs,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to: deploylessCall ? undefined : to,\n      value,\n    } as TransactionRequest) as TransactionRequest\n\n    if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\n      try {\n        return await scheduleMulticall(client, {\n          ...request,\n          blockNumber,\n          blockTag,\n        } as unknown as ScheduleMulticallParameters<chain>)\n      } catch (err) {\n        if (\n          !(err instanceof ClientChainNotConfiguredError) &&\n          !(err instanceof ChainDoesNotSupportContract)\n        )\n          throw err\n      }\n    }\n\n    const response = await client.request({\n      method: 'eth_call',\n      params: rpcStateOverride\n        ? [\n            request as ExactPartial<RpcTransactionRequest>,\n            block,\n            rpcStateOverride,\n          ]\n        : [request as ExactPartial<RpcTransactionRequest>, block],\n    })\n    if (response === '0x') return { data: undefined }\n    return { data: response }\n  } catch (err) {\n    const data = getRevertErrorData(err)\n\n    // Check for CCIP-Read offchain lookup signature.\n    const { offchainLookup, offchainLookupSignature } = await import(\n      '../../utils/ccip.js'\n    )\n    if (\n      client.ccipRead !== false &&\n      data?.slice(0, 10) === offchainLookupSignature &&\n      to\n    )\n      return { data: await offchainLookup(client, { data, to }) }\n\n    // Check for counterfactual deployment error.\n    if (deploylessCall && data?.slice(0, 10) === '0x101bb98d')\n      throw new CounterfactualDeploymentFailedError({ factory })\n\n    throw getCallError(err as ErrorType, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n\n// We only want to perform a scheduled multicall if:\n// - The request has calldata,\n// - The request has a target address,\n// - The target address is not already the aggregate3 signature,\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\nfunction shouldPerformMulticall({ request }: { request: TransactionRequest }) {\n  const { data, to, ...request_ } = request\n  if (!data) return false\n  if (data.startsWith(aggregate3Signature)) return false\n  if (!to) return false\n  if (\n    Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0\n  )\n    return false\n  return true\n}\n\ntype ScheduleMulticallParameters<chain extends Chain | undefined> = Pick<\n  CallParameters<chain>,\n  'blockNumber' | 'blockTag'\n> & {\n  data: Hex\n  multicallAddress?: Address | undefined\n  to: Address\n}\n\ntype ScheduleMulticallErrorType =\n  | GetChainContractAddressErrorType\n  | NumberToHexErrorType\n  | CreateBatchSchedulerErrorType\n  | EncodeFunctionDataErrorType\n  | DecodeFunctionResultErrorType\n  | RawContractErrorType\n  | ErrorType\n\nasync function scheduleMulticall<chain extends Chain | undefined>(\n  client: Client<Transport>,\n  args: ScheduleMulticallParameters<chain>,\n) {\n  const { batchSize = 1024, wait = 0 } =\n    typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\n  const {\n    blockNumber,\n    blockTag = 'latest',\n    data,\n    multicallAddress: multicallAddress_,\n    to,\n  } = args\n\n  let multicallAddress = multicallAddress_\n  if (!multicallAddress) {\n    if (!client.chain) throw new ClientChainNotConfiguredError()\n\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'multicall3',\n    })\n  }\n\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n  const block = blockNumberHex || blockTag\n\n  const { schedule } = createBatchScheduler({\n    id: `${client.uid}.${block}`,\n    wait,\n    shouldSplitBatch(args) {\n      const size = args.reduce((size, { data }) => size + (data.length - 2), 0)\n      return size > batchSize * 2\n    },\n    fn: async (\n      requests: {\n        data: Hex\n        to: Address\n      }[],\n    ) => {\n      const calls = requests.map((request) => ({\n        allowFailure: true,\n        callData: request.data,\n        target: request.to,\n      }))\n\n      const calldata = encodeFunctionData({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n      })\n\n      const data = await client.request({\n        method: 'eth_call',\n        params: [\n          {\n            data: calldata,\n            to: multicallAddress,\n          },\n          block,\n        ],\n      })\n\n      return decodeFunctionResult({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n        data: data || '0x',\n      })\n    },\n  })\n\n  const [{ returnData, success }] = await schedule({ data, to })\n\n  if (!success) throw new RawContractError({ data: returnData })\n  if (returnData === '0x') return { data: undefined }\n  return { data: returnData }\n}\n\ntype ToDeploylessCallViaBytecodeDataErrorType =\n  | EncodeDeployDataErrorType\n  | ErrorType\n\nfunction toDeploylessCallViaBytecodeData(parameters: {\n  code: Hex\n  data: Hex\n}) {\n  const { code, data } = parameters\n  return encodeDeployData({\n    abi: parseAbi(['constructor(bytes, bytes)']),\n    bytecode: deploylessCallViaBytecodeBytecode,\n    args: [code, data],\n  })\n}\n\ntype ToDeploylessCallViaFactoryDataErrorType =\n  | EncodeDeployDataErrorType\n  | ErrorType\n\nfunction toDeploylessCallViaFactoryData(parameters: {\n  data: Hex\n  factory: Address\n  factoryData: Hex\n  to: Address\n}) {\n  const { data, factory, factoryData, to } = parameters\n  return encodeDeployData({\n    abi: parseAbi(['constructor(address, bytes, address, bytes)']),\n    bytecode: deploylessCallViaFactoryBytecode,\n    args: [to, data, factory, factoryData],\n  })\n}\n\n/** @internal */\nexport type GetRevertErrorDataErrorType = ErrorType\n\n/** @internal */\nexport function getRevertErrorData(err: unknown) {\n  if (!(err instanceof BaseError)) return undefined\n  const error = err.walk() as RawContractError\n  return typeof error?.data === 'object' ? error.data?.data : error.data\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}