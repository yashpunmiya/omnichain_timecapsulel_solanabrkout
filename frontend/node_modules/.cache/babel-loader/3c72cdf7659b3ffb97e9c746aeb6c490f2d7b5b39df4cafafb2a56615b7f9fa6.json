{"ast":null,"code":"/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope(client, {\n  method\n}) {\n  const requestMap = {};\n  if (client.transport.type === 'fallback') client.transport.onResponse?.(({\n    method: method_,\n    response: id,\n    status,\n    transport\n  }) => {\n    if (status === 'success' && method === method_) requestMap[id] = transport.request;\n  });\n  return id => requestMap[id] || client.request;\n}","map":{"version":3,"names":["createFilterRequestScope","client","method","requestMap","transport","type","onResponse","method_","response","id","status","request"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\filters\\createFilterRequestScope.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { OnResponseFn } from '../../clients/transports/fallback.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { PublicRpcSchema } from '../../types/eip1193.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Filter } from '../../types/utils.js'\n\ntype CreateFilterRequestScopeParameters = {\n  method:\n    | 'eth_newFilter'\n    | 'eth_newPendingTransactionFilter'\n    | 'eth_newBlockFilter'\n}\n\ntype FilterRpcSchema = Filter<\n  PublicRpcSchema,\n  { Method: 'eth_getFilterLogs' | 'eth_getFilterChanges' }\n>\n\ntype CreateFilterRequestScopeReturnType = (\n  id: Hex,\n) => EIP1193RequestFn<FilterRpcSchema>\n\n/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { method }: CreateFilterRequestScopeParameters,\n): CreateFilterRequestScopeReturnType {\n  const requestMap: Record<Hex, EIP1193RequestFn> = {}\n\n  if (client.transport.type === 'fallback')\n    client.transport.onResponse?.(\n      ({\n        method: method_,\n        response: id,\n        status,\n        transport,\n      }: Parameters<OnResponseFn>[0]) => {\n        if (status === 'success' && method === method_)\n          requestMap[id as Hex] = transport.request\n      },\n    )\n\n  return ((id) =>\n    requestMap[id] || client.request) as CreateFilterRequestScopeReturnType\n}\n"],"mappings":"AAyBA;;;;;AAKA,OAAM,SAAUA,wBAAwBA,CACtCC,MAAgC,EAChC;EAAEC;AAAM,CAAsC;EAE9C,MAAMC,UAAU,GAAkC,EAAE;EAEpD,IAAIF,MAAM,CAACG,SAAS,CAACC,IAAI,KAAK,UAAU,EACtCJ,MAAM,CAACG,SAAS,CAACE,UAAU,GACzB,CAAC;IACCJ,MAAM,EAAEK,OAAO;IACfC,QAAQ,EAAEC,EAAE;IACZC,MAAM;IACNN;EAAS,CACmB,KAAI;IAChC,IAAIM,MAAM,KAAK,SAAS,IAAIR,MAAM,KAAKK,OAAO,EAC5CJ,UAAU,CAACM,EAAS,CAAC,GAAGL,SAAS,CAACO,OAAO;EAC7C,CAAC,CACF;EAEH,OAASF,EAAE,IACTN,UAAU,CAACM,EAAE,CAAC,IAAIR,MAAM,CAACU,OAAO;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}