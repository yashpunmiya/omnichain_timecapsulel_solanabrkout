{"ast":null,"code":"function e(s, r, i = \"string\") {\n  if (!s[r] || typeof s[r] !== i) throw new Error(`Missing or invalid \"${r}\" param`);\n}\nfunction l(s, r) {\n  let i = !0;\n  return r.forEach(t => {\n    t in s || (i = !1);\n  }), i;\n}\nfunction f(s, r) {\n  return Array.isArray(s) ? s.length === r : Object.keys(s).length === r;\n}\nfunction w(s, r) {\n  return Array.isArray(s) ? s.length >= r : Object.keys(s).length >= r;\n}\nfunction u(s, r, i) {\n  return (i.length ? w(s, r.length) : f(s, r.length)) ? l(s, r) : !1;\n}\nfunction n(s, r, i = \"_\") {\n  const t = s.split(i);\n  return t[t.length - 1].trim().toLowerCase() === r.trim().toLowerCase();\n}\nfunction R(s) {\n  return b(s.method) && a(s.params);\n}\nfunction b(s) {\n  return n(s, \"subscribe\");\n}\nfunction a(s) {\n  return u(s, [\"topic\"], []);\n}\nfunction P(s) {\n  return c(s.method) && h(s.params);\n}\nfunction c(s) {\n  return n(s, \"publish\");\n}\nfunction h(s) {\n  return u(s, [\"message\", \"topic\", \"ttl\"], [\"prompt\", \"tag\"]);\n}\nfunction _(s) {\n  return o(s.method) && p(s.params);\n}\nfunction o(s) {\n  return n(s, \"unsubscribe\");\n}\nfunction p(s) {\n  return u(s, [\"id\", \"topic\"], []);\n}\nfunction S(s) {\n  return m(s.method) && d(s.params);\n}\nfunction m(s) {\n  return n(s, \"subscription\");\n}\nfunction d(s) {\n  return u(s, [\"id\", \"data\"], []);\n}\nfunction g(s) {\n  if (!b(s.method)) throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  if (!a(s.params)) throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  const r = s.params;\n  return e(r, \"topic\"), r;\n}\nfunction q(s) {\n  if (!c(s.method)) throw new Error(\"JSON-RPC Request has invalid publish method\");\n  if (!h(s.params)) throw new Error(\"JSON-RPC Request has invalid publish params\");\n  const r = s.params;\n  return e(r, \"topic\"), e(r, \"message\"), e(r, \"ttl\", \"number\"), r;\n}\nfunction E(s) {\n  if (!o(s.method)) throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  if (!p(s.params)) throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  const r = s.params;\n  return e(r, \"id\"), r;\n}\nfunction k(s) {\n  if (!m(s.method)) throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  if (!d(s.params)) throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  const r = s.params;\n  return e(r, \"id\"), e(r, \"data\"), r;\n}\nconst C = {\n  waku: {\n    publish: \"waku_publish\",\n    batchPublish: \"waku_batchPublish\",\n    subscribe: \"waku_subscribe\",\n    batchSubscribe: \"waku_batchSubscribe\",\n    subscription: \"waku_subscription\",\n    unsubscribe: \"waku_unsubscribe\",\n    batchUnsubscribe: \"waku_batchUnsubscribe\",\n    batchFetchMessages: \"waku_batchFetchMessages\"\n  },\n  irn: {\n    publish: \"irn_publish\",\n    batchPublish: \"irn_batchPublish\",\n    subscribe: \"irn_subscribe\",\n    batchSubscribe: \"irn_batchSubscribe\",\n    subscription: \"irn_subscription\",\n    unsubscribe: \"irn_unsubscribe\",\n    batchUnsubscribe: \"irn_batchUnsubscribe\",\n    batchFetchMessages: \"irn_batchFetchMessages\"\n  },\n  iridium: {\n    publish: \"iridium_publish\",\n    batchPublish: \"iridium_batchPublish\",\n    subscribe: \"iridium_subscribe\",\n    batchSubscribe: \"iridium_batchSubscribe\",\n    subscription: \"iridium_subscription\",\n    unsubscribe: \"iridium_unsubscribe\",\n    batchUnsubscribe: \"iridium_batchUnsubscribe\",\n    batchFetchMessages: \"iridium_batchFetchMessages\"\n  }\n};\nexport { C as RELAY_JSONRPC, c as isPublishMethod, h as isPublishParams, P as isPublishRequest, b as isSubscribeMethod, a as isSubscribeParams, R as isSubscribeRequest, m as isSubscriptionMethod, d as isSubscriptionParams, S as isSubscriptionRequest, o as isUnsubscribeMethod, p as isUnsubscribeParams, _ as isUnsubscribeRequest, q as parsePublishRequest, g as parseSubscribeRequest, k as parseSubscriptionRequest, E as parseUnsubscribeRequest };","map":{"version":3,"names":["e","s","r","i","Error","l","forEach","t","f","Array","isArray","length","Object","keys","w","u","n","split","trim","toLowerCase","R","b","method","a","params","P","c","h","_","o","p","S","m","d","g","q","E","k","C","waku","publish","batchPublish","subscribe","batchSubscribe","subscription","unsubscribe","batchUnsubscribe","batchFetchMessages","irn","iridium","RELAY_JSONRPC","isPublishMethod","isPublishParams","isPublishRequest","isSubscribeMethod","isSubscribeParams","isSubscribeRequest","isSubscriptionMethod","isSubscriptionParams","isSubscriptionRequest","isUnsubscribeMethod","isUnsubscribeParams","isUnsubscribeRequest","parsePublishRequest","parseSubscribeRequest","parseSubscriptionRequest","parseUnsubscribeRequest"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\relay-api\\src\\misc.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\relay-api\\src\\validators.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\relay-api\\src\\parsers.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\relay-api\\src\\jsonrpc.ts"],"sourcesContent":["export function assertType(obj: any, key: string, type = \"string\") {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\nexport function hasRequiredParams(params: any, required: string[]) {\n  let matches = true;\n  required.forEach((key) => {\n    const exists = key in params;\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\n\nexport function hasExactParamsLength(params: any, length: number): boolean {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\n\nexport function hasRequiredParamsLength(params: any, minLength: number): boolean {\n  return Array.isArray(params)\n    ? params.length >= minLength\n    : Object.keys(params).length >= minLength;\n}\n\nexport function checkParams(params: any, required: string[], optional: string[]) {\n  const exact = !optional.length;\n  const matchesLength = exact\n    ? hasExactParamsLength(params, required.length)\n    : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\n\nexport function methodEndsWith(method: string, expected: string, separator = \"_\") {\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-types\";\n\nimport { checkParams, methodEndsWith } from \"./misc\";\nimport { RelayJsonRpc } from \"./types\";\n\n// ---------- Subscribe ----------------------------------------------- //\n\nexport function isSubscribeRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.SubscribeParams> {\n  return isSubscribeMethod(request.method) && isSubscribeParams(request.params);\n}\n\nexport function isSubscribeMethod(method: string): boolean {\n  return methodEndsWith(method, \"subscribe\");\n}\n\nexport function isSubscribeParams(params: any): params is RelayJsonRpc.SubscribeParams {\n  const required = [\"topic\"];\n  const optional: string[] = [];\n  return checkParams(params, required, optional);\n}\n\n// ---------- Publish ----------------------------------------------- //\n\nexport function isPublishRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.PublishParams> {\n  return isPublishMethod(request.method) && isPublishParams(request.params);\n}\n\nexport function isPublishMethod(method: string): boolean {\n  return methodEndsWith(method, \"publish\");\n}\n\nexport function isPublishParams(params: any): params is RelayJsonRpc.PublishParams {\n  const required = [\"message\", \"topic\", \"ttl\"];\n  const optional = [\"prompt\", \"tag\"];\n  return checkParams(params, required, optional);\n}\n\n// ---------- Unsubscribe ----------------------------------------------- //\n\nexport function isUnsubscribeRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.UnsubscribeParams> {\n  return isUnsubscribeMethod(request.method) && isUnsubscribeParams(request.params);\n}\n\nexport function isUnsubscribeMethod(method: string): boolean {\n  return methodEndsWith(method, \"unsubscribe\");\n}\n\nexport function isUnsubscribeParams(params: any): params is RelayJsonRpc.UnsubscribeParams {\n  const required = [\"id\", \"topic\"];\n  const optional: string[] = [];\n  return checkParams(params, required, optional);\n}\n\n// ---------- Subscription ----------------------------------------------- //\n\nexport function isSubscriptionRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.SubscriptionParams> {\n  return isSubscriptionMethod(request.method) && isSubscriptionParams(request.params);\n}\n\nexport function isSubscriptionMethod(method: string): boolean {\n  return methodEndsWith(method, \"subscription\");\n}\n\nexport function isSubscriptionParams(params: any): params is RelayJsonRpc.SubscriptionParams {\n  const required = [\"id\", \"data\"];\n  const optional: string[] = [];\n  return checkParams(params, required, optional);\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-types\";\n\nimport { RelayJsonRpc } from \"./types\";\nimport { assertType } from \"./misc\";\nimport {\n  isPublishMethod,\n  isPublishParams,\n  isSubscribeMethod,\n  isSubscribeParams,\n  isSubscriptionMethod,\n  isSubscriptionParams,\n  isUnsubscribeMethod,\n  isUnsubscribeParams,\n} from \"./validators\";\n\nexport function parseSubscribeRequest(request: JsonRpcRequest): RelayJsonRpc.SubscribeParams {\n  if (!isSubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  }\n  if (!isSubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  }\n  const params = request.params as RelayJsonRpc.SubscribeParams;\n\n  assertType(params, \"topic\");\n\n  return params;\n}\n\nexport function parsePublishRequest(request: JsonRpcRequest): RelayJsonRpc.PublishParams {\n  if (!isPublishMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid publish method\");\n  }\n  if (!isPublishParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid publish params\");\n  }\n  const params = request.params as RelayJsonRpc.PublishParams;\n\n  assertType(params, \"topic\");\n  assertType(params, \"message\");\n  assertType(params, \"ttl\", \"number\");\n\n  return params;\n}\n\nexport function parseUnsubscribeRequest(request: JsonRpcRequest): RelayJsonRpc.UnsubscribeParams {\n  if (!isUnsubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  }\n  if (!isUnsubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  }\n  const params = request.params as RelayJsonRpc.UnsubscribeParams;\n\n  assertType(params, \"id\");\n\n  return params;\n}\n\nexport function parseSubscriptionRequest(request: JsonRpcRequest): RelayJsonRpc.SubscriptionParams {\n  if (!isSubscriptionMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  }\n  if (!isSubscriptionParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  }\n  const params = request.params as RelayJsonRpc.SubscriptionParams;\n\n  assertType(params, \"id\");\n  assertType(params, \"data\");\n\n  return params;\n}\n","import { RelayJsonRpc } from \"./types\";\n\nexport const RELAY_JSONRPC: { [protocol: string]: RelayJsonRpc.Methods } = {\n  waku: {\n    publish: \"waku_publish\",\n    batchPublish: \"waku_batchPublish\",\n    subscribe: \"waku_subscribe\",\n    batchSubscribe: \"waku_batchSubscribe\",\n    subscription: \"waku_subscription\",\n    unsubscribe: \"waku_unsubscribe\",\n    batchUnsubscribe: \"waku_batchUnsubscribe\",\n    batchFetchMessages: \"waku_batchFetchMessages\",\n  },\n  irn: {\n    publish: \"irn_publish\",\n    batchPublish: \"irn_batchPublish\",\n    subscribe: \"irn_subscribe\",\n    batchSubscribe: \"irn_batchSubscribe\",\n    subscription: \"irn_subscription\",\n    unsubscribe: \"irn_unsubscribe\",\n    batchUnsubscribe: \"irn_batchUnsubscribe\",\n    batchFetchMessages: \"irn_batchFetchMessages\",\n  },\n  iridium: {\n    publish: \"iridium_publish\",\n    batchPublish: \"iridium_batchPublish\",\n    subscribe: \"iridium_subscribe\",\n    batchSubscribe: \"iridium_batchSubscribe\",\n    subscription: \"iridium_subscription\",\n    unsubscribe: \"iridium_unsubscribe\",\n    batchUnsubscribe: \"iridium_batchUnsubscribe\",\n    batchFetchMessages: \"iridium_batchFetchMessages\",\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}