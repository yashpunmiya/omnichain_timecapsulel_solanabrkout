{"ast":null,"code":"// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js';\nimport { concat } from '../data/concat.js';\nimport { toHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { getTypesForEIP712Domain, validateTypedData } from '../typedData.js';\nexport function hashTypedData(parameters) {\n  const {\n    domain = {},\n    message,\n    primaryType\n  } = parameters;\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({\n      domain\n    }),\n    ...parameters.types\n  };\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n  const parts = ['0x1901'];\n  if (domain) parts.push(hashDomain({\n    domain,\n    types: types\n  }));\n  if (primaryType !== 'EIP712Domain') parts.push(hashStruct({\n    data: message,\n    primaryType,\n    types: types\n  }));\n  return keccak256(concat(parts));\n}\nexport function hashDomain({\n  domain,\n  types\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types\n  });\n}\nexport function hashStruct({\n  data,\n  primaryType,\n  types\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types\n  });\n  return keccak256(encoded);\n}\nfunction encodeData({\n  data,\n  primaryType,\n  types\n}) {\n  const encodedTypes = [{\n    type: 'bytes32'\n  }];\n  const encodedValues = [hashType({\n    primaryType,\n    types\n  })];\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name]\n    });\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return encodeAbiParameters(encodedTypes, encodedValues);\n}\nfunction hashType({\n  primaryType,\n  types\n}) {\n  const encodedHashType = toHex(encodeType({\n    primaryType,\n    types\n  }));\n  return keccak256(encodedHashType);\n}\nexport function encodeType({\n  primaryType,\n  types\n}) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies({\n    primaryType,\n    types\n  });\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    result += `${type}(${types[type].map(({\n      name,\n      type: t\n    }) => `${t} ${name}`).join(',')})`;\n  }\n  return result;\n}\nfunction findTypeDependencies({\n  primaryType: primaryType_,\n  types\n}, results = new Set()) {\n  const match = primaryType_.match(/^\\w*/u);\n  const primaryType = match?.[0];\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies({\n      primaryType: field.type,\n      types\n    }, results);\n  }\n  return results;\n}\nfunction encodeField({\n  types,\n  name,\n  type,\n  value\n}) {\n  if (types[type] !== undefined) {\n    return [{\n      type: 'bytes32'\n    }, keccak256(encodeData({\n      data: value,\n      primaryType: type,\n      types\n    }))];\n  }\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : '';\n    value = `0x${prepend + value.slice(2)}`;\n    return [{\n      type: 'bytes32'\n    }, keccak256(value)];\n  }\n  if (type === 'string') return [{\n    type: 'bytes32'\n  }, keccak256(toHex(value))];\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField({\n      name,\n      type: parsedType,\n      types,\n      value: item\n    }));\n    return [{\n      type: 'bytes32'\n    }, keccak256(encodeAbiParameters(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))];\n  }\n  return [{\n    type\n  }, value];\n}","map":{"version":3,"names":["encodeAbiParameters","concat","toHex","keccak256","getTypesForEIP712Domain","validateTypedData","hashTypedData","parameters","domain","message","primaryType","types","EIP712Domain","parts","push","hashDomain","hashStruct","data","encoded","encodeData","encodedTypes","type","encodedValues","hashType","field","value","encodeField","name","encodedHashType","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","Array","from","sort","map","t","join","primaryType_","results","Set","match","has","undefined","add","prepend","length","slice","lastIndexOf","parsedType","typeValuePairs","item","v"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\signature\\hashTypedData.ts"],"sourcesContent":["// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: HashTypedDataParameters<typedData, primaryType>,\n): HashTypedDataReturnType {\n  const {\n    domain = {},\n    message,\n    primaryType,\n  } = parameters as HashTypedDataParameters\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\nexport type HashStructErrorType =\n  | EncodeDataErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nexport function hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nexport function encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, readonly MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, readonly MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}