{"ast":null,"code":"import { trim } from '../utils/data/trim.js';\nexport function isEmpty(value) {\n  return value === 0 || value === 0n || value === undefined || value === null || value === '0' || value === '' || typeof value === 'string' && (trim(value).toLowerCase() === '0x' || trim(value).toLowerCase() === '0x00');\n}\nexport function isPresent(value) {\n  return !isEmpty(value);\n}\n/** @internal */\nexport function isEIP1559(transaction) {\n  return typeof transaction.maxFeePerGas !== 'undefined' && typeof transaction.maxPriorityFeePerGas !== 'undefined';\n}\nexport function isCIP64(transaction) {\n  /*\n   * Enable end user to force the tx to be considered as a CIP-64.\n   *\n   * The preliminary type will be determined as \"eip1559\" by src/utils/transaction/getTransactionType.ts\n   * and so we need the logic below to check for the specific value instead of checking if just any\n   * transaction type is provided. If that's anything else than \"cip64\" then we need to reevaluate the\n   * type based on the transaction fields.\n   *\n   * Modify with caution and according to https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n   */\n  if (transaction.type === 'cip64') {\n    return true;\n  }\n  return isEIP1559(transaction) && isPresent(transaction.feeCurrency);\n}","map":{"version":3,"names":["trim","isEmpty","value","undefined","toLowerCase","isPresent","isEIP1559","transaction","maxFeePerGas","maxPriorityFeePerGas","isCIP64","type","feeCurrency"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\celo\\utils.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport { trim } from '../utils/data/trim.js'\nimport type {\n  CeloTransactionRequest,\n  CeloTransactionSerializable,\n  TransactionSerializableCIP64,\n} from './types.js'\n\nexport function isEmpty(\n  value: string | undefined | number | BigInt,\n): value is undefined {\n  return (\n    value === 0 ||\n    value === 0n ||\n    value === undefined ||\n    value === null ||\n    value === '0' ||\n    value === '' ||\n    (typeof value === 'string' &&\n      (trim(value as Address).toLowerCase() === '0x' ||\n        trim(value as Address).toLowerCase() === '0x00'))\n  )\n}\n\nexport function isPresent(\n  value: string | undefined | number | BigInt,\n): value is string | number | BigInt {\n  return !isEmpty(value)\n}\n\n/** @internal */\nexport function isEIP1559(\n  transaction: CeloTransactionSerializable | CeloTransactionRequest,\n): boolean {\n  return (\n    typeof transaction.maxFeePerGas !== 'undefined' &&\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  )\n}\n\nexport function isCIP64(\n  transaction: CeloTransactionSerializable | CeloTransactionRequest,\n): transaction is TransactionSerializableCIP64 {\n  /*\n   * Enable end user to force the tx to be considered as a CIP-64.\n   *\n   * The preliminary type will be determined as \"eip1559\" by src/utils/transaction/getTransactionType.ts\n   * and so we need the logic below to check for the specific value instead of checking if just any\n   * transaction type is provided. If that's anything else than \"cip64\" then we need to reevaluate the\n   * type based on the transaction fields.\n   *\n   * Modify with caution and according to https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n   */\n  if (transaction.type === 'cip64') {\n    return true\n  }\n\n  return isEIP1559(transaction) && isPresent(transaction.feeCurrency)\n}\n"],"mappings":"AACA,SAASA,IAAI,QAAQ,uBAAuB;AAO5C,OAAM,SAAUC,OAAOA,CACrBC,KAA2C;EAE3C,OACEA,KAAK,KAAK,CAAC,IACXA,KAAK,KAAK,EAAE,IACZA,KAAK,KAAKC,SAAS,IACnBD,KAAK,KAAK,IAAI,IACdA,KAAK,KAAK,GAAG,IACbA,KAAK,KAAK,EAAE,IACX,OAAOA,KAAK,KAAK,QAAQ,KACvBF,IAAI,CAACE,KAAgB,CAAC,CAACE,WAAW,EAAE,KAAK,IAAI,IAC5CJ,IAAI,CAACE,KAAgB,CAAC,CAACE,WAAW,EAAE,KAAK,MAAM,CAAE;AAEzD;AAEA,OAAM,SAAUC,SAASA,CACvBH,KAA2C;EAE3C,OAAO,CAACD,OAAO,CAACC,KAAK,CAAC;AACxB;AAEA;AACA,OAAM,SAAUI,SAASA,CACvBC,WAAiE;EAEjE,OACE,OAAOA,WAAW,CAACC,YAAY,KAAK,WAAW,IAC/C,OAAOD,WAAW,CAACE,oBAAoB,KAAK,WAAW;AAE3D;AAEA,OAAM,SAAUC,OAAOA,CACrBH,WAAiE;EAEjE;;;;;;;;;;EAUA,IAAIA,WAAW,CAACI,IAAI,KAAK,OAAO,EAAE;IAChC,OAAO,IAAI;EACb;EAEA,OAAOL,SAAS,CAACC,WAAW,CAAC,IAAIF,SAAS,CAACE,WAAW,CAACK,WAAW,CAAC;AACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}