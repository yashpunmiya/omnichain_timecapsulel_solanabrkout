{"ast":null,"code":"import { bytesToUnprefixedHex } from './bytes.js';\nexport class MapDB {\n  constructor(database) {\n    this._database = database ?? new Map();\n  }\n  async get(key) {\n    const dbKey = key instanceof Uint8Array ? bytesToUnprefixedHex(key) : key.toString();\n    return this._database.get(dbKey);\n  }\n  async put(key, val) {\n    const dbKey = key instanceof Uint8Array ? bytesToUnprefixedHex(key) : key.toString();\n    this._database.set(dbKey, val);\n  }\n  async del(key) {\n    const dbKey = key instanceof Uint8Array ? bytesToUnprefixedHex(key) : key.toString();\n    this._database.delete(dbKey);\n  }\n  async batch(opStack) {\n    for (const op of opStack) {\n      if (op.type === 'del') {\n        await this.del(op.key);\n      }\n      if (op.type === 'put') {\n        await this.put(op.key, op.value);\n      }\n    }\n  }\n  /**\n   * Note that the returned shallow copy will share the underlying database with the original\n   *\n   * @returns DB\n   */\n  shallowCopy() {\n    return new MapDB(this._database);\n  }\n  open() {\n    return Promise.resolve();\n  }\n}","map":{"version":3,"names":["bytesToUnprefixedHex","MapDB","constructor","database","_database","Map","get","key","dbKey","Uint8Array","toString","put","val","set","del","delete","batch","opStack","op","type","value","shallowCopy","open","Promise","resolve"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\mapDB.ts"],"sourcesContent":["import { bytesToUnprefixedHex } from './bytes.js'\n\nimport type { BatchDBOp, DB, DBObject } from './db.js'\n\nexport class MapDB<\n  TKey extends Uint8Array | string | number,\n  TValue extends Uint8Array | string | DBObject\n> implements DB<TKey, TValue>\n{\n  _database: Map<TKey, TValue>\n\n  constructor(database?: Map<TKey, TValue>) {\n    this._database = database ?? new Map<TKey, TValue>()\n  }\n\n  async get(key: TKey): Promise<TValue | undefined> {\n    const dbKey = key instanceof Uint8Array ? bytesToUnprefixedHex(key) : key.toString()\n    return this._database.get(dbKey as TKey)\n  }\n\n  async put(key: TKey, val: TValue): Promise<void> {\n    const dbKey = key instanceof Uint8Array ? bytesToUnprefixedHex(key) : key.toString()\n    this._database.set(dbKey as TKey, val)\n  }\n\n  async del(key: TKey): Promise<void> {\n    const dbKey = key instanceof Uint8Array ? bytesToUnprefixedHex(key) : key.toString()\n    this._database.delete(dbKey as TKey)\n  }\n\n  async batch(opStack: BatchDBOp<TKey, TValue>[]): Promise<void> {\n    for (const op of opStack) {\n      if (op.type === 'del') {\n        await this.del(op.key)\n      }\n\n      if (op.type === 'put') {\n        await this.put(op.key, op.value)\n      }\n    }\n  }\n\n  /**\n   * Note that the returned shallow copy will share the underlying database with the original\n   *\n   * @returns DB\n   */\n  shallowCopy(): DB<TKey, TValue> {\n    return new MapDB<TKey, TValue>(this._database)\n  }\n\n  open() {\n    return Promise.resolve()\n  }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,YAAY;AAIjD,OAAM,MAAOC,KAAK;EAOhBC,YAAYC,QAA4B;IACtC,IAAI,CAACC,SAAS,GAAGD,QAAQ,IAAI,IAAIE,GAAG,EAAgB;EACtD;EAEA,MAAMC,GAAGA,CAACC,GAAS;IACjB,MAAMC,KAAK,GAAGD,GAAG,YAAYE,UAAU,GAAGT,oBAAoB,CAACO,GAAG,CAAC,GAAGA,GAAG,CAACG,QAAQ,EAAE;IACpF,OAAO,IAAI,CAACN,SAAS,CAACE,GAAG,CAACE,KAAa,CAAC;EAC1C;EAEA,MAAMG,GAAGA,CAACJ,GAAS,EAAEK,GAAW;IAC9B,MAAMJ,KAAK,GAAGD,GAAG,YAAYE,UAAU,GAAGT,oBAAoB,CAACO,GAAG,CAAC,GAAGA,GAAG,CAACG,QAAQ,EAAE;IACpF,IAAI,CAACN,SAAS,CAACS,GAAG,CAACL,KAAa,EAAEI,GAAG,CAAC;EACxC;EAEA,MAAME,GAAGA,CAACP,GAAS;IACjB,MAAMC,KAAK,GAAGD,GAAG,YAAYE,UAAU,GAAGT,oBAAoB,CAACO,GAAG,CAAC,GAAGA,GAAG,CAACG,QAAQ,EAAE;IACpF,IAAI,CAACN,SAAS,CAACW,MAAM,CAACP,KAAa,CAAC;EACtC;EAEA,MAAMQ,KAAKA,CAACC,OAAkC;IAC5C,KAAK,MAAMC,EAAE,IAAID,OAAO,EAAE;MACxB,IAAIC,EAAE,CAACC,IAAI,KAAK,KAAK,EAAE;QACrB,MAAM,IAAI,CAACL,GAAG,CAACI,EAAE,CAACX,GAAG,CAAC;;MAGxB,IAAIW,EAAE,CAACC,IAAI,KAAK,KAAK,EAAE;QACrB,MAAM,IAAI,CAACR,GAAG,CAACO,EAAE,CAACX,GAAG,EAAEW,EAAE,CAACE,KAAK,CAAC;;;EAGtC;EAEA;;;;;EAKAC,WAAWA,CAAA;IACT,OAAO,IAAIpB,KAAK,CAAe,IAAI,CAACG,SAAS,CAAC;EAChD;EAEAkB,IAAIA,CAAA;IACF,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}