{"ast":null,"code":"import { getAddress } from '../address/getAddress.js';\nimport { isAddressEqual } from '../address/isAddressEqual.js';\nimport { recoverAuthorizationAddress } from './recoverAuthorizationAddress.js';\n/**\n * Verify that an Authorization object was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyAuthorization}\n *\n * @param parameters - {@link VerifyAuthorizationParameters}\n * @returns Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\n */\nexport async function verifyAuthorization({\n  address,\n  authorization,\n  signature\n}) {\n  return isAddressEqual(getAddress(address), await recoverAuthorizationAddress({\n    authorization,\n    signature\n  }));\n}","map":{"version":3,"names":["getAddress","isAddressEqual","recoverAuthorizationAddress","verifyAuthorization","address","authorization","signature"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\authorization\\verifyAuthorization.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  type RecoverAuthorizationAddressParameters,\n  recoverAuthorizationAddress,\n} from './recoverAuthorizationAddress.js'\n\nexport type VerifyAuthorizationParameters =\n  RecoverAuthorizationAddressParameters & {\n    /** The address that signed the Authorization object. */\n    address: Address\n  }\n\nexport type VerifyAuthorizationReturnType = boolean\n\nexport type VerifyAuthorizationErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverAuthorizationAddressErrorType\n  | ErrorType\n\n/**\n * Verify that an Authorization object was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyAuthorization}\n *\n * @param parameters - {@link VerifyAuthorizationParameters}\n * @returns Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\n */\nexport async function verifyAuthorization({\n  address,\n  authorization,\n  signature,\n}: VerifyAuthorizationParameters): Promise<VerifyAuthorizationReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverAuthorizationAddress({\n      authorization,\n      signature,\n    }),\n  )\n}\n"],"mappings":"AAGA,SAAmCA,UAAU,QAAQ,0BAA0B;AAC/E,SAEEC,cAAc,QACT,8BAA8B;AACrC,SAGEC,2BAA2B,QACtB,kCAAkC;AAgBzC;;;;;;;;AAQA,OAAO,eAAeC,mBAAmBA,CAAC;EACxCC,OAAO;EACPC,aAAa;EACbC;AAAS,CACqB;EAC9B,OAAOL,cAAc,CACnBD,UAAU,CAACI,OAAO,CAAC,EACnB,MAAMF,2BAA2B,CAAC;IAChCG,aAAa;IACbC;GACD,CAAC,CACH;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}