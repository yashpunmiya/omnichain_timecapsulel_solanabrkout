{"ast":null,"code":"import { verifyMessageSignature } from './signMessage.js';\nimport { arraysEqual } from './util.js';\n/**\n * TODO: docs\n */\nexport function verifySignIn(input, output) {\n  const {\n    signedMessage,\n    signature,\n    account: {\n      publicKey\n    }\n  } = output;\n  const message = deriveSignInMessage(input, output);\n  return !!message && verifyMessageSignature({\n    message,\n    signedMessage,\n    signature,\n    publicKey: publicKey\n  });\n}\n/**\n * TODO: docs\n */\nexport function deriveSignInMessage(input, output) {\n  const text = deriveSignInMessageText(input, output);\n  if (!text) return null;\n  return new TextEncoder().encode(text);\n}\n/**\n * TODO: docs\n */\nexport function deriveSignInMessageText(input, output) {\n  const parsed = parseSignInMessage(output.signedMessage);\n  if (!parsed) return null;\n  if (input.domain && input.domain !== parsed.domain) return null;\n  if (input.address && input.address !== parsed.address) return null;\n  if (input.statement !== parsed.statement) return null;\n  if (input.uri !== parsed.uri) return null;\n  if (input.version !== parsed.version) return null;\n  if (input.chainId !== parsed.chainId) return null;\n  if (input.nonce !== parsed.nonce) return null;\n  if (input.issuedAt !== parsed.issuedAt) return null;\n  if (input.expirationTime !== parsed.expirationTime) return null;\n  if (input.notBefore !== parsed.notBefore) return null;\n  if (input.requestId !== parsed.requestId) return null;\n  if (input.resources) {\n    if (!parsed.resources) return null;\n    if (!arraysEqual(input.resources, parsed.resources)) return null;\n  } else if (parsed.resources) return null;\n  return createSignInMessageText(parsed);\n}\n/**\n * TODO: docs\n */\nexport function parseSignInMessage(message) {\n  const text = new TextDecoder().decode(message);\n  return parseSignInMessageText(text);\n}\n// TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\nconst DOMAIN = '(?<domain>[^\\\\n]+?) wants you to sign in with your Solana account:\\\\n';\nconst ADDRESS = '(?<address>[^\\\\n]+)(?:\\\\n|$)';\nconst STATEMENT = '(?:\\\\n(?<statement>[\\\\S\\\\s]*?)(?:\\\\n|$))??';\nconst URI = '(?:\\\\nURI: (?<uri>[^\\\\n]+))?';\nconst VERSION = '(?:\\\\nVersion: (?<version>[^\\\\n]+))?';\nconst CHAIN_ID = '(?:\\\\nChain ID: (?<chainId>[^\\\\n]+))?';\nconst NONCE = '(?:\\\\nNonce: (?<nonce>[^\\\\n]+))?';\nconst ISSUED_AT = '(?:\\\\nIssued At: (?<issuedAt>[^\\\\n]+))?';\nconst EXPIRATION_TIME = '(?:\\\\nExpiration Time: (?<expirationTime>[^\\\\n]+))?';\nconst NOT_BEFORE = '(?:\\\\nNot Before: (?<notBefore>[^\\\\n]+))?';\nconst REQUEST_ID = '(?:\\\\nRequest ID: (?<requestId>[^\\\\n]+))?';\nconst RESOURCES = '(?:\\\\nResources:(?<resources>(?:\\\\n- [^\\\\n]+)*))?';\nconst FIELDS = `${URI}${VERSION}${CHAIN_ID}${NONCE}${ISSUED_AT}${EXPIRATION_TIME}${NOT_BEFORE}${REQUEST_ID}${RESOURCES}`;\nconst MESSAGE = new RegExp(`^${DOMAIN}${ADDRESS}${STATEMENT}${FIELDS}\\\\n*$`);\n/**\n * TODO: docs\n */\nexport function parseSignInMessageText(text) {\n  const match = MESSAGE.exec(text);\n  if (!match) return null;\n  const groups = match.groups;\n  if (!groups) return null;\n  return {\n    domain: groups.domain,\n    address: groups.address,\n    statement: groups.statement,\n    uri: groups.uri,\n    version: groups.version,\n    nonce: groups.nonce,\n    chainId: groups.chainId,\n    issuedAt: groups.issuedAt,\n    expirationTime: groups.expirationTime,\n    notBefore: groups.notBefore,\n    requestId: groups.requestId,\n    resources: groups.resources?.split('\\n- ').slice(1)\n  };\n}\n/**\n * TODO: docs\n */\nexport function createSignInMessage(input) {\n  const text = createSignInMessageText(input);\n  return new TextEncoder().encode(text);\n}\n/**\n * TODO: docs\n */\nexport function createSignInMessageText(input) {\n  // ${domain} wants you to sign in with your Solana account:\n  // ${address}\n  //\n  // ${statement}\n  //\n  // URI: ${uri}\n  // Version: ${version}\n  // Chain ID: ${chain}\n  // Nonce: ${nonce}\n  // Issued At: ${issued-at}\n  // Expiration Time: ${expiration-time}\n  // Not Before: ${not-before}\n  // Request ID: ${request-id}\n  // Resources:\n  // - ${resources[0]}\n  // - ${resources[1]}\n  // ...\n  // - ${resources[n]}\n  let message = `${input.domain} wants you to sign in with your Solana account:\\n`;\n  message += `${input.address}`;\n  if (input.statement) {\n    message += `\\n\\n${input.statement}`;\n  }\n  const fields = [];\n  if (input.uri) {\n    fields.push(`URI: ${input.uri}`);\n  }\n  if (input.version) {\n    fields.push(`Version: ${input.version}`);\n  }\n  if (input.chainId) {\n    fields.push(`Chain ID: ${input.chainId}`);\n  }\n  if (input.nonce) {\n    fields.push(`Nonce: ${input.nonce}`);\n  }\n  if (input.issuedAt) {\n    fields.push(`Issued At: ${input.issuedAt}`);\n  }\n  if (input.expirationTime) {\n    fields.push(`Expiration Time: ${input.expirationTime}`);\n  }\n  if (input.notBefore) {\n    fields.push(`Not Before: ${input.notBefore}`);\n  }\n  if (input.requestId) {\n    fields.push(`Request ID: ${input.requestId}`);\n  }\n  if (input.resources) {\n    fields.push(`Resources:`);\n    for (const resource of input.resources) {\n      fields.push(`- ${resource}`);\n    }\n  }\n  if (fields.length) {\n    message += `\\n\\n${fields.join('\\n')}`;\n  }\n  return message;\n}","map":{"version":3,"names":["verifyMessageSignature","arraysEqual","verifySignIn","input","output","signedMessage","signature","account","publicKey","message","deriveSignInMessage","text","deriveSignInMessageText","TextEncoder","encode","parsed","parseSignInMessage","domain","address","statement","uri","version","chainId","nonce","issuedAt","expirationTime","notBefore","requestId","resources","createSignInMessageText","TextDecoder","decode","parseSignInMessageText","DOMAIN","ADDRESS","STATEMENT","URI","VERSION","CHAIN_ID","NONCE","ISSUED_AT","EXPIRATION_TIME","NOT_BEFORE","REQUEST_ID","RESOURCES","FIELDS","MESSAGE","RegExp","match","exec","groups","split","slice","createSignInMessage","fields","push","resource","length","join"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@solana\\wallet-standard-util\\src\\signIn.ts"],"sourcesContent":["import type { SolanaSignInInput, SolanaSignInOutput } from '@solana/wallet-standard-features';\nimport { verifyMessageSignature } from './signMessage.js';\nimport { arraysEqual } from './util.js';\n\n/**\n * TODO: docs\n */\nexport function verifySignIn(input: SolanaSignInInput, output: SolanaSignInOutput): boolean {\n    const {\n        signedMessage,\n        signature,\n        account: { publicKey },\n    } = output;\n    const message = deriveSignInMessage(input, output);\n    return (\n        !!message && verifyMessageSignature({ message, signedMessage, signature, publicKey: publicKey as Uint8Array })\n    );\n}\n\n/**\n * TODO: docs\n */\nexport function deriveSignInMessage(input: SolanaSignInInput, output: SolanaSignInOutput): Uint8Array | null {\n    const text = deriveSignInMessageText(input, output);\n    if (!text) return null;\n    return new TextEncoder().encode(text);\n}\n\n/**\n * TODO: docs\n */\nexport function deriveSignInMessageText(input: SolanaSignInInput, output: SolanaSignInOutput): string | null {\n    const parsed = parseSignInMessage(output.signedMessage);\n    if (!parsed) return null;\n\n    if (input.domain && input.domain !== parsed.domain) return null;\n    if (input.address && input.address !== parsed.address) return null;\n    if (input.statement !== parsed.statement) return null;\n    if (input.uri !== parsed.uri) return null;\n    if (input.version !== parsed.version) return null;\n    if (input.chainId !== parsed.chainId) return null;\n    if (input.nonce !== parsed.nonce) return null;\n    if (input.issuedAt !== parsed.issuedAt) return null;\n    if (input.expirationTime !== parsed.expirationTime) return null;\n    if (input.notBefore !== parsed.notBefore) return null;\n    if (input.requestId !== parsed.requestId) return null;\n    if (input.resources) {\n        if (!parsed.resources) return null;\n        if (!arraysEqual(input.resources, parsed.resources)) return null;\n    } else if (parsed.resources) return null;\n\n    return createSignInMessageText(parsed);\n}\n\n/**\n * TODO: docs\n */\nexport type SolanaSignInInputWithRequiredFields = SolanaSignInInput &\n    Required<Pick<SolanaSignInInput, 'domain' | 'address'>>;\n\n/**\n * TODO: docs\n */\nexport function parseSignInMessage(message: Uint8Array): SolanaSignInInputWithRequiredFields | null {\n    const text = new TextDecoder().decode(message);\n    return parseSignInMessageText(text);\n}\n\n// TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\nconst DOMAIN = '(?<domain>[^\\\\n]+?) wants you to sign in with your Solana account:\\\\n';\nconst ADDRESS = '(?<address>[^\\\\n]+)(?:\\\\n|$)';\nconst STATEMENT = '(?:\\\\n(?<statement>[\\\\S\\\\s]*?)(?:\\\\n|$))??';\nconst URI = '(?:\\\\nURI: (?<uri>[^\\\\n]+))?';\nconst VERSION = '(?:\\\\nVersion: (?<version>[^\\\\n]+))?';\nconst CHAIN_ID = '(?:\\\\nChain ID: (?<chainId>[^\\\\n]+))?';\nconst NONCE = '(?:\\\\nNonce: (?<nonce>[^\\\\n]+))?';\nconst ISSUED_AT = '(?:\\\\nIssued At: (?<issuedAt>[^\\\\n]+))?';\nconst EXPIRATION_TIME = '(?:\\\\nExpiration Time: (?<expirationTime>[^\\\\n]+))?';\nconst NOT_BEFORE = '(?:\\\\nNot Before: (?<notBefore>[^\\\\n]+))?';\nconst REQUEST_ID = '(?:\\\\nRequest ID: (?<requestId>[^\\\\n]+))?';\nconst RESOURCES = '(?:\\\\nResources:(?<resources>(?:\\\\n- [^\\\\n]+)*))?';\nconst FIELDS = `${URI}${VERSION}${CHAIN_ID}${NONCE}${ISSUED_AT}${EXPIRATION_TIME}${NOT_BEFORE}${REQUEST_ID}${RESOURCES}`;\nconst MESSAGE = new RegExp(`^${DOMAIN}${ADDRESS}${STATEMENT}${FIELDS}\\\\n*$`);\n\n/**\n * TODO: docs\n */\nexport function parseSignInMessageText(text: string): SolanaSignInInputWithRequiredFields | null {\n    const match = MESSAGE.exec(text);\n    if (!match) return null;\n    const groups = match.groups;\n    if (!groups) return null;\n\n    return {\n        domain: groups.domain!,\n\n        address: groups.address!,\n        statement: groups.statement,\n        uri: groups.uri,\n        version: groups.version,\n        nonce: groups.nonce,\n        chainId: groups.chainId,\n        issuedAt: groups.issuedAt,\n        expirationTime: groups.expirationTime,\n        notBefore: groups.notBefore,\n        requestId: groups.requestId,\n        resources: groups.resources?.split('\\n- ').slice(1),\n    };\n}\n\n/**\n * TODO: docs\n */\nexport function createSignInMessage(input: SolanaSignInInputWithRequiredFields): Uint8Array {\n    const text = createSignInMessageText(input);\n    return new TextEncoder().encode(text);\n}\n\n/**\n * TODO: docs\n */\nexport function createSignInMessageText(input: SolanaSignInInputWithRequiredFields): string {\n    // ${domain} wants you to sign in with your Solana account:\n    // ${address}\n    //\n    // ${statement}\n    //\n    // URI: ${uri}\n    // Version: ${version}\n    // Chain ID: ${chain}\n    // Nonce: ${nonce}\n    // Issued At: ${issued-at}\n    // Expiration Time: ${expiration-time}\n    // Not Before: ${not-before}\n    // Request ID: ${request-id}\n    // Resources:\n    // - ${resources[0]}\n    // - ${resources[1]}\n    // ...\n    // - ${resources[n]}\n\n    let message = `${input.domain} wants you to sign in with your Solana account:\\n`;\n    message += `${input.address}`;\n\n    if (input.statement) {\n        message += `\\n\\n${input.statement}`;\n    }\n\n    const fields: string[] = [];\n    if (input.uri) {\n        fields.push(`URI: ${input.uri}`);\n    }\n    if (input.version) {\n        fields.push(`Version: ${input.version}`);\n    }\n    if (input.chainId) {\n        fields.push(`Chain ID: ${input.chainId}`);\n    }\n    if (input.nonce) {\n        fields.push(`Nonce: ${input.nonce}`);\n    }\n    if (input.issuedAt) {\n        fields.push(`Issued At: ${input.issuedAt}`);\n    }\n    if (input.expirationTime) {\n        fields.push(`Expiration Time: ${input.expirationTime}`);\n    }\n    if (input.notBefore) {\n        fields.push(`Not Before: ${input.notBefore}`);\n    }\n    if (input.requestId) {\n        fields.push(`Request ID: ${input.requestId}`);\n    }\n    if (input.resources) {\n        fields.push(`Resources:`);\n        for (const resource of input.resources) {\n            fields.push(`- ${resource}`);\n        }\n    }\n    if (fields.length) {\n        message += `\\n\\n${fields.join('\\n')}`;\n    }\n\n    return message;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}