{"ast":null,"code":"import { withResolvers } from './withResolvers.js';\nconst schedulerCache = /*#__PURE__*/new Map();\n/** @internal */\nexport function createBatchScheduler({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0,\n  sort\n}) {\n  const exec = async () => {\n    const scheduler = getScheduler();\n    flush();\n    const args = scheduler.map(({\n      args\n    }) => args);\n    if (args.length === 0) return;\n    fn(args).then(data => {\n      if (sort && Array.isArray(data)) data.sort(sort);\n      for (let i = 0; i < scheduler.length; i++) {\n        const {\n          resolve\n        } = scheduler[i];\n        resolve?.([data[i], data]);\n      }\n    }).catch(err => {\n      for (let i = 0; i < scheduler.length; i++) {\n        const {\n          reject\n        } = scheduler[i];\n        reject?.(err);\n      }\n    });\n  };\n  const flush = () => schedulerCache.delete(id);\n  const getBatchedArgs = () => getScheduler().map(({\n    args\n  }) => args);\n  const getScheduler = () => schedulerCache.get(id) || [];\n  const setScheduler = item => schedulerCache.set(id, [...getScheduler(), item]);\n  return {\n    flush,\n    async schedule(args) {\n      const {\n        promise,\n        resolve,\n        reject\n      } = withResolvers();\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args]);\n      if (split) exec();\n      const hasActiveScheduler = getScheduler().length > 0;\n      if (hasActiveScheduler) {\n        setScheduler({\n          args,\n          resolve,\n          reject\n        });\n        return promise;\n      }\n      setScheduler({\n        args,\n        resolve,\n        reject\n      });\n      setTimeout(exec, wait);\n      return promise;\n    }\n  };\n}","map":{"version":3,"names":["withResolvers","schedulerCache","Map","createBatchScheduler","fn","id","shouldSplitBatch","wait","sort","exec","scheduler","getScheduler","flush","args","map","length","then","data","Array","isArray","i","resolve","catch","err","reject","delete","getBatchedArgs","get","setScheduler","item","set","schedule","promise","split","hasActiveScheduler","setTimeout"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\promise\\createBatchScheduler.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport { type PromiseWithResolvers, withResolvers } from './withResolvers.js'\n\ntype Resolved<returnType extends readonly unknown[] = any> = [\n  result: returnType[number],\n  results: returnType,\n]\n\ntype SchedulerItem = {\n  args: unknown\n  resolve: PromiseWithResolvers<unknown>['resolve']\n  reject: PromiseWithResolvers<unknown>['reject']\n}\n\ntype BatchResultsCompareFn<result = unknown> = (a: result, b: result) => number\n\ntype CreateBatchSchedulerArguments<\n  parameters = unknown,\n  returnType extends readonly unknown[] = readonly unknown[],\n> = {\n  fn: (args: parameters[]) => Promise<returnType>\n  id: number | string\n  shouldSplitBatch?: ((args: parameters[]) => boolean) | undefined\n  wait?: number | undefined\n  sort?: BatchResultsCompareFn<returnType[number]> | undefined\n}\n\ntype CreateBatchSchedulerReturnType<\n  parameters = unknown,\n  returnType extends readonly unknown[] = readonly unknown[],\n> = {\n  flush: () => void\n  schedule: parameters extends undefined\n    ? (args?: parameters | undefined) => Promise<Resolved<returnType>>\n    : (args: parameters) => Promise<Resolved<returnType>>\n}\n\nexport type CreateBatchSchedulerErrorType = ErrorType\n\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\n\n/** @internal */\nexport function createBatchScheduler<\n  parameters,\n  returnType extends readonly unknown[],\n>({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0,\n  sort,\n}: CreateBatchSchedulerArguments<\n  parameters,\n  returnType\n>): CreateBatchSchedulerReturnType<parameters, returnType> {\n  const exec = async () => {\n    const scheduler = getScheduler()\n    flush()\n\n    const args = scheduler.map(({ args }) => args)\n\n    if (args.length === 0) return\n\n    fn(args as parameters[])\n      .then((data) => {\n        if (sort && Array.isArray(data)) data.sort(sort)\n        for (let i = 0; i < scheduler.length; i++) {\n          const { resolve } = scheduler[i]\n          resolve?.([data[i], data])\n        }\n      })\n      .catch((err) => {\n        for (let i = 0; i < scheduler.length; i++) {\n          const { reject } = scheduler[i]\n          reject?.(err)\n        }\n      })\n  }\n\n  const flush = () => schedulerCache.delete(id)\n\n  const getBatchedArgs = () =>\n    getScheduler().map(({ args }) => args) as parameters[]\n\n  const getScheduler = () => schedulerCache.get(id) || []\n\n  const setScheduler = (item: SchedulerItem) =>\n    schedulerCache.set(id, [...getScheduler(), item])\n\n  return {\n    flush,\n    async schedule(args: parameters) {\n      const { promise, resolve, reject } = withResolvers()\n\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\n\n      if (split) exec()\n\n      const hasActiveScheduler = getScheduler().length > 0\n      if (hasActiveScheduler) {\n        setScheduler({ args, resolve, reject })\n        return promise\n      }\n\n      setScheduler({ args, resolve, reject })\n      setTimeout(exec, wait)\n      return promise\n    },\n  } as unknown as CreateBatchSchedulerReturnType<parameters, returnType>\n}\n"],"mappings":"AACA,SAAoCA,aAAa,QAAQ,oBAAoB;AAsC7E,MAAMC,cAAc,GAAG,aAAc,IAAIC,GAAG,EAAoC;AAEhF;AACA,OAAM,SAAUC,oBAAoBA,CAGlC;EACAC,EAAE;EACFC,EAAE;EACFC,gBAAgB;EAChBC,IAAI,GAAG,CAAC;EACRC;AAAI,CAIL;EACC,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAW;IACtB,MAAMC,SAAS,GAAGC,YAAY,EAAE;IAChCC,KAAK,EAAE;IAEP,MAAMC,IAAI,GAAGH,SAAS,CAACI,GAAG,CAAC,CAAC;MAAED;IAAI,CAAE,KAAKA,IAAI,CAAC;IAE9C,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IAEvBX,EAAE,CAACS,IAAoB,CAAC,CACrBG,IAAI,CAAEC,IAAI,IAAI;MACb,IAAIT,IAAI,IAAIU,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAEA,IAAI,CAACT,IAAI,CAACA,IAAI,CAAC;MAChD,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACK,MAAM,EAAEK,CAAC,EAAE,EAAE;QACzC,MAAM;UAAEC;QAAO,CAAE,GAAGX,SAAS,CAACU,CAAC,CAAC;QAChCC,OAAO,GAAG,CAACJ,IAAI,CAACG,CAAC,CAAC,EAAEH,IAAI,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAI;MACb,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACK,MAAM,EAAEK,CAAC,EAAE,EAAE;QACzC,MAAM;UAAEI;QAAM,CAAE,GAAGd,SAAS,CAACU,CAAC,CAAC;QAC/BI,MAAM,GAAGD,GAAG,CAAC;MACf;IACF,CAAC,CAAC;EACN,CAAC;EAED,MAAMX,KAAK,GAAGA,CAAA,KAAMX,cAAc,CAACwB,MAAM,CAACpB,EAAE,CAAC;EAE7C,MAAMqB,cAAc,GAAGA,CAAA,KACrBf,YAAY,EAAE,CAACG,GAAG,CAAC,CAAC;IAAED;EAAI,CAAE,KAAKA,IAAI,CAAiB;EAExD,MAAMF,YAAY,GAAGA,CAAA,KAAMV,cAAc,CAAC0B,GAAG,CAACtB,EAAE,CAAC,IAAI,EAAE;EAEvD,MAAMuB,YAAY,GAAIC,IAAmB,IACvC5B,cAAc,CAAC6B,GAAG,CAACzB,EAAE,EAAE,CAAC,GAAGM,YAAY,EAAE,EAAEkB,IAAI,CAAC,CAAC;EAEnD,OAAO;IACLjB,KAAK;IACL,MAAMmB,QAAQA,CAAClB,IAAgB;MAC7B,MAAM;QAAEmB,OAAO;QAAEX,OAAO;QAAEG;MAAM,CAAE,GAAGxB,aAAa,EAAE;MAEpD,MAAMiC,KAAK,GAAG3B,gBAAgB,GAAG,CAAC,GAAGoB,cAAc,EAAE,EAAEb,IAAI,CAAC,CAAC;MAE7D,IAAIoB,KAAK,EAAExB,IAAI,EAAE;MAEjB,MAAMyB,kBAAkB,GAAGvB,YAAY,EAAE,CAACI,MAAM,GAAG,CAAC;MACpD,IAAImB,kBAAkB,EAAE;QACtBN,YAAY,CAAC;UAAEf,IAAI;UAAEQ,OAAO;UAAEG;QAAM,CAAE,CAAC;QACvC,OAAOQ,OAAO;MAChB;MAEAJ,YAAY,CAAC;QAAEf,IAAI;QAAEQ,OAAO;QAAEG;MAAM,CAAE,CAAC;MACvCW,UAAU,CAAC1B,IAAI,EAAEF,IAAI,CAAC;MACtB,OAAOyB,OAAO;IAChB;GACoE;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}