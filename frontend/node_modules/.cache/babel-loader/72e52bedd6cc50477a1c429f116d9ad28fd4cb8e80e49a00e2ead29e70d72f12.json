{"ast":null,"code":"/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope(client, {\n  method\n}) {\n  const requestMap = {};\n  if (client.transport.type === 'fallback') client.transport.onResponse?.(({\n    method: method_,\n    response: id,\n    status,\n    transport\n  }) => {\n    if (status === 'success' && method === method_) requestMap[id] = transport.request;\n  });\n  return id => requestMap[id] || client.request;\n}\n//# sourceMappingURL=createFilterRequestScope.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}