{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeMessage = exports.encode = void 0;\nexports.patch = patch;\nconst light_1 = require(\"protobufjs/light\");\nconst utils_1 = require(\"./utils\");\nconst transform = (fieldType, value) => {\n  if (fieldType === 'bytes') {\n    if (typeof value === 'string' && !value) return value;\n    return Buffer.from(value, 'hex');\n  }\n  if (typeof value === 'number' && !Number.isSafeInteger(value)) {\n    throw new RangeError('field value is not within safe integer range');\n  }\n  return value;\n};\nfunction patch(Message, payload) {\n  const patched = {};\n  if (!Message.fields) {\n    return patched;\n  }\n  Object.keys(Message.fields).forEach(key => {\n    const field = Message.fields[key];\n    const value = payload[key];\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if ((0, utils_1.isPrimitiveField)(field.type)) {\n      if (field.repeated) {\n        patched[key] = value.map(v => transform(field.type, v));\n      } else {\n        patched[key] = transform(field.type, value);\n      }\n      return;\n    }\n    if (field.repeated) {\n      const fieldType = Message.lookupTypeOrEnum(field.type);\n      if (fieldType instanceof light_1.Enum) {\n        patched[key] = value;\n      } else {\n        patched[key] = value.map(v => patch(fieldType, v));\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      const RefMessage = Message.lookupType(field.type);\n      patched[key] = patch(RefMessage, value);\n    } else if (typeof value === 'number') {\n      const RefMessage = Message.lookupEnum(field.type);\n      patched[key] = RefMessage.values[value];\n    } else {\n      patched[key] = value;\n    }\n  });\n  return patched;\n}\nconst encode = (Message, data) => {\n  const payload = patch(Message, data);\n  const message = Message.fromObject(payload);\n  const bytes = Message.encode(message).finish();\n  return Buffer.from(bytes);\n};\nexports.encode = encode;\nconst encodeMessage = (messages, messageName, data) => {\n  const {\n    Message,\n    messageType\n  } = (0, utils_1.createMessageFromName)(messages, messageName);\n  const message = (0, exports.encode)(Message, data);\n  return {\n    messageType,\n    message\n  };\n};\nexports.encodeMessage = encodeMessage;\n//# sourceMappingURL=encode.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}