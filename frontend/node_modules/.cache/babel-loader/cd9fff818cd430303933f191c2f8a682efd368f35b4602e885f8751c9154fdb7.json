{"ast":null,"code":"import { InvalidDecimalNumberError } from '../../errors/unit.js';\n/**\n * Multiplies a string representation of a number by a given exponent of base 10 (10exponent).\n *\n * - Docs: https://viem.sh/docs/utilities/parseUnits\n *\n * @example\n * import { parseUnits } from 'viem'\n *\n * parseUnits('420', 9)\n * // 420000000000n\n */\nexport function parseUnits(value, decimals) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value)) throw new InvalidDecimalNumberError({\n    value\n  });\n  let [integer, fraction = '0'] = value.split('.');\n  const negative = integer.startsWith('-');\n  if (negative) integer = integer.slice(1);\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '');\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1) integer = `${BigInt(integer) + 1n}`;\n    fraction = '';\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [fraction.slice(0, decimals - 1), fraction.slice(decimals - 1, decimals), fraction.slice(decimals)];\n    const rounded = Math.round(Number(`${unit}.${right}`));\n    if (rounded > 9) fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');else fraction = `${left}${rounded}`;\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1);\n      integer = `${BigInt(integer) + 1n}`;\n    }\n    fraction = fraction.slice(0, decimals);\n  } else {\n    fraction = fraction.padEnd(decimals, '0');\n  }\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n}","map":{"version":3,"names":["InvalidDecimalNumberError","parseUnits","value","decimals","test","integer","fraction","split","negative","startsWith","slice","replace","Math","round","Number","BigInt","length","left","unit","right","rounded","padStart","padEnd"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\unit\\parseUnits.ts"],"sourcesContent":["import { InvalidDecimalNumberError } from '../../errors/unit.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type ParseUnitsErrorType = ErrorType\n\n/**\n * Multiplies a string representation of a number by a given exponent of base 10 (10exponent).\n *\n * - Docs: https://viem.sh/docs/utilities/parseUnits\n *\n * @example\n * import { parseUnits } from 'viem'\n *\n * parseUnits('420', 9)\n * // 420000000000n\n */\nexport function parseUnits(value: string, decimals: number) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n    throw new InvalidDecimalNumberError({ value })\n\n  let [integer, fraction = '0'] = value.split('.')\n\n  const negative = integer.startsWith('-')\n  if (negative) integer = integer.slice(1)\n\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '')\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1)\n      integer = `${BigInt(integer) + 1n}`\n    fraction = ''\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [\n      fraction.slice(0, decimals - 1),\n      fraction.slice(decimals - 1, decimals),\n      fraction.slice(decimals),\n    ]\n\n    const rounded = Math.round(Number(`${unit}.${right}`))\n    if (rounded > 9)\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0')\n    else fraction = `${left}${rounded}`\n\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1)\n      integer = `${BigInt(integer) + 1n}`\n    }\n\n    fraction = fraction.slice(0, decimals)\n  } else {\n    fraction = fraction.padEnd(decimals, '0')\n  }\n\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`)\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,sBAAsB;AAKhE;;;;;;;;;;;AAWA,OAAM,SAAUC,UAAUA,CAACC,KAAa,EAAEC,QAAgB;EACxD,IAAI,CAAC,2BAA2B,CAACC,IAAI,CAACF,KAAK,CAAC,EAC1C,MAAM,IAAIF,yBAAyB,CAAC;IAAEE;EAAK,CAAE,CAAC;EAEhD,IAAI,CAACG,OAAO,EAAEC,QAAQ,GAAG,GAAG,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;EAEhD,MAAMC,QAAQ,GAAGH,OAAO,CAACI,UAAU,CAAC,GAAG,CAAC;EACxC,IAAID,QAAQ,EAAEH,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC;EAExC;EACAJ,QAAQ,GAAGA,QAAQ,CAACK,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EAExC;EACA,IAAIR,QAAQ,KAAK,CAAC,EAAE;IAClB,IAAIS,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,IAAIR,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,EAC1CD,OAAO,GAAG,GAAGU,MAAM,CAACV,OAAO,CAAC,GAAG,EAAE,EAAE;IACrCC,QAAQ,GAAG,EAAE;EACf,CAAC,MAAM,IAAIA,QAAQ,CAACU,MAAM,GAAGb,QAAQ,EAAE;IACrC,MAAM,CAACc,IAAI,EAAEC,IAAI,EAAEC,KAAK,CAAC,GAAG,CAC1Bb,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAEP,QAAQ,GAAG,CAAC,CAAC,EAC/BG,QAAQ,CAACI,KAAK,CAACP,QAAQ,GAAG,CAAC,EAAEA,QAAQ,CAAC,EACtCG,QAAQ,CAACI,KAAK,CAACP,QAAQ,CAAC,CACzB;IAED,MAAMiB,OAAO,GAAGR,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,GAAGI,IAAI,IAAIC,KAAK,EAAE,CAAC,CAAC;IACtD,IAAIC,OAAO,GAAG,CAAC,EACbd,QAAQ,GAAG,GAAGS,MAAM,CAACE,IAAI,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAG,CAACM,QAAQ,CAACJ,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,MACrEV,QAAQ,GAAG,GAAGW,IAAI,GAAGG,OAAO,EAAE;IAEnC,IAAId,QAAQ,CAACU,MAAM,GAAGb,QAAQ,EAAE;MAC9BG,QAAQ,GAAGA,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC;MAC5BL,OAAO,GAAG,GAAGU,MAAM,CAACV,OAAO,CAAC,GAAG,EAAE,EAAE;IACrC;IAEAC,QAAQ,GAAGA,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAEP,QAAQ,CAAC;EACxC,CAAC,MAAM;IACLG,QAAQ,GAAGA,QAAQ,CAACgB,MAAM,CAACnB,QAAQ,EAAE,GAAG,CAAC;EAC3C;EAEA,OAAOY,MAAM,CAAC,GAAGP,QAAQ,GAAG,GAAG,GAAG,EAAE,GAAGH,OAAO,GAAGC,QAAQ,EAAE,CAAC;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}