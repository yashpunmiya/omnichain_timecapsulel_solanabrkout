{"ast":null,"code":"import { proxy, snapshot } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { OptionsUtil } from '../utils/OptionsUtil.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  features: ConstantsUtil.DEFAULT_FEATURES,\n  projectId: '',\n  sdkType: 'appkit',\n  sdkVersion: 'html-wagmi-undefined',\n  defaultAccountTypes: ConstantsUtil.DEFAULT_ACCOUNT_TYPES,\n  enableNetworkSwitch: true\n});\n// -- Controller ---------------------------------------- //\nexport const OptionsController = {\n  state,\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  setOptions(options) {\n    Object.assign(state, options);\n  },\n  setFeatures(features) {\n    if (!features) {\n      return;\n    }\n    if (!state.features) {\n      state.features = ConstantsUtil.DEFAULT_FEATURES;\n    }\n    const newFeatures = {\n      ...state.features,\n      ...features\n    };\n    state.features = newFeatures;\n    if (state.features.socials) {\n      state.features.socials = OptionsUtil.filterSocialsByPlatform(state.features.socials);\n    }\n  },\n  setProjectId(projectId) {\n    state.projectId = projectId;\n  },\n  setCustomRpcUrls(customRpcUrls) {\n    state.customRpcUrls = customRpcUrls;\n  },\n  setAllWallets(allWallets) {\n    state.allWallets = allWallets;\n  },\n  setIncludeWalletIds(includeWalletIds) {\n    state.includeWalletIds = includeWalletIds;\n  },\n  setExcludeWalletIds(excludeWalletIds) {\n    state.excludeWalletIds = excludeWalletIds;\n  },\n  setFeaturedWalletIds(featuredWalletIds) {\n    state.featuredWalletIds = featuredWalletIds;\n  },\n  setTokens(tokens) {\n    state.tokens = tokens;\n  },\n  setTermsConditionsUrl(termsConditionsUrl) {\n    state.termsConditionsUrl = termsConditionsUrl;\n  },\n  setPrivacyPolicyUrl(privacyPolicyUrl) {\n    state.privacyPolicyUrl = privacyPolicyUrl;\n  },\n  setCustomWallets(customWallets) {\n    state.customWallets = customWallets;\n  },\n  setIsSiweEnabled(isSiweEnabled) {\n    state.isSiweEnabled = isSiweEnabled;\n  },\n  setIsUniversalProvider(isUniversalProvider) {\n    state.isUniversalProvider = isUniversalProvider;\n  },\n  setSdkVersion(sdkVersion) {\n    state.sdkVersion = sdkVersion;\n  },\n  setMetadata(metadata) {\n    state.metadata = metadata;\n  },\n  setDisableAppend(disableAppend) {\n    state.disableAppend = disableAppend;\n  },\n  setEIP6963Enabled(enableEIP6963) {\n    state.enableEIP6963 = enableEIP6963;\n  },\n  setDebug(debug) {\n    state.debug = debug;\n  },\n  setEnableWalletConnect(enableWalletConnect) {\n    state.enableWalletConnect = enableWalletConnect;\n  },\n  setEnableWalletGuide(enableWalletGuide) {\n    state.enableWalletGuide = enableWalletGuide;\n  },\n  setEnableAuthLogger(enableAuthLogger) {\n    state.enableAuthLogger = enableAuthLogger;\n  },\n  setEnableWallets(enableWallets) {\n    state.enableWallets = enableWallets;\n  },\n  setHasMultipleAddresses(hasMultipleAddresses) {\n    state.hasMultipleAddresses = hasMultipleAddresses;\n  },\n  setSIWX(siwx) {\n    state.siwx = siwx;\n  },\n  setConnectMethodsOrder(connectMethodsOrder) {\n    state.features = {\n      ...state.features,\n      connectMethodsOrder\n    };\n  },\n  setWalletFeaturesOrder(walletFeaturesOrder) {\n    state.features = {\n      ...state.features,\n      walletFeaturesOrder\n    };\n  },\n  setSocialsOrder(socialsOrder) {\n    state.features = {\n      ...state.features,\n      socials: socialsOrder\n    };\n  },\n  setCollapseWallets(collapseWallets) {\n    state.features = {\n      ...state.features,\n      collapseWallets\n    };\n  },\n  setEnableEmbedded(enableEmbedded) {\n    state.enableEmbedded = enableEmbedded;\n  },\n  setAllowUnsupportedChain(allowUnsupportedChain) {\n    state.allowUnsupportedChain = allowUnsupportedChain;\n  },\n  setManualWCControl(manualWCControl) {\n    state.manualWCControl = manualWCControl;\n  },\n  setEnableNetworkSwitch(enableNetworkSwitch) {\n    state.enableNetworkSwitch = enableNetworkSwitch;\n  },\n  setDefaultAccountTypes(defaultAccountType = {}) {\n    Object.entries(defaultAccountType).forEach(([namespace, accountType]) => {\n      if (accountType) {\n        // @ts-expect-error - Keys are validated by the param type\n        state.defaultAccountTypes[namespace] = accountType;\n      }\n    });\n  },\n  setUniversalProviderConfigOverride(universalProviderConfigOverride) {\n    state.universalProviderConfigOverride = universalProviderConfigOverride;\n  },\n  getUniversalProviderConfigOverride() {\n    return state.universalProviderConfigOverride;\n  },\n  getSnapshot() {\n    return snapshot(state);\n  }\n};\n//# sourceMappingURL=OptionsController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}