{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumVerifyMessage = exports.EthereumSignTypedHash = exports.EthereumSignTypedData = exports.EthereumSignTypedDataMessage = exports.EthereumSignTypedDataTypes = exports.EthereumSignedTx = exports.EthereumSignTransaction = exports.EthereumTransactionEIP1559 = exports.EthereumAccessList = exports.EthereumTransaction = exports.EthereumSignMessage = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst params_1 = require(\"../../params\");\nexports.EthereumSignMessage = schema_utils_1.Type.Object({\n  path: params_1.DerivationPath,\n  message: schema_utils_1.Type.String(),\n  hex: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n});\nexports.EthereumTransaction = schema_utils_1.Type.Object({\n  to: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  value: schema_utils_1.Type.String(),\n  gasPrice: schema_utils_1.Type.String(),\n  gasLimit: schema_utils_1.Type.String(),\n  maxFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  maxPriorityFeePerGas: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  nonce: schema_utils_1.Type.String(),\n  data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  chainId: schema_utils_1.Type.Number(),\n  txType: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n});\nexports.EthereumAccessList = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  storageKeys: schema_utils_1.Type.Array(schema_utils_1.Type.String())\n});\nexports.EthereumTransactionEIP1559 = schema_utils_1.Type.Object({\n  to: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  value: schema_utils_1.Type.String(),\n  gasLimit: schema_utils_1.Type.String(),\n  gasPrice: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  nonce: schema_utils_1.Type.String(),\n  data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  chainId: schema_utils_1.Type.Number(),\n  maxFeePerGas: schema_utils_1.Type.String(),\n  maxPriorityFeePerGas: schema_utils_1.Type.String(),\n  accessList: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.EthereumAccessList))\n});\nexports.EthereumSignTransaction = schema_utils_1.Type.Object({\n  path: params_1.DerivationPath,\n  transaction: schema_utils_1.Type.Union([exports.EthereumTransaction, exports.EthereumTransactionEIP1559]),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n});\nexports.EthereumSignedTx = schema_utils_1.Type.Object({\n  v: schema_utils_1.Type.String(),\n  r: schema_utils_1.Type.String(),\n  s: schema_utils_1.Type.String(),\n  serializedTx: schema_utils_1.Type.String()\n});\nconst EthereumSignTypedDataTypeProperty = schema_utils_1.Type.Object({\n  name: schema_utils_1.Type.String(),\n  type: schema_utils_1.Type.String()\n});\nexports.EthereumSignTypedDataTypes = schema_utils_1.Type.Object({\n  EIP712Domain: schema_utils_1.Type.Array(EthereumSignTypedDataTypeProperty)\n}, {\n  additionalProperties: schema_utils_1.Type.Array(EthereumSignTypedDataTypeProperty)\n});\nexports.EthereumSignTypedDataMessage = schema_utils_1.Type.Object({\n  types: exports.EthereumSignTypedDataTypes,\n  primaryType: schema_utils_1.Type.String(),\n  domain: schema_utils_1.Type.Object({\n    name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n    version: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n    chainId: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.BigInt(), schema_utils_1.Type.String()])),\n    verifyingContract: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n    salt: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.ArrayBuffer(), schema_utils_1.Type.String()]))\n  }),\n  message: schema_utils_1.Type.Object({}, {\n    additionalProperties: schema_utils_1.Type.Any()\n  })\n});\nexports.EthereumSignTypedData = schema_utils_1.Type.Object({\n  path: params_1.DerivationPath,\n  data: exports.EthereumSignTypedDataMessage,\n  metamask_v4_compat: schema_utils_1.Type.Boolean(),\n  domain_separator_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  message_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined())\n});\nexports.EthereumSignTypedHash = schema_utils_1.Type.Object({\n  path: params_1.DerivationPath,\n  data: exports.EthereumSignTypedDataMessage,\n  metamask_v4_compat: schema_utils_1.Type.Boolean(),\n  domain_separator_hash: schema_utils_1.Type.String(),\n  message_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.EthereumVerifyMessage = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  message: schema_utils_1.Type.String(),\n  hex: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  signature: schema_utils_1.Type.String()\n});\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}