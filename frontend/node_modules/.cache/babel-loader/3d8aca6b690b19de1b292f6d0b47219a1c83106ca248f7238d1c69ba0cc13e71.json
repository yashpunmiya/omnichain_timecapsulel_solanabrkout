{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeDeepObject = void 0;\nconst isObject = obj => {\n  if (typeof obj === 'object' && obj !== null) {\n    if (typeof Object.getPrototypeOf === 'function') {\n      const prototype = Object.getPrototypeOf(obj);\n      return prototype === Object.prototype || prototype === null;\n    }\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  }\n  return false;\n};\nconst mergeValuesWithPath = (target, value, [key, ...rest]) => {\n  if (key === undefined) {\n    return mergeValues(target, value);\n  } else if (!isObject(target)) {\n    return {\n      [key]: mergeValuesWithPath({}, value, rest)\n    };\n  } else {\n    return {\n      ...target,\n      [key]: mergeValuesWithPath(target[key], value, rest)\n    };\n  }\n};\nconst mergeValues = (target, value) => {\n  if (Array.isArray(target) && Array.isArray(value)) {\n    return exports.mergeDeepObject.options.mergeArrays ? Array.from(new Set(target.concat(value))) : value;\n  } else if (isObject(target) && isObject(value)) {\n    return (0, exports.mergeDeepObject)(target, value);\n  } else {\n    return value;\n  }\n};\nconst mergeDeepObject = (...objects) => objects.reduce((result, current) => {\n  if (Array.isArray(current)) {\n    throw new TypeError('Arguments provided to ts-deepmerge must be objects, not arrays.');\n  }\n  Object.keys(current).forEach(key => {\n    if (['__proto__', 'constructor', 'prototype'].includes(key)) {\n      return;\n    }\n    if (exports.mergeDeepObject.options.dotNotation) {\n      const [first, ...rest] = key.split('.');\n      result[first] = mergeValuesWithPath(result[first], current[key], rest);\n    } else {\n      result[key] = mergeValues(result[key], current[key]);\n    }\n  });\n  return result;\n}, {});\nexports.mergeDeepObject = mergeDeepObject;\nconst defaultOptions = {\n  mergeArrays: true,\n  dotNotation: false\n};\nexports.mergeDeepObject.options = defaultOptions;\nexports.mergeDeepObject.withOptions = (options, ...objects) => {\n  exports.mergeDeepObject.options = {\n    ...defaultOptions,\n    ...options\n  };\n  const result = (0, exports.mergeDeepObject)(...objects);\n  exports.mergeDeepObject.options = defaultOptions;\n  return result;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","mergeDeepObject","isObject","obj","getPrototypeOf","prototype","toString","call","mergeValuesWithPath","target","key","rest","undefined","mergeValues","Array","isArray","options","mergeArrays","from","Set","concat","objects","reduce","result","current","TypeError","keys","forEach","includes","dotNotation","first","split","defaultOptions","withOptions"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@trezor/utils/lib/mergeDeepObject.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeDeepObject = void 0;\nconst isObject = (obj) => {\n    if (typeof obj === 'object' && obj !== null) {\n        if (typeof Object.getPrototypeOf === 'function') {\n            const prototype = Object.getPrototypeOf(obj);\n            return prototype === Object.prototype || prototype === null;\n        }\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n    return false;\n};\nconst mergeValuesWithPath = (target, value, [key, ...rest]) => {\n    if (key === undefined) {\n        return mergeValues(target, value);\n    }\n    else if (!isObject(target)) {\n        return { [key]: mergeValuesWithPath({}, value, rest) };\n    }\n    else {\n        return { ...target, [key]: mergeValuesWithPath(target[key], value, rest) };\n    }\n};\nconst mergeValues = (target, value) => {\n    if (Array.isArray(target) && Array.isArray(value)) {\n        return exports.mergeDeepObject.options.mergeArrays\n            ? Array.from(new Set(target.concat(value)))\n            : value;\n    }\n    else if (isObject(target) && isObject(value)) {\n        return (0, exports.mergeDeepObject)(target, value);\n    }\n    else {\n        return value;\n    }\n};\nconst mergeDeepObject = (...objects) => objects.reduce((result, current) => {\n    if (Array.isArray(current)) {\n        throw new TypeError('Arguments provided to ts-deepmerge must be objects, not arrays.');\n    }\n    Object.keys(current).forEach(key => {\n        if (['__proto__', 'constructor', 'prototype'].includes(key)) {\n            return;\n        }\n        if (exports.mergeDeepObject.options.dotNotation) {\n            const [first, ...rest] = key.split('.');\n            result[first] = mergeValuesWithPath(result[first], current[key], rest);\n        }\n        else {\n            result[key] = mergeValues(result[key], current[key]);\n        }\n    });\n    return result;\n}, {});\nexports.mergeDeepObject = mergeDeepObject;\nconst defaultOptions = {\n    mergeArrays: true,\n    dotNotation: false,\n};\nexports.mergeDeepObject.options = defaultOptions;\nexports.mergeDeepObject.withOptions = (options, ...objects) => {\n    exports.mergeDeepObject.options = {\n        ...defaultOptions,\n        ...options,\n    };\n    const result = (0, exports.mergeDeepObject)(...objects);\n    exports.mergeDeepObject.options = defaultOptions;\n    return result;\n};\n//# sourceMappingURL=mergeDeepObject.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}