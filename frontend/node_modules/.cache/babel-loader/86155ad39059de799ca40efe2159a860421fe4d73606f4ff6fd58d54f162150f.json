{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBitcoinOnlyDevice = exports.hasBitcoinOnlyFirmware = exports.getFirmwareVersion = exports.getFirmwareVersionArray = exports.getFirmwareRevision = void 0;\nconst modeUtils_1 = require(\"./modeUtils\");\nconst types_1 = require(\"./types\");\nconst getFirmwareRevision = device => device?.features?.revision || '';\nexports.getFirmwareRevision = getFirmwareRevision;\nconst getFirmwareVersionArray = device => {\n  if (!device?.features) {\n    return null;\n  }\n  const {\n    features\n  } = device;\n  if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {\n    return features.fw_major ? [features.fw_major, features.fw_minor, features.fw_patch] : null;\n  }\n  return [features.major_version, features.minor_version, features.patch_version];\n};\nexports.getFirmwareVersionArray = getFirmwareVersionArray;\nconst getFirmwareVersion = device => {\n  if (!device?.features) {\n    return '';\n  }\n  const {\n    features\n  } = device;\n  if ((0, modeUtils_1.isDeviceInBootloaderMode)(device)) {\n    return features.fw_major ? `${features.fw_major}.${features.fw_minor}.${features.fw_patch}` : '';\n  }\n  return `${features.major_version}.${features.minor_version}.${features.patch_version}`;\n};\nexports.getFirmwareVersion = getFirmwareVersion;\nconst hasBitcoinOnlyFirmware = device => device?.firmwareType === types_1.FirmwareType.BitcoinOnly;\nexports.hasBitcoinOnlyFirmware = hasBitcoinOnlyFirmware;\nconst isBitcoinOnlyDevice = device => !!device?.features?.unit_btconly && device?.firmwareType !== types_1.FirmwareType.Regular;\nexports.isBitcoinOnlyDevice = isBitcoinOnlyDevice;\n//# sourceMappingURL=firmwareUtils.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}