{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexFromPropertyKey = IndexFromPropertyKey;\nexports.IndexFromPropertyKeys = IndexFromPropertyKeys;\nexports.Index = Index;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../never/index\");\nconst index_2 = require(\"../intersect/index\");\nconst index_3 = require(\"../union/index\");\nconst indexed_property_keys_1 = require(\"./indexed-property-keys\");\nconst indexed_from_mapped_key_1 = require(\"./indexed-from-mapped-key\");\nconst indexed_from_mapped_result_1 = require(\"./indexed-from-mapped-result\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// prettier-ignore\nfunction FromRest(T, K) {\n  return T.map(L => IndexFromPropertyKey(L, K));\n}\n// prettier-ignore\nfunction FromIntersectRest(T) {\n  return T.filter(L => !(0, kind_1.IsNever)(L));\n}\n// prettier-ignore\nfunction FromIntersect(T, K) {\n  return (0, index_2.IntersectEvaluated)(FromIntersectRest(FromRest(T, K)));\n}\n// prettier-ignore\nfunction FromUnionRest(T) {\n  return T.some(L => (0, kind_1.IsNever)(L)) ? [] : T;\n}\n// prettier-ignore\nfunction FromUnion(T, K) {\n  return (0, index_3.UnionEvaluated)(FromUnionRest(FromRest(T, K)));\n}\n// prettier-ignore\nfunction FromTuple(T, K) {\n  return K in T ? T[K] : K === '[number]' ? (0, index_3.UnionEvaluated)(T) : (0, index_1.Never)();\n}\n// prettier-ignore\nfunction FromArray(T, K) {\n  return K === '[number]' ? T : (0, index_1.Never)();\n}\n// prettier-ignore\nfunction FromProperty(T, K) {\n  return K in T ? T[K] : (0, index_1.Never)();\n}\n// prettier-ignore\nfunction IndexFromPropertyKey(T, K) {\n  return (0, kind_1.IsIntersect)(T) ? FromIntersect(T.allOf, K) : (0, kind_1.IsUnion)(T) ? FromUnion(T.anyOf, K) : (0, kind_1.IsTuple)(T) ? FromTuple(T.items ?? [], K) : (0, kind_1.IsArray)(T) ? FromArray(T.items, K) : (0, kind_1.IsObject)(T) ? FromProperty(T.properties, K) : (0, index_1.Never)();\n}\n// prettier-ignore\nfunction IndexFromPropertyKeys(T, K) {\n  return K.map(L => IndexFromPropertyKey(T, L));\n}\n// prettier-ignore\nfunction FromSchema(T, K) {\n  return (0, index_3.UnionEvaluated)(IndexFromPropertyKeys(T, K));\n}\n/** `[Json]` Returns an Indexed property type for the given keys */\nfunction Index(T, K, options) {\n  // mapped-types\n  if ((0, kind_1.IsMappedResult)(K)) return (0, indexed_from_mapped_result_1.IndexFromMappedResult)(T, K, options);\n  if ((0, kind_1.IsMappedKey)(K)) return (0, indexed_from_mapped_key_1.IndexFromMappedKey)(T, K, options);\n  // prettier-ignore\n  return (0, type_1.CreateType)((0, kind_1.IsSchema)(K) ? FromSchema(T, (0, indexed_property_keys_1.IndexPropertyKeys)(K)) : FromSchema(T, K), options);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}