{"ast":null,"code":"import { AbiErrorInputsNotFoundError, AbiErrorNotFoundError } from '../../errors/abi.js';\nimport { concatHex } from '../data/concat.js';\nimport { toFunctionSelector } from '../hash/toFunctionSelector.js';\nimport { encodeAbiParameters } from './encodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeErrorResult';\nexport function encodeErrorResult(parameters) {\n  const {\n    abi,\n    errorName,\n    args\n  } = parameters;\n  let abiItem = abi[0];\n  if (errorName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: errorName\n    });\n    if (!item) throw new AbiErrorNotFoundError(errorName, {\n      docsPath\n    });\n    abiItem = item;\n  }\n  if (abiItem.type !== 'error') throw new AbiErrorNotFoundError(undefined, {\n    docsPath\n  });\n  const definition = formatAbiItem(abiItem);\n  const signature = toFunctionSelector(definition);\n  let data = '0x';\n  if (args && args.length > 0) {\n    if (!abiItem.inputs) throw new AbiErrorInputsNotFoundError(abiItem.name, {\n      docsPath\n    });\n    data = encodeAbiParameters(abiItem.inputs, args);\n  }\n  return concatHex([signature, data]);\n}\n//# sourceMappingURL=encodeErrorResult.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}