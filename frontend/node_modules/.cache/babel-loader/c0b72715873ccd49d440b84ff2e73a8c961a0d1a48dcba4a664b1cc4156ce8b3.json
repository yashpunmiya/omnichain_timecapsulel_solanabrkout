{"ast":null,"code":"import Gi, { EventEmitter as ee } from \"events\";\nimport { HEARTBEAT_EVENTS as ne, HeartBeat as Wi } from \"@walletconnect/heartbeat\";\nimport Hi from \"@walletconnect/keyvaluestorage\";\nimport { generateChildLogger as N, getLoggerContext as U, pino as Yi, getDefaultLoggerOptions as et, generatePlatformLogger as Ji } from \"@walletconnect/logger\";\nimport { IMessageTracker as Xi, IPublisher as Zi, ISubscriber as Qi, IRelayer as es, IStore as ts, IJsonRpcHistory as is, IExpirer as ss, IVerify as rs, IEchoClient as ns, IEventClient as os, ICore as as } from \"@walletconnect/types\";\nimport { ONE_DAY as te, SIX_HOURS as cs, THIRTY_DAYS as Ce, FIVE_SECONDS as Pe, THIRTY_SECONDS as Se, toMiliseconds as O, ONE_MINUTE as tt, ONE_SECOND as Z, FIVE_MINUTES as fe, fromMiliseconds as it } from \"@walletconnect/time\";\nimport { safeJsonStringify as hs, safeJsonParse as st } from \"@walletconnect/safe-json\";\nimport * as De from \"@walletconnect/relay-auth\";\nimport { decodeJWT as rt } from \"@walletconnect/relay-auth\";\nimport { mapToObj as Re, objToMap as Oe, getInternalError as m, generateRandomBytes32 as Ae, generateKeyPair as ls, deriveSymKey as us, hashKey as ds, validateEncoding as gs, isTypeTwoEnvelope as nt, encodeTypeTwoEnvelope as ps, isTypeOneEnvelope as ot, encrypt as ys, validateDecoding as bs, decodeTypeTwoEnvelope as ms, decrypt as fs, deserialize as at, decodeTypeByte as Ds, BASE64 as ct, BASE16 as vs, hashMessage as ve, getRelayProtocolApi as oe, getRelayProtocolName as we, isUndefined as xe, createExpiringPromise as X, getSdkError as ae, sleep as ws, isAndroid as _s, getAppId as ht, isIos as Es, isOnline as lt, calcExpiry as ce, isNode as ut, formatRelayRpcUrl as Is, subscribeToNetworkChange as Ts, isProposalStruct as Cs, isSessionStruct as Ps, parseExpirerTarget as Ss, TYPE_1 as Rs, formatUri as dt, parseUri as gt, createDelayedPromise as Os, engineEvent as Ne, isExpired as pt, isValidParams as $e, isValidUrl as As, isValidString as xs, formatTopicTarget as Ns, formatIdTarget as $s, isTestRun as yt, isBrowser as zs, verifyP256Jwt as Ls, uuidv4 as bt, formatUA as ks, getAppMetadata as js } from \"@walletconnect/utils\";\nimport { toString as Us } from \"uint8arrays\";\nimport { JsonRpcProvider as Ms } from \"@walletconnect/jsonrpc-provider\";\nimport { getBigIntRpcId as mt, isJsonRpcRequest as ft, isJsonRpcResponse as Dt, formatJsonRpcResult as vt, formatJsonRpcRequest as wt, formatJsonRpcError as Fs, isJsonRpcResult as Ks, isJsonRpcError as _t } from \"@walletconnect/jsonrpc-utils\";\nimport Bs from \"@walletconnect/jsonrpc-ws-connection\";\nimport { getDocument as Vs } from \"@walletconnect/window-getters\";\nconst ze = \"wc\",\n  Le = 2,\n  he = \"core\",\n  B = `${ze}@2:${he}:`,\n  Et = {\n    name: he,\n    logger: \"error\"\n  },\n  It = {\n    database: \":memory:\"\n  },\n  Tt = \"crypto\",\n  ke = \"client_ed25519_seed\",\n  Ct = te,\n  Pt = \"keychain\",\n  St = \"0.3\",\n  Rt = \"messages\",\n  Ot = \"0.3\",\n  je = cs,\n  At = \"publisher\",\n  xt = \"irn\",\n  Nt = \"error\",\n  Ue = \"wss://relay.walletconnect.org\",\n  $t = \"relayer\",\n  C = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n  },\n  zt = \"_subscription\",\n  L = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n  },\n  Lt = .1,\n  qs = {\n    database: \":memory:\"\n  },\n  _e = \"2.19.1\",\n  Gs = 1e4,\n  Q = {\n    link_mode: \"link_mode\",\n    relay: \"relay\"\n  },\n  le = {\n    inbound: \"inbound\",\n    outbound: \"outbound\"\n  },\n  kt = \"0.3\",\n  jt = \"WALLETCONNECT_CLIENT_ID\",\n  Me = \"WALLETCONNECT_LINK_MODE_APPS\",\n  $ = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n  },\n  Ws = Ce,\n  Ut = \"subscription\",\n  Mt = \"0.3\",\n  Hs = Pe * 1e3,\n  Ft = \"pairing\",\n  Kt = \"0.3\",\n  Ys = Ce,\n  ie = {\n    wc_pairingDelete: {\n      req: {\n        ttl: te,\n        prompt: !1,\n        tag: 1e3\n      },\n      res: {\n        ttl: te,\n        prompt: !1,\n        tag: 1001\n      }\n    },\n    wc_pairingPing: {\n      req: {\n        ttl: Se,\n        prompt: !1,\n        tag: 1002\n      },\n      res: {\n        ttl: Se,\n        prompt: !1,\n        tag: 1003\n      }\n    },\n    unregistered_method: {\n      req: {\n        ttl: te,\n        prompt: !1,\n        tag: 0\n      },\n      res: {\n        ttl: te,\n        prompt: !1,\n        tag: 0\n      }\n    }\n  },\n  se = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n  },\n  M = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n  },\n  Bt = \"history\",\n  Vt = \"0.3\",\n  qt = \"expirer\",\n  F = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n  },\n  Gt = \"0.3\",\n  Js = te,\n  Wt = \"verify-api\",\n  Xs = \"https://verify.walletconnect.com\",\n  Ht = \"https://verify.walletconnect.org\",\n  ue = Ht,\n  Yt = `${ue}/v3`,\n  Jt = [Xs, Ht],\n  Xt = \"echo\",\n  Zt = \"https://echo.walletconnect.com\",\n  Zs = \"event-client\",\n  G = {\n    pairing_started: \"pairing_started\",\n    pairing_uri_validation_success: \"pairing_uri_validation_success\",\n    pairing_uri_not_expired: \"pairing_uri_not_expired\",\n    store_new_pairing: \"store_new_pairing\",\n    subscribing_pairing_topic: \"subscribing_pairing_topic\",\n    subscribe_pairing_topic_success: \"subscribe_pairing_topic_success\",\n    existing_pairing: \"existing_pairing\",\n    pairing_not_expired: \"pairing_not_expired\",\n    emit_inactive_pairing: \"emit_inactive_pairing\",\n    emit_session_proposal: \"emit_session_proposal\",\n    subscribing_to_pairing_topic: \"subscribing_to_pairing_topic\"\n  },\n  Y = {\n    no_wss_connection: \"no_wss_connection\",\n    no_internet_connection: \"no_internet_connection\",\n    malformed_pairing_uri: \"malformed_pairing_uri\",\n    active_pairing_already_exists: \"active_pairing_already_exists\",\n    subscribe_pairing_topic_failure: \"subscribe_pairing_topic_failure\",\n    pairing_expired: \"pairing_expired\",\n    proposal_expired: \"proposal_expired\",\n    proposal_listener_not_found: \"proposal_listener_not_found\"\n  },\n  Qs = {\n    session_approve_started: \"session_approve_started\",\n    proposal_not_expired: \"proposal_not_expired\",\n    session_namespaces_validation_success: \"session_namespaces_validation_success\",\n    create_session_topic: \"create_session_topic\",\n    subscribing_session_topic: \"subscribing_session_topic\",\n    subscribe_session_topic_success: \"subscribe_session_topic_success\",\n    publishing_session_approve: \"publishing_session_approve\",\n    session_approve_publish_success: \"session_approve_publish_success\",\n    store_session: \"store_session\",\n    publishing_session_settle: \"publishing_session_settle\",\n    session_settle_publish_success: \"session_settle_publish_success\"\n  },\n  er = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    proposal_expired: \"proposal_expired\",\n    subscribe_session_topic_failure: \"subscribe_session_topic_failure\",\n    session_approve_publish_failure: \"session_approve_publish_failure\",\n    session_settle_publish_failure: \"session_settle_publish_failure\",\n    session_approve_namespace_validation_failure: \"session_approve_namespace_validation_failure\",\n    proposal_not_found: \"proposal_not_found\"\n  },\n  tr = {\n    authenticated_session_approve_started: \"authenticated_session_approve_started\",\n    authenticated_session_not_expired: \"authenticated_session_not_expired\",\n    chains_caip2_compliant: \"chains_caip2_compliant\",\n    chains_evm_compliant: \"chains_evm_compliant\",\n    create_authenticated_session_topic: \"create_authenticated_session_topic\",\n    cacaos_verified: \"cacaos_verified\",\n    store_authenticated_session: \"store_authenticated_session\",\n    subscribing_authenticated_session_topic: \"subscribing_authenticated_session_topic\",\n    subscribe_authenticated_session_topic_success: \"subscribe_authenticated_session_topic_success\",\n    publishing_authenticated_session_approve: \"publishing_authenticated_session_approve\",\n    authenticated_session_approve_publish_success: \"authenticated_session_approve_publish_success\"\n  },\n  ir = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    missing_session_authenticate_request: \"missing_session_authenticate_request\",\n    session_authenticate_request_expired: \"session_authenticate_request_expired\",\n    chains_caip2_compliant_failure: \"chains_caip2_compliant_failure\",\n    chains_evm_compliant_failure: \"chains_evm_compliant_failure\",\n    invalid_cacao: \"invalid_cacao\",\n    subscribe_authenticated_session_topic_failure: \"subscribe_authenticated_session_topic_failure\",\n    authenticated_session_approve_publish_failure: \"authenticated_session_approve_publish_failure\",\n    authenticated_session_pending_request_not_found: \"authenticated_session_pending_request_not_found\"\n  },\n  Qt = .1,\n  ei = \"event-client\",\n  ti = 86400,\n  ii = \"https://pulse.walletconnect.org/batch\";\nfunction sr(r, e) {\n  if (r.length >= 255) throw new TypeError(\"Alphabet too long\");\n  for (var t = new Uint8Array(256), s = 0; s < t.length; s++) t[s] = 255;\n  for (var i = 0; i < r.length; i++) {\n    var n = r.charAt(i),\n      o = n.charCodeAt(0);\n    if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n    t[o] = i;\n  }\n  var a = r.length,\n    c = r.charAt(0),\n    h = Math.log(a) / Math.log(256),\n    u = Math.log(256) / Math.log(a);\n  function d(l) {\n    if (l instanceof Uint8Array || (ArrayBuffer.isView(l) ? l = new Uint8Array(l.buffer, l.byteOffset, l.byteLength) : Array.isArray(l) && (l = Uint8Array.from(l))), !(l instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n    if (l.length === 0) return \"\";\n    for (var b = 0, x = 0, I = 0, D = l.length; I !== D && l[I] === 0;) I++, b++;\n    for (var j = (D - I) * u + 1 >>> 0, T = new Uint8Array(j); I !== D;) {\n      for (var q = l[I], J = 0, K = j - 1; (q !== 0 || J < x) && K !== -1; K--, J++) q += 256 * T[K] >>> 0, T[K] = q % a >>> 0, q = q / a >>> 0;\n      if (q !== 0) throw new Error(\"Non-zero carry\");\n      x = J, I++;\n    }\n    for (var H = j - x; H !== j && T[H] === 0;) H++;\n    for (var me = c.repeat(b); H < j; ++H) me += r.charAt(T[H]);\n    return me;\n  }\n  function g(l) {\n    if (typeof l != \"string\") throw new TypeError(\"Expected String\");\n    if (l.length === 0) return new Uint8Array();\n    var b = 0;\n    if (l[b] !== \" \") {\n      for (var x = 0, I = 0; l[b] === c;) x++, b++;\n      for (var D = (l.length - b) * h + 1 >>> 0, j = new Uint8Array(D); l[b];) {\n        var T = t[l.charCodeAt(b)];\n        if (T === 255) return;\n        for (var q = 0, J = D - 1; (T !== 0 || q < I) && J !== -1; J--, q++) T += a * j[J] >>> 0, j[J] = T % 256 >>> 0, T = T / 256 >>> 0;\n        if (T !== 0) throw new Error(\"Non-zero carry\");\n        I = q, b++;\n      }\n      if (l[b] !== \" \") {\n        for (var K = D - I; K !== D && j[K] === 0;) K++;\n        for (var H = new Uint8Array(x + (D - K)), me = x; K !== D;) H[me++] = j[K++];\n        return H;\n      }\n    }\n  }\n  function _(l) {\n    var b = g(l);\n    if (b) return b;\n    throw new Error(`Non-${e} character`);\n  }\n  return {\n    encode: d,\n    decodeUnsafe: g,\n    decode: _\n  };\n}\nvar rr = sr,\n  nr = rr;\nconst si = r => {\n    if (r instanceof Uint8Array && r.constructor.name === \"Uint8Array\") return r;\n    if (r instanceof ArrayBuffer) return new Uint8Array(r);\n    if (ArrayBuffer.isView(r)) return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n  },\n  or = r => new TextEncoder().encode(r),\n  ar = r => new TextDecoder().decode(r);\nclass cr {\n  constructor(e, t, s) {\n    this.name = e, this.prefix = t, this.baseEncode = s;\n  }\n  encode(e) {\n    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n    throw Error(\"Unknown type, must be binary type\");\n  }\n}\nclass hr {\n  constructor(e, t, s) {\n    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n  }\n  decode(e) {\n    if (typeof e == \"string\") {\n      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      return this.baseDecode(e.slice(this.prefix.length));\n    } else throw Error(\"Can only multibase decode strings\");\n  }\n  or(e) {\n    return ri(this, e);\n  }\n}\nclass lr {\n  constructor(e) {\n    this.decoders = e;\n  }\n  or(e) {\n    return ri(this, e);\n  }\n  decode(e) {\n    const t = e[0],\n      s = this.decoders[t];\n    if (s) return s.decode(e);\n    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n  }\n}\nconst ri = (r, e) => new lr({\n  ...(r.decoders || {\n    [r.prefix]: r\n  }),\n  ...(e.decoders || {\n    [e.prefix]: e\n  })\n});\nclass ur {\n  constructor(e, t, s, i) {\n    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = i, this.encoder = new cr(e, t, s), this.decoder = new hr(e, t, i);\n  }\n  encode(e) {\n    return this.encoder.encode(e);\n  }\n  decode(e) {\n    return this.decoder.decode(e);\n  }\n}\nconst Ee = ({\n    name: r,\n    prefix: e,\n    encode: t,\n    decode: s\n  }) => new ur(r, e, t, s),\n  de = ({\n    prefix: r,\n    name: e,\n    alphabet: t\n  }) => {\n    const {\n      encode: s,\n      decode: i\n    } = nr(t, e);\n    return Ee({\n      prefix: r,\n      name: e,\n      encode: s,\n      decode: n => si(i(n))\n    });\n  },\n  dr = (r, e, t, s) => {\n    const i = {};\n    for (let u = 0; u < e.length; ++u) i[e[u]] = u;\n    let n = r.length;\n    for (; r[n - 1] === \"=\";) --n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let a = 0,\n      c = 0,\n      h = 0;\n    for (let u = 0; u < n; ++u) {\n      const d = i[r[u]];\n      if (d === void 0) throw new SyntaxError(`Non-${s} character`);\n      c = c << t | d, a += t, a >= 8 && (a -= 8, o[h++] = 255 & c >> a);\n    }\n    if (a >= t || 255 & c << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n  },\n  gr = (r, e, t) => {\n    const s = e[e.length - 1] === \"=\",\n      i = (1 << t) - 1;\n    let n = \"\",\n      o = 0,\n      a = 0;\n    for (let c = 0; c < r.length; ++c) for (a = a << 8 | r[c], o += 8; o > t;) o -= t, n += e[i & a >> o];\n    if (o && (n += e[i & a << t - o]), s) for (; n.length * t & 7;) n += \"=\";\n    return n;\n  },\n  P = ({\n    name: r,\n    prefix: e,\n    bitsPerChar: t,\n    alphabet: s\n  }) => Ee({\n    prefix: e,\n    name: r,\n    encode(i) {\n      return gr(i, s, t);\n    },\n    decode(i) {\n      return dr(i, s, t, r);\n    }\n  }),\n  pr = Ee({\n    prefix: \"\\0\",\n    name: \"identity\",\n    encode: r => ar(r),\n    decode: r => or(r)\n  });\nvar yr = Object.freeze({\n  __proto__: null,\n  identity: pr\n});\nconst br = P({\n  prefix: \"0\",\n  name: \"base2\",\n  alphabet: \"01\",\n  bitsPerChar: 1\n});\nvar mr = Object.freeze({\n  __proto__: null,\n  base2: br\n});\nconst fr = P({\n  prefix: \"7\",\n  name: \"base8\",\n  alphabet: \"01234567\",\n  bitsPerChar: 3\n});\nvar Dr = Object.freeze({\n  __proto__: null,\n  base8: fr\n});\nconst vr = de({\n  prefix: \"9\",\n  name: \"base10\",\n  alphabet: \"0123456789\"\n});\nvar wr = Object.freeze({\n  __proto__: null,\n  base10: vr\n});\nconst _r = P({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n  }),\n  Er = P({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n  });\nvar Ir = Object.freeze({\n  __proto__: null,\n  base16: _r,\n  base16upper: Er\n});\nconst Tr = P({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n  }),\n  Cr = P({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n  }),\n  Pr = P({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n  }),\n  Sr = P({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n  }),\n  Rr = P({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n  }),\n  Or = P({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n  }),\n  Ar = P({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n  }),\n  xr = P({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n  }),\n  Nr = P({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n  });\nvar $r = Object.freeze({\n  __proto__: null,\n  base32: Tr,\n  base32upper: Cr,\n  base32pad: Pr,\n  base32padupper: Sr,\n  base32hex: Rr,\n  base32hexupper: Or,\n  base32hexpad: Ar,\n  base32hexpadupper: xr,\n  base32z: Nr\n});\nconst zr = de({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n  }),\n  Lr = de({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  });\nvar kr = Object.freeze({\n  __proto__: null,\n  base36: zr,\n  base36upper: Lr\n});\nconst jr = de({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n  }),\n  Ur = de({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n  });\nvar Mr = Object.freeze({\n  __proto__: null,\n  base58btc: jr,\n  base58flickr: Ur\n});\nconst Fr = P({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n  }),\n  Kr = P({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n  }),\n  Br = P({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n  }),\n  Vr = P({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n  });\nvar qr = Object.freeze({\n  __proto__: null,\n  base64: Fr,\n  base64pad: Kr,\n  base64url: Br,\n  base64urlpad: Vr\n});\nconst ni = Array.from(\"\\u{1F680}\\u{1FA90}\\u2604\\u{1F6F0}\\u{1F30C}\\u{1F311}\\u{1F312}\\u{1F313}\\u{1F314}\\u{1F315}\\u{1F316}\\u{1F317}\\u{1F318}\\u{1F30D}\\u{1F30F}\\u{1F30E}\\u{1F409}\\u2600\\u{1F4BB}\\u{1F5A5}\\u{1F4BE}\\u{1F4BF}\\u{1F602}\\u2764\\u{1F60D}\\u{1F923}\\u{1F60A}\\u{1F64F}\\u{1F495}\\u{1F62D}\\u{1F618}\\u{1F44D}\\u{1F605}\\u{1F44F}\\u{1F601}\\u{1F525}\\u{1F970}\\u{1F494}\\u{1F496}\\u{1F499}\\u{1F622}\\u{1F914}\\u{1F606}\\u{1F644}\\u{1F4AA}\\u{1F609}\\u263A\\u{1F44C}\\u{1F917}\\u{1F49C}\\u{1F614}\\u{1F60E}\\u{1F607}\\u{1F339}\\u{1F926}\\u{1F389}\\u{1F49E}\\u270C\\u2728\\u{1F937}\\u{1F631}\\u{1F60C}\\u{1F338}\\u{1F64C}\\u{1F60B}\\u{1F497}\\u{1F49A}\\u{1F60F}\\u{1F49B}\\u{1F642}\\u{1F493}\\u{1F929}\\u{1F604}\\u{1F600}\\u{1F5A4}\\u{1F603}\\u{1F4AF}\\u{1F648}\\u{1F447}\\u{1F3B6}\\u{1F612}\\u{1F92D}\\u2763\\u{1F61C}\\u{1F48B}\\u{1F440}\\u{1F62A}\\u{1F611}\\u{1F4A5}\\u{1F64B}\\u{1F61E}\\u{1F629}\\u{1F621}\\u{1F92A}\\u{1F44A}\\u{1F973}\\u{1F625}\\u{1F924}\\u{1F449}\\u{1F483}\\u{1F633}\\u270B\\u{1F61A}\\u{1F61D}\\u{1F634}\\u{1F31F}\\u{1F62C}\\u{1F643}\\u{1F340}\\u{1F337}\\u{1F63B}\\u{1F613}\\u2B50\\u2705\\u{1F97A}\\u{1F308}\\u{1F608}\\u{1F918}\\u{1F4A6}\\u2714\\u{1F623}\\u{1F3C3}\\u{1F490}\\u2639\\u{1F38A}\\u{1F498}\\u{1F620}\\u261D\\u{1F615}\\u{1F33A}\\u{1F382}\\u{1F33B}\\u{1F610}\\u{1F595}\\u{1F49D}\\u{1F64A}\\u{1F639}\\u{1F5E3}\\u{1F4AB}\\u{1F480}\\u{1F451}\\u{1F3B5}\\u{1F91E}\\u{1F61B}\\u{1F534}\\u{1F624}\\u{1F33C}\\u{1F62B}\\u26BD\\u{1F919}\\u2615\\u{1F3C6}\\u{1F92B}\\u{1F448}\\u{1F62E}\\u{1F646}\\u{1F37B}\\u{1F343}\\u{1F436}\\u{1F481}\\u{1F632}\\u{1F33F}\\u{1F9E1}\\u{1F381}\\u26A1\\u{1F31E}\\u{1F388}\\u274C\\u270A\\u{1F44B}\\u{1F630}\\u{1F928}\\u{1F636}\\u{1F91D}\\u{1F6B6}\\u{1F4B0}\\u{1F353}\\u{1F4A2}\\u{1F91F}\\u{1F641}\\u{1F6A8}\\u{1F4A8}\\u{1F92C}\\u2708\\u{1F380}\\u{1F37A}\\u{1F913}\\u{1F619}\\u{1F49F}\\u{1F331}\\u{1F616}\\u{1F476}\\u{1F974}\\u25B6\\u27A1\\u2753\\u{1F48E}\\u{1F4B8}\\u2B07\\u{1F628}\\u{1F31A}\\u{1F98B}\\u{1F637}\\u{1F57A}\\u26A0\\u{1F645}\\u{1F61F}\\u{1F635}\\u{1F44E}\\u{1F932}\\u{1F920}\\u{1F927}\\u{1F4CC}\\u{1F535}\\u{1F485}\\u{1F9D0}\\u{1F43E}\\u{1F352}\\u{1F617}\\u{1F911}\\u{1F30A}\\u{1F92F}\\u{1F437}\\u260E\\u{1F4A7}\\u{1F62F}\\u{1F486}\\u{1F446}\\u{1F3A4}\\u{1F647}\\u{1F351}\\u2744\\u{1F334}\\u{1F4A3}\\u{1F438}\\u{1F48C}\\u{1F4CD}\\u{1F940}\\u{1F922}\\u{1F445}\\u{1F4A1}\\u{1F4A9}\\u{1F450}\\u{1F4F8}\\u{1F47B}\\u{1F910}\\u{1F92E}\\u{1F3BC}\\u{1F975}\\u{1F6A9}\\u{1F34E}\\u{1F34A}\\u{1F47C}\\u{1F48D}\\u{1F4E3}\\u{1F942}\"),\n  Gr = ni.reduce((r, e, t) => (r[t] = e, r), []),\n  Wr = ni.reduce((r, e, t) => (r[e.codePointAt(0)] = t, r), []);\nfunction Hr(r) {\n  return r.reduce((e, t) => (e += Gr[t], e), \"\");\n}\nfunction Yr(r) {\n  const e = [];\n  for (const t of r) {\n    const s = Wr[t.codePointAt(0)];\n    if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n    e.push(s);\n  }\n  return new Uint8Array(e);\n}\nconst Jr = Ee({\n  prefix: \"\\u{1F680}\",\n  name: \"base256emoji\",\n  encode: Hr,\n  decode: Yr\n});\nvar Xr = Object.freeze({\n    __proto__: null,\n    base256emoji: Jr\n  }),\n  Zr = ai,\n  oi = 128,\n  Qr = 127,\n  en = ~Qr,\n  tn = Math.pow(2, 31);\nfunction ai(r, e, t) {\n  e = e || [], t = t || 0;\n  for (var s = t; r >= tn;) e[t++] = r & 255 | oi, r /= 128;\n  for (; r & en;) e[t++] = r & 255 | oi, r >>>= 7;\n  return e[t] = r | 0, ai.bytes = t - s + 1, e;\n}\nvar sn = Fe,\n  rn = 128,\n  ci = 127;\nfunction Fe(r, s) {\n  var t = 0,\n    s = s || 0,\n    i = 0,\n    n = s,\n    o,\n    a = r.length;\n  do {\n    if (n >= a) throw Fe.bytes = 0, new RangeError(\"Could not decode varint\");\n    o = r[n++], t += i < 28 ? (o & ci) << i : (o & ci) * Math.pow(2, i), i += 7;\n  } while (o >= rn);\n  return Fe.bytes = n - s, t;\n}\nvar nn = Math.pow(2, 7),\n  on = Math.pow(2, 14),\n  an = Math.pow(2, 21),\n  cn = Math.pow(2, 28),\n  hn = Math.pow(2, 35),\n  ln = Math.pow(2, 42),\n  un = Math.pow(2, 49),\n  dn = Math.pow(2, 56),\n  gn = Math.pow(2, 63),\n  pn = function (r) {\n    return r < nn ? 1 : r < on ? 2 : r < an ? 3 : r < cn ? 4 : r < hn ? 5 : r < ln ? 6 : r < un ? 7 : r < dn ? 8 : r < gn ? 9 : 10;\n  },\n  yn = {\n    encode: Zr,\n    decode: sn,\n    encodingLength: pn\n  },\n  hi = yn;\nconst li = (r, e, t = 0) => (hi.encode(r, e, t), e),\n  ui = r => hi.encodingLength(r),\n  Ke = (r, e) => {\n    const t = e.byteLength,\n      s = ui(r),\n      i = s + ui(t),\n      n = new Uint8Array(i + t);\n    return li(r, n, 0), li(t, n, s), n.set(e, i), new bn(r, t, e, n);\n  };\nclass bn {\n  constructor(e, t, s, i) {\n    this.code = e, this.size = t, this.digest = s, this.bytes = i;\n  }\n}\nconst di = ({\n  name: r,\n  code: e,\n  encode: t\n}) => new mn(r, e, t);\nclass mn {\n  constructor(e, t, s) {\n    this.name = e, this.code = t, this.encode = s;\n  }\n  digest(e) {\n    if (e instanceof Uint8Array) {\n      const t = this.encode(e);\n      return t instanceof Uint8Array ? Ke(this.code, t) : t.then(s => Ke(this.code, s));\n    } else throw Error(\"Unknown type, must be binary type\");\n  }\n}\nconst gi = r => async e => new Uint8Array(await crypto.subtle.digest(r, e)),\n  fn = di({\n    name: \"sha2-256\",\n    code: 18,\n    encode: gi(\"SHA-256\")\n  }),\n  Dn = di({\n    name: \"sha2-512\",\n    code: 19,\n    encode: gi(\"SHA-512\")\n  });\nvar vn = Object.freeze({\n  __proto__: null,\n  sha256: fn,\n  sha512: Dn\n});\nconst pi = 0,\n  wn = \"identity\",\n  yi = si,\n  _n = r => Ke(pi, yi(r)),\n  En = {\n    code: pi,\n    name: wn,\n    encode: yi,\n    digest: _n\n  };\nvar In = Object.freeze({\n  __proto__: null,\n  identity: En\n});\nnew TextEncoder(), new TextDecoder();\nconst bi = {\n  ...yr,\n  ...mr,\n  ...Dr,\n  ...wr,\n  ...Ir,\n  ...$r,\n  ...kr,\n  ...Mr,\n  ...qr,\n  ...Xr\n};\n({\n  ...vn,\n  ...In\n});\nfunction Tn(r = 0) {\n  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r) : new Uint8Array(r);\n}\nfunction mi(r, e, t, s) {\n  return {\n    name: r,\n    prefix: e,\n    encoder: {\n      name: r,\n      prefix: e,\n      encode: t\n    },\n    decoder: {\n      decode: s\n    }\n  };\n}\nconst fi = mi(\"utf8\", \"u\", r => \"u\" + new TextDecoder(\"utf8\").decode(r), r => new TextEncoder().encode(r.substring(1))),\n  Be = mi(\"ascii\", \"a\", r => {\n    let e = \"a\";\n    for (let t = 0; t < r.length; t++) e += String.fromCharCode(r[t]);\n    return e;\n  }, r => {\n    r = r.substring(1);\n    const e = Tn(r.length);\n    for (let t = 0; t < r.length; t++) e[t] = r.charCodeAt(t);\n    return e;\n  }),\n  Cn = {\n    utf8: fi,\n    \"utf-8\": fi,\n    hex: bi.base16,\n    latin1: Be,\n    ascii: Be,\n    binary: Be,\n    ...bi\n  };\nfunction Pn(r, e = \"utf8\") {\n  const t = Cn[e];\n  if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n  return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r, \"utf8\") : t.decoder.decode(`${t.prefix}${r}`);\n}\nvar Sn = Object.defineProperty,\n  Rn = (r, e, t) => e in r ? Sn(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  W = (r, e, t) => Rn(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Di {\n  constructor(e, t) {\n    this.core = e, this.logger = t, W(this, \"keychain\", new Map()), W(this, \"name\", Pt), W(this, \"version\", St), W(this, \"initialized\", !1), W(this, \"storagePrefix\", B), W(this, \"init\", async () => {\n      if (!this.initialized) {\n        const s = await this.getKeyChain();\n        typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n      }\n    }), W(this, \"has\", s => (this.isInitialized(), this.keychain.has(s))), W(this, \"set\", async (s, i) => {\n      this.isInitialized(), this.keychain.set(s, i), await this.persist();\n    }), W(this, \"get\", s => {\n      this.isInitialized();\n      const i = this.keychain.get(s);\n      if (typeof i > \"u\") {\n        const {\n          message: n\n        } = m(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n        throw new Error(n);\n      }\n      return i;\n    }), W(this, \"del\", async s => {\n      this.isInitialized(), this.keychain.delete(s), await this.persist();\n    }), this.core = e, this.logger = N(t, this.name);\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n  }\n  async setKeyChain(e) {\n    await this.core.storage.setItem(this.storageKey, Re(e));\n  }\n  async getKeyChain() {\n    const e = await this.core.storage.getItem(this.storageKey);\n    return typeof e < \"u\" ? Oe(e) : void 0;\n  }\n  async persist() {\n    await this.setKeyChain(this.keychain);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nvar On = Object.defineProperty,\n  An = (r, e, t) => e in r ? On(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  S = (r, e, t) => An(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass vi {\n  constructor(e, t, s) {\n    this.core = e, this.logger = t, S(this, \"name\", Tt), S(this, \"keychain\"), S(this, \"randomSessionIdentifier\", Ae()), S(this, \"initialized\", !1), S(this, \"init\", async () => {\n      this.initialized || (await this.keychain.init(), this.initialized = !0);\n    }), S(this, \"hasKeys\", i => (this.isInitialized(), this.keychain.has(i))), S(this, \"getClientId\", async () => {\n      this.isInitialized();\n      const i = await this.getClientSeed(),\n        n = De.generateKeyPair(i);\n      return De.encodeIss(n.publicKey);\n    }), S(this, \"generateKeyPair\", () => {\n      this.isInitialized();\n      const i = ls();\n      return this.setPrivateKey(i.publicKey, i.privateKey);\n    }), S(this, \"signJWT\", async i => {\n      this.isInitialized();\n      const n = await this.getClientSeed(),\n        o = De.generateKeyPair(n),\n        a = this.randomSessionIdentifier,\n        c = Ct;\n      return await De.signJWT(a, i, c, o);\n    }), S(this, \"generateSharedKey\", (i, n, o) => {\n      this.isInitialized();\n      const a = this.getPrivateKey(i),\n        c = us(a, n);\n      return this.setSymKey(c, o);\n    }), S(this, \"setSymKey\", async (i, n) => {\n      this.isInitialized();\n      const o = n || ds(i);\n      return await this.keychain.set(o, i), o;\n    }), S(this, \"deleteKeyPair\", async i => {\n      this.isInitialized(), await this.keychain.del(i);\n    }), S(this, \"deleteSymKey\", async i => {\n      this.isInitialized(), await this.keychain.del(i);\n    }), S(this, \"encode\", async (i, n, o) => {\n      this.isInitialized();\n      const a = gs(o),\n        c = hs(n);\n      if (nt(a)) return ps(c, o?.encoding);\n      if (ot(a)) {\n        const g = a.senderPublicKey,\n          _ = a.receiverPublicKey;\n        i = await this.generateSharedKey(g, _);\n      }\n      const h = this.getSymKey(i),\n        {\n          type: u,\n          senderPublicKey: d\n        } = a;\n      return ys({\n        type: u,\n        symKey: h,\n        message: c,\n        senderPublicKey: d,\n        encoding: o?.encoding\n      });\n    }), S(this, \"decode\", async (i, n, o) => {\n      this.isInitialized();\n      const a = bs(n, o);\n      if (nt(a)) {\n        const c = ms(n, o?.encoding);\n        return st(c);\n      }\n      if (ot(a)) {\n        const c = a.receiverPublicKey,\n          h = a.senderPublicKey;\n        i = await this.generateSharedKey(c, h);\n      }\n      try {\n        const c = this.getSymKey(i),\n          h = fs({\n            symKey: c,\n            encoded: n,\n            encoding: o?.encoding\n          });\n        return st(h);\n      } catch (c) {\n        this.logger.error(`Failed to decode message from topic: '${i}', clientId: '${await this.getClientId()}'`), this.logger.error(c);\n      }\n    }), S(this, \"getPayloadType\", (i, n = ct) => {\n      const o = at({\n        encoded: i,\n        encoding: n\n      });\n      return Ds(o.type);\n    }), S(this, \"getPayloadSenderPublicKey\", (i, n = ct) => {\n      const o = at({\n        encoded: i,\n        encoding: n\n      });\n      return o.senderPublicKey ? Us(o.senderPublicKey, vs) : void 0;\n    }), this.core = e, this.logger = N(t, this.name), this.keychain = s || new Di(this.core, this.logger);\n  }\n  get context() {\n    return U(this.logger);\n  }\n  async setPrivateKey(e, t) {\n    return await this.keychain.set(e, t), e;\n  }\n  getPrivateKey(e) {\n    return this.keychain.get(e);\n  }\n  async getClientSeed() {\n    let e = \"\";\n    try {\n      e = this.keychain.get(ke);\n    } catch {\n      e = Ae(), await this.keychain.set(ke, e);\n    }\n    return Pn(e, \"base16\");\n  }\n  getSymKey(e) {\n    return this.keychain.get(e);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nvar xn = Object.defineProperty,\n  Nn = Object.defineProperties,\n  $n = Object.getOwnPropertyDescriptors,\n  wi = Object.getOwnPropertySymbols,\n  zn = Object.prototype.hasOwnProperty,\n  Ln = Object.prototype.propertyIsEnumerable,\n  Ve = (r, e, t) => e in r ? xn(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  kn = (r, e) => {\n    for (var t in e || (e = {})) zn.call(e, t) && Ve(r, t, e[t]);\n    if (wi) for (var t of wi(e)) Ln.call(e, t) && Ve(r, t, e[t]);\n    return r;\n  },\n  jn = (r, e) => Nn(r, $n(e)),\n  k = (r, e, t) => Ve(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass _i extends Xi {\n  constructor(e, t) {\n    super(e, t), this.logger = e, this.core = t, k(this, \"messages\", new Map()), k(this, \"messagesWithoutClientAck\", new Map()), k(this, \"name\", Rt), k(this, \"version\", Ot), k(this, \"initialized\", !1), k(this, \"storagePrefix\", B), k(this, \"init\", async () => {\n      if (!this.initialized) {\n        this.logger.trace(\"Initialized\");\n        try {\n          const s = await this.getRelayerMessages();\n          typeof s < \"u\" && (this.messages = s);\n          const i = await this.getRelayerMessagesWithoutClientAck();\n          typeof i < \"u\" && (this.messagesWithoutClientAck = i), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n            type: \"method\",\n            method: \"restore\",\n            size: this.messages.size\n          });\n        } catch (s) {\n          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n        } finally {\n          this.initialized = !0;\n        }\n      }\n    }), k(this, \"set\", async (s, i, n) => {\n      this.isInitialized();\n      const o = ve(i);\n      let a = this.messages.get(s);\n      if (typeof a > \"u\" && (a = {}), typeof a[o] < \"u\") return o;\n      if (a[o] = i, this.messages.set(s, a), n === le.inbound) {\n        const c = this.messagesWithoutClientAck.get(s) || {};\n        this.messagesWithoutClientAck.set(s, jn(kn({}, c), {\n          [o]: i\n        }));\n      }\n      return await this.persist(), o;\n    }), k(this, \"get\", s => {\n      this.isInitialized();\n      let i = this.messages.get(s);\n      return typeof i > \"u\" && (i = {}), i;\n    }), k(this, \"getWithoutAck\", s => {\n      this.isInitialized();\n      const i = {};\n      for (const n of s) {\n        const o = this.messagesWithoutClientAck.get(n) || {};\n        i[n] = Object.values(o);\n      }\n      return i;\n    }), k(this, \"has\", (s, i) => {\n      this.isInitialized();\n      const n = this.get(s),\n        o = ve(i);\n      return typeof n[o] < \"u\";\n    }), k(this, \"ack\", async (s, i) => {\n      this.isInitialized();\n      const n = this.messagesWithoutClientAck.get(s);\n      if (typeof n > \"u\") return;\n      const o = ve(i);\n      delete n[o], Object.keys(n).length === 0 ? this.messagesWithoutClientAck.delete(s) : this.messagesWithoutClientAck.set(s, n), await this.persist();\n    }), k(this, \"del\", async s => {\n      this.isInitialized(), this.messages.delete(s), this.messagesWithoutClientAck.delete(s), await this.persist();\n    }), this.logger = N(e, this.name), this.core = t;\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n  }\n  get storageKeyWithoutClientAck() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name + \"_withoutClientAck\";\n  }\n  async setRelayerMessages(e) {\n    await this.core.storage.setItem(this.storageKey, Re(e));\n  }\n  async setRelayerMessagesWithoutClientAck(e) {\n    await this.core.storage.setItem(this.storageKeyWithoutClientAck, Re(e));\n  }\n  async getRelayerMessages() {\n    const e = await this.core.storage.getItem(this.storageKey);\n    return typeof e < \"u\" ? Oe(e) : void 0;\n  }\n  async getRelayerMessagesWithoutClientAck() {\n    const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);\n    return typeof e < \"u\" ? Oe(e) : void 0;\n  }\n  async persist() {\n    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nvar Un = Object.defineProperty,\n  Mn = Object.defineProperties,\n  Fn = Object.getOwnPropertyDescriptors,\n  Ei = Object.getOwnPropertySymbols,\n  Kn = Object.prototype.hasOwnProperty,\n  Bn = Object.prototype.propertyIsEnumerable,\n  qe = (r, e, t) => e in r ? Un(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  Ie = (r, e) => {\n    for (var t in e || (e = {})) Kn.call(e, t) && qe(r, t, e[t]);\n    if (Ei) for (var t of Ei(e)) Bn.call(e, t) && qe(r, t, e[t]);\n    return r;\n  },\n  Ge = (r, e) => Mn(r, Fn(e)),\n  V = (r, e, t) => qe(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Vn extends Zi {\n  constructor(e, t) {\n    super(e, t), this.relayer = e, this.logger = t, V(this, \"events\", new ee()), V(this, \"name\", At), V(this, \"queue\", new Map()), V(this, \"publishTimeout\", O(tt)), V(this, \"initialPublishTimeout\", O(Z * 15)), V(this, \"needsTransportRestart\", !1), V(this, \"publish\", async (s, i, n) => {\n      var o;\n      this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n        type: \"method\",\n        method: \"publish\",\n        params: {\n          topic: s,\n          message: i,\n          opts: n\n        }\n      });\n      const a = n?.ttl || je,\n        c = we(n),\n        h = n?.prompt || !1,\n        u = n?.tag || 0,\n        d = n?.id || mt().toString(),\n        g = {\n          topic: s,\n          message: i,\n          opts: {\n            ttl: a,\n            relay: c,\n            prompt: h,\n            tag: u,\n            id: d,\n            attestation: n?.attestation,\n            tvf: n?.tvf\n          }\n        },\n        _ = `Failed to publish payload, please try again. id:${d} tag:${u}`;\n      try {\n        const l = new Promise(async b => {\n          const x = ({\n            id: D\n          }) => {\n            g.opts.id === D && (this.removeRequestFromQueue(D), this.relayer.events.removeListener(C.publish, x), b(g));\n          };\n          this.relayer.events.on(C.publish, x);\n          const I = X(new Promise((D, j) => {\n            this.rpcPublish({\n              topic: s,\n              message: i,\n              ttl: a,\n              prompt: h,\n              tag: u,\n              id: d,\n              attestation: n?.attestation,\n              tvf: n?.tvf\n            }).then(D).catch(T => {\n              this.logger.warn(T, T?.message), j(T);\n            });\n          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d} tag:${u}`);\n          try {\n            await I, this.events.removeListener(C.publish, x);\n          } catch (D) {\n            this.queue.set(d, Ge(Ie({}, g), {\n              attempt: 1\n            })), this.logger.warn(D, D?.message);\n          }\n        });\n        this.logger.trace({\n          type: \"method\",\n          method: \"publish\",\n          params: {\n            id: d,\n            topic: s,\n            message: i,\n            opts: n\n          }\n        }), await X(l, this.publishTimeout, _);\n      } catch (l) {\n        if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(l), (o = n?.internal) != null && o.throwOnFailedPublish) throw l;\n      } finally {\n        this.queue.delete(d);\n      }\n    }), V(this, \"on\", (s, i) => {\n      this.events.on(s, i);\n    }), V(this, \"once\", (s, i) => {\n      this.events.once(s, i);\n    }), V(this, \"off\", (s, i) => {\n      this.events.off(s, i);\n    }), V(this, \"removeListener\", (s, i) => {\n      this.events.removeListener(s, i);\n    }), this.relayer = e, this.logger = N(t, this.name), this.registerEventListeners();\n  }\n  get context() {\n    return U(this.logger);\n  }\n  async rpcPublish(e) {\n    var t, s, i, n;\n    const {\n        topic: o,\n        message: a,\n        ttl: c = je,\n        prompt: h,\n        tag: u,\n        id: d,\n        attestation: g,\n        tvf: _\n      } = e,\n      l = {\n        method: oe(we().protocol).publish,\n        params: Ie({\n          topic: o,\n          message: a,\n          ttl: c,\n          prompt: h,\n          tag: u,\n          attestation: g\n        }, _),\n        id: d\n      };\n    xe((t = l.params) == null ? void 0 : t.prompt) && ((s = l.params) == null || delete s.prompt), xe((i = l.params) == null ? void 0 : i.tag) && ((n = l.params) == null || delete n.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n      type: \"message\",\n      direction: \"outgoing\",\n      request: l\n    });\n    const b = await this.relayer.request(l);\n    return this.relayer.events.emit(C.publish, e), this.logger.debug(\"Successfully Published Payload\"), b;\n  }\n  removeRequestFromQueue(e) {\n    this.queue.delete(e);\n  }\n  checkQueue() {\n    this.queue.forEach(async (e, t) => {\n      const s = e.attempt + 1;\n      this.queue.set(t, Ge(Ie({}, e), {\n        attempt: s\n      }));\n      const {\n        topic: i,\n        message: n,\n        opts: o,\n        attestation: a\n      } = e;\n      this.logger.warn({}, `Publisher: queue->publishing: ${e.opts.id}, tag: ${e.opts.tag}, attempt: ${s}`), await this.rpcPublish(Ge(Ie({}, e), {\n        topic: i,\n        message: n,\n        ttl: o.ttl,\n        prompt: o.prompt,\n        tag: o.tag,\n        id: o.id,\n        attestation: a,\n        tvf: o.tvf\n      })), this.logger.warn({}, `Publisher: queue->published: ${e.opts.id}`);\n    });\n  }\n  registerEventListeners() {\n    this.relayer.core.heartbeat.on(ne.pulse, () => {\n      if (this.needsTransportRestart) {\n        this.needsTransportRestart = !1, this.relayer.events.emit(C.connection_stalled);\n        return;\n      }\n      this.checkQueue();\n    }), this.relayer.on(C.message_ack, e => {\n      this.removeRequestFromQueue(e.id.toString());\n    });\n  }\n}\nvar qn = Object.defineProperty,\n  Gn = (r, e, t) => e in r ? qn(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  re = (r, e, t) => Gn(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Wn {\n  constructor() {\n    re(this, \"map\", new Map()), re(this, \"set\", (e, t) => {\n      const s = this.get(e);\n      this.exists(e, t) || this.map.set(e, [...s, t]);\n    }), re(this, \"get\", e => this.map.get(e) || []), re(this, \"exists\", (e, t) => this.get(e).includes(t)), re(this, \"delete\", (e, t) => {\n      if (typeof t > \"u\") {\n        this.map.delete(e);\n        return;\n      }\n      if (!this.map.has(e)) return;\n      const s = this.get(e);\n      if (!this.exists(e, t)) return;\n      const i = s.filter(n => n !== t);\n      if (!i.length) {\n        this.map.delete(e);\n        return;\n      }\n      this.map.set(e, i);\n    }), re(this, \"clear\", () => {\n      this.map.clear();\n    });\n  }\n  get topics() {\n    return Array.from(this.map.keys());\n  }\n}\nvar Hn = Object.defineProperty,\n  Yn = Object.defineProperties,\n  Jn = Object.getOwnPropertyDescriptors,\n  Ii = Object.getOwnPropertySymbols,\n  Xn = Object.prototype.hasOwnProperty,\n  Zn = Object.prototype.propertyIsEnumerable,\n  We = (r, e, t) => e in r ? Hn(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  ge = (r, e) => {\n    for (var t in e || (e = {})) Xn.call(e, t) && We(r, t, e[t]);\n    if (Ii) for (var t of Ii(e)) Zn.call(e, t) && We(r, t, e[t]);\n    return r;\n  },\n  He = (r, e) => Yn(r, Jn(e)),\n  f = (r, e, t) => We(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ti extends Qi {\n  constructor(e, t) {\n    super(e, t), this.relayer = e, this.logger = t, f(this, \"subscriptions\", new Map()), f(this, \"topicMap\", new Wn()), f(this, \"events\", new ee()), f(this, \"name\", Ut), f(this, \"version\", Mt), f(this, \"pending\", new Map()), f(this, \"cached\", []), f(this, \"initialized\", !1), f(this, \"storagePrefix\", B), f(this, \"subscribeTimeout\", O(tt)), f(this, \"initialSubscribeTimeout\", O(Z * 15)), f(this, \"clientId\"), f(this, \"batchSubscribeTopicsLimit\", 500), f(this, \"init\", async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.restore()), this.initialized = !0;\n    }), f(this, \"subscribe\", async (s, i) => {\n      this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n        type: \"method\",\n        method: \"subscribe\",\n        params: {\n          topic: s,\n          opts: i\n        }\n      });\n      try {\n        const n = we(i),\n          o = {\n            topic: s,\n            relay: n,\n            transportType: i?.transportType\n          };\n        this.pending.set(s, o);\n        const a = await this.rpcSubscribe(s, n, i);\n        return typeof a == \"string\" && (this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n          type: \"method\",\n          method: \"subscribe\",\n          params: {\n            topic: s,\n            opts: i\n          }\n        })), a;\n      } catch (n) {\n        throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n      }\n    }), f(this, \"unsubscribe\", async (s, i) => {\n      this.isInitialized(), typeof i?.id < \"u\" ? await this.unsubscribeById(s, i.id, i) : await this.unsubscribeByTopic(s, i);\n    }), f(this, \"isSubscribed\", s => new Promise(i => {\n      i(this.topicMap.topics.includes(s));\n    })), f(this, \"isKnownTopic\", s => new Promise(i => {\n      i(this.topicMap.topics.includes(s) || this.pending.has(s) || this.cached.some(n => n.topic === s));\n    })), f(this, \"on\", (s, i) => {\n      this.events.on(s, i);\n    }), f(this, \"once\", (s, i) => {\n      this.events.once(s, i);\n    }), f(this, \"off\", (s, i) => {\n      this.events.off(s, i);\n    }), f(this, \"removeListener\", (s, i) => {\n      this.events.removeListener(s, i);\n    }), f(this, \"start\", async () => {\n      await this.onConnect();\n    }), f(this, \"stop\", async () => {\n      await this.onDisconnect();\n    }), f(this, \"restart\", async () => {\n      await this.restore(), await this.onRestart();\n    }), f(this, \"checkPending\", async () => {\n      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;\n      const s = [];\n      this.pending.forEach(i => {\n        s.push(i);\n      }), await this.batchSubscribe(s);\n    }), f(this, \"registerEventListeners\", () => {\n      this.relayer.core.heartbeat.on(ne.pulse, async () => {\n        await this.checkPending();\n      }), this.events.on($.created, async s => {\n        const i = $.created;\n        this.logger.info(`Emitting ${i}`), this.logger.debug({\n          type: \"event\",\n          event: i,\n          data: s\n        }), await this.persist();\n      }), this.events.on($.deleted, async s => {\n        const i = $.deleted;\n        this.logger.info(`Emitting ${i}`), this.logger.debug({\n          type: \"event\",\n          event: i,\n          data: s\n        }), await this.persist();\n      });\n    }), this.relayer = e, this.logger = N(t, this.name), this.clientId = \"\";\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n  }\n  get length() {\n    return this.subscriptions.size;\n  }\n  get ids() {\n    return Array.from(this.subscriptions.keys());\n  }\n  get values() {\n    return Array.from(this.subscriptions.values());\n  }\n  get topics() {\n    return this.topicMap.topics;\n  }\n  get hasAnyTopics() {\n    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;\n  }\n  hasSubscription(e, t) {\n    let s = !1;\n    try {\n      s = this.getSubscription(e).topic === t;\n    } catch {}\n    return s;\n  }\n  reset() {\n    this.cached = [], this.initialized = !0;\n  }\n  onDisable() {\n    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n  }\n  async unsubscribeByTopic(e, t) {\n    const s = this.topicMap.get(e);\n    await Promise.all(s.map(async i => await this.unsubscribeById(e, i, t)));\n  }\n  async unsubscribeById(e, t, s) {\n    this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n      type: \"method\",\n      method: \"unsubscribe\",\n      params: {\n        topic: e,\n        id: t,\n        opts: s\n      }\n    });\n    try {\n      const i = we(s);\n      await this.restartToComplete({\n        topic: e,\n        id: t,\n        relay: i\n      }), await this.rpcUnsubscribe(e, t, i);\n      const n = ae(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n      await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n        type: \"method\",\n        method: \"unsubscribe\",\n        params: {\n          topic: e,\n          id: t,\n          opts: s\n        }\n      });\n    } catch (i) {\n      throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(i), i;\n    }\n  }\n  async rpcSubscribe(e, t, s) {\n    var i;\n    (!s || s?.transportType === Q.relay) && (await this.restartToComplete({\n      topic: e,\n      id: e,\n      relay: t\n    }));\n    const n = {\n      method: oe(t.protocol).subscribe,\n      params: {\n        topic: e\n      }\n    };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n      type: \"payload\",\n      direction: \"outgoing\",\n      request: n\n    });\n    const o = (i = s?.internal) == null ? void 0 : i.throwOnFailedPublish;\n    try {\n      const a = await this.getSubscriptionId(e);\n      if (s?.transportType === Q.link_mode) return setTimeout(() => {\n        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n).catch(u => this.logger.warn(u));\n      }, O(Z)), a;\n      const c = new Promise(async u => {\n          const d = g => {\n            g.topic === e && (this.events.removeListener($.created, d), u(g.id));\n          };\n          this.events.on($.created, d);\n          try {\n            const g = await X(new Promise((_, l) => {\n              this.relayer.request(n).catch(b => {\n                this.logger.warn(b, b?.message), l(b);\n              }).then(_);\n            }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);\n            this.events.removeListener($.created, d), u(g);\n          } catch {}\n        }),\n        h = await X(c, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);\n      if (!h && o) throw new Error(`Subscribing to ${e} failed, please try again`);\n      return h ? a : null;\n    } catch (a) {\n      if (this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(C.connection_stalled), o) throw a;\n    }\n    return null;\n  }\n  async rpcBatchSubscribe(e) {\n    if (!e.length) return;\n    const t = e[0].relay,\n      s = {\n        method: oe(t.protocol).batchSubscribe,\n        params: {\n          topics: e.map(i => i.topic)\n        }\n      };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n      type: \"payload\",\n      direction: \"outgoing\",\n      request: s\n    });\n    try {\n      await await X(new Promise(i => {\n        this.relayer.request(s).catch(n => this.logger.warn(n)).then(i);\n      }), this.subscribeTimeout, \"rpcBatchSubscribe failed, please try again\");\n    } catch {\n      this.relayer.events.emit(C.connection_stalled);\n    }\n  }\n  async rpcBatchFetchMessages(e) {\n    if (!e.length) return;\n    const t = e[0].relay,\n      s = {\n        method: oe(t.protocol).batchFetchMessages,\n        params: {\n          topics: e.map(n => n.topic)\n        }\n      };\n    this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n      type: \"payload\",\n      direction: \"outgoing\",\n      request: s\n    });\n    let i;\n    try {\n      i = await await X(new Promise((n, o) => {\n        this.relayer.request(s).catch(a => {\n          this.logger.warn(a), o(a);\n        }).then(n);\n      }), this.subscribeTimeout, \"rpcBatchFetchMessages failed, please try again\");\n    } catch {\n      this.relayer.events.emit(C.connection_stalled);\n    }\n    return i;\n  }\n  rpcUnsubscribe(e, t, s) {\n    const i = {\n      method: oe(s.protocol).unsubscribe,\n      params: {\n        topic: e,\n        id: t\n      }\n    };\n    return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n      type: \"payload\",\n      direction: \"outgoing\",\n      request: i\n    }), this.relayer.request(i);\n  }\n  onSubscribe(e, t) {\n    this.setSubscription(e, He(ge({}, t), {\n      id: e\n    })), this.pending.delete(t.topic);\n  }\n  onBatchSubscribe(e) {\n    e.length && e.forEach(t => {\n      this.setSubscription(t.id, ge({}, t)), this.pending.delete(t.topic);\n    });\n  }\n  async onUnsubscribe(e, t, s) {\n    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n  }\n  async setRelayerSubscriptions(e) {\n    await this.relayer.core.storage.setItem(this.storageKey, e);\n  }\n  async getRelayerSubscriptions() {\n    return await this.relayer.core.storage.getItem(this.storageKey);\n  }\n  setSubscription(e, t) {\n    this.logger.debug(\"Setting subscription\"), this.logger.trace({\n      type: \"method\",\n      method: \"setSubscription\",\n      id: e,\n      subscription: t\n    }), this.addSubscription(e, t);\n  }\n  addSubscription(e, t) {\n    this.subscriptions.set(e, ge({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);\n  }\n  getSubscription(e) {\n    this.logger.debug(\"Getting subscription\"), this.logger.trace({\n      type: \"method\",\n      method: \"getSubscription\",\n      id: e\n    });\n    const t = this.subscriptions.get(e);\n    if (!t) {\n      const {\n        message: s\n      } = m(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw new Error(s);\n    }\n    return t;\n  }\n  deleteSubscription(e, t) {\n    this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n      type: \"method\",\n      method: \"deleteSubscription\",\n      id: e,\n      reason: t\n    });\n    const s = this.getSubscription(e);\n    this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit($.deleted, He(ge({}, s), {\n      reason: t\n    }));\n  }\n  async persist() {\n    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);\n  }\n  async onRestart() {\n    if (this.cached.length) {\n      const e = [...this.cached],\n        t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n      for (let s = 0; s < t; s++) {\n        const i = e.splice(0, this.batchSubscribeTopicsLimit);\n        await this.batchSubscribe(i);\n      }\n    }\n    this.events.emit($.resubscribed);\n  }\n  async restore() {\n    try {\n      const e = await this.getRelayerSubscriptions();\n      if (typeof e > \"u\" || !e.length) return;\n      if (this.subscriptions.size) {\n        const {\n          message: t\n        } = m(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n        type: \"method\",\n        method: \"restore\",\n        subscriptions: this.values\n      });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n    }\n  }\n  async batchSubscribe(e) {\n    e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async t => He(ge({}, t), {\n      id: await this.getSubscriptionId(t.topic)\n    })))));\n  }\n  async batchFetchMessages(e) {\n    if (!e.length) return;\n    this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);\n    const t = await this.rpcBatchFetchMessages(e);\n    t && t.messages && (await ws(O(Z)), await this.relayer.handleBatchMessageEvents(t.messages));\n  }\n  async onConnect() {\n    await this.restart(), this.reset();\n  }\n  onDisconnect() {\n    this.onDisable();\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  async restartToComplete(e) {\n    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());\n  }\n  async getClientId() {\n    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;\n  }\n  async getSubscriptionId(e) {\n    return ve(e + (await this.getClientId()));\n  }\n}\nvar Qn = Object.defineProperty,\n  Ci = Object.getOwnPropertySymbols,\n  eo = Object.prototype.hasOwnProperty,\n  to = Object.prototype.propertyIsEnumerable,\n  Ye = (r, e, t) => e in r ? Qn(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  Pi = (r, e) => {\n    for (var t in e || (e = {})) eo.call(e, t) && Ye(r, t, e[t]);\n    if (Ci) for (var t of Ci(e)) to.call(e, t) && Ye(r, t, e[t]);\n    return r;\n  },\n  y = (r, e, t) => Ye(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Si extends es {\n  constructor(e) {\n    super(e), y(this, \"protocol\", \"wc\"), y(this, \"version\", 2), y(this, \"core\"), y(this, \"logger\"), y(this, \"events\", new ee()), y(this, \"provider\"), y(this, \"messages\"), y(this, \"subscriber\"), y(this, \"publisher\"), y(this, \"name\", $t), y(this, \"transportExplicitlyClosed\", !1), y(this, \"initialized\", !1), y(this, \"connectionAttemptInProgress\", !1), y(this, \"relayUrl\"), y(this, \"projectId\"), y(this, \"packageName\"), y(this, \"bundleId\"), y(this, \"hasExperiencedNetworkDisruption\", !1), y(this, \"pingTimeout\"), y(this, \"heartBeatTimeout\", O(Se + Pe)), y(this, \"reconnectTimeout\"), y(this, \"connectPromise\"), y(this, \"reconnectInProgress\", !1), y(this, \"requestsInFlight\", []), y(this, \"connectTimeout\", O(Z * 15)), y(this, \"request\", async t => {\n      var s, i;\n      this.logger.debug(\"Publishing Request Payload\");\n      const n = t.id || mt().toString();\n      await this.toEstablishConnection();\n      try {\n        this.logger.trace({\n          id: n,\n          method: t.method,\n          topic: (s = t.params) == null ? void 0 : s.topic\n        }, \"relayer.request - publishing...\");\n        const o = `${n}:${((i = t.params) == null ? void 0 : i.tag) || \"\"}`;\n        this.requestsInFlight.push(o);\n        const a = await this.provider.request(t);\n        return this.requestsInFlight = this.requestsInFlight.filter(c => c !== o), a;\n      } catch (o) {\n        throw this.logger.debug(`Failed to Publish Request: ${n}`), o;\n      }\n    }), y(this, \"resetPingTimeout\", () => {\n      ut() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {\n        var t, s, i, n;\n        try {\n          this.logger.debug({}, \"pingTimeout: Connection stalled, terminating...\"), (n = (i = (s = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s.socket) == null ? void 0 : i.terminate) == null || n.call(i);\n        } catch (o) {\n          this.logger.warn(o, o?.message);\n        }\n      }, this.heartBeatTimeout));\n    }), y(this, \"onPayloadHandler\", t => {\n      this.onProviderPayload(t), this.resetPingTimeout();\n    }), y(this, \"onConnectHandler\", () => {\n      this.logger.warn({}, \"Relayer connected \\u{1F6DC}\"), this.startPingTimeout(), this.events.emit(C.connect);\n    }), y(this, \"onDisconnectHandler\", () => {\n      this.logger.warn({}, \"Relayer disconnected \\u{1F6D1}\"), this.requestsInFlight = [], this.onProviderDisconnect();\n    }), y(this, \"onProviderErrorHandler\", t => {\n      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C.error, t), this.logger.fatal(\"Fatal socket error received, closing transport\"), this.transportClose();\n    }), y(this, \"registerProviderListeners\", () => {\n      this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);\n    }), this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? N(e.logger, this.name) : Yi(et({\n      level: e.logger || Nt\n    })), this.messages = new _i(this.logger, e.core), this.subscriber = new Ti(this, this.logger), this.publisher = new Vn(this, this.logger), this.relayUrl = e?.relayUrl || Ue, this.projectId = e.projectId, _s() ? this.packageName = ht() : Es() && (this.bundleId = ht()), this.provider = {};\n  }\n  async init() {\n    if (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = !0, this.subscriber.hasAnyTopics) try {\n      await this.transportOpen();\n    } catch (e) {\n      this.logger.warn(e, e?.message);\n    }\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get connected() {\n    var e, t, s;\n    return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 1 || !1;\n  }\n  get connecting() {\n    var e, t, s;\n    return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 0 || this.connectPromise !== void 0 || !1;\n  }\n  async publish(e, t, s) {\n    this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({\n      topic: e,\n      message: t,\n      publishedAt: Date.now(),\n      transportType: Q.relay\n    }, le.outbound);\n  }\n  async subscribe(e, t) {\n    var s, i, n;\n    this.isInitialized(), (!(t != null && t.transportType) || t?.transportType === \"relay\") && (await this.toEstablishConnection());\n    const o = typeof ((s = t?.internal) == null ? void 0 : s.throwOnFailedPublish) > \"u\" ? !0 : (i = t?.internal) == null ? void 0 : i.throwOnFailedPublish;\n    let a = ((n = this.subscriber.topicMap.get(e)) == null ? void 0 : n[0]) || \"\",\n      c;\n    const h = u => {\n      u.topic === e && (this.subscriber.off($.created, h), c());\n    };\n    return await Promise.all([new Promise(u => {\n      c = u, this.subscriber.on($.created, h);\n    }), new Promise(async (u, d) => {\n      a = (await this.subscriber.subscribe(e, Pi({\n        internal: {\n          throwOnFailedPublish: o\n        }\n      }, t)).catch(g => {\n        o && d(g);\n      })) || a, u();\n    })]), a;\n  }\n  async unsubscribe(e, t) {\n    this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async transportDisconnect() {\n    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await X(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();\n  }\n  async transportClose() {\n    this.transportExplicitlyClosed = !0, await this.transportDisconnect();\n  }\n  async transportOpen(e) {\n    if (!this.subscriber.hasAnyTopics) {\n      this.logger.warn(\"Starting WS connection skipped because the client has no topics to work with.\");\n      return;\n    }\n    if (this.connectPromise ? (this.logger.debug({}, \"Waiting for existing connection attempt to resolve...\"), await this.connectPromise, this.logger.debug({}, \"Existing connection attempt resolved\")) : (this.connectPromise = new Promise(async (t, s) => {\n      await this.connect(e).then(t).catch(s).finally(() => {\n        this.connectPromise = void 0;\n      });\n    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);\n  }\n  async restartTransport(e) {\n    this.logger.debug({}, \"Restarting transport...\"), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());\n  }\n  async confirmOnlineStateOrThrow() {\n    if (!(await lt())) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n  }\n  async handleBatchMessageEvents(e) {\n    if (e?.length === 0) {\n      this.logger.trace(\"Batch message events is empty. Ignoring...\");\n      return;\n    }\n    const t = e.sort((s, i) => s.publishedAt - i.publishedAt);\n    this.logger.debug(`Batch of ${t.length} message events sorted`);\n    for (const s of t) try {\n      await this.onMessageEvent(s);\n    } catch (i) {\n      this.logger.warn(i, \"Error while processing batch message event: \" + i?.message);\n    }\n    this.logger.trace(`Batch of ${t.length} message events processed`);\n  }\n  async onLinkMessageEvent(e, t) {\n    const {\n      topic: s\n    } = e;\n    if (!t.sessionExists) {\n      const i = ce(fe),\n        n = {\n          topic: s,\n          expiry: i,\n          relay: {\n            protocol: \"irn\"\n          },\n          active: !1\n        };\n      await this.core.pairing.pairings.set(s, n);\n    }\n    this.events.emit(C.message, e), await this.recordMessageEvent(e, le.inbound);\n  }\n  async connect(e) {\n    await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n    let t = 1;\n    for (; t < 6;) {\n      try {\n        if (this.transportExplicitlyClosed) break;\n        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (s, i) => {\n          const n = () => {\n            i(new Error(\"Connection interrupted while trying to subscribe\"));\n          };\n          this.provider.once(L.disconnect, n), await X(new Promise((o, a) => {\n            this.provider.connect().then(o).catch(a);\n          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch(o => {\n            i(o);\n          }).finally(() => {\n            this.provider.off(L.disconnect, n), clearTimeout(this.reconnectTimeout);\n          }), await new Promise(async (o, a) => {\n            const c = () => {\n              a(new Error(\"Connection interrupted while trying to subscribe\"));\n            };\n            this.provider.once(L.disconnect, c), await this.subscriber.start().then(o).catch(a).finally(() => {\n              this.provider.off(L.disconnect, c);\n            });\n          }), this.hasExperiencedNetworkDisruption = !1, s();\n        });\n      } catch (s) {\n        await this.subscriber.stop();\n        const i = s;\n        this.logger.warn({}, i.message), this.hasExperiencedNetworkDisruption = !0;\n      } finally {\n        this.connectionAttemptInProgress = !1;\n      }\n      if (this.connected) {\n        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);\n        break;\n      }\n      await new Promise(s => setTimeout(s, O(t * 1))), t++;\n    }\n  }\n  startPingTimeout() {\n    var e, t, s, i, n;\n    if (ut()) try {\n      (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n = (i = (s = this.provider) == null ? void 0 : s.connection) == null ? void 0 : i.socket) == null || n.on(\"ping\", () => {\n        this.resetPingTimeout();\n      })), this.resetPingTimeout();\n    } catch (o) {\n      this.logger.warn(o, o?.message);\n    }\n  }\n  async createProvider() {\n    this.provider.connection && this.unregisterProviderListeners();\n    const e = await this.core.crypto.signJWT(this.relayUrl);\n    this.provider = new Ms(new Bs(Is({\n      sdkVersion: _e,\n      protocol: this.protocol,\n      version: this.version,\n      relayUrl: this.relayUrl,\n      projectId: this.projectId,\n      auth: e,\n      useOnCloseEvent: !0,\n      bundleId: this.bundleId,\n      packageName: this.packageName\n    }))), this.registerProviderListeners();\n  }\n  async recordMessageEvent(e, t) {\n    const {\n      topic: s,\n      message: i\n    } = e;\n    await this.messages.set(s, i, t);\n  }\n  async shouldIgnoreMessageEvent(e) {\n    const {\n      topic: t,\n      message: s\n    } = e;\n    if (!s || s.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${s}`), !0;\n    if (!(await this.subscriber.isKnownTopic(t))) return this.logger.warn(`Ignoring message for unknown topic ${t}`), !0;\n    const i = this.messages.has(t, s);\n    return i && this.logger.warn(`Ignoring duplicate message: ${s}`), i;\n  }\n  async onProviderPayload(e) {\n    if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n      type: \"payload\",\n      direction: \"incoming\",\n      payload: e\n    }), ft(e)) {\n      if (!e.method.endsWith(zt)) return;\n      const t = e.params,\n        {\n          topic: s,\n          message: i,\n          publishedAt: n,\n          attestation: o\n        } = t.data,\n        a = {\n          topic: s,\n          message: i,\n          publishedAt: n,\n          transportType: Q.relay,\n          attestation: o\n        };\n      this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(Pi({\n        type: \"event\",\n        event: t.id\n      }, a)), this.events.emit(t.id, a), await this.acknowledgePayload(e), await this.onMessageEvent(a);\n    } else Dt(e) && this.events.emit(C.message_ack, e);\n  }\n  async onMessageEvent(e) {\n    (await this.shouldIgnoreMessageEvent(e)) || (await this.recordMessageEvent(e, le.inbound), this.events.emit(C.message, e));\n  }\n  async acknowledgePayload(e) {\n    const t = vt(e.id, !0);\n    await this.provider.connection.send(t);\n  }\n  unregisterProviderListeners() {\n    this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);\n  }\n  async registerEventListeners() {\n    let e = await lt();\n    Ts(async t => {\n      e !== t && (e = t, t ? await this.transportOpen().catch(s => this.logger.error(s, s?.message)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n    });\n  }\n  async onProviderDisconnect() {\n    clearTimeout(this.pingTimeout), this.events.emit(C.disconnect), this.connectionAttemptInProgress = !1, !this.reconnectInProgress && (this.reconnectInProgress = !0, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {\n      await this.transportOpen().catch(e => this.logger.error(e, e?.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = !1;\n    }, O(Lt)))));\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  async toEstablishConnection() {\n    await this.confirmOnlineStateOrThrow(), !this.connected && (await this.connect());\n  }\n}\nfunction io() {}\nfunction Ri(r) {\n  if (!r || typeof r != \"object\") return !1;\n  const e = Object.getPrototypeOf(r);\n  return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r) === \"[object Object]\" : !1;\n}\nfunction Oi(r) {\n  return Object.getOwnPropertySymbols(r).filter(e => Object.prototype.propertyIsEnumerable.call(r, e));\n}\nfunction Ai(r) {\n  return r == null ? r === void 0 ? \"[object Undefined]\" : \"[object Null]\" : Object.prototype.toString.call(r);\n}\nconst so = \"[object RegExp]\",\n  ro = \"[object String]\",\n  no = \"[object Number]\",\n  oo = \"[object Boolean]\",\n  xi = \"[object Arguments]\",\n  ao = \"[object Symbol]\",\n  co = \"[object Date]\",\n  ho = \"[object Map]\",\n  lo = \"[object Set]\",\n  uo = \"[object Array]\",\n  go = \"[object Function]\",\n  po = \"[object ArrayBuffer]\",\n  Je = \"[object Object]\",\n  yo = \"[object Error]\",\n  bo = \"[object DataView]\",\n  mo = \"[object Uint8Array]\",\n  fo = \"[object Uint8ClampedArray]\",\n  Do = \"[object Uint16Array]\",\n  vo = \"[object Uint32Array]\",\n  wo = \"[object BigUint64Array]\",\n  _o = \"[object Int8Array]\",\n  Eo = \"[object Int16Array]\",\n  Io = \"[object Int32Array]\",\n  To = \"[object BigInt64Array]\",\n  Co = \"[object Float32Array]\",\n  Po = \"[object Float64Array]\";\nfunction So(r, e) {\n  return r === e || Number.isNaN(r) && Number.isNaN(e);\n}\nfunction Ro(r, e, t) {\n  return pe(r, e, void 0, void 0, void 0, void 0, t);\n}\nfunction pe(r, e, t, s, i, n, o) {\n  const a = o(r, e, t, s, i, n);\n  if (a !== void 0) return a;\n  if (typeof r == typeof e) switch (typeof r) {\n    case \"bigint\":\n    case \"string\":\n    case \"boolean\":\n    case \"symbol\":\n    case \"undefined\":\n      return r === e;\n    case \"number\":\n      return r === e || Object.is(r, e);\n    case \"function\":\n      return r === e;\n    case \"object\":\n      return ye(r, e, n, o);\n  }\n  return ye(r, e, n, o);\n}\nfunction ye(r, e, t, s) {\n  if (Object.is(r, e)) return !0;\n  let i = Ai(r),\n    n = Ai(e);\n  if (i === xi && (i = Je), n === xi && (n = Je), i !== n) return !1;\n  switch (i) {\n    case ro:\n      return r.toString() === e.toString();\n    case no:\n      {\n        const c = r.valueOf(),\n          h = e.valueOf();\n        return So(c, h);\n      }\n    case oo:\n    case co:\n    case ao:\n      return Object.is(r.valueOf(), e.valueOf());\n    case so:\n      return r.source === e.source && r.flags === e.flags;\n    case go:\n      return r === e;\n  }\n  t = t ?? new Map();\n  const o = t.get(r),\n    a = t.get(e);\n  if (o != null && a != null) return o === e;\n  t.set(r, e), t.set(e, r);\n  try {\n    switch (i) {\n      case ho:\n        {\n          if (r.size !== e.size) return !1;\n          for (const [c, h] of r.entries()) if (!e.has(c) || !pe(h, e.get(c), c, r, e, t, s)) return !1;\n          return !0;\n        }\n      case lo:\n        {\n          if (r.size !== e.size) return !1;\n          const c = Array.from(r.values()),\n            h = Array.from(e.values());\n          for (let u = 0; u < c.length; u++) {\n            const d = c[u],\n              g = h.findIndex(_ => pe(d, _, void 0, r, e, t, s));\n            if (g === -1) return !1;\n            h.splice(g, 1);\n          }\n          return !0;\n        }\n      case uo:\n      case mo:\n      case fo:\n      case Do:\n      case vo:\n      case wo:\n      case _o:\n      case Eo:\n      case Io:\n      case To:\n      case Co:\n      case Po:\n        {\n          if (typeof Buffer < \"u\" && Buffer.isBuffer(r) !== Buffer.isBuffer(e) || r.length !== e.length) return !1;\n          for (let c = 0; c < r.length; c++) if (!pe(r[c], e[c], c, r, e, t, s)) return !1;\n          return !0;\n        }\n      case po:\n        return r.byteLength !== e.byteLength ? !1 : ye(new Uint8Array(r), new Uint8Array(e), t, s);\n      case bo:\n        return r.byteLength !== e.byteLength || r.byteOffset !== e.byteOffset ? !1 : ye(new Uint8Array(r), new Uint8Array(e), t, s);\n      case yo:\n        return r.name === e.name && r.message === e.message;\n      case Je:\n        {\n          if (!(ye(r.constructor, e.constructor, t, s) || Ri(r) && Ri(e))) return !1;\n          const h = [...Object.keys(r), ...Oi(r)],\n            u = [...Object.keys(e), ...Oi(e)];\n          if (h.length !== u.length) return !1;\n          for (let d = 0; d < h.length; d++) {\n            const g = h[d],\n              _ = r[g];\n            if (!Object.hasOwn(e, g)) return !1;\n            const l = e[g];\n            if (!pe(_, l, g, r, e, t, s)) return !1;\n          }\n          return !0;\n        }\n      default:\n        return !1;\n    }\n  } finally {\n    t.delete(r), t.delete(e);\n  }\n}\nfunction Oo(r, e) {\n  return Ro(r, e, io);\n}\nvar Ao = Object.defineProperty,\n  Ni = Object.getOwnPropertySymbols,\n  xo = Object.prototype.hasOwnProperty,\n  No = Object.prototype.propertyIsEnumerable,\n  Xe = (r, e, t) => e in r ? Ao(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  $i = (r, e) => {\n    for (var t in e || (e = {})) xo.call(e, t) && Xe(r, t, e[t]);\n    if (Ni) for (var t of Ni(e)) No.call(e, t) && Xe(r, t, e[t]);\n    return r;\n  },\n  z = (r, e, t) => Xe(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass zi extends ts {\n  constructor(e, t, s, i = B, n = void 0) {\n    super(e, t, s, i), this.core = e, this.logger = t, this.name = s, z(this, \"map\", new Map()), z(this, \"version\", kt), z(this, \"cached\", []), z(this, \"initialized\", !1), z(this, \"getKey\"), z(this, \"storagePrefix\", B), z(this, \"recentlyDeleted\", []), z(this, \"recentlyDeletedLimit\", 200), z(this, \"init\", async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach(o => {\n        this.getKey && o !== null && !xe(o) ? this.map.set(this.getKey(o), o) : Cs(o) ? this.map.set(o.id, o) : Ps(o) && this.map.set(o.topic, o);\n      }), this.cached = [], this.initialized = !0);\n    }), z(this, \"set\", async (o, a) => {\n      this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n        type: \"method\",\n        method: \"set\",\n        key: o,\n        value: a\n      }), this.map.set(o, a), await this.persist());\n    }), z(this, \"get\", o => (this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n      type: \"method\",\n      method: \"get\",\n      key: o\n    }), this.getData(o))), z(this, \"getAll\", o => (this.isInitialized(), o ? this.values.filter(a => Object.keys(o).every(c => Oo(a[c], o[c]))) : this.values)), z(this, \"update\", async (o, a) => {\n      this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n        type: \"method\",\n        method: \"update\",\n        key: o,\n        update: a\n      });\n      const c = $i($i({}, this.getData(o)), a);\n      this.map.set(o, c), await this.persist();\n    }), z(this, \"delete\", async (o, a) => {\n      this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n        type: \"method\",\n        method: \"delete\",\n        key: o,\n        reason: a\n      }), this.map.delete(o), this.addToRecentlyDeleted(o), await this.persist());\n    }), this.logger = N(t, this.name), this.storagePrefix = i, this.getKey = n;\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n  }\n  get length() {\n    return this.map.size;\n  }\n  get keys() {\n    return Array.from(this.map.keys());\n  }\n  get values() {\n    return Array.from(this.map.values());\n  }\n  addToRecentlyDeleted(e) {\n    this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n  }\n  async setDataStore(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getDataStore() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  getData(e) {\n    const t = this.map.get(e);\n    if (!t) {\n      if (this.recentlyDeleted.includes(e)) {\n        const {\n          message: i\n        } = m(\"MISSING_OR_INVALID\", `Record was recently deleted - ${this.name}: ${e}`);\n        throw this.logger.error(i), new Error(i);\n      }\n      const {\n        message: s\n      } = m(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw this.logger.error(s), new Error(s);\n    }\n    return t;\n  }\n  async persist() {\n    await this.setDataStore(this.values);\n  }\n  async restore() {\n    try {\n      const e = await this.getDataStore();\n      if (typeof e > \"u\" || !e.length) return;\n      if (this.map.size) {\n        const {\n          message: t\n        } = m(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n        type: \"method\",\n        method: \"restore\",\n        value: this.values\n      });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n    }\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nvar $o = Object.defineProperty,\n  zo = (r, e, t) => e in r ? $o(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  p = (r, e, t) => zo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Li {\n  constructor(e, t) {\n    this.core = e, this.logger = t, p(this, \"name\", Ft), p(this, \"version\", Kt), p(this, \"events\", new Gi()), p(this, \"pairings\"), p(this, \"initialized\", !1), p(this, \"storagePrefix\", B), p(this, \"ignoredPayloadTypes\", [Rs]), p(this, \"registeredMethods\", []), p(this, \"init\", async () => {\n      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n    }), p(this, \"register\", ({\n      methods: s\n    }) => {\n      this.isInitialized(), this.registeredMethods = [...new Set([...this.registeredMethods, ...s])];\n    }), p(this, \"create\", async s => {\n      this.isInitialized();\n      const i = Ae(),\n        n = await this.core.crypto.setSymKey(i),\n        o = ce(fe),\n        a = {\n          protocol: xt\n        },\n        c = {\n          topic: n,\n          expiry: o,\n          relay: a,\n          active: !1,\n          methods: s?.methods\n        },\n        h = dt({\n          protocol: this.core.protocol,\n          version: this.core.version,\n          topic: n,\n          symKey: i,\n          relay: a,\n          expiryTimestamp: o,\n          methods: s?.methods\n        });\n      return this.events.emit(se.create, c), this.core.expirer.set(n, o), await this.pairings.set(n, c), await this.core.relayer.subscribe(n, {\n        transportType: s?.transportType\n      }), {\n        topic: n,\n        uri: h\n      };\n    }), p(this, \"pair\", async s => {\n      this.isInitialized();\n      const i = this.core.eventClient.createEvent({\n        properties: {\n          topic: s?.uri,\n          trace: [G.pairing_started]\n        }\n      });\n      this.isValidPair(s, i);\n      const {\n        topic: n,\n        symKey: o,\n        relay: a,\n        expiryTimestamp: c,\n        methods: h\n      } = gt(s.uri);\n      i.props.properties.topic = n, i.addTrace(G.pairing_uri_validation_success), i.addTrace(G.pairing_uri_not_expired);\n      let u;\n      if (this.pairings.keys.includes(n)) {\n        if (u = this.pairings.get(n), i.addTrace(G.existing_pairing), u.active) throw i.setError(Y.active_pairing_already_exists), new Error(`Pairing already exists: ${n}. Please try again with a new connection URI.`);\n        i.addTrace(G.pairing_not_expired);\n      }\n      const d = c || ce(fe),\n        g = {\n          topic: n,\n          relay: a,\n          expiry: d,\n          active: !1,\n          methods: h\n        };\n      this.core.expirer.set(n, d), await this.pairings.set(n, g), i.addTrace(G.store_new_pairing), s.activatePairing && (await this.activate({\n        topic: n\n      })), this.events.emit(se.create, g), i.addTrace(G.emit_inactive_pairing), this.core.crypto.keychain.has(n) || (await this.core.crypto.setSymKey(o, n)), i.addTrace(G.subscribing_pairing_topic);\n      try {\n        await this.core.relayer.confirmOnlineStateOrThrow();\n      } catch {\n        i.setError(Y.no_internet_connection);\n      }\n      try {\n        await this.core.relayer.subscribe(n, {\n          relay: a\n        });\n      } catch (_) {\n        throw i.setError(Y.subscribe_pairing_topic_failure), _;\n      }\n      return i.addTrace(G.subscribe_pairing_topic_success), g;\n    }), p(this, \"activate\", async ({\n      topic: s\n    }) => {\n      this.isInitialized();\n      const i = ce(fe);\n      this.core.expirer.set(s, i), await this.pairings.update(s, {\n        active: !0,\n        expiry: i\n      });\n    }), p(this, \"ping\", async s => {\n      this.isInitialized(), await this.isValidPing(s), this.logger.warn(\"ping() is deprecated and will be removed in the next major release.\");\n      const {\n        topic: i\n      } = s;\n      if (this.pairings.keys.includes(i)) {\n        const n = await this.sendRequest(i, \"wc_pairingPing\", {}),\n          {\n            done: o,\n            resolve: a,\n            reject: c\n          } = Os();\n        this.events.once(Ne(\"pairing_ping\", n), ({\n          error: h\n        }) => {\n          h ? c(h) : a();\n        }), await o();\n      }\n    }), p(this, \"updateExpiry\", async ({\n      topic: s,\n      expiry: i\n    }) => {\n      this.isInitialized(), await this.pairings.update(s, {\n        expiry: i\n      });\n    }), p(this, \"updateMetadata\", async ({\n      topic: s,\n      metadata: i\n    }) => {\n      this.isInitialized(), await this.pairings.update(s, {\n        peerMetadata: i\n      });\n    }), p(this, \"getPairings\", () => (this.isInitialized(), this.pairings.values)), p(this, \"disconnect\", async s => {\n      this.isInitialized(), await this.isValidDisconnect(s);\n      const {\n        topic: i\n      } = s;\n      this.pairings.keys.includes(i) && (await this.sendRequest(i, \"wc_pairingDelete\", ae(\"USER_DISCONNECTED\")), await this.deletePairing(i));\n    }), p(this, \"formatUriFromPairing\", s => {\n      this.isInitialized();\n      const {\n          topic: i,\n          relay: n,\n          expiry: o,\n          methods: a\n        } = s,\n        c = this.core.crypto.keychain.get(i);\n      return dt({\n        protocol: this.core.protocol,\n        version: this.core.version,\n        topic: i,\n        symKey: c,\n        relay: n,\n        expiryTimestamp: o,\n        methods: a\n      });\n    }), p(this, \"sendRequest\", async (s, i, n) => {\n      const o = wt(i, n),\n        a = await this.core.crypto.encode(s, o),\n        c = ie[i].req;\n      return this.core.history.set(s, o), this.core.relayer.publish(s, a, c), o.id;\n    }), p(this, \"sendResult\", async (s, i, n) => {\n      const o = vt(s, n),\n        a = await this.core.crypto.encode(i, o),\n        c = (await this.core.history.get(i, s)).request.method,\n        h = ie[c].res;\n      await this.core.relayer.publish(i, a, h), await this.core.history.resolve(o);\n    }), p(this, \"sendError\", async (s, i, n) => {\n      const o = Fs(s, n),\n        a = await this.core.crypto.encode(i, o),\n        c = (await this.core.history.get(i, s)).request.method,\n        h = ie[c] ? ie[c].res : ie.unregistered_method.res;\n      await this.core.relayer.publish(i, a, h), await this.core.history.resolve(o);\n    }), p(this, \"deletePairing\", async (s, i) => {\n      await this.core.relayer.unsubscribe(s), await Promise.all([this.pairings.delete(s, ae(\"USER_DISCONNECTED\")), this.core.crypto.deleteSymKey(s), i ? Promise.resolve() : this.core.expirer.del(s)]);\n    }), p(this, \"cleanup\", async () => {\n      const s = this.pairings.getAll().filter(i => pt(i.expiry));\n      await Promise.all(s.map(i => this.deletePairing(i.topic)));\n    }), p(this, \"onRelayEventRequest\", async s => {\n      const {\n        topic: i,\n        payload: n\n      } = s;\n      switch (n.method) {\n        case \"wc_pairingPing\":\n          return await this.onPairingPingRequest(i, n);\n        case \"wc_pairingDelete\":\n          return await this.onPairingDeleteRequest(i, n);\n        default:\n          return await this.onUnknownRpcMethodRequest(i, n);\n      }\n    }), p(this, \"onRelayEventResponse\", async s => {\n      const {\n          topic: i,\n          payload: n\n        } = s,\n        o = (await this.core.history.get(i, n.id)).request.method;\n      switch (o) {\n        case \"wc_pairingPing\":\n          return this.onPairingPingResponse(i, n);\n        default:\n          return this.onUnknownRpcMethodResponse(o);\n      }\n    }), p(this, \"onPairingPingRequest\", async (s, i) => {\n      const {\n        id: n\n      } = i;\n      try {\n        this.isValidPing({\n          topic: s\n        }), await this.sendResult(n, s, !0), this.events.emit(se.ping, {\n          id: n,\n          topic: s\n        });\n      } catch (o) {\n        await this.sendError(n, s, o), this.logger.error(o);\n      }\n    }), p(this, \"onPairingPingResponse\", (s, i) => {\n      const {\n        id: n\n      } = i;\n      setTimeout(() => {\n        Ks(i) ? this.events.emit(Ne(\"pairing_ping\", n), {}) : _t(i) && this.events.emit(Ne(\"pairing_ping\", n), {\n          error: i.error\n        });\n      }, 500);\n    }), p(this, \"onPairingDeleteRequest\", async (s, i) => {\n      const {\n        id: n\n      } = i;\n      try {\n        this.isValidDisconnect({\n          topic: s\n        }), await this.deletePairing(s), this.events.emit(se.delete, {\n          id: n,\n          topic: s\n        });\n      } catch (o) {\n        await this.sendError(n, s, o), this.logger.error(o);\n      }\n    }), p(this, \"onUnknownRpcMethodRequest\", async (s, i) => {\n      const {\n        id: n,\n        method: o\n      } = i;\n      try {\n        if (this.registeredMethods.includes(o)) return;\n        const a = ae(\"WC_METHOD_UNSUPPORTED\", o);\n        await this.sendError(n, s, a), this.logger.error(a);\n      } catch (a) {\n        await this.sendError(n, s, a), this.logger.error(a);\n      }\n    }), p(this, \"onUnknownRpcMethodResponse\", s => {\n      this.registeredMethods.includes(s) || this.logger.error(ae(\"WC_METHOD_UNSUPPORTED\", s));\n    }), p(this, \"isValidPair\", (s, i) => {\n      var n;\n      if (!$e(s)) {\n        const {\n          message: a\n        } = m(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n        throw i.setError(Y.malformed_pairing_uri), new Error(a);\n      }\n      if (!As(s.uri)) {\n        const {\n          message: a\n        } = m(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n        throw i.setError(Y.malformed_pairing_uri), new Error(a);\n      }\n      const o = gt(s?.uri);\n      if (!((n = o?.relay) != null && n.protocol)) {\n        const {\n          message: a\n        } = m(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n        throw i.setError(Y.malformed_pairing_uri), new Error(a);\n      }\n      if (!(o != null && o.symKey)) {\n        const {\n          message: a\n        } = m(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n        throw i.setError(Y.malformed_pairing_uri), new Error(a);\n      }\n      if (o != null && o.expiryTimestamp && O(o?.expiryTimestamp) < Date.now()) {\n        i.setError(Y.pairing_expired);\n        const {\n          message: a\n        } = m(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n        throw new Error(a);\n      }\n    }), p(this, \"isValidPing\", async s => {\n      if (!$e(s)) {\n        const {\n          message: n\n        } = m(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n        throw new Error(n);\n      }\n      const {\n        topic: i\n      } = s;\n      await this.isValidPairingTopic(i);\n    }), p(this, \"isValidDisconnect\", async s => {\n      if (!$e(s)) {\n        const {\n          message: n\n        } = m(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n        throw new Error(n);\n      }\n      const {\n        topic: i\n      } = s;\n      await this.isValidPairingTopic(i);\n    }), p(this, \"isValidPairingTopic\", async s => {\n      if (!xs(s, !1)) {\n        const {\n          message: i\n        } = m(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n        throw new Error(i);\n      }\n      if (!this.pairings.keys.includes(s)) {\n        const {\n          message: i\n        } = m(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n        throw new Error(i);\n      }\n      if (pt(this.pairings.get(s).expiry)) {\n        await this.deletePairing(s);\n        const {\n          message: i\n        } = m(\"EXPIRED\", `pairing topic: ${s}`);\n        throw new Error(i);\n      }\n    }), this.core = e, this.logger = N(t, this.name), this.pairings = new zi(this.core, this.logger, this.name, this.storagePrefix);\n  }\n  get context() {\n    return U(this.logger);\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n  registerRelayerEvents() {\n    this.core.relayer.on(C.message, async e => {\n      const {\n        topic: t,\n        message: s,\n        transportType: i\n      } = e;\n      if (this.pairings.keys.includes(t) && i !== Q.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) try {\n        const n = await this.core.crypto.decode(t, s);\n        ft(n) ? (this.core.history.set(t, n), await this.onRelayEventRequest({\n          topic: t,\n          payload: n\n        })) : Dt(n) && (await this.core.history.resolve(n), await this.onRelayEventResponse({\n          topic: t,\n          payload: n\n        }), this.core.history.delete(t, n.id)), await this.core.relayer.messages.ack(t, s);\n      } catch (n) {\n        this.logger.error(n);\n      }\n    });\n  }\n  registerExpirerEvents() {\n    this.core.expirer.on(F.expired, async e => {\n      const {\n        topic: t\n      } = Ss(e.target);\n      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(se.expire, {\n        topic: t\n      }));\n    });\n  }\n}\nvar Lo = Object.defineProperty,\n  ko = (r, e, t) => e in r ? Lo(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  R = (r, e, t) => ko(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass ki extends is {\n  constructor(e, t) {\n    super(e, t), this.core = e, this.logger = t, R(this, \"records\", new Map()), R(this, \"events\", new ee()), R(this, \"name\", Bt), R(this, \"version\", Vt), R(this, \"cached\", []), R(this, \"initialized\", !1), R(this, \"storagePrefix\", B), R(this, \"init\", async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach(s => this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n    }), R(this, \"set\", (s, i, n) => {\n      if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n        type: \"method\",\n        method: \"set\",\n        topic: s,\n        request: i,\n        chainId: n\n      }), this.records.has(i.id)) return;\n      const o = {\n        id: i.id,\n        topic: s,\n        request: {\n          method: i.method,\n          params: i.params || null\n        },\n        chainId: n,\n        expiry: ce(Ce)\n      };\n      this.records.set(o.id, o), this.persist(), this.events.emit(M.created, o);\n    }), R(this, \"resolve\", async s => {\n      if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n        type: \"method\",\n        method: \"update\",\n        response: s\n      }), !this.records.has(s.id)) return;\n      const i = await this.getRecord(s.id);\n      typeof i.response > \"u\" && (i.response = _t(s) ? {\n        error: s.error\n      } : {\n        result: s.result\n      }, this.records.set(i.id, i), this.persist(), this.events.emit(M.updated, i));\n    }), R(this, \"get\", async (s, i) => (this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n      type: \"method\",\n      method: \"get\",\n      topic: s,\n      id: i\n    }), await this.getRecord(i))), R(this, \"delete\", (s, i) => {\n      this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n        type: \"method\",\n        method: \"delete\",\n        id: i\n      }), this.values.forEach(n => {\n        if (n.topic === s) {\n          if (typeof i < \"u\" && n.id !== i) return;\n          this.records.delete(n.id), this.events.emit(M.deleted, n);\n        }\n      }), this.persist();\n    }), R(this, \"exists\", async (s, i) => (this.isInitialized(), this.records.has(i) ? (await this.getRecord(i)).topic === s : !1)), R(this, \"on\", (s, i) => {\n      this.events.on(s, i);\n    }), R(this, \"once\", (s, i) => {\n      this.events.once(s, i);\n    }), R(this, \"off\", (s, i) => {\n      this.events.off(s, i);\n    }), R(this, \"removeListener\", (s, i) => {\n      this.events.removeListener(s, i);\n    }), this.logger = N(t, this.name);\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n  }\n  get size() {\n    return this.records.size;\n  }\n  get keys() {\n    return Array.from(this.records.keys());\n  }\n  get values() {\n    return Array.from(this.records.values());\n  }\n  get pending() {\n    const e = [];\n    return this.values.forEach(t => {\n      if (typeof t.response < \"u\") return;\n      const s = {\n        topic: t.topic,\n        request: wt(t.request.method, t.request.params, t.id),\n        chainId: t.chainId\n      };\n      return e.push(s);\n    }), e;\n  }\n  async setJsonRpcRecords(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getJsonRpcRecords() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  getRecord(e) {\n    this.isInitialized();\n    const t = this.records.get(e);\n    if (!t) {\n      const {\n        message: s\n      } = m(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw new Error(s);\n    }\n    return t;\n  }\n  async persist() {\n    await this.setJsonRpcRecords(this.values), this.events.emit(M.sync);\n  }\n  async restore() {\n    try {\n      const e = await this.getJsonRpcRecords();\n      if (typeof e > \"u\" || !e.length) return;\n      if (this.records.size) {\n        const {\n          message: t\n        } = m(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n        type: \"method\",\n        method: \"restore\",\n        records: this.values\n      });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n    }\n  }\n  registerEventListeners() {\n    this.events.on(M.created, e => {\n      const t = M.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({\n        type: \"event\",\n        event: t,\n        record: e\n      });\n    }), this.events.on(M.updated, e => {\n      const t = M.updated;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({\n        type: \"event\",\n        event: t,\n        record: e\n      });\n    }), this.events.on(M.deleted, e => {\n      const t = M.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({\n        type: \"event\",\n        event: t,\n        record: e\n      });\n    }), this.core.heartbeat.on(ne.pulse, () => {\n      this.cleanup();\n    });\n  }\n  cleanup() {\n    try {\n      this.isInitialized();\n      let e = !1;\n      this.records.forEach(t => {\n        O(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(M.deleted, t, !1), e = !0);\n      }), e && this.persist();\n    } catch (e) {\n      this.logger.warn(e);\n    }\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nvar jo = Object.defineProperty,\n  Uo = (r, e, t) => e in r ? jo(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  A = (r, e, t) => Uo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass ji extends ss {\n  constructor(e, t) {\n    super(e, t), this.core = e, this.logger = t, A(this, \"expirations\", new Map()), A(this, \"events\", new ee()), A(this, \"name\", qt), A(this, \"version\", Gt), A(this, \"cached\", []), A(this, \"initialized\", !1), A(this, \"storagePrefix\", B), A(this, \"init\", async () => {\n      this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach(s => this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n    }), A(this, \"has\", s => {\n      try {\n        const i = this.formatTarget(s);\n        return typeof this.getExpiration(i) < \"u\";\n      } catch {\n        return !1;\n      }\n    }), A(this, \"set\", (s, i) => {\n      this.isInitialized();\n      const n = this.formatTarget(s),\n        o = {\n          target: n,\n          expiry: i\n        };\n      this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(F.created, {\n        target: n,\n        expiration: o\n      });\n    }), A(this, \"get\", s => {\n      this.isInitialized();\n      const i = this.formatTarget(s);\n      return this.getExpiration(i);\n    }), A(this, \"del\", s => {\n      if (this.isInitialized(), this.has(s)) {\n        const i = this.formatTarget(s),\n          n = this.getExpiration(i);\n        this.expirations.delete(i), this.events.emit(F.deleted, {\n          target: i,\n          expiration: n\n        });\n      }\n    }), A(this, \"on\", (s, i) => {\n      this.events.on(s, i);\n    }), A(this, \"once\", (s, i) => {\n      this.events.once(s, i);\n    }), A(this, \"off\", (s, i) => {\n      this.events.off(s, i);\n    }), A(this, \"removeListener\", (s, i) => {\n      this.events.removeListener(s, i);\n    }), this.logger = N(t, this.name);\n  }\n  get context() {\n    return U(this.logger);\n  }\n  get storageKey() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n  }\n  get length() {\n    return this.expirations.size;\n  }\n  get keys() {\n    return Array.from(this.expirations.keys());\n  }\n  get values() {\n    return Array.from(this.expirations.values());\n  }\n  formatTarget(e) {\n    if (typeof e == \"string\") return Ns(e);\n    if (typeof e == \"number\") return $s(e);\n    const {\n      message: t\n    } = m(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n    throw new Error(t);\n  }\n  async setExpirations(e) {\n    await this.core.storage.setItem(this.storageKey, e);\n  }\n  async getExpirations() {\n    return await this.core.storage.getItem(this.storageKey);\n  }\n  async persist() {\n    await this.setExpirations(this.values), this.events.emit(F.sync);\n  }\n  async restore() {\n    try {\n      const e = await this.getExpirations();\n      if (typeof e > \"u\" || !e.length) return;\n      if (this.expirations.size) {\n        const {\n          message: t\n        } = m(\"RESTORE_WILL_OVERRIDE\", this.name);\n        throw this.logger.error(t), new Error(t);\n      }\n      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n        type: \"method\",\n        method: \"restore\",\n        expirations: this.values\n      });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n    }\n  }\n  getExpiration(e) {\n    const t = this.expirations.get(e);\n    if (!t) {\n      const {\n        message: s\n      } = m(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n      throw this.logger.warn(s), new Error(s);\n    }\n    return t;\n  }\n  checkExpiry(e, t) {\n    const {\n      expiry: s\n    } = t;\n    O(s) - Date.now() <= 0 && this.expire(e, t);\n  }\n  expire(e, t) {\n    this.expirations.delete(e), this.events.emit(F.expired, {\n      target: e,\n      expiration: t\n    });\n  }\n  checkExpirations() {\n    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));\n  }\n  registerEventListeners() {\n    this.core.heartbeat.on(ne.pulse, () => this.checkExpirations()), this.events.on(F.created, e => {\n      const t = F.created;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({\n        type: \"event\",\n        event: t,\n        data: e\n      }), this.persist();\n    }), this.events.on(F.expired, e => {\n      const t = F.expired;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({\n        type: \"event\",\n        event: t,\n        data: e\n      }), this.persist();\n    }), this.events.on(F.deleted, e => {\n      const t = F.deleted;\n      this.logger.info(`Emitting ${t}`), this.logger.debug({\n        type: \"event\",\n        event: t,\n        data: e\n      }), this.persist();\n    });\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: e\n      } = m(\"NOT_INITIALIZED\", this.name);\n      throw new Error(e);\n    }\n  }\n}\nvar Mo = Object.defineProperty,\n  Fo = (r, e, t) => e in r ? Mo(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  w = (r, e, t) => Fo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ui extends rs {\n  constructor(e, t, s) {\n    super(e, t, s), this.core = e, this.logger = t, this.store = s, w(this, \"name\", Wt), w(this, \"abortController\"), w(this, \"isDevEnv\"), w(this, \"verifyUrlV3\", Yt), w(this, \"storagePrefix\", B), w(this, \"version\", Le), w(this, \"publicKey\"), w(this, \"fetchPromise\"), w(this, \"init\", async () => {\n      var i;\n      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && O((i = this.publicKey) == null ? void 0 : i.expiresAt) < Date.now() && (this.logger.debug(\"verify v2 public key expired\"), await this.removePublicKey()));\n    }), w(this, \"register\", async i => {\n      if (!zs() || this.isDevEnv) return;\n      const n = window.location.origin,\n        {\n          id: o,\n          decryptedId: a\n        } = i,\n        c = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n}&id=${o}&decryptedId=${a}`;\n      try {\n        const h = Vs(),\n          u = this.startAbortTimer(Z * 5),\n          d = await new Promise((g, _) => {\n            const l = () => {\n              window.removeEventListener(\"message\", x), h.body.removeChild(b), _(\"attestation aborted\");\n            };\n            this.abortController.signal.addEventListener(\"abort\", l);\n            const b = h.createElement(\"iframe\");\n            b.src = c, b.style.display = \"none\", b.addEventListener(\"error\", l, {\n              signal: this.abortController.signal\n            });\n            const x = I => {\n              if (I.data && typeof I.data == \"string\") try {\n                const D = JSON.parse(I.data);\n                if (D.type === \"verify_attestation\") {\n                  if (rt(D.attestation).payload.id !== o) return;\n                  clearInterval(u), h.body.removeChild(b), this.abortController.signal.removeEventListener(\"abort\", l), window.removeEventListener(\"message\", x), g(D.attestation === null ? \"\" : D.attestation);\n                }\n              } catch (D) {\n                this.logger.warn(D);\n              }\n            };\n            h.body.appendChild(b), window.addEventListener(\"message\", x, {\n              signal: this.abortController.signal\n            });\n          });\n        return this.logger.debug(\"jwt attestation\", d), d;\n      } catch (h) {\n        this.logger.warn(h);\n      }\n      return \"\";\n    }), w(this, \"resolve\", async i => {\n      if (this.isDevEnv) return \"\";\n      const {\n        attestationId: n,\n        hash: o,\n        encryptedId: a\n      } = i;\n      if (n === \"\") {\n        this.logger.debug(\"resolve: attestationId is empty, skipping\");\n        return;\n      }\n      if (n) {\n        if (rt(n).payload.id !== a) return;\n        const h = await this.isValidJwtAttestation(n);\n        if (h) {\n          if (!h.isVerified) {\n            this.logger.warn(\"resolve: jwt attestation: origin url not verified\");\n            return;\n          }\n          return h;\n        }\n      }\n      if (!o) return;\n      const c = this.getVerifyUrl(i?.verifyUrl);\n      return this.fetchAttestation(o, c);\n    }), w(this, \"fetchAttestation\", async (i, n) => {\n      this.logger.debug(`resolving attestation: ${i} from url: ${n}`);\n      const o = this.startAbortTimer(Z * 5),\n        a = await fetch(`${n}/attestation/${i}?v2Supported=true`, {\n          signal: this.abortController.signal\n        });\n      return clearTimeout(o), a.status === 200 ? await a.json() : void 0;\n    }), w(this, \"getVerifyUrl\", i => {\n      let n = i || ue;\n      return Jt.includes(n) || (this.logger.info(`verify url: ${n}, not included in trusted list, assigning default: ${ue}`), n = ue), n;\n    }), w(this, \"fetchPublicKey\", async () => {\n      try {\n        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);\n        const i = this.startAbortTimer(Pe),\n          n = await fetch(`${this.verifyUrlV3}/public-key`, {\n            signal: this.abortController.signal\n          });\n        return clearTimeout(i), await n.json();\n      } catch (i) {\n        this.logger.warn(i);\n      }\n    }), w(this, \"persistPublicKey\", async i => {\n      this.logger.debug(\"persisting public key to local storage\", i), await this.store.setItem(this.storeKey, i), this.publicKey = i;\n    }), w(this, \"removePublicKey\", async () => {\n      this.logger.debug(\"removing verify v2 public key from storage\"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;\n    }), w(this, \"isValidJwtAttestation\", async i => {\n      const n = await this.getPublicKey();\n      try {\n        if (n) return this.validateAttestation(i, n);\n      } catch (a) {\n        this.logger.error(a), this.logger.warn(\"error validating attestation\");\n      }\n      const o = await this.fetchAndPersistPublicKey();\n      try {\n        if (o) return this.validateAttestation(i, o);\n      } catch (a) {\n        this.logger.error(a), this.logger.warn(\"error validating attestation\");\n      }\n    }), w(this, \"getPublicKey\", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w(this, \"fetchAndPersistPublicKey\", async () => {\n      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;\n      this.fetchPromise = new Promise(async n => {\n        const o = await this.fetchPublicKey();\n        o && (await this.persistPublicKey(o), n(o));\n      });\n      const i = await this.fetchPromise;\n      return this.fetchPromise = void 0, i;\n    }), w(this, \"validateAttestation\", (i, n) => {\n      const o = Ls(i, n.publicKey),\n        a = {\n          hasExpired: O(o.exp) < Date.now(),\n          payload: o\n        };\n      if (a.hasExpired) throw this.logger.warn(\"resolve: jwt attestation expired\"), new Error(\"JWT attestation expired\");\n      return {\n        origin: a.payload.origin,\n        isScam: a.payload.isScam,\n        isVerified: a.payload.isVerified\n      };\n    }), this.logger = N(t, this.name), this.abortController = new AbortController(), this.isDevEnv = yt(), this.init();\n  }\n  get storeKey() {\n    return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//verify:public:key\";\n  }\n  get context() {\n    return U(this.logger);\n  }\n  startAbortTimer(e) {\n    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), O(e));\n  }\n}\nvar Ko = Object.defineProperty,\n  Bo = (r, e, t) => e in r ? Ko(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  Mi = (r, e, t) => Bo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Fi extends ns {\n  constructor(e, t) {\n    super(e, t), this.projectId = e, this.logger = t, Mi(this, \"context\", Xt), Mi(this, \"registerDeviceToken\", async s => {\n      const {\n          clientId: i,\n          token: n,\n          notificationType: o,\n          enableEncrypted: a = !1\n        } = s,\n        c = `${Zt}/${this.projectId}/clients`;\n      await fetch(c, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          client_id: i,\n          type: o,\n          token: n,\n          always_raw: a\n        })\n      });\n    }), this.logger = N(t, this.context);\n  }\n}\nvar Vo = Object.defineProperty,\n  Ki = Object.getOwnPropertySymbols,\n  qo = Object.prototype.hasOwnProperty,\n  Go = Object.prototype.propertyIsEnumerable,\n  Ze = (r, e, t) => e in r ? Vo(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  be = (r, e) => {\n    for (var t in e || (e = {})) qo.call(e, t) && Ze(r, t, e[t]);\n    if (Ki) for (var t of Ki(e)) Go.call(e, t) && Ze(r, t, e[t]);\n    return r;\n  },\n  E = (r, e, t) => Ze(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Bi extends os {\n  constructor(e, t, s = !0) {\n    super(e, t, s), this.core = e, this.logger = t, E(this, \"context\", ei), E(this, \"storagePrefix\", B), E(this, \"storageVersion\", Qt), E(this, \"events\", new Map()), E(this, \"shouldPersist\", !1), E(this, \"init\", async () => {\n      if (!yt()) try {\n        const i = {\n          eventId: bt(),\n          timestamp: Date.now(),\n          domain: this.getAppDomain(),\n          props: {\n            event: \"INIT\",\n            type: \"\",\n            properties: {\n              client_id: await this.core.crypto.getClientId(),\n              user_agent: ks(this.core.relayer.protocol, this.core.relayer.version, _e)\n            }\n          }\n        };\n        await this.sendEvent([i]);\n      } catch (i) {\n        this.logger.warn(i);\n      }\n    }), E(this, \"createEvent\", i => {\n      const {\n          event: n = \"ERROR\",\n          type: o = \"\",\n          properties: {\n            topic: a,\n            trace: c\n          }\n        } = i,\n        h = bt(),\n        u = this.core.projectId || \"\",\n        d = Date.now(),\n        g = be({\n          eventId: h,\n          timestamp: d,\n          props: {\n            event: n,\n            type: o,\n            properties: {\n              topic: a,\n              trace: c\n            }\n          },\n          bundleId: u,\n          domain: this.getAppDomain()\n        }, this.setMethods(h));\n      return this.telemetryEnabled && (this.events.set(h, g), this.shouldPersist = !0), g;\n    }), E(this, \"getEvent\", i => {\n      const {\n        eventId: n,\n        topic: o\n      } = i;\n      if (n) return this.events.get(n);\n      const a = Array.from(this.events.values()).find(c => c.props.properties.topic === o);\n      if (a) return be(be({}, a), this.setMethods(a.eventId));\n    }), E(this, \"deleteEvent\", i => {\n      const {\n        eventId: n\n      } = i;\n      this.events.delete(n), this.shouldPersist = !0;\n    }), E(this, \"setEventListeners\", () => {\n      this.core.heartbeat.on(ne.pulse, async () => {\n        this.shouldPersist && (await this.persist()), this.events.forEach(i => {\n          it(Date.now()) - it(i.timestamp) > ti && (this.events.delete(i.eventId), this.shouldPersist = !0);\n        });\n      });\n    }), E(this, \"setMethods\", i => ({\n      addTrace: n => this.addTrace(i, n),\n      setError: n => this.setError(i, n)\n    })), E(this, \"addTrace\", (i, n) => {\n      const o = this.events.get(i);\n      o && (o.props.properties.trace.push(n), this.events.set(i, o), this.shouldPersist = !0);\n    }), E(this, \"setError\", (i, n) => {\n      const o = this.events.get(i);\n      o && (o.props.type = n, o.timestamp = Date.now(), this.events.set(i, o), this.shouldPersist = !0);\n    }), E(this, \"persist\", async () => {\n      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = !1;\n    }), E(this, \"restore\", async () => {\n      try {\n        const i = (await this.core.storage.getItem(this.storageKey)) || [];\n        if (!i.length) return;\n        i.forEach(n => {\n          this.events.set(n.eventId, be(be({}, n), this.setMethods(n.eventId)));\n        });\n      } catch (i) {\n        this.logger.warn(i);\n      }\n    }), E(this, \"submit\", async () => {\n      if (!this.telemetryEnabled || this.events.size === 0) return;\n      const i = [];\n      for (const [n, o] of this.events) o.props.type && i.push(o);\n      if (i.length !== 0) try {\n        if ((await this.sendEvent(i)).ok) for (const n of i) this.events.delete(n.eventId), this.shouldPersist = !0;\n      } catch (n) {\n        this.logger.warn(n);\n      }\n    }), E(this, \"sendEvent\", async i => {\n      const n = this.getAppDomain() ? \"\" : \"&sp=desktop\";\n      return await fetch(`${ii}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e}${n}`, {\n        method: \"POST\",\n        body: JSON.stringify(i)\n      });\n    }), E(this, \"getAppDomain\", () => js().url), this.logger = N(t, this.context), this.telemetryEnabled = s, s ? this.restore().then(async () => {\n      await this.submit(), this.setEventListeners();\n    }) : this.persist();\n  }\n  get storageKey() {\n    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + \"//\" + this.context;\n  }\n}\nvar Wo = Object.defineProperty,\n  Vi = Object.getOwnPropertySymbols,\n  Ho = Object.prototype.hasOwnProperty,\n  Yo = Object.prototype.propertyIsEnumerable,\n  Qe = (r, e, t) => e in r ? Wo(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  qi = (r, e) => {\n    for (var t in e || (e = {})) Ho.call(e, t) && Qe(r, t, e[t]);\n    if (Vi) for (var t of Vi(e)) Yo.call(e, t) && Qe(r, t, e[t]);\n    return r;\n  },\n  v = (r, e, t) => Qe(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Te extends as {\n  constructor(e) {\n    var t;\n    super(e), v(this, \"protocol\", ze), v(this, \"version\", Le), v(this, \"name\", he), v(this, \"relayUrl\"), v(this, \"projectId\"), v(this, \"customStoragePrefix\"), v(this, \"events\", new ee()), v(this, \"logger\"), v(this, \"heartbeat\"), v(this, \"relayer\"), v(this, \"crypto\"), v(this, \"storage\"), v(this, \"history\"), v(this, \"expirer\"), v(this, \"pairing\"), v(this, \"verify\"), v(this, \"echoClient\"), v(this, \"linkModeSupportedApps\"), v(this, \"eventClient\"), v(this, \"initialized\", !1), v(this, \"logChunkController\"), v(this, \"on\", (o, a) => this.events.on(o, a)), v(this, \"once\", (o, a) => this.events.once(o, a)), v(this, \"off\", (o, a) => this.events.off(o, a)), v(this, \"removeListener\", (o, a) => this.events.removeListener(o, a)), v(this, \"dispatchEnvelope\", ({\n      topic: o,\n      message: a,\n      sessionExists: c\n    }) => {\n      if (!o || !a) return;\n      const h = {\n        topic: o,\n        message: a,\n        publishedAt: Date.now(),\n        transportType: Q.link_mode\n      };\n      this.relayer.onLinkMessageEvent(h, {\n        sessionExists: c\n      });\n    }), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || Ue, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : \"\";\n    const s = et({\n        level: typeof e?.logger == \"string\" && e.logger ? e.logger : Et.logger,\n        name: he\n      }),\n      {\n        logger: i,\n        chunkLoggerController: n\n      } = Ji({\n        opts: s,\n        maxSizeInBytes: e?.maxLogBlobSizeInBytes,\n        loggerOverride: e?.logger\n      });\n    this.logChunkController = n, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {\n      var o, a;\n      (o = this.logChunkController) != null && o.downloadLogsBlobInBrowser && ((a = this.logChunkController) == null || a.downloadLogsBlobInBrowser({\n        clientId: await this.crypto.getClientId()\n      }));\n    }), this.logger = N(i, this.name), this.heartbeat = new Wi(), this.crypto = new vi(this, this.logger, e?.keychain), this.history = new ki(this, this.logger), this.expirer = new ji(this, this.logger), this.storage = e != null && e.storage ? e.storage : new Hi(qi(qi({}, It), e?.storageOptions)), this.relayer = new Si({\n      core: this,\n      logger: this.logger,\n      relayUrl: this.relayUrl,\n      projectId: this.projectId\n    }), this.pairing = new Li(this, this.logger), this.verify = new Ui(this, this.logger, this.storage), this.echoClient = new Fi(this.projectId || \"\", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi(this, this.logger, e?.telemetryEnabled);\n  }\n  static async init(e) {\n    const t = new Te(e);\n    await t.initialize();\n    const s = await t.crypto.getClientId();\n    return await t.storage.setItem(jt, s), t;\n  }\n  get context() {\n    return U(this.logger);\n  }\n  async start() {\n    this.initialized || (await this.initialize());\n  }\n  async getLogsBlob() {\n    var e;\n    return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({\n      clientId: await this.crypto.getClientId()\n    });\n  }\n  async addLinkModeSupportedApp(e) {\n    this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Me, this.linkModeSupportedApps));\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = (await this.storage.getItem(Me)) || [], this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n    } catch (e) {\n      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n    }\n  }\n}\nconst Jo = Te;\nexport { he as CORE_CONTEXT, Et as CORE_DEFAULT, ze as CORE_PROTOCOL, It as CORE_STORAGE_OPTIONS, B as CORE_STORAGE_PREFIX, Le as CORE_VERSION, ke as CRYPTO_CLIENT_SEED, Tt as CRYPTO_CONTEXT, Ct as CRYPTO_JWT_TTL, Jo as Core, vi as Crypto, Xt as ECHO_CONTEXT, Zt as ECHO_URL, ii as EVENTS_CLIENT_API_URL, ti as EVENTS_STORAGE_CLEANUP_INTERVAL, ei as EVENTS_STORAGE_CONTEXT, Qt as EVENTS_STORAGE_VERSION, ir as EVENT_CLIENT_AUTHENTICATE_ERRORS, tr as EVENT_CLIENT_AUTHENTICATE_TRACES, Zs as EVENT_CLIENT_CONTEXT, Y as EVENT_CLIENT_PAIRING_ERRORS, G as EVENT_CLIENT_PAIRING_TRACES, er as EVENT_CLIENT_SESSION_ERRORS, Qs as EVENT_CLIENT_SESSION_TRACES, qt as EXPIRER_CONTEXT, Js as EXPIRER_DEFAULT_TTL, F as EXPIRER_EVENTS, Gt as EXPIRER_STORAGE_VERSION, Fi as EchoClient, Bi as EventClient, ji as Expirer, Bt as HISTORY_CONTEXT, M as HISTORY_EVENTS, Vt as HISTORY_STORAGE_VERSION, ki as JsonRpcHistory, Pt as KEYCHAIN_CONTEXT, St as KEYCHAIN_STORAGE_VERSION, Di as KeyChain, Rt as MESSAGES_CONTEXT, Ot as MESSAGES_STORAGE_VERSION, le as MESSAGE_DIRECTION, _i as MessageTracker, Ft as PAIRING_CONTEXT, Ys as PAIRING_DEFAULT_TTL, se as PAIRING_EVENTS, ie as PAIRING_RPC_OPTS, Kt as PAIRING_STORAGE_VERSION, Hs as PENDING_SUB_RESOLUTION_TIMEOUT, At as PUBLISHER_CONTEXT, je as PUBLISHER_DEFAULT_TTL, Li as Pairing, $t as RELAYER_CONTEXT, Nt as RELAYER_DEFAULT_LOGGER, xt as RELAYER_DEFAULT_PROTOCOL, Ue as RELAYER_DEFAULT_RELAY_URL, C as RELAYER_EVENTS, L as RELAYER_PROVIDER_EVENTS, Lt as RELAYER_RECONNECT_TIMEOUT, _e as RELAYER_SDK_VERSION, qs as RELAYER_STORAGE_OPTIONS, zt as RELAYER_SUBSCRIBER_SUFFIX, Gs as RELAYER_TRANSPORT_CUTOFF, Si as Relayer, kt as STORE_STORAGE_VERSION, Ut as SUBSCRIBER_CONTEXT, Ws as SUBSCRIBER_DEFAULT_TTL, $ as SUBSCRIBER_EVENTS, Mt as SUBSCRIBER_STORAGE_VERSION, zi as Store, Ti as Subscriber, Q as TRANSPORT_TYPES, Jt as TRUSTED_VERIFY_URLS, Wt as VERIFY_CONTEXT, ue as VERIFY_SERVER, Yt as VERIFY_SERVER_V3, Ui as Verify, jt as WALLETCONNECT_CLIENT_ID, Me as WALLETCONNECT_LINK_MODE_APPS, Te as default };\n//# sourceMappingURL=index.es.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}