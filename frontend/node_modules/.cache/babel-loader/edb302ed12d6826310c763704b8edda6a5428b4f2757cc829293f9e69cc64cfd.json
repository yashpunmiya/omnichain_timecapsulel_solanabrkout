{"ast":null,"code":"import { addHexPrefix, bigIntToHex } from './bytes.js';\nimport { isHexString } from './internal.js';\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nexport function parseGethGenesisState(json) {\n  const state = {};\n  for (const address of Object.keys(json.alloc)) {\n    let {\n      balance,\n      code,\n      storage,\n      nonce\n    } = json.alloc[address];\n    // create a map with lowercase for easy lookups\n    const prefixedAddress = addHexPrefix(address.toLowerCase());\n    balance = isHexString(balance) ? balance : bigIntToHex(BigInt(balance));\n    code = code !== undefined ? addHexPrefix(code) : undefined;\n    storage = storage !== undefined ? Object.entries(storage) : undefined;\n    nonce = nonce !== undefined ? addHexPrefix(nonce) : undefined;\n    state[prefixedAddress] = [balance, code, storage, nonce];\n  }\n  return state;\n}\n//# sourceMappingURL=genesis.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}