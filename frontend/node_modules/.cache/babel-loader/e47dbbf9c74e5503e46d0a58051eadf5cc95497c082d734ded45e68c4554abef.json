{"ast":null,"code":"import { panicReasons } from '../../constants/solidity.js';\nimport { BaseError } from '../../errors/base.js';\nimport { ContractFunctionRevertedError } from '../../errors/contract.js';\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(err, callType) {\n  if (!(err instanceof BaseError)) return false;\n  const cause = err.walk(e => e instanceof ContractFunctionRevertedError);\n  if (!(cause instanceof ContractFunctionRevertedError)) return false;\n  if (cause.data?.errorName === 'ResolverNotFound') return true;\n  if (cause.data?.errorName === 'ResolverWildcardNotSupported') return true;\n  if (cause.data?.errorName === 'ResolverNotContract') return true;\n  if (cause.data?.errorName === 'ResolverError') return true;\n  if (cause.data?.errorName === 'HttpError') return true;\n  // Backwards compatibility for older UniversalResolver contracts\n  if (cause.reason?.includes('Wildcard on non-extended resolvers is not supported')) return true;\n  // No primary name set for address.\n  if (callType === 'reverse' && cause.reason === panicReasons[50]) return true;\n  return false;\n}\n//# sourceMappingURL=errors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}