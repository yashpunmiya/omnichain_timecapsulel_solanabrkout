{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { getTransactionCount } from '../public/getTransactionCount.js';\n/**\n * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n *\n * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link PrepareAuthorizationParameters}\n * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function prepareAuthorization(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chainId,\n    nonce\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/eip7702/prepareAuthorization'\n  });\n  const account = parseAccount(account_);\n  const executor = (() => {\n    if (!parameters.executor) return undefined;\n    if (parameters.executor === 'self') return parameters.executor;\n    return parseAccount(parameters.executor);\n  })();\n  const authorization = {\n    address: parameters.contractAddress ?? parameters.address,\n    chainId,\n    nonce\n  };\n  if (typeof authorization.chainId === 'undefined') authorization.chainId = client.chain?.id ?? (await getAction(client, getChainId, 'getChainId')({}));\n  if (typeof authorization.nonce === 'undefined') {\n    authorization.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({\n      address: account.address,\n      blockTag: 'pending'\n    });\n    if (executor === 'self' || executor?.address && isAddressEqual(executor.address, account.address)) authorization.nonce += 1;\n  }\n  return authorization;\n}\n//# sourceMappingURL=prepareAuthorization.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}