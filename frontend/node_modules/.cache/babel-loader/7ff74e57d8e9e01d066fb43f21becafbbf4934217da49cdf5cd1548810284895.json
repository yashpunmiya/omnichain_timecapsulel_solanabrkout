{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", {\n  fatal: true\n});\nfunction baseEncode(value) {\n  if (typeof value === \"string\") {\n    value = Buffer.from(value, \"utf8\");\n  }\n  return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n  return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n  constructor(message) {\n    super(message);\n    this.fieldPath = [];\n    this.originalMessage = message;\n  }\n  addToFieldPath(fieldName) {\n    this.fieldPath.splice(0, 0, fieldName);\n    // NOTE: Modifying message directly as jest doesn't use .toString()\n    this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n  }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n  constructor() {\n    this.buf = Buffer.alloc(INITIAL_LENGTH);\n    this.length = 0;\n  }\n  maybeResize() {\n    if (this.buf.length < 16 + this.length) {\n      this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n    }\n  }\n  writeU8(value) {\n    this.maybeResize();\n    this.buf.writeUInt8(value, this.length);\n    this.length += 1;\n  }\n  writeU16(value) {\n    this.maybeResize();\n    this.buf.writeUInt16LE(value, this.length);\n    this.length += 2;\n  }\n  writeU32(value) {\n    this.maybeResize();\n    this.buf.writeUInt32LE(value, this.length);\n    this.length += 4;\n  }\n  writeU64(value) {\n    this.maybeResize();\n    this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n  }\n  writeU128(value) {\n    this.maybeResize();\n    this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n  }\n  writeU256(value) {\n    this.maybeResize();\n    this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n  }\n  writeU512(value) {\n    this.maybeResize();\n    this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n  }\n  writeBuffer(buffer) {\n    // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n    this.buf = Buffer.concat([Buffer.from(this.buf.subarray(0, this.length)), buffer, Buffer.alloc(INITIAL_LENGTH)]);\n    this.length += buffer.length;\n  }\n  writeString(str) {\n    this.maybeResize();\n    const b = Buffer.from(str, \"utf8\");\n    this.writeU32(b.length);\n    this.writeBuffer(b);\n  }\n  writeFixedArray(array) {\n    this.writeBuffer(Buffer.from(array));\n  }\n  writeArray(array, fn) {\n    this.maybeResize();\n    this.writeU32(array.length);\n    for (const elem of array) {\n      this.maybeResize();\n      fn(elem);\n    }\n  }\n  toArray() {\n    return this.buf.subarray(0, this.length);\n  }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n  const originalMethod = propertyDescriptor.value;\n  propertyDescriptor.value = function (...args) {\n    try {\n      return originalMethod.apply(this, args);\n    } catch (e) {\n      if (e instanceof RangeError) {\n        const code = e.code;\n        if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n          throw new BorshError(\"Reached the end of buffer when deserializing\");\n        }\n      }\n      throw e;\n    }\n  };\n}\nclass BinaryReader {\n  constructor(buf) {\n    this.buf = buf;\n    this.offset = 0;\n  }\n  readU8() {\n    const value = this.buf.readUInt8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  readU16() {\n    const value = this.buf.readUInt16LE(this.offset);\n    this.offset += 2;\n    return value;\n  }\n  readU32() {\n    const value = this.buf.readUInt32LE(this.offset);\n    this.offset += 4;\n    return value;\n  }\n  readU64() {\n    const buf = this.readBuffer(8);\n    return new bn_js_1.default(buf, \"le\");\n  }\n  readU128() {\n    const buf = this.readBuffer(16);\n    return new bn_js_1.default(buf, \"le\");\n  }\n  readU256() {\n    const buf = this.readBuffer(32);\n    return new bn_js_1.default(buf, \"le\");\n  }\n  readU512() {\n    const buf = this.readBuffer(64);\n    return new bn_js_1.default(buf, \"le\");\n  }\n  readBuffer(len) {\n    if (this.offset + len > this.buf.length) {\n      throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n    }\n    const result = this.buf.slice(this.offset, this.offset + len);\n    this.offset += len;\n    return result;\n  }\n  readString() {\n    const len = this.readU32();\n    const buf = this.readBuffer(len);\n    try {\n      // NOTE: Using TextDecoder to fail on invalid UTF-8\n      return textDecoder.decode(buf);\n    } catch (e) {\n      throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n    }\n  }\n  readFixedArray(len) {\n    return new Uint8Array(this.readBuffer(len));\n  }\n  readArray(fn) {\n    const len = this.readU32();\n    const result = Array();\n    for (let i = 0; i < len; ++i) {\n      result.push(fn());\n    }\n    return result;\n  }\n}\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU8\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU16\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU32\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU64\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU128\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU256\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU512\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readString\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n  try {\n    // TODO: Handle missing values properly (make sure they never result in just skipped write)\n    if (typeof fieldType === \"string\") {\n      writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n    } else if (fieldType instanceof Array) {\n      if (typeof fieldType[0] === \"number\") {\n        if (value.length !== fieldType[0]) {\n          throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n        }\n        writer.writeFixedArray(value);\n      } else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n        if (value.length !== fieldType[1]) {\n          throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n        }\n        for (let i = 0; i < fieldType[1]; i++) {\n          serializeField(schema, null, value[i], fieldType[0], writer);\n        }\n      } else {\n        writer.writeArray(value, item => {\n          serializeField(schema, fieldName, item, fieldType[0], writer);\n        });\n      }\n    } else if (fieldType.kind !== undefined) {\n      switch (fieldType.kind) {\n        case \"option\":\n          {\n            if (value === null || value === undefined) {\n              writer.writeU8(0);\n            } else {\n              writer.writeU8(1);\n              serializeField(schema, fieldName, value, fieldType.type, writer);\n            }\n            break;\n          }\n        case \"map\":\n          {\n            writer.writeU32(value.size);\n            value.forEach((val, key) => {\n              serializeField(schema, fieldName, key, fieldType.key, writer);\n              serializeField(schema, fieldName, val, fieldType.value, writer);\n            });\n            break;\n          }\n        default:\n          throw new BorshError(`FieldType ${fieldType} unrecognized`);\n      }\n    } else {\n      serializeStruct(schema, value, writer);\n    }\n  } catch (error) {\n    if (error instanceof BorshError) {\n      error.addToFieldPath(fieldName);\n    }\n    throw error;\n  }\n}\nfunction serializeStruct(schema, obj, writer) {\n  if (typeof obj.borshSerialize === \"function\") {\n    obj.borshSerialize(writer);\n    return;\n  }\n  const structSchema = schema.get(obj.constructor);\n  if (!structSchema) {\n    throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n  }\n  if (structSchema.kind === \"struct\") {\n    structSchema.fields.map(([fieldName, fieldType]) => {\n      serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n    });\n  } else if (structSchema.kind === \"enum\") {\n    const name = obj[structSchema.field];\n    for (let idx = 0; idx < structSchema.values.length; ++idx) {\n      const [fieldName, fieldType] = structSchema.values[idx];\n      if (fieldName === name) {\n        writer.writeU8(idx);\n        serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        break;\n      }\n    }\n  } else {\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n  }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n  const writer = new Writer();\n  serializeStruct(schema, obj, writer);\n  return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n  try {\n    if (typeof fieldType === \"string\") {\n      return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n    }\n    if (fieldType instanceof Array) {\n      if (typeof fieldType[0] === \"number\") {\n        return reader.readFixedArray(fieldType[0]);\n      } else if (typeof fieldType[1] === \"number\") {\n        const arr = [];\n        for (let i = 0; i < fieldType[1]; i++) {\n          arr.push(deserializeField(schema, null, fieldType[0], reader));\n        }\n        return arr;\n      } else {\n        return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n      }\n    }\n    if (fieldType.kind === \"option\") {\n      const option = reader.readU8();\n      if (option) {\n        return deserializeField(schema, fieldName, fieldType.type, reader);\n      }\n      return undefined;\n    }\n    if (fieldType.kind === \"map\") {\n      let map = new Map();\n      const length = reader.readU32();\n      for (let i = 0; i < length; i++) {\n        const key = deserializeField(schema, fieldName, fieldType.key, reader);\n        const val = deserializeField(schema, fieldName, fieldType.value, reader);\n        map.set(key, val);\n      }\n      return map;\n    }\n    return deserializeStruct(schema, fieldType, reader);\n  } catch (error) {\n    if (error instanceof BorshError) {\n      error.addToFieldPath(fieldName);\n    }\n    throw error;\n  }\n}\nfunction deserializeStruct(schema, classType, reader) {\n  if (typeof classType.borshDeserialize === \"function\") {\n    return classType.borshDeserialize(reader);\n  }\n  const structSchema = schema.get(classType);\n  if (!structSchema) {\n    throw new BorshError(`Class ${classType.name} is missing in schema`);\n  }\n  if (structSchema.kind === \"struct\") {\n    const result = {};\n    for (const [fieldName, fieldType] of schema.get(classType).fields) {\n      result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n    }\n    return new classType(result);\n  }\n  if (structSchema.kind === \"enum\") {\n    const idx = reader.readU8();\n    if (idx >= structSchema.values.length) {\n      throw new BorshError(`Enum index: ${idx} is out of range`);\n    }\n    const [fieldName, fieldType] = structSchema.values[idx];\n    const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n    return new classType({\n      [fieldName]: fieldValue\n    });\n  }\n  throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n  const reader = new Reader(buffer);\n  const result = deserializeStruct(schema, classType, reader);\n  if (reader.offset < buffer.length) {\n    throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n  }\n  return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n  const reader = new Reader(buffer);\n  return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}