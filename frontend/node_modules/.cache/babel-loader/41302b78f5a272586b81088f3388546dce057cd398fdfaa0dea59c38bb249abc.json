{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { isAddress } from './isAddress.js';\nexport function isAddressEqual(a, b) {\n  if (!isAddress(a, {\n    strict: false\n  })) throw new InvalidAddressError({\n    address: a\n  });\n  if (!isAddress(b, {\n    strict: false\n  })) throw new InvalidAddressError({\n    address: b\n  });\n  return a.toLowerCase() === b.toLowerCase();\n}","map":{"version":3,"names":["InvalidAddressError","isAddress","isAddressEqual","a","b","strict","address","toLowerCase"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\address\\isAddressEqual.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { isAddress } from './isAddress.js'\n\nexport type IsAddressEqualReturnType = boolean\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a, { strict: false }))\n    throw new InvalidAddressError({ address: a })\n  if (!isAddress(b, { strict: false }))\n    throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n"],"mappings":"AAEA,SACEA,mBAAmB,QAEd,yBAAyB;AAEhC,SAASC,SAAS,QAAQ,gBAAgB;AAK1C,OAAM,SAAUC,cAAcA,CAACC,CAAU,EAAEC,CAAU;EACnD,IAAI,CAACH,SAAS,CAACE,CAAC,EAAE;IAAEE,MAAM,EAAE;EAAK,CAAE,CAAC,EAClC,MAAM,IAAIL,mBAAmB,CAAC;IAAEM,OAAO,EAAEH;EAAC,CAAE,CAAC;EAC/C,IAAI,CAACF,SAAS,CAACG,CAAC,EAAE;IAAEC,MAAM,EAAE;EAAK,CAAE,CAAC,EAClC,MAAM,IAAIL,mBAAmB,CAAC;IAAEM,OAAO,EAAEF;EAAC,CAAE,CAAC;EAC/C,OAAOD,CAAC,CAACI,WAAW,EAAE,KAAKH,CAAC,CAACG,WAAW,EAAE;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}