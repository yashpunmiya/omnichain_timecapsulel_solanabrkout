{"ast":null,"code":"import { AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError } from '../../errors/abi.js';\nimport { concatHex } from '../data/concat.js';\nimport { encodeAbiParameters } from './encodeAbiParameters.js';\nconst docsPath = '/docs/contract/encodeDeployData';\nexport function encodeDeployData(parameters) {\n  const {\n    abi,\n    args,\n    bytecode\n  } = parameters;\n  if (!args || args.length === 0) return bytecode;\n  const description = abi.find(x => 'type' in x && x.type === 'constructor');\n  if (!description) throw new AbiConstructorNotFoundError({\n    docsPath\n  });\n  if (!('inputs' in description)) throw new AbiConstructorParamsNotFoundError({\n    docsPath\n  });\n  if (!description.inputs || description.inputs.length === 0) throw new AbiConstructorParamsNotFoundError({\n    docsPath\n  });\n  const data = encodeAbiParameters(description.inputs, args);\n  return concatHex([bytecode, data]);\n}","map":{"version":3,"names":["AbiConstructorNotFoundError","AbiConstructorParamsNotFoundError","concatHex","encodeAbiParameters","docsPath","encodeDeployData","parameters","abi","args","bytecode","length","description","find","x","type","inputs","data"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\abi\\encodeDeployData.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ContractConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\n\nconst docsPath = '/docs/contract/encodeDeployData'\n\nexport type EncodeDeployDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  ///\n  hasConstructor = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [Extract<abi[number], { type: 'constructor' }>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractConstructorArgs<abi>,\n> = {\n  abi: abi\n  bytecode: Hex\n} & UnionEvaluate<\n  hasConstructor extends false\n    ? { args?: undefined }\n    : readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n>\n\nexport type EncodeDeployDataReturnType = Hex\n\nexport type EncodeDeployDataErrorType =\n  | AbiConstructorNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | ErrorType\n\nexport function encodeDeployData<const abi extends Abi | readonly unknown[]>(\n  parameters: EncodeDeployDataParameters<abi>,\n): EncodeDeployDataReturnType {\n  const { abi, args, bytecode } = parameters as EncodeDeployDataParameters\n  if (!args || args.length === 0) return bytecode\n\n  const description = abi.find((x) => 'type' in x && x.type === 'constructor')\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\n  if (!('inputs' in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n\n  const data = encodeAbiParameters(description.inputs, args)\n  return concatHex([bytecode, data!])\n}\n"],"mappings":"AAEA,SACEA,2BAA2B,EAE3BC,iCAAiC,QAC5B,qBAAqB;AAK5B,SAAkCC,SAAS,QAAQ,mBAAmB;AACtE,SAEEC,mBAAmB,QACd,0BAA0B;AAEjC,MAAMC,QAAQ,GAAG,iCAAiC;AAgClD,OAAM,SAAUC,gBAAgBA,CAC9BC,UAA2C;EAE3C,MAAM;IAAEC,GAAG;IAAEC,IAAI;IAAEC;EAAQ,CAAE,GAAGH,UAAwC;EACxE,IAAI,CAACE,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOD,QAAQ;EAE/C,MAAME,WAAW,GAAGJ,GAAG,CAACK,IAAI,CAAEC,CAAC,IAAK,MAAM,IAAIA,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,aAAa,CAAC;EAC5E,IAAI,CAACH,WAAW,EAAE,MAAM,IAAIX,2BAA2B,CAAC;IAAEI;EAAQ,CAAE,CAAC;EACrE,IAAI,EAAE,QAAQ,IAAIO,WAAW,CAAC,EAC5B,MAAM,IAAIV,iCAAiC,CAAC;IAAEG;EAAQ,CAAE,CAAC;EAC3D,IAAI,CAACO,WAAW,CAACI,MAAM,IAAIJ,WAAW,CAACI,MAAM,CAACL,MAAM,KAAK,CAAC,EACxD,MAAM,IAAIT,iCAAiC,CAAC;IAAEG;EAAQ,CAAE,CAAC;EAE3D,MAAMY,IAAI,GAAGb,mBAAmB,CAACQ,WAAW,CAACI,MAAM,EAAEP,IAAI,CAAC;EAC1D,OAAON,SAAS,CAAC,CAACO,QAAQ,EAAEO,IAAK,CAAC,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}