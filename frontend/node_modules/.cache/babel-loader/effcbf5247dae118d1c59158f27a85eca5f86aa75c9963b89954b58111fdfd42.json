{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nconst cbor_1 = require(\"./cbor\");\nclass UR {\n  constructor(_cborPayload, _type = 'bytes') {\n    this._cborPayload = _cborPayload;\n    this._type = _type;\n    if (!utils_1.isURType(this._type)) {\n      throw new errors_1.InvalidTypeError();\n    }\n  }\n  static fromBuffer(buf) {\n    return new UR(cbor_1.cborEncode(buf));\n  }\n  static from(value, encoding) {\n    return UR.fromBuffer(Buffer.from(value, encoding));\n  }\n  decodeCBOR() {\n    return cbor_1.cborDecode(this._cborPayload);\n  }\n  get type() {\n    return this._type;\n  }\n  get cbor() {\n    return this._cborPayload;\n  }\n  equals(ur2) {\n    return this.type === ur2.type && this.cbor.equals(ur2.cbor);\n  }\n}\nexports.default = UR;","map":{"version":3,"names":["errors_1","require","utils_1","cbor_1","UR","constructor","_cborPayload","_type","isURType","InvalidTypeError","fromBuffer","buf","cborEncode","from","value","encoding","Buffer","decodeCBOR","cborDecode","type","cbor","equals","ur2","exports","default"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ngraveio\\bc-ur\\src\\ur.ts"],"sourcesContent":["import { InvalidTypeError } from \"./errors\";\nimport { isURType } from \"./utils\";\nimport { cborEncode, cborDecode } from './cbor';\n\nexport default class UR {\n  constructor(\n    private _cborPayload: Buffer,\n    private _type: string = 'bytes'\n  ) {\n    if (!isURType(this._type)) {\n      throw new InvalidTypeError();\n    }\n  }\n\n  public static fromBuffer(buf: Buffer) {\n    return new UR(cborEncode(buf));\n  }\n\n  public static from(value: any, encoding?: BufferEncoding) {\n    return UR.fromBuffer(Buffer.from(value, encoding));\n  }\n\n  public decodeCBOR(): Buffer {\n    return cborDecode(this._cborPayload);\n  }\n\n  get type() { return this._type; }\n  get cbor() { return this._cborPayload; }\n\n  public equals(ur2: UR) {\n    return this.type === ur2.type && this.cbor.equals(ur2.cbor);\n  }\n}"],"mappings":";;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,MAAA,GAAAF,OAAA;AAEA,MAAqBG,EAAE;EACrBC,YACUC,YAAoB,EACpBC,KAAA,GAAgB,OAAO;IADvB,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,KAAK,GAALA,KAAK;IAEb,IAAI,CAACL,OAAA,CAAAM,QAAQ,CAAC,IAAI,CAACD,KAAK,CAAC,EAAE;MACzB,MAAM,IAAIP,QAAA,CAAAS,gBAAgB,EAAE;;EAEhC;EAEO,OAAOC,UAAUA,CAACC,GAAW;IAClC,OAAO,IAAIP,EAAE,CAACD,MAAA,CAAAS,UAAU,CAACD,GAAG,CAAC,CAAC;EAChC;EAEO,OAAOE,IAAIA,CAACC,KAAU,EAAEC,QAAyB;IACtD,OAAOX,EAAE,CAACM,UAAU,CAACM,MAAM,CAACH,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAAC;EACpD;EAEOE,UAAUA,CAAA;IACf,OAAOd,MAAA,CAAAe,UAAU,CAAC,IAAI,CAACZ,YAAY,CAAC;EACtC;EAEA,IAAIa,IAAIA,CAAA;IAAK,OAAO,IAAI,CAACZ,KAAK;EAAE;EAChC,IAAIa,IAAIA,CAAA;IAAK,OAAO,IAAI,CAACd,YAAY;EAAE;EAEhCe,MAAMA,CAACC,GAAO;IACnB,OAAO,IAAI,CAACH,IAAI,KAAKG,GAAG,CAACH,IAAI,IAAI,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,GAAG,CAACF,IAAI,CAAC;EAC7D;;AA3BFG,OAAA,CAAAC,OAAA,GAAApB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}