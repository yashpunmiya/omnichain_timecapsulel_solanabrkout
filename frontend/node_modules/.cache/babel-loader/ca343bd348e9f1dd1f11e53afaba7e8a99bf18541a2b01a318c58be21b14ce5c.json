{"ast":null,"code":"import { AccountController } from '../controllers/AccountController.js';\nimport { BlockchainApiController } from '../controllers/BlockchainApiController.js';\nimport { ChainController } from '../controllers/ChainController.js';\nimport { ConnectionController } from '../controllers/ConnectionController.js';\n// -- Controller ---------------------------------------- //\nexport const SwapApiUtil = {\n  async getTokenList() {\n    const caipNetwork = ChainController.state.activeCaipNetwork;\n    const response = await BlockchainApiController.fetchSwapTokens({\n      chainId: caipNetwork?.caipNetworkId\n    });\n    const tokens = response?.tokens?.map(token => ({\n      ...token,\n      eip2612: false,\n      quantity: {\n        decimals: '0',\n        numeric: '0'\n      },\n      price: 0,\n      value: 0\n    })) || [];\n    return tokens;\n  },\n  async fetchGasPrice() {\n    const caipNetwork = ChainController.state.activeCaipNetwork;\n    if (!caipNetwork) {\n      return null;\n    }\n    try {\n      switch (caipNetwork.chainNamespace) {\n        case 'solana':\n          // eslint-disable-next-line no-case-declarations\n          const lamportsPerSignature = (await ConnectionController?.estimateGas({\n            chainNamespace: 'solana'\n          }))?.toString();\n          return {\n            standard: lamportsPerSignature,\n            fast: lamportsPerSignature,\n            instant: lamportsPerSignature\n          };\n        case 'eip155':\n        default:\n          return await BlockchainApiController.fetchGasPrice({\n            chainId: caipNetwork.caipNetworkId\n          });\n      }\n    } catch {\n      return null;\n    }\n  },\n  async fetchSwapAllowance({\n    tokenAddress,\n    userAddress,\n    sourceTokenAmount,\n    sourceTokenDecimals\n  }) {\n    const response = await BlockchainApiController.fetchSwapAllowance({\n      tokenAddress,\n      userAddress\n    });\n    if (response?.allowance && sourceTokenAmount && sourceTokenDecimals) {\n      const parsedValue = ConnectionController.parseUnits(sourceTokenAmount, sourceTokenDecimals) || 0;\n      const hasAllowance = BigInt(response.allowance) >= parsedValue;\n      return hasAllowance;\n    }\n    return false;\n  },\n  async getMyTokensWithBalance(forceUpdate) {\n    const address = AccountController.state.address;\n    const caipNetwork = ChainController.state.activeCaipNetwork;\n    if (!address || !caipNetwork) {\n      return [];\n    }\n    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);\n    /*\n     * The 1Inch API includes many low-quality tokens in the balance response,\n     * which appear inconsistently. This filter prevents them from being displayed.\n     */\n    const balances = response.balances.filter(balance => balance.quantity.decimals !== '0');\n    AccountController.setTokenBalance(balances, ChainController.state.activeChain);\n    return this.mapBalancesToSwapTokens(balances);\n  },\n  mapBalancesToSwapTokens(balances) {\n    return balances?.map(token => ({\n      ...token,\n      address: token?.address ? token.address : ChainController.getActiveNetworkTokenAddress(),\n      decimals: parseInt(token.quantity.decimals, 10),\n      logoUri: token.iconUrl,\n      eip2612: false\n    })) || [];\n  }\n};\n//# sourceMappingURL=SwapApiUtil.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}