{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pick = Pick;\nconst type_1 = require(\"../create/type\");\nconst discard_1 = require(\"../discard/discard\");\nconst index_1 = require(\"../intersect/index\");\nconst index_2 = require(\"../union/index\");\nconst index_3 = require(\"../object/index\");\nconst index_4 = require(\"../indexed/index\");\nconst pick_from_mapped_key_1 = require(\"./pick-from-mapped-key\");\nconst pick_from_mapped_result_1 = require(\"./pick-from-mapped-result\");\nconst symbols_1 = require(\"../symbols/symbols\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\nfunction FromIntersect(T, K) {\n  return T.map(T => PickResolve(T, K));\n}\n// prettier-ignore\nfunction FromUnion(T, K) {\n  return T.map(T => PickResolve(T, K));\n}\n// prettier-ignore\nfunction FromProperties(T, K) {\n  const Acc = {};\n  for (const K2 of K) if (K2 in T) Acc[K2] = T[K2];\n  return Acc;\n}\n// prettier-ignore\nfunction FromObject(T, K) {\n  const options = (0, discard_1.Discard)(T, [symbols_1.TransformKind, '$id', 'required', 'properties']);\n  const properties = FromProperties(T['properties'], K);\n  return (0, index_3.Object)(properties, options);\n}\n// ------------------------------------------------------------------\n// PickResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction PickResolve(T, K) {\n  return (0, kind_1.IsIntersect)(T) ? (0, index_1.Intersect)(FromIntersect(T.allOf, K)) : (0, kind_1.IsUnion)(T) ? (0, index_2.Union)(FromUnion(T.anyOf, K)) : (0, kind_1.IsObject)(T) ? FromObject(T, K) : (0, index_3.Object)({});\n}\nfunction Pick(T, K, options) {\n  // mapped\n  if ((0, kind_1.IsMappedKey)(K)) return (0, pick_from_mapped_key_1.PickFromMappedKey)(T, K, options);\n  if ((0, kind_1.IsMappedResult)(T)) return (0, pick_from_mapped_result_1.PickFromMappedResult)(T, K, options);\n  // non-mapped\n  const I = (0, kind_1.IsSchema)(K) ? (0, index_4.IndexPropertyKeys)(K) : K;\n  // special: mapping types require overridable options\n  return (0, type_1.CreateType)({\n    ...PickResolve(T, I),\n    ...options\n  });\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}