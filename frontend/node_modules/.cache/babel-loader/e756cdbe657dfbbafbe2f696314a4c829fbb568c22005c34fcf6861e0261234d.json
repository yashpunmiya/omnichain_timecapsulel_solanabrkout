{"ast":null,"code":"/**\n * @internal\n *\n * Map with a LRU (Least recently used) policy.\n * @see https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap extends Map {\n  constructor(size) {\n    super();\n    Object.defineProperty(this, \"maxSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxSize = size;\n  }\n  get(key) {\n    const value = super.get(key);\n    if (super.has(key) && value !== undefined) {\n      this.delete(key);\n      super.set(key, value);\n    }\n    return value;\n  }\n  set(key, value) {\n    super.set(key, value);\n    if (this.maxSize && this.size > this.maxSize) {\n      const firstKey = this.keys().next().value;\n      if (firstKey) this.delete(firstKey);\n    }\n    return this;\n  }\n}\n//# sourceMappingURL=lru.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}