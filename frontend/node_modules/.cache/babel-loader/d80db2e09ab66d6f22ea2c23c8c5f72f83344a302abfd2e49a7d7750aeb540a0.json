{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URRegistryDecoder = void 0;\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\nconst __1 = require(\"..\");\nconst RegistryType_1 = require(\"../RegistryType\");\nconst errors_1 = require(\"../errors\");\nclass URRegistryDecoder extends bc_ur_1.URDecoder {\n  constructor() {\n    super(...arguments);\n    this.resultRegistryType = () => {\n      const ur = this.resultUR();\n      switch (ur.type) {\n        case RegistryType_1.RegistryTypes.BYTES.getType():\n          return __1.Bytes.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getType():\n          return __1.CryptoHDKey.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_KEYPATH.getType():\n          return __1.CryptoKeypath.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO.getType():\n          return __1.CryptoCoinInfo.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getType():\n          return __1.CryptoECKey.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_OUTPUT.getType():\n          return __1.CryptoOutput.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_PSBT.getType():\n          return __1.CryptoPSBT.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT.getType():\n          return __1.CryptoAccount.fromCBOR(ur.cbor);\n        default:\n          throw new errors_1.UnknownURTypeError(`#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`);\n      }\n    };\n  }\n}\nexports.URRegistryDecoder = URRegistryDecoder;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}