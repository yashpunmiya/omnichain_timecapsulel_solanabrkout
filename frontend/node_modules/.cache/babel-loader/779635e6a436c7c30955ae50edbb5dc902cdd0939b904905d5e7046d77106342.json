{"ast":null,"code":"import { wait } from '../wait.js';\nexport function withRetry(fn, {\n  delay: delay_ = 100,\n  retryCount = 2,\n  shouldRetry = () => true\n} = {}) {\n  return new Promise((resolve, reject) => {\n    const attemptRetry = async ({\n      count = 0\n    } = {}) => {\n      const retry = async ({\n        error\n      }) => {\n        const delay = typeof delay_ === 'function' ? delay_({\n          count,\n          error\n        }) : delay_;\n        if (delay) await wait(delay);\n        attemptRetry({\n          count: count + 1\n        });\n      };\n      try {\n        const data = await fn();\n        resolve(data);\n      } catch (err) {\n        if (count < retryCount && (await shouldRetry({\n          count,\n          error: err\n        }))) return retry({\n          error: err\n        });\n        reject(err);\n      }\n    };\n    attemptRetry();\n  });\n}\n//# sourceMappingURL=withRetry.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}