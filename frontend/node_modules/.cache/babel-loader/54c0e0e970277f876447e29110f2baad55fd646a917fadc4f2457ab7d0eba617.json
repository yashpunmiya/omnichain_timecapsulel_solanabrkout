{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain(client, {\n  chain\n}) {\n  const {\n    id,\n    name,\n    nativeCurrency,\n    rpcUrls,\n    blockExplorers\n  } = chain;\n  await client.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: numberToHex(id),\n      chainName: name,\n      nativeCurrency,\n      rpcUrls: rpcUrls.default.http,\n      blockExplorerUrls: blockExplorers ? Object.values(blockExplorers).map(({\n        url\n      }) => url) : undefined\n    }]\n  }, {\n    dedupe: true,\n    retryCount: 0\n  });\n}","map":{"version":3,"names":["numberToHex","addChain","client","chain","id","name","nativeCurrency","rpcUrls","blockExplorers","request","method","params","chainId","chainName","default","http","blockExplorerUrls","Object","values","map","url","undefined","dedupe","retryCount"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\wallet\\addChain.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type AddChainParameters = {\n  /** The chain to add to the wallet. */\n  chain: Chain\n}\n\nexport type AddChainErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(client: Client<Transport, chain, account>, { chain }: AddChainParameters) {\n  const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain\n  await client.request(\n    {\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: numberToHex(id),\n          chainName: name,\n          nativeCurrency,\n          rpcUrls: rpcUrls.default.http,\n          blockExplorerUrls: blockExplorers\n            ? Object.values(blockExplorers).map(({ url }) => url)\n            : undefined,\n        },\n      ],\n    },\n    { dedupe: true, retryCount: 0 },\n  )\n}\n"],"mappings":"AAMA,SAEEA,WAAW,QACN,+BAA+B;AAYtC;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,eAAeC,QAAQA,CAG5BC,MAAyC,EAAE;EAAEC;AAAK,CAAsB;EACxE,MAAM;IAAEC,EAAE;IAAEC,IAAI;IAAEC,cAAc;IAAEC,OAAO;IAAEC;EAAc,CAAE,GAAGL,KAAK;EACnE,MAAMD,MAAM,CAACO,OAAO,CAClB;IACEC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,CACN;MACEC,OAAO,EAAEZ,WAAW,CAACI,EAAE,CAAC;MACxBS,SAAS,EAAER,IAAI;MACfC,cAAc;MACdC,OAAO,EAAEA,OAAO,CAACO,OAAO,CAACC,IAAI;MAC7BC,iBAAiB,EAAER,cAAc,GAC7BS,MAAM,CAACC,MAAM,CAACV,cAAc,CAAC,CAACW,GAAG,CAAC,CAAC;QAAEC;MAAG,CAAE,KAAKA,GAAG,CAAC,GACnDC;KACL;GAEJ,EACD;IAAEC,MAAM,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAC,CAAE,CAChC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}