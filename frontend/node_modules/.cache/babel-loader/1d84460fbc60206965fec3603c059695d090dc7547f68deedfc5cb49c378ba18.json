{"ast":null,"code":"import { toHex } from '../../../utils/encoding/toHex.js';\nimport { toYParitySignatureArray } from '../../../utils/transaction/serializeTransaction.js';\n/*\n * Serializes an EIP-7702 authorization list.\n */\nexport function serializeAuthorizationList(authorizationList) {\n  if (!authorizationList || authorizationList.length === 0) return [];\n  const serializedAuthorizationList = [];\n  for (const authorization of authorizationList) {\n    const {\n      contractAddress,\n      chainId,\n      nonce,\n      ...signature\n    } = authorization;\n    serializedAuthorizationList.push([chainId ? toHex(chainId) : '0x', contractAddress, nonce ? toHex(nonce) : '0x', ...toYParitySignatureArray({}, signature)]);\n  }\n  return serializedAuthorizationList;\n}","map":{"version":3,"names":["toHex","toYParitySignatureArray","serializeAuthorizationList","authorizationList","length","serializedAuthorizationList","authorization","contractAddress","chainId","nonce","signature","push"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\experimental\\eip7702\\utils\\serializeAuthorizationList.ts"],"sourcesContent":["import type { ErrorType } from '../../../errors/utils.js'\nimport { toHex } from '../../../utils/encoding/toHex.js'\nimport { toYParitySignatureArray } from '../../../utils/transaction/serializeTransaction.js'\nimport type {\n  AuthorizationList,\n  SerializedAuthorizationList,\n} from '../types/authorization.js'\n\nexport type SerializeAuthorizationListReturnType = SerializedAuthorizationList\n\nexport type SerializeAuthorizationListErrorType = ErrorType\n\n/*\n * Serializes an EIP-7702 authorization list.\n */\nexport function serializeAuthorizationList(\n  authorizationList?: AuthorizationList<number, true> | undefined,\n): SerializeAuthorizationListReturnType {\n  if (!authorizationList || authorizationList.length === 0) return []\n\n  const serializedAuthorizationList = []\n  for (const authorization of authorizationList) {\n    const { contractAddress, chainId, nonce, ...signature } = authorization\n    serializedAuthorizationList.push([\n      chainId ? toHex(chainId) : '0x',\n      contractAddress,\n      nonce ? toHex(nonce) : '0x',\n      ...toYParitySignatureArray({}, signature),\n    ])\n  }\n\n  return serializedAuthorizationList as {} as SerializeAuthorizationListReturnType\n}\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,kCAAkC;AACxD,SAASC,uBAAuB,QAAQ,oDAAoD;AAU5F;;;AAGA,OAAM,SAAUC,0BAA0BA,CACxCC,iBAA+D;EAE/D,IAAI,CAACA,iBAAiB,IAAIA,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAEnE,MAAMC,2BAA2B,GAAG,EAAE;EACtC,KAAK,MAAMC,aAAa,IAAIH,iBAAiB,EAAE;IAC7C,MAAM;MAAEI,eAAe;MAAEC,OAAO;MAAEC,KAAK;MAAE,GAAGC;IAAS,CAAE,GAAGJ,aAAa;IACvED,2BAA2B,CAACM,IAAI,CAAC,CAC/BH,OAAO,GAAGR,KAAK,CAACQ,OAAO,CAAC,GAAG,IAAI,EAC/BD,eAAe,EACfE,KAAK,GAAGT,KAAK,CAACS,KAAK,CAAC,GAAG,IAAI,EAC3B,GAAGR,uBAAuB,CAAC,EAAE,EAAES,SAAS,CAAC,CAC1C,CAAC;EACJ;EAEA,OAAOL,2BAAyE;AAClF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}