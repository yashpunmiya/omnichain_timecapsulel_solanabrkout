{"ast":null,"code":"import { ConnectionManager } from \"./connection-manager.js\";\nimport { DEFAULT_POPUP_WIDTH_PX, DEFAULT_POPUP_HEIGHT_PX } from \"./core/constants.js\";\nimport { Platform } from \"./core/types.js\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nexport const usePopupConnection = ({\n  enabled = true,\n  platform = Platform.UNKNOWN,\n  widthPx = DEFAULT_POPUP_WIDTH_PX,\n  heightPx = DEFAULT_POPUP_HEIGHT_PX\n} = {}) => {\n  const [exportedConnection, setExportedConnection] = useState(undefined);\n  const connectionManagerRef = useRef(new ConnectionManager(platform).onConnectionUpdated(connection => {\n    setExportedConnection(connection === null || connection === void 0 ? void 0 : connection.export());\n  }));\n  const open = useCallback((url, nonce) => {\n    connectionManagerRef.current.open({\n      heightPx,\n      nonce,\n      url,\n      widthPx\n    });\n  }, [connectionManagerRef, widthPx, heightPx]);\n  const close = useCallback(() => {\n    connectionManagerRef.current.close();\n  }, [connectionManagerRef]);\n  useEffect(() => {\n    if (enabled) {\n      connectionManagerRef.current.initialize();\n    } else {\n      connectionManagerRef.current.tearDown();\n    }\n  }, [connectionManagerRef]);\n  return {\n    close,\n    connection: exportedConnection,\n    open\n  };\n};\n//# sourceMappingURL=use-popup-connection.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}