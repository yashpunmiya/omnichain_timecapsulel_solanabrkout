{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { WalletNotConnectedError } from './errors.js';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\nexport var WalletReadyState;\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\nexport class BaseWalletAdapter extends EventEmitter {\n  get connected() {\n    return !!this.publicKey;\n  }\n  async autoConnect() {\n    await this.connect();\n  }\n  async prepareTransaction(transaction, connection, options = {}) {\n    const publicKey = this.publicKey;\n    if (!publicKey) throw new WalletNotConnectedError();\n    transaction.feePayer = transaction.feePayer || publicKey;\n    transaction.recentBlockhash = transaction.recentBlockhash || (await connection.getLatestBlockhash({\n      commitment: options.preflightCommitment,\n      minContextSlot: options.minContextSlot\n    })).blockhash;\n    return transaction;\n  }\n}\nexport function scopePollingDetectionStrategy(detect) {\n  // Early return when server-side rendering\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n  const disposers = [];\n  function detectAndDispose() {\n    const detected = detect();\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  }\n  // Strategy #1: Try detecting every second.\n  const interval =\n  // TODO: #334 Replace with idle callback strategy.\n  setInterval(detectAndDispose, 1000);\n  disposers.push(() => clearInterval(interval));\n  // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n  if (\n  // Implies that `DOMContentLoaded` has not yet fired.\n  document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => document.removeEventListener('DOMContentLoaded', detectAndDispose));\n  }\n  // Strategy #3: Detect after the `window` has fully loaded.\n  if (\n  // If the `complete` state has been reached, we're too late.\n  document.readyState !== 'complete') {\n    window.addEventListener('load', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => window.removeEventListener('load', detectAndDispose));\n  }\n  // Strategy #4: Detect synchronously, now.\n  detectAndDispose();\n}\n/**\n * Users on iOS can be redirected into a wallet's in-app browser automatically,\n * if that wallet has a universal link configured to do so\n * But should not be redirected from within a webview, eg. if they're already\n * inside a wallet's browser\n * This function can be used to identify users who are on iOS and can be redirected\n *\n * @returns true if the user can be redirected\n */\nexport function isIosAndRedirectable() {\n  // SSR: return false\n  if (!navigator) return false;\n  const userAgent = navigator.userAgent.toLowerCase();\n  // if on iOS the user agent will contain either iPhone or iPad\n  // caveat: if requesting desktop site then this won't work\n  const isIos = userAgent.includes('iphone') || userAgent.includes('ipad');\n  // if in a webview then it will not include Safari\n  // note that other iOS browsers also include Safari\n  // so we will redirect only if Safari is also included\n  const isSafari = userAgent.includes('safari');\n  return isIos && isSafari;\n}\n//# sourceMappingURL=adapter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}