{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getCallError } from '../../utils/errors/getCallError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\n/**\n * Estimates the gas and fees per gas necessary to complete a transaction without submitting it to the network.\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns A gas estimate and fees per gas (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { linea } from 'viem/chains'\n * import { estimateGas } from 'viem/linea'\n *\n * const client = createPublicClient({\n *   chain: linea,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 0n,\n * })\n */\nexport async function estimateGas(client, args) {\n  const {\n    account: account_ = client.account\n  } = args;\n  if (!account_) throw new AccountNotFoundError();\n  const account = parseAccount(account_);\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = args;\n    const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    assertRequest(args);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format: chainFormat\n      }),\n      from: account?.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    const {\n      baseFeePerGas,\n      gasLimit,\n      priorityFeePerGas\n    } = await client.request({\n      method: 'linea_estimateGas',\n      params: block ? [request, block] : [request]\n    });\n    return {\n      baseFeePerGas: BigInt(baseFeePerGas),\n      gasLimit: BigInt(gasLimit),\n      priorityFeePerGas: BigInt(priorityFeePerGas)\n    };\n  } catch (err) {\n    throw getCallError(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","numberToHex","getCallError","extract","formatTransactionRequest","assertRequest","estimateGas","client","args","account","account_","accessList","blockNumber","blockTag","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","blockNumberHex","undefined","block","chainFormat","chain","formatters","transactionRequest","format","request","from","address","baseFeePerGas","gasLimit","priorityFeePerGas","method","params","BigInt","err"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\linea\\actions\\estimateGas.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { EstimateGasParameters as EstimateGasParameters_base } from '../../actions/public/estimateGas.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { Filter } from '../../types/utils.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getCallError } from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport type { LineaRpcSchema } from '../types/rpc.js'\n\nexport type EstimateGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = EstimateGasParameters_base<chain> & GetAccountParameter<account>\n\nexport type EstimateGasReturnType = {\n  gasLimit: bigint\n  baseFeePerGas: bigint\n  priorityFeePerGas: bigint\n}\n\n/**\n * Estimates the gas and fees per gas necessary to complete a transaction without submitting it to the network.\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns A gas estimate and fees per gas (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { linea } from 'viem/chains'\n * import { estimateGas } from 'viem/linea'\n *\n * const client = createPublicClient({\n *   chain: linea,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 0n,\n * })\n */\nexport async function estimateGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: EstimateGasParameters<chain>,\n): Promise<EstimateGasReturnType> {\n  const { account: account_ = client.account } = args\n\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = args\n\n    const blockNumberHex =\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    type LineaEstimateGasSchema = Filter<\n      LineaRpcSchema,\n      { Method: 'linea_estimateGas' }\n    >[0]\n    const { baseFeePerGas, gasLimit, priorityFeePerGas } =\n      await client.request<LineaEstimateGasSchema>({\n        method: 'linea_estimateGas',\n        params: block ? [request, block] : [request],\n      })\n    return {\n      baseFeePerGas: BigInt(baseFeePerGas),\n      gasLimit: BigInt(gasLimit),\n      priorityFeePerGas: BigInt(priorityFeePerGas),\n    }\n  } catch (err) {\n    throw getCallError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,sCAAsC;AAInE,SAASC,oBAAoB,QAAQ,yBAAyB;AAM9D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,YAAY,QAAQ,oCAAoC;AACjE,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAASC,wBAAwB,QAAQ,8CAA8C;AACvF,SAEEC,aAAa,QACR,0CAA0C;AAcjD;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeC,WAAWA,CAI/BC,MAAyC,EACzCC,IAAkC;EAElC,MAAM;IAAEC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE;EAAO,CAAE,GAAGD,IAAI;EAEnD,IAAI,CAACE,QAAQ,EAAE,MAAM,IAAIV,oBAAoB,EAAE;EAC/C,MAAMS,OAAO,GAAGV,YAAY,CAACW,QAAQ,CAAC;EAEtC,IAAI;IACF,MAAM;MACJC,UAAU;MACVC,WAAW;MACXC,QAAQ;MACRC,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC,KAAK;MACL,GAAGC;IAAI,CACR,GAAGd,IAAI;IAER,MAAMe,cAAc,GAClB,OAAOX,WAAW,KAAK,QAAQ,GAAGX,WAAW,CAACW,WAAW,CAAC,GAAGY,SAAS;IACxE,MAAMC,KAAK,GAAGF,cAAc,IAAIV,QAAQ;IAExCR,aAAa,CAACG,IAA+B,CAAC;IAE9C,MAAMkB,WAAW,GAAGnB,MAAM,CAACoB,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;IACxE,MAAMA,MAAM,GAAGJ,WAAW,IAAItB,wBAAwB;IAEtD,MAAM2B,OAAO,GAAGD,MAAM,CAAC;MACrB;MACA,GAAG3B,OAAO,CAACmB,IAAI,EAAE;QAAEQ,MAAM,EAAEJ;MAAW,CAAE,CAAC;MACzCM,IAAI,EAAEvB,OAAO,EAAEwB,OAAO;MACtBtB,UAAU;MACVG,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC;KACqB,CAAC;IAMxB,MAAM;MAAEa,aAAa;MAAEC,QAAQ;MAAEC;IAAiB,CAAE,GAClD,MAAM7B,MAAM,CAACwB,OAAO,CAAyB;MAC3CM,MAAM,EAAE,mBAAmB;MAC3BC,MAAM,EAAEb,KAAK,GAAG,CAACM,OAAO,EAAEN,KAAK,CAAC,GAAG,CAACM,OAAO;KAC5C,CAAC;IACJ,OAAO;MACLG,aAAa,EAAEK,MAAM,CAACL,aAAa,CAAC;MACpCC,QAAQ,EAAEI,MAAM,CAACJ,QAAQ,CAAC;MAC1BC,iBAAiB,EAAEG,MAAM,CAACH,iBAAiB;KAC5C;EACH,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAMtC,YAAY,CAACsC,GAAgB,EAAE;MACnC,GAAGhC,IAAI;MACPC,OAAO;MACPkB,KAAK,EAAEpB,MAAM,CAACoB;KACf,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}