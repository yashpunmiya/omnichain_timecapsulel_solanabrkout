{"ast":null,"code":"import { Eip712DomainNotFoundError } from '../../errors/eip712.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract } from './readContract.js';\n/**\n * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\n *\n * @param client - A {@link Client} instance.\n * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\n * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\n *\n * @example\n * ```ts\n * import { createPublicClient, http, getEip712Domain } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const domain = await getEip712Domain(client, {\n *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * })\n * // {\n * //   domain: {\n * //     name: 'ExampleContract',\n * //     version: '1',\n * //     chainId: 1,\n * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * //   },\n * //   fields: '0x0f',\n * //   extensions: [],\n * // }\n * ```\n */\nexport async function getEip712Domain(client, parameters) {\n  const {\n    address,\n    factory,\n    factoryData\n  } = parameters;\n  try {\n    const [fields, name, version, chainId, verifyingContract, salt, extensions] = await getAction(client, readContract, 'readContract')({\n      abi,\n      address,\n      functionName: 'eip712Domain',\n      factory,\n      factoryData\n    });\n    return {\n      domain: {\n        name,\n        version,\n        chainId: Number(chainId),\n        verifyingContract,\n        salt\n      },\n      extensions,\n      fields\n    };\n  } catch (e) {\n    const error = e;\n    if (error.name === 'ContractFunctionExecutionError' && error.cause.name === 'ContractFunctionZeroDataError') {\n      throw new Eip712DomainNotFoundError({\n        address\n      });\n    }\n    throw error;\n  }\n}\nconst abi = [{\n  inputs: [],\n  name: 'eip712Domain',\n  outputs: [{\n    name: 'fields',\n    type: 'bytes1'\n  }, {\n    name: 'name',\n    type: 'string'\n  }, {\n    name: 'version',\n    type: 'string'\n  }, {\n    name: 'chainId',\n    type: 'uint256'\n  }, {\n    name: 'verifyingContract',\n    type: 'address'\n  }, {\n    name: 'salt',\n    type: 'bytes32'\n  }, {\n    name: 'extensions',\n    type: 'uint256[]'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}];","map":{"version":3,"names":["Eip712DomainNotFoundError","getAction","readContract","getEip712Domain","client","parameters","address","factory","factoryData","fields","name","version","chainId","verifyingContract","salt","extensions","abi","functionName","domain","Number","e","error","cause","inputs","outputs","type","stateMutability"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\getEip712Domain.ts"],"sourcesContent":["import type { Address, TypedDataDomain } from 'abitype'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  Eip712DomainNotFoundError,\n  type Eip712DomainNotFoundErrorType,\n} from '../../errors/eip712.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequiredBy } from '../../types/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from './readContract.js'\n\nexport type GetEip712DomainParameters = {\n  address: Address\n} & Pick<ReadContractParameters, 'factory' | 'factoryData'>\n\nexport type GetEip712DomainReturnType = {\n  domain: RequiredBy<\n    TypedDataDomain,\n    'chainId' | 'name' | 'verifyingContract' | 'salt' | 'version'\n  >\n  fields: Hex\n  extensions: readonly bigint[]\n}\n\nexport type GetEip712DomainErrorType =\n  | Eip712DomainNotFoundErrorType\n  | ReadContractErrorType\n  | ErrorType\n\n/**\n * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\n *\n * @param client - A {@link Client} instance.\n * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\n * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\n *\n * @example\n * ```ts\n * import { createPublicClient, http, getEip712Domain } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const domain = await getEip712Domain(client, {\n *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * })\n * // {\n * //   domain: {\n * //     name: 'ExampleContract',\n * //     version: '1',\n * //     chainId: 1,\n * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * //   },\n * //   fields: '0x0f',\n * //   extensions: [],\n * // }\n * ```\n */\nexport async function getEip712Domain(\n  client: Client<Transport>,\n  parameters: GetEip712DomainParameters,\n): Promise<GetEip712DomainReturnType> {\n  const { address, factory, factoryData } = parameters\n\n  try {\n    const [\n      fields,\n      name,\n      version,\n      chainId,\n      verifyingContract,\n      salt,\n      extensions,\n    ] = await getAction(\n      client,\n      readContract,\n      'readContract',\n    )({\n      abi,\n      address,\n      functionName: 'eip712Domain',\n      factory,\n      factoryData,\n    })\n\n    return {\n      domain: {\n        name,\n        version,\n        chainId: Number(chainId),\n        verifyingContract,\n        salt,\n      },\n      extensions,\n      fields,\n    }\n  } catch (e) {\n    const error = e as ReadContractErrorType\n    if (\n      error.name === 'ContractFunctionExecutionError' &&\n      error.cause.name === 'ContractFunctionZeroDataError'\n    ) {\n      throw new Eip712DomainNotFoundError({ address })\n    }\n    throw error\n  }\n}\n\nconst abi = [\n  {\n    inputs: [],\n    name: 'eip712Domain',\n    outputs: [\n      { name: 'fields', type: 'bytes1' },\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n      { name: 'salt', type: 'bytes32' },\n      { name: 'extensions', type: 'uint256[]' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const\n"],"mappings":"AAGA,SACEA,yBAAyB,QAEpB,wBAAwB;AAI/B,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAGEC,YAAY,QACP,mBAAmB;AAoB1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,eAAeC,eAAeA,CACnCC,MAAyB,EACzBC,UAAqC;EAErC,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAW,CAAE,GAAGH,UAAU;EAEpD,IAAI;IACF,MAAM,CACJI,MAAM,EACNC,IAAI,EACJC,OAAO,EACPC,OAAO,EACPC,iBAAiB,EACjBC,IAAI,EACJC,UAAU,CACX,GAAG,MAAMd,SAAS,CACjBG,MAAM,EACNF,YAAY,EACZ,cAAc,CACf,CAAC;MACAc,GAAG;MACHV,OAAO;MACPW,YAAY,EAAE,cAAc;MAC5BV,OAAO;MACPC;KACD,CAAC;IAEF,OAAO;MACLU,MAAM,EAAE;QACNR,IAAI;QACJC,OAAO;QACPC,OAAO,EAAEO,MAAM,CAACP,OAAO,CAAC;QACxBC,iBAAiB;QACjBC;OACD;MACDC,UAAU;MACVN;KACD;EACH,CAAC,CAAC,OAAOW,CAAC,EAAE;IACV,MAAMC,KAAK,GAAGD,CAA0B;IACxC,IACEC,KAAK,CAACX,IAAI,KAAK,gCAAgC,IAC/CW,KAAK,CAACC,KAAK,CAACZ,IAAI,KAAK,+BAA+B,EACpD;MACA,MAAM,IAAIV,yBAAyB,CAAC;QAAEM;MAAO,CAAE,CAAC;IAClD;IACA,MAAMe,KAAK;EACb;AACF;AAEA,MAAML,GAAG,GAAG,CACV;EACEO,MAAM,EAAE,EAAE;EACVb,IAAI,EAAE,cAAc;EACpBc,OAAO,EAAE,CACP;IAAEd,IAAI,EAAE,QAAQ;IAAEe,IAAI,EAAE;EAAQ,CAAE,EAClC;IAAEf,IAAI,EAAE,MAAM;IAAEe,IAAI,EAAE;EAAQ,CAAE,EAChC;IAAEf,IAAI,EAAE,SAAS;IAAEe,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAEf,IAAI,EAAE,SAAS;IAAEe,IAAI,EAAE;EAAS,CAAE,EACpC;IAAEf,IAAI,EAAE,mBAAmB;IAAEe,IAAI,EAAE;EAAS,CAAE,EAC9C;IAAEf,IAAI,EAAE,MAAM;IAAEe,IAAI,EAAE;EAAS,CAAE,EACjC;IAAEf,IAAI,EAAE,YAAY;IAAEe,IAAI,EAAE;EAAW,CAAE,CAC1C;EACDC,eAAe,EAAE,MAAM;EACvBD,IAAI,EAAE;CACP,CACO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}