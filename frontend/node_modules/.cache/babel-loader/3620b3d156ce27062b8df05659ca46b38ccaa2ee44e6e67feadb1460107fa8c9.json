{"ast":null,"code":"import UniversalProvider from '@walletconnect/universal-provider';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { OptionsController, SIWXUtil } from '@reown/appkit-controllers';\nimport { PresetsUtil } from '@reown/appkit-utils';\nimport { WcHelpersUtil } from '../utils/index.js';\nexport class WalletConnectConnector {\n  constructor({\n    provider,\n    caipNetworks,\n    namespace\n  }) {\n    this.id = ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT;\n    this.name = PresetsUtil.ConnectorNamesMap[ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT];\n    this.type = 'WALLET_CONNECT';\n    this.imageId = PresetsUtil.ConnectorImageIds[ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT];\n    this.caipNetworks = caipNetworks;\n    this.provider = provider;\n    this.chain = namespace;\n  }\n  get chains() {\n    return this.caipNetworks;\n  }\n  async connectWalletConnect() {\n    const isAuthenticated = await this.authenticate();\n    if (!isAuthenticated) {\n      const universalProviderConfigOverride = OptionsController.state.universalProviderConfigOverride;\n      const namespaces = WcHelpersUtil.createNamespaces(this.caipNetworks, universalProviderConfigOverride);\n      await this.provider.connect({\n        optionalNamespaces: namespaces\n      });\n    }\n    return {\n      clientId: await this.provider.client.core.crypto.getClientId(),\n      session: this.provider.session\n    };\n  }\n  async disconnect() {\n    await this.provider.disconnect();\n  }\n  async authenticate() {\n    const chains = this.chains.map(network => network.caipNetworkId);\n    return SIWXUtil.universalProviderAuthenticate({\n      universalProvider: this.provider,\n      chains,\n      methods: OPTIONAL_METHODS\n    });\n  }\n}\nconst OPTIONAL_METHODS = ['eth_accounts', 'eth_requestAccounts', 'eth_sendRawTransaction', 'eth_sign', 'eth_signTransaction', 'eth_signTypedData', 'eth_signTypedData_v3', 'eth_signTypedData_v4', 'eth_sendTransaction', 'personal_sign', 'wallet_switchEthereumChain', 'wallet_addEthereumChain', 'wallet_getPermissions', 'wallet_requestPermissions', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode',\n// EIP-5792\n'wallet_getCallsStatus', 'wallet_sendCalls', 'wallet_getCapabilities',\n// EIP-7715\n'wallet_grantPermissions', 'wallet_revokePermissions',\n//EIP-7811\n'wallet_getAssets'];\n//# sourceMappingURL=WalletConnectConnector.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}