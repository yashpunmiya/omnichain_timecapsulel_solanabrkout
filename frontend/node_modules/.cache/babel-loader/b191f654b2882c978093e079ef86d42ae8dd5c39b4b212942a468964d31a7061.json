{"ast":null,"code":"import { SocketClosedError, TimeoutError } from '../../errors/request.js';\nimport { createBatchScheduler } from '../promise/createBatchScheduler.js';\nimport { withTimeout } from '../promise/withTimeout.js';\nimport { idCache } from './id.js';\nexport const socketClientCache = /*#__PURE__*/new Map();\nexport async function getSocketRpcClient(parameters) {\n  const {\n    getSocket,\n    keepAlive = true,\n    key = 'socket',\n    reconnect = true,\n    url\n  } = parameters;\n  const {\n    interval: keepAliveInterval = 30_000\n  } = typeof keepAlive === 'object' ? keepAlive : {};\n  const {\n    attempts = 5,\n    delay = 2_000\n  } = typeof reconnect === 'object' ? reconnect : {};\n  let socketClient = socketClientCache.get(`${key}:${url}`);\n  // If the socket already exists, return it.\n  if (socketClient) return socketClient;\n  let reconnectCount = 0;\n  const {\n    schedule\n  } = createBatchScheduler({\n    id: `${key}:${url}`,\n    fn: async () => {\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map();\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map();\n      let error;\n      let socket;\n      let keepAliveTimer;\n      // Set up socket implementation.\n      async function setup() {\n        const result = await getSocket({\n          onClose() {\n            // Notify all requests and subscriptions of the closure error.\n            for (const request of requests.values()) request.onError?.(new SocketClosedError({\n              url\n            }));\n            for (const subscription of subscriptions.values()) subscription.onError?.(new SocketClosedError({\n              url\n            }));\n            // Clear all requests and subscriptions.\n            requests.clear();\n            subscriptions.clear();\n            // Attempt to reconnect.\n            if (reconnect && reconnectCount < attempts) setTimeout(async () => {\n              reconnectCount++;\n              await setup().catch(console.error);\n            }, delay);\n          },\n          onError(error_) {\n            error = error_;\n            // Notify all requests and subscriptions of the error.\n            for (const request of requests.values()) request.onError?.(error);\n            for (const subscription of subscriptions.values()) subscription.onError?.(error);\n            // Clear all requests and subscriptions.\n            requests.clear();\n            subscriptions.clear();\n            // Make sure socket is definitely closed.\n            socketClient?.close();\n            // Attempt to reconnect.\n            if (reconnect && reconnectCount < attempts) setTimeout(async () => {\n              reconnectCount++;\n              await setup().catch(console.error);\n            }, delay);\n          },\n          onOpen() {\n            error = undefined;\n            reconnectCount = 0;\n          },\n          onResponse(data) {\n            const isSubscription = data.method === 'eth_subscription';\n            const id = isSubscription ? data.params.subscription : data.id;\n            const cache = isSubscription ? subscriptions : requests;\n            const callback = cache.get(id);\n            if (callback) callback.onResponse(data);\n            if (!isSubscription) cache.delete(id);\n          }\n        });\n        socket = result;\n        if (keepAlive) {\n          if (keepAliveTimer) clearInterval(keepAliveTimer);\n          keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval);\n        }\n        return result;\n      }\n      await setup();\n      error = undefined;\n      // Create a new socket instance.\n      socketClient = {\n        close() {\n          keepAliveTimer && clearInterval(keepAliveTimer);\n          socket.close();\n          socketClientCache.delete(`${key}:${url}`);\n        },\n        get socket() {\n          return socket;\n        },\n        request({\n          body,\n          onError,\n          onResponse\n        }) {\n          if (error && onError) onError(error);\n          const id = body.id ?? idCache.take();\n          const callback = response => {\n            if (typeof response.id === 'number' && id !== response.id) return;\n            // If we are subscribing to a topic, we want to set up a listener for incoming\n            // messages.\n            if (body.method === 'eth_subscribe' && typeof response.result === 'string') subscriptions.set(response.result, {\n              onResponse: callback,\n              onError\n            });\n            // If we are unsubscribing from a topic, we want to remove the listener.\n            if (body.method === 'eth_unsubscribe') subscriptions.delete(body.params?.[0]);\n            onResponse(response);\n          };\n          requests.set(id, {\n            onResponse: callback,\n            onError\n          });\n          try {\n            socket.request({\n              body: {\n                jsonrpc: '2.0',\n                id,\n                ...body\n              }\n            });\n          } catch (error) {\n            onError?.(error);\n          }\n        },\n        requestAsync({\n          body,\n          timeout = 10_000\n        }) {\n          return withTimeout(() => new Promise((onResponse, onError) => this.request({\n            body,\n            onError,\n            onResponse\n          })), {\n            errorInstance: new TimeoutError({\n              body,\n              url\n            }),\n            timeout\n          });\n        },\n        requests,\n        subscriptions,\n        url\n      };\n      socketClientCache.set(`${key}:${url}`, socketClient);\n      return [socketClient];\n    }\n  });\n  const [_, [socketClient_]] = await schedule();\n  return socketClient_;\n}","map":{"version":3,"names":["SocketClosedError","TimeoutError","createBatchScheduler","withTimeout","idCache","socketClientCache","Map","getSocketRpcClient","parameters","getSocket","keepAlive","key","reconnect","url","interval","keepAliveInterval","attempts","delay","socketClient","get","reconnectCount","schedule","id","fn","requests","subscriptions","error","socket","keepAliveTimer","setup","result","onClose","request","values","onError","subscription","clear","setTimeout","catch","console","error_","close","onOpen","undefined","onResponse","data","isSubscription","method","params","cache","callback","delete","clearInterval","setInterval","ping","body","take","response","set","jsonrpc","requestAsync","timeout","Promise","errorInstance","_","socketClient_"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\rpc\\socket.ts"],"sourcesContent":["import { SocketClosedError, TimeoutError } from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from '../promise/createBatchScheduler.js'\nimport { withTimeout } from '../promise/withTimeout.js'\nimport { idCache } from './id.js'\n\ntype Id = string | number\ntype CallbackFn = {\n  onResponse: (message: any) => void\n  onError?: ((error?: Error | Event | undefined) => void) | undefined\n}\ntype CallbackMap = Map<Id, CallbackFn>\n\nexport type GetSocketParameters = {\n  onClose: () => void\n  onError: (error?: Error | Event | undefined) => void\n  onOpen: () => void\n  onResponse: (data: RpcResponse) => void\n}\n\nexport type Socket<socket extends {}> = socket & {\n  close(): void\n  ping?: (() => void) | undefined\n  request(params: { body: RpcRequest }): void\n}\n\nexport type SocketRpcClient<socket extends {}> = {\n  close(): void\n  socket: Socket<socket>\n  request(params: {\n    body: RpcRequest\n    onError?: ((error?: Error | Event | undefined) => void) | undefined\n    onResponse: (message: RpcResponse) => void\n  }): void\n  requestAsync(params: {\n    body: RpcRequest\n    timeout?: number | undefined\n  }): Promise<RpcResponse>\n  requests: CallbackMap\n  subscriptions: CallbackMap\n  url: string\n}\n\nexport type GetSocketRpcClientParameters<socket extends {} = {}> = {\n  getSocket(params: GetSocketParameters): Promise<Socket<socket>>\n  /**\n   * Whether or not to send keep-alive messages.\n   * @default true\n   */\n  keepAlive?:\n    | boolean\n    | {\n        /**\n         * The interval (in ms) to send keep-alive messages.\n         * @default 30_000\n         */\n        interval?: number | undefined\n      }\n    | undefined\n  key?: string\n  /**\n   * Whether or not to attempt to reconnect on socket failure or closure.\n   * @default true\n   */\n  reconnect?:\n    | boolean\n    | {\n        /**\n         * The maximum number of reconnection attempts.\n         * @default 5\n         */\n        attempts?: number | undefined\n        /**\n         * The delay (in ms) between reconnection attempts.\n         * @default 2_000\n         */\n        delay?: number | undefined\n      }\n    | undefined\n  url: string\n}\n\nexport type GetSocketRpcClientErrorType =\n  | CreateBatchSchedulerErrorType\n  | ErrorType\n\nexport const socketClientCache = /*#__PURE__*/ new Map<\n  string,\n  SocketRpcClient<Socket<{}>>\n>()\n\nexport async function getSocketRpcClient<socket extends {}>(\n  parameters: GetSocketRpcClientParameters<socket>,\n): Promise<SocketRpcClient<socket>> {\n  const {\n    getSocket,\n    keepAlive = true,\n    key = 'socket',\n    reconnect = true,\n    url,\n  } = parameters\n  const { interval: keepAliveInterval = 30_000 } =\n    typeof keepAlive === 'object' ? keepAlive : {}\n  const { attempts = 5, delay = 2_000 } =\n    typeof reconnect === 'object' ? reconnect : {}\n\n  let socketClient = socketClientCache.get(`${key}:${url}`)\n\n  // If the socket already exists, return it.\n  if (socketClient) return socketClient as {} as SocketRpcClient<socket>\n\n  let reconnectCount = 0\n  const { schedule } = createBatchScheduler<\n    undefined,\n    [SocketRpcClient<socket>]\n  >({\n    id: `${key}:${url}`,\n    fn: async () => {\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map<Id, CallbackFn>()\n\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map<Id, CallbackFn>()\n\n      let error: Error | Event | undefined\n      let socket: Socket<{}>\n      let keepAliveTimer: ReturnType<typeof setInterval> | undefined\n\n      // Set up socket implementation.\n      async function setup() {\n        const result = await getSocket({\n          onClose() {\n            // Notify all requests and subscriptions of the closure error.\n            for (const request of requests.values())\n              request.onError?.(new SocketClosedError({ url }))\n            for (const subscription of subscriptions.values())\n              subscription.onError?.(new SocketClosedError({ url }))\n\n            // Clear all requests and subscriptions.\n            requests.clear()\n            subscriptions.clear()\n\n            // Attempt to reconnect.\n            if (reconnect && reconnectCount < attempts)\n              setTimeout(async () => {\n                reconnectCount++\n                await setup().catch(console.error)\n              }, delay)\n          },\n          onError(error_) {\n            error = error_\n\n            // Notify all requests and subscriptions of the error.\n            for (const request of requests.values()) request.onError?.(error)\n            for (const subscription of subscriptions.values())\n              subscription.onError?.(error)\n\n            // Clear all requests and subscriptions.\n            requests.clear()\n            subscriptions.clear()\n\n            // Make sure socket is definitely closed.\n            socketClient?.close()\n\n            // Attempt to reconnect.\n            if (reconnect && reconnectCount < attempts)\n              setTimeout(async () => {\n                reconnectCount++\n                await setup().catch(console.error)\n              }, delay)\n          },\n          onOpen() {\n            error = undefined\n            reconnectCount = 0\n          },\n          onResponse(data) {\n            const isSubscription = data.method === 'eth_subscription'\n            const id = isSubscription ? data.params.subscription : data.id\n            const cache = isSubscription ? subscriptions : requests\n            const callback = cache.get(id)\n            if (callback) callback.onResponse(data)\n            if (!isSubscription) cache.delete(id)\n          },\n        })\n\n        socket = result\n\n        if (keepAlive) {\n          if (keepAliveTimer) clearInterval(keepAliveTimer)\n          keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval)\n        }\n\n        return result\n      }\n      await setup()\n      error = undefined\n\n      // Create a new socket instance.\n      socketClient = {\n        close() {\n          keepAliveTimer && clearInterval(keepAliveTimer)\n          socket.close()\n          socketClientCache.delete(`${key}:${url}`)\n        },\n        get socket() {\n          return socket\n        },\n        request({ body, onError, onResponse }) {\n          if (error && onError) onError(error)\n\n          const id = body.id ?? idCache.take()\n\n          const callback = (response: RpcResponse) => {\n            if (typeof response.id === 'number' && id !== response.id) return\n\n            // If we are subscribing to a topic, we want to set up a listener for incoming\n            // messages.\n            if (\n              body.method === 'eth_subscribe' &&\n              typeof response.result === 'string'\n            )\n              subscriptions.set(response.result, {\n                onResponse: callback,\n                onError,\n              })\n\n            // If we are unsubscribing from a topic, we want to remove the listener.\n            if (body.method === 'eth_unsubscribe')\n              subscriptions.delete(body.params?.[0])\n\n            onResponse(response)\n          }\n\n          requests.set(id, { onResponse: callback, onError })\n          try {\n            socket.request({\n              body: {\n                jsonrpc: '2.0',\n                id,\n                ...body,\n              },\n            })\n          } catch (error) {\n            onError?.(error as Error)\n          }\n        },\n        requestAsync({ body, timeout = 10_000 }) {\n          return withTimeout(\n            () =>\n              new Promise<RpcResponse>((onResponse, onError) =>\n                this.request({\n                  body,\n                  onError,\n                  onResponse,\n                }),\n              ),\n            {\n              errorInstance: new TimeoutError({ body, url }),\n              timeout,\n            },\n          )\n        },\n        requests,\n        subscriptions,\n        url,\n      }\n      socketClientCache.set(`${key}:${url}`, socketClient)\n\n      return [socketClient as {} as SocketRpcClient<socket>]\n    },\n  })\n\n  const [_, [socketClient_]] = await schedule()\n  return socketClient_\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}