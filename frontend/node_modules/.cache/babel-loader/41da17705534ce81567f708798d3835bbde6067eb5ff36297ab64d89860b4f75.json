{"ast":null,"code":"import { universalResolverReverseAbi } from '../../constants/abis.js';\nimport { getChainContractAddress } from '../../utils/chain/getChainContractAddress.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract } from '../public/readContract.js';\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName(client, {\n  address,\n  blockNumber,\n  blockTag,\n  gatewayUrls,\n  strict,\n  universalResolverAddress: universalResolverAddress_\n}) {\n  let universalResolverAddress = universalResolverAddress_;\n  if (!universalResolverAddress) {\n    if (!client.chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver'\n    });\n  }\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag\n    };\n    const readContractAction = getAction(client, readContract, 'readContract');\n    const [name, resolvedAddress] = gatewayUrls ? await readContractAction({\n      ...readContractParameters,\n      args: [...readContractParameters.args, gatewayUrls]\n    }) : await readContractAction(readContractParameters);\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null;\n    return name;\n  } catch (err) {\n    if (strict) throw err;\n    if (isNullUniversalResolverError(err, 'reverse')) return null;\n    throw err;\n  }\n}","map":{"version":3,"names":["universalResolverReverseAbi","getChainContractAddress","toHex","isNullUniversalResolverError","packetToBytes","getAction","readContract","getEnsName","client","address","blockNumber","blockTag","gatewayUrls","strict","universalResolverAddress","universalResolverAddress_","chain","Error","contract","reverseNode","toLowerCase","substring","readContractParameters","abi","functionName","args","readContractAction","name","resolvedAddress","err"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\ens\\getEnsName.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsNameParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Address to get ENS name for. */\n    address: Address\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsNameReturnType = string | null\n\nexport type GetEnsNameErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockNumber,\n    blockTag,\n    gatewayUrls,\n    strict,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsNameParameters,\n): Promise<GetEnsNameReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const [name, resolvedAddress] = gatewayUrls\n      ? await readContractAction({\n          ...readContractParameters,\n          args: [...readContractParameters.args, gatewayUrls],\n        })\n      : await readContractAction(readContractParameters)\n\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null\n    return name\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err, 'reverse')) return null\n    throw err\n  }\n}\n"],"mappings":"AAIA,SAASA,2BAA2B,QAAQ,yBAAyB;AAIrE,SAEEC,uBAAuB,QAClB,8CAA8C;AACrD,SAA8BC,KAAK,QAAQ,+BAA+B;AAC1E,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAEEC,aAAa,QACR,kCAAkC;AACzC,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAGEC,YAAY,QACP,2BAA2B;AAwBlC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,eAAeC,UAAUA,CAC9BC,MAAgC,EAChC;EACEC,OAAO;EACPC,WAAW;EACXC,QAAQ;EACRC,WAAW;EACXC,MAAM;EACNC,wBAAwB,EAAEC;AAAyB,CAC9B;EAEvB,IAAID,wBAAwB,GAAGC,yBAAyB;EACxD,IAAI,CAACD,wBAAwB,EAAE;IAC7B,IAAI,CAACN,MAAM,CAACQ,KAAK,EACf,MAAM,IAAIC,KAAK,CACb,oEAAoE,CACrE;IAEHH,wBAAwB,GAAGb,uBAAuB,CAAC;MACjDS,WAAW;MACXM,KAAK,EAAER,MAAM,CAACQ,KAAK;MACnBE,QAAQ,EAAE;KACX,CAAC;EACJ;EAEA,MAAMC,WAAW,GAAG,GAAGV,OAAO,CAACW,WAAW,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC,eAAe;EACxE,IAAI;IACF,MAAMC,sBAAsB,GAAG;MAC7Bb,OAAO,EAAEK,wBAAwB;MACjCS,GAAG,EAAEvB,2BAA2B;MAChCwB,YAAY,EAAE,SAAS;MACvBC,IAAI,EAAE,CAACvB,KAAK,CAACE,aAAa,CAACe,WAAW,CAAC,CAAC,CAAC;MACzCT,WAAW;MACXC;KACQ;IAEV,MAAMe,kBAAkB,GAAGrB,SAAS,CAACG,MAAM,EAAEF,YAAY,EAAE,cAAc,CAAC;IAE1E,MAAM,CAACqB,IAAI,EAAEC,eAAe,CAAC,GAAGhB,WAAW,GACvC,MAAMc,kBAAkB,CAAC;MACvB,GAAGJ,sBAAsB;MACzBG,IAAI,EAAE,CAAC,GAAGH,sBAAsB,CAACG,IAAI,EAAEb,WAAW;KACnD,CAAC,GACF,MAAMc,kBAAkB,CAACJ,sBAAsB,CAAC;IAEpD,IAAIb,OAAO,CAACW,WAAW,EAAE,KAAKQ,eAAe,CAACR,WAAW,EAAE,EAAE,OAAO,IAAI;IACxE,OAAOO,IAAI;EACb,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,IAAIhB,MAAM,EAAE,MAAMgB,GAAG;IACrB,IAAI1B,4BAA4B,CAAC0B,GAAG,EAAE,SAAS,CAAC,EAAE,OAAO,IAAI;IAC7D,MAAMA,GAAG;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}