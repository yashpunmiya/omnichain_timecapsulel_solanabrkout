{"ast":null,"code":"import { InvalidAbiParameterError } from './errors/abiParameter.js';\nimport { isStructSignature, modifiers } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js';\n/**\n * Parses human-readable ABI parameter into {@link AbiParameter}\n *\n * @param param - Human-readable ABI parameter\n * @returns Parsed {@link AbiParameter}\n *\n * @example\n * const abiParameter = parseAbiParameter('address from')\n * //    ^? const abiParameter: { type: \"address\"; name: \"from\"; }\n *\n * @example\n * const abiParameter = parseAbiParameter([\n *   //  ^? const abiParameter: { type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   'Baz bar',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiParameter(param) {\n  let abiParameter;\n  if (typeof param === 'string') abiParameter = parseAbiParameter_(param, {\n    modifiers\n  });else {\n    const structs = parseStructs(param);\n    const length = param.length;\n    for (let i = 0; i < length; i++) {\n      const signature = param[i];\n      if (isStructSignature(signature)) continue;\n      abiParameter = parseAbiParameter_(signature, {\n        modifiers,\n        structs\n      });\n      break;\n    }\n  }\n  if (!abiParameter) throw new InvalidAbiParameterError({\n    param\n  });\n  return abiParameter;\n}\n//# sourceMappingURL=parseAbiParameter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}