{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { maxUint256 } from '../../constants/number.js';\nimport { InvalidAddressError } from '../../errors/address.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js';\nimport { FeeConflictError } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\nexport function assertRequest(args) {\n  const {\n    account: account_,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to\n  } = args;\n  const account = account_ ? parseAccount(account_) : undefined;\n  if (account && !isAddress(account.address)) throw new InvalidAddressError({\n    address: account.address\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (typeof gasPrice !== 'undefined' && (typeof maxFeePerGas !== 'undefined' || typeof maxPriorityFeePerGas !== 'undefined')) throw new FeeConflictError();\n  if (maxFeePerGas && maxFeePerGas > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n}","map":{"version":3,"names":["parseAccount","maxUint256","InvalidAddressError","FeeCapTooHighError","TipAboveFeeCapError","FeeConflictError","isAddress","assertRequest","args","account","account_","gasPrice","maxFeePerGas","maxPriorityFeePerGas","to","undefined","address"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\transaction\\assertRequest.ts"],"sourcesContent":["import {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport { maxUint256 } from '../../constants/number.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport {\n  FeeConflictError,\n  type FeeConflictErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../address/isAddress.js'\n\nexport type AssertRequestParameters = ExactPartial<\n  SendTransactionParameters<Chain>\n>\n\nexport type AssertRequestErrorType =\n  | InvalidAddressErrorType\n  | FeeConflictErrorType\n  | FeeCapTooHighErrorType\n  | ParseAccountErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertRequest(args: AssertRequestParameters) {\n  const {\n    account: account_,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n  if (account && !isAddress(account.address))\n    throw new InvalidAddressError({ address: account.address })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (\n    typeof gasPrice !== 'undefined' &&\n    (typeof maxFeePerGas !== 'undefined' ||\n      typeof maxPriorityFeePerGas !== 'undefined')\n  )\n    throw new FeeConflictError()\n\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n"],"mappings":"AAAA,SAEEA,YAAY,QACP,sCAAsC;AAE7C,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SACEC,mBAAmB,QAEd,yBAAyB;AAChC,SACEC,kBAAkB,EAElBC,mBAAmB,QAEd,sBAAsB;AAC7B,SACEC,gBAAgB,QAEX,6BAA6B;AAIpC,SAASC,SAAS,QAAQ,yBAAyB;AAcnD,OAAM,SAAUC,aAAaA,CAACC,IAA6B;EACzD,MAAM;IACJC,OAAO,EAAEC,QAAQ;IACjBC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC;EAAE,CACH,GAAGN,IAAI;EACR,MAAMC,OAAO,GAAGC,QAAQ,GAAGV,YAAY,CAACU,QAAQ,CAAC,GAAGK,SAAS;EAC7D,IAAIN,OAAO,IAAI,CAACH,SAAS,CAACG,OAAO,CAACO,OAAO,CAAC,EACxC,MAAM,IAAId,mBAAmB,CAAC;IAAEc,OAAO,EAAEP,OAAO,CAACO;EAAO,CAAE,CAAC;EAC7D,IAAIF,EAAE,IAAI,CAACR,SAAS,CAACQ,EAAE,CAAC,EAAE,MAAM,IAAIZ,mBAAmB,CAAC;IAAEc,OAAO,EAAEF;EAAE,CAAE,CAAC;EACxE,IACE,OAAOH,QAAQ,KAAK,WAAW,KAC9B,OAAOC,YAAY,KAAK,WAAW,IAClC,OAAOC,oBAAoB,KAAK,WAAW,CAAC,EAE9C,MAAM,IAAIR,gBAAgB,EAAE;EAE9B,IAAIO,YAAY,IAAIA,YAAY,GAAGX,UAAU,EAC3C,MAAM,IAAIE,kBAAkB,CAAC;IAAES;EAAY,CAAE,CAAC;EAChD,IACEC,oBAAoB,IACpBD,YAAY,IACZC,oBAAoB,GAAGD,YAAY,EAEnC,MAAM,IAAIR,mBAAmB,CAAC;IAAEQ,YAAY;IAAEC;EAAoB,CAAE,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}