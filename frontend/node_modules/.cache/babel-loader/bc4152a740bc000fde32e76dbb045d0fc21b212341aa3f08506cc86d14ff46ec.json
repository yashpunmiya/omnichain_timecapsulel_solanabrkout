{"ast":null,"code":"import { concatHex } from '../../../utils/data/concat.js';\nimport { hexToBytes } from '../../../utils/encoding/toBytes.js';\nimport { numberToHex } from '../../../utils/encoding/toHex.js';\nimport { toRlp } from '../../../utils/encoding/toRlp.js';\nimport { keccak256 } from '../../../utils/hash/keccak256.js';\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization(parameters) {\n  const {\n    chainId,\n    contractAddress,\n    nonce,\n    to\n  } = parameters;\n  const hash = keccak256(concatHex(['0x05', toRlp([chainId ? numberToHex(chainId) : '0x', contractAddress, nonce ? numberToHex(nonce) : '0x'])]));\n  if (to === 'bytes') return hexToBytes(hash);\n  return hash;\n}","map":{"version":3,"names":["concatHex","hexToBytes","numberToHex","toRlp","keccak256","hashAuthorization","parameters","chainId","contractAddress","nonce","to","hash"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\experimental\\eip7702\\utils\\hashAuthorization.ts"],"sourcesContent":["import type { ErrorType } from '../../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../../types/misc.js'\nimport {\n  type ConcatHexErrorType,\n  concatHex,\n} from '../../../utils/data/concat.js'\nimport {\n  type HexToBytesErrorType,\n  hexToBytes,\n} from '../../../utils/encoding/toBytes.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../../utils/encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../../../utils/encoding/toRlp.js'\nimport {\n  type Keccak256ErrorType,\n  keccak256,\n} from '../../../utils/hash/keccak256.js'\nimport type { Authorization } from '../types/authorization.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashAuthorizationParameters<to extends To> = Authorization & {\n  /** Output format. @default \"hex\" */\n  to?: to | To | undefined\n}\n\nexport type HashAuthorizationReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashAuthorizationErrorType =\n  | Keccak256ErrorType\n  | ConcatHexErrorType\n  | ToRlpErrorType\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization<to extends To = 'hex'>(\n  parameters: HashAuthorizationParameters<to>,\n): HashAuthorizationReturnType<to> {\n  const { chainId, contractAddress, nonce, to } = parameters\n  const hash = keccak256(\n    concatHex([\n      '0x05',\n      toRlp([\n        chainId ? numberToHex(chainId) : '0x',\n        contractAddress,\n        nonce ? numberToHex(nonce) : '0x',\n      ]),\n    ]),\n  )\n  if (to === 'bytes') return hexToBytes(hash) as HashAuthorizationReturnType<to>\n  return hash as HashAuthorizationReturnType<to>\n}\n"],"mappings":"AAEA,SAEEA,SAAS,QACJ,+BAA+B;AACtC,SAEEC,UAAU,QACL,oCAAoC;AAC3C,SAEEC,WAAW,QACN,kCAAkC;AACzC,SAA8BC,KAAK,QAAQ,kCAAkC;AAC7E,SAEEC,SAAS,QACJ,kCAAkC;AAsBzC;;;AAGA,OAAM,SAAUC,iBAAiBA,CAC/BC,UAA2C;EAE3C,MAAM;IAAEC,OAAO;IAAEC,eAAe;IAAEC,KAAK;IAAEC;EAAE,CAAE,GAAGJ,UAAU;EAC1D,MAAMK,IAAI,GAAGP,SAAS,CACpBJ,SAAS,CAAC,CACR,MAAM,EACNG,KAAK,CAAC,CACJI,OAAO,GAAGL,WAAW,CAACK,OAAO,CAAC,GAAG,IAAI,EACrCC,eAAe,EACfC,KAAK,GAAGP,WAAW,CAACO,KAAK,CAAC,GAAG,IAAI,CAClC,CAAC,CACH,CAAC,CACH;EACD,IAAIC,EAAE,KAAK,OAAO,EAAE,OAAOT,UAAU,CAACU,IAAI,CAAoC;EAC9E,OAAOA,IAAuC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}