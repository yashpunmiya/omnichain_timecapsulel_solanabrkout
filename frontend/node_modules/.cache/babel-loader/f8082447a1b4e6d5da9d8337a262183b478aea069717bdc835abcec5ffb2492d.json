{"ast":null,"code":"'use strict';\n\n/* replacement start */\nconst process = require('process/');\n\n/* replacement end */\n\nconst {\n  PromisePrototypeThen,\n  SymbolAsyncIterator,\n  SymbolIterator\n} = require('../../ours/primordials');\nconst {\n  Buffer\n} = require('buffer');\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_STREAM_NULL_VALUES\n} = require('../../ours/errors').codes;\nfunction from(Readable, iterable, opts) {\n  let iterator;\n  if (typeof iterable === 'string' || iterable instanceof Buffer) {\n    return new Readable({\n      objectMode: true,\n      ...opts,\n      read() {\n        this.push(iterable);\n        this.push(null);\n      }\n    });\n  }\n  let isAsync;\n  if (iterable && iterable[SymbolAsyncIterator]) {\n    isAsync = true;\n    iterator = iterable[SymbolAsyncIterator]();\n  } else if (iterable && iterable[SymbolIterator]) {\n    isAsync = false;\n    iterator = iterable[SymbolIterator]();\n  } else {\n    throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);\n  }\n  const readable = new Readable({\n    objectMode: true,\n    highWaterMark: 1,\n    // TODO(ronag): What options should be allowed?\n    ...opts\n  });\n\n  // Flag to protect against _read\n  // being called before last iteration completion.\n  let reading = false;\n  readable._read = function () {\n    if (!reading) {\n      reading = true;\n      next();\n    }\n  };\n  readable._destroy = function (error, cb) {\n    PromisePrototypeThen(close(error), () => process.nextTick(cb, error),\n    // nextTick is here in case cb throws\n    e => process.nextTick(cb, e || error));\n  };\n  async function close(error) {\n    const hadError = error !== undefined && error !== null;\n    const hasThrow = typeof iterator.throw === 'function';\n    if (hadError && hasThrow) {\n      const {\n        value,\n        done\n      } = await iterator.throw(error);\n      await value;\n      if (done) {\n        return;\n      }\n    }\n    if (typeof iterator.return === 'function') {\n      const {\n        value\n      } = await iterator.return();\n      await value;\n    }\n  }\n  async function next() {\n    for (;;) {\n      try {\n        const {\n          value,\n          done\n        } = isAsync ? await iterator.next() : iterator.next();\n        if (done) {\n          readable.push(null);\n        } else {\n          const res = value && typeof value.then === 'function' ? await value : value;\n          if (res === null) {\n            reading = false;\n            throw new ERR_STREAM_NULL_VALUES();\n          } else if (readable.push(res)) {\n            continue;\n          } else {\n            reading = false;\n          }\n        }\n      } catch (err) {\n        readable.destroy(err);\n      }\n      break;\n    }\n  }\n  return readable;\n}\nmodule.exports = from;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}