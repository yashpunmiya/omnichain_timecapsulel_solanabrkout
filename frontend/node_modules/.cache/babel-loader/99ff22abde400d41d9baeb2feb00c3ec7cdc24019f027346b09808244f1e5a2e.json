{"ast":null,"code":"import { hexToBigInt } from '../utils/encoding/fromHex.js';\nimport { defineBlock } from '../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction } from '../utils/formatters/transaction.js';\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js';\nimport { isCIP64 } from './utils.js';\nexport const formatters = {\n  block: /*#__PURE__*/defineBlock({\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        const formatted = formatTransaction(transaction);\n        return {\n          ...formatted,\n          ...(transaction.gatewayFee ? {\n            gatewayFee: hexToBigInt(transaction.gatewayFee),\n            gatewayFeeRecipient: transaction.gatewayFeeRecipient\n          } : {}),\n          feeCurrency: transaction.feeCurrency\n        };\n      });\n      return {\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      if (args.type === '0x7e') return {\n        isSystemTx: args.isSystemTx,\n        mint: args.mint ? hexToBigInt(args.mint) : undefined,\n        sourceHash: args.sourceHash,\n        type: 'deposit'\n      };\n      const transaction = {\n        feeCurrency: args.feeCurrency\n      };\n      if (args.type === '0x7b') transaction.type = 'cip64';else {\n        if (args.type === '0x7c') transaction.type = 'cip42';\n        transaction.gatewayFee = args.gatewayFee ? hexToBigInt(args.gatewayFee) : null;\n        transaction.gatewayFeeRecipient = args.gatewayFeeRecipient;\n      }\n      return transaction;\n    }\n  }),\n  transactionRequest: /*#__PURE__*/defineTransactionRequest({\n    format(args) {\n      const request = {};\n      if (args.feeCurrency) request.feeCurrency = args.feeCurrency;\n      if (isCIP64(args)) request.type = '0x7b';\n      return request;\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","defineBlock","defineTransaction","formatTransaction","defineTransactionRequest","isCIP64","formatters","block","format","args","transactions","map","transaction","formatted","gatewayFee","gatewayFeeRecipient","feeCurrency","type","isSystemTx","mint","undefined","sourceHash","transactionRequest","request"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\celo\\formatters.ts"],"sourcesContent":["import type { ChainFormatters } from '../types/chain.js'\nimport type { RpcTransaction } from '../types/rpc.js'\nimport { hexToBigInt } from '../utils/encoding/fromHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../utils/formatters/transaction.js'\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js'\nimport type {\n  CeloBlock,\n  CeloRpcBlock,\n  CeloRpcTransaction,\n  CeloRpcTransactionRequest,\n  CeloTransaction,\n  CeloTransactionRequest,\n} from './types.js'\nimport { isCIP64 } from './utils.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: CeloRpcBlock): CeloBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(transaction as RpcTransaction)\n        return {\n          ...formatted,\n          ...(transaction.gatewayFee\n            ? {\n                gatewayFee: hexToBigInt(transaction.gatewayFee),\n                gatewayFeeRecipient: transaction.gatewayFeeRecipient,\n              }\n            : {}),\n          feeCurrency: transaction.feeCurrency,\n        }\n      })\n      return {\n        transactions,\n      } as CeloBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: CeloRpcTransaction): CeloTransaction {\n      if (args.type === '0x7e')\n        return {\n          isSystemTx: args.isSystemTx,\n          mint: args.mint ? hexToBigInt(args.mint) : undefined,\n          sourceHash: args.sourceHash,\n          type: 'deposit',\n        } as CeloTransaction\n\n      const transaction = { feeCurrency: args.feeCurrency } as CeloTransaction\n\n      if (args.type === '0x7b') transaction.type = 'cip64'\n      else {\n        if (args.type === '0x7c') transaction.type = 'cip42'\n\n        transaction.gatewayFee = args.gatewayFee\n          ? hexToBigInt(args.gatewayFee)\n          : null\n        transaction.gatewayFeeRecipient = args.gatewayFeeRecipient\n      }\n\n      return transaction\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    format(args: CeloTransactionRequest): CeloRpcTransactionRequest {\n      const request = {} as CeloRpcTransactionRequest\n\n      if (args.feeCurrency) request.feeCurrency = args.feeCurrency\n      if (isCIP64(args)) request.type = '0x7b'\n\n      return request\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,oCAAoC;AAC3C,SAASC,wBAAwB,QAAQ,2CAA2C;AASpF,SAASC,OAAO,QAAQ,YAAY;AAEpC,OAAO,MAAMC,UAAU,GAAG;EACxBC,KAAK,EAAE,aAAcN,WAAW,CAAC;IAC/BO,MAAMA,CAACC,IAAkB;MACvB,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,MAAMC,SAAS,GAAGV,iBAAiB,CAACS,WAA6B,CAAC;QAClE,OAAO;UACL,GAAGC,SAAS;UACZ,IAAID,WAAW,CAACE,UAAU,GACtB;YACEA,UAAU,EAAEd,WAAW,CAACY,WAAW,CAACE,UAAU,CAAC;YAC/CC,mBAAmB,EAAEH,WAAW,CAACG;WAClC,GACD,EAAE,CAAC;UACPC,WAAW,EAAEJ,WAAW,CAACI;SAC1B;MACH,CAAC,CAAC;MACF,OAAO;QACLN;OACY;IAChB;GACD,CAAC;EACFE,WAAW,EAAE,aAAcV,iBAAiB,CAAC;IAC3CM,MAAMA,CAACC,IAAwB;MAC7B,IAAIA,IAAI,CAACQ,IAAI,KAAK,MAAM,EACtB,OAAO;QACLC,UAAU,EAAET,IAAI,CAACS,UAAU;QAC3BC,IAAI,EAAEV,IAAI,CAACU,IAAI,GAAGnB,WAAW,CAACS,IAAI,CAACU,IAAI,CAAC,GAAGC,SAAS;QACpDC,UAAU,EAAEZ,IAAI,CAACY,UAAU;QAC3BJ,IAAI,EAAE;OACY;MAEtB,MAAML,WAAW,GAAG;QAAEI,WAAW,EAAEP,IAAI,CAACO;MAAW,CAAqB;MAExE,IAAIP,IAAI,CAACQ,IAAI,KAAK,MAAM,EAAEL,WAAW,CAACK,IAAI,GAAG,OAAO,MAC/C;QACH,IAAIR,IAAI,CAACQ,IAAI,KAAK,MAAM,EAAEL,WAAW,CAACK,IAAI,GAAG,OAAO;QAEpDL,WAAW,CAACE,UAAU,GAAGL,IAAI,CAACK,UAAU,GACpCd,WAAW,CAACS,IAAI,CAACK,UAAU,CAAC,GAC5B,IAAI;QACRF,WAAW,CAACG,mBAAmB,GAAGN,IAAI,CAACM,mBAAmB;MAC5D;MAEA,OAAOH,WAAW;IACpB;GACD,CAAC;EACFU,kBAAkB,EAAE,aAAclB,wBAAwB,CAAC;IACzDI,MAAMA,CAACC,IAA4B;MACjC,MAAMc,OAAO,GAAG,EAA+B;MAE/C,IAAId,IAAI,CAACO,WAAW,EAAEO,OAAO,CAACP,WAAW,GAAGP,IAAI,CAACO,WAAW;MAC5D,IAAIX,OAAO,CAACI,IAAI,CAAC,EAAEc,OAAO,CAACN,IAAI,GAAG,MAAM;MAExC,OAAOM,OAAO;IAChB;GACD;CACiC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}