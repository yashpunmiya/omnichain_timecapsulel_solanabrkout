{"ast":null,"code":"/**\n * Gets {@link parameterCache} cache key namespaced by {@link type}. This prevents parameters from being accessible to types that don't allow them (e.g. `string indexed foo` not allowed outside of `type: 'event'`).\n * @param param ABI parameter string\n * @param type ABI parameter type\n * @returns Cache key for {@link parameterCache}\n */\nexport function getParameterCacheKey(param, type, structs) {\n  let structKey = '';\n  if (structs) for (const struct of Object.entries(structs)) {\n    if (!struct) continue;\n    let propertyKey = '';\n    for (const property of struct[1]) {\n      propertyKey += `[${property.type}${property.name ? `:${property.name}` : ''}]`;\n    }\n    structKey += `(${struct[0]}{${propertyKey}})`;\n  }\n  if (type) return `${type}:${param}${structKey}`;\n  return param;\n}\n/**\n * Basic cache seeded with common ABI parameter strings.\n *\n * **Note: When seeding more parameters, make sure you benchmark performance. The current number is the ideal balance between performance and having an already existing cache.**\n */\nexport const parameterCache = new Map([\n// Unnamed\n['address', {\n  type: 'address'\n}], ['bool', {\n  type: 'bool'\n}], ['bytes', {\n  type: 'bytes'\n}], ['bytes32', {\n  type: 'bytes32'\n}], ['int', {\n  type: 'int256'\n}], ['int256', {\n  type: 'int256'\n}], ['string', {\n  type: 'string'\n}], ['uint', {\n  type: 'uint256'\n}], ['uint8', {\n  type: 'uint8'\n}], ['uint16', {\n  type: 'uint16'\n}], ['uint24', {\n  type: 'uint24'\n}], ['uint32', {\n  type: 'uint32'\n}], ['uint64', {\n  type: 'uint64'\n}], ['uint96', {\n  type: 'uint96'\n}], ['uint112', {\n  type: 'uint112'\n}], ['uint160', {\n  type: 'uint160'\n}], ['uint192', {\n  type: 'uint192'\n}], ['uint256', {\n  type: 'uint256'\n}],\n// Named\n['address owner', {\n  type: 'address',\n  name: 'owner'\n}], ['address to', {\n  type: 'address',\n  name: 'to'\n}], ['bool approved', {\n  type: 'bool',\n  name: 'approved'\n}], ['bytes _data', {\n  type: 'bytes',\n  name: '_data'\n}], ['bytes data', {\n  type: 'bytes',\n  name: 'data'\n}], ['bytes signature', {\n  type: 'bytes',\n  name: 'signature'\n}], ['bytes32 hash', {\n  type: 'bytes32',\n  name: 'hash'\n}], ['bytes32 r', {\n  type: 'bytes32',\n  name: 'r'\n}], ['bytes32 root', {\n  type: 'bytes32',\n  name: 'root'\n}], ['bytes32 s', {\n  type: 'bytes32',\n  name: 's'\n}], ['string name', {\n  type: 'string',\n  name: 'name'\n}], ['string symbol', {\n  type: 'string',\n  name: 'symbol'\n}], ['string tokenURI', {\n  type: 'string',\n  name: 'tokenURI'\n}], ['uint tokenId', {\n  type: 'uint256',\n  name: 'tokenId'\n}], ['uint8 v', {\n  type: 'uint8',\n  name: 'v'\n}], ['uint256 balance', {\n  type: 'uint256',\n  name: 'balance'\n}], ['uint256 tokenId', {\n  type: 'uint256',\n  name: 'tokenId'\n}], ['uint256 value', {\n  type: 'uint256',\n  name: 'value'\n}],\n// Indexed\n['event:address indexed from', {\n  type: 'address',\n  name: 'from',\n  indexed: true\n}], ['event:address indexed to', {\n  type: 'address',\n  name: 'to',\n  indexed: true\n}], ['event:uint indexed tokenId', {\n  type: 'uint256',\n  name: 'tokenId',\n  indexed: true\n}], ['event:uint256 indexed tokenId', {\n  type: 'uint256',\n  name: 'tokenId',\n  indexed: true\n}]]);","map":{"version":3,"names":["getParameterCacheKey","param","type","structs","structKey","struct","Object","entries","propertyKey","property","name","parameterCache","Map","indexed"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\abitype\\src\\human-readable\\runtime\\cache.ts"],"sourcesContent":["import type { AbiItemType, AbiParameter } from '../../abi.js'\nimport type { StructLookup } from '../types/structs.js'\n\n/**\n * Gets {@link parameterCache} cache key namespaced by {@link type}. This prevents parameters from being accessible to types that don't allow them (e.g. `string indexed foo` not allowed outside of `type: 'event'`).\n * @param param ABI parameter string\n * @param type ABI parameter type\n * @returns Cache key for {@link parameterCache}\n */\nexport function getParameterCacheKey(\n  param: string,\n  type?: AbiItemType | 'struct',\n  structs?: StructLookup,\n) {\n  let structKey = ''\n  if (structs)\n    for (const struct of Object.entries(structs)) {\n      if (!struct) continue\n      let propertyKey = ''\n      for (const property of struct[1]) {\n        propertyKey += `[${property.type}${property.name ? `:${property.name}` : ''}]`\n      }\n      structKey += `(${struct[0]}{${propertyKey}})`\n    }\n  if (type) return `${type}:${param}${structKey}`\n  return param\n}\n\n/**\n * Basic cache seeded with common ABI parameter strings.\n *\n * **Note: When seeding more parameters, make sure you benchmark performance. The current number is the ideal balance between performance and having an already existing cache.**\n */\nexport const parameterCache = new Map<\n  string,\n  AbiParameter & { indexed?: boolean }\n>([\n  // Unnamed\n  ['address', { type: 'address' }],\n  ['bool', { type: 'bool' }],\n  ['bytes', { type: 'bytes' }],\n  ['bytes32', { type: 'bytes32' }],\n  ['int', { type: 'int256' }],\n  ['int256', { type: 'int256' }],\n  ['string', { type: 'string' }],\n  ['uint', { type: 'uint256' }],\n  ['uint8', { type: 'uint8' }],\n  ['uint16', { type: 'uint16' }],\n  ['uint24', { type: 'uint24' }],\n  ['uint32', { type: 'uint32' }],\n  ['uint64', { type: 'uint64' }],\n  ['uint96', { type: 'uint96' }],\n  ['uint112', { type: 'uint112' }],\n  ['uint160', { type: 'uint160' }],\n  ['uint192', { type: 'uint192' }],\n  ['uint256', { type: 'uint256' }],\n\n  // Named\n  ['address owner', { type: 'address', name: 'owner' }],\n  ['address to', { type: 'address', name: 'to' }],\n  ['bool approved', { type: 'bool', name: 'approved' }],\n  ['bytes _data', { type: 'bytes', name: '_data' }],\n  ['bytes data', { type: 'bytes', name: 'data' }],\n  ['bytes signature', { type: 'bytes', name: 'signature' }],\n  ['bytes32 hash', { type: 'bytes32', name: 'hash' }],\n  ['bytes32 r', { type: 'bytes32', name: 'r' }],\n  ['bytes32 root', { type: 'bytes32', name: 'root' }],\n  ['bytes32 s', { type: 'bytes32', name: 's' }],\n  ['string name', { type: 'string', name: 'name' }],\n  ['string symbol', { type: 'string', name: 'symbol' }],\n  ['string tokenURI', { type: 'string', name: 'tokenURI' }],\n  ['uint tokenId', { type: 'uint256', name: 'tokenId' }],\n  ['uint8 v', { type: 'uint8', name: 'v' }],\n  ['uint256 balance', { type: 'uint256', name: 'balance' }],\n  ['uint256 tokenId', { type: 'uint256', name: 'tokenId' }],\n  ['uint256 value', { type: 'uint256', name: 'value' }],\n\n  // Indexed\n  [\n    'event:address indexed from',\n    { type: 'address', name: 'from', indexed: true },\n  ],\n  ['event:address indexed to', { type: 'address', name: 'to', indexed: true }],\n  [\n    'event:uint indexed tokenId',\n    { type: 'uint256', name: 'tokenId', indexed: true },\n  ],\n  [\n    'event:uint256 indexed tokenId',\n    { type: 'uint256', name: 'tokenId', indexed: true },\n  ],\n])\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}