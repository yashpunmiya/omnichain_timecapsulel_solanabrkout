{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { InvalidStorageKeySizeError } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(accessList) {\n  if (!accessList || accessList.length === 0) return [];\n  const serializedAccessList = [];\n  for (let i = 0; i < accessList.length; i++) {\n    const {\n      address,\n      storageKeys\n    } = accessList[i];\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({\n          storageKey: storageKeys[j]\n        });\n      }\n    }\n    if (!isAddress(address, {\n      strict: false\n    })) {\n      throw new InvalidAddressError({\n        address\n      });\n    }\n    serializedAccessList.push([address, storageKeys]);\n  }\n  return serializedAccessList;\n}\n//# sourceMappingURL=serializeAccessList.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}