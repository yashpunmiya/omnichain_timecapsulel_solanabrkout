{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nimport { ExecutionRevertedError, FeeCapTooHighError, FeeCapTooLowError, InsufficientFundsError, IntrinsicGasTooHighError, IntrinsicGasTooLowError, NonceMaxValueError, NonceTooHighError, NonceTooLowError, TipAboveFeeCapError, TransactionTypeNotSupportedError, UnknownNodeError } from '../../errors/node.js';\nimport { RpcRequestError } from '../../errors/request.js';\nimport { InvalidInputRpcError, TransactionRejectedRpcError } from '../../errors/rpc.js';\nexport function containsNodeError(err) {\n  return err instanceof TransactionRejectedRpcError || err instanceof InvalidInputRpcError || err instanceof RpcRequestError && err.code === ExecutionRevertedError.code;\n}\nexport function getNodeError(err, args) {\n  const message = (err.details || '').toLowerCase();\n  const executionRevertedError = err instanceof BaseError ? err.walk(e => e?.code === ExecutionRevertedError.code) : err;\n  if (executionRevertedError instanceof BaseError) return new ExecutionRevertedError({\n    cause: err,\n    message: executionRevertedError.details\n  });\n  if (ExecutionRevertedError.nodeMessage.test(message)) return new ExecutionRevertedError({\n    cause: err,\n    message: err.details\n  });\n  if (FeeCapTooHighError.nodeMessage.test(message)) return new FeeCapTooHighError({\n    cause: err,\n    maxFeePerGas: args?.maxFeePerGas\n  });\n  if (FeeCapTooLowError.nodeMessage.test(message)) return new FeeCapTooLowError({\n    cause: err,\n    maxFeePerGas: args?.maxFeePerGas\n  });\n  if (NonceTooHighError.nodeMessage.test(message)) return new NonceTooHighError({\n    cause: err,\n    nonce: args?.nonce\n  });\n  if (NonceTooLowError.nodeMessage.test(message)) return new NonceTooLowError({\n    cause: err,\n    nonce: args?.nonce\n  });\n  if (NonceMaxValueError.nodeMessage.test(message)) return new NonceMaxValueError({\n    cause: err,\n    nonce: args?.nonce\n  });\n  if (InsufficientFundsError.nodeMessage.test(message)) return new InsufficientFundsError({\n    cause: err\n  });\n  if (IntrinsicGasTooHighError.nodeMessage.test(message)) return new IntrinsicGasTooHighError({\n    cause: err,\n    gas: args?.gas\n  });\n  if (IntrinsicGasTooLowError.nodeMessage.test(message)) return new IntrinsicGasTooLowError({\n    cause: err,\n    gas: args?.gas\n  });\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message)) return new TransactionTypeNotSupportedError({\n    cause: err\n  });\n  if (TipAboveFeeCapError.nodeMessage.test(message)) return new TipAboveFeeCapError({\n    cause: err,\n    maxFeePerGas: args?.maxFeePerGas,\n    maxPriorityFeePerGas: args?.maxPriorityFeePerGas\n  });\n  return new UnknownNodeError({\n    cause: err\n  });\n}","map":{"version":3,"names":["BaseError","ExecutionRevertedError","FeeCapTooHighError","FeeCapTooLowError","InsufficientFundsError","IntrinsicGasTooHighError","IntrinsicGasTooLowError","NonceMaxValueError","NonceTooHighError","NonceTooLowError","TipAboveFeeCapError","TransactionTypeNotSupportedError","UnknownNodeError","RpcRequestError","InvalidInputRpcError","TransactionRejectedRpcError","containsNodeError","err","code","getNodeError","args","message","details","toLowerCase","executionRevertedError","walk","e","cause","nodeMessage","test","maxFeePerGas","nonce","gas","maxPriorityFeePerGas"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\errors\\getNodeError.ts"],"sourcesContent":["import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ExecutionRevertedError,\n  type ExecutionRevertedErrorType,\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  FeeCapTooLowError,\n  type FeeCapTooLowErrorType,\n  InsufficientFundsError,\n  type InsufficientFundsErrorType,\n  IntrinsicGasTooHighError,\n  type IntrinsicGasTooHighErrorType,\n  IntrinsicGasTooLowError,\n  type IntrinsicGasTooLowErrorType,\n  NonceMaxValueError,\n  type NonceMaxValueErrorType,\n  NonceTooHighError,\n  type NonceTooHighErrorType,\n  NonceTooLowError,\n  type NonceTooLowErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n  TransactionTypeNotSupportedError,\n  type TransactionTypeNotSupportedErrorType,\n  UnknownNodeError,\n  type UnknownNodeErrorType,\n} from '../../errors/node.js'\nimport { RpcRequestError } from '../../errors/request.js'\nimport {\n  InvalidInputRpcError,\n  TransactionRejectedRpcError,\n} from '../../errors/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\n\nexport function containsNodeError(err: BaseError) {\n  return (\n    err instanceof TransactionRejectedRpcError ||\n    err instanceof InvalidInputRpcError ||\n    (err instanceof RpcRequestError && err.code === ExecutionRevertedError.code)\n  )\n}\n\nexport type GetNodeErrorParameters = ExactPartial<\n  SendTransactionParameters<any>\n>\n\nexport type GetNodeErrorReturnType =\n  | ExecutionRevertedErrorType\n  | FeeCapTooHighErrorType\n  | FeeCapTooLowErrorType\n  | NonceTooHighErrorType\n  | NonceTooLowErrorType\n  | NonceMaxValueErrorType\n  | InsufficientFundsErrorType\n  | IntrinsicGasTooHighErrorType\n  | IntrinsicGasTooLowErrorType\n  | TransactionTypeNotSupportedErrorType\n  | TipAboveFeeCapErrorType\n  | UnknownNodeErrorType\n\nexport function getNodeError(\n  err: BaseError,\n  args: GetNodeErrorParameters,\n): GetNodeErrorReturnType {\n  const message = (err.details || '').toLowerCase()\n\n  const executionRevertedError =\n    err instanceof BaseError\n      ? err.walk(\n          (e) =>\n            (e as { code: number } | null | undefined)?.code ===\n            ExecutionRevertedError.code,\n        )\n      : err\n  if (executionRevertedError instanceof BaseError)\n    return new ExecutionRevertedError({\n      cause: err,\n      message: executionRevertedError.details,\n    }) as any\n  if (ExecutionRevertedError.nodeMessage.test(message))\n    return new ExecutionRevertedError({\n      cause: err,\n      message: err.details,\n    }) as any\n  if (FeeCapTooHighError.nodeMessage.test(message))\n    return new FeeCapTooHighError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (FeeCapTooLowError.nodeMessage.test(message))\n    return new FeeCapTooLowError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (NonceTooHighError.nodeMessage.test(message))\n    return new NonceTooHighError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceTooLowError.nodeMessage.test(message))\n    return new NonceTooLowError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceMaxValueError.nodeMessage.test(message))\n    return new NonceMaxValueError({ cause: err, nonce: args?.nonce }) as any\n  if (InsufficientFundsError.nodeMessage.test(message))\n    return new InsufficientFundsError({ cause: err }) as any\n  if (IntrinsicGasTooHighError.nodeMessage.test(message))\n    return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas }) as any\n  if (IntrinsicGasTooLowError.nodeMessage.test(message))\n    return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas }) as any\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n    return new TransactionTypeNotSupportedError({ cause: err }) as any\n  if (TipAboveFeeCapError.nodeMessage.test(message))\n    return new TipAboveFeeCapError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n      maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\n    }) as any\n  return new UnknownNodeError({\n    cause: err,\n  }) as any\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}