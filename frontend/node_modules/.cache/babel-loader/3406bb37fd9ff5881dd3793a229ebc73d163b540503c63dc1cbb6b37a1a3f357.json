{"ast":null,"code":"import { getTransactionCount } from '../actions/public/getTransactionCount.js';\nimport { LruMap } from './lru.js';\n/**\n * Creates a nonce manager for auto-incrementing transaction nonces.\n *\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\n *\n * @example\n * ```ts\n * const nonceManager = createNonceManager({\n *   source: jsonRpc(),\n * })\n * ```\n */\nexport function createNonceManager(parameters) {\n  const {\n    source\n  } = parameters;\n  const deltaMap = new Map();\n  const nonceMap = new LruMap(8192);\n  const promiseMap = new Map();\n  const getKey = ({\n    address,\n    chainId\n  }) => `${address}.${chainId}`;\n  return {\n    async consume({\n      address,\n      chainId,\n      client\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      const promise = this.get({\n        address,\n        chainId,\n        client\n      });\n      this.increment({\n        address,\n        chainId\n      });\n      const nonce = await promise;\n      await source.set({\n        address,\n        chainId\n      }, nonce);\n      nonceMap.set(key, nonce);\n      return nonce;\n    },\n    async increment({\n      address,\n      chainId\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      const delta = deltaMap.get(key) ?? 0;\n      deltaMap.set(key, delta + 1);\n    },\n    async get({\n      address,\n      chainId,\n      client\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      let promise = promiseMap.get(key);\n      if (!promise) {\n        promise = (async () => {\n          try {\n            const nonce = await source.get({\n              address,\n              chainId,\n              client\n            });\n            const previousNonce = nonceMap.get(key) ?? 0;\n            if (previousNonce > 0 && nonce <= previousNonce) return previousNonce + 1;\n            nonceMap.delete(key);\n            return nonce;\n          } finally {\n            this.reset({\n              address,\n              chainId\n            });\n          }\n        })();\n        promiseMap.set(key, promise);\n      }\n      const delta = deltaMap.get(key) ?? 0;\n      return delta + (await promise);\n    },\n    reset({\n      address,\n      chainId\n    }) {\n      const key = getKey({\n        address,\n        chainId\n      });\n      deltaMap.delete(key);\n      promiseMap.delete(key);\n    }\n  };\n}\n/** JSON-RPC source for a nonce manager. */\nexport function jsonRpc() {\n  return {\n    async get(parameters) {\n      const {\n        address,\n        client\n      } = parameters;\n      return getTransactionCount(client, {\n        address,\n        blockTag: 'pending'\n      });\n    },\n    set() {}\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////\n// Default\n/** Default Nonce Manager with a JSON-RPC source. */\nexport const nonceManager = /*#__PURE__*/createNonceManager({\n  source: jsonRpc()\n});\n//# sourceMappingURL=nonceManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}