{"ast":null,"code":"/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n * const block = await fetchFromProvider(provider, params)\n * ```\n */\nexport const fetchFromProvider = async (url, params) => {\n  const data = JSON.stringify({\n    method: params.method,\n    params: params.params,\n    jsonrpc: '2.0',\n    id: 1\n  });\n  const res = await fetch(url, {\n    headers: {\n      'content-type': 'application/json'\n    },\n    method: 'POST',\n    body: data\n  });\n  if (!res.ok) {\n    throw new Error(`JSONRpcError: ${JSON.stringify({\n      method: params.method,\n      status: res.status,\n      message: await res.text().catch(() => {\n        return 'Could not parse error message likely because of a network error';\n      })\n    }, null, 2)}`);\n  }\n  const json = await res.json();\n  // TODO we should check json.error here\n  return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nexport const getProvider = provider => {\n  if (typeof provider === 'string') {\n    return provider;\n  } else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n    return provider._getConnection().url;\n  } else {\n    throw new Error('Must provide valid provider URL or Web3Provider');\n  }\n};","map":{"version":3,"names":["fetchFromProvider","url","params","data","JSON","stringify","method","jsonrpc","id","res","fetch","headers","body","ok","Error","status","message","text","catch","json","result","getProvider","provider","_getConnection","undefined"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\provider.ts"],"sourcesContent":["type rpcParams = {\n  method: string\n  params: (string | boolean | number)[]\n}\n\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n * const block = await fetchFromProvider(provider, params)\n * ```\n */\nexport const fetchFromProvider = async (url: string, params: rpcParams) => {\n  const data = JSON.stringify({\n    method: params.method,\n    params: params.params,\n    jsonrpc: '2.0',\n    id: 1,\n  })\n\n  const res = await fetch(url, {\n    headers: {\n      'content-type': 'application/json',\n    },\n    method: 'POST',\n    body: data,\n  })\n  if (!res.ok) {\n    throw new Error(\n      `JSONRpcError: ${JSON.stringify(\n        {\n          method: params.method,\n          status: res.status,\n          message: await res.text().catch(() => {\n            return 'Could not parse error message likely because of a network error'\n          }),\n        },\n        null,\n        2\n      )}`\n    )\n  }\n  const json = await res.json()\n  // TODO we should check json.error here\n  return json.result\n}\n\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nexport const getProvider = (provider: string | EthersProvider) => {\n  if (typeof provider === 'string') {\n    return provider\n  } else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n    return provider._getConnection().url\n  } else {\n    throw new Error('Must provide valid provider URL or Web3Provider')\n  }\n}\n\n/**\n * A partial interface for an `ethers` `JsonRpcProvider`\n * We only use the url string since we do raw `fetch` calls to\n * retrieve the necessary data\n */\nexport interface EthersProvider {\n  _getConnection: () => {\n    url: string\n  }\n}\n"],"mappings":"AAKA;;;;;;;;;;;;;;;;;;AAkBA,OAAO,MAAMA,iBAAiB,GAAG,MAAAA,CAAOC,GAAW,EAAEC,MAAiB,KAAI;EACxE,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAC1BC,MAAM,EAAEJ,MAAM,CAACI,MAAM;IACrBJ,MAAM,EAAEA,MAAM,CAACA,MAAM;IACrBK,OAAO,EAAE,KAAK;IACdC,EAAE,EAAE;GACL,CAAC;EAEF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAE;IAC3BU,OAAO,EAAE;MACP,cAAc,EAAE;KACjB;IACDL,MAAM,EAAE,MAAM;IACdM,IAAI,EAAET;GACP,CAAC;EACF,IAAI,CAACM,GAAG,CAACI,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CACb,iBAAiBV,IAAI,CAACC,SAAS,CAC7B;MACEC,MAAM,EAAEJ,MAAM,CAACI,MAAM;MACrBS,MAAM,EAAEN,GAAG,CAACM,MAAM;MAClBC,OAAO,EAAE,MAAMP,GAAG,CAACQ,IAAI,EAAE,CAACC,KAAK,CAAC,MAAK;QACnC,OAAO,iEAAiE;MAC1E,CAAC;KACF,EACD,IAAI,EACJ,CAAC,CACF,EAAE,CACJ;;EAEH,MAAMC,IAAI,GAAG,MAAMV,GAAG,CAACU,IAAI,EAAE;EAC7B;EACA,OAAOA,IAAI,CAACC,MAAM;AACpB,CAAC;AAED;;;;;AAKA,OAAO,MAAMC,WAAW,GAAIC,QAAiC,IAAI;EAC/D,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAOA,QAAQ;GAChB,MAAM,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAACC,cAAc,KAAKC,SAAS,EAAE;IAChF,OAAOF,QAAQ,CAACC,cAAc,EAAE,CAACtB,GAAG;GACrC,MAAM;IACL,MAAM,IAAIa,KAAK,CAAC,iDAAiD,CAAC;;AAEtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}