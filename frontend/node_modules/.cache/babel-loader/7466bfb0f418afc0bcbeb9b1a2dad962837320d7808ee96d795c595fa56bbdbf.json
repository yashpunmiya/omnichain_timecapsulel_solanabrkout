{"ast":null,"code":"import { Address } from './address.js';\nimport { bigIntToHex, bytesToHex, toBytes } from './bytes.js';\nimport { BIGINT_0 } from './constants.js';\nimport { TypeOutput, toType } from './types.js';\n/**\n * Representation of EIP-4895 withdrawal data\n */\nexport class Withdrawal {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n   * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n   */\n  constructor(index, validatorIndex, address,\n  /**\n   * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n   */\n  amount) {\n    this.index = index;\n    this.validatorIndex = validatorIndex;\n    this.address = address;\n    this.amount = amount;\n  }\n  static fromWithdrawalData(withdrawalData) {\n    const {\n      index: indexData,\n      validatorIndex: validatorIndexData,\n      address: addressData,\n      amount: amountData\n    } = withdrawalData;\n    const index = toType(indexData, TypeOutput.BigInt);\n    const validatorIndex = toType(validatorIndexData, TypeOutput.BigInt);\n    const address = addressData instanceof Address ? addressData : new Address(toBytes(addressData));\n    const amount = toType(amountData, TypeOutput.BigInt);\n    return new Withdrawal(index, validatorIndex, address, amount);\n  }\n  static fromValuesArray(withdrawalArray) {\n    if (withdrawalArray.length !== 4) {\n      throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n    }\n    const [index, validatorIndex, address, amount] = withdrawalArray;\n    return Withdrawal.fromWithdrawalData({\n      index,\n      validatorIndex,\n      address,\n      amount\n    });\n  }\n  /**\n   * Convert a withdrawal to a buffer array\n   * @param withdrawal the withdrawal to convert\n   * @returns buffer array of the withdrawal\n   */\n  static toBytesArray(withdrawal) {\n    const {\n      index,\n      validatorIndex,\n      address,\n      amount\n    } = withdrawal;\n    const indexBytes = toType(index, TypeOutput.BigInt) === BIGINT_0 ? new Uint8Array() : toType(index, TypeOutput.Uint8Array);\n    const validatorIndexBytes = toType(validatorIndex, TypeOutput.BigInt) === BIGINT_0 ? new Uint8Array() : toType(validatorIndex, TypeOutput.Uint8Array);\n    const addressBytes = address instanceof Address ? address.bytes : toType(address, TypeOutput.Uint8Array);\n    const amountBytes = toType(amount, TypeOutput.BigInt) === BIGINT_0 ? new Uint8Array() : toType(amount, TypeOutput.Uint8Array);\n    return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];\n  }\n  raw() {\n    return Withdrawal.toBytesArray(this);\n  }\n  toValue() {\n    return {\n      index: this.index,\n      validatorIndex: this.validatorIndex,\n      address: this.address.bytes,\n      amount: this.amount\n    };\n  }\n  toJSON() {\n    return {\n      index: bigIntToHex(this.index),\n      validatorIndex: bigIntToHex(this.validatorIndex),\n      address: bytesToHex(this.address.bytes),\n      amount: bigIntToHex(this.amount)\n    };\n  }\n}","map":{"version":3,"names":["Address","bigIntToHex","bytesToHex","toBytes","BIGINT_0","TypeOutput","toType","Withdrawal","constructor","index","validatorIndex","address","amount","fromWithdrawalData","withdrawalData","indexData","validatorIndexData","addressData","amountData","BigInt","fromValuesArray","withdrawalArray","length","Error","toBytesArray","withdrawal","indexBytes","Uint8Array","validatorIndexBytes","addressBytes","bytes","amountBytes","raw","toValue","toJSON"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\withdrawal.ts"],"sourcesContent":["import { Address } from './address.js'\nimport { bigIntToHex, bytesToHex, toBytes } from './bytes.js'\nimport { BIGINT_0 } from './constants.js'\nimport { TypeOutput, toType } from './types.js'\n\nimport type { AddressLike, BigIntLike, PrefixedHexString } from './types.js'\n\n/**\n * Flexible input data type for EIP-4895 withdrawal data with amount in Gwei to\n * match CL representation and for eventual ssz withdrawalsRoot\n */\nexport type WithdrawalData = {\n  index: BigIntLike\n  validatorIndex: BigIntLike\n  address: AddressLike\n  amount: BigIntLike\n}\n\n/**\n * JSON RPC interface for EIP-4895 withdrawal data with amount in Gwei to\n * match CL representation and for eventual ssz withdrawalsRoot\n */\nexport interface JsonRpcWithdrawal {\n  index: PrefixedHexString // QUANTITY - bigint 8 bytes\n  validatorIndex: PrefixedHexString // QUANTITY - bigint 8 bytes\n  address: PrefixedHexString // DATA, 20 Bytes  address to withdraw to\n  amount: PrefixedHexString // QUANTITY - bigint amount in Gwei 8 bytes\n}\n\nexport type WithdrawalBytes = [Uint8Array, Uint8Array, Uint8Array, Uint8Array]\n\n/**\n * Representation of EIP-4895 withdrawal data\n */\nexport class Withdrawal {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n   * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n   */\n  constructor(\n    public readonly index: bigint,\n    public readonly validatorIndex: bigint,\n    public readonly address: Address,\n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    public readonly amount: bigint\n  ) {}\n\n  public static fromWithdrawalData(withdrawalData: WithdrawalData) {\n    const {\n      index: indexData,\n      validatorIndex: validatorIndexData,\n      address: addressData,\n      amount: amountData,\n    } = withdrawalData\n    const index = toType(indexData, TypeOutput.BigInt)\n    const validatorIndex = toType(validatorIndexData, TypeOutput.BigInt)\n    const address = addressData instanceof Address ? addressData : new Address(toBytes(addressData))\n    const amount = toType(amountData, TypeOutput.BigInt)\n\n    return new Withdrawal(index, validatorIndex, address, amount)\n  }\n\n  public static fromValuesArray(withdrawalArray: WithdrawalBytes) {\n    if (withdrawalArray.length !== 4) {\n      throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`)\n    }\n    const [index, validatorIndex, address, amount] = withdrawalArray\n    return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount })\n  }\n\n  /**\n   * Convert a withdrawal to a buffer array\n   * @param withdrawal the withdrawal to convert\n   * @returns buffer array of the withdrawal\n   */\n  public static toBytesArray(withdrawal: Withdrawal | WithdrawalData): WithdrawalBytes {\n    const { index, validatorIndex, address, amount } = withdrawal\n    const indexBytes =\n      toType(index, TypeOutput.BigInt) === BIGINT_0\n        ? new Uint8Array()\n        : toType(index, TypeOutput.Uint8Array)\n    const validatorIndexBytes =\n      toType(validatorIndex, TypeOutput.BigInt) === BIGINT_0\n        ? new Uint8Array()\n        : toType(validatorIndex, TypeOutput.Uint8Array)\n    const addressBytes =\n      address instanceof Address ? (<Address>address).bytes : toType(address, TypeOutput.Uint8Array)\n\n    const amountBytes =\n      toType(amount, TypeOutput.BigInt) === BIGINT_0\n        ? new Uint8Array()\n        : toType(amount, TypeOutput.Uint8Array)\n\n    return [indexBytes, validatorIndexBytes, addressBytes, amountBytes]\n  }\n\n  raw() {\n    return Withdrawal.toBytesArray(this)\n  }\n\n  toValue() {\n    return {\n      index: this.index,\n      validatorIndex: this.validatorIndex,\n      address: this.address.bytes,\n      amount: this.amount,\n    }\n  }\n\n  toJSON() {\n    return {\n      index: bigIntToHex(this.index),\n      validatorIndex: bigIntToHex(this.validatorIndex),\n      address: bytesToHex(this.address.bytes),\n      amount: bigIntToHex(this.amount),\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}