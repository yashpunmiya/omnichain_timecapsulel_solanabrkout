{"ast":null,"code":"import { EventEmitter as a } from \"events\";\nimport { FIVE_SECONDS as o, toMiliseconds as l } from \"@walletconnect/time\";\nimport { IEvents as v } from \"@walletconnect/events\";\nclass n extends v {\n  constructor(e) {\n    super();\n  }\n}\nconst s = o,\n  r = {\n    pulse: \"heartbeat_pulse\"\n  };\nclass i extends n {\n  constructor(e) {\n    super(e), this.events = new a(), this.interval = s, this.interval = e?.interval || s;\n  }\n  static async init(e) {\n    const t = new i(e);\n    return await t.init(), t;\n  }\n  async init() {\n    await this.initialize();\n  }\n  stop() {\n    clearInterval(this.intervalRef);\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async initialize() {\n    this.intervalRef = setInterval(() => this.pulse(), l(this.interval));\n  }\n  pulse() {\n    this.events.emit(r.pulse);\n  }\n}\nexport { r as HEARTBEAT_EVENTS, s as HEARTBEAT_INTERVAL, i as HeartBeat, n as IHeartBeat };","map":{"version":3,"names":[],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\heartbeat\\src\\types\\heartbeat.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\heartbeat\\src\\constants\\heartbeat.ts","C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\heartbeat\\src\\heartbeat.ts"],"sourcesContent":["import { IEvents } from \"@walletconnect/events\";\n\nexport interface HeartBeatOptions {\n  interval?: number; // in seconds\n}\n\nexport abstract class IHeartBeat extends IEvents {\n  public abstract interval: number;\n\n  // @ts-ignore - `opts` is not used in the abstract class\n  constructor(opts?: HeartBeatOptions) {\n    super();\n  }\n\n  public abstract init(): Promise<void>;\n  public abstract stop(): void;\n}\n","import { FIVE_SECONDS } from \"@walletconnect/time\";\n\nexport const HEARTBEAT_INTERVAL = FIVE_SECONDS;\n\nexport const HEARTBEAT_EVENTS = {\n  pulse: \"heartbeat_pulse\",\n};\n","import { EventEmitter } from \"events\";\nimport { toMiliseconds } from \"@walletconnect/time\";\n\nimport { IHeartBeat, HeartBeatOptions } from \"./types\";\n\nimport { HEARTBEAT_INTERVAL, HEARTBEAT_EVENTS } from \"./constants\";\n\nexport class HeartBeat extends IHeartBeat {\n  static async init(opts?: HeartBeatOptions) {\n    const heartbeat = new HeartBeat(opts);\n    await heartbeat.init();\n    return heartbeat;\n  }\n\n  public events = new EventEmitter();\n\n  public interval = HEARTBEAT_INTERVAL;\n  private intervalRef?: ReturnType<typeof setInterval>;\n\n  constructor(opts?: HeartBeatOptions) {\n    super(opts);\n    this.interval = opts?.interval || HEARTBEAT_INTERVAL;\n  }\n\n  public async init(): Promise<void> {\n    await this.initialize();\n  }\n\n  public stop(): void {\n    clearInterval(this.intervalRef);\n  }\n\n  public on(event: string, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize(): Promise<any> {\n    this.intervalRef = setInterval(() => this.pulse(), toMiliseconds(this.interval));\n  }\n\n  private pulse() {\n    this.events.emit(HEARTBEAT_EVENTS.pulse);\n  }\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}