{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoCoinInfo = exports.Network = exports.Type = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[\"type\"] = \"1\";\n  Keys[\"network\"] = \"2\";\n})(Keys || (Keys = {}));\nvar Type;\n(function (Type) {\n  Type[Type[\"bitcoin\"] = 0] = \"bitcoin\";\n})(Type = exports.Type || (exports.Type = {}));\nvar Network;\n(function (Network) {\n  Network[Network[\"mainnet\"] = 0] = \"mainnet\";\n  Network[Network[\"testnet\"] = 1] = \"testnet\";\n})(Network = exports.Network || (exports.Network = {}));\nclass CryptoCoinInfo extends RegistryItem_1.RegistryItem {\n  constructor(type, network) {\n    super();\n    this.type = type;\n    this.network = network;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO;\n    };\n    this.getType = () => {\n      return this.type || Type.bitcoin;\n    };\n    this.getNetwork = () => {\n      return this.network || Network.mainnet;\n    };\n    this.toDataItem = () => {\n      const map = {};\n      if (this.type) {\n        map[Keys.type] = this.type;\n      }\n      if (this.network) {\n        map[Keys.network] = this.network;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoCoinInfo = CryptoCoinInfo;\nCryptoCoinInfo.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const type = map[Keys.type];\n  const network = map[Keys.network];\n  return new CryptoCoinInfo(type, network);\n};\nCryptoCoinInfo.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoCoinInfo.fromDataItem(dataItem);\n};","map":{"version":3,"names":["lib_1","require","RegistryItem_1","RegistryType_1","Keys","Type","exports","Network","CryptoCoinInfo","RegistryItem","constructor","type","network","getRegistryType","RegistryTypes","CRYPTO_COIN_INFO","getType","bitcoin","getNetwork","mainnet","toDataItem","map","DataItem","fromDataItem","dataItem","getData","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry\\src\\CryptoCoinInfo.ts"],"sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\nimport { DataItemMap } from './types';\n\nenum Keys {\n  type = '1',\n  network = '2',\n}\n\nexport enum Type {\n  bitcoin = 0,\n}\n\nexport enum Network {\n  mainnet,\n  testnet,\n}\n\nexport class CryptoCoinInfo extends RegistryItem {\n  getRegistryType = () => {\n    return RegistryTypes.CRYPTO_COIN_INFO;\n  };\n\n  constructor(private type?: Type, private network?: Network) {\n    super();\n  }\n\n  public getType = () => {\n    return this.type || Type.bitcoin;\n  };\n\n  public getNetwork = () => {\n    return this.network || Network.mainnet;\n  };\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.type) {\n      map[Keys.type] = this.type;\n    }\n    if (this.network) {\n      map[Keys.network] = this.network;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const type = map[Keys.type];\n    const network = map[Keys.network];\n    return new CryptoCoinInfo(type, network);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoCoinInfo.fromDataItem(dataItem);\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AAGA,IAAKG,IAGJ;AAHD,WAAKA,IAAI;EACPA,IAAA,cAAU;EACVA,IAAA,iBAAa;AACf,CAAC,EAHIA,IAAI,KAAJA,IAAI;AAKT,IAAYC,IAEX;AAFD,WAAYA,IAAI;EACdA,IAAA,CAAAA,IAAA,4BAAW;AACb,CAAC,EAFWA,IAAI,GAAJC,OAAA,CAAAD,IAAI,KAAJC,OAAA,CAAAD,IAAI;AAIhB,IAAYE,OAGX;AAHD,WAAYA,OAAO;EACjBA,OAAA,CAAAA,OAAA,4BAAO;EACPA,OAAA,CAAAA,OAAA,4BAAO;AACT,CAAC,EAHWA,OAAO,GAAPD,OAAA,CAAAC,OAAO,KAAPD,OAAA,CAAAC,OAAO;AAKnB,MAAaC,cAAe,SAAQN,cAAA,CAAAO,YAAY;EAK9CC,YAAoBC,IAAW,EAAUC,OAAiB;IACxD,KAAK,EAAE;IADW,KAAAD,IAAI,GAAJA,IAAI;IAAiB,KAAAC,OAAO,GAAPA,OAAO;IAJhD,KAAAC,eAAe,GAAG,MAAK;MACrB,OAAOV,cAAA,CAAAW,aAAa,CAACC,gBAAgB;IACvC,CAAC;IAMM,KAAAC,OAAO,GAAG,MAAK;MACpB,OAAO,IAAI,CAACL,IAAI,IAAIN,IAAI,CAACY,OAAO;IAClC,CAAC;IAEM,KAAAC,UAAU,GAAG,MAAK;MACvB,OAAO,IAAI,CAACN,OAAO,IAAIL,OAAO,CAACY,OAAO;IACxC,CAAC;IAEM,KAAAC,UAAU,GAAG,MAAK;MACvB,MAAMC,GAAG,GAAgB,EAAE;MAC3B,IAAI,IAAI,CAACV,IAAI,EAAE;QACbU,GAAG,CAACjB,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI;;MAE5B,IAAI,IAAI,CAACC,OAAO,EAAE;QAChBS,GAAG,CAACjB,IAAI,CAACQ,OAAO,CAAC,GAAG,IAAI,CAACA,OAAO;;MAElC,OAAO,IAAIZ,KAAA,CAAAsB,QAAQ,CAACD,GAAG,CAAC;IAC1B,CAAC;EAnBD;;AAPFf,OAAA,CAAAE,cAAA,GAAAA,cAAA;AA4BgBA,cAAA,CAAAe,YAAY,GAAIC,QAAkB,IAAI;EAClD,MAAMH,GAAG,GAAGG,QAAQ,CAACC,OAAO,EAAE;EAC9B,MAAMd,IAAI,GAAGU,GAAG,CAACjB,IAAI,CAACO,IAAI,CAAC;EAC3B,MAAMC,OAAO,GAAGS,GAAG,CAACjB,IAAI,CAACQ,OAAO,CAAC;EACjC,OAAO,IAAIJ,cAAc,CAACG,IAAI,EAAEC,OAAO,CAAC;AAC1C,CAAC;AAEaJ,cAAA,CAAAkB,QAAQ,GAAIC,YAAoB,IAAI;EAChD,MAAMH,QAAQ,GAAG,IAAAxB,KAAA,CAAA4B,gBAAgB,EAACD,YAAY,CAAC;EAC/C,OAAOnB,cAAc,CAACe,YAAY,CAACC,QAAQ,CAAC;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}