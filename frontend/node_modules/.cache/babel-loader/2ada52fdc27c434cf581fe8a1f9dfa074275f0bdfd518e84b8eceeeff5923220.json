{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinInfo = exports.MiscNetworkInfo = exports.EthereumNetworkInfoDefinitionValues = exports.EthereumNetworkInfo = exports.BitcoinNetworkInfo = exports.BlockchainLink = exports.CoinSupport = exports.CoinObj = exports.Network = exports.Bip32 = void 0;\nconst device_utils_1 = require(\"@trezor/device-utils\");\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nconst fees_1 = require(\"./fees\");\nexports.Bip32 = schema_utils_1.Type.Object({\n  public: schema_utils_1.Type.Number(),\n  private: schema_utils_1.Type.Number()\n});\nexports.Network = schema_utils_1.Type.Object({\n  messagePrefix: schema_utils_1.Type.String(),\n  bech32: schema_utils_1.Type.String(),\n  bip32: exports.Bip32,\n  pubKeyHash: schema_utils_1.Type.Number(),\n  scriptHash: schema_utils_1.Type.Number(),\n  wif: schema_utils_1.Type.Number(),\n  forkId: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n});\nexports.CoinObj = schema_utils_1.Type.Object({\n  coin: schema_utils_1.Type.String(),\n  identity: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n});\nexports.CoinSupport = schema_utils_1.Type.Composite([schema_utils_1.Type.Object({\n  connect: schema_utils_1.Type.Boolean()\n}), schema_utils_1.Type.Record(schema_utils_1.Type.KeyOfEnum(device_utils_1.DeviceModelInternal), schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Literal(false)]))]);\nexports.BlockchainLink = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.String(),\n  url: schema_utils_1.Type.Array(schema_utils_1.Type.String())\n});\nconst Common = schema_utils_1.Type.Object({\n  label: schema_utils_1.Type.String(),\n  name: schema_utils_1.Type.String(),\n  shortcut: schema_utils_1.Type.String(),\n  slip44: schema_utils_1.Type.Number(),\n  support: exports.CoinSupport,\n  decimals: schema_utils_1.Type.Number(),\n  blockchainLink: schema_utils_1.Type.Optional(exports.BlockchainLink),\n  blockTime: schema_utils_1.Type.Number(),\n  minFee: schema_utils_1.Type.Number(),\n  maxFee: schema_utils_1.Type.Number(),\n  defaultFees: schema_utils_1.Type.Array(fees_1.FeeLevel)\n});\nexports.BitcoinNetworkInfo = schema_utils_1.Type.Intersect([Common, schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('bitcoin'),\n  cashAddrPrefix: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  curveName: schema_utils_1.Type.String(),\n  dustLimit: schema_utils_1.Type.Number(),\n  forceBip143: schema_utils_1.Type.Boolean(),\n  hashGenesisBlock: schema_utils_1.Type.String(),\n  maxAddressLength: schema_utils_1.Type.Number(),\n  maxFeeSatoshiKb: schema_utils_1.Type.Number(),\n  minAddressLength: schema_utils_1.Type.Number(),\n  minFeeSatoshiKb: schema_utils_1.Type.Number(),\n  segwit: schema_utils_1.Type.Boolean(),\n  xPubMagic: schema_utils_1.Type.Number(),\n  xPubMagicSegwitNative: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  xPubMagicSegwit: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  taproot: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  network: exports.Network,\n  isBitcoin: schema_utils_1.Type.Boolean()\n})]);\nexports.EthereumNetworkInfo = schema_utils_1.Type.Intersect([Common, schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Literal('ethereum'),\n  chainId: schema_utils_1.Type.Number(),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined())\n})]);\nexports.EthereumNetworkInfoDefinitionValues = schema_utils_1.Type.Omit(exports.EthereumNetworkInfo, ['minFee', 'maxFee', 'defaultFees', 'blockTime']);\nexports.MiscNetworkInfo = schema_utils_1.Type.Intersect([Common, schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Union([schema_utils_1.Type.Literal('misc'), schema_utils_1.Type.Literal('nem')]),\n  curve: schema_utils_1.Type.String(),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined())\n})]);\nexports.CoinInfo = schema_utils_1.Type.Union([exports.BitcoinNetworkInfo, exports.EthereumNetworkInfo, exports.MiscNetworkInfo]);\n//# sourceMappingURL=coinInfo.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}