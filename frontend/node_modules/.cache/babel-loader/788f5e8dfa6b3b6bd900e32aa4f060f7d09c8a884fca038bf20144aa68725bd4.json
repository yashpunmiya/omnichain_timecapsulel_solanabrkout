{"ast":null,"code":"import { RpcRequestError } from '../../errors/request.js';\nimport { UrlRequiredError } from '../../errors/transport.js';\nimport { getSocket } from '../../utils/rpc/compat.js';\nimport { getWebSocketRpcClient } from '../../utils/rpc/webSocket.js';\nimport { createTransport } from './createTransport.js';\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\nurl, config = {}) {\n  const {\n    keepAlive,\n    key = 'webSocket',\n    methods,\n    name = 'WebSocket JSON-RPC',\n    reconnect,\n    retryDelay\n  } = config;\n  return ({\n    chain,\n    retryCount: retryCount_,\n    timeout: timeout_\n  }) => {\n    const retryCount = config.retryCount ?? retryCount_;\n    const timeout = timeout_ ?? config.timeout ?? 10_000;\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0];\n    if (!url_) throw new UrlRequiredError();\n    return createTransport({\n      key,\n      methods,\n      name,\n      async request({\n        method,\n        params\n      }) {\n        const body = {\n          method,\n          params\n        };\n        const rpcClient = await getWebSocketRpcClient(url_, {\n          keepAlive,\n          reconnect\n        });\n        const {\n          error,\n          result\n        } = await rpcClient.requestAsync({\n          body,\n          timeout\n        });\n        if (error) throw new RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'webSocket'\n    }, {\n      getSocket() {\n        return getSocket(url_);\n      },\n      getRpcClient() {\n        return getWebSocketRpcClient(url_);\n      },\n      async subscribe({\n        params,\n        onData,\n        onError\n      }) {\n        const rpcClient = await getWebSocketRpcClient(url_);\n        const {\n          result: subscriptionId\n        } = await new Promise((resolve, reject) => rpcClient.request({\n          body: {\n            method: 'eth_subscribe',\n            params\n          },\n          onError(error) {\n            reject(error);\n            onError?.(error);\n            return;\n          },\n          onResponse(response) {\n            if (response.error) {\n              reject(response.error);\n              onError?.(response.error);\n              return;\n            }\n            if (typeof response.id === 'number') {\n              resolve(response);\n              return;\n            }\n            if (response.method !== 'eth_subscription') return;\n            onData(response.params);\n          }\n        }));\n        return {\n          subscriptionId,\n          async unsubscribe() {\n            return new Promise(resolve => rpcClient.request({\n              body: {\n                method: 'eth_unsubscribe',\n                params: [subscriptionId]\n              },\n              onResponse: resolve\n            }));\n          }\n        };\n      }\n    });\n  };\n}","map":{"version":3,"names":["RpcRequestError","UrlRequiredError","getSocket","getWebSocketRpcClient","createTransport","webSocket","url","config","keepAlive","key","methods","name","reconnect","retryDelay","chain","retryCount","retryCount_","timeout","timeout_","url_","rpcUrls","default","request","method","params","body","rpcClient","error","result","requestAsync","type","getRpcClient","subscribe","onData","onError","subscriptionId","Promise","resolve","reject","onResponse","response","id","unsubscribe"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\clients\\transports\\webSocket.ts"],"sourcesContent":["import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcResponse } from '../../types/rpc.js'\nimport { getSocket } from '../../utils/rpc/compat.js'\nimport type { SocketRpcClient } from '../../utils/rpc/socket.js'\nimport {\n  type GetWebSocketRpcClientOptions,\n  getWebSocketRpcClient,\n} from '../../utils/rpc/webSocket.js'\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\ntype WebSocketTransportSubscribeParameters = {\n  onData: (data: RpcResponse) => void\n  onError?: ((error: any) => void) | undefined\n}\n\ntype WebSocketTransportSubscribeReturnType = {\n  subscriptionId: Hash\n  unsubscribe: () => Promise<RpcResponse<boolean>>\n}\n\ntype WebSocketTransportSubscribe = {\n  subscribe(\n    args: WebSocketTransportSubscribeParameters & {\n      /**\n       * @description Add information about compiled contracts\n       * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_addcompilationresult\n       */\n      params: ['newHeads']\n    },\n  ): Promise<WebSocketTransportSubscribeReturnType>\n}\n\nexport type WebSocketTransportConfig = {\n  /**\n   * Whether or not to send keep-alive ping messages.\n   * @default true\n   */\n  keepAlive?: GetWebSocketRpcClientOptions['keepAlive'] | undefined\n  /** The key of the WebSocket transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the WebSocket transport. */\n  name?: TransportConfig['name'] | undefined\n  /**\n   * Whether or not to attempt to reconnect on socket failure.\n   * @default true\n   */\n  reconnect?: GetWebSocketRpcClientOptions['reconnect'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type WebSocketTransport = Transport<\n  'webSocket',\n  {\n    /**\n     * @deprecated use `getRpcClient` instead.\n     */\n    getSocket(): Promise<WebSocket>\n    getRpcClient(): Promise<SocketRpcClient<WebSocket>>\n    subscribe: WebSocketTransportSubscribe['subscribe']\n  }\n>\n\nexport type WebSocketTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: WebSocketTransportConfig = {},\n): WebSocketTransport {\n  const {\n    keepAlive,\n    key = 'webSocket',\n    methods,\n    name = 'WebSocket JSON-RPC',\n    reconnect,\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0]\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n          const rpcClient = await getWebSocketRpcClient(url_, {\n            keepAlive,\n            reconnect,\n          })\n          const { error, result } = await rpcClient.requestAsync({\n            body,\n            timeout,\n          })\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'webSocket',\n      },\n      {\n        getSocket() {\n          return getSocket(url_)\n        },\n        getRpcClient() {\n          return getWebSocketRpcClient(url_)\n        },\n        async subscribe({ params, onData, onError }: any) {\n          const rpcClient = await getWebSocketRpcClient(url_)\n          const { result: subscriptionId } = await new Promise<any>(\n            (resolve, reject) =>\n              rpcClient.request({\n                body: {\n                  method: 'eth_subscribe',\n                  params,\n                },\n                onError(error) {\n                  reject(error)\n                  onError?.(error)\n                  return\n                },\n                onResponse(response) {\n                  if (response.error) {\n                    reject(response.error)\n                    onError?.(response.error)\n                    return\n                  }\n\n                  if (typeof response.id === 'number') {\n                    resolve(response)\n                    return\n                  }\n                  if (response.method !== 'eth_subscription') return\n                  onData(response.params)\n                },\n              }),\n          )\n          return {\n            subscriptionId,\n            async unsubscribe() {\n              return new Promise<any>((resolve) =>\n                rpcClient.request({\n                  body: {\n                    method: 'eth_unsubscribe',\n                    params: [subscriptionId],\n                  },\n                  onResponse: resolve,\n                }),\n              )\n            },\n          }\n        },\n      },\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}