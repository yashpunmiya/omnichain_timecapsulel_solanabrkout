{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoKeypath = void 0;\nconst lib_1 = require(\"./lib\");\nconst PathComponent_1 = require(\"./PathComponent\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"components\"] = 1] = \"components\";\n  Keys[Keys[\"source_fingerprint\"] = 2] = \"source_fingerprint\";\n  Keys[Keys[\"depth\"] = 3] = \"depth\";\n})(Keys || (Keys = {}));\nclass CryptoKeypath extends RegistryItem_1.RegistryItem {\n  constructor(components = [], sourceFingerprint, depth) {\n    super();\n    this.components = components;\n    this.sourceFingerprint = sourceFingerprint;\n    this.depth = depth;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_KEYPATH;\n    };\n    this.getPath = () => {\n      if (this.components.length === 0) {\n        return undefined;\n      }\n      const components = this.components.map(component => {\n        return `${component.isWildcard() ? '*' : component.getIndex()}${component.isHardened() ? \"'\" : ''}`;\n      });\n      return components.join('/');\n    };\n    this.getComponents = () => this.components;\n    this.getSourceFingerprint = () => this.sourceFingerprint;\n    this.getDepth = () => this.depth;\n    this.toDataItem = () => {\n      const map = {};\n      const components = [];\n      this.components && this.components.forEach(component => {\n        if (component.isWildcard()) {\n          components.push([]);\n        } else {\n          components.push(component.getIndex());\n        }\n        components.push(component.isHardened());\n      });\n      map[Keys.components] = components;\n      if (this.sourceFingerprint) {\n        map[Keys.source_fingerprint] = this.sourceFingerprint.readUInt32BE(0);\n      }\n      if (this.depth !== undefined) {\n        map[Keys.depth] = this.depth;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoKeypath = CryptoKeypath;\nCryptoKeypath.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const pathComponents = [];\n  const components = map[Keys.components];\n  if (components) {\n    for (let i = 0; i < components.length; i += 2) {\n      const isHardened = components[i + 1];\n      const path = components[i];\n      if (typeof path === 'number') {\n        pathComponents.push(new PathComponent_1.PathComponent({\n          index: path,\n          hardened: isHardened\n        }));\n      } else {\n        pathComponents.push(new PathComponent_1.PathComponent({\n          hardened: isHardened\n        }));\n      }\n    }\n  }\n  const _sourceFingerprint = map[Keys.source_fingerprint];\n  let sourceFingerprint;\n  if (_sourceFingerprint) {\n    sourceFingerprint = Buffer.alloc(4);\n    sourceFingerprint.writeUInt32BE(_sourceFingerprint, 0);\n  }\n  const depth = map[Keys.depth];\n  return new CryptoKeypath(pathComponents, sourceFingerprint, depth);\n};\nCryptoKeypath.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoKeypath.fromDataItem(dataItem);\n};\n//# sourceMappingURL=CryptoKeypath.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}