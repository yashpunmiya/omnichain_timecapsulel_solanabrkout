{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = c => (...values) => ({\n  // This property needs to remain unminified.\n  ['_$litDirective$']: c,\n  values\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n  constructor(_partInfo) {}\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n  /** @internal */\n  _$initialize(part, parent, attributeIndex) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part, props) {\n    return this.update(part, props);\n  }\n  update(_part, props) {\n    return this.render(...props);\n  }\n}\n//# sourceMappingURL=directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}