{"ast":null,"code":"import { InvalidAddressError } from '../errors/address.js';\nimport { isAddress } from '../utils/address/isAddress.js';\nimport { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js';\nexport function serializeTransaction(transaction, signature) {\n  if (isDeposit(transaction)) return serializeTransactionDeposit(transaction);\n  return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n  transaction: serializeTransaction\n};\nfunction serializeTransactionDeposit(transaction) {\n  assertTransactionDeposit(transaction);\n  const {\n    sourceHash,\n    data,\n    from,\n    gas,\n    isSystemTx,\n    mint,\n    to,\n    value\n  } = transaction;\n  const serializedTransaction = [sourceHash, from, to ?? '0x', mint ? toHex(mint) : '0x', value ? toHex(value) : '0x', gas ? toHex(gas) : '0x', isSystemTx ? '0x1' : '0x', data ?? '0x'];\n  return concatHex(['0x7e', toRlp(serializedTransaction)]);\n}\nfunction isDeposit(transaction) {\n  if (transaction.type === 'deposit') return true;\n  if (typeof transaction.sourceHash !== 'undefined') return true;\n  return false;\n}\nexport function assertTransactionDeposit(transaction) {\n  const {\n    from,\n    to\n  } = transaction;\n  if (from && !isAddress(from)) throw new InvalidAddressError({\n    address: from\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n}\n//# sourceMappingURL=serializers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}