{"ast":null,"code":"import { DecodeLogDataMismatch, DecodeLogTopicsMismatch } from '../../errors/abi.js';\nimport { InvalidInputRpcError } from '../../errors/rpc.js';\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js';\nimport { encodeEventTopics } from '../../utils/abi/encodeEventTopics.js';\nimport { formatLog } from '../../utils/formatters/log.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { createContractEventFilter } from './createContractEventFilter.js';\nimport { getBlockNumber } from './getBlockNumber.js';\nimport { getContractEvents } from './getContractEvents.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent(client, parameters) {\n  const {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_\n  } = parameters;\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_;\n    if (typeof fromBlock === 'bigint') return true;\n    if (client.transport.type === 'webSocket') return false;\n    if (client.transport.type === 'fallback' && client.transport.transports[0].config.type === 'webSocket') return false;\n    return true;\n  })();\n  const pollContractEvent = () => {\n    const strict = strict_ ?? false;\n    const observerId = stringify(['watchContractEvent', address, args, batch, client.uid, eventName, pollingInterval, strict, fromBlock]);\n    return observe(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      let previousBlockNumber;\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n;\n      let filter;\n      let initialized = false;\n      const unwatch = poll(async () => {\n        if (!initialized) {\n          try {\n            filter = await getAction(client, createContractEventFilter, 'createContractEventFilter')({\n              abi,\n              address,\n              args: args,\n              eventName: eventName,\n              strict: strict,\n              fromBlock\n            });\n          } catch {}\n          initialized = true;\n          return;\n        }\n        try {\n          let logs;\n          if (filter) {\n            logs = await getAction(client, getFilterChanges, 'getFilterChanges')({\n              filter\n            });\n          } else {\n            // If the filter doesn't exist, we will fall back to use `getLogs`.\n            // The fall back exists because some RPC Providers do not support filters.\n            // Fetch the block number to use for `getLogs`.\n            const blockNumber = await getAction(client, getBlockNumber, 'getBlockNumber')({});\n            // If the block number has changed, we will need to fetch the logs.\n            // If the block number doesn't exist, we are yet to reach the first poll interval,\n            // so do not emit any logs.\n            if (previousBlockNumber && previousBlockNumber < blockNumber) {\n              logs = await getAction(client, getContractEvents, 'getContractEvents')({\n                abi,\n                address,\n                args,\n                eventName,\n                fromBlock: previousBlockNumber + 1n,\n                toBlock: blockNumber,\n                strict\n              });\n            } else {\n              logs = [];\n            }\n            previousBlockNumber = blockNumber;\n          }\n          if (logs.length === 0) return;\n          if (batch) emit.onLogs(logs);else for (const log of logs) emit.onLogs([log]);\n        } catch (err) {\n          // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n          // Reinitialize the filter when this occurs\n          if (filter && err instanceof InvalidInputRpcError) initialized = false;\n          emit.onError?.(err);\n        }\n      }, {\n        emitOnBegin: true,\n        interval: pollingInterval\n      });\n      return async () => {\n        if (filter) await getAction(client, uninstallFilter, 'uninstallFilter')({\n          filter\n        });\n        unwatch();\n      };\n    });\n  };\n  const subscribeContractEvent = () => {\n    const strict = strict_ ?? false;\n    const observerId = stringify(['watchContractEvent', address, args, batch, client.uid, eventName, pollingInterval, strict]);\n    let active = true;\n    let unsubscribe = () => active = false;\n    return observe(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      ;\n      (async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(transport => transport.config.type === 'webSocket');\n              if (!transport) return client.transport;\n              return transport.value;\n            }\n            return client.transport;\n          })();\n          const topics = eventName ? encodeEventTopics({\n            abi: abi,\n            eventName: eventName,\n            args\n          }) : [];\n          const {\n            unsubscribe: unsubscribe_\n          } = await transport.subscribe({\n            params: ['logs', {\n              address,\n              topics\n            }],\n            onData(data) {\n              if (!active) return;\n              const log = data.result;\n              try {\n                const {\n                  eventName,\n                  args\n                } = decodeEventLog({\n                  abi: abi,\n                  data: log.data,\n                  topics: log.topics,\n                  strict: strict_\n                });\n                const formatted = formatLog(log, {\n                  args,\n                  eventName: eventName\n                });\n                emit.onLogs([formatted]);\n              } catch (err) {\n                let eventName;\n                let isUnnamed;\n                if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\n                  // If strict mode is on, and log data/topics do not match event definition, skip.\n                  if (strict_) return;\n                  eventName = err.abiItem.name;\n                  isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n                }\n                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                const formatted = formatLog(log, {\n                  args: isUnnamed ? [] : {},\n                  eventName\n                });\n                emit.onLogs([formatted]);\n              }\n            },\n            onError(error) {\n              emit.onError?.(error);\n            }\n          });\n          unsubscribe = unsubscribe_;\n          if (!active) unsubscribe();\n        } catch (err) {\n          onError?.(err);\n        }\n      })();\n      return () => unsubscribe();\n    });\n  };\n  return enablePolling ? pollContractEvent() : subscribeContractEvent();\n}","map":{"version":3,"names":["DecodeLogDataMismatch","DecodeLogTopicsMismatch","InvalidInputRpcError","decodeEventLog","encodeEventTopics","formatLog","getAction","observe","poll","stringify","createContractEventFilter","getBlockNumber","getContractEvents","getFilterChanges","uninstallFilter","watchContractEvent","client","parameters","abi","address","args","batch","eventName","fromBlock","onError","onLogs","poll_","pollingInterval","strict","strict_","enablePolling","transport","type","transports","config","pollContractEvent","observerId","uid","emit","previousBlockNumber","undefined","filter","initialized","unwatch","logs","blockNumber","toBlock","length","log","err","emitOnBegin","interval","subscribeContractEvent","active","unsubscribe","find","value","topics","unsubscribe_","subscribe","params","onData","data","result","formatted","isUnnamed","abiItem","name","inputs","some","x","error"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\watchContractEvent.ts"],"sourcesContent":["import type { Abi, Address, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber } from '../../types/block.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n} from '../../types/contract.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\nimport { createContractEventFilter } from './createContractEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport {\n  type GetContractEventsParameters,\n  getContractEvents,\n} from './getContractEvents.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type WatchContractEventOnLogsParameter<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n> = abi extends Abi\n  ? Abi extends abi\n    ? Log[]\n    : Log<bigint, number, false, ExtractAbiEvent<abi, eventName>, strict>[]\n  : Log[]\n\nexport type WatchContractEventOnLogsFn<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n> = (logs: WatchContractEventOnLogsParameter<abi, eventName, strict>) => void\n\nexport type WatchContractEventParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Contract ABI. */\n  abi: abi\n  args?:\n    | ContractEventArgs<\n        abi,\n        eventName extends ContractEventName<abi>\n          ? eventName\n          : ContractEventName<abi>\n      >\n    | undefined\n  /** Contract event. */\n  eventName?: eventName | ContractEventName<abi> | undefined\n  /** Block to start listening from. */\n  fromBlock?: BlockNumber<bigint> | undefined\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchContractEventOnLogsFn<\n    abi,\n    eventName extends ContractEventName<abi>\n      ? eventName\n      : ContractEventName<abi>,\n    strict\n  >\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n} & GetPollOptions<transport>\n\nexport type WatchContractEventReturnType = () => void\n\nexport type WatchContractEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n>(\n  client: Client<transport, chain>,\n  parameters: WatchContractEventParameters<abi, eventName, strict, transport>,\n): WatchContractEventReturnType {\n  const {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  } = parameters\n\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (typeof fromBlock === 'bigint') return true\n    if (client.transport.type === 'webSocket') return false\n    if (\n      client.transport.type === 'fallback' &&\n      client.transport.transports[0].config.type === 'webSocket'\n    )\n      return false\n    return true\n  })()\n\n  const pollContractEvent = () => {\n    const strict = strict_ ?? false\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n      strict,\n      fromBlock,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\n      let filter: Filter<'event', abi, eventName> | undefined\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                args: args as any,\n                eventName: eventName as any,\n                strict: strict as any,\n                fromBlock,\n              })) as Filter<'event', abi, eventName>\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber < blockNumber) {\n                logs = await getAction(\n                  client,\n                  getContractEvents,\n                  'getContractEvents',\n                )({\n                  abi,\n                  address,\n                  args,\n                  eventName,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                  strict,\n                } as {} as GetContractEventsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitialize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeContractEvent = () => {\n    const strict = strict_ ?? false\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n      strict,\n    ])\n\n    let active = true\n    let unsubscribe = () => (active = false)\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      ;(async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(\n                (transport: ReturnType<Transport>) =>\n                  transport.config.type === 'webSocket',\n              )\n              if (!transport) return client.transport\n              return transport.value\n            }\n            return client.transport\n          })()\n\n          const topics: LogTopic[] = eventName\n            ? encodeEventTopics({\n                abi: abi,\n                eventName: eventName,\n                args,\n              } as EncodeEventTopicsParameters)\n            : []\n\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n            params: ['logs', { address, topics }],\n            onData(data: any) {\n              if (!active) return\n              const log = data.result\n              try {\n                const { eventName, args } = decodeEventLog({\n                  abi: abi,\n                  data: log.data,\n                  topics: log.topics as any,\n                  strict: strict_,\n                })\n                const formatted = formatLog(log, {\n                  args,\n                  eventName: eventName as string,\n                })\n                emit.onLogs([formatted] as any)\n              } catch (err) {\n                let eventName: string | undefined\n                let isUnnamed: boolean | undefined\n                if (\n                  err instanceof DecodeLogDataMismatch ||\n                  err instanceof DecodeLogTopicsMismatch\n                ) {\n                  // If strict mode is on, and log data/topics do not match event definition, skip.\n                  if (strict_) return\n                  eventName = err.abiItem.name\n                  isUnnamed = err.abiItem.inputs?.some(\n                    (x) => !('name' in x && x.name),\n                  )\n                }\n\n                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                const formatted = formatLog(log, {\n                  args: isUnnamed ? [] : {},\n                  eventName,\n                })\n                emit.onLogs([formatted] as any)\n              }\n            },\n            onError(error: Error) {\n              emit.onError?.(error)\n            },\n          })\n          unsubscribe = unsubscribe_\n          if (!active) unsubscribe()\n        } catch (err) {\n          onError?.(err as Error)\n        }\n      })()\n      return () => unsubscribe()\n    })\n  }\n\n  return enablePolling ? pollContractEvent() : subscribeContractEvent()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}