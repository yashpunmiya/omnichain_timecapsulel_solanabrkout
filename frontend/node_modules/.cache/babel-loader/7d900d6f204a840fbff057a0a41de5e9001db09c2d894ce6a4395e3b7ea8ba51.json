{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Modifies the balance of an account.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBalance\n *\n * @param client - Client to use\n * @param parameters – {@link SetBalanceParameters}\n *\n * @example\n * import { createTestClient, http, parseEther } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBalance } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBalance(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *   value: parseEther('1'),\n * })\n */\nexport async function setBalance(client, {\n  address,\n  value\n}) {\n  if (client.mode === 'ganache') await client.request({\n    method: 'evm_setAccountBalance',\n    params: [address, numberToHex(value)]\n  });else await client.request({\n    method: `${client.mode}_setBalance`,\n    params: [address, numberToHex(value)]\n  });\n}","map":{"version":3,"names":["numberToHex","setBalance","client","address","value","mode","request","method","params"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\test\\setBalance.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetBalanceParameters = {\n  /** The account address. */\n  address: Address\n  /** Amount (in wei) to set */\n  value: bigint\n}\n\nexport type SetBalanceErrorType = RequestErrorType | ErrorType\n\n/**\n * Modifies the balance of an account.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBalance\n *\n * @param client - Client to use\n * @param parameters – {@link SetBalanceParameters}\n *\n * @example\n * import { createTestClient, http, parseEther } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBalance } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBalance(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *   value: parseEther('1'),\n * })\n */\nexport async function setBalance<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, chain, account, false>,\n  { address, value }: SetBalanceParameters,\n) {\n  if (client.mode === 'ganache')\n    await client.request({\n      method: 'evm_setAccountBalance',\n      params: [address, numberToHex(value)],\n    })\n  else\n    await client.request({\n      method: `${client.mode}_setBalance`,\n      params: [address, numberToHex(value)],\n    })\n}\n"],"mappings":"AAWA,SAASA,WAAW,QAAQ,+BAA+B;AAW3D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,UAAUA,CAI9BC,MAAoE,EACpE;EAAEC,OAAO;EAAEC;AAAK,CAAwB;EAExC,IAAIF,MAAM,CAACG,IAAI,KAAK,SAAS,EAC3B,MAAMH,MAAM,CAACI,OAAO,CAAC;IACnBC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE,CAACL,OAAO,EAAEH,WAAW,CAACI,KAAK,CAAC;GACrC,CAAC,MAEF,MAAMF,MAAM,CAACI,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGL,MAAM,CAACG,IAAI,aAAa;IACnCG,MAAM,EAAE,CAACL,OAAO,EAAEH,WAAW,CAACI,KAAK,CAAC;GACrC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}