{"ast":null,"code":"import { hashTypedData } from '../../utils/signature/hashTypedData.js';\nimport { verifyHash } from './verifyHash.js';\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData(client, parameters) {\n  const {\n    address,\n    factory,\n    factoryData,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  } = parameters;\n  const hash = hashTypedData({\n    message,\n    primaryType,\n    types,\n    domain\n  });\n  return verifyHash(client, {\n    address,\n    factory: factory,\n    factoryData: factoryData,\n    hash,\n    signature,\n    ...callRequest\n  });\n}","map":{"version":3,"names":["hashTypedData","verifyHash","verifyTypedData","client","parameters","address","factory","factoryData","signature","message","primaryType","types","domain","callRequest","hash"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\verifyTypedData.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = Omit<VerifyHashParameters, 'hash'> &\n  TypedDataDefinition<typedData, primaryType> & {\n    /** The address to verify the typed data for. */\n    address: Address\n    /** The signature to verify */\n    signature: Hex | ByteArray | Signature\n  }\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | HashTypedDataErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  chain extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: VerifyTypedDataParameters<typedData, primaryType>,\n): Promise<VerifyTypedDataReturnType> {\n  const {\n    address,\n    factory,\n    factoryData,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  } = parameters as VerifyTypedDataParameters\n  const hash = hashTypedData({ message, primaryType, types, domain })\n  return verifyHash(client, {\n    address,\n    factory: factory!,\n    factoryData: factoryData!,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"],"mappings":"AAQA,SAEEA,aAAa,QACR,wCAAwC;AAC/C,SAGEC,UAAU,QACL,iBAAiB;AAoBxB;;;;;;;;;AASA,OAAO,eAAeC,eAAeA,CAKnCC,MAAgC,EAChCC,UAA6D;EAE7D,MAAM;IACJC,OAAO;IACPC,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC,OAAO;IACPC,WAAW;IACXC,KAAK;IACLC,MAAM;IACN,GAAGC;EAAW,CACf,GAAGT,UAAuC;EAC3C,MAAMU,IAAI,GAAGd,aAAa,CAAC;IAAES,OAAO;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAM,CAAE,CAAC;EACnE,OAAOX,UAAU,CAACE,MAAM,EAAE;IACxBE,OAAO;IACPC,OAAO,EAAEA,OAAQ;IACjBC,WAAW,EAAEA,WAAY;IACzBO,IAAI;IACJN,SAAS;IACT,GAAGK;GACJ,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}