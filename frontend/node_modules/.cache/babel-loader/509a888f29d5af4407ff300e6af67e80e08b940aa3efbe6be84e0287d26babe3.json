{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\nimport { getCompatibleStyle, adoptStyles } from './css-tag.js';\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\nexport * from './css-tag.js';\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf\n} = Object;\nconst NODE_MODE = false;\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\nconst DEV_MODE = true;\nlet issueWarning;\nconst trustedTypes = global.trustedTypes;\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';\nconst polyfillSupport = DEV_MODE ? global.reactiveElementPolyfillSupportDevMode : global.reactiveElementPolyfillSupport;\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  global.litIssuedWarnings ??= new Set();\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!global.litIssuedWarnings.has(warning) && !global.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      global.litIssuedWarnings.add(warning);\n    }\n  };\n  queueMicrotask(() => {\n    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);\n    // Issue polyfill support warning.\n    if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n      issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` + `the \\`polyfill-support\\` module has not been loaded.`);\n    }\n  });\n}\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE ? event => {\n  const shouldEmit = global.emitLitDebugLogEvents;\n  if (!shouldEmit) {\n    return;\n  }\n  global.dispatchEvent(new CustomEvent('lit-debug', {\n    detail: event\n  }));\n} : undefined;\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = (prop, _obj) => prop;\nexport const defaultConverter = {\n  toAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n  fromAttribute(value, type) {\n    let fromValue = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value);\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => !is(value, old);\nconst defaultPropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  useDefault: false,\n  hasChanged: notEqual\n};\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\nSymbol.metadata ??= Symbol('metadata');\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap();\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport class ReactiveElement\n// In the Node build, this `extends` clause will be substituted with\n// `(globalThis.HTMLElement ?? HTMLElement)`.\n//\n// This way, we will first prefer any global `HTMLElement` polyfill that the\n// user has assigned, and then fall back to the `HTMLElement` shim which has\n// been imported (see note at the top of this file about how this import is\n// generated by Rollup). Note that the `HTMLElement` variable has been\n// shadowed by this import, so it no longer refers to the global.\nextends HTMLElement {\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()];\n  }\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(name, options = defaultPropertyDeclaration) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      options.attribute = false;\n    }\n    this.__prepare();\n    // Whether this property is wrapping accessors.\n    // Helps control the initial value change and reflection logic.\n    if (this.prototype.hasOwnProperty(name)) {\n      options = Object.create(options);\n      options.wrapped = true;\n    }\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE ?\n      // Use Symbol.for in dev mode to make it easier to maintain state\n      // when doing HMR.\n      Symbol.for(`${String(name)} (@property() cache)`) : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static getPropertyDescriptor(name, key, options) {\n    const {\n      get,\n      set\n    } = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get() {\n        return this[key];\n      },\n      set(v) {\n        this[key] = v;\n      }\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(`Field ${JSON.stringify(String(name))} on ` + `${this.name} was declared as a reactive property ` + `but it's actually declared as a value on the prototype. ` + `Usually this is due to using @property or @state on a method.`);\n      }\n      issueWarning('reactive-property-without-getter', `Field ${JSON.stringify(String(name))} on ` + `${this.name} was declared as a reactive property ` + `but it does not have a getter. This will be an error in a ` + `future version of Lit.`);\n    }\n    return {\n      get,\n      set(value) {\n        const oldValue = get?.call(this);\n        set?.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  static __prepare() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this);\n    superCtor.finalize();\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [...getOwnPropertyNames(props), ...getOwnPropertySymbols(props)];\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning('no-override-create-property', 'Overriding ReactiveElement.createProperty() is deprecated. ' + 'The override will not be called with standard decorators');\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning('no-override-get-property-descriptor', 'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' + 'The override will not be called with standard decorators');\n      }\n    }\n  }\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  static finalizeStyles(styles) {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set(styles.flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  static __attributeNameForProperty(name, options) {\n    const attribute = options.attribute;\n    return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;\n  }\n  constructor() {\n    super();\n    this.__instanceProperties = undefined;\n    /**\n     * True if there is a pending update as a result of calling `requestUpdate()`.\n     * Should only be read.\n     * @category updates\n     */\n    this.isUpdatePending = false;\n    /**\n     * Is set to `true` after the first update. The element code cannot assume\n     * that `renderRoot` exists before the element `hasUpdated`.\n     * @category updates\n     */\n    this.hasUpdated = false;\n    /**\n     * Name of currently reflecting property\n     */\n    this.__reflectingProperty = null;\n    this.__initialize();\n  }\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  __initialize() {\n    this.__updatePromise = new Promise(res => this.enableUpdating = res);\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that must run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    this.constructor._initializers?.forEach(i => i(this));\n  }\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller) {\n    this.__controllers?.delete(controller);\n  }\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs.\n   */\n  __saveInstanceProperties() {\n    const instanceProperties = new Map();\n    const elementProperties = this.constructor.elementProperties;\n    for (const p of elementProperties.keys()) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  createRenderRoot() {\n    const renderRoot = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);\n    adoptStyles(renderRoot, this.constructor.elementStyles);\n    return renderRoot;\n  }\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    this.renderRoot ??= this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach(c => c.hostConnected?.());\n  }\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  enableUpdating(_requestedUpdate) {}\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach(c => c.hostDisconnected?.());\n  }\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [responding to attribute changes](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#responding_to_attribute_changes)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(name, _old, value) {\n    this._$attributeToProperty(name, value);\n  }\n  __propertyToAttribute(name, value) {\n    const elemProperties = this.constructor.elementProperties;\n    const options = elemProperties.get(name);\n    const attr = this.constructor.__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter = options.converter?.toAttribute !== undefined ? options.converter : defaultConverter;\n      const attrValue = converter.toAttribute(value, options.type);\n      if (DEV_MODE && this.constructor.enabledWarnings.includes('migration') && attrValue === undefined) {\n        issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` + `undefined on element ${this.localName}. The attribute will be ` + `removed, but in the previous version of \\`ReactiveElement\\`, ` + `the attribute would not have changed.`);\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n  /** @internal */\n  _$attributeToProperty(name, value) {\n    const ctor = this.constructor;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = ctor.__attributeToPropertyMap.get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter = typeof options.converter === 'function' ? {\n        fromAttribute: options.converter\n      } : options.converter?.fromAttribute !== undefined ? options.converter : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName] = converter.fromAttribute(value, options.type) ?? this.__defaultValues?.get(propName) ??\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      null;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(name, oldValue, options) {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && name instanceof Event) {\n        issueWarning(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);\n      }\n      const ctor = this.constructor;\n      const newValue = this[name];\n      options ??= ctor.getPropertyOptions(name);\n      const changed = (options.hasChanged ?? notEqual)(newValue, oldValue) ||\n      // When there is no change, check a corner case that can occur when\n      // 1. there's a initial value which was not reflected\n      // 2. the property is subsequently set to this value.\n      // For example, `prop: {useDefault: true, reflect: true}`\n      // and el.prop = 'foo'. This should be considered a change if the\n      // attribute is not set because we will now reflect the property to the attribute.\n      options.useDefault && options.reflect && newValue === this.__defaultValues?.get(name) && !this.hasAttribute(ctor.__attributeNameForProperty(name, options));\n      if (changed) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n  /**\n   * @internal\n   */\n  _$changeProperty(name, oldValue, {\n    useDefault,\n    reflect,\n    wrapped\n  }, initializeValue) {\n    // Record default value when useDefault is used. This allows us to\n    // restore this value when the attribute is removed.\n    if (useDefault && !(this.__defaultValues ??= new Map()).has(name)) {\n      this.__defaultValues.set(name, initializeValue ?? oldValue ?? this[name]);\n      // if this is not wrapping an accessor, it must be an initial setting\n      // and in this case we do not want to record the change or reflect.\n      if (wrapped !== true || initializeValue !== undefined) {\n        return;\n      }\n    }\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      // On the initial change, the old value should be `undefined`, except\n      // with `useDefault`\n      if (!this.hasUpdated && !useDefault) {\n        oldValue = undefined;\n      }\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set()).add(name);\n    }\n  }\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  scheduleUpdate() {\n    const result = this.performUpdate();\n    if (DEV_MODE && this.constructor.enabledWarnings.includes('async-perform-update') && typeof result?.then === 'function') {\n      issueWarning('async-perform-update', `Element ${this.localName} returned a Promise from performUpdate(). ` + `This behavior is deprecated and will be removed in a future ` + `version of ReactiveElement.`);\n    }\n    return result;\n  }\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  performUpdate() {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({\n      kind: 'update'\n    });\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      this.renderRoot ??= this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(p => this.hasOwnProperty(p) && p in getPrototypeOf(this));\n        if (shadowedProperties.length) {\n          throw new Error(`The following properties on element ${this.localName} will not ` + `trigger updates as expected because they are set using class ` + `fields: ${shadowedProperties.join(', ')}. ` + `Native class fields and some compiled output will overwrite ` + `accessors used for detecting changes. See ` + `https://lit.dev/msg/class-field-shadowing ` + `for more information.`);\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p] = value;\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // `changedProperties` map, but only for the case of properties created\n      // via `createProperty` on accessors, which will not have already\n      // populated the `changedProperties` map since they are not set.\n      // We can't know if these accessors had initializers, so we just set\n      // them anyway - a difference from experimental decorators on fields and\n      // standard decorators on auto-accessors.\n      // For context see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = this.constructor.elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          const {\n            wrapped\n          } = options;\n          const value = this[p];\n          if (wrapped === true && !this._$changedProperties.has(p) && value !== undefined) {\n            this._$changeProperty(p, undefined, options, value);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach(c => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  willUpdate(_changedProperties) {}\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties) {\n    this.__controllers?.forEach(c => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (DEV_MODE && this.isUpdatePending && this.constructor.enabledWarnings.includes('change-in-update')) {\n      issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` + `(generally because a property was set) ` + `after an update completed, causing a new update to be scheduled. ` + `This is inefficient and should be avoided unless the next update ` + `can only be scheduled as a side effect of the previous update.`);\n    }\n  }\n  __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  getUpdateComplete() {\n    return this.__updatePromise;\n  }\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  shouldUpdate(_changedProperties) {\n    return true;\n  }\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  update(_changedProperties) {\n    // The forEach() expression will only run when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach(p => this.__propertyToAttribute(p, this[p]));\n    this.__markUpdated();\n  }\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  updated(_changedProperties) {}\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  firstUpdated(_changedProperties) {}\n}\n/**\n * Memoized list of all element styles.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category styles\n */\nReactiveElement.elementStyles = [];\n/**\n * Options used when calling `attachShadow`. Set this property to customize\n * the options for the shadowRoot; for example, to create a closed\n * shadowRoot: `{mode: 'closed'}`.\n *\n * Note, these options are used in `createRenderRoot`. If this method\n * is customized, options should be respected if possible.\n * @nocollapse\n * @category rendering\n */\nReactiveElement.shadowRootOptions = {\n  mode: 'open'\n};\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\nReactiveElement[JSCompiler_renameProperty('elementProperties', ReactiveElement)] = new Map();\nReactiveElement[JSCompiler_renameProperty('finalized', ReactiveElement)] = new Map();\n// Apply polyfills if available\npolyfillSupport?.({\n  ReactiveElement\n});\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update', 'async-perform-update'];\n  const ensureOwnWarnings = function (ctor) {\n    if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\n      ctor.enabledWarnings = ctor.enabledWarnings.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings.includes(warning)) {\n      this.enabledWarnings.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings.splice(i, 1);\n    }\n  };\n}\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.1.0');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  queueMicrotask(() => {\n    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);\n  });\n}","map":{"version":3,"names":["getCompatibleStyle","adoptStyles","is","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","Object","NODE_MODE","global","globalThis","customElements","DEV_MODE","issueWarning","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupportDevMode","reactiveElementPolyfillSupport","litIssuedWarnings","Set","code","warning","has","console","warn","add","queueMicrotask","ShadyDOM","inUse","undefined","debugLogEvent","event","shouldEmit","emitLitDebugLogEvents","dispatchEvent","CustomEvent","detail","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Array","JSON","stringify","fromAttribute","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","useDefault","hasChanged","Symbol","metadata","litPropertyMetadata","WeakMap","ReactiveElement","HTMLElement","addInitializer","initializer","__prepare","_initializers","push","observedAttributes","finalize","__attributeToPropertyMap","keys","createProperty","name","options","state","prototype","hasOwnProperty","create","wrapped","elementProperties","set","noAccessor","key","for","descriptor","getPropertyDescriptor","get","v","Error","oldValue","call","requestUpdate","configurable","enumerable","getPropertyOptions","superCtor","Map","finalized","props","properties","propKeys","p","attr","__attributeNameForProperty","elementStyles","finalizeStyles","styles","isArray","flat","Infinity","reverse","s","unshift","toLowerCase","constructor","__instanceProperties","isUpdatePending","hasUpdated","__reflectingProperty","__initialize","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","forEach","i","addController","controller","__controllers","renderRoot","isConnected","hostConnected","removeController","delete","instanceProperties","size","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","elemProperties","attrValue","enabledWarnings","includes","localName","removeAttribute","setAttribute","ctor","propName","__defaultValues","Event","newValue","changed","hasAttribute","_$changeProperty","__enqueueUpdate","initializeValue","__reflectingProperties","reject","result","scheduleUpdate","performUpdate","then","kind","shadowedProperties","filter","length","join","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","mode","ensureOwnWarnings","slice","enableWarning","disableWarning","indexOf","splice","reactiveElementVersions"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@lit\\reactive-element\\src\\reactive-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  global.litIssuedWarnings ??= new Set();\n\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (\n      !global.litIssuedWarnings!.has(warning) &&\n      !global.litIssuedWarnings!.has(code)\n    ) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  queueMicrotask(() => {\n    issueWarning(\n      'dev-mode',\n      `Lit is in dev mode. Not recommended for production!`\n    );\n\n    // Issue polyfill support warning.\n    if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n      issueWarning(\n        'polyfill-support-missing',\n        `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n          `the \\`polyfill-support\\` module has not been loaded.`\n      );\n    }\n  });\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n\n  /**\n   * When `true`, uses the initial value of the property as the default value,\n   * which changes how attributes are handled:\n   *  - The initial value does *not* reflect, even if the `reflect` option is `true`.\n   *    Subsequent changes to the property will reflect, even if they are equal to the\n   *     default value.\n   *  - When the attribute is removed, the property is set to the default value\n   *  - The initial value will not trigger an old value in the `changedProperties` map\n   *    argument to update lifecycle methods.\n   *\n   * When set, properties must be initialized, either with a field initializer, or an\n   * assignment in the constructor. Not initializing the property may lead to\n   * improper handling of subsequent property assignments.\n   *\n   * While this behavior is opt-in, most properties that reflect to attributes should\n   * use `useDefault: true` so that their initial values do not reflect.\n   */\n  useDefault?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  useDefault: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    // Whether this property is wrapping accessors.\n    // Helps control the initial value change and reflection logic.\n    if (this.prototype.hasOwnProperty(name)) {\n      options = Object.create(options);\n      options.wrapped = true;\n    }\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get,\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set?.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n        ? attribute\n        : typeof name === 'string'\n          ? name.toLowerCase()\n          : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Records property default values when the\n   * `useDefault` option is used.\n   */\n  private __defaultValues?: Map<PropertyKey, unknown>;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that must run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs.\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [responding to attribute changes](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#responding_to_attribute_changes)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n            ? options.converter\n            : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] =\n        converter.fromAttribute!(value, options.type) ??\n        this.__defaultValues?.get(propName) ??\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (null as any);\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      const ctor = this.constructor as typeof ReactiveElement;\n      const newValue = this[name as keyof this];\n      options ??= ctor.getPropertyOptions(name);\n      const changed =\n        (options.hasChanged ?? notEqual)(newValue, oldValue) ||\n        // When there is no change, check a corner case that can occur when\n        // 1. there's a initial value which was not reflected\n        // 2. the property is subsequently set to this value.\n        // For example, `prop: {useDefault: true, reflect: true}`\n        // and el.prop = 'foo'. This should be considered a change if the\n        // attribute is not set because we will now reflect the property to the attribute.\n        (options.useDefault &&\n          options.reflect &&\n          newValue === this.__defaultValues?.get(name) &&\n          !this.hasAttribute(ctor.__attributeNameForProperty(name, options)!));\n      if (changed) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    {useDefault, reflect, wrapped}: PropertyDeclaration,\n    initializeValue?: unknown\n  ) {\n    // Record default value when useDefault is used. This allows us to\n    // restore this value when the attribute is removed.\n    if (useDefault && !(this.__defaultValues ??= new Map()).has(name)) {\n      this.__defaultValues.set(\n        name,\n        initializeValue ?? oldValue ?? this[name as keyof this]\n      );\n      // if this is not wrapping an accessor, it must be an initial setting\n      // and in this case we do not want to record the change or reflect.\n      if (wrapped !== true || initializeValue !== undefined) {\n        return;\n      }\n    }\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      // On the initial change, the old value should be `undefined`, except\n      // with `useDefault`\n      if (!this.hasUpdated && !useDefault) {\n        oldValue = undefined;\n      }\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // `changedProperties` map, but only for the case of properties created\n      // via `createProperty` on accessors, which will not have already\n      // populated the `changedProperties` map since they are not set.\n      // We can't know if these accessors had initializers, so we just set\n      // them anyway - a difference from experimental decorators on fields and\n      // standard decorators on auto-accessors.\n      // For context see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          const {wrapped} = options;\n          const value = this[p as keyof this];\n          if (\n            wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            value !== undefined\n          ) {\n            this._$changeProperty(p, undefined, options, value);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.1.0');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  queueMicrotask(() => {\n    issueWarning!(\n      'multiple-versions',\n      `Multiple versions of Lit loaded. Loading multiple versions ` +\n        `is not recommended.`\n    );\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}