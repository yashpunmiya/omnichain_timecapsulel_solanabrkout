{"ast":null,"code":"import { UnknownNodeError } from '../../errors/node.js';\nimport { TransactionExecutionError } from '../../errors/transaction.js';\nimport { getNodeError } from './getNodeError.js';\nexport function getTransactionError(err, {\n  docsPath,\n  ...args\n}) {\n  const cause = (() => {\n    const cause = getNodeError(err, args);\n    if (cause instanceof UnknownNodeError) return err;\n    return cause;\n  })();\n  return new TransactionExecutionError(cause, {\n    docsPath,\n    ...args\n  });\n}","map":{"version":3,"names":["UnknownNodeError","TransactionExecutionError","getNodeError","getTransactionError","err","docsPath","args","cause"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\errors\\getTransactionError.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport {\n  TransactionExecutionError,\n  type TransactionExecutionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetTransactionErrorParameters = Omit<\n  SendTransactionParameters,\n  'account' | 'chain'\n> & {\n  account: Account | null\n  chain?: Chain | undefined\n  docsPath?: string | undefined\n}\n\nexport type GetTransactionErrorReturnType<cause = ErrorType> = Omit<\n  TransactionExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getTransactionError<err extends ErrorType<string>>(\n  err: err,\n  { docsPath, ...args }: GetTransactionErrorParameters,\n): GetTransactionErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new TransactionExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetTransactionErrorReturnType<err>\n}\n"],"mappings":"AAGA,SAASA,gBAAgB,QAAQ,sBAAsB;AACvD,SACEC,yBAAyB,QAEpB,6BAA6B;AAIpC,SAGEC,YAAY,QACP,mBAAmB;AAgB1B,OAAM,SAAUC,mBAAmBA,CACjCC,GAAQ,EACR;EAAEC,QAAQ;EAAE,GAAGC;AAAI,CAAiC;EAEpD,MAAMC,KAAK,GAAG,CAAC,MAAK;IAClB,MAAMA,KAAK,GAAGL,YAAY,CACxBE,GAAsB,EACtBE,IAA8B,CAC/B;IACD,IAAIC,KAAK,YAAYP,gBAAgB,EAAE,OAAOI,GAAsB;IACpE,OAAOG,KAAK;EACd,CAAC,EAAC,CAAE;EACJ,OAAO,IAAIN,yBAAyB,CAACM,KAAK,EAAE;IAC1CF,QAAQ;IACR,GAAGC;GACJ,CAAuC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}