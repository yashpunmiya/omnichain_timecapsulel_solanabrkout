{"ast":null,"code":"import { useWalletMultiButton } from '@solana/wallet-adapter-base-ui';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { BaseWalletConnectionButton } from './BaseWalletConnectionButton.js';\nimport { useWalletModal } from './useWalletModal.js';\nexport function BaseWalletMultiButton({\n  children,\n  labels,\n  ...props\n}) {\n  const {\n    setVisible: setModalVisible\n  } = useWalletModal();\n  const {\n    buttonState,\n    onConnect,\n    onDisconnect,\n    publicKey,\n    walletIcon,\n    walletName\n  } = useWalletMultiButton({\n    onSelectWallet() {\n      setModalVisible(true);\n    }\n  });\n  const [copied, setCopied] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    const listener = event => {\n      const node = ref.current;\n      // Do nothing if clicking dropdown or its descendants\n      if (!node || node.contains(event.target)) return;\n      setMenuOpen(false);\n    };\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, []);\n  const content = useMemo(() => {\n    if (children) {\n      return children;\n    } else if (publicKey) {\n      const base58 = publicKey.toBase58();\n      return base58.slice(0, 4) + '..' + base58.slice(-4);\n    } else if (buttonState === 'connecting' || buttonState === 'has-wallet') {\n      return labels[buttonState];\n    } else {\n      return labels['no-wallet'];\n    }\n  }, [buttonState, children, labels, publicKey]);\n  return React.createElement(\"div\", {\n    className: \"wallet-adapter-dropdown\"\n  }, React.createElement(BaseWalletConnectionButton, {\n    ...props,\n    \"aria-expanded\": menuOpen,\n    style: {\n      pointerEvents: menuOpen ? 'none' : 'auto',\n      ...props.style\n    },\n    onClick: () => {\n      switch (buttonState) {\n        case 'no-wallet':\n          setModalVisible(true);\n          break;\n        case 'has-wallet':\n          if (onConnect) {\n            onConnect();\n          }\n          break;\n        case 'connected':\n          setMenuOpen(true);\n          break;\n      }\n    },\n    walletIcon: walletIcon,\n    walletName: walletName\n  }, content), React.createElement(\"ul\", {\n    \"aria-label\": \"dropdown-list\",\n    className: `wallet-adapter-dropdown-list ${menuOpen && 'wallet-adapter-dropdown-list-active'}`,\n    ref: ref,\n    role: \"menu\"\n  }, publicKey ? React.createElement(\"li\", {\n    className: \"wallet-adapter-dropdown-list-item\",\n    onClick: async () => {\n      await navigator.clipboard.writeText(publicKey.toBase58());\n      setCopied(true);\n      setTimeout(() => setCopied(false), 400);\n    },\n    role: \"menuitem\"\n  }, copied ? labels['copied'] : labels['copy-address']) : null, React.createElement(\"li\", {\n    className: \"wallet-adapter-dropdown-list-item\",\n    onClick: () => {\n      setModalVisible(true);\n      setMenuOpen(false);\n    },\n    role: \"menuitem\"\n  }, labels['change-wallet']), onDisconnect ? React.createElement(\"li\", {\n    className: \"wallet-adapter-dropdown-list-item\",\n    onClick: () => {\n      onDisconnect();\n      setMenuOpen(false);\n    },\n    role: \"menuitem\"\n  }, labels['disconnect']) : null));\n}\n//# sourceMappingURL=BaseWalletMultiButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}