{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { EnsUtil } from '../utils/EnsUtil.js';\nimport { StorageUtil } from '../utils/StorageUtil.js';\nimport { AccountController } from './AccountController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { RouterController } from './RouterController.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  suggestions: [],\n  loading: false\n});\n// -- Controller ---------------------------------------- //\nexport const EnsController = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  async resolveName(name) {\n    try {\n      return await BlockchainApiController.lookupEnsName(name);\n    } catch (e) {\n      const error = e;\n      throw new Error(error?.reasons?.[0]?.description || 'Error resolving name');\n    }\n  },\n  async isNameRegistered(name) {\n    try {\n      await BlockchainApiController.lookupEnsName(name);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  async getSuggestions(value) {\n    try {\n      state.loading = true;\n      state.suggestions = [];\n      const response = await BlockchainApiController.getEnsNameSuggestions(value);\n      state.suggestions = response.suggestions.map(suggestion => ({\n        ...suggestion,\n        name: suggestion.name\n      })) || [];\n      return state.suggestions;\n    } catch (e) {\n      const errorMessage = this.parseEnsApiError(e, 'Error fetching name suggestions');\n      throw new Error(errorMessage);\n    } finally {\n      state.loading = false;\n    }\n  },\n  async getNamesForAddress(address) {\n    try {\n      const network = ChainController.state.activeCaipNetwork;\n      if (!network) {\n        return [];\n      }\n      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);\n      if (cachedEns) {\n        return cachedEns;\n      }\n      const response = await BlockchainApiController.reverseLookupEnsName({\n        address\n      });\n      StorageUtil.updateEnsCache({\n        address,\n        ens: response,\n        timestamp: Date.now()\n      });\n      return response;\n    } catch (e) {\n      const errorMessage = this.parseEnsApiError(e, 'Error fetching names for address');\n      throw new Error(errorMessage);\n    }\n  },\n  async registerName(name) {\n    const network = ChainController.state.activeCaipNetwork;\n    if (!network) {\n      throw new Error('Network not found');\n    }\n    const address = AccountController.state.address;\n    const emailConnector = ConnectorController.getAuthConnector();\n    if (!address || !emailConnector) {\n      throw new Error('Address or auth connector not found');\n    }\n    state.loading = true;\n    try {\n      const message = JSON.stringify({\n        name,\n        attributes: {},\n        // Unix timestamp\n        timestamp: Math.floor(Date.now() / 1000)\n      });\n      RouterController.pushTransactionStack({\n        view: 'RegisterAccountNameSuccess',\n        goBack: false,\n        replace: true,\n        onCancel() {\n          state.loading = false;\n        }\n      });\n      const signature = await ConnectionController.signMessage(message);\n      const networkId = network.id;\n      if (!networkId) {\n        throw new Error('Network not found');\n      }\n      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));\n      await BlockchainApiController.registerEnsName({\n        coinType,\n        address: address,\n        signature: signature,\n        message\n      });\n      AccountController.setProfileName(name, network.chainNamespace);\n      RouterController.replace('RegisterAccountNameSuccess');\n    } catch (e) {\n      const errorMessage = this.parseEnsApiError(e, `Error registering name ${name}`);\n      RouterController.replace('RegisterAccountName');\n      throw new Error(errorMessage);\n    } finally {\n      state.loading = false;\n    }\n  },\n  validateName(name) {\n    return /^[a-zA-Z0-9-]{4,}$/u.test(name);\n  },\n  parseEnsApiError(error, defaultError) {\n    const ensError = error;\n    return ensError?.reasons?.[0]?.description || defaultError;\n  }\n};\n//# sourceMappingURL=EnsController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}