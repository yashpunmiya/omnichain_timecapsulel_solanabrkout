{"ast":null,"code":"/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    a: 'field',\n    b: 'field'\n  }, {\n    allowedPrivateKeyLengths: 'array',\n    wrapPrivateKey: 'boolean',\n    isTorsionFree: 'function',\n    clearCofactor: 'function',\n    allowInfinityPoint: 'boolean',\n    fromBytes: 'function',\n    toBytes: 'function'\n  });\n  const {\n    endo,\n    Fp,\n    a\n  } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({\n    ...opts\n  });\n}\nconst {\n  bytesToNumberBE: b2n,\n  hexToBytes: h2b\n} = ut;\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag, data) => {\n      const {\n        Err: E\n      } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded(len.length / 2 | 128) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag, data) {\n      const {\n        Err: E\n      } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 127;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = length << 8 | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return {\n        v,\n        l: data.subarray(pos + length)\n      };\n    }\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num) {\n      const {\n        Err: E\n      } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data) {\n      const {\n        Err: E\n      } = DER;\n      if (data[0] & 128) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    }\n  },\n  toSig(hex) {\n    // parse DER signature\n    const {\n      Err: E,\n      _int: int,\n      _tlv: tlv\n    } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const {\n      v: seqBytes,\n      l: seqLeftBytes\n    } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const {\n      v: rBytes,\n      l: rLeftBytes\n    } = tlv.decode(0x02, seqBytes);\n    const {\n      v: sBytes,\n      l: sLeftBytes\n    } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return {\n      r: int.decode(rBytes),\n      s: int.decode(sBytes)\n    };\n  },\n  hexFromSig(sig) {\n    const {\n      _tlv: tlv,\n      _int: int\n    } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n  const CURVE = validatePointOpts(opts);\n  const {\n    Fp\n  } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n  const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {\n    const a = point.toAffine();\n    return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n  });\n  const fromBytes = CURVE.fromBytes || (bytes => {\n    // const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n    return {\n      x,\n      y\n    };\n  });\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    const {\n      a,\n      b\n    } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num) {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key) {\n    const {\n      allowedPrivateKeyLengths: lengths,\n      nByteLength,\n      wrapPrivateKey,\n      n: N\n    } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num;\n    try {\n      num = typeof key === 'bigint' ? key : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n  function assertPrjPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p, iz) => {\n    const {\n      px: x,\n      py: y,\n      pz: z\n    } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return {\n      x,\n      y\n    };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return {\n      x: Fp.ZERO,\n      y: Fp.ZERO\n    };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return {\n      x: ax,\n      y: ay\n    };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized(p => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const {\n      x,\n      y\n    } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point {\n    constructor(px, py, pz) {\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p) {\n      const {\n        x,\n        y\n      } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = i => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n    // Multiscalar Multiplication\n    static msm(points, scalars) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // A point on curve is valid if it conforms to equation.\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    hasEvenY() {\n      const {\n        y\n      } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n    /**\n     * Compare one point to another.\n     */\n    equals(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate() {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const {\n        a,\n        b\n      } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc) {\n      const {\n        endo,\n        n: N\n      } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this)) return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n      // Case c: endomorphism\n      let {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      const {\n        endo,\n        n: N\n      } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point, fake; // Fake point is used to const-time mult\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = endo.splitScalar(scalar);\n        let {\n          p: k1p,\n          f: f1p\n        } = this.wNAF(k1);\n        let {\n          p: k2p,\n          f: f2p\n        } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const {\n          p,\n          f\n        } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q, a, b) {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (P, a // Select faster multiply() method\n      ) => a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz) {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree() {\n      const {\n        h: cofactor,\n        isTorsionFree\n      } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor() {\n      const {\n        h: cofactor,\n        clearCofactor\n      } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this);\n      return this.multiplyUnsafe(CURVE.h);\n    }\n    toRawBytes(isCompressed = true) {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n    toHex(isCompressed = true) {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  };\n}\nfunction validateOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    hash: 'hash',\n    hmac: 'function',\n    randomBytes: 'function'\n  }, {\n    bits2int: 'function',\n    bits2int_modN: 'function',\n    lowS: 'boolean'\n  });\n  return Object.freeze({\n    lowS: true,\n    ...opts\n  });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER\n  } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n  function modN(a) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a) {\n    return invert(a, CURVE_ORDER);\n  }\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed) {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n          x,\n          y\n        };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n      }\n    }\n  });\n  const numToNByteStr = num => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature {\n    constructor(r, s, recovery) {\n      this.r = r;\n      this.s = s;\n      this.recovery = recovery;\n      this.assertValidity();\n    }\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex) {\n      const {\n        r,\n        s\n      } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n    assertValidity() {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    recoverPublicKey(msgHash) {\n      const {\n        r,\n        s,\n        recovery: rec\n      } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({\n        r: this.r,\n        s: this.s\n      });\n    }\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  const utils = {\n    isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: () => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey, isCompressed = true) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB, isCompressed = true) {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int = CURVE.bits2int || function (bytes) {\n    // Our custom check \"just in case\"\n    if (bytes.length > 8192) throw new Error('input is too large');\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n    const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n    return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n    const {\n      hash,\n      randomBytes\n    } = CURVE;\n    let {\n      lowS,\n      prehash,\n      extraEntropy: ent\n    } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return {\n      seed,\n      k2sig\n    };\n  }\n  const defaultSigOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  const defaultVerOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey, opts = defaultSigOpts) {\n    const {\n      seed,\n      k2sig\n    } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const {\n      lowS,\n      prehash,\n      format\n    } = opts;\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der') throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj = !isHex && !format && typeof sg === 'object' && sg !== null && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n    if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    let _sig = undefined;\n    let P;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const {\n      r,\n      s\n    } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils\n  };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u, v) => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u, v) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return u => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const {\n      isValid,\n      value\n    } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return {\n      x,\n      y\n    };\n  };\n}","map":{"version":3,"names":["pippenger","validateBasic","wNAF","Field","getMinHashLength","invert","mapHashToField","mod","validateField","ut","abool","ensureBytes","memoized","validateSigVerOpts","opts","lowS","undefined","prehash","validatePointOpts","curve","validateObject","a","b","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","Fp","eql","ZERO","Error","beta","splitScalar","Object","freeze","bytesToNumberBE","b2n","hexToBytes","h2b","DERErr","constructor","m","DER","Err","_tlv","encode","tag","data","E","length","dataLen","len","numberToHexUnpadded","lenLen","t","decode","pos","first","isLong","lengthBytes","subarray","v","l","_int","num","_0n","hex","Number","parseInt","toSig","int","tlv","abytes","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","r","s","hexFromSig","sig","rs","ss","seq","BigInt","_1n","_2n","_3n","_4n","weierstrassPoints","CURVE","Fn","n","nBitLength","_c","point","_isCompressed","toAffine","concatBytes","Uint8Array","from","x","y","bytes","tail","BYTES","weierstrassEquation","x2","sqr","x3","mul","add","Gy","Gx","isWithinCurveOrder","inRange","normPrivateKeyToScalar","key","lengths","nByteLength","N","isBytes","bytesToHex","includes","padStart","error","aInRange","assertPrjPoint","other","Point","toAffineMemo","p","iz","px","py","pz","z","ONE","is0","inv","ax","ay","zz","assertValidMemo","isValid","left","right","fromAffine","i","normalizeZ","points","toInv","invertBatch","map","fromHex","P","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","scalars","_setWindowSize","windowSize","wnaf","setWindowSize","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","neg","double","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","wNAFCached","multiplyUnsafe","sc","I","hasPrecomputes","wNAFCachedUnsafe","k1neg","k1","k2neg","k2","k1p","k2p","d","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","Q","G","sum","h","cofactor","toRawBytes","isCompressed","toHex","_bits","Math","ceil","ProjectivePoint","validateOpts","hash","hmac","randomBytes","bits2int","bits2int_modN","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","ORDER","y2","sqrt","sqrtError","suffix","message","isYOdd","isHeadOdd","cl","ul","numToNByteStr","numberToBytesBE","isBiggerThanHalfOrder","number","HALF","normalizeS","slcNum","to","slice","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","precompute","getPublicKey","isProbPub","item","arr","str","getSharedSecret","privateA","publicB","delta","ORDER_MASK","bitMask","int2octets","prepSig","defaultSigOpts","some","k","extraEntropy","ent","h1int","seedArgs","e","push","seed","k2sig","kBytes","ik","q","normS","defaultVerOpts","sign","privKey","C","drbg","createHmacDrbg","outputLen","verify","signature","publicKey","sg","format","isHex","isObj","_sig","derError","is","SWUFpSqrtRatio","Z","o","c1","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","pow","c7","sqrtRatio","u","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","value","y1","mapToCurveSimpleSWU","A","B","tv6","div"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\@noble\\curves\\src\\abstract\\weierstrass.ts"],"sourcesContent":["/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport {\n  Field,\n  type IField,\n  getMinHashLength,\n  invert,\n  mapHashToField,\n  mod,\n  validateField,\n} from './modular.js';\nimport * as ut from './utils.js';\nimport { type CHash, type Hex, type PrivKey, abool, ensureBytes, memoized } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\"\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}