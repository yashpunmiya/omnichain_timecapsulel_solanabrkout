{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TemplateLiteralSyntax = TemplateLiteralSyntax;\nconst index_1 = require(\"../literal/index\");\nconst index_2 = require(\"../boolean/index\");\nconst index_3 = require(\"../bigint/index\");\nconst index_4 = require(\"../number/index\");\nconst index_5 = require(\"../string/index\");\nconst index_6 = require(\"../union/index\");\nconst index_7 = require(\"../never/index\");\n// ------------------------------------------------------------------\n// SyntaxParsers\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction* FromUnion(syntax) {\n  const trim = syntax.trim().replace(/\"|'/g, '');\n  return trim === 'boolean' ? yield (0, index_2.Boolean)() : trim === 'number' ? yield (0, index_4.Number)() : trim === 'bigint' ? yield (0, index_3.BigInt)() : trim === 'string' ? yield (0, index_5.String)() : yield (() => {\n    const literals = trim.split('|').map(literal => (0, index_1.Literal)(literal.trim()));\n    return literals.length === 0 ? (0, index_7.Never)() : literals.length === 1 ? literals[0] : (0, index_6.UnionEvaluated)(literals);\n  })();\n}\n// prettier-ignore\nfunction* FromTerminal(syntax) {\n  if (syntax[1] !== '{') {\n    const L = (0, index_1.Literal)('$');\n    const R = FromSyntax(syntax.slice(1));\n    return yield* [L, ...R];\n  }\n  for (let i = 2; i < syntax.length; i++) {\n    if (syntax[i] === '}') {\n      const L = FromUnion(syntax.slice(2, i));\n      const R = FromSyntax(syntax.slice(i + 1));\n      return yield* [...L, ...R];\n    }\n  }\n  yield (0, index_1.Literal)(syntax);\n}\n// prettier-ignore\nfunction* FromSyntax(syntax) {\n  for (let i = 0; i < syntax.length; i++) {\n    if (syntax[i] === '$') {\n      const L = (0, index_1.Literal)(syntax.slice(0, i));\n      const R = FromTerminal(syntax.slice(i));\n      return yield* [L, ...R];\n    }\n  }\n  yield (0, index_1.Literal)(syntax);\n}\n/** Parses TemplateLiteralSyntax and returns a tuple of TemplateLiteralKinds */\nfunction TemplateLiteralSyntax(syntax) {\n  return [...FromSyntax(syntax)];\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}