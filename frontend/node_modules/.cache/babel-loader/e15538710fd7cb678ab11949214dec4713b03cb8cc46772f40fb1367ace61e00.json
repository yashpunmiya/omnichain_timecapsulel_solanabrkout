{"ast":null,"code":"import { recoverAddress } from '../../../utils/signature/recoverAddress.js';\nimport { hashAuthorization } from './hashAuthorization.js';\nexport async function recoverAuthorizationAddress(parameters) {\n  const {\n    authorization,\n    signature\n  } = parameters;\n  return recoverAddress({\n    hash: hashAuthorization(authorization),\n    signature: signature ?? authorization\n  });\n}","map":{"version":3,"names":["recoverAddress","hashAuthorization","recoverAuthorizationAddress","parameters","authorization","signature","hash"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\experimental\\eip7702\\utils\\recoverAuthorizationAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../../types/misc.js'\nimport type { OneOf } from '../../../types/utils.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from '../../../utils/signature/recoverAddress.js'\nimport type {\n  Authorization,\n  SignedAuthorization,\n} from '../types/authorization.js'\nimport {\n  type HashAuthorizationErrorType,\n  hashAuthorization,\n} from './hashAuthorization.js'\n\nexport type RecoverAuthorizationAddressParameters<\n  authorization extends OneOf<Authorization | SignedAuthorization> = OneOf<\n    Authorization | SignedAuthorization\n  >,\n  //\n  _signature = Hex | ByteArray | OneOf<Signature | SignedAuthorization>,\n> = {\n  /**\n   * The Authorization object.\n   *\n   * - If an unsigned `authorization` is provided, the `signature` property is required.\n   * - If a signed `authorization` is provided, the `signature` property does not need to be provided.\n   */\n  authorization: authorization | OneOf<Authorization | SignedAuthorization>\n} & (authorization extends SignedAuthorization\n  ? {\n      /** Signature of the Authorization. Not required if the `authorization` is signed. */\n      signature?: _signature | undefined\n    }\n  : {\n      /** Signature of the Authorization. Not required if the `authorization` is signed. */\n      signature: _signature\n    })\n\nexport type RecoverAuthorizationAddressReturnType = Address\n\nexport type RecoverAuthorizationAddressErrorType =\n  | HashAuthorizationErrorType\n  | RecoverAddressErrorType\n  | ErrorType\n\nexport async function recoverAuthorizationAddress<\n  const authorization extends OneOf<Authorization | SignedAuthorization>,\n>(\n  parameters: RecoverAuthorizationAddressParameters<authorization>,\n): Promise<RecoverAuthorizationAddressReturnType> {\n  const { authorization, signature } = parameters\n\n  return recoverAddress({\n    hash: hashAuthorization(authorization as Authorization),\n    signature: (signature ?? authorization) as Signature,\n  })\n}\n"],"mappings":"AAKA,SAEEA,cAAc,QACT,4CAA4C;AAKnD,SAEEC,iBAAiB,QACZ,wBAAwB;AAiC/B,OAAO,eAAeC,2BAA2BA,CAG/CC,UAAgE;EAEhE,MAAM;IAAEC,aAAa;IAAEC;EAAS,CAAE,GAAGF,UAAU;EAE/C,OAAOH,cAAc,CAAC;IACpBM,IAAI,EAAEL,iBAAiB,CAACG,aAA8B,CAAC;IACvDC,SAAS,EAAGA,SAAS,IAAID;GAC1B,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}