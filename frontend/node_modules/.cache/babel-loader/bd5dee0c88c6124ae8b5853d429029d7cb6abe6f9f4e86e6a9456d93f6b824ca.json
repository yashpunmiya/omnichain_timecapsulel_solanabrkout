{"ast":null,"code":"import { SolanaChainIDs as Chains, WalletConnectRPCMethods } from './constants.js';\nexport function getChainsFromChainId(chainId) {\n  let chains = [chainId];\n  if (chainId === Chains.Mainnet || chainId === Chains.Deprecated_Mainnet) {\n    chains = [Chains.Mainnet, Chains.Deprecated_Mainnet];\n    if (chainId === Chains.Deprecated_Mainnet) {\n      console.warn(chainWarns.mainnet);\n    }\n  } else if (chainId === Chains.Deprecated_Devnet || chainId === Chains.Devnet) {\n    chains = [Chains.Devnet, Chains.Deprecated_Devnet];\n    if (Chains.Deprecated_Devnet) {\n      console.warn(chainWarns.devnet);\n    }\n  }\n  return chains;\n}\nconst chainWarns = {\n  mainnet: `You are using a deprecated chain ID for Solana Mainnet, please use ${Chains.Mainnet} instead.`,\n  devnet: `You are using a deprecated chain ID for Solana Devnet, please use ${Chains.Devnet} instead.`,\n  wallet: 'The connected wallet is using a deprecated chain ID for Solana. Please, contact them to upgrade. You can learn more at https://github.com/ChainAgnostic/namespaces/blob/main/solana/caip10.md#chain-ids'\n};\nexport function getDefaultChainFromSession(session, selectedChain) {\n  const chains = session.namespaces['solana']?.accounts.map(account => `solana:${account.split(':')[1]}`);\n  if (selectedChain === Chains.Mainnet) {\n    if (chains?.find(chain => chain === Chains.Mainnet)) {\n      return Chains.Mainnet;\n    }\n    console.warn(chainWarns.wallet);\n    return Chains.Deprecated_Mainnet;\n  } else if (selectedChain === Chains.Devnet) {\n    if (chains?.find(chain => chain === Chains.Devnet)) {\n      return Chains.Devnet;\n    }\n    console.warn(chainWarns.wallet);\n    return Chains.Deprecated_Devnet;\n  }\n  throw Error('WalletConnect Solana Adapter: Unable to get a default chain from the session.');\n}\nexport function getConnectParams(chainId) {\n  /** Workaround to support old chain Id configuration */\n  const chains = getChainsFromChainId(chainId);\n  return {\n    optionalNamespaces: {\n      solana: {\n        chains,\n        methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],\n        events: []\n      }\n    }\n  };\n}\nexport function isVersionedTransaction(transaction) {\n  return 'version' in transaction;\n}","map":{"version":3,"names":["SolanaChainIDs","Chains","WalletConnectRPCMethods","getChainsFromChainId","chainId","chains","Mainnet","Deprecated_Mainnet","console","warn","chainWarns","mainnet","Deprecated_Devnet","Devnet","devnet","wallet","getDefaultChainFromSession","session","selectedChain","namespaces","accounts","map","account","split","find","chain","Error","getConnectParams","optionalNamespaces","solana","methods","signTransaction","signMessage","events","isVersionedTransaction","transaction"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\solana-adapter\\src\\utils.ts"],"sourcesContent":["import type { Transaction, VersionedTransaction } from '@solana/web3.js'\nimport type { SessionTypes } from '@walletconnect/types'\nimport type { ConnectParams } from '@walletconnect/universal-provider'\n\nimport {\n  SolanaChainIDs as Chains,\n  WalletConnectChainID,\n  WalletConnectRPCMethods\n} from './constants.js'\n\ntype ChainIDType = (typeof Chains)[keyof typeof Chains]\n\nexport function getChainsFromChainId(chainId: ChainIDType) {\n  let chains: ChainIDType[] = [chainId]\n  if (chainId === Chains.Mainnet || chainId === Chains.Deprecated_Mainnet) {\n    chains = [Chains.Mainnet, Chains.Deprecated_Mainnet]\n\n    if (chainId === Chains.Deprecated_Mainnet) {\n      console.warn(chainWarns.mainnet)\n    }\n  } else if (chainId === Chains.Deprecated_Devnet || chainId === Chains.Devnet) {\n    chains = [Chains.Devnet, Chains.Deprecated_Devnet]\n    if (Chains.Deprecated_Devnet) {\n      console.warn(chainWarns.devnet)\n    }\n  }\n\n  return chains\n}\n\nconst chainWarns = {\n  mainnet: `You are using a deprecated chain ID for Solana Mainnet, please use ${Chains.Mainnet} instead.`,\n  devnet: `You are using a deprecated chain ID for Solana Devnet, please use ${Chains.Devnet} instead.`,\n  wallet:\n    'The connected wallet is using a deprecated chain ID for Solana. Please, contact them to upgrade. You can learn more at https://github.com/ChainAgnostic/namespaces/blob/main/solana/caip10.md#chain-ids'\n}\n\nexport function getDefaultChainFromSession(\n  session: SessionTypes.Struct,\n  selectedChain: ChainIDType\n) {\n  const chains = session.namespaces['solana']?.accounts.map(\n    account => `solana:${account.split(':')[1]}`\n  )\n\n  if (selectedChain === Chains.Mainnet) {\n    if (chains?.find(chain => chain === Chains.Mainnet)) {\n      return Chains.Mainnet\n    }\n    console.warn(chainWarns.wallet)\n\n    return Chains.Deprecated_Mainnet\n  } else if (selectedChain === Chains.Devnet) {\n    if (chains?.find(chain => chain === Chains.Devnet)) {\n      return Chains.Devnet\n    }\n    console.warn(chainWarns.wallet)\n\n    return Chains.Deprecated_Devnet\n  }\n  throw Error('WalletConnect Solana Adapter: Unable to get a default chain from the session.')\n}\n\nexport function getConnectParams(chainId: WalletConnectChainID): ConnectParams {\n  /** Workaround to support old chain Id configuration */\n  const chains = getChainsFromChainId(chainId)\n\n  return {\n    optionalNamespaces: {\n      solana: {\n        chains,\n        methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],\n        events: []\n      }\n    }\n  }\n}\n\nexport function isVersionedTransaction(\n  transaction: Transaction | VersionedTransaction\n): transaction is VersionedTransaction {\n  return 'version' in transaction\n}\n"],"mappings":"AAIA,SACEA,cAAc,IAAIC,MAAM,EAExBC,uBAAuB,QAClB,gBAAgB;AAIvB,OAAM,SAAUC,oBAAoBA,CAACC,OAAoB;EACvD,IAAIC,MAAM,GAAkB,CAACD,OAAO,CAAC;EACrC,IAAIA,OAAO,KAAKH,MAAM,CAACK,OAAO,IAAIF,OAAO,KAAKH,MAAM,CAACM,kBAAkB,EAAE;IACvEF,MAAM,GAAG,CAACJ,MAAM,CAACK,OAAO,EAAEL,MAAM,CAACM,kBAAkB,CAAC;IAEpD,IAAIH,OAAO,KAAKH,MAAM,CAACM,kBAAkB,EAAE;MACzCC,OAAO,CAACC,IAAI,CAACC,UAAU,CAACC,OAAO,CAAC;IAClC;EACF,CAAC,MAAM,IAAIP,OAAO,KAAKH,MAAM,CAACW,iBAAiB,IAAIR,OAAO,KAAKH,MAAM,CAACY,MAAM,EAAE;IAC5ER,MAAM,GAAG,CAACJ,MAAM,CAACY,MAAM,EAAEZ,MAAM,CAACW,iBAAiB,CAAC;IAClD,IAAIX,MAAM,CAACW,iBAAiB,EAAE;MAC5BJ,OAAO,CAACC,IAAI,CAACC,UAAU,CAACI,MAAM,CAAC;IACjC;EACF;EAEA,OAAOT,MAAM;AACf;AAEA,MAAMK,UAAU,GAAG;EACjBC,OAAO,EAAE,sEAAsEV,MAAM,CAACK,OAAO,WAAW;EACxGQ,MAAM,EAAE,qEAAqEb,MAAM,CAACY,MAAM,WAAW;EACrGE,MAAM,EACJ;CACH;AAED,OAAM,SAAUC,0BAA0BA,CACxCC,OAA4B,EAC5BC,aAA0B;EAE1B,MAAMb,MAAM,GAAGY,OAAO,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAEC,QAAQ,CAACC,GAAG,CACvDC,OAAO,IAAI,UAAUA,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAC7C;EAED,IAAIL,aAAa,KAAKjB,MAAM,CAACK,OAAO,EAAE;IACpC,IAAID,MAAM,EAAEmB,IAAI,CAACC,KAAK,IAAIA,KAAK,KAAKxB,MAAM,CAACK,OAAO,CAAC,EAAE;MACnD,OAAOL,MAAM,CAACK,OAAO;IACvB;IACAE,OAAO,CAACC,IAAI,CAACC,UAAU,CAACK,MAAM,CAAC;IAE/B,OAAOd,MAAM,CAACM,kBAAkB;EAClC,CAAC,MAAM,IAAIW,aAAa,KAAKjB,MAAM,CAACY,MAAM,EAAE;IAC1C,IAAIR,MAAM,EAAEmB,IAAI,CAACC,KAAK,IAAIA,KAAK,KAAKxB,MAAM,CAACY,MAAM,CAAC,EAAE;MAClD,OAAOZ,MAAM,CAACY,MAAM;IACtB;IACAL,OAAO,CAACC,IAAI,CAACC,UAAU,CAACK,MAAM,CAAC;IAE/B,OAAOd,MAAM,CAACW,iBAAiB;EACjC;EACA,MAAMc,KAAK,CAAC,+EAA+E,CAAC;AAC9F;AAEA,OAAM,SAAUC,gBAAgBA,CAACvB,OAA6B;EAC5D;EACA,MAAMC,MAAM,GAAGF,oBAAoB,CAACC,OAAO,CAAC;EAE5C,OAAO;IACLwB,kBAAkB,EAAE;MAClBC,MAAM,EAAE;QACNxB,MAAM;QACNyB,OAAO,EAAE,CAAC5B,uBAAuB,CAAC6B,eAAe,EAAE7B,uBAAuB,CAAC8B,WAAW,CAAC;QACvFC,MAAM,EAAE;;;GAGb;AACH;AAEA,OAAM,SAAUC,sBAAsBA,CACpCC,WAA+C;EAE/C,OAAO,SAAS,IAAIA,WAAW;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}