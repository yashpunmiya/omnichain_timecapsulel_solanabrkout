{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeDereferenceError = void 0;\nexports.Pushref = Pushref;\nexports.Deref = Deref;\nconst index_1 = require(\"../../type/error/index\");\nconst index_2 = require(\"../../type/symbols/index\");\nconst guard_1 = require(\"../guard/guard\");\nclass TypeDereferenceError extends index_1.TypeBoxError {\n  constructor(schema) {\n    super(`Unable to dereference schema with $id '${schema.$ref}'`);\n    this.schema = schema;\n  }\n}\nexports.TypeDereferenceError = TypeDereferenceError;\nfunction Resolve(schema, references) {\n  const target = references.find(target => target.$id === schema.$ref);\n  if (target === undefined) throw new TypeDereferenceError(schema);\n  return Deref(target, references);\n}\n/** `[Internal]` Pushes a schema onto references if the schema has an $id and does not exist on references */\nfunction Pushref(schema, references) {\n  if (!(0, guard_1.IsString)(schema.$id) || references.some(target => target.$id === schema.$id)) return references;\n  references.push(schema);\n  return references;\n}\n/** `[Internal]` Dereferences a schema from the references array or throws if not found */\nfunction Deref(schema, references) {\n  // prettier-ignore\n  return schema[index_2.Kind] === 'This' || schema[index_2.Kind] === 'Ref' ? Resolve(schema, references) : schema;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}