{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nexport function normalizeSignature(signature) {\n  let active = true;\n  let current = '';\n  let level = 0;\n  let result = '';\n  let valid = false;\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i];\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true;\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++;\n    if (char === ')') level--;\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue;\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result)) result = '';else {\n        result += char;\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true;\n          break;\n        }\n      }\n      continue;\n    }\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = '';\n        active = false;\n      }\n      continue;\n    }\n    result += char;\n    current += char;\n  }\n  if (!valid) throw new BaseError('Unable to normalize signature.');\n  return result;\n}","map":{"version":3,"names":["BaseError","normalizeSignature","signature","active","current","level","result","valid","i","length","char","includes"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\hash\\normalizeSignature.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\ntype NormalizeSignatureParameters = string\ntype NormalizeSignatureReturnType = string\nexport type NormalizeSignatureErrorType = ErrorType\n\nexport function normalizeSignature(\n  signature: NormalizeSignatureParameters,\n): NormalizeSignatureReturnType {\n  let active = true\n  let current = ''\n  let level = 0\n  let result = ''\n  let valid = false\n\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i]\n\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true\n\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++\n    if (char === ')') level--\n\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue\n\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result))\n        result = ''\n      else {\n        result += char\n\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true\n          break\n        }\n      }\n\n      continue\n    }\n\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = ''\n        active = false\n      }\n      continue\n    }\n\n    result += char\n    current += char\n  }\n\n  if (!valid) throw new BaseError('Unable to normalize signature.')\n\n  return result\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,sBAAsB;AAOhD,OAAM,SAAUC,kBAAkBA,CAChCC,SAAuC;EAEvC,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAG,KAAK;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC,MAAME,IAAI,GAAGR,SAAS,CAACM,CAAC,CAAC;IAEzB;IACA,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACG,QAAQ,CAACD,IAAI,CAAC,EAAEP,MAAM,GAAG,IAAI;IAEjD;IACA,IAAIO,IAAI,KAAK,GAAG,EAAEL,KAAK,EAAE;IACzB,IAAIK,IAAI,KAAK,GAAG,EAAEL,KAAK,EAAE;IAEzB;IACA,IAAI,CAACF,MAAM,EAAE;IAEb;IACA,IAAIE,KAAK,KAAK,CAAC,EAAE;MACf,IAAIK,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACL,MAAM,CAAC,EAC5DA,MAAM,GAAG,EAAE,MACR;QACHA,MAAM,IAAII,IAAI;QAEd;QACA,IAAIA,IAAI,KAAK,GAAG,EAAE;UAChBH,KAAK,GAAG,IAAI;UACZ;QACF;MACF;MAEA;IACF;IAEA;IACA,IAAIG,IAAI,KAAK,GAAG,EAAE;MAChB;MACA,IAAIR,SAAS,CAACM,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIJ,OAAO,KAAK,GAAG,IAAIA,OAAO,KAAK,IAAI,EAAE;QACnEA,OAAO,GAAG,EAAE;QACZD,MAAM,GAAG,KAAK;MAChB;MACA;IACF;IAEAG,MAAM,IAAII,IAAI;IACdN,OAAO,IAAIM,IAAI;EACjB;EAEA,IAAI,CAACH,KAAK,EAAE,MAAM,IAAIP,SAAS,CAAC,gCAAgC,CAAC;EAEjE,OAAOM,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}