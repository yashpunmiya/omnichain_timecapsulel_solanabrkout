{"ast":null,"code":"import { Eip1559FeesNotSupportedError } from '../../errors/fee.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas(client, args) {\n  return internal_estimateMaxPriorityFeePerGas(client, args);\n}\nexport async function internal_estimateMaxPriorityFeePerGas(client, args) {\n  const {\n    block: block_,\n    chain = client.chain,\n    request\n  } = args || {};\n  try {\n    const maxPriorityFeePerGas = chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee;\n    if (typeof maxPriorityFeePerGas === 'function') {\n      const block = block_ || (await getAction(client, getBlock, 'getBlock')({}));\n      const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({\n        block,\n        client,\n        request\n      });\n      if (maxPriorityFeePerGas_ === null) throw new Error();\n      return maxPriorityFeePerGas_;\n    }\n    if (typeof maxPriorityFeePerGas !== 'undefined') return maxPriorityFeePerGas;\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas'\n    });\n    return hexToBigInt(maxPriorityFeePerGasHex);\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([block_ ? Promise.resolve(block_) : getAction(client, getBlock, 'getBlock')({}), getAction(client, getGasPrice, 'getGasPrice')({})]);\n    if (typeof block.baseFeePerGas !== 'bigint') throw new Eip1559FeesNotSupportedError();\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;\n    if (maxPriorityFeePerGas < 0n) return 0n;\n    return maxPriorityFeePerGas;\n  }\n}","map":{"version":3,"names":["Eip1559FeesNotSupportedError","hexToBigInt","getAction","getBlock","getGasPrice","estimateMaxPriorityFeePerGas","client","args","internal_estimateMaxPriorityFeePerGas","block","block_","chain","request","maxPriorityFeePerGas","fees","defaultPriorityFee","maxPriorityFeePerGas_","Error","maxPriorityFeePerGasHex","method","gasPrice","Promise","all","resolve","baseFeePerGas"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\actions\\public\\estimateMaxPriorityFeePerGas.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, ChainFeesFnParameters } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateMaxPriorityFeePerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = GetChainParameter<chain, chainOverride>\n\nexport type EstimateMaxPriorityFeePerGasReturnType = bigint\n\nexport type EstimateMaxPriorityFeePerGasErrorType =\n  | GetBlockErrorType\n  | HexToBigIntErrorType\n  | RequestErrorType\n  | GetBlockErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args?:\n    | EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>\n    | undefined,\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  return internal_estimateMaxPriorityFeePerGas(client, args as any)\n}\n\nexport async function internal_estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride> & {\n    block?: Block | undefined\n    request?:\n      | PrepareTransactionRequestParameters<\n          chain,\n          Account | undefined,\n          chainOverride\n        >\n      | undefined\n  },\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  const { block: block_, chain = client.chain, request } = args || {}\n\n  try {\n    const maxPriorityFeePerGas =\n      chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee\n\n    if (typeof maxPriorityFeePerGas === 'function') {\n      const block =\n        block_ || (await getAction(client, getBlock, 'getBlock')({}))\n      const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({\n        block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n      if (maxPriorityFeePerGas_ === null) throw new Error()\n      return maxPriorityFeePerGas_\n    }\n\n    if (typeof maxPriorityFeePerGas !== 'undefined') return maxPriorityFeePerGas\n\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas',\n    })\n    return hexToBigInt(maxPriorityFeePerGasHex)\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([\n      block_\n        ? Promise.resolve(block_)\n        : getAction(client, getBlock, 'getBlock')({}),\n      getAction(client, getGasPrice, 'getGasPrice')({}),\n    ])\n\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas\n\n    if (maxPriorityFeePerGas < 0n) return 0n\n    return maxPriorityFeePerGas\n  }\n}\n"],"mappings":"AAEA,SACEA,4BAA4B,QAEvB,qBAAqB;AAO5B,SAEEC,WAAW,QACN,iCAAiC;AACxC,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,SAAiCC,QAAQ,QAAQ,eAAe;AAChE,SAAoCC,WAAW,QAAQ,kBAAkB;AAkBzE;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeC,4BAA4BA,CAIhDC,MAAgC,EAChCC,IAEa;EAEb,OAAOC,qCAAqC,CAACF,MAAM,EAAEC,IAAW,CAAC;AACnE;AAEA,OAAO,eAAeC,qCAAqCA,CAIzDF,MAAgC,EAChCC,IASC;EAED,MAAM;IAAEE,KAAK,EAAEC,MAAM;IAAEC,KAAK,GAAGL,MAAM,CAACK,KAAK;IAAEC;EAAO,CAAE,GAAGL,IAAI,IAAI,EAAE;EAEnE,IAAI;IACF,MAAMM,oBAAoB,GACxBF,KAAK,EAAEG,IAAI,EAAED,oBAAoB,IAAIF,KAAK,EAAEG,IAAI,EAAEC,kBAAkB;IAEtE,IAAI,OAAOF,oBAAoB,KAAK,UAAU,EAAE;MAC9C,MAAMJ,KAAK,GACTC,MAAM,KAAK,MAAMR,SAAS,CAACI,MAAM,EAAEH,QAAQ,EAAE,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;MAC/D,MAAMa,qBAAqB,GAAG,MAAMH,oBAAoB,CAAC;QACvDJ,KAAK;QACLH,MAAM;QACNM;OACwB,CAAC;MAC3B,IAAII,qBAAqB,KAAK,IAAI,EAAE,MAAM,IAAIC,KAAK,EAAE;MACrD,OAAOD,qBAAqB;IAC9B;IAEA,IAAI,OAAOH,oBAAoB,KAAK,WAAW,EAAE,OAAOA,oBAAoB;IAE5E,MAAMK,uBAAuB,GAAG,MAAMZ,MAAM,CAACM,OAAO,CAAC;MACnDO,MAAM,EAAE;KACT,CAAC;IACF,OAAOlB,WAAW,CAACiB,uBAAuB,CAAC;EAC7C,CAAC,CAAC,MAAM;IACN;IACA;IACA;IACA,MAAM,CAACT,KAAK,EAAEW,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC1CZ,MAAM,GACFW,OAAO,CAACE,OAAO,CAACb,MAAM,CAAC,GACvBR,SAAS,CAACI,MAAM,EAAEH,QAAQ,EAAE,UAAU,CAAC,CAAC,EAAE,CAAC,EAC/CD,SAAS,CAACI,MAAM,EAAEF,WAAW,EAAE,aAAa,CAAC,CAAC,EAAE,CAAC,CAClD,CAAC;IAEF,IAAI,OAAOK,KAAK,CAACe,aAAa,KAAK,QAAQ,EACzC,MAAM,IAAIxB,4BAA4B,EAAE;IAE1C,MAAMa,oBAAoB,GAAGO,QAAQ,GAAGX,KAAK,CAACe,aAAa;IAE3D,IAAIX,oBAAoB,GAAG,EAAE,EAAE,OAAO,EAAE;IACxC,OAAOA,oBAAoB;EAC7B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}