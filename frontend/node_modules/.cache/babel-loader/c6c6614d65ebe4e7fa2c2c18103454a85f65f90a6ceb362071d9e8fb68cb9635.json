{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { desc } from './base.js';\nconst DEV_MODE = true;\nlet issueWarning;\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  globalThis.litIssuedWarnings ??= new Set();\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code, warning) => {\n    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : '';\n    if (!globalThis.litIssuedWarnings.has(warning) && !globalThis.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings.add(warning);\n    }\n  };\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector, cache) {\n  return (protoOrTarget, nameOrContext, descriptor) => {\n    const doQuery = el => {\n      const result = el.renderRoot?.querySelector(selector) ?? null;\n      if (DEV_MODE && result === null && cache && !el.hasUpdated) {\n        const name = typeof nameOrContext === 'object' ? nameOrContext.name : nameOrContext;\n        issueWarning('', `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` + `flag set for selector '${selector}' has been accessed before ` + `the first update and returned null. This is expected if the ` + `renderRoot tree has not been provided beforehand (e.g. via ` + `Declarative Shadow DOM). Therefore the value hasn't been cached.`);\n      }\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return result;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {\n        get,\n        set\n      } = typeof nameOrContext === 'object' ? protoOrTarget : descriptor ?? (() => {\n        const key = DEV_MODE ? Symbol(`${String(nameOrContext)} (@query() cache)`) : Symbol();\n        return {\n          get() {\n            return this[key];\n          },\n          set(v) {\n            this[key] = v;\n          }\n        };\n      })();\n      return desc(protoOrTarget, nameOrContext, {\n        get() {\n          let result = get.call(this);\n          if (result === undefined) {\n            result = doQuery(this);\n            if (result !== null || this.hasUpdated) {\n              set.call(this, result);\n            }\n          }\n          return result;\n        }\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get() {\n          return doQuery(this);\n        }\n      });\n    }\n  };\n}","map":{"version":3,"names":["desc","DEV_MODE","issueWarning","globalThis","litIssuedWarnings","Set","code","warning","has","console","warn","add","query","selector","cache","protoOrTarget","nameOrContext","descriptor","doQuery","el","result","renderRoot","querySelector","hasUpdated","name","JSON","stringify","String","get","set","key","Symbol","v","call","undefined"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@lit\\reactive-element\\src\\decorators\\query.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  globalThis.litIssuedWarnings ??= new Set();\n\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (\n      !globalThis.litIssuedWarnings!.has(warning) &&\n      !globalThis.litIssuedWarnings!.has(code)\n    ) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n}\n\nexport type QueryDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Element | null>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean): QueryDecorator {\n  return (<C extends Interface<ReactiveElement>, V extends Element | null>(\n    protoOrTarget: ClassAccessorDecoratorTarget<C, V>,\n    nameOrContext: PropertyKey | ClassAccessorDecoratorContext<C, V>,\n    descriptor?: PropertyDescriptor\n  ) => {\n    const doQuery = (el: Interface<ReactiveElement>): V => {\n      const result = (el.renderRoot?.querySelector(selector) ?? null) as V;\n      if (DEV_MODE && result === null && cache && !el.hasUpdated) {\n        const name =\n          typeof nameOrContext === 'object'\n            ? nameOrContext.name\n            : nameOrContext;\n        issueWarning(\n          '',\n          `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +\n            `flag set for selector '${selector}' has been accessed before ` +\n            `the first update and returned null. This is expected if the ` +\n            `renderRoot tree has not been provided beforehand (e.g. via ` +\n            `Declarative Shadow DOM). Therefore the value hasn't been cached.`\n        );\n      }\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return result;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {get, set} =\n        typeof nameOrContext === 'object'\n          ? protoOrTarget\n          : descriptor ??\n            (() => {\n              const key = DEV_MODE\n                ? Symbol(`${String(nameOrContext)} (@query() cache)`)\n                : Symbol();\n              type WithCache = ReactiveElement & {\n                [key: symbol]: Element | null;\n              };\n              return {\n                get() {\n                  return (this as WithCache)[key];\n                },\n                set(v) {\n                  (this as WithCache)[key] = v;\n                },\n              };\n            })();\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement): V {\n          let result: V = get!.call(this);\n          if (result === undefined) {\n            result = doQuery(this);\n            if (result !== null || this.hasUpdated) {\n              set!.call(this, result);\n            }\n          }\n          return result;\n        },\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement) {\n          return doQuery(this);\n        },\n      });\n    }\n  }) as QueryDecorator;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}