{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { MELD_PUBLIC_KEY, ONRAMP_PROVIDERS } from '../utils/ConstantsUtil.js';\nimport { AccountController } from './AccountController.js';\nimport { ApiController } from './ApiController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nexport const USDC_CURRENCY_DEFAULT = {\n  id: '2b92315d-eab7-5bef-84fa-089a131333f5',\n  name: 'USD Coin',\n  symbol: 'USDC',\n  networks: [{\n    name: 'ethereum-mainnet',\n    display_name: 'Ethereum',\n    chain_id: '1',\n    contract_address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'\n  }, {\n    name: 'polygon-mainnet',\n    display_name: 'Polygon',\n    chain_id: '137',\n    contract_address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n  }]\n};\nexport const USD_CURRENCY_DEFAULT = {\n  id: 'USD',\n  payment_method_limits: [{\n    id: 'card',\n    min: '10.00',\n    max: '7500.00'\n  }, {\n    id: 'ach_bank_account',\n    min: '10.00',\n    max: '25000.00'\n  }]\n};\nconst defaultState = {\n  providers: ONRAMP_PROVIDERS,\n  selectedProvider: null,\n  error: null,\n  purchaseCurrency: USDC_CURRENCY_DEFAULT,\n  paymentCurrency: USD_CURRENCY_DEFAULT,\n  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],\n  paymentCurrencies: [],\n  quotesLoading: false\n};\n// -- State --------------------------------------------- //\nconst state = proxy(defaultState);\n// -- Controller ---------------------------------------- //\nexport const OnRampController = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  setSelectedProvider(provider) {\n    if (provider && provider.name === 'meld') {\n      const currency = ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA ? 'SOL' : 'USDC';\n      const address = AccountController.state.address ?? '';\n      const url = new URL(provider.url);\n      url.searchParams.append('publicKey', MELD_PUBLIC_KEY);\n      url.searchParams.append('destinationCurrencyCode', currency);\n      url.searchParams.append('walletAddress', address);\n      provider.url = url.toString();\n    }\n    state.selectedProvider = provider;\n  },\n  setPurchaseCurrency(currency) {\n    state.purchaseCurrency = currency;\n  },\n  setPaymentCurrency(currency) {\n    state.paymentCurrency = currency;\n  },\n  setPurchaseAmount(amount) {\n    this.state.purchaseAmount = amount;\n  },\n  setPaymentAmount(amount) {\n    this.state.paymentAmount = amount;\n  },\n  async getAvailableCurrencies() {\n    const options = await BlockchainApiController.getOnrampOptions();\n    state.purchaseCurrencies = options.purchaseCurrencies;\n    state.paymentCurrencies = options.paymentCurrencies;\n    state.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;\n    state.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;\n    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map(currency => currency.id));\n    await ApiController.fetchTokenImages(options.purchaseCurrencies.map(currency => currency.symbol));\n  },\n  async getQuote() {\n    state.quotesLoading = true;\n    try {\n      const quote = await BlockchainApiController.getOnrampQuote({\n        purchaseCurrency: state.purchaseCurrency,\n        paymentCurrency: state.paymentCurrency,\n        amount: state.paymentAmount?.toString() || '0',\n        network: state.purchaseCurrency?.symbol\n      });\n      state.quotesLoading = false;\n      state.purchaseAmount = Number(quote?.purchaseAmount.amount);\n      return quote;\n    } catch (error) {\n      state.error = error.message;\n      state.quotesLoading = false;\n      return null;\n    } finally {\n      state.quotesLoading = false;\n    }\n  },\n  resetState() {\n    state.providers = ONRAMP_PROVIDERS;\n    state.selectedProvider = null;\n    state.error = null;\n    state.purchaseCurrency = USDC_CURRENCY_DEFAULT;\n    state.paymentCurrency = USD_CURRENCY_DEFAULT;\n    state.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];\n    state.paymentCurrencies = [];\n    state.paymentAmount = undefined;\n    state.purchaseAmount = undefined;\n    state.quotesLoading = false;\n  }\n};\n//# sourceMappingURL=OnRampController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}