{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoECKey = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"curve\"] = 1] = \"curve\";\n  Keys[Keys[\"private\"] = 2] = \"private\";\n  Keys[Keys[\"data\"] = 3] = \"data\";\n})(Keys || (Keys = {}));\nclass CryptoECKey extends RegistryItem_1.RegistryItem {\n  constructor(args) {\n    super();\n    this.isECKey = () => {\n      return true;\n    };\n    this.getCurve = () => this.curve || 0;\n    this.isPrivateKey = () => this.privateKey || false;\n    this.getData = () => this.data;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_ECKEY;\n    };\n    this.toDataItem = () => {\n      const map = {};\n      if (this.curve) {\n        map[Keys.curve] = this.curve;\n      }\n      if (this.privateKey !== undefined) {\n        map[Keys.private] = this.privateKey;\n      }\n      map[Keys.data] = this.data;\n      return new lib_1.DataItem(map);\n    };\n    this.getOutputDescriptorContent = () => {\n      return this.data.toString('hex');\n    };\n    this.data = args.data;\n    this.curve = args.curve;\n    this.privateKey = args.privateKey || undefined;\n  }\n}\nexports.CryptoECKey = CryptoECKey;\nCryptoECKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const curve = map[Keys.curve];\n  const privateKey = map[Keys.private];\n  const data = map[Keys.data];\n  if (!data) {\n    throw new Error(`#[ur-registry][CryptoECKey][fn.fromDataItem]: decoded [dataItem][#data.data] is undefined: ${dataItem}`);\n  }\n  return new CryptoECKey({\n    data,\n    curve,\n    privateKey\n  });\n};\nCryptoECKey.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoECKey.fromDataItem(dataItem);\n};","map":{"version":3,"names":["lib_1","require","RegistryItem_1","RegistryType_1","Keys","CryptoECKey","RegistryItem","constructor","args","isECKey","getCurve","curve","isPrivateKey","privateKey","getData","data","getRegistryType","RegistryTypes","CRYPTO_ECKEY","toDataItem","map","undefined","private","DataItem","getOutputDescriptorContent","toString","exports","fromDataItem","dataItem","Error","fromCBOR","_cborPayload","decodeToDataItem"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@keystonehq\\bc-ur-registry-sol\\node_modules\\@keystonehq\\bc-ur-registry\\src\\CryptoECKey.ts"],"sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\nimport { DataItemMap, ICryptoKey } from './types';\n\nenum Keys {\n  curve = 1,\n  private,\n  data,\n}\n\nexport class CryptoECKey extends RegistryItem implements ICryptoKey {\n  private data: Buffer;\n  private curve: number | undefined;\n  private privateKey: boolean | undefined;\n  constructor(args: { data: Buffer; curve?: number; privateKey?: boolean }) {\n    super();\n    this.data = args.data;\n    this.curve = args.curve;\n    this.privateKey = args.privateKey || undefined;\n  }\n\n  isECKey = () => {\n    return true;\n  };\n\n  public getCurve = () => this.curve || 0;\n  public isPrivateKey = () => this.privateKey || false;\n  public getData = () => this.data;\n\n  getRegistryType = () => {\n    return RegistryTypes.CRYPTO_ECKEY;\n  };\n\n  toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.curve) {\n      map[Keys.curve] = this.curve;\n    }\n    if (this.privateKey !== undefined) {\n      map[Keys.private] = this.privateKey;\n    }\n    map[Keys.data] = this.data;\n    return new DataItem(map);\n  };\n\n  getOutputDescriptorContent = () => {\n    return this.data.toString('hex');\n  }\n\n  static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const curve = map[Keys.curve];\n    const privateKey = map[Keys.private];\n    const data = map[Keys.data];\n    if (!data) {\n      throw new Error(\n        `#[ur-registry][CryptoECKey][fn.fromDataItem]: decoded [dataItem][#data.data] is undefined: ${dataItem}`,\n      );\n    }\n    return new CryptoECKey({ data, curve, privateKey });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoECKey.fromDataItem(dataItem);\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AAGA,IAAKG,IAIJ;AAJD,WAAKA,IAAI;EACPA,IAAA,CAAAA,IAAA,wBAAS;EACTA,IAAA,CAAAA,IAAA,4BAAO;EACPA,IAAA,CAAAA,IAAA,sBAAI;AACN,CAAC,EAJIA,IAAI,KAAJA,IAAI;AAMT,MAAaC,WAAY,SAAQH,cAAA,CAAAI,YAAY;EAI3CC,YAAYC,IAA4D;IACtE,KAAK,EAAE;IAMT,KAAAC,OAAO,GAAG,MAAK;MACb,OAAO,IAAI;IACb,CAAC;IAEM,KAAAC,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,IAAI,CAAC;IAChC,KAAAC,YAAY,GAAG,MAAM,IAAI,CAACC,UAAU,IAAI,KAAK;IAC7C,KAAAC,OAAO,GAAG,MAAM,IAAI,CAACC,IAAI;IAEhC,KAAAC,eAAe,GAAG,MAAK;MACrB,OAAOb,cAAA,CAAAc,aAAa,CAACC,YAAY;IACnC,CAAC;IAED,KAAAC,UAAU,GAAG,MAAK;MAChB,MAAMC,GAAG,GAAgB,EAAE;MAC3B,IAAI,IAAI,CAACT,KAAK,EAAE;QACdS,GAAG,CAAChB,IAAI,CAACO,KAAK,CAAC,GAAG,IAAI,CAACA,KAAK;;MAE9B,IAAI,IAAI,CAACE,UAAU,KAAKQ,SAAS,EAAE;QACjCD,GAAG,CAAChB,IAAI,CAACkB,OAAO,CAAC,GAAG,IAAI,CAACT,UAAU;;MAErCO,GAAG,CAAChB,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI;MAC1B,OAAO,IAAIf,KAAA,CAAAuB,QAAQ,CAACH,GAAG,CAAC;IAC1B,CAAC;IAED,KAAAI,0BAA0B,GAAG,MAAK;MAChC,OAAO,IAAI,CAACT,IAAI,CAACU,QAAQ,CAAC,KAAK,CAAC;IAClC,CAAC;IA/BC,IAAI,CAACV,IAAI,GAAGP,IAAI,CAACO,IAAI;IACrB,IAAI,CAACJ,KAAK,GAAGH,IAAI,CAACG,KAAK;IACvB,IAAI,CAACE,UAAU,GAAGL,IAAI,CAACK,UAAU,IAAIQ,SAAS;EAChD;;AATFK,OAAA,CAAArB,WAAA,GAAAA,WAAA;AAuCSA,WAAA,CAAAsB,YAAY,GAAIC,QAAkB,IAAI;EAC3C,MAAMR,GAAG,GAAGQ,QAAQ,CAACd,OAAO,EAAE;EAC9B,MAAMH,KAAK,GAAGS,GAAG,CAAChB,IAAI,CAACO,KAAK,CAAC;EAC7B,MAAME,UAAU,GAAGO,GAAG,CAAChB,IAAI,CAACkB,OAAO,CAAC;EACpC,MAAMP,IAAI,GAAGK,GAAG,CAAChB,IAAI,CAACW,IAAI,CAAC;EAC3B,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIc,KAAK,CACb,8FAA8FD,QAAQ,EAAE,CACzG;;EAEH,OAAO,IAAIvB,WAAW,CAAC;IAAEU,IAAI;IAAEJ,KAAK;IAAEE;EAAU,CAAE,CAAC;AACrD,CAAC;AAEaR,WAAA,CAAAyB,QAAQ,GAAIC,YAAoB,IAAI;EAChD,MAAMH,QAAQ,GAAG,IAAA5B,KAAA,CAAAgC,gBAAgB,EAACD,YAAY,CAAC;EAC/C,OAAO1B,WAAW,CAACsB,YAAY,CAACC,QAAQ,CAAC;AAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}