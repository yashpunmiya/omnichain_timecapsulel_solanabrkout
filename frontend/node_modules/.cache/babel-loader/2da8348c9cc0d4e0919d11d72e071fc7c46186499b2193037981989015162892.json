{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nexport function parseSignature(signatureHex) {\n  const {\n    r,\n    s\n  } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));\n  const yParityOrV = Number(`0x${signatureHex.slice(130)}`);\n  const [v, yParity] = (() => {\n    if (yParityOrV === 0 || yParityOrV === 1) return [undefined, yParityOrV];\n    if (yParityOrV === 27) return [BigInt(yParityOrV), 0];\n    if (yParityOrV === 28) return [BigInt(yParityOrV), 1];\n    throw new Error('Invalid yParityOrV value');\n  })();\n  if (typeof v !== 'undefined') return {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    s: numberToHex(s, {\n      size: 32\n    }),\n    v,\n    yParity\n  };\n  return {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    s: numberToHex(s, {\n      size: 32\n    }),\n    yParity\n  };\n}\n//# sourceMappingURL=parseSignature.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}