{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport safeStringify from 'fast-safe-stringify';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { EventEmitter } from 'events';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_init\", void 0);\n    _defineProperty(this, \"_haveSyn\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    _defineProperty(this, \"_target\", void 0);\n    _defineProperty(this, \"_targetWindow\", void 0);\n    _defineProperty(this, \"_targetOrigin\", void 0);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _defineProperty(this, \"_onMessage\", void 0);\n    _defineProperty(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data;\n\n    // validate message\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\nconst errorCodes = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901\n  }\n};\nconst errorValues = {\n  \"-32700\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n  },\n  \"-32600\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"The JSON sent is not a valid Request object.\"\n  },\n  \"-32601\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"The method does not exist / is not available.\"\n  },\n  \"-32602\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Invalid method parameter(s).\"\n  },\n  \"-32603\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Internal JSON-RPC error.\"\n  },\n  \"-32000\": {\n    standard: \"EIP-1474\",\n    message: \"Invalid input.\"\n  },\n  \"-32001\": {\n    standard: \"EIP-1474\",\n    message: \"Resource not found.\"\n  },\n  \"-32002\": {\n    standard: \"EIP-1474\",\n    message: \"Resource unavailable.\"\n  },\n  \"-32003\": {\n    standard: \"EIP-1474\",\n    message: \"Transaction rejected.\"\n  },\n  \"-32004\": {\n    standard: \"EIP-1474\",\n    message: \"Method not supported.\"\n  },\n  \"-32005\": {\n    standard: \"EIP-1474\",\n    message: \"Request limit exceeded.\"\n  },\n  \"4001\": {\n    standard: \"EIP-1193\",\n    message: \"User rejected the request.\"\n  },\n  \"4100\": {\n    standard: \"EIP-1193\",\n    message: \"The requested account and/or method has not been authorized by the user.\"\n  },\n  \"4200\": {\n    standard: \"EIP-1193\",\n    message: \"The requested method is not supported by this Ethereum provider.\"\n  },\n  \"4900\": {\n    standard: \"EIP-1193\",\n    message: \"The provider is disconnected from all chains.\"\n  },\n  \"4901\": {\n    standard: \"EIP-1193\",\n    message: \"The provider is disconnected from the specified chain.\"\n  }\n};\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = \"Unspecified error message. This is a bug, please report it.\";\nconst JSON_RPC_SERVER_ERROR_MESSAGE = \"Unspecified server error.\";\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nfunction isValidCode(code) {\n  return Number.isInteger(code);\n}\nfunction isValidString(value) {\n  return typeof value === \"string\" && value.length > 0;\n}\n\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n  return Boolean(value) && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  try {\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n      proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction isJsonRpcError(value) {\n  const castValue = value;\n  if (!castValue) return false;\n  if (!isValidCode(castValue.code) || !isValidString(castValue.message)) return false;\n  if (castValue.stack && !isValidString(castValue.stack)) return false;\n  return true;\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nfunction getMessageFromCode(code) {\n  let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n    if (Object.hasOwn(errorValues, codeString)) {\n      return errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nfunction isValidJson(str) {\n  try {\n    JSON.parse(JSON.stringify(str, (strKey, strVal) => {\n      if (strKey === \"__proto__\" || strKey === \"constructor\") {\n        throw new Error(\"Not valid json\");\n      }\n      if (typeof strVal === \"function\" || typeof strVal === \"symbol\") {\n        throw new Error(\"Not valid json\");\n      }\n      return strVal;\n    }), (propKey, propValue) => {\n      // Strip __proto__ and constructor properties to prevent prototype pollution.\n      if (propKey === \"__proto__\" || propKey === \"constructor\") {\n        return undefined;\n      }\n      return propValue;\n    });\n    // this means, it's a valid json so far\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object) {\n  return Object.getOwnPropertyNames(object).reduce((acc, key) => {\n    const value = object[key];\n    if (isValidJson(value)) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nfunction serializeCause(error) {\n  if (Array.isArray(error)) {\n    return error.map(entry => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n  if (isValidJson(error)) {\n    return error;\n  }\n  return null;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(error, fallbackError) {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (error && typeof error === \"object\" && \"serialize\" in error && typeof error.serialize === \"function\") {\n    return error.serialize();\n  }\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = _objectSpread(_objectSpread({}, fallbackError), {}, {\n    data: {\n      cause\n    }\n  });\n  return fallbackWithCause;\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nfunction serializeError(error) {\n  let {\n    fallbackError = FALLBACK_ERROR,\n    shouldIncludeStack = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\"Must provide fallback error with integer number code and string message.\");\n  }\n  const serialized = buildError(error, fallbackError);\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n  return serialized;\n}\n\n/**\n * Returns true if supplied error data has a usable `cause` property; false otherwise.\n *\n * @param data - Optional data to validate.\n * @returns Whether cause property is present and an object.\n */\nfunction dataHasCause(data) {\n  return isObject(data) && Object.hasOwn(data, \"cause\") && isObject(data.cause);\n}\n\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_, value) {\n  if (value === \"[Circular]\") {\n    return undefined;\n  }\n  return value;\n}\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nclass JsonRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n    if (dataHasCause(data)) {\n      super(message, {\n        cause: data.cause\n      });\n\n      // Browser backwards-compatibility fallback\n      // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n      _defineProperty(this, \"cause\", void 0);\n      _defineProperty(this, \"code\", void 0);\n      _defineProperty(this, \"data\", void 0);\n      if (!Object.hasOwn(this, \"cause\")) {\n        Object.assign(this, {\n          cause: data.cause\n        });\n      }\n    } else {\n      super(message);\n      // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n      _defineProperty(this, \"cause\", void 0);\n      _defineProperty(this, \"code\", void 0);\n      _defineProperty(this, \"data\", void 0);\n    }\n    if (data !== undefined) {\n      this.data = data;\n    }\n    this.code = code;\n    this.cause = data === null || data === void 0 ? void 0 : data.cause;\n  }\n\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data;\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n    return serialized;\n  }\n\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString() {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends JsonRpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(code, message, data);\n  }\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === \"string\") {\n      return [arg];\n    } else if (typeof arg === \"object\" && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n      if (message && typeof message !== \"string\") {\n        throw new Error(\"Must specify string message.\");\n      }\n      return [message !== null && message !== void 0 ? message : undefined, data];\n    }\n  }\n  return [];\n}\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message !== null && message !== void 0 ? message : getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(code, message !== null && message !== void 0 ? message : getMessageFromCode(code), data);\n}\nconst rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: arg => getJsonRpcError(errorCodes.rpc.parse, arg),\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: arg => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: arg => getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: arg => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: arg => getJsonRpcError(errorCodes.rpc.internal, arg),\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: opts => {\n    if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n      throw new Error(\"Ethereum RPC Server errors must provide single object argument.\");\n    }\n    const {\n      code\n    } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n    }\n    return getJsonRpcError(code, opts);\n  },\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: arg => getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: arg => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: arg => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: arg => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: arg => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: arg => getJsonRpcError(errorCodes.rpc.limitExceeded, arg)\n};\nconst providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: arg => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: arg => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: arg => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: arg => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: arg => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: opts => {\n    if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n      throw new Error(\"Ethereum Provider custom errors must provide single object argument.\");\n    }\n    const {\n      code,\n      message,\n      data\n    } = opts;\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  }\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return safeStringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n    delete idMap[res.id];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = Math.random().toString(36).slice(2);\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (err) {\n      const error = err;\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _defineProperty(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * and a boolean indicating whether the request should end.\n   */\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          if (typeof error === \"object\" && Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n          res.error = serializeError(error, {\n            shouldIncludeStack: true,\n            fallbackError: {\n              message: (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()),\n              code: (error === null || error === void 0 ? void 0 : error.code) || -32603,\n              stack: (error === null || error === void 0 ? void 0 : error.stack) || \"Stack trace is not available.\",\n              data: (error === null || error === void 0 ? void 0 : error.data) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString())\n            }\n          });\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  static _checkForCompletion(_req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)));\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  _promiseHandle(req) {\n    return new Promise((resolve, reject) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        if (_err && res === undefined) {\n          reject(_err);\n        } else resolve(res);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _objectSpread({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        var _error2, _error3, _error4, _error5, _error6, _error7, _error8;\n        if (typeof error === \"object\" && Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n        res.error = serializeError(error, {\n          shouldIncludeStack: true,\n          fallbackError: {\n            message: ((_error2 = error) === null || _error2 === void 0 ? void 0 : _error2.message) || ((_error3 = error) === null || _error3 === void 0 ? void 0 : _error3.toString()),\n            code: ((_error4 = error) === null || _error4 === void 0 ? void 0 : _error4.code) || -32603,\n            stack: ((_error5 = error) === null || _error5 === void 0 ? void 0 : _error5.stack) || \"Stack trace is not available.\",\n            data: ((_error6 = error) === null || _error6 === void 0 ? void 0 : _error6.data) || ((_error7 = error) === null || _error7 === void 0 ? void 0 : _error7.message) || ((_error8 = error) === null || _error8 === void 0 ? void 0 : _error8.toString())\n          }\n        });\n      }\n    }\n    return cb(error, res);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\nfunction providerFromEngine(engine) {\n  const provider = new SafeEventEmitter();\n  // handle both rpc send methods\n  provider.sendAsync = async req => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      var _res$error, _res$error2, _res$error3, _res$error4, _res$error5, _res$error6, _res$error7;\n      if (typeof res.error === \"object\" && Object.keys(res.error).includes(\"stack\") === false) res.error.stack = \"Stack trace is not available.\";\n      const err = serializeError(res.error, {\n        fallbackError: {\n          message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.toString()),\n          code: ((_res$error3 = res.error) === null || _res$error3 === void 0 ? void 0 : _res$error3.code) || -32603,\n          stack: ((_res$error4 = res.error) === null || _res$error4 === void 0 ? void 0 : _res$error4.stack) || \"Stack trace is not available.\",\n          data: ((_res$error5 = res.error) === null || _res$error5 === void 0 ? void 0 : _res$error5.data) || ((_res$error6 = res.error) === null || _res$error6 === void 0 ? void 0 : _res$error6.message) || ((_res$error7 = res.error) === null || _res$error7 === void 0 ? void 0 : _res$error7.toString())\n        },\n        shouldIncludeStack: true\n      });\n      throw rpcErrors.internal(err);\n    }\n    return res.result;\n  };\n  provider.send = (req, callback) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n  provider.request = async args => {\n    const req = _objectSpread(_objectSpread({}, args), {}, {\n      id: Math.random().toString(36).slice(2),\n      jsonrpc: \"2.0\"\n    });\n    const res = await provider.sendAsync(req);\n    return res;\n  };\n  return provider;\n}\nfunction providerFromMiddleware(middleware) {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider = providerFromEngine(engine);\n  return provider;\n}\nfunction providerAsMiddleware(provider) {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes = await provider.sendAsync(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error);\n    }\n  };\n}\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_parent\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read() {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(this, \"_substreams\", void 0);\n    _defineProperty(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          }\n\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\nexport { BasePostMessageStream, EthereumProviderError, IGNORE_SUBSTREAM, JRPCEngine, JSON_RPC_SERVER_ERROR_MESSAGE, JsonRpcError, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, dataHasCause, errorCodes, errorValues, getMessageFromCode, getRpcPromiseCallback, isObject, isPlainObject, isValidCode, isValidString, mergeMiddleware, providerAsMiddleware, providerErrors, providerFromEngine, providerFromMiddleware, rpcErrors, serializeCause, serializeError, setupMultiplex };","map":{"version":3,"names":["_defineProperty","Duplex","safeStringify","_objectSpread","EventEmitter","eos","once","pump","noop","undefined","SYN","ACK","BRK","BasePostMessageStream","constructor","_ref","name","target","targetWindow","window","targetOrigin","objectMode","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","errorCodes","rpc","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","parse","invalidRequest","methodNotFound","invalidParams","internal","provider","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","errorValues","standard","FALLBACK_ERROR_CODE","FALLBACK_MESSAGE","JSON_RPC_SERVER_ERROR_MESSAGE","isValidCode","code","Number","isInteger","isValidString","value","length","isObject","Boolean","Array","isArray","isPlainObject","proto","Object","getPrototypeOf","isJsonRpcServerError","isJsonRpcError","castValue","stack","getMessageFromCode","fallbackMessage","arguments","codeString","toString","hasOwn","FALLBACK_ERROR","isValidJson","str","JSON","stringify","strKey","strVal","propKey","propValue","e","serializeObject","object","getOwnPropertyNames","reduce","acc","key","serializeCause","error","map","entry","buildError","fallbackError","serialize","cause","fallbackWithCause","serializeError","shouldIncludeStack","serialized","dataHasCause","isValidEthProviderCode","stringifyReplacer","JsonRpcError","assign","EthereumProviderError","parseOpts","arg","getJsonRpcError","getEthProviderError","rpcErrors","server","opts","providerErrors","custom","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","copy","i","SafeEventEmitter","type","doError","events","_events","_len","_key","er","len","listeners","SerializableError","getRpcPromiseCallback","resolve","reject","unwrapResult","response","result","createErrorMiddleware","log","req","res","next","end","method","done","createStreamMiddleware","idMap","readNoop","processResponse","id","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","Math","random","slice","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","keys","includes","returnHandler","_runReturnHandlers","_checkForCompletion","_req","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","catch","callerReq","jsonrpc","_processRequest","_error","_error2","_error3","_error4","_error5","_error6","_error7","_error8","mergeMiddleware","engine","forEach","createEngineStream","on","providerFromEngine","sendAsync","_res$error","_res$error2","_res$error3","_res$error4","_res$error5","_res$error6","_res$error7","send","callback","request","providerFromMiddleware","providerAsMiddleware","_next","providerRes","Substream","parent","_parent","chunk","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","readable","writable","setupMultiplex","mux","getStream","streamHelper","PostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport safeStringify from 'fast-safe-stringify';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { EventEmitter } from 'events';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_init\", void 0);\n    _defineProperty(this, \"_haveSyn\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    _defineProperty(this, \"_target\", void 0);\n    _defineProperty(this, \"_targetWindow\", void 0);\n    _defineProperty(this, \"_targetOrigin\", void 0);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _defineProperty(this, \"_onMessage\", void 0);\n    _defineProperty(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data;\n\n    // validate message\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n\nconst errorCodes = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901\n  }\n};\nconst errorValues = {\n  \"-32700\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n  },\n  \"-32600\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"The JSON sent is not a valid Request object.\"\n  },\n  \"-32601\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"The method does not exist / is not available.\"\n  },\n  \"-32602\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Invalid method parameter(s).\"\n  },\n  \"-32603\": {\n    standard: \"JSON RPC 2.0\",\n    message: \"Internal JSON-RPC error.\"\n  },\n  \"-32000\": {\n    standard: \"EIP-1474\",\n    message: \"Invalid input.\"\n  },\n  \"-32001\": {\n    standard: \"EIP-1474\",\n    message: \"Resource not found.\"\n  },\n  \"-32002\": {\n    standard: \"EIP-1474\",\n    message: \"Resource unavailable.\"\n  },\n  \"-32003\": {\n    standard: \"EIP-1474\",\n    message: \"Transaction rejected.\"\n  },\n  \"-32004\": {\n    standard: \"EIP-1474\",\n    message: \"Method not supported.\"\n  },\n  \"-32005\": {\n    standard: \"EIP-1474\",\n    message: \"Request limit exceeded.\"\n  },\n  \"4001\": {\n    standard: \"EIP-1193\",\n    message: \"User rejected the request.\"\n  },\n  \"4100\": {\n    standard: \"EIP-1193\",\n    message: \"The requested account and/or method has not been authorized by the user.\"\n  },\n  \"4200\": {\n    standard: \"EIP-1193\",\n    message: \"The requested method is not supported by this Ethereum provider.\"\n  },\n  \"4900\": {\n    standard: \"EIP-1193\",\n    message: \"The provider is disconnected from all chains.\"\n  },\n  \"4901\": {\n    standard: \"EIP-1193\",\n    message: \"The provider is disconnected from the specified chain.\"\n  }\n};\n\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = \"Unspecified error message. This is a bug, please report it.\";\nconst JSON_RPC_SERVER_ERROR_MESSAGE = \"Unspecified server error.\";\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nfunction isValidCode(code) {\n  return Number.isInteger(code);\n}\nfunction isValidString(value) {\n  return typeof value === \"string\" && value.length > 0;\n}\n\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n  return Boolean(value) && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  try {\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n      proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction isJsonRpcError(value) {\n  const castValue = value;\n  if (!castValue) return false;\n  if (!isValidCode(castValue.code) || !isValidString(castValue.message)) return false;\n  if (castValue.stack && !isValidString(castValue.stack)) return false;\n  return true;\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nfunction getMessageFromCode(code) {\n  let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n    if (Object.hasOwn(errorValues, codeString)) {\n      return errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nfunction isValidJson(str) {\n  try {\n    JSON.parse(JSON.stringify(str, (strKey, strVal) => {\n      if (strKey === \"__proto__\" || strKey === \"constructor\") {\n        throw new Error(\"Not valid json\");\n      }\n      if (typeof strVal === \"function\" || typeof strVal === \"symbol\") {\n        throw new Error(\"Not valid json\");\n      }\n      return strVal;\n    }), (propKey, propValue) => {\n      // Strip __proto__ and constructor properties to prevent prototype pollution.\n      if (propKey === \"__proto__\" || propKey === \"constructor\") {\n        return undefined;\n      }\n      return propValue;\n    });\n    // this means, it's a valid json so far\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object) {\n  return Object.getOwnPropertyNames(object).reduce((acc, key) => {\n    const value = object[key];\n    if (isValidJson(value)) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nfunction serializeCause(error) {\n  if (Array.isArray(error)) {\n    return error.map(entry => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n  if (isValidJson(error)) {\n    return error;\n  }\n  return null;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(error, fallbackError) {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (error && typeof error === \"object\" && \"serialize\" in error && typeof error.serialize === \"function\") {\n    return error.serialize();\n  }\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = _objectSpread(_objectSpread({}, fallbackError), {}, {\n    data: {\n      cause\n    }\n  });\n  return fallbackWithCause;\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nfunction serializeError(error) {\n  let {\n    fallbackError = FALLBACK_ERROR,\n    shouldIncludeStack = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\"Must provide fallback error with integer number code and string message.\");\n  }\n  const serialized = buildError(error, fallbackError);\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n  return serialized;\n}\n\n/**\n * Returns true if supplied error data has a usable `cause` property; false otherwise.\n *\n * @param data - Optional data to validate.\n * @returns Whether cause property is present and an object.\n */\nfunction dataHasCause(data) {\n  return isObject(data) && Object.hasOwn(data, \"cause\") && isObject(data.cause);\n}\n\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_, value) {\n  if (value === \"[Circular]\") {\n    return undefined;\n  }\n  return value;\n}\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nclass JsonRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n    if (dataHasCause(data)) {\n      super(message, {\n        cause: data.cause\n      });\n\n      // Browser backwards-compatibility fallback\n      // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n      _defineProperty(this, \"cause\", void 0);\n      _defineProperty(this, \"code\", void 0);\n      _defineProperty(this, \"data\", void 0);\n      if (!Object.hasOwn(this, \"cause\")) {\n        Object.assign(this, {\n          cause: data.cause\n        });\n      }\n    } else {\n      super(message);\n      // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n      _defineProperty(this, \"cause\", void 0);\n      _defineProperty(this, \"code\", void 0);\n      _defineProperty(this, \"data\", void 0);\n    }\n    if (data !== undefined) {\n      this.data = data;\n    }\n    this.code = code;\n    this.cause = data === null || data === void 0 ? void 0 : data.cause;\n  }\n\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data;\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n    return serialized;\n  }\n\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString() {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends JsonRpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(code, message, data);\n  }\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === \"string\") {\n      return [arg];\n    } else if (typeof arg === \"object\" && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n      if (message && typeof message !== \"string\") {\n        throw new Error(\"Must specify string message.\");\n      }\n      return [message !== null && message !== void 0 ? message : undefined, data];\n    }\n  }\n  return [];\n}\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message !== null && message !== void 0 ? message : getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(code, message !== null && message !== void 0 ? message : getMessageFromCode(code), data);\n}\nconst rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: arg => getJsonRpcError(errorCodes.rpc.parse, arg),\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: arg => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: arg => getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: arg => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: arg => getJsonRpcError(errorCodes.rpc.internal, arg),\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: opts => {\n    if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n      throw new Error(\"Ethereum RPC Server errors must provide single object argument.\");\n    }\n    const {\n      code\n    } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n    }\n    return getJsonRpcError(code, opts);\n  },\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: arg => getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: arg => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: arg => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: arg => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: arg => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: arg => getJsonRpcError(errorCodes.rpc.limitExceeded, arg)\n};\nconst providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: arg => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: arg => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: arg => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: arg => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: arg => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: opts => {\n    if (!opts || typeof opts !== \"object\" || Array.isArray(opts)) {\n      throw new Error(\"Ethereum Provider custom errors must provide single object argument.\");\n    }\n    const {\n      code,\n      message,\n      data\n    } = opts;\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  }\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return safeStringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n    delete idMap[res.id];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = Math.random().toString(36).slice(2);\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (err) {\n      const error = err;\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _defineProperty(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * and a boolean indicating whether the request should end.\n   */\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          if (typeof error === \"object\" && Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n          res.error = serializeError(error, {\n            shouldIncludeStack: true,\n            fallbackError: {\n              message: (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()),\n              code: (error === null || error === void 0 ? void 0 : error.code) || -32603,\n              stack: (error === null || error === void 0 ? void 0 : error.stack) || \"Stack trace is not available.\",\n              data: (error === null || error === void 0 ? void 0 : error.data) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString())\n            }\n          });\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  static _checkForCompletion(_req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)));\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  _promiseHandle(req) {\n    return new Promise((resolve, reject) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        if (_err && res === undefined) {\n          reject(_err);\n        } else resolve(res);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _objectSpread({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        var _error2, _error3, _error4, _error5, _error6, _error7, _error8;\n        if (typeof error === \"object\" && Object.keys(error).includes(\"stack\") === false) error.stack = \"Stack trace is not available.\";\n        res.error = serializeError(error, {\n          shouldIncludeStack: true,\n          fallbackError: {\n            message: ((_error2 = error) === null || _error2 === void 0 ? void 0 : _error2.message) || ((_error3 = error) === null || _error3 === void 0 ? void 0 : _error3.toString()),\n            code: ((_error4 = error) === null || _error4 === void 0 ? void 0 : _error4.code) || -32603,\n            stack: ((_error5 = error) === null || _error5 === void 0 ? void 0 : _error5.stack) || \"Stack trace is not available.\",\n            data: ((_error6 = error) === null || _error6 === void 0 ? void 0 : _error6.data) || ((_error7 = error) === null || _error7 === void 0 ? void 0 : _error7.message) || ((_error8 = error) === null || _error8 === void 0 ? void 0 : _error8.toString())\n          }\n        });\n      }\n    }\n    return cb(error, res);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\nfunction providerFromEngine(engine) {\n  const provider = new SafeEventEmitter();\n  // handle both rpc send methods\n  provider.sendAsync = async req => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      var _res$error, _res$error2, _res$error3, _res$error4, _res$error5, _res$error6, _res$error7;\n      if (typeof res.error === \"object\" && Object.keys(res.error).includes(\"stack\") === false) res.error.stack = \"Stack trace is not available.\";\n      const err = serializeError(res.error, {\n        fallbackError: {\n          message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.toString()),\n          code: ((_res$error3 = res.error) === null || _res$error3 === void 0 ? void 0 : _res$error3.code) || -32603,\n          stack: ((_res$error4 = res.error) === null || _res$error4 === void 0 ? void 0 : _res$error4.stack) || \"Stack trace is not available.\",\n          data: ((_res$error5 = res.error) === null || _res$error5 === void 0 ? void 0 : _res$error5.data) || ((_res$error6 = res.error) === null || _res$error6 === void 0 ? void 0 : _res$error6.message) || ((_res$error7 = res.error) === null || _res$error7 === void 0 ? void 0 : _res$error7.toString())\n        },\n        shouldIncludeStack: true\n      });\n      throw rpcErrors.internal(err);\n    }\n    return res.result;\n  };\n  provider.send = (req, callback) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n  provider.request = async args => {\n    const req = _objectSpread(_objectSpread({}, args), {}, {\n      id: Math.random().toString(36).slice(2),\n      jsonrpc: \"2.0\"\n    });\n    const res = await provider.sendAsync(req);\n    return res;\n  };\n  return provider;\n}\nfunction providerFromMiddleware(middleware) {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider = providerFromEngine(engine);\n  return provider;\n}\nfunction providerAsMiddleware(provider) {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes = await provider.sendAsync(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error);\n    }\n  };\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_parent\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read() {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(this, \"_substreams\", void 0);\n    _defineProperty(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          }\n\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\n\nexport { BasePostMessageStream, EthereumProviderError, IGNORE_SUBSTREAM, JRPCEngine, JSON_RPC_SERVER_ERROR_MESSAGE, JsonRpcError, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, dataHasCause, errorCodes, errorValues, getMessageFromCode, getRpcPromiseCallback, isObject, isPlainObject, isValidCode, isValidString, mergeMiddleware, providerAsMiddleware, providerErrors, providerFromEngine, providerFromMiddleware, rpcErrors, serializeCause, serializeError, setupMultiplex };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}