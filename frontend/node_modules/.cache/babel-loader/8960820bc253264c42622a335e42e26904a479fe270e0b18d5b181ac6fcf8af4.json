{"ast":null,"code":"import { SocketClosedError, WebSocketRequestError } from '../../errors/request.js';\nimport { getSocketRpcClient } from './socket.js';\nexport async function getWebSocketRpcClient(url, options = {}) {\n  const {\n    keepAlive,\n    reconnect\n  } = options;\n  return getSocketRpcClient({\n    async getSocket({\n      onClose,\n      onError,\n      onOpen,\n      onResponse\n    }) {\n      const WebSocket = await import('isows').then(module => module.WebSocket);\n      const socket = new WebSocket(url);\n      function onClose_() {\n        socket.removeEventListener('close', onClose_);\n        socket.removeEventListener('message', onMessage);\n        socket.removeEventListener('error', onError);\n        socket.removeEventListener('open', onOpen);\n        onClose();\n      }\n      function onMessage({\n        data\n      }) {\n        onResponse(JSON.parse(data));\n      }\n      // Setup event listeners for RPC & subscription responses.\n      socket.addEventListener('close', onClose_);\n      socket.addEventListener('message', onMessage);\n      socket.addEventListener('error', onError);\n      socket.addEventListener('open', onOpen);\n      // Wait for the socket to open.\n      if (socket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!socket) return;\n          socket.onopen = resolve;\n          socket.onerror = reject;\n        });\n      }\n      const {\n        close: close_\n      } = socket;\n      return Object.assign(socket, {\n        close() {\n          close_.bind(socket)();\n          onClose_();\n        },\n        ping() {\n          try {\n            if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new WebSocketRequestError({\n              url: socket.url,\n              cause: new SocketClosedError({\n                url: socket.url\n              })\n            });\n            const body = {\n              jsonrpc: '2.0',\n              method: 'net_version',\n              params: []\n            };\n            socket.send(JSON.stringify(body));\n          } catch (error) {\n            onError(error);\n          }\n        },\n        request({\n          body\n        }) {\n          if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new WebSocketRequestError({\n            body,\n            url: socket.url,\n            cause: new SocketClosedError({\n              url: socket.url\n            })\n          });\n          return socket.send(JSON.stringify(body));\n        }\n      });\n    },\n    keepAlive,\n    reconnect,\n    url\n  });\n}\n//# sourceMappingURL=webSocket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}