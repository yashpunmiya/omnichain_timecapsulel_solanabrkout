{"ast":null,"code":"'use strict';\n\nconst {\n  format,\n  inspect\n} = require('./util/inspect');\nconst {\n  AggregateError: CustomAggregateError\n} = require('./primordials');\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/errors.js file defined at\n\n  https://github.com/nodejs/node/blob/main/lib/internal/errors.js\n\n  Don't try to replace with the original file and keep it up to date (starting from E(...) definitions)\n  with the upstream file.\n*/\n\nconst AggregateError = globalThis.AggregateError || CustomAggregateError;\nconst kIsNodeError = Symbol('kIsNodeError');\nconst kTypes = ['string', 'function', 'number', 'object',\n// Accept 'Function' and 'Object' as alternative to the lower cased version.\n'Function', 'Object', 'boolean', 'bigint', 'symbol'];\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/;\nconst nodeInternalPrefix = '__node_internal_';\nconst codes = {};\nfunction assert(value, message) {\n  if (!value) {\n    throw new codes.ERR_INTERNAL_ASSERTION(message);\n  }\n}\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = '';\n  let i = val.length;\n  const start = val[0] === '-' ? 1 : 0;\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`;\n  }\n  return `${val.slice(0, i)}${res}`;\n}\nfunction getMessage(key, msg, args) {\n  if (typeof msg === 'function') {\n    assert(msg.length <= args.length,\n    // Default options do not count.\n    `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`);\n    return msg(...args);\n  }\n  const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;\n  assert(expectedLength === args.length, `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`);\n  if (args.length === 0) {\n    return msg;\n  }\n  return format(msg, ...args);\n}\nfunction E(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n  class NodeError extends Base {\n    constructor(...args) {\n      super(getMessage(code, message, args));\n    }\n    toString() {\n      return `${this.name} [${code}]: ${this.message}`;\n    }\n  }\n  Object.defineProperties(NodeError.prototype, {\n    name: {\n      value: Base.name,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    toString: {\n      value() {\n        return `${this.name} [${code}]: ${this.message}`;\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  });\n  NodeError.prototype.code = code;\n  NodeError.prototype[kIsNodeError] = true;\n  codes[code] = NodeError;\n}\nfunction hideStackFrames(fn) {\n  // We rename the functions that will be hidden to cut off the stacktrace\n  // at the outermost one\n  const hidden = nodeInternalPrefix + fn.name;\n  Object.defineProperty(fn, 'name', {\n    value: hidden\n  });\n  return fn;\n}\nfunction aggregateTwoErrors(innerError, outerError) {\n  if (innerError && outerError && innerError !== outerError) {\n    if (Array.isArray(outerError.errors)) {\n      // If `outerError` is already an `AggregateError`.\n      outerError.errors.push(innerError);\n      return outerError;\n    }\n    const err = new AggregateError([outerError, innerError], outerError.message);\n    err.code = outerError.code;\n    return err;\n  }\n  return innerError || outerError;\n}\nclass AbortError extends Error {\n  constructor(message = 'The operation was aborted', options = undefined) {\n    if (options !== undefined && typeof options !== 'object') {\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options);\n    }\n    super(message, options);\n    this.code = 'ABORT_ERR';\n    this.name = 'AbortError';\n  }\n}\nE('ERR_ASSERTION', '%s', Error);\nE('ERR_INVALID_ARG_TYPE', (name, expected, actual) => {\n  assert(typeof name === 'string', \"'name' must be a string\");\n  if (!Array.isArray(expected)) {\n    expected = [expected];\n  }\n  let msg = 'The ';\n  if (name.endsWith(' argument')) {\n    // For cases like 'first argument'\n    msg += `${name} `;\n  } else {\n    msg += `\"${name}\" ${name.includes('.') ? 'property' : 'argument'} `;\n  }\n  msg += 'must be ';\n  const types = [];\n  const instances = [];\n  const other = [];\n  for (const value of expected) {\n    assert(typeof value === 'string', 'All expected entries have to be of type string');\n    if (kTypes.includes(value)) {\n      types.push(value.toLowerCase());\n    } else if (classRegExp.test(value)) {\n      instances.push(value);\n    } else {\n      assert(value !== 'object', 'The value \"object\" should be written as \"Object\"');\n      other.push(value);\n    }\n  }\n\n  // Special handle `object` in case other instances are allowed to outline\n  // the differences between each other.\n  if (instances.length > 0) {\n    const pos = types.indexOf('object');\n    if (pos !== -1) {\n      types.splice(types, pos, 1);\n      instances.push('Object');\n    }\n  }\n  if (types.length > 0) {\n    switch (types.length) {\n      case 1:\n        msg += `of type ${types[0]}`;\n        break;\n      case 2:\n        msg += `one of type ${types[0]} or ${types[1]}`;\n        break;\n      default:\n        {\n          const last = types.pop();\n          msg += `one of type ${types.join(', ')}, or ${last}`;\n        }\n    }\n    if (instances.length > 0 || other.length > 0) {\n      msg += ' or ';\n    }\n  }\n  if (instances.length > 0) {\n    switch (instances.length) {\n      case 1:\n        msg += `an instance of ${instances[0]}`;\n        break;\n      case 2:\n        msg += `an instance of ${instances[0]} or ${instances[1]}`;\n        break;\n      default:\n        {\n          const last = instances.pop();\n          msg += `an instance of ${instances.join(', ')}, or ${last}`;\n        }\n    }\n    if (other.length > 0) {\n      msg += ' or ';\n    }\n  }\n  switch (other.length) {\n    case 0:\n      break;\n    case 1:\n      if (other[0].toLowerCase() !== other[0]) {\n        msg += 'an ';\n      }\n      msg += `${other[0]}`;\n      break;\n    case 2:\n      msg += `one of ${other[0]} or ${other[1]}`;\n      break;\n    default:\n      {\n        const last = other.pop();\n        msg += `one of ${other.join(', ')}, or ${last}`;\n      }\n  }\n  if (actual == null) {\n    msg += `. Received ${actual}`;\n  } else if (typeof actual === 'function' && actual.name) {\n    msg += `. Received function ${actual.name}`;\n  } else if (typeof actual === 'object') {\n    var _actual$constructor;\n    if ((_actual$constructor = actual.constructor) !== null && _actual$constructor !== undefined && _actual$constructor.name) {\n      msg += `. Received an instance of ${actual.constructor.name}`;\n    } else {\n      const inspected = inspect(actual, {\n        depth: -1\n      });\n      msg += `. Received ${inspected}`;\n    }\n  } else {\n    let inspected = inspect(actual, {\n      colors: false\n    });\n    if (inspected.length > 25) {\n      inspected = `${inspected.slice(0, 25)}...`;\n    }\n    msg += `. Received type ${typeof actual} (${inspected})`;\n  }\n  return msg;\n}, TypeError);\nE('ERR_INVALID_ARG_VALUE', (name, value, reason = 'is invalid') => {\n  let inspected = inspect(value);\n  if (inspected.length > 128) {\n    inspected = inspected.slice(0, 128) + '...';\n  }\n  const type = name.includes('.') ? 'property' : 'argument';\n  return `The ${type} '${name}' ${reason}. Received ${inspected}`;\n}, TypeError);\nE('ERR_INVALID_RETURN_VALUE', (input, name, value) => {\n  var _value$constructor;\n  const type = value !== null && value !== undefined && (_value$constructor = value.constructor) !== null && _value$constructor !== undefined && _value$constructor.name ? `instance of ${value.constructor.name}` : `type ${typeof value}`;\n  return `Expected ${input} to be returned from the \"${name}\"` + ` function but got ${type}.`;\n}, TypeError);\nE('ERR_MISSING_ARGS', (...args) => {\n  assert(args.length > 0, 'At least one arg needs to be specified');\n  let msg;\n  const len = args.length;\n  args = (Array.isArray(args) ? args : [args]).map(a => `\"${a}\"`).join(' or ');\n  switch (len) {\n    case 1:\n      msg += `The ${args[0]} argument`;\n      break;\n    case 2:\n      msg += `The ${args[0]} and ${args[1]} arguments`;\n      break;\n    default:\n      {\n        const last = args.pop();\n        msg += `The ${args.join(', ')}, and ${last} arguments`;\n      }\n      break;\n  }\n  return `${msg} must be specified`;\n}, TypeError);\nE('ERR_OUT_OF_RANGE', (str, range, input) => {\n  assert(range, 'Missing \"range\" argument');\n  let received;\n  if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n    received = addNumericalSeparator(String(input));\n  } else if (typeof input === 'bigint') {\n    received = String(input);\n    const limit = BigInt(2) ** BigInt(32);\n    if (input > limit || input < -limit) {\n      received = addNumericalSeparator(received);\n    }\n    received += 'n';\n  } else {\n    received = inspect(input);\n  }\n  return `The value of \"${str}\" is out of range. It must be ${range}. Received ${received}`;\n}, RangeError);\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error);\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error);\nE('ERR_STREAM_ALREADY_FINISHED', 'Cannot call %s after a stream was finished', Error);\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error);\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error);\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error);\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error);\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event', Error);\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error);\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError);\nmodule.exports = {\n  AbortError,\n  aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),\n  hideStackFrames,\n  codes\n};","map":{"version":3,"names":["format","inspect","require","AggregateError","CustomAggregateError","globalThis","kIsNodeError","Symbol","kTypes","classRegExp","nodeInternalPrefix","codes","assert","value","message","ERR_INTERNAL_ASSERTION","addNumericalSeparator","val","res","i","length","start","slice","getMessage","key","msg","args","expectedLength","match","E","code","Base","Error","NodeError","constructor","toString","name","Object","defineProperties","prototype","writable","enumerable","configurable","hideStackFrames","fn","hidden","defineProperty","aggregateTwoErrors","innerError","outerError","Array","isArray","errors","push","err","AbortError","options","undefined","ERR_INVALID_ARG_TYPE","expected","actual","endsWith","includes","types","instances","other","toLowerCase","test","pos","indexOf","splice","last","pop","join","_actual$constructor","inspected","depth","colors","TypeError","reason","type","input","_value$constructor","len","map","a","str","range","received","Number","isInteger","Math","abs","String","limit","BigInt","RangeError","module","exports"],"sources":["C:/Users/yyash/Coding/solana-brkout/frontend/node_modules/readable-stream/lib/ours/errors.js"],"sourcesContent":["'use strict'\n\nconst { format, inspect } = require('./util/inspect')\nconst { AggregateError: CustomAggregateError } = require('./primordials')\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/errors.js file defined at\n\n  https://github.com/nodejs/node/blob/main/lib/internal/errors.js\n\n  Don't try to replace with the original file and keep it up to date (starting from E(...) definitions)\n  with the upstream file.\n*/\n\nconst AggregateError = globalThis.AggregateError || CustomAggregateError\nconst kIsNodeError = Symbol('kIsNodeError')\nconst kTypes = [\n  'string',\n  'function',\n  'number',\n  'object',\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\n  'Function',\n  'Object',\n  'boolean',\n  'bigint',\n  'symbol'\n]\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/\nconst nodeInternalPrefix = '__node_internal_'\nconst codes = {}\nfunction assert(value, message) {\n  if (!value) {\n    throw new codes.ERR_INTERNAL_ASSERTION(message)\n  }\n}\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\nfunction getMessage(key, msg, args) {\n  if (typeof msg === 'function') {\n    assert(\n      msg.length <= args.length,\n      // Default options do not count.\n      `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`\n    )\n    return msg(...args)\n  }\n  const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length\n  assert(\n    expectedLength === args.length,\n    `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`\n  )\n  if (args.length === 0) {\n    return msg\n  }\n  return format(msg, ...args)\n}\nfunction E(code, message, Base) {\n  if (!Base) {\n    Base = Error\n  }\n  class NodeError extends Base {\n    constructor(...args) {\n      super(getMessage(code, message, args))\n    }\n    toString() {\n      return `${this.name} [${code}]: ${this.message}`\n    }\n  }\n  Object.defineProperties(NodeError.prototype, {\n    name: {\n      value: Base.name,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    toString: {\n      value() {\n        return `${this.name} [${code}]: ${this.message}`\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  })\n  NodeError.prototype.code = code\n  NodeError.prototype[kIsNodeError] = true\n  codes[code] = NodeError\n}\nfunction hideStackFrames(fn) {\n  // We rename the functions that will be hidden to cut off the stacktrace\n  // at the outermost one\n  const hidden = nodeInternalPrefix + fn.name\n  Object.defineProperty(fn, 'name', {\n    value: hidden\n  })\n  return fn\n}\nfunction aggregateTwoErrors(innerError, outerError) {\n  if (innerError && outerError && innerError !== outerError) {\n    if (Array.isArray(outerError.errors)) {\n      // If `outerError` is already an `AggregateError`.\n      outerError.errors.push(innerError)\n      return outerError\n    }\n    const err = new AggregateError([outerError, innerError], outerError.message)\n    err.code = outerError.code\n    return err\n  }\n  return innerError || outerError\n}\nclass AbortError extends Error {\n  constructor(message = 'The operation was aborted', options = undefined) {\n    if (options !== undefined && typeof options !== 'object') {\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options)\n    }\n    super(message, options)\n    this.code = 'ABORT_ERR'\n    this.name = 'AbortError'\n  }\n}\nE('ERR_ASSERTION', '%s', Error)\nE(\n  'ERR_INVALID_ARG_TYPE',\n  (name, expected, actual) => {\n    assert(typeof name === 'string', \"'name' must be a string\")\n    if (!Array.isArray(expected)) {\n      expected = [expected]\n    }\n    let msg = 'The '\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg += `${name} `\n    } else {\n      msg += `\"${name}\" ${name.includes('.') ? 'property' : 'argument'} `\n    }\n    msg += 'must be '\n    const types = []\n    const instances = []\n    const other = []\n    for (const value of expected) {\n      assert(typeof value === 'string', 'All expected entries have to be of type string')\n      if (kTypes.includes(value)) {\n        types.push(value.toLowerCase())\n      } else if (classRegExp.test(value)) {\n        instances.push(value)\n      } else {\n        assert(value !== 'object', 'The value \"object\" should be written as \"Object\"')\n        other.push(value)\n      }\n    }\n\n    // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n    if (instances.length > 0) {\n      const pos = types.indexOf('object')\n      if (pos !== -1) {\n        types.splice(types, pos, 1)\n        instances.push('Object')\n      }\n    }\n    if (types.length > 0) {\n      switch (types.length) {\n        case 1:\n          msg += `of type ${types[0]}`\n          break\n        case 2:\n          msg += `one of type ${types[0]} or ${types[1]}`\n          break\n        default: {\n          const last = types.pop()\n          msg += `one of type ${types.join(', ')}, or ${last}`\n        }\n      }\n      if (instances.length > 0 || other.length > 0) {\n        msg += ' or '\n      }\n    }\n    if (instances.length > 0) {\n      switch (instances.length) {\n        case 1:\n          msg += `an instance of ${instances[0]}`\n          break\n        case 2:\n          msg += `an instance of ${instances[0]} or ${instances[1]}`\n          break\n        default: {\n          const last = instances.pop()\n          msg += `an instance of ${instances.join(', ')}, or ${last}`\n        }\n      }\n      if (other.length > 0) {\n        msg += ' or '\n      }\n    }\n    switch (other.length) {\n      case 0:\n        break\n      case 1:\n        if (other[0].toLowerCase() !== other[0]) {\n          msg += 'an '\n        }\n        msg += `${other[0]}`\n        break\n      case 2:\n        msg += `one of ${other[0]} or ${other[1]}`\n        break\n      default: {\n        const last = other.pop()\n        msg += `one of ${other.join(', ')}, or ${last}`\n      }\n    }\n    if (actual == null) {\n      msg += `. Received ${actual}`\n    } else if (typeof actual === 'function' && actual.name) {\n      msg += `. Received function ${actual.name}`\n    } else if (typeof actual === 'object') {\n      var _actual$constructor\n      if (\n        (_actual$constructor = actual.constructor) !== null &&\n        _actual$constructor !== undefined &&\n        _actual$constructor.name\n      ) {\n        msg += `. Received an instance of ${actual.constructor.name}`\n      } else {\n        const inspected = inspect(actual, {\n          depth: -1\n        })\n        msg += `. Received ${inspected}`\n      }\n    } else {\n      let inspected = inspect(actual, {\n        colors: false\n      })\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`\n      }\n      msg += `. Received type ${typeof actual} (${inspected})`\n    }\n    return msg\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_ARG_VALUE',\n  (name, value, reason = 'is invalid') => {\n    let inspected = inspect(value)\n    if (inspected.length > 128) {\n      inspected = inspected.slice(0, 128) + '...'\n    }\n    const type = name.includes('.') ? 'property' : 'argument'\n    return `The ${type} '${name}' ${reason}. Received ${inspected}`\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_RETURN_VALUE',\n  (input, name, value) => {\n    var _value$constructor\n    const type =\n      value !== null &&\n      value !== undefined &&\n      (_value$constructor = value.constructor) !== null &&\n      _value$constructor !== undefined &&\n      _value$constructor.name\n        ? `instance of ${value.constructor.name}`\n        : `type ${typeof value}`\n    return `Expected ${input} to be returned from the \"${name}\"` + ` function but got ${type}.`\n  },\n  TypeError\n)\nE(\n  'ERR_MISSING_ARGS',\n  (...args) => {\n    assert(args.length > 0, 'At least one arg needs to be specified')\n    let msg\n    const len = args.length\n    args = (Array.isArray(args) ? args : [args]).map((a) => `\"${a}\"`).join(' or ')\n    switch (len) {\n      case 1:\n        msg += `The ${args[0]} argument`\n        break\n      case 2:\n        msg += `The ${args[0]} and ${args[1]} arguments`\n        break\n      default:\n        {\n          const last = args.pop()\n          msg += `The ${args.join(', ')}, and ${last} arguments`\n        }\n        break\n    }\n    return `${msg} must be specified`\n  },\n  TypeError\n)\nE(\n  'ERR_OUT_OF_RANGE',\n  (str, range, input) => {\n    assert(range, 'Missing \"range\" argument')\n    let received\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      const limit = BigInt(2) ** BigInt(32)\n      if (input > limit || input < -limit) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    } else {\n      received = inspect(input)\n    }\n    return `The value of \"${str}\" is out of range. It must be ${range}. Received ${received}`\n  },\n  RangeError\n)\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error)\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error)\nE('ERR_STREAM_ALREADY_FINISHED', 'Cannot call %s after a stream was finished', Error)\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error)\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error)\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError)\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error)\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error)\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event', Error)\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error)\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError)\nmodule.exports = {\n  AbortError,\n  aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),\n  hideStackFrames,\n  codes\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}