{"ast":null,"code":"import { trim } from '../utils/data/trim.js';\nexport function isEmpty(value) {\n  return value === 0 || value === 0n || value === undefined || value === null || value === '0' || value === '' || typeof value === 'string' && (trim(value).toLowerCase() === '0x' || trim(value).toLowerCase() === '0x00');\n}\nexport function isPresent(value) {\n  return !isEmpty(value);\n}\n/** @internal */\nexport function isEIP1559(transaction) {\n  return typeof transaction.maxFeePerGas !== 'undefined' && typeof transaction.maxPriorityFeePerGas !== 'undefined';\n}\nexport function isCIP64(transaction) {\n  /*\n   * Enable end user to force the tx to be considered as a CIP-64.\n   *\n   * The preliminary type will be determined as \"eip1559\" by src/utils/transaction/getTransactionType.ts\n   * and so we need the logic below to check for the specific value instead of checking if just any\n   * transaction type is provided. If that's anything else than \"cip64\" then we need to reevaluate the\n   * type based on the transaction fields.\n   *\n   * Modify with caution and according to https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n   */\n  if (transaction.type === 'cip64') {\n    return true;\n  }\n  return isEIP1559(transaction) && isPresent(transaction.feeCurrency);\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}