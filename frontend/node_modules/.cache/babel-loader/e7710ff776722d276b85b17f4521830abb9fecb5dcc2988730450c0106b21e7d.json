{"ast":null,"code":"import { bytesPerBlob, bytesPerFieldElement, fieldElementsPerBlob, maxBytesPerTransaction } from '../../constants/blob.js';\nimport { BlobSizeTooLargeError, EmptyBlobError } from '../../errors/blob.js';\nimport { createCursor } from '../cursor.js';\nimport { size } from '../data/size.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Transforms arbitrary data to blobs.\n *\n * @example\n * ```ts\n * import { toBlobs, stringToHex } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * ```\n */\nexport function toBlobs(parameters) {\n  const to = parameters.to ?? (typeof parameters.data === 'string' ? 'hex' : 'bytes');\n  const data = typeof parameters.data === 'string' ? hexToBytes(parameters.data) : parameters.data;\n  const size_ = size(data);\n  if (!size_) throw new EmptyBlobError();\n  if (size_ > maxBytesPerTransaction) throw new BlobSizeTooLargeError({\n    maxSize: maxBytesPerTransaction,\n    size: size_\n  });\n  const blobs = [];\n  let active = true;\n  let position = 0;\n  while (active) {\n    const blob = createCursor(new Uint8Array(bytesPerBlob));\n    let size = 0;\n    while (size < fieldElementsPerBlob) {\n      const bytes = data.slice(position, position + (bytesPerFieldElement - 1));\n      // Push a zero byte so the field element doesn't overflow the BLS modulus.\n      blob.pushByte(0x00);\n      // Push the current segment of data bytes.\n      blob.pushBytes(bytes);\n      // If we detect that the current segment of data bytes is less than 31 bytes,\n      // we can stop processing and push a terminator byte to indicate the end of the blob.\n      if (bytes.length < 31) {\n        blob.pushByte(0x80);\n        active = false;\n        break;\n      }\n      size++;\n      position += 31;\n    }\n    blobs.push(blob);\n  }\n  return to === 'bytes' ? blobs.map(x => x.bytes) : blobs.map(x => bytesToHex(x.bytes));\n}\n//# sourceMappingURL=toBlobs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}