{"ast":null,"code":"import { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js';\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus(client, parameters) {\n  const {\n    atomic = false,\n    chainId,\n    receipts,\n    version = '2.0.0',\n    ...response\n  } = await client.request({\n    method: 'wallet_getCallsStatus',\n    params: [parameters.id]\n  });\n  const [status, statusCode] = (() => {\n    const statusCode = response.status;\n    if (statusCode >= 100 && statusCode < 200) return ['pending', statusCode];\n    if (statusCode >= 200 && statusCode < 300) return ['success', statusCode];\n    if (statusCode >= 300 && statusCode < 700) return ['failure', statusCode];\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'CONFIRMED') return ['success', 200];\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'PENDING') return ['pending', 100];\n    return [undefined, statusCode];\n  })();\n  return {\n    ...response,\n    atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: chainId ? hexToNumber(chainId) : undefined,\n    receipts: receipts?.map(receipt => ({\n      ...receipt,\n      blockNumber: hexToBigInt(receipt.blockNumber),\n      gasUsed: hexToBigInt(receipt.gasUsed),\n      status: receiptStatuses[receipt.status]\n    })) ?? [],\n    statusCode,\n    status,\n    version\n  };\n}\n//# sourceMappingURL=getCallsStatus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}