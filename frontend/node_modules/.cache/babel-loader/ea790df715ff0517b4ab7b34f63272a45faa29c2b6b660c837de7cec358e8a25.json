{"ast":null,"code":"import { readContract } from '../../../actions/public/readContract.js';\nimport { EnsAvatarInvalidMetadataError, EnsAvatarInvalidNftUriError, EnsAvatarUnsupportedNamespaceError, EnsAvatarUriResolutionError } from '../../../errors/ens.js';\nconst networkRegex = /(?<protocol>https?:\\/\\/[^\\/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/;\nconst ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/;\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/;\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;\n/** @internal */\nexport async function isImageUri(uri) {\n  try {\n    const res = await fetch(uri, {\n      method: 'HEAD'\n    });\n    // retrieve content type header to check if content is image\n    if (res.status === 200) {\n      const contentType = res.headers.get('content-type');\n      return contentType?.startsWith('image/');\n    }\n    return false;\n  } catch (error) {\n    // if error is not cors related then fail\n    if (typeof error === 'object' && typeof error.response !== 'undefined') {\n      return false;\n    }\n    // fail in NodeJS, since the error is not cors but any other network issue\n    // biome-ignore lint/suspicious/noPrototypeBuiltins:\n    if (!globalThis.hasOwnProperty('Image')) return false;\n    // in case of cors, use image api to validate if given url is an actual image\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => {\n        resolve(true);\n      };\n      img.onerror = () => {\n        resolve(false);\n      };\n      img.src = uri;\n    });\n  }\n}\n/** @internal */\nexport function getGateway(custom, defaultGateway) {\n  if (!custom) return defaultGateway;\n  if (custom.endsWith('/')) return custom.slice(0, -1);\n  return custom;\n}\nexport function resolveAvatarUri({\n  uri,\n  gatewayUrls\n}) {\n  const isEncoded = base64Regex.test(uri);\n  if (isEncoded) return {\n    uri,\n    isOnChain: true,\n    isEncoded\n  };\n  const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io');\n  const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net');\n  const networkRegexMatch = uri.match(networkRegex);\n  const {\n    protocol,\n    subpath,\n    target,\n    subtarget = ''\n  } = networkRegexMatch?.groups || {};\n  const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/';\n  const isIPFS = protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri);\n  if (uri.startsWith('http') && !isIPNS && !isIPFS) {\n    let replacedUri = uri;\n    if (gatewayUrls?.arweave) replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave);\n    return {\n      uri: replacedUri,\n      isOnChain: false,\n      isEncoded: false\n    };\n  }\n  if ((isIPNS || isIPFS) && target) {\n    return {\n      uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\n      isOnChain: false,\n      isEncoded: false\n    };\n  }\n  if (protocol === 'ar:/' && target) {\n    return {\n      uri: `${arweaveGateway}/${target}${subtarget || ''}`,\n      isOnChain: false,\n      isEncoded: false\n    };\n  }\n  let parsedUri = uri.replace(dataURIRegex, '');\n  if (parsedUri.startsWith('<svg')) {\n    // if svg, base64 encode\n    parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;\n  }\n  if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\n    return {\n      uri: parsedUri,\n      isOnChain: true,\n      isEncoded: false\n    };\n  }\n  throw new EnsAvatarUriResolutionError({\n    uri\n  });\n}\nexport function getJsonImage(data) {\n  // validation check for json data, must include one of theses properties\n  if (typeof data !== 'object' || !('image' in data) && !('image_url' in data) && !('image_data' in data)) {\n    throw new EnsAvatarInvalidMetadataError({\n      data\n    });\n  }\n  return data.image || data.image_url || data.image_data;\n}\nexport async function getMetadataAvatarUri({\n  gatewayUrls,\n  uri\n}) {\n  try {\n    const res = await fetch(uri).then(res => res.json());\n    const image = await parseAvatarUri({\n      gatewayUrls,\n      uri: getJsonImage(res)\n    });\n    return image;\n  } catch {\n    throw new EnsAvatarUriResolutionError({\n      uri\n    });\n  }\n}\nexport async function parseAvatarUri({\n  gatewayUrls,\n  uri\n}) {\n  const {\n    uri: resolvedURI,\n    isOnChain\n  } = resolveAvatarUri({\n    uri,\n    gatewayUrls\n  });\n  if (isOnChain) return resolvedURI;\n  // check if resolvedURI is an image, if it is return the url\n  const isImage = await isImageUri(resolvedURI);\n  if (isImage) return resolvedURI;\n  throw new EnsAvatarUriResolutionError({\n    uri\n  });\n}\nexport function parseNftUri(uri_) {\n  let uri = uri_;\n  // parse valid nft spec (CAIP-22/CAIP-29)\n  // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n  if (uri.startsWith('did:nft:')) {\n    // convert DID to CAIP\n    uri = uri.replace('did:nft:', '').replace(/_/g, '/');\n  }\n  const [reference, asset_namespace, tokenID] = uri.split('/');\n  const [eip_namespace, chainID] = reference.split(':');\n  const [erc_namespace, contractAddress] = asset_namespace.split(':');\n  if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155') throw new EnsAvatarInvalidNftUriError({\n    reason: 'Only EIP-155 supported'\n  });\n  if (!chainID) throw new EnsAvatarInvalidNftUriError({\n    reason: 'Chain ID not found'\n  });\n  if (!contractAddress) throw new EnsAvatarInvalidNftUriError({\n    reason: 'Contract address not found'\n  });\n  if (!tokenID) throw new EnsAvatarInvalidNftUriError({\n    reason: 'Token ID not found'\n  });\n  if (!erc_namespace) throw new EnsAvatarInvalidNftUriError({\n    reason: 'ERC namespace not found'\n  });\n  return {\n    chainID: Number.parseInt(chainID),\n    namespace: erc_namespace.toLowerCase(),\n    contractAddress: contractAddress,\n    tokenID\n  };\n}\nexport async function getNftTokenUri(client, {\n  nft\n}) {\n  if (nft.namespace === 'erc721') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [{\n        name: 'tokenURI',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [{\n          name: 'tokenId',\n          type: 'uint256'\n        }],\n        outputs: [{\n          name: '',\n          type: 'string'\n        }]\n      }],\n      functionName: 'tokenURI',\n      args: [BigInt(nft.tokenID)]\n    });\n  }\n  if (nft.namespace === 'erc1155') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [{\n        name: 'uri',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [{\n          name: '_id',\n          type: 'uint256'\n        }],\n        outputs: [{\n          name: '',\n          type: 'string'\n        }]\n      }],\n      functionName: 'uri',\n      args: [BigInt(nft.tokenID)]\n    });\n  }\n  throw new EnsAvatarUnsupportedNamespaceError({\n    namespace: nft.namespace\n  });\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}