{"ast":null,"code":"import { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { secp256k1 } from 'ethereum-cryptography/secp256k1.js';\nimport { bytesToBigInt, bytesToHex, bytesToInt, concatBytes, setLengthLeft, toBytes, utf8ToBytes } from './bytes.js';\nimport { BIGINT_0, BIGINT_1, BIGINT_2, BIGINT_27, SECP256K1_ORDER, SECP256K1_ORDER_DIV_2 } from './constants.js';\nimport { assertIsBytes } from './helpers.js';\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nexport function ecsign(msgHash, privateKey, chainId) {\n  const sig = secp256k1.sign(msgHash, privateKey);\n  const buf = sig.toCompactRawBytes();\n  const r = buf.slice(0, 32);\n  const s = buf.slice(32, 64);\n  const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BIGINT_2;\n  return {\n    r,\n    s,\n    v\n  };\n}\nexport function calculateSigRecovery(v, chainId) {\n  if (v === BIGINT_0 || v === BIGINT_1) return v;\n  if (chainId === undefined) {\n    return v - BIGINT_27;\n  }\n  return v - (chainId * BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BIGINT_0 || recovery === BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (msgHash, v, r, s, chainId) {\n  const signature = concatBytes(setLengthLeft(r, 32), setLengthLeft(s, 32));\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const sig = secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n  const senderPubKey = sig.recoverPublicKey(msgHash);\n  return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bytesToHex(concatBytes(setLengthLeft(r, 32), setLengthLeft(s, 32), toBytes(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const ss = Uint8Array.from([...s]);\n  if (v > BigInt(28) && v % BIGINT_2 === BIGINT_1 || v === BIGINT_1 || v === BigInt(28)) {\n    ss[0] |= 0x80;\n  }\n  return bytesToHex(concatBytes(setLengthLeft(r, 32), setLengthLeft(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig) {\n  const bytes = toBytes(sig);\n  let r;\n  let s;\n  let v;\n  if (bytes.length >= 65) {\n    r = bytes.subarray(0, 32);\n    s = bytes.subarray(32, 64);\n    v = bytesToBigInt(bytes.subarray(64));\n  } else if (bytes.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = bytes.subarray(0, 32);\n    s = bytes.subarray(32, 64);\n    v = BigInt(bytesToInt(bytes.subarray(32, 33)) >> 7);\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BIGINT_27;\n  }\n  return {\n    v,\n    r,\n    s\n  };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  const rBigInt = bytesToBigInt(r);\n  const sBigInt = bytesToBigInt(s);\n  if (rBigInt === BIGINT_0 || rBigInt >= SECP256K1_ORDER || sBigInt === BIGINT_0 || sBigInt >= SECP256K1_ORDER) {\n    return false;\n  }\n  if (homesteadOrLater && sBigInt >= SECP256K1_ORDER_DIV_2) {\n    return false;\n  }\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message) {\n  assertIsBytes(message);\n  const prefix = utf8ToBytes(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n  return keccak256(concatBytes(prefix, message));\n};\n//# sourceMappingURL=signature.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}