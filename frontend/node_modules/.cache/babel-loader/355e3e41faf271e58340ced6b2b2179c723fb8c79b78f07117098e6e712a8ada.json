{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { ConstantsUtil, isSafe } from '@reown/appkit-common';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { FetchUtil } from '../utils/FetchUtil.js';\nimport { AccountController } from './AccountController.js';\nimport { AlertController } from './AlertController.js';\nimport { OptionsController } from './OptionsController.js';\n// -- Helpers ------------------------------------------- //\nconst baseUrl = CoreHelperUtil.getAnalyticsUrl();\nconst api = new FetchUtil({\n  baseUrl,\n  clientId: null\n});\nconst excluded = ['MODAL_CREATED'];\n// -- State --------------------------------------------- //\nconst state = proxy({\n  timestamp: Date.now(),\n  reportedErrors: {},\n  data: {\n    type: 'track',\n    event: 'MODAL_CREATED'\n  }\n});\n// -- Controller ---------------------------------------- //\nexport const EventsController = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  getSdkProperties() {\n    const {\n      projectId,\n      sdkType,\n      sdkVersion\n    } = OptionsController.state;\n    return {\n      projectId,\n      st: sdkType,\n      sv: sdkVersion || 'html-wagmi-4.2.2'\n    };\n  },\n  async _sendAnalyticsEvent(payload) {\n    try {\n      const address = AccountController.state.address;\n      if (excluded.includes(payload.data.event) || typeof window === 'undefined') {\n        return;\n      }\n      await api.post({\n        path: '/e',\n        params: EventsController.getSdkProperties(),\n        body: {\n          eventId: CoreHelperUtil.getUUID(),\n          url: window.location.href,\n          domain: window.location.hostname,\n          timestamp: payload.timestamp,\n          props: {\n            ...payload.data,\n            address\n          }\n        }\n      });\n      state.reportedErrors['FORBIDDEN'] = false;\n    } catch (err) {\n      const isForbiddenError = err instanceof Error && err.cause instanceof Response && err.cause.status === ConstantsUtil.HTTP_STATUS_CODES.FORBIDDEN && !state.reportedErrors['FORBIDDEN'];\n      if (isForbiddenError) {\n        AlertController.open({\n          shortMessage: 'Invalid App Configuration',\n          longMessage: `Origin ${isSafe() ? window.origin : 'uknown'} not found on Allowlist - update configuration on cloud.reown.com`\n        }, 'error');\n        state.reportedErrors['FORBIDDEN'] = true;\n      }\n    }\n  },\n  sendEvent(data) {\n    state.timestamp = Date.now();\n    state.data = data;\n    if (OptionsController.state.features?.analytics) {\n      EventsController._sendAnalyticsEvent(state);\n    }\n  }\n};\n//# sourceMappingURL=EventsController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}