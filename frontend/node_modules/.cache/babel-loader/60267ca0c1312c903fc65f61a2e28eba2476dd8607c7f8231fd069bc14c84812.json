{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.envUtils = exports.getJWSPublicKey = exports.getEnvironment = exports.isNative = exports.isDesktop = exports.isWeb = void 0;\nconst ua_parser_js_1 = require(\"ua-parser-js\");\nconst jws_1 = require(\"./jws\");\nconst isWeb = () => process.env.SUITE_TYPE === 'web';\nexports.isWeb = isWeb;\nconst isDesktop = () => process.env.SUITE_TYPE === 'desktop';\nexports.isDesktop = isDesktop;\nconst isNative = () => false;\nexports.isNative = isNative;\nconst getEnvironment = () => {\n  if ((0, exports.isWeb)()) return 'web';\n  return 'desktop';\n};\nexports.getEnvironment = getEnvironment;\nlet userAgentParser;\nconst getUserAgent = () => window.navigator.userAgent;\nconst getUserAgentParser = () => {\n  if (!userAgentParser) {\n    const ua = getUserAgent();\n    userAgentParser = new ua_parser_js_1.UAParser(ua);\n  }\n  return userAgentParser;\n};\nconst isAndroid = () => /Android/.test(getUserAgent());\nconst isChromeOs = () => /CrOS/.test(getUserAgent());\nconst getBrowserVersion = () => getUserAgentParser().getBrowser().version || '';\nconst getCommitHash = () => process.env.COMMITHASH || '';\nconst getOsVersion = async () => {\n  const {\n    version\n  } = await getUserAgentParser().getOS().withClientHints();\n  return version ?? '';\n};\nconst getDeprecatedOsVersion = () => getUserAgentParser().getOS().version || '';\nconst getCpuArch = async () => {\n  const {\n    architecture\n  } = await getUserAgentParser().getCPU().withClientHints();\n  return architecture ?? '';\n};\nconst getSuiteVersion = () => process.env.VERSION || '';\nconst getBrowserName = () => {\n  const browserName = getUserAgentParser().getBrowser().name?.replace(' ', '');\n  return browserName?.toLowerCase() || '';\n};\nconst isFirefox = () => getBrowserName() === 'firefox';\nconst getPlatform = () => window.navigator.platform;\nconst getPlatformLanguages = () => window.navigator.languages;\nconst getScreenWidth = () => window.screen.width;\nconst getScreenHeight = () => window.screen.height;\nconst getWindowWidth = () => window.innerWidth;\nconst getWindowHeight = () => window.innerHeight;\nconst getLocationOrigin = () => window.location.origin;\nconst getLocationHostname = () => window.location.hostname;\nconst getProcessPlatform = () => typeof process !== 'undefined' ? process.platform : '';\nconst isMacOs = () => {\n  if (getProcessPlatform() === 'darwin') return true;\n  if (typeof window === 'undefined') return false;\n  return getPlatform().toLowerCase().startsWith('mac');\n};\nconst isWindows = () => {\n  if (getProcessPlatform() === 'win32') return true;\n  if (typeof window === 'undefined') return false;\n  return getPlatform().toLowerCase().startsWith('win');\n};\nconst isIOs = () => ['iPhone', 'iPad', 'iPod'].includes(getPlatform());\nconst isLinux = () => {\n  if (getProcessPlatform() === 'linux') return true;\n  if (typeof window === 'undefined') return false;\n  if (isAndroid() || isChromeOs()) return false;\n  return getPlatform().toLowerCase().startsWith('linux');\n};\nconst isCodesignBuild = () => process.env.IS_CODESIGN_BUILD === 'true';\nconst getOsName = () => {\n  if (isWindows()) return 'windows';\n  if (isMacOs()) return 'macos';\n  if (isAndroid()) return 'android';\n  if (isChromeOs()) return 'chromeos';\n  if (isLinux()) return 'linux';\n  if (isIOs()) return 'ios';\n  return '';\n};\nconst getOsNameWeb = () => getUserAgentParser().getOS().name?.replaceAll(' ', '');\nconst getOsFamily = () => {\n  const osName = getUserAgentParser().getOS().name?.toLowerCase().replaceAll(' ', '');\n  if (osName === 'windows') {\n    return 'Windows';\n  }\n  if (osName === 'macos') {\n    return 'MacOS';\n  }\n  return 'Linux';\n};\nconst getDeviceType = () => getUserAgentParser().getDevice().type;\nconst getJWSPublicKey = () => isCodesignBuild() ? jws_1.publicKey.codesign : jws_1.publicKey.dev;\nexports.getJWSPublicKey = getJWSPublicKey;\nexports.envUtils = {\n  isWeb: exports.isWeb,\n  isDesktop: exports.isDesktop,\n  isNative: exports.isNative,\n  getEnvironment: exports.getEnvironment,\n  getUserAgent,\n  isAndroid,\n  isChromeOs,\n  getOsVersion,\n  getDeprecatedOsVersion,\n  getCpuArch,\n  getBrowserName,\n  getBrowserVersion,\n  getCommitHash,\n  getDeviceType,\n  getSuiteVersion,\n  isFirefox,\n  getPlatform,\n  getPlatformLanguages,\n  getScreenWidth,\n  getScreenHeight,\n  getWindowWidth,\n  getWindowHeight,\n  getLocationOrigin,\n  getLocationHostname,\n  getProcessPlatform,\n  isMacOs,\n  isWindows,\n  isIOs,\n  isLinux,\n  isCodesignBuild,\n  getOsName,\n  getOsNameWeb,\n  getOsFamily,\n  getJWSPublicKey: exports.getJWSPublicKey\n};\n//# sourceMappingURL=envUtils.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}