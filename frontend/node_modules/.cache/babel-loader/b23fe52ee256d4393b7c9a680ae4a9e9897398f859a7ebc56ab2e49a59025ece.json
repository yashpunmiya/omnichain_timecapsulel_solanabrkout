{"ast":null,"code":"import { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js';\nimport { size } from '../utils/data/size.js';\nimport { BaseError } from './base.js';\nexport class AbiConstructorNotFoundError extends BaseError {\n  constructor({\n    docsPath\n  }) {\n    super(['A constructor was not found on the ABI.', 'Make sure you are using the correct ABI and that the constructor exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiConstructorNotFoundError'\n    });\n  }\n}\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  constructor({\n    docsPath\n  }) {\n    super(['Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.', 'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.'].join('\\n'), {\n      docsPath,\n      name: 'AbiConstructorParamsNotFoundError'\n    });\n  }\n}\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  constructor({\n    data,\n    size\n  }) {\n    super([`Data size of ${size} bytes is invalid.`, 'Size must be in increments of 32 bytes (size % 32 === 0).'].join('\\n'), {\n      metaMessages: [`Data: ${data} (${size} bytes)`],\n      name: 'AbiDecodingDataSizeInvalidError'\n    });\n  }\n}\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  constructor({\n    data,\n    params,\n    size\n  }) {\n    super([`Data size of ${size} bytes is too small for given parameters.`].join('\\n'), {\n      metaMessages: [`Params: (${formatAbiParams(params, {\n        includeName: true\n      })})`, `Data:   ${data} (${size} bytes)`],\n      name: 'AbiDecodingDataSizeTooSmallError'\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"params\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"size\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.data = data;\n    this.params = params;\n    this.size = size;\n  }\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n      name: 'AbiDecodingZeroDataError'\n    });\n  }\n}\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n    type\n  }) {\n    super([`ABI encoding array length mismatch for type ${type}.`, `Expected length: ${expectedLength}`, `Given length: ${givenLength}`].join('\\n'), {\n      name: 'AbiEncodingArrayLengthMismatchError'\n    });\n  }\n}\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  constructor({\n    expectedSize,\n    value\n  }) {\n    super(`Size of bytes \"${value}\" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`, {\n      name: 'AbiEncodingBytesSizeMismatchError'\n    });\n  }\n}\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength\n  }) {\n    super(['ABI encoding params/values length mismatch.', `Expected length (params): ${expectedLength}`, `Given length (values): ${givenLength}`].join('\\n'), {\n      name: 'AbiEncodingLengthMismatchError'\n    });\n  }\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  constructor(errorName, {\n    docsPath\n  }) {\n    super([`Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`, 'Cannot encode error result without knowing what the parameter types are.', 'Make sure you are using the correct ABI and that the inputs exist on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiErrorInputsNotFoundError'\n    });\n  }\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  constructor(errorName, {\n    docsPath\n  } = {}) {\n    super([`Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`, 'Make sure you are using the correct ABI and that the error exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiErrorNotFoundError'\n    });\n  }\n}\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  constructor(signature, {\n    docsPath\n  }) {\n    super([`Encoded error signature \"${signature}\" not found on ABI.`, 'Make sure you are using the correct ABI and that the error exists on it.', `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`].join('\\n'), {\n      docsPath,\n      name: 'AbiErrorSignatureNotFoundError'\n    });\n    Object.defineProperty(this, \"signature\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.signature = signature;\n  }\n}\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  constructor({\n    docsPath\n  }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n      name: 'AbiEventSignatureEmptyTopicsError'\n    });\n  }\n}\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  constructor(signature, {\n    docsPath\n  }) {\n    super([`Encoded event signature \"${signature}\" not found on ABI.`, 'Make sure you are using the correct ABI and that the event exists on it.', `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`].join('\\n'), {\n      docsPath,\n      name: 'AbiEventSignatureNotFoundError'\n    });\n  }\n}\nexport class AbiEventNotFoundError extends BaseError {\n  constructor(eventName, {\n    docsPath\n  } = {}) {\n    super([`Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`, 'Make sure you are using the correct ABI and that the event exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiEventNotFoundError'\n    });\n  }\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  constructor(functionName, {\n    docsPath\n  } = {}) {\n    super([`Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`, 'Make sure you are using the correct ABI and that the function exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiFunctionNotFoundError'\n    });\n  }\n}\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  constructor(functionName, {\n    docsPath\n  }) {\n    super([`Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`, 'Cannot decode function result without knowing what the parameter types are.', 'Make sure you are using the correct ABI and that the function exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiFunctionOutputsNotFoundError'\n    });\n  }\n}\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  constructor(signature, {\n    docsPath\n  }) {\n    super([`Encoded function signature \"${signature}\" not found on ABI.`, 'Make sure you are using the correct ABI and that the function exists on it.', `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`].join('\\n'), {\n      docsPath,\n      name: 'AbiFunctionSignatureNotFoundError'\n    });\n  }\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  constructor(x, y) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [`\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`, `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``, '', 'These types encode differently and cannot be distinguished at runtime.', 'Remove one of the ambiguous items in the ABI.'],\n      name: 'AbiItemAmbiguityError'\n    });\n  }\n}\nexport class BytesSizeMismatchError extends BaseError {\n  constructor({\n    expectedSize,\n    givenSize\n  }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\n      name: 'BytesSizeMismatchError'\n    });\n  }\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  constructor({\n    abiItem,\n    data,\n    params,\n    size\n  }) {\n    super([`Data size of ${size} bytes is too small for non-indexed event parameters.`].join('\\n'), {\n      metaMessages: [`Params: (${formatAbiParams(params, {\n        includeName: true\n      })})`, `Data:   ${data} (${size} bytes)`],\n      name: 'DecodeLogDataMismatch'\n    });\n    Object.defineProperty(this, \"abiItem\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"params\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"size\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.abiItem = abiItem;\n    this.data = data;\n    this.params = params;\n    this.size = size;\n  }\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  constructor({\n    abiItem,\n    param\n  }) {\n    super([`Expected a topic for indexed event parameter${param.name ? ` \"${param.name}\"` : ''} on event \"${formatAbiItem(abiItem, {\n      includeName: true\n    })}\".`].join('\\n'), {\n      name: 'DecodeLogTopicsMismatch'\n    });\n    Object.defineProperty(this, \"abiItem\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.abiItem = abiItem;\n  }\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  constructor(type, {\n    docsPath\n  }) {\n    super([`Type \"${type}\" is not a valid encoding type.`, 'Please provide a valid ABI type.'].join('\\n'), {\n      docsPath,\n      name: 'InvalidAbiEncodingType'\n    });\n  }\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  constructor(type, {\n    docsPath\n  }) {\n    super([`Type \"${type}\" is not a valid decoding type.`, 'Please provide a valid ABI type.'].join('\\n'), {\n      docsPath,\n      name: 'InvalidAbiDecodingType'\n    });\n  }\n}\nexport class InvalidArrayError extends BaseError {\n  constructor(value) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\n      name: 'InvalidArrayError'\n    });\n  }\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  constructor(type) {\n    super([`\"${type}\" is not a valid definition type.`, 'Valid types: \"function\", \"event\", \"error\"'].join('\\n'), {\n      name: 'InvalidDefinitionTypeError'\n    });\n  }\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  constructor(type) {\n    super(`Type \"${type}\" is not supported for packed encoding.`, {\n      name: 'UnsupportedPackedAbiType'\n    });\n  }\n}","map":{"version":3,"names":["formatAbiItem","formatAbiParams","size","BaseError","AbiConstructorNotFoundError","constructor","docsPath","join","name","AbiConstructorParamsNotFoundError","AbiDecodingDataSizeInvalidError","data","metaMessages","AbiDecodingDataSizeTooSmallError","params","includeName","Object","defineProperty","AbiDecodingZeroDataError","AbiEncodingArrayLengthMismatchError","expectedLength","givenLength","type","AbiEncodingBytesSizeMismatchError","expectedSize","value","AbiEncodingLengthMismatchError","AbiErrorInputsNotFoundError","errorName","AbiErrorNotFoundError","AbiErrorSignatureNotFoundError","signature","AbiEventSignatureEmptyTopicsError","AbiEventSignatureNotFoundError","AbiEventNotFoundError","eventName","AbiFunctionNotFoundError","functionName","AbiFunctionOutputsNotFoundError","AbiFunctionSignatureNotFoundError","AbiItemAmbiguityError","x","y","abiItem","BytesSizeMismatchError","givenSize","DecodeLogDataMismatch","DecodeLogTopicsMismatch","param","InvalidAbiEncodingTypeError","InvalidAbiDecodingTypeError","InvalidArrayError","InvalidDefinitionTypeError","UnsupportedPackedAbiType"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\errors\\abi.ts"],"sourcesContent":["import type { Abi, AbiEvent, AbiParameter } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\nimport { size } from '../utils/data/size.js'\n\nimport { BaseError } from './base.js'\n\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\n  name: 'AbiConstructorNotFoundError'\n}\nexport class AbiConstructorNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'A constructor was not found on the ABI.',\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiConstructorNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiConstructorParamsNotFoundErrorType =\n  AbiConstructorParamsNotFoundError & {\n    name: 'AbiConstructorParamsNotFoundError'\n  }\n\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiConstructorParamsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeInvalidErrorType =\n  AbiDecodingDataSizeInvalidError & {\n    name: 'AbiDecodingDataSizeInvalidError'\n  }\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  constructor({ data, size }: { data: Hex; size: number }) {\n    super(\n      [\n        `Data size of ${size} bytes is invalid.`,\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\n      ].join('\\n'),\n      {\n        metaMessages: [`Data: ${data} (${size} bytes)`],\n        name: 'AbiDecodingDataSizeInvalidError',\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeTooSmallErrorType =\n  AbiDecodingDataSizeTooSmallError & {\n    name: 'AbiDecodingDataSizeTooSmallError'\n  }\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    data,\n    params,\n    size,\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\n    super(\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\n        '\\n',\n      ),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n        name: 'AbiDecodingDataSizeTooSmallError',\n      },\n    )\n\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\n  name: 'AbiDecodingZeroDataError'\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n      name: 'AbiDecodingZeroDataError',\n    })\n  }\n}\n\nexport type AbiEncodingArrayLengthMismatchErrorType =\n  AbiEncodingArrayLengthMismatchError & {\n    name: 'AbiEncodingArrayLengthMismatchError'\n  }\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      [\n        `ABI encoding array length mismatch for type ${type}.`,\n        `Expected length: ${expectedLength}`,\n        `Given length: ${givenLength}`,\n      ].join('\\n'),\n      { name: 'AbiEncodingArrayLengthMismatchError' },\n    )\n  }\n}\n\nexport type AbiEncodingBytesSizeMismatchErrorType =\n  AbiEncodingBytesSizeMismatchError & {\n    name: 'AbiEncodingBytesSizeMismatchError'\n  }\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n      { name: 'AbiEncodingBytesSizeMismatchError' },\n    )\n  }\n}\n\nexport type AbiEncodingLengthMismatchErrorType =\n  AbiEncodingLengthMismatchError & {\n    name: 'AbiEncodingLengthMismatchError'\n  }\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding params/values length mismatch.',\n        `Expected length (params): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n      { name: 'AbiEncodingLengthMismatchError' },\n    )\n  }\n}\n\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\n  name: 'AbiErrorInputsNotFoundError'\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n        'Cannot encode error result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorInputsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\n  name: 'AbiErrorNotFoundError'\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  constructor(\n    errorName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiErrorSignatureNotFoundErrorType =\n  AbiErrorSignatureNotFoundError & {\n    name: 'AbiErrorSignatureNotFoundError'\n  }\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  signature: Hex\n\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded error signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorSignatureNotFoundError',\n      },\n    )\n    this.signature = signature\n  }\n}\n\nexport type AbiEventSignatureEmptyTopicsErrorType =\n  AbiEventSignatureEmptyTopicsError & {\n    name: 'AbiEventSignatureEmptyTopicsError'\n  }\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n      name: 'AbiEventSignatureEmptyTopicsError',\n    })\n  }\n}\n\nexport type AbiEventSignatureNotFoundErrorType =\n  AbiEventSignatureNotFoundError & {\n    name: 'AbiEventSignatureNotFoundError'\n  }\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded event signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiEventSignatureNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\n  name: 'AbiEventNotFoundError'\n}\nexport class AbiEventNotFoundError extends BaseError {\n  constructor(\n    eventName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiEventNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\n  name: 'AbiFunctionNotFoundError'\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  constructor(\n    functionName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionOutputsNotFoundErrorType =\n  AbiFunctionOutputsNotFoundError & {\n    name: 'AbiFunctionOutputsNotFoundError'\n  }\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n        'Cannot decode function result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionOutputsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionSignatureNotFoundErrorType =\n  AbiFunctionSignatureNotFoundError & {\n    name: 'AbiFunctionSignatureNotFoundError'\n  }\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded function signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionSignatureNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\n  name: 'AbiItemAmbiguityError'\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  constructor(\n    x: { abiItem: Abi[number]; type: string },\n    y: { abiItem: Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n      name: 'AbiItemAmbiguityError',\n    })\n  }\n}\n\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\n  name: 'BytesSizeMismatchError'\n}\nexport class BytesSizeMismatchError extends BaseError {\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\n      name: 'BytesSizeMismatchError',\n    })\n  }\n}\n\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\n  name: 'DecodeLogDataMismatch'\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  abiItem: AbiEvent\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    abiItem,\n    data,\n    params,\n    size,\n  }: {\n    abiItem: AbiEvent\n    data: Hex\n    params: readonly AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n        name: 'DecodeLogDataMismatch',\n      },\n    )\n\n    this.abiItem = abiItem\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\n  name: 'DecodeLogTopicsMismatch'\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  abiItem: AbiEvent\n\n  constructor({\n    abiItem,\n    param,\n  }: {\n    abiItem: AbiEvent\n    param: AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n      ].join('\\n'),\n      { name: 'DecodeLogTopicsMismatch' },\n    )\n\n    this.abiItem = abiItem\n  }\n}\n\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\n  name: 'InvalidAbiEncodingTypeError'\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid encoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath, name: 'InvalidAbiEncodingType' },\n    )\n  }\n}\n\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\n  name: 'InvalidAbiDecodingTypeError'\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid decoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath, name: 'InvalidAbiDecodingType' },\n    )\n  }\n}\n\nexport type InvalidArrayErrorType = InvalidArrayError & {\n  name: 'InvalidArrayError'\n}\nexport class InvalidArrayError extends BaseError {\n  constructor(value: unknown) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\n      name: 'InvalidArrayError',\n    })\n  }\n}\n\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\n  name: 'InvalidDefinitionTypeError'\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  constructor(type: string) {\n    super(\n      [\n        `\"${type}\" is not a valid definition type.`,\n        'Valid types: \"function\", \"event\", \"error\"',\n      ].join('\\n'),\n      { name: 'InvalidDefinitionTypeError' },\n    )\n  }\n}\n\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\n  name: 'UnsupportedPackedAbiType'\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  constructor(type: unknown) {\n    super(`Type \"${type}\" is not supported for packed encoding.`, {\n      name: 'UnsupportedPackedAbiType',\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}