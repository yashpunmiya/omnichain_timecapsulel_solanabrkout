{"ast":null,"code":"import { BaseError } from './base.js';\nexport class AccountStateConflictError extends BaseError {\n  constructor({\n    address\n  }) {\n    super(`State for account \"${address}\" is set multiple times.`, {\n      name: 'AccountStateConflictError'\n    });\n  }\n}\nexport class StateAssignmentConflictError extends BaseError {\n  constructor() {\n    super('state and stateDiff are set on the same account.', {\n      name: 'StateAssignmentConflictError'\n    });\n  }\n}\n/** @internal */\nexport function prettyStateMapping(stateMapping) {\n  return stateMapping.reduce((pretty, {\n    slot,\n    value\n  }) => {\n    return `${pretty}        ${slot}: ${value}\\n`;\n  }, '');\n}\nexport function prettyStateOverride(stateOverride) {\n  return stateOverride.reduce((pretty, {\n    address,\n    ...state\n  }) => {\n    let val = `${pretty}    ${address}:\\n`;\n    if (state.nonce) val += `      nonce: ${state.nonce}\\n`;\n    if (state.balance) val += `      balance: ${state.balance}\\n`;\n    if (state.code) val += `      code: ${state.code}\\n`;\n    if (state.state) {\n      val += '      state:\\n';\n      val += prettyStateMapping(state.state);\n    }\n    if (state.stateDiff) {\n      val += '      stateDiff:\\n';\n      val += prettyStateMapping(state.stateDiff);\n    }\n    return val;\n  }, '  State Override:\\n').slice(0, -1);\n}\n//# sourceMappingURL=stateOverride.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}