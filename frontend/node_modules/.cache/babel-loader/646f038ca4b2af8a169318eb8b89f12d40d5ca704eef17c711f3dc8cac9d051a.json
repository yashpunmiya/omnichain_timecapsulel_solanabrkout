{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor({\n    givenLength,\n    maxBytecodeSize\n  }) {\n    super(`Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`, {\n      name: 'BytecodeLengthExceedsMaxSizeError'\n    });\n  }\n}\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor({\n    givenLengthInWords\n  }) {\n    super(`Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`, {\n      name: 'BytecodeLengthInWordsMustBeOddError'\n    });\n  }\n}\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor({\n    givenLength\n  }) {\n    super(`The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`, {\n      name: 'BytecodeLengthMustBeDivisibleBy32Error'\n    });\n  }\n}","map":{"version":3,"names":["BaseError","BytecodeLengthExceedsMaxSizeError","constructor","givenLength","maxBytecodeSize","name","BytecodeLengthInWordsMustBeOddError","givenLengthInWords","BytecodeLengthMustBeDivisibleBy32Error"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\zksync\\errors\\bytecode.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\n\nexport type BytecodeLengthExceedsMaxSizeErrorType =\n  BytecodeLengthExceedsMaxSizeError & {\n    name: 'BytecodeLengthExceedsMaxSizeError'\n  }\n\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor({\n    givenLength,\n    maxBytecodeSize,\n  }: { givenLength: number; maxBytecodeSize: bigint }) {\n    super(\n      `Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthExceedsMaxSizeError' },\n    )\n  }\n}\n\nexport type BytecodeLengthInWordsMustBeOddErrorType =\n  BytecodeLengthInWordsMustBeOddError & {\n    name: 'BytecodeLengthInWordsMustBeOddError'\n  }\n\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor({ givenLengthInWords }: { givenLengthInWords: number }) {\n    super(\n      `Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`,\n      { name: 'BytecodeLengthInWordsMustBeOddError' },\n    )\n  }\n}\n\nexport type BytecodeLengthMustBeDivisibleBy32ErrorType =\n  BytecodeLengthMustBeDivisibleBy32Error & {\n    name: 'BytecodeLengthMustBeDivisibleBy32Error'\n  }\n\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor({ givenLength }: { givenLength: number }) {\n    super(\n      `The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthMustBeDivisibleBy32Error' },\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,sBAAsB;AAOhD,OAAM,MAAOC,iCAAkC,SAAQD,SAAS;EAC9DE,YAAY;IACVC,WAAW;IACXC;EAAe,CACkC;IACjD,KAAK,CACH,kCAAkCA,eAAe,yBAAyBD,WAAW,EAAE,EACvF;MAAEE,IAAI,EAAE;IAAmC,CAAE,CAC9C;EACH;;AAQF,OAAM,MAAOC,mCAAoC,SAAQN,SAAS;EAChEE,YAAY;IAAEK;EAAkB,CAAkC;IAChE,KAAK,CACH,wEAAwEA,kBAAkB,EAAE,EAC5F;MAAEF,IAAI,EAAE;IAAqC,CAAE,CAChD;EACH;;AAQF,OAAM,MAAOG,sCAAuC,SAAQR,SAAS;EACnEE,YAAY;IAAEC;EAAW,CAA2B;IAClD,KAAK,CACH,uEAAuEA,WAAW,EAAE,EACpF;MAAEE,IAAI,EAAE;IAAwC,CAAE,CACnD;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}