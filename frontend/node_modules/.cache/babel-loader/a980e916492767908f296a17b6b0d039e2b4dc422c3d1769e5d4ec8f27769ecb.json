{"ast":null,"code":"import UniversalProvider from '@walletconnect/universal-provider';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { AccountController, OptionsController } from '@reown/appkit-controllers';\nimport { PresetsUtil } from '@reown/appkit-utils';\nimport { WalletConnectConnector } from '../connectors/WalletConnectConnector.js';\n/**\n * Abstract class representing a chain adapter blueprint.\n * @template Connector - The type of connector extending ChainAdapterConnector\n */\nexport class AdapterBlueprint {\n  /**\n   * Creates an instance of AdapterBlueprint.\n   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter\n   */\n  constructor(params) {\n    this.availableConnectors = [];\n    this.eventListeners = new Map();\n    if (params) {\n      this.construct(params);\n    }\n  }\n  /**\n   * Initializes the adapter with the given parameters.\n   * @param {AdapterBlueprint.Params} params - The parameters for initializing the adapter\n   */\n  construct(params) {\n    this.caipNetworks = params.networks;\n    this.projectId = params.projectId;\n    this.namespace = params.namespace;\n    this.adapterType = params.adapterType;\n  }\n  /**\n   * Gets the available connectors.\n   * @returns {Connector[]} An array of available connectors\n   */\n  get connectors() {\n    return this.availableConnectors;\n  }\n  /**\n   * Gets the supported networks.\n   * @returns {CaipNetwork[]} An array of supported networks\n   */\n  get networks() {\n    return this.caipNetworks || [];\n  }\n  /**\n   * Sets the auth provider.\n   * @param {W3mFrameProvider} authProvider - The auth provider instance\n   */\n  setAuthProvider(authProvider) {\n    this.addConnector({\n      id: CommonConstantsUtil.CONNECTOR_ID.AUTH,\n      type: 'AUTH',\n      name: CommonConstantsUtil.CONNECTOR_NAMES.AUTH,\n      provider: authProvider,\n      imageId: PresetsUtil.ConnectorImageIds[CommonConstantsUtil.CONNECTOR_ID.AUTH],\n      chain: this.namespace,\n      chains: []\n    });\n  }\n  /**\n   * Adds one or more connectors to the available connectors list.\n   * @param {...Connector} connectors - The connectors to add\n   */\n  addConnector(...connectors) {\n    const connectorsAdded = new Set();\n    this.availableConnectors = [...connectors, ...this.availableConnectors].filter(connector => {\n      if (connectorsAdded.has(connector.id)) {\n        return false;\n      }\n      connectorsAdded.add(connector.id);\n      return true;\n    });\n    this.emit('connectors', this.availableConnectors);\n  }\n  setStatus(status, chainNamespace) {\n    AccountController.setStatus(status, chainNamespace);\n  }\n  /**\n   * Adds an event listener for a specific event.\n   * @template T\n   * @param {T} eventName - The name of the event\n   * @param {EventCallback<T>} callback - The callback function to be called when the event is emitted\n   */\n  on(eventName, callback) {\n    if (!this.eventListeners.has(eventName)) {\n      this.eventListeners.set(eventName, new Set());\n    }\n    this.eventListeners.get(eventName)?.add(callback);\n  }\n  /**\n   * Removes an event listener for a specific event.\n   * @template T\n   * @param {T} eventName - The name of the event\n   * @param {EventCallback<T>} callback - The callback function to be removed\n   */\n  off(eventName, callback) {\n    const listeners = this.eventListeners.get(eventName);\n    if (listeners) {\n      listeners.delete(callback);\n    }\n  }\n  /**\n   * Removes all event listeners.\n   */\n  removeAllEventListeners() {\n    this.eventListeners.forEach(listeners => {\n      listeners.clear();\n    });\n  }\n  /**\n   * Emits an event with the given name and optional data.\n   * @template T\n   * @param {T} eventName - The name of the event to emit\n   * @param {EventData[T]} [data] - The optional data to be passed to the event listeners\n   */\n  emit(eventName, data) {\n    const listeners = this.eventListeners.get(eventName);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n  /**\n   * Connects to WalletConnect.\n   * @param {number | string} [_chainId] - Optional chain ID to connect to\n   */\n  async connectWalletConnect(_chainId) {\n    const connector = this.getWalletConnectConnector();\n    const result = await connector.connectWalletConnect();\n    return {\n      clientId: result.clientId\n    };\n  }\n  /**\n   * Switches the network.\n   * @param {AdapterBlueprint.SwitchNetworkParams} params - Network switching parameters\n   */\n  async switchNetwork(params) {\n    const {\n      caipNetwork,\n      providerType\n    } = params;\n    if (!params.provider) {\n      return;\n    }\n    const provider = 'provider' in params.provider ? params.provider.provider : params.provider;\n    if (providerType === 'WALLET_CONNECT') {\n      ;\n      provider.setDefaultChain(caipNetwork.caipNetworkId);\n      return;\n    }\n    if (provider && providerType === 'AUTH') {\n      const authProvider = provider;\n      await authProvider.switchNetwork(caipNetwork.caipNetworkId);\n      const user = await authProvider.getUser({\n        chainId: caipNetwork.caipNetworkId,\n        preferredAccountType: OptionsController.state.defaultAccountTypes[caipNetwork.chainNamespace]\n      });\n      this.emit('switchNetwork', user);\n    }\n  }\n  getWalletConnectConnector() {\n    const connector = this.connectors.find(c => c instanceof WalletConnectConnector);\n    if (!connector) {\n      throw new Error('WalletConnectConnector not found');\n    }\n    return connector;\n  }\n}\n//# sourceMappingURL=ChainAdapterBlueprint.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}