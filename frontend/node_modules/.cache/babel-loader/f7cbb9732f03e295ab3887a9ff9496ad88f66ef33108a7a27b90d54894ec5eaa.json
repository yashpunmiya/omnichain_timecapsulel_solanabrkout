{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { BaseError } from '../../errors/base.js';\nimport { recoverAuthorizationAddress } from '../../experimental/eip7702/utils/recoverAuthorizationAddress.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getEstimateGasError } from '../../utils/errors/getEstimateGasError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { serializeStateOverride } from '../../utils/stateOverride.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { prepareTransactionRequest } from '../wallet/prepareTransactionRequest.js';\nimport { getBalance } from './getBalance.js';\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas(client, args) {\n  const {\n    account: account_ = client.account\n  } = args;\n  const account = account_ ? parseAccount(account_) : undefined;\n  try {\n    const {\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      stateOverride,\n      ...rest\n    } = await prepareTransactionRequest(client, {\n      ...args,\n      parameters:\n      // Some RPC Providers do not compute versioned hashes from blobs. We will need\n      // to compute them.\n      account?.type === 'local' ? undefined : ['blobVersionedHashes']\n    });\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const rpcStateOverride = serializeStateOverride(stateOverride);\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (rest.to) return rest.to;\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0) return await recoverAuthorizationAddress({\n        authorization: authorizationList[0]\n      }).catch(() => {\n        throw new BaseError('`to` is required. Could not infer from `authorizationList`');\n      });\n      // Otherwise, we are sending a deployment transaction.\n      return undefined;\n    })();\n    assertRequest(args);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format: chainFormat\n      }),\n      from: account?.address,\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    function estimateGas_rpc(parameters) {\n      const {\n        block,\n        request,\n        rpcStateOverride\n      } = parameters;\n      return client.request({\n        method: 'eth_estimateGas',\n        params: rpcStateOverride ? [request, block ?? 'latest', rpcStateOverride] : block ? [request, block] : [request]\n      });\n    }\n    let estimate = BigInt(await estimateGas_rpc({\n      block,\n      request,\n      rpcStateOverride\n    }));\n    // TODO(7702): Remove this once https://github.com/ethereum/execution-apis/issues/561 is resolved.\n    //       Authorization list schema is not implemented on JSON-RPC spec yet, so we need to\n    //       manually estimate the gas.\n    if (authorizationList) {\n      const value = await getBalance(client, {\n        address: request.from\n      });\n      const estimates = await Promise.all(authorizationList.map(async authorization => {\n        const {\n          contractAddress\n        } = authorization;\n        const estimate = await estimateGas_rpc({\n          block,\n          request: {\n            authorizationList: undefined,\n            data,\n            from: account?.address,\n            to: contractAddress,\n            value: numberToHex(value)\n          },\n          rpcStateOverride\n        }).catch(() => 100000n);\n        return 2n * BigInt(estimate);\n      }));\n      estimate += estimates.reduce((acc, curr) => acc + curr, 0n);\n    }\n    return estimate;\n  } catch (err) {\n    throw getEstimateGasError(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","BaseError","recoverAuthorizationAddress","numberToHex","getEstimateGasError","extract","formatTransactionRequest","serializeStateOverride","assertRequest","prepareTransactionRequest","getBalance","estimateGas","client","args","account","account_","undefined","accessList","authorizationList","blobs","blobVersionedHashes","blockNumber","blockTag","data","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","value","stateOverride","rest","parameters","type","blockNumberHex","block","rpcStateOverride","to","length","authorization","catch","chainFormat","chain","formatters","transactionRequest","format","request","from","address","estimateGas_rpc","method","params","estimate","BigInt","estimates","Promise","all","map","contractAddress","reduce","acc","curr","err"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\estimateGas.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  recoverAuthorizationAddress,\n} from '../../experimental/eip7702/utils/recoverAuthorizationAddress.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { serializeStateOverride } from '../../utils/stateOverride.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\nimport { getBalance } from './getBalance.js'\n\nexport type EstimateGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedEstimateGas<chain>, 'from'> & {\n  account?: Account | Address | undefined\n  stateOverride?: StateOverride | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: undefined\n      }\n    | {\n        blockNumber?: undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\ntype FormattedEstimateGas<chain extends Chain | undefined = Chain | undefined> =\n  FormattedTransactionRequest<chain>\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | RecoverAuthorizationAddressErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: EstimateGasParameters<chain>,\n): Promise<EstimateGasReturnType> {\n  const { account: account_ = client.account } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    const {\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      stateOverride,\n      ...rest\n    } = (await prepareTransactionRequest(client, {\n      ...args,\n      parameters:\n        // Some RPC Providers do not compute versioned hashes from blobs. We will need\n        // to compute them.\n        account?.type === 'local' ? undefined : ['blobVersionedHashes'],\n    } as PrepareTransactionRequestParameters)) as EstimateGasParameters\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const rpcStateOverride = serializeStateOverride(stateOverride)\n\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (rest.to) return rest.to\n\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0)\n        return await recoverAuthorizationAddress({\n          authorization: authorizationList[0],\n        }).catch(() => {\n          throw new BaseError(\n            '`to` is required. Could not infer from `authorizationList`',\n          )\n        })\n\n      // Otherwise, we are sending a deployment transaction.\n      return undefined\n    })()\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    function estimateGas_rpc(parameters: {\n      block: any\n      request: any\n      rpcStateOverride: any\n    }) {\n      const { block, request, rpcStateOverride } = parameters\n      return client.request({\n        method: 'eth_estimateGas',\n        params: rpcStateOverride\n          ? [request, block ?? 'latest', rpcStateOverride]\n          : block\n            ? [request, block]\n            : [request],\n      })\n    }\n\n    let estimate = BigInt(\n      await estimateGas_rpc({ block, request, rpcStateOverride }),\n    )\n\n    // TODO(7702): Remove this once https://github.com/ethereum/execution-apis/issues/561 is resolved.\n    //       Authorization list schema is not implemented on JSON-RPC spec yet, so we need to\n    //       manually estimate the gas.\n    if (authorizationList) {\n      const value = await getBalance(client, { address: request.from })\n      const estimates = await Promise.all(\n        authorizationList.map(async (authorization) => {\n          const { contractAddress } = authorization\n          const estimate = await estimateGas_rpc({\n            block,\n            request: {\n              authorizationList: undefined,\n              data,\n              from: account?.address,\n              to: contractAddress,\n              value: numberToHex(value),\n            },\n            rpcStateOverride,\n          }).catch(() => 100_000n)\n          return 2n * BigInt(estimate)\n        }),\n      )\n      estimate += estimates.reduce((acc, curr) => acc + curr, 0n)\n    }\n\n    return estimate\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}