{"ast":null,"code":"import { getJsonImage, getMetadataAvatarUri, getNftTokenUri, parseAvatarUri, parseNftUri, resolveAvatarUri } from './utils.js';\n/*\n * @description Parses an ENS avatar record.\n *\n * @example\n * parseAvatarRecord('eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063')\n * 'https://ipfs.io/ipfs/QmSP4nq9fnN9dAiCj42ug9Wa79rqmQerZXZch82VqpiH7U/image.gif'\n *\n * @see https://docs.ens.domains/web/avatars\n *\n */\nexport async function parseAvatarRecord(client, {\n  gatewayUrls,\n  record\n}) {\n  if (/eip155:/i.test(record)) return parseNftAvatarUri(client, {\n    gatewayUrls,\n    record\n  });\n  return parseAvatarUri({\n    uri: record,\n    gatewayUrls\n  });\n}\nasync function parseNftAvatarUri(client, {\n  gatewayUrls,\n  record\n}) {\n  // parse NFT URI into properties\n  const nft = parseNftUri(record);\n  // fetch tokenURI from the NFT contract\n  const nftUri = await getNftTokenUri(client, {\n    nft\n  });\n  // resolve the URI from the fetched tokenURI\n  const {\n    uri: resolvedNftUri,\n    isOnChain,\n    isEncoded\n  } = resolveAvatarUri({\n    uri: nftUri,\n    gatewayUrls\n  });\n  // if the resolved URI is on chain, return the data\n  if (isOnChain && (resolvedNftUri.includes('data:application/json;base64,') || resolvedNftUri.startsWith('{'))) {\n    const encodedJson = isEncoded ?\n    // if it is encoded, decode it\n    atob(resolvedNftUri.replace('data:application/json;base64,', '')) :\n    // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n    resolvedNftUri;\n    const decoded = JSON.parse(encodedJson);\n    return parseAvatarUri({\n      uri: getJsonImage(decoded),\n      gatewayUrls\n    });\n  }\n  let uriTokenId = nft.tokenID;\n  if (nft.namespace === 'erc1155') uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0');\n  return getMetadataAvatarUri({\n    gatewayUrls,\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId)\n  });\n}\n//# sourceMappingURL=parseAvatarRecord.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}