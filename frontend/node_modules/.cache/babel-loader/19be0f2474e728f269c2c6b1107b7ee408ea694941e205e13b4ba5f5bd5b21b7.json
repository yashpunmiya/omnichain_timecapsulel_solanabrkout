{"ast":null,"code":"import { TransactionReceiptNotFoundError } from '../../errors/transaction.js';\nimport { formatTransactionReceipt } from '../../utils/formatters/transactionReceipt.js';\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt(client, {\n  hash\n}) {\n  const receipt = await client.request({\n    method: 'eth_getTransactionReceipt',\n    params: [hash]\n  }, {\n    dedupe: true\n  });\n  if (!receipt) throw new TransactionReceiptNotFoundError({\n    hash\n  });\n  const format = client.chain?.formatters?.transactionReceipt?.format || formatTransactionReceipt;\n  return format(receipt);\n}","map":{"version":3,"names":["TransactionReceiptNotFoundError","formatTransactionReceipt","getTransactionReceipt","client","hash","receipt","request","method","params","dedupe","format","chain","formatters","transactionReceipt"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\getTransactionReceipt.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  TransactionReceiptNotFoundError,\n  type TransactionReceiptNotFoundErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormattedTransactionReceipt,\n  formatTransactionReceipt,\n} from '../../utils/formatters/transactionReceipt.js'\n\nexport type GetTransactionReceiptParameters = {\n  /** The hash of the transaction. */\n  hash: Hash\n}\n\nexport type GetTransactionReceiptReturnType<\n  chain extends Chain | undefined = undefined,\n> = FormattedTransactionReceipt<chain>\n\nexport type GetTransactionReceiptErrorType =\n  | RequestErrorType\n  | TransactionReceiptNotFoundErrorType\n  | ErrorType\n\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { hash }: GetTransactionReceiptParameters,\n) {\n  const receipt = await client.request(\n    {\n      method: 'eth_getTransactionReceipt',\n      params: [hash],\n    },\n    { dedupe: true },\n  )\n\n  if (!receipt) throw new TransactionReceiptNotFoundError({ hash })\n\n  const format =\n    client.chain?.formatters?.transactionReceipt?.format ||\n    formatTransactionReceipt\n  return format(receipt) as GetTransactionReceiptReturnType<chain>\n}\n"],"mappings":"AAEA,SACEA,+BAA+B,QAE1B,6BAA6B;AAKpC,SAEEC,wBAAwB,QACnB,8CAA8C;AAgBrD;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,eAAeC,qBAAqBA,CACzCC,MAAgC,EAChC;EAAEC;AAAI,CAAmC;EAEzC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,OAAO,CAClC;IACEC,MAAM,EAAE,2BAA2B;IACnCC,MAAM,EAAE,CAACJ,IAAI;GACd,EACD;IAAEK,MAAM,EAAE;EAAI,CAAE,CACjB;EAED,IAAI,CAACJ,OAAO,EAAE,MAAM,IAAIL,+BAA+B,CAAC;IAAEI;EAAI,CAAE,CAAC;EAEjE,MAAMM,MAAM,GACVP,MAAM,CAACQ,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEH,MAAM,IACpDT,wBAAwB;EAC1B,OAAOS,MAAM,CAACL,OAAO,CAA2C;AAClE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}