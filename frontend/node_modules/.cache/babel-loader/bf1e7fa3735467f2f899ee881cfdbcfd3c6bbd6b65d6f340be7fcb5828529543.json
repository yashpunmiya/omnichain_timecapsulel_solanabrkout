{"ast":null,"code":"import { hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount(client, {\n  blockHash,\n  blockNumber,\n  blockTag = 'latest'\n} = {}) {\n  const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n  let count;\n  if (blockHash) {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash]\n    }, {\n      dedupe: true\n    });\n  } else {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumberHex || blockTag]\n    }, {\n      dedupe: Boolean(blockNumberHex)\n    });\n  }\n  return hexToNumber(count);\n}","map":{"version":3,"names":["hexToNumber","numberToHex","getBlockTransactionCount","client","blockHash","blockNumber","blockTag","blockNumberHex","undefined","count","request","method","params","dedupe","Boolean"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\public\\getBlockTransactionCount.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBlockTransactionCountParameters =\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash | undefined\n      blockNumber?: undefined\n      blockTag?: undefined\n    }\n  | {\n      blockHash?: undefined\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockHash?: undefined\n      blockNumber?: undefined\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag | undefined\n    }\n\nexport type GetBlockTransactionCountReturnType = number\n\nexport type GetBlockTransactionCountErrorType =\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag = 'latest',\n  }: GetBlockTransactionCountParameters = {},\n): Promise<GetBlockTransactionCountReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let count: Quantity\n  if (blockHash) {\n    count = await client.request(\n      {\n        method: 'eth_getBlockTransactionCountByHash',\n        params: [blockHash],\n      },\n      { dedupe: true },\n    )\n  } else {\n    count = await client.request(\n      {\n        method: 'eth_getBlockTransactionCountByNumber',\n        params: [blockNumberHex || blockTag],\n      },\n      { dedupe: Boolean(blockNumberHex) },\n    )\n  }\n\n  return hexToNumber(count)\n}\n"],"mappings":"AAQA,SAEEA,WAAW,QACN,iCAAiC;AACxC,SAEEC,WAAW,QACN,+BAA+B;AA8BtC;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,wBAAwBA,CAC5CC,MAAgC,EAChC;EACEC,SAAS;EACTC,WAAW;EACXC,QAAQ,GAAG;AAAQ,IACmB,EAAE;EAE1C,MAAMC,cAAc,GAClBF,WAAW,KAAKG,SAAS,GAAGP,WAAW,CAACI,WAAW,CAAC,GAAGG,SAAS;EAElE,IAAIC,KAAe;EACnB,IAAIL,SAAS,EAAE;IACbK,KAAK,GAAG,MAAMN,MAAM,CAACO,OAAO,CAC1B;MACEC,MAAM,EAAE,oCAAoC;MAC5CC,MAAM,EAAE,CAACR,SAAS;KACnB,EACD;MAAES,MAAM,EAAE;IAAI,CAAE,CACjB;EACH,CAAC,MAAM;IACLJ,KAAK,GAAG,MAAMN,MAAM,CAACO,OAAO,CAC1B;MACEC,MAAM,EAAE,sCAAsC;MAC9CC,MAAM,EAAE,CAACL,cAAc,IAAID,QAAQ;KACpC,EACD;MAAEO,MAAM,EAAEC,OAAO,CAACP,cAAc;IAAC,CAAE,CACpC;EACH;EAEA,OAAOP,WAAW,CAACS,KAAK,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}