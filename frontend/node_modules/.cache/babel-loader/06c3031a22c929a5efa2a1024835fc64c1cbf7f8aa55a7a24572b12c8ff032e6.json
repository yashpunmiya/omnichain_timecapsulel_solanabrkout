{"ast":null,"code":"import { blobsToCommitments } from './blobsToCommitments.js';\nimport { blobsToProofs } from './blobsToProofs.js';\nimport { toBlobs } from './toBlobs.js';\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars(parameters) {\n  const {\n    data,\n    kzg,\n    to\n  } = parameters;\n  const blobs = parameters.blobs ?? toBlobs({\n    data: data,\n    to\n  });\n  const commitments = parameters.commitments ?? blobsToCommitments({\n    blobs,\n    kzg: kzg,\n    to\n  });\n  const proofs = parameters.proofs ?? blobsToProofs({\n    blobs,\n    commitments,\n    kzg: kzg,\n    to\n  });\n  const sidecars = [];\n  for (let i = 0; i < blobs.length; i++) sidecars.push({\n    blob: blobs[i],\n    commitment: commitments[i],\n    proof: proofs[i]\n  });\n  return sidecars;\n}\n//# sourceMappingURL=toBlobSidecars.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}