{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMessage = exports.decode = void 0;\nconst utils_1 = require(\"./utils\");\nconst transform = (field, value) => {\n  if ((0, utils_1.isPrimitiveField)(field.type)) {\n    if (field.optional && typeof value === 'undefined') {\n      return null;\n    }\n    if (field.type === 'bytes') {\n      return Buffer.from(value).toString('hex');\n    }\n    if (field.long) {\n      if (Number.isSafeInteger(value.toNumber())) {\n        return value.toNumber();\n      }\n      return value.toString();\n    }\n    return value;\n  }\n  if ('valuesById' in field.resolvedType) {\n    return field.resolvedType.valuesById[value];\n  }\n  if (field.resolvedType.fields) {\n    return messageToJSON(value, field.resolvedType.fields);\n  }\n  throw new Error(`transport: decode: case not handled: ${field}`);\n};\nfunction messageToJSON(MessageParam, fields) {\n  if (!MessageParam) {\n    return {};\n  }\n  const {\n    ...message\n  } = MessageParam;\n  const res = {};\n  Object.keys(fields).forEach(key => {\n    const field = fields[key];\n    const value = message[key];\n    if (field.repeated) {\n      res[key] = value.map(v => transform(field, v));\n    } else {\n      res[key] = transform(field, value);\n    }\n  });\n  return res;\n}\nconst decode = (MessageParam, data) => {\n  const decoded = MessageParam.decode(new Uint8Array(data));\n  return messageToJSON(decoded, decoded.$type.fields);\n};\nexports.decode = decode;\nconst decodeMessage = (messages, messageType, data) => {\n  const {\n    Message,\n    messageName\n  } = (0, utils_1.createMessageFromType)(messages, messageType);\n  const message = (0, exports.decode)(Message, data);\n  return {\n    type: messageName,\n    message\n  };\n};\nexports.decodeMessage = decodeMessage;\n//# sourceMappingURL=decode.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}