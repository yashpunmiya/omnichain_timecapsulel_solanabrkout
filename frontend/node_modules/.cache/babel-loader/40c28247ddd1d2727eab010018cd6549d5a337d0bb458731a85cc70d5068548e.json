{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { ApiController, ChainController, ConnectorController, CoreHelperUtil, ModalController, OptionsController, RouterController, SIWXUtil, SnackController, ThemeController } from '@reown/appkit-controllers';\nimport { UiHelperUtil, customElement, initializeTheming } from '@reown/appkit-ui';\nimport '@reown/appkit-ui/wui-card';\nimport '@reown/appkit-ui/wui-flex';\nimport '../../partials/w3m-alertbar/index.js';\nimport '../../partials/w3m-header/index.js';\nimport '../../partials/w3m-snackbar/index.js';\nimport '../../partials/w3m-tooltip/index.js';\nimport '../w3m-router/index.js';\nimport styles from './styles.js';\nconst SCROLL_LOCK = 'scroll-lock';\nlet W3mModal = class W3mModal extends LitElement {\n  constructor() {\n    super();\n    this.unsubscribe = [];\n    this.abortController = undefined;\n    this.hasPrefetched = false;\n    this.enableEmbedded = OptionsController.state.enableEmbedded;\n    this.open = ModalController.state.open;\n    this.caipAddress = ChainController.state.activeCaipAddress;\n    this.caipNetwork = ChainController.state.activeCaipNetwork;\n    this.shake = ModalController.state.shake;\n    this.filterByNamespace = ConnectorController.state.filterByNamespace;\n    this.initializeTheming();\n    ApiController.prefetchAnalyticsConfig();\n    this.unsubscribe.push(...[ModalController.subscribeKey('open', val => val ? this.onOpen() : this.onClose()), ModalController.subscribeKey('shake', val => this.shake = val), ChainController.subscribeKey('activeCaipNetwork', val => this.onNewNetwork(val)), ChainController.subscribeKey('activeCaipAddress', val => this.onNewAddress(val)), OptionsController.subscribeKey('enableEmbedded', val => this.enableEmbedded = val), ConnectorController.subscribeKey('filterByNamespace', val => {\n      if (this.filterByNamespace !== val && !ChainController.getAccountData(val)?.caipAddress) {\n        ApiController.fetchRecommendedWallets();\n        this.filterByNamespace = val;\n      }\n    })]);\n  }\n  firstUpdated() {\n    if (this.caipAddress) {\n      if (this.enableEmbedded) {\n        ModalController.close();\n        this.prefetch();\n        return;\n      }\n      this.onNewAddress(this.caipAddress);\n    }\n    if (this.open) {\n      this.onOpen();\n    }\n    if (this.enableEmbedded) {\n      this.prefetch();\n    }\n  }\n  disconnectedCallback() {\n    this.unsubscribe.forEach(unsubscribe => unsubscribe());\n    this.onRemoveKeyboardListener();\n  }\n  render() {\n    this.style.cssText = `\n      --local-border-bottom-mobile-radius: ${this.enableEmbedded ? 'clamp(0px, var(--wui-border-radius-l), 44px)' : '0px'};\n    `;\n    if (this.enableEmbedded) {\n      return html`${this.contentTemplate()}\n        <w3m-tooltip></w3m-tooltip> `;\n    }\n    return this.open ? html`\n          <wui-flex @click=${this.onOverlayClick.bind(this)} data-testid=\"w3m-modal-overlay\">\n            ${this.contentTemplate()}\n          </wui-flex>\n          <w3m-tooltip></w3m-tooltip>\n        ` : null;\n  }\n  contentTemplate() {\n    return html` <wui-card\n      shake=\"${this.shake}\"\n      data-embedded=\"${ifDefined(this.enableEmbedded)}\"\n      role=\"alertdialog\"\n      aria-modal=\"true\"\n      tabindex=\"0\"\n      data-testid=\"w3m-modal-card\"\n    >\n      <w3m-header></w3m-header>\n      <w3m-router></w3m-router>\n      <w3m-snackbar></w3m-snackbar>\n      <w3m-alertbar></w3m-alertbar>\n    </wui-card>`;\n  }\n  async onOverlayClick(event) {\n    if (event.target === event.currentTarget) {\n      await this.handleClose();\n    }\n  }\n  async handleClose() {\n    const isUnsupportedChain = RouterController.state.view === 'UnsupportedChain';\n    if (isUnsupportedChain || (await SIWXUtil.isSIWXCloseDisabled())) {\n      ModalController.shake();\n    } else {\n      ModalController.close();\n    }\n  }\n  initializeTheming() {\n    const {\n      themeVariables,\n      themeMode\n    } = ThemeController.state;\n    const defaultThemeMode = UiHelperUtil.getColorTheme(themeMode);\n    initializeTheming(themeVariables, defaultThemeMode);\n  }\n  onClose() {\n    this.open = false;\n    this.classList.remove('open');\n    this.onScrollUnlock();\n    SnackController.hide();\n    this.onRemoveKeyboardListener();\n  }\n  onOpen() {\n    this.open = true;\n    this.classList.add('open');\n    this.onScrollLock();\n    this.onAddKeyboardListener();\n  }\n  onScrollLock() {\n    const styleTag = document.createElement('style');\n    styleTag.dataset['w3m'] = SCROLL_LOCK;\n    styleTag.textContent = `\n      body {\n        touch-action: none;\n        overflow: hidden;\n        overscroll-behavior: contain;\n      }\n      w3m-modal {\n        pointer-events: auto;\n      }\n    `;\n    document.head.appendChild(styleTag);\n  }\n  onScrollUnlock() {\n    const styleTag = document.head.querySelector(`style[data-w3m=\"${SCROLL_LOCK}\"]`);\n    if (styleTag) {\n      styleTag.remove();\n    }\n  }\n  onAddKeyboardListener() {\n    this.abortController = new AbortController();\n    const card = this.shadowRoot?.querySelector('wui-card');\n    card?.focus();\n    window.addEventListener('keydown', event => {\n      if (event.key === 'Escape') {\n        this.handleClose();\n      } else if (event.key === 'Tab') {\n        const {\n          tagName\n        } = event.target;\n        if (tagName && !tagName.includes('W3M-') && !tagName.includes('WUI-')) {\n          card?.focus();\n        }\n      }\n    }, this.abortController);\n  }\n  onRemoveKeyboardListener() {\n    this.abortController?.abort();\n    this.abortController = undefined;\n  }\n  async onNewAddress(caipAddress) {\n    const isSwitchingNamespace = ChainController.state.isSwitchingNamespace;\n    const nextConnected = CoreHelperUtil.getPlainAddress(caipAddress);\n    const isDisconnectedInSameNamespace = !nextConnected && !isSwitchingNamespace;\n    const isSwitchingNamespaceAndConnected = isSwitchingNamespace && nextConnected;\n    if (isDisconnectedInSameNamespace) {\n      ModalController.close();\n    } else if (isSwitchingNamespaceAndConnected) {\n      RouterController.goBack();\n    }\n    await SIWXUtil.initializeIfEnabled();\n    this.caipAddress = caipAddress;\n    ChainController.setIsSwitchingNamespace(false);\n  }\n  onNewNetwork(nextCaipNetwork) {\n    const prevCaipNetworkId = this.caipNetwork?.caipNetworkId?.toString();\n    const nextNetworkId = nextCaipNetwork?.caipNetworkId?.toString();\n    const networkChanged = prevCaipNetworkId && nextNetworkId && prevCaipNetworkId !== nextNetworkId;\n    const isSwitchingNamespace = ChainController.state.isSwitchingNamespace;\n    const isUnsupportedNetwork = this.caipNetwork?.name === CommonConstantsUtil.UNSUPPORTED_NETWORK_NAME;\n    const isConnectingExternal = RouterController.state.view === 'ConnectingExternal';\n    const isNotConnected = !this.caipAddress;\n    const isNetworkChangedInSameNamespace = networkChanged && !isUnsupportedNetwork && !isSwitchingNamespace;\n    const isUnsupportedNetworkScreen = RouterController.state.view === 'UnsupportedChain';\n    const isModalOpen = ModalController.state.open;\n    const shouldGoBack = isModalOpen && !isConnectingExternal && (isNotConnected || isUnsupportedNetworkScreen || isNetworkChangedInSameNamespace);\n    if (shouldGoBack) {\n      RouterController.goBack();\n    }\n    this.caipNetwork = nextCaipNetwork;\n  }\n  prefetch() {\n    if (!this.hasPrefetched) {\n      ApiController.prefetch();\n      ApiController.fetchWallets({\n        page: 1\n      });\n      this.hasPrefetched = true;\n    }\n  }\n};\nW3mModal.styles = styles;\n__decorate([property({\n  type: Boolean\n})], W3mModal.prototype, \"enableEmbedded\", void 0);\n__decorate([state()], W3mModal.prototype, \"open\", void 0);\n__decorate([state()], W3mModal.prototype, \"caipAddress\", void 0);\n__decorate([state()], W3mModal.prototype, \"caipNetwork\", void 0);\n__decorate([state()], W3mModal.prototype, \"shake\", void 0);\n__decorate([state()], W3mModal.prototype, \"filterByNamespace\", void 0);\nW3mModal = __decorate([customElement('w3m-modal')], W3mModal);\nexport { W3mModal };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}