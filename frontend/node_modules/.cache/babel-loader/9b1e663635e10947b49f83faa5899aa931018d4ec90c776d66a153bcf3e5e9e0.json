{"ast":null,"code":"import * as Hex from './Hex.js';\nimport * as Withdrawal from './Withdrawal.js';\n/**\n * Converts an {@link ox#BlockOverrides.Rpc} to an {@link ox#BlockOverrides.BlockOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { BlockOverrides } from 'ox'\n *\n * const blockOverrides = BlockOverrides.fromRpc({\n *   baseFeePerGas: '0x1',\n *   blobBaseFee: '0x2',\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\n *   gasLimit: '0x4',\n *   number: '0x5',\n *   prevRandao: '0x6',\n *   time: '0x1234567890',\n *   withdrawals: [\n *     {\n *       address: '0x0000000000000000000000000000000000000000',\n *       amount: '0x1',\n *       index: '0x0',\n *       validatorIndex: '0x1',\n *     },\n *   ],\n * })\n * ```\n *\n * @param rpcBlockOverrides - The RPC block overrides to convert.\n * @returns An instantiated {@link ox#BlockOverrides.BlockOverrides}.\n */\nexport function fromRpc(rpcBlockOverrides) {\n  return {\n    ...(rpcBlockOverrides.baseFeePerGas && {\n      baseFeePerGas: BigInt(rpcBlockOverrides.baseFeePerGas)\n    }),\n    ...(rpcBlockOverrides.blobBaseFee && {\n      blobBaseFee: BigInt(rpcBlockOverrides.blobBaseFee)\n    }),\n    ...(rpcBlockOverrides.feeRecipient && {\n      feeRecipient: rpcBlockOverrides.feeRecipient\n    }),\n    ...(rpcBlockOverrides.gasLimit && {\n      gasLimit: BigInt(rpcBlockOverrides.gasLimit)\n    }),\n    ...(rpcBlockOverrides.number && {\n      number: BigInt(rpcBlockOverrides.number)\n    }),\n    ...(rpcBlockOverrides.prevRandao && {\n      prevRandao: BigInt(rpcBlockOverrides.prevRandao)\n    }),\n    ...(rpcBlockOverrides.time && {\n      time: BigInt(rpcBlockOverrides.time)\n    }),\n    ...(rpcBlockOverrides.withdrawals && {\n      withdrawals: rpcBlockOverrides.withdrawals.map(Withdrawal.fromRpc)\n    })\n  };\n}\n/**\n * Converts an {@link ox#BlockOverrides.BlockOverrides} to an {@link ox#BlockOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { BlockOverrides } from 'ox'\n *\n * const blockOverrides = BlockOverrides.toRpc({\n *   baseFeePerGas: 1n,\n *   blobBaseFee: 2n,\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\n *   gasLimit: 4n,\n *   number: 5n,\n *   prevRandao: 6n,\n *   time: 78187493520n,\n *   withdrawals: [\n *     {\n *       address: '0x0000000000000000000000000000000000000000',\n *       amount: 1n,\n *       index: 0,\n *       validatorIndex: 1,\n *     },\n *   ],\n * })\n * ```\n *\n * @param blockOverrides - The block overrides to convert.\n * @returns An instantiated {@link ox#BlockOverrides.Rpc}.\n */\nexport function toRpc(blockOverrides) {\n  return {\n    ...(typeof blockOverrides.baseFeePerGas === 'bigint' && {\n      baseFeePerGas: Hex.fromNumber(blockOverrides.baseFeePerGas)\n    }),\n    ...(typeof blockOverrides.blobBaseFee === 'bigint' && {\n      blobBaseFee: Hex.fromNumber(blockOverrides.blobBaseFee)\n    }),\n    ...(typeof blockOverrides.feeRecipient === 'string' && {\n      feeRecipient: blockOverrides.feeRecipient\n    }),\n    ...(typeof blockOverrides.gasLimit === 'bigint' && {\n      gasLimit: Hex.fromNumber(blockOverrides.gasLimit)\n    }),\n    ...(typeof blockOverrides.number === 'bigint' && {\n      number: Hex.fromNumber(blockOverrides.number)\n    }),\n    ...(typeof blockOverrides.prevRandao === 'bigint' && {\n      prevRandao: Hex.fromNumber(blockOverrides.prevRandao)\n    }),\n    ...(typeof blockOverrides.time === 'bigint' && {\n      time: Hex.fromNumber(blockOverrides.time)\n    }),\n    ...(blockOverrides.withdrawals && {\n      withdrawals: blockOverrides.withdrawals.map(Withdrawal.toRpc)\n    })\n  };\n}","map":{"version":3,"names":["Hex","Withdrawal","fromRpc","rpcBlockOverrides","baseFeePerGas","BigInt","blobBaseFee","feeRecipient","gasLimit","number","prevRandao","time","withdrawals","map","toRpc","blockOverrides","fromNumber"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\ox\\core\\BlockOverrides.ts"],"sourcesContent":["import type * as Address from './Address.js'\nimport * as Hex from './Hex.js'\nimport * as Withdrawal from './Withdrawal.js'\n\n/**\n * Block overrides.\n */\nexport type BlockOverrides<bigintType = bigint, numberType = number> = {\n  /** Base fee per gas. */\n  baseFeePerGas?: bigintType | undefined\n  /** Blob base fee. */\n  blobBaseFee?: bigintType | undefined\n  /** Fee recipient (also known as coinbase). */\n  feeRecipient?: Address.Address | undefined\n  /** Gas limit. */\n  gasLimit?: bigintType | undefined\n  /** Block number. */\n  number?: bigintType | undefined\n  /** The previous value of randomness beacon. */\n  prevRandao?: bigintType | undefined\n  /** Block timestamp. */\n  time?: bigintType | undefined\n  /** Withdrawals made by validators. */\n  withdrawals?: Withdrawal.Withdrawal<bigintType, numberType>[] | undefined\n}\n\n/**\n * RPC block overrides.\n */\nexport type Rpc = BlockOverrides<Hex.Hex, Hex.Hex>\n\n/**\n * Converts an {@link ox#BlockOverrides.Rpc} to an {@link ox#BlockOverrides.BlockOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { BlockOverrides } from 'ox'\n *\n * const blockOverrides = BlockOverrides.fromRpc({\n *   baseFeePerGas: '0x1',\n *   blobBaseFee: '0x2',\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\n *   gasLimit: '0x4',\n *   number: '0x5',\n *   prevRandao: '0x6',\n *   time: '0x1234567890',\n *   withdrawals: [\n *     {\n *       address: '0x0000000000000000000000000000000000000000',\n *       amount: '0x1',\n *       index: '0x0',\n *       validatorIndex: '0x1',\n *     },\n *   ],\n * })\n * ```\n *\n * @param rpcBlockOverrides - The RPC block overrides to convert.\n * @returns An instantiated {@link ox#BlockOverrides.BlockOverrides}.\n */\nexport function fromRpc(rpcBlockOverrides: Rpc): BlockOverrides {\n  return {\n    ...(rpcBlockOverrides.baseFeePerGas && {\n      baseFeePerGas: BigInt(rpcBlockOverrides.baseFeePerGas),\n    }),\n    ...(rpcBlockOverrides.blobBaseFee && {\n      blobBaseFee: BigInt(rpcBlockOverrides.blobBaseFee),\n    }),\n    ...(rpcBlockOverrides.feeRecipient && {\n      feeRecipient: rpcBlockOverrides.feeRecipient,\n    }),\n    ...(rpcBlockOverrides.gasLimit && {\n      gasLimit: BigInt(rpcBlockOverrides.gasLimit),\n    }),\n    ...(rpcBlockOverrides.number && {\n      number: BigInt(rpcBlockOverrides.number),\n    }),\n    ...(rpcBlockOverrides.prevRandao && {\n      prevRandao: BigInt(rpcBlockOverrides.prevRandao),\n    }),\n    ...(rpcBlockOverrides.time && {\n      time: BigInt(rpcBlockOverrides.time),\n    }),\n    ...(rpcBlockOverrides.withdrawals && {\n      withdrawals: rpcBlockOverrides.withdrawals.map(Withdrawal.fromRpc),\n    }),\n  }\n}\n\n/**\n * Converts an {@link ox#BlockOverrides.BlockOverrides} to an {@link ox#BlockOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { BlockOverrides } from 'ox'\n *\n * const blockOverrides = BlockOverrides.toRpc({\n *   baseFeePerGas: 1n,\n *   blobBaseFee: 2n,\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\n *   gasLimit: 4n,\n *   number: 5n,\n *   prevRandao: 6n,\n *   time: 78187493520n,\n *   withdrawals: [\n *     {\n *       address: '0x0000000000000000000000000000000000000000',\n *       amount: 1n,\n *       index: 0,\n *       validatorIndex: 1,\n *     },\n *   ],\n * })\n * ```\n *\n * @param blockOverrides - The block overrides to convert.\n * @returns An instantiated {@link ox#BlockOverrides.Rpc}.\n */\nexport function toRpc(blockOverrides: BlockOverrides): Rpc {\n  return {\n    ...(typeof blockOverrides.baseFeePerGas === 'bigint' && {\n      baseFeePerGas: Hex.fromNumber(blockOverrides.baseFeePerGas),\n    }),\n    ...(typeof blockOverrides.blobBaseFee === 'bigint' && {\n      blobBaseFee: Hex.fromNumber(blockOverrides.blobBaseFee),\n    }),\n    ...(typeof blockOverrides.feeRecipient === 'string' && {\n      feeRecipient: blockOverrides.feeRecipient,\n    }),\n    ...(typeof blockOverrides.gasLimit === 'bigint' && {\n      gasLimit: Hex.fromNumber(blockOverrides.gasLimit),\n    }),\n    ...(typeof blockOverrides.number === 'bigint' && {\n      number: Hex.fromNumber(blockOverrides.number),\n    }),\n    ...(typeof blockOverrides.prevRandao === 'bigint' && {\n      prevRandao: Hex.fromNumber(blockOverrides.prevRandao),\n    }),\n    ...(typeof blockOverrides.time === 'bigint' && {\n      time: Hex.fromNumber(blockOverrides.time),\n    }),\n    ...(blockOverrides.withdrawals && {\n      withdrawals: blockOverrides.withdrawals.map(Withdrawal.toRpc),\n    }),\n  }\n}\n"],"mappings":"AACA,OAAO,KAAKA,GAAG,MAAM,UAAU;AAC/B,OAAO,KAAKC,UAAU,MAAM,iBAAiB;AA6B7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUC,OAAOA,CAACC,iBAAsB;EAC5C,OAAO;IACL,IAAIA,iBAAiB,CAACC,aAAa,IAAI;MACrCA,aAAa,EAAEC,MAAM,CAACF,iBAAiB,CAACC,aAAa;KACtD,CAAC;IACF,IAAID,iBAAiB,CAACG,WAAW,IAAI;MACnCA,WAAW,EAAED,MAAM,CAACF,iBAAiB,CAACG,WAAW;KAClD,CAAC;IACF,IAAIH,iBAAiB,CAACI,YAAY,IAAI;MACpCA,YAAY,EAAEJ,iBAAiB,CAACI;KACjC,CAAC;IACF,IAAIJ,iBAAiB,CAACK,QAAQ,IAAI;MAChCA,QAAQ,EAAEH,MAAM,CAACF,iBAAiB,CAACK,QAAQ;KAC5C,CAAC;IACF,IAAIL,iBAAiB,CAACM,MAAM,IAAI;MAC9BA,MAAM,EAAEJ,MAAM,CAACF,iBAAiB,CAACM,MAAM;KACxC,CAAC;IACF,IAAIN,iBAAiB,CAACO,UAAU,IAAI;MAClCA,UAAU,EAAEL,MAAM,CAACF,iBAAiB,CAACO,UAAU;KAChD,CAAC;IACF,IAAIP,iBAAiB,CAACQ,IAAI,IAAI;MAC5BA,IAAI,EAAEN,MAAM,CAACF,iBAAiB,CAACQ,IAAI;KACpC,CAAC;IACF,IAAIR,iBAAiB,CAACS,WAAW,IAAI;MACnCA,WAAW,EAAET,iBAAiB,CAACS,WAAW,CAACC,GAAG,CAACZ,UAAU,CAACC,OAAO;KAClE;GACF;AACH;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUY,KAAKA,CAACC,cAA8B;EAClD,OAAO;IACL,IAAI,OAAOA,cAAc,CAACX,aAAa,KAAK,QAAQ,IAAI;MACtDA,aAAa,EAAEJ,GAAG,CAACgB,UAAU,CAACD,cAAc,CAACX,aAAa;KAC3D,CAAC;IACF,IAAI,OAAOW,cAAc,CAACT,WAAW,KAAK,QAAQ,IAAI;MACpDA,WAAW,EAAEN,GAAG,CAACgB,UAAU,CAACD,cAAc,CAACT,WAAW;KACvD,CAAC;IACF,IAAI,OAAOS,cAAc,CAACR,YAAY,KAAK,QAAQ,IAAI;MACrDA,YAAY,EAAEQ,cAAc,CAACR;KAC9B,CAAC;IACF,IAAI,OAAOQ,cAAc,CAACP,QAAQ,KAAK,QAAQ,IAAI;MACjDA,QAAQ,EAAER,GAAG,CAACgB,UAAU,CAACD,cAAc,CAACP,QAAQ;KACjD,CAAC;IACF,IAAI,OAAOO,cAAc,CAACN,MAAM,KAAK,QAAQ,IAAI;MAC/CA,MAAM,EAAET,GAAG,CAACgB,UAAU,CAACD,cAAc,CAACN,MAAM;KAC7C,CAAC;IACF,IAAI,OAAOM,cAAc,CAACL,UAAU,KAAK,QAAQ,IAAI;MACnDA,UAAU,EAAEV,GAAG,CAACgB,UAAU,CAACD,cAAc,CAACL,UAAU;KACrD,CAAC;IACF,IAAI,OAAOK,cAAc,CAACJ,IAAI,KAAK,QAAQ,IAAI;MAC7CA,IAAI,EAAEX,GAAG,CAACgB,UAAU,CAACD,cAAc,CAACJ,IAAI;KACzC,CAAC;IACF,IAAII,cAAc,CAACH,WAAW,IAAI;MAChCA,WAAW,EAAEG,cAAc,CAACH,WAAW,CAACC,GAAG,CAACZ,UAAU,CAACa,KAAK;KAC7D;GACF;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}