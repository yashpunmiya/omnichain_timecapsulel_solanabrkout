{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Sets the next block's base fee per gas.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas\n *\n * @param client - Client to use\n * @param parameters – {@link SetNextBlockBaseFeePerGasParameters}\n *\n * @example\n * import { createTestClient, http, parseGwei } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNextBlockBaseFeePerGas } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNextBlockBaseFeePerGas(client, {\n *   baseFeePerGas: parseGwei('20'),\n * })\n */\nexport async function setNextBlockBaseFeePerGas(client, {\n  baseFeePerGas\n}) {\n  await client.request({\n    method: `${client.mode}_setNextBlockBaseFeePerGas`,\n    params: [numberToHex(baseFeePerGas)]\n  });\n}","map":{"version":3,"names":["numberToHex","setNextBlockBaseFeePerGas","client","baseFeePerGas","request","method","mode","params"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\actions\\test\\setNextBlockBaseFeePerGas.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetNextBlockBaseFeePerGasParameters = {\n  /** Base fee per gas (in wei). */\n  baseFeePerGas: bigint\n}\n\nexport type SetNextBlockBaseFeePerGasErrorType = RequestErrorType | ErrorType\n\n/**\n * Sets the next block's base fee per gas.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas\n *\n * @param client - Client to use\n * @param parameters – {@link SetNextBlockBaseFeePerGasParameters}\n *\n * @example\n * import { createTestClient, http, parseGwei } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNextBlockBaseFeePerGas } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNextBlockBaseFeePerGas(client, {\n *   baseFeePerGas: parseGwei('20'),\n * })\n */\nexport async function setNextBlockBaseFeePerGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, chain, account, false>,\n  { baseFeePerGas }: SetNextBlockBaseFeePerGasParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setNextBlockBaseFeePerGas`,\n    params: [numberToHex(baseFeePerGas)],\n  })\n}\n"],"mappings":"AASA,SAASA,WAAW,QAAQ,+BAA+B;AAS3D;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeC,yBAAyBA,CAI7CC,MAAoE,EACpE;EAAEC;AAAa,CAAuC;EAEtD,MAAMD,MAAM,CAACE,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGH,MAAM,CAACI,IAAI,4BAA4B;IAClDC,MAAM,EAAE,CAACP,WAAW,CAACG,aAAa,CAAC;GACpC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}