{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxRequestDetailsType = exports.RequestType = exports.EnumEnum_RequestType = exports.Enum_RequestType = exports.SignTx = exports.CoinJoinRequest = exports.VerifyMessage = exports.MessageSignature = exports.SignMessage = exports.OwnershipId = exports.GetOwnershipId = exports.Address = exports.GetAddress = exports.PublicKey = exports.GetPublicKey = exports.MultisigRedeemScriptType = exports.HDNodePathType = exports.HDNodeType = exports.EnumMultisigPubkeysOrder = exports.MultisigPubkeysOrder = exports.EnumAmountUnit = exports.AmountUnit = exports.EnumDecredStakingSpendType = exports.DecredStakingSpendType = exports.OutputScriptType = exports.EnumEnum_OutputScriptType = exports.Enum_OutputScriptType = exports.InputScriptType = exports.EnumEnum_InputScriptType = exports.Enum_InputScriptType = exports.BinanceSignedTx = exports.BinanceCancelMsg = exports.BinanceOrderMsg = exports.EnumBinanceTimeInForce = exports.BinanceTimeInForce = exports.EnumBinanceOrderSide = exports.BinanceOrderSide = exports.EnumBinanceOrderType = exports.BinanceOrderType = exports.BinanceTransferMsg = exports.BinanceInputOutput = exports.BinanceCoin = exports.BinanceTxRequest = exports.BinanceSignTx = exports.BinancePublicKey = exports.BinanceGetPublicKey = exports.BinanceAddress = exports.BinanceGetAddress = exports.EnumDeviceModelInternal = exports.DeviceModelInternal = void 0;\nexports.CardanoDRepType = exports.EnumCardanoCertificateType = exports.CardanoCertificateType = exports.EnumCardanoTxOutputSerializationFormat = exports.CardanoTxOutputSerializationFormat = exports.EnumCardanoNativeScriptHashDisplayFormat = exports.CardanoNativeScriptHashDisplayFormat = exports.EnumCardanoNativeScriptType = exports.CardanoNativeScriptType = exports.EnumCardanoAddressType = exports.CardanoAddressType = exports.EnumCardanoDerivationType = exports.CardanoDerivationType = exports.ProdTestT1 = exports.FirmwareUpload = exports.FirmwareRequest = exports.FirmwareErase = exports.AuthorizeCoinJoin = exports.OwnershipProof = exports.GetOwnershipProof = exports.TxAckPrevExtraData = exports.TxAckPrevExtraDataWrapper = exports.TxAckPrevOutput = exports.TxAckPrevOutputWrapper = exports.TxAckPrevInput = exports.TxAckPrevInputWrapper = exports.TxAckPrevMeta = exports.TxAckOutput = exports.TxAckOutputWrapper = exports.TxAckInput = exports.TxAckInputWrapper = exports.TxAck = exports.TxAckResponse = exports.TxAckPaymentRequest = exports.PaymentRequestMemo = exports.CoinPurchaseMemo = exports.RefundMemo = exports.TextMemo = exports.PrevOutput = exports.PrevInput = exports.PrevTx = exports.TxOutput = exports.TxOutputType = exports.ChangeOutputScriptType = exports.TxOutputBinType = exports.TxInput = exports.TxInputType = exports.InternalInputScriptType = exports.TxRequest = exports.TxRequestSerializedType = void 0;\nexports.FailureType = exports.Success = exports.CardanoSignTxFinished = exports.CardanoTxBodyHash = exports.CardanoTxHostAck = exports.CardanoTxWitnessResponse = exports.CardanoTxWitnessRequest = exports.CardanoTxAuxiliaryDataSupplement = exports.CardanoTxItemAck = exports.CardanoTxReferenceInput = exports.CardanoTxRequiredSigner = exports.CardanoTxCollateralInput = exports.CardanoTxMint = exports.CardanoTxAuxiliaryData = exports.CardanoCVoteRegistrationParametersType = exports.CardanoCVoteRegistrationDelegation = exports.CardanoTxWithdrawal = exports.CardanoTxCertificate = exports.CardanoDRep = exports.CardanoPoolParametersType = exports.CardanoPoolMetadataType = exports.CardanoPoolRelayParameters = exports.CardanoPoolOwner = exports.CardanoTxReferenceScriptChunk = exports.CardanoTxInlineDatumChunk = exports.CardanoToken = exports.CardanoAssetGroup = exports.CardanoTxOutput = exports.CardanoTxInput = exports.CardanoSignTxInit = exports.CardanoPublicKey = exports.CardanoGetPublicKey = exports.CardanoAddress = exports.CardanoGetAddress = exports.CardanoAddressParametersType = exports.CardanoNativeScriptHash = exports.CardanoGetNativeScriptHash = exports.CardanoNativeScript = exports.CardanoBlockchainPointerType = exports.EnumCardanoTxWitnessType = exports.CardanoTxWitnessType = exports.EnumCardanoTxSigningMode = exports.CardanoTxSigningMode = exports.EnumCardanoCVoteRegistrationFormat = exports.CardanoCVoteRegistrationFormat = exports.EnumCardanoTxAuxiliaryDataSupplementType = exports.CardanoTxAuxiliaryDataSupplementType = exports.EnumCardanoPoolRelayType = exports.CardanoPoolRelayType = exports.EnumCardanoDRepType = void 0;\nexports.EosActionSellRam = exports.EosActionBuyRamBytes = exports.EosActionBuyRam = exports.EosActionRefund = exports.EosActionUndelegate = exports.EosActionDelegate = exports.EosActionTransfer = exports.EosActionCommon = exports.EosAuthorization = exports.EosAuthorizationWait = exports.EosAuthorizationAccount = exports.EosAuthorizationKey = exports.EosPermissionLevel = exports.EosAsset = exports.EosTxActionRequest = exports.EosSignTx = exports.EosTxHeader = exports.EosPublicKey = exports.EosGetPublicKey = exports.DebugLinkOptigaSetSecMax = exports.DebugLinkResetDebugEvents = exports.EnumDebugWaitType = exports.DebugWaitType = exports.EnumDebugPhysicalButton = exports.DebugPhysicalButton = exports.EnumDebugButton = exports.DebugButton = exports.ECDHSessionKey = exports.GetECDHSessionKey = exports.SignedIdentity = exports.SignIdentity = exports.IdentityType = exports.CipheredKeyValue = exports.CipherKeyValue = exports.Deprecated_PassphraseStateAck = exports.Deprecated_PassphraseStateRequest = exports.PassphraseAck = exports.PassphraseRequest = exports.PinMatrixAck = exports.PinMatrixRequest = exports.PinMatrixRequestType = exports.EnumEnum_PinMatrixRequestType = exports.Enum_PinMatrixRequestType = exports.ButtonAck = exports.ButtonRequest = exports.ButtonRequestType = exports.EnumEnum_ButtonRequestType = exports.Enum_ButtonRequestType = exports.Failure = exports.EnumFailureType = void 0;\nexports.Initialize = exports.HomescreenFormat = exports.EnumEnum_HomescreenFormat = exports.Enum_HomescreenFormat = exports.DisplayRotation = exports.EnumEnum_DisplayRotation = exports.Enum_DisplayRotation = exports.SafetyCheckLevel = exports.EnumEnum_SafetyCheckLevel = exports.Enum_SafetyCheckLevel = exports.BackupType = exports.EnumEnum_BackupType = exports.Enum_BackupType = exports.EthereumTypedDataSignature = exports.EthereumSignTypedHash = exports.EthereumVerifyMessage = exports.EthereumMessageSignature = exports.EthereumSignMessage = exports.EthereumTxAck = exports.EthereumTxRequest = exports.EthereumSignTxEIP1559 = exports.EthereumAccessList = exports.EthereumSignTx = exports.EthereumAddress = exports.EthereumGetAddress = exports.EthereumPublicKey = exports.EthereumGetPublicKey = exports.EthereumTypedDataValueAck = exports.EthereumTypedDataValueRequest = exports.EthereumTypedDataStructAck = exports.EthereumStructMember = exports.EthereumFieldType = exports.EnumEthereumDataType = exports.EthereumDataType = exports.EthereumTypedDataStructRequest = exports.EthereumSignTypedData = exports.EthereumDefinitions = exports.EthereumTokenInfo = exports.EthereumNetworkInfo = exports.EnumEthereumDefinitionType = exports.EthereumDefinitionType = exports.EosSignedTx = exports.EosTxActionAck = exports.EosActionUnknown = exports.EosActionNewAccount = exports.EosActionUnlinkAuth = exports.EosActionLinkAuth = exports.EosActionDeleteAuth = exports.EosActionUpdateAuth = exports.EosActionVoteProducer = void 0;\nexports.WordRequestType = exports.EnumEnum_WordRequestType = exports.Enum_WordRequestType = exports.EntropyCheckContinue = exports.EntropyCheckReady = exports.EntropyAck = exports.EntropyRequest = exports.BackupDevice = exports.Slip39Group = exports.ResetDevice = exports.LoadDevice = exports.WipeDevice = exports.AuthenticityProof = exports.AuthenticateDevice = exports.FirmwareHash = exports.GetFirmwareHash = exports.Entropy = exports.GetEntropy = exports.Cancel = exports.Ping = exports.SdProtect = exports.EnumSdProtectOperationType = exports.SdProtectOperationType = exports.ChangeWipeCode = exports.ChangePin = exports.ApplyFlags = exports.TranslationDataAck = exports.TranslationDataRequest = exports.ChangeLanguage = exports.ApplySettings = exports.EndSession = exports.SetBusy = exports.LockDevice = exports.Features = exports.RecoveryDevice = exports.RecoveryType = exports.EnumEnum_RecoveryType = exports.Enum_RecoveryType = exports.EnumRecoveryDeviceInputMethod = exports.RecoveryDeviceInputMethod = exports.Capability = exports.EnumEnum_Capability = exports.Enum_Capability = exports.RecoveryStatus = exports.EnumEnum_RecoveryStatus = exports.Enum_RecoveryStatus = exports.BackupAvailability = exports.EnumEnum_BackupAvailability = exports.Enum_BackupAvailability = exports.GetFeatures = void 0;\nexports.SolanaGetAddress = exports.SolanaPublicKey = exports.SolanaGetPublicKey = exports.RippleSignedTx = exports.RippleSignTx = exports.RipplePayment = exports.RippleAddress = exports.RippleGetAddress = exports.NEMDecryptedMessage = exports.NEMDecryptMessage = exports.NEMSignedTx = exports.NEMSignTx = exports.NEMImportanceTransfer = exports.EnumNEMImportanceTransferMode = exports.NEMImportanceTransferMode = exports.NEMAggregateModification = exports.NEMCosignatoryModification = exports.EnumNEMModificationType = exports.NEMModificationType = exports.NEMMosaicSupplyChange = exports.EnumNEMSupplyChangeType = exports.NEMSupplyChangeType = exports.NEMMosaicCreation = exports.NEMMosaicDefinition = exports.EnumNEMMosaicLevy = exports.NEMMosaicLevy = exports.NEMProvisionNamespace = exports.NEMTransfer = exports.NEMMosaic = exports.NEMTransactionCommon = exports.NEMAddress = exports.NEMGetAddress = exports.SetBrightness = exports.UnlockBootloader = exports.ShowDeviceTutorial = exports.UnlockedPathRequest = exports.UnlockPath = exports.Nonce = exports.GetNonce = exports.RebootToBootloader = exports.EnumBootCommand = exports.BootCommand = exports.CancelAuthorization = exports.PreauthorizedRequest = exports.DoPreauthorized = exports.NextU2FCounter = exports.GetNextU2FCounter = exports.SetU2FCounter = exports.WordAck = exports.WordRequest = void 0;\nexports.TezosSignedTx = exports.TezosSignTx = exports.TezosBallotOp = exports.EnumTezosBallotType = exports.TezosBallotType = exports.TezosProposalOp = exports.TezosDelegationOp = exports.TezosOriginationOp = exports.TezosTransactionOp = exports.TezosParametersManager = exports.TezosManagerTransfer = exports.TezosRevealOp = exports.TezosContractID = exports.EnumTezosContractType = exports.TezosContractType = exports.TezosPublicKey = exports.TezosGetPublicKey = exports.TezosAddress = exports.TezosGetAddress = exports.StellarSignedTx = exports.StellarClaimClaimableBalanceOp = exports.StellarBumpSequenceOp = exports.StellarManageDataOp = exports.StellarAccountMergeOp = exports.StellarAllowTrustOp = exports.StellarChangeTrustOp = exports.StellarSetOptionsOp = exports.EnumStellarSignerType = exports.StellarSignerType = exports.StellarCreatePassiveSellOfferOp = exports.StellarManageBuyOfferOp = exports.StellarManageSellOfferOp = exports.StellarPathPaymentStrictSendOp = exports.StellarPathPaymentStrictReceiveOp = exports.StellarCreateAccountOp = exports.StellarPaymentOp = exports.StellarTxOpRequest = exports.StellarSignTx = exports.EnumStellarMemoType = exports.StellarMemoType = exports.StellarAddress = exports.StellarGetAddress = exports.StellarAsset = exports.EnumStellarAssetType = exports.StellarAssetType = exports.SolanaTxSignature = exports.SolanaSignTx = exports.SolanaTxAdditionalInfo = exports.SolanaTxTokenAccountInfo = exports.SolanaAddress = void 0;\nexports.MessageType = void 0;\nconst schema_utils_1 = require(\"@trezor/schema-utils\");\nvar DeviceModelInternal;\n(function (DeviceModelInternal) {\n  DeviceModelInternal[\"T1B1\"] = \"T1B1\";\n  DeviceModelInternal[\"T2T1\"] = \"T2T1\";\n  DeviceModelInternal[\"T2B1\"] = \"T2B1\";\n  DeviceModelInternal[\"T3B1\"] = \"T3B1\";\n  DeviceModelInternal[\"T3T1\"] = \"T3T1\";\n  DeviceModelInternal[\"T3W1\"] = \"T3W1\";\n  DeviceModelInternal[\"UNKNOWN\"] = \"UNKNOWN\";\n})(DeviceModelInternal || (exports.DeviceModelInternal = DeviceModelInternal = {}));\nexports.EnumDeviceModelInternal = schema_utils_1.Type.Enum(DeviceModelInternal);\nexports.BinanceGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'BinanceGetAddress'\n});\nexports.BinanceAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'BinanceAddress'\n});\nexports.BinanceGetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'BinanceGetPublicKey'\n});\nexports.BinancePublicKey = schema_utils_1.Type.Object({\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'BinancePublicKey'\n});\nexports.BinanceSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  msg_count: schema_utils_1.Type.Number(),\n  account_number: schema_utils_1.Type.Number(),\n  chain_id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  memo: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  sequence: schema_utils_1.Type.Number(),\n  source: schema_utils_1.Type.Number(),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'BinanceSignTx'\n});\nexports.BinanceTxRequest = schema_utils_1.Type.Object({}, {\n  $id: 'BinanceTxRequest'\n});\nexports.BinanceCoin = schema_utils_1.Type.Object({\n  amount: schema_utils_1.Type.Uint(),\n  denom: schema_utils_1.Type.String()\n}, {\n  $id: 'BinanceCoin'\n});\nexports.BinanceInputOutput = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  coins: schema_utils_1.Type.Array(exports.BinanceCoin)\n}, {\n  $id: 'BinanceInputOutput'\n});\nexports.BinanceTransferMsg = schema_utils_1.Type.Object({\n  inputs: schema_utils_1.Type.Array(exports.BinanceInputOutput),\n  outputs: schema_utils_1.Type.Array(exports.BinanceInputOutput),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'BinanceTransferMsg'\n});\nvar BinanceOrderType;\n(function (BinanceOrderType) {\n  BinanceOrderType[BinanceOrderType[\"OT_UNKNOWN\"] = 0] = \"OT_UNKNOWN\";\n  BinanceOrderType[BinanceOrderType[\"MARKET\"] = 1] = \"MARKET\";\n  BinanceOrderType[BinanceOrderType[\"LIMIT\"] = 2] = \"LIMIT\";\n  BinanceOrderType[BinanceOrderType[\"OT_RESERVED\"] = 3] = \"OT_RESERVED\";\n})(BinanceOrderType || (exports.BinanceOrderType = BinanceOrderType = {}));\nexports.EnumBinanceOrderType = schema_utils_1.Type.Enum(BinanceOrderType);\nvar BinanceOrderSide;\n(function (BinanceOrderSide) {\n  BinanceOrderSide[BinanceOrderSide[\"SIDE_UNKNOWN\"] = 0] = \"SIDE_UNKNOWN\";\n  BinanceOrderSide[BinanceOrderSide[\"BUY\"] = 1] = \"BUY\";\n  BinanceOrderSide[BinanceOrderSide[\"SELL\"] = 2] = \"SELL\";\n})(BinanceOrderSide || (exports.BinanceOrderSide = BinanceOrderSide = {}));\nexports.EnumBinanceOrderSide = schema_utils_1.Type.Enum(BinanceOrderSide);\nvar BinanceTimeInForce;\n(function (BinanceTimeInForce) {\n  BinanceTimeInForce[BinanceTimeInForce[\"TIF_UNKNOWN\"] = 0] = \"TIF_UNKNOWN\";\n  BinanceTimeInForce[BinanceTimeInForce[\"GTE\"] = 1] = \"GTE\";\n  BinanceTimeInForce[BinanceTimeInForce[\"TIF_RESERVED\"] = 2] = \"TIF_RESERVED\";\n  BinanceTimeInForce[BinanceTimeInForce[\"IOC\"] = 3] = \"IOC\";\n})(BinanceTimeInForce || (exports.BinanceTimeInForce = BinanceTimeInForce = {}));\nexports.EnumBinanceTimeInForce = schema_utils_1.Type.Enum(BinanceTimeInForce);\nexports.BinanceOrderMsg = schema_utils_1.Type.Object({\n  id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  ordertype: exports.EnumBinanceOrderType,\n  price: schema_utils_1.Type.Number(),\n  quantity: schema_utils_1.Type.Number(),\n  sender: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  side: exports.EnumBinanceOrderSide,\n  symbol: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  timeinforce: exports.EnumBinanceTimeInForce\n}, {\n  $id: 'BinanceOrderMsg'\n});\nexports.BinanceCancelMsg = schema_utils_1.Type.Object({\n  refid: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  sender: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  symbol: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'BinanceCancelMsg'\n});\nexports.BinanceSignedTx = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'BinanceSignedTx'\n});\nvar Enum_InputScriptType;\n(function (Enum_InputScriptType) {\n  Enum_InputScriptType[Enum_InputScriptType[\"SPENDADDRESS\"] = 0] = \"SPENDADDRESS\";\n  Enum_InputScriptType[Enum_InputScriptType[\"SPENDMULTISIG\"] = 1] = \"SPENDMULTISIG\";\n  Enum_InputScriptType[Enum_InputScriptType[\"EXTERNAL\"] = 2] = \"EXTERNAL\";\n  Enum_InputScriptType[Enum_InputScriptType[\"SPENDWITNESS\"] = 3] = \"SPENDWITNESS\";\n  Enum_InputScriptType[Enum_InputScriptType[\"SPENDP2SHWITNESS\"] = 4] = \"SPENDP2SHWITNESS\";\n  Enum_InputScriptType[Enum_InputScriptType[\"SPENDTAPROOT\"] = 5] = \"SPENDTAPROOT\";\n})(Enum_InputScriptType || (exports.Enum_InputScriptType = Enum_InputScriptType = {}));\nexports.EnumEnum_InputScriptType = schema_utils_1.Type.Enum(Enum_InputScriptType);\nexports.InputScriptType = schema_utils_1.Type.KeyOfEnum(Enum_InputScriptType, {\n  $id: 'InputScriptType'\n});\nvar Enum_OutputScriptType;\n(function (Enum_OutputScriptType) {\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOADDRESS\"] = 0] = \"PAYTOADDRESS\";\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOSCRIPTHASH\"] = 1] = \"PAYTOSCRIPTHASH\";\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOMULTISIG\"] = 2] = \"PAYTOMULTISIG\";\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOOPRETURN\"] = 3] = \"PAYTOOPRETURN\";\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOWITNESS\"] = 4] = \"PAYTOWITNESS\";\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOP2SHWITNESS\"] = 5] = \"PAYTOP2SHWITNESS\";\n  Enum_OutputScriptType[Enum_OutputScriptType[\"PAYTOTAPROOT\"] = 6] = \"PAYTOTAPROOT\";\n})(Enum_OutputScriptType || (exports.Enum_OutputScriptType = Enum_OutputScriptType = {}));\nexports.EnumEnum_OutputScriptType = schema_utils_1.Type.Enum(Enum_OutputScriptType);\nexports.OutputScriptType = schema_utils_1.Type.KeyOfEnum(Enum_OutputScriptType, {\n  $id: 'OutputScriptType'\n});\nvar DecredStakingSpendType;\n(function (DecredStakingSpendType) {\n  DecredStakingSpendType[DecredStakingSpendType[\"SSGen\"] = 0] = \"SSGen\";\n  DecredStakingSpendType[DecredStakingSpendType[\"SSRTX\"] = 1] = \"SSRTX\";\n})(DecredStakingSpendType || (exports.DecredStakingSpendType = DecredStakingSpendType = {}));\nexports.EnumDecredStakingSpendType = schema_utils_1.Type.Enum(DecredStakingSpendType);\nvar AmountUnit;\n(function (AmountUnit) {\n  AmountUnit[AmountUnit[\"BITCOIN\"] = 0] = \"BITCOIN\";\n  AmountUnit[AmountUnit[\"MILLIBITCOIN\"] = 1] = \"MILLIBITCOIN\";\n  AmountUnit[AmountUnit[\"MICROBITCOIN\"] = 2] = \"MICROBITCOIN\";\n  AmountUnit[AmountUnit[\"SATOSHI\"] = 3] = \"SATOSHI\";\n})(AmountUnit || (exports.AmountUnit = AmountUnit = {}));\nexports.EnumAmountUnit = schema_utils_1.Type.Enum(AmountUnit);\nvar MultisigPubkeysOrder;\n(function (MultisigPubkeysOrder) {\n  MultisigPubkeysOrder[MultisigPubkeysOrder[\"PRESERVED\"] = 0] = \"PRESERVED\";\n  MultisigPubkeysOrder[MultisigPubkeysOrder[\"LEXICOGRAPHIC\"] = 1] = \"LEXICOGRAPHIC\";\n})(MultisigPubkeysOrder || (exports.MultisigPubkeysOrder = MultisigPubkeysOrder = {}));\nexports.EnumMultisigPubkeysOrder = schema_utils_1.Type.Enum(MultisigPubkeysOrder);\nexports.HDNodeType = schema_utils_1.Type.Object({\n  depth: schema_utils_1.Type.Number(),\n  fingerprint: schema_utils_1.Type.Number(),\n  child_num: schema_utils_1.Type.Number(),\n  chain_code: schema_utils_1.Type.String(),\n  private_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'HDNodeType'\n});\nexports.HDNodePathType = schema_utils_1.Type.Object({\n  node: schema_utils_1.Type.Union([exports.HDNodeType, schema_utils_1.Type.String()]),\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number())\n}, {\n  $id: 'HDNodePathType'\n});\nexports.MultisigRedeemScriptType = schema_utils_1.Type.Object({\n  pubkeys: schema_utils_1.Type.Array(exports.HDNodePathType),\n  signatures: schema_utils_1.Type.Array(schema_utils_1.Type.String()),\n  m: schema_utils_1.Type.Number(),\n  nodes: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.HDNodeType)),\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  pubkeys_order: schema_utils_1.Type.Optional(exports.EnumMultisigPubkeysOrder)\n}, {\n  $id: 'MultisigRedeemScriptType'\n});\nexports.GetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  ecdsa_curve_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  script_type: schema_utils_1.Type.Optional(exports.InputScriptType),\n  ignore_xpub_magic: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'GetPublicKey'\n});\nexports.PublicKey = schema_utils_1.Type.Object({\n  node: exports.HDNodeType,\n  xpub: schema_utils_1.Type.String(),\n  root_fingerprint: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  descriptor: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'PublicKey'\n});\nexports.GetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  script_type: schema_utils_1.Type.Optional(exports.InputScriptType),\n  ignore_xpub_magic: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'GetAddress'\n});\nexports.Address = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  mac: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'Address'\n});\nexports.GetOwnershipId = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  script_type: schema_utils_1.Type.Optional(exports.InputScriptType)\n}, {\n  $id: 'GetOwnershipId'\n});\nexports.OwnershipId = schema_utils_1.Type.Object({\n  ownership_id: schema_utils_1.Type.String()\n}, {\n  $id: 'OwnershipId'\n});\nexports.SignMessage = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  message: schema_utils_1.Type.String(),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  script_type: schema_utils_1.Type.Optional(exports.InputScriptType),\n  no_script_type: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'SignMessage'\n});\nexports.MessageSignature = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'MessageSignature'\n});\nexports.VerifyMessage = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String(),\n  message: schema_utils_1.Type.String(),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'VerifyMessage'\n});\nexports.CoinJoinRequest = schema_utils_1.Type.Object({\n  fee_rate: schema_utils_1.Type.Number(),\n  no_fee_threshold: schema_utils_1.Type.Number(),\n  min_registrable_amount: schema_utils_1.Type.Number(),\n  mask_public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  signature: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CoinJoinRequest'\n});\nexports.SignTx = schema_utils_1.Type.Object({\n  outputs_count: schema_utils_1.Type.Number(),\n  inputs_count: schema_utils_1.Type.Number(),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  lock_time: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  expiry: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  overwintered: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  version_group_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  timestamp: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  branch_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  amount_unit: schema_utils_1.Type.Optional(exports.EnumAmountUnit),\n  decred_staking_ticket: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  serialize: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  coinjoin_request: schema_utils_1.Type.Optional(exports.CoinJoinRequest),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'SignTx'\n});\nvar Enum_RequestType;\n(function (Enum_RequestType) {\n  Enum_RequestType[Enum_RequestType[\"TXINPUT\"] = 0] = \"TXINPUT\";\n  Enum_RequestType[Enum_RequestType[\"TXOUTPUT\"] = 1] = \"TXOUTPUT\";\n  Enum_RequestType[Enum_RequestType[\"TXMETA\"] = 2] = \"TXMETA\";\n  Enum_RequestType[Enum_RequestType[\"TXFINISHED\"] = 3] = \"TXFINISHED\";\n  Enum_RequestType[Enum_RequestType[\"TXEXTRADATA\"] = 4] = \"TXEXTRADATA\";\n  Enum_RequestType[Enum_RequestType[\"TXORIGINPUT\"] = 5] = \"TXORIGINPUT\";\n  Enum_RequestType[Enum_RequestType[\"TXORIGOUTPUT\"] = 6] = \"TXORIGOUTPUT\";\n  Enum_RequestType[Enum_RequestType[\"TXPAYMENTREQ\"] = 7] = \"TXPAYMENTREQ\";\n})(Enum_RequestType || (exports.Enum_RequestType = Enum_RequestType = {}));\nexports.EnumEnum_RequestType = schema_utils_1.Type.Enum(Enum_RequestType);\nexports.RequestType = schema_utils_1.Type.KeyOfEnum(Enum_RequestType, {\n  $id: 'RequestType'\n});\nexports.TxRequestDetailsType = schema_utils_1.Type.Object({\n  request_index: schema_utils_1.Type.Number(),\n  tx_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  extra_data_len: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  extra_data_offset: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'TxRequestDetailsType'\n});\nexports.TxRequestSerializedType = schema_utils_1.Type.Object({\n  signature_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  signature: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  serialized_tx: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'TxRequestSerializedType'\n});\nexports.TxRequest = schema_utils_1.Type.Object({\n  request_type: exports.RequestType,\n  details: exports.TxRequestDetailsType,\n  serialized: schema_utils_1.Type.Optional(exports.TxRequestSerializedType)\n}, {\n  $id: 'TxRequest'\n});\nexports.InternalInputScriptType = schema_utils_1.Type.Exclude(exports.InputScriptType, schema_utils_1.Type.Literal('EXTERNAL'), {\n  $id: 'InternalInputScriptType'\n});\nconst CommonTxInputType = schema_utils_1.Type.Object({\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number(),\n  amount: schema_utils_1.Type.Uint(),\n  sequence: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  decred_tree: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  decred_staking_spend: schema_utils_1.Type.Optional(exports.EnumDecredStakingSpendType),\n  script_pubkey: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  coinjoin_flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  script_sig: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  witness: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  ownership_proof: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  commitment_data: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CommonTxInputType'\n});\nexports.TxInputType = schema_utils_1.Type.Union([schema_utils_1.Type.Intersect([CommonTxInputType, schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  script_type: schema_utils_1.Type.Optional(exports.InternalInputScriptType)\n})]), schema_utils_1.Type.Intersect([CommonTxInputType, schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  script_type: schema_utils_1.Type.Literal('EXTERNAL'),\n  script_pubkey: schema_utils_1.Type.String()\n})])], {\n  $id: 'TxInputType'\n});\nexports.TxInput = (0, schema_utils_1.CloneType)(exports.TxInputType, {\n  $id: 'TxInput'\n});\nexports.TxOutputBinType = schema_utils_1.Type.Object({\n  amount: schema_utils_1.Type.Uint(),\n  script_pubkey: schema_utils_1.Type.String(),\n  decred_script_version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'TxOutputBinType'\n});\nexports.ChangeOutputScriptType = schema_utils_1.Type.Exclude(exports.OutputScriptType, schema_utils_1.Type.Literal('PAYTOOPRETURN'), {\n  $id: 'ChangeOutputScriptType'\n});\nexports.TxOutputType = schema_utils_1.Type.Union([schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  script_type: schema_utils_1.Type.Literal('PAYTOADDRESS'),\n  amount: schema_utils_1.Type.Uint(),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}), schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  script_type: schema_utils_1.Type.Optional(exports.ChangeOutputScriptType),\n  amount: schema_utils_1.Type.Uint(),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}), schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  script_type: schema_utils_1.Type.Optional(exports.ChangeOutputScriptType),\n  amount: schema_utils_1.Type.Uint(),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}), schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Undefined()),\n  amount: schema_utils_1.Type.Union([schema_utils_1.Type.Literal('0'), schema_utils_1.Type.Literal(0)]),\n  op_return_data: schema_utils_1.Type.String(),\n  script_type: schema_utils_1.Type.Literal('PAYTOOPRETURN'),\n  orig_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  orig_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  payment_req_index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n})], {\n  $id: 'TxOutputType'\n});\nexports.TxOutput = (0, schema_utils_1.CloneType)(exports.TxOutputType, {\n  $id: 'TxOutput'\n});\nexports.PrevTx = schema_utils_1.Type.Object({\n  version: schema_utils_1.Type.Number(),\n  lock_time: schema_utils_1.Type.Number(),\n  inputs_count: schema_utils_1.Type.Number(),\n  outputs_count: schema_utils_1.Type.Number(),\n  extra_data_len: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  expiry: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  version_group_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  timestamp: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  branch_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'PrevTx'\n});\nexports.PrevInput = schema_utils_1.Type.Object({\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number(),\n  script_sig: schema_utils_1.Type.String(),\n  sequence: schema_utils_1.Type.Number(),\n  decred_tree: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'PrevInput'\n});\nexports.PrevOutput = schema_utils_1.Type.Object({\n  amount: schema_utils_1.Type.Uint(),\n  script_pubkey: schema_utils_1.Type.String(),\n  decred_script_version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'PrevOutput'\n});\nexports.TextMemo = schema_utils_1.Type.Object({\n  text: schema_utils_1.Type.String()\n}, {\n  $id: 'TextMemo'\n});\nexports.RefundMemo = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  mac: schema_utils_1.Type.String()\n}, {\n  $id: 'RefundMemo'\n});\nexports.CoinPurchaseMemo = schema_utils_1.Type.Object({\n  coin_type: schema_utils_1.Type.Number(),\n  amount: schema_utils_1.Type.Uint(),\n  address: schema_utils_1.Type.String(),\n  mac: schema_utils_1.Type.String()\n}, {\n  $id: 'CoinPurchaseMemo'\n});\nexports.PaymentRequestMemo = schema_utils_1.Type.Object({\n  text_memo: schema_utils_1.Type.Optional(exports.TextMemo),\n  refund_memo: schema_utils_1.Type.Optional(exports.RefundMemo),\n  coin_purchase_memo: schema_utils_1.Type.Optional(exports.CoinPurchaseMemo)\n}, {\n  $id: 'PaymentRequestMemo'\n});\nexports.TxAckPaymentRequest = schema_utils_1.Type.Object({\n  nonce: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  recipient_name: schema_utils_1.Type.String(),\n  memos: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.PaymentRequestMemo)),\n  amount: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'TxAckPaymentRequest'\n});\nexports.TxAckResponse = schema_utils_1.Type.Union([schema_utils_1.Type.Object({\n  inputs: schema_utils_1.Type.Array(schema_utils_1.Type.Union([exports.TxInputType, exports.PrevInput]))\n}), schema_utils_1.Type.Object({\n  bin_outputs: schema_utils_1.Type.Array(exports.TxOutputBinType)\n}), schema_utils_1.Type.Object({\n  outputs: schema_utils_1.Type.Array(exports.TxOutputType)\n}), schema_utils_1.Type.Object({\n  extra_data: schema_utils_1.Type.String()\n}), schema_utils_1.Type.Object({\n  version: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  lock_time: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  inputs_cnt: schema_utils_1.Type.Number(),\n  outputs_cnt: schema_utils_1.Type.Number(),\n  extra_data: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  extra_data_len: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  timestamp: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  version_group_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  expiry: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  branch_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n})], {\n  $id: 'TxAckResponse'\n});\nexports.TxAck = schema_utils_1.Type.Object({\n  tx: exports.TxAckResponse\n}, {\n  $id: 'TxAck'\n});\nexports.TxAckInputWrapper = schema_utils_1.Type.Object({\n  input: exports.TxInput\n}, {\n  $id: 'TxAckInputWrapper'\n});\nexports.TxAckInput = schema_utils_1.Type.Object({\n  tx: exports.TxAckInputWrapper\n}, {\n  $id: 'TxAckInput'\n});\nexports.TxAckOutputWrapper = schema_utils_1.Type.Object({\n  output: exports.TxOutput\n}, {\n  $id: 'TxAckOutputWrapper'\n});\nexports.TxAckOutput = schema_utils_1.Type.Object({\n  tx: exports.TxAckOutputWrapper\n}, {\n  $id: 'TxAckOutput'\n});\nexports.TxAckPrevMeta = schema_utils_1.Type.Object({\n  tx: exports.PrevTx\n}, {\n  $id: 'TxAckPrevMeta'\n});\nexports.TxAckPrevInputWrapper = schema_utils_1.Type.Object({\n  input: exports.PrevInput\n}, {\n  $id: 'TxAckPrevInputWrapper'\n});\nexports.TxAckPrevInput = schema_utils_1.Type.Object({\n  tx: exports.TxAckPrevInputWrapper\n}, {\n  $id: 'TxAckPrevInput'\n});\nexports.TxAckPrevOutputWrapper = schema_utils_1.Type.Object({\n  output: exports.PrevOutput\n}, {\n  $id: 'TxAckPrevOutputWrapper'\n});\nexports.TxAckPrevOutput = schema_utils_1.Type.Object({\n  tx: exports.TxAckPrevOutputWrapper\n}, {\n  $id: 'TxAckPrevOutput'\n});\nexports.TxAckPrevExtraDataWrapper = schema_utils_1.Type.Object({\n  extra_data_chunk: schema_utils_1.Type.String()\n}, {\n  $id: 'TxAckPrevExtraDataWrapper'\n});\nexports.TxAckPrevExtraData = schema_utils_1.Type.Object({\n  tx: exports.TxAckPrevExtraDataWrapper\n}, {\n  $id: 'TxAckPrevExtraData'\n});\nexports.GetOwnershipProof = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  script_type: schema_utils_1.Type.Optional(exports.InputScriptType),\n  multisig: schema_utils_1.Type.Optional(exports.MultisigRedeemScriptType),\n  user_confirmation: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  ownership_ids: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.String())),\n  commitment_data: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'GetOwnershipProof'\n});\nexports.OwnershipProof = schema_utils_1.Type.Object({\n  ownership_proof: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'OwnershipProof'\n});\nexports.AuthorizeCoinJoin = schema_utils_1.Type.Object({\n  coordinator: schema_utils_1.Type.String(),\n  max_rounds: schema_utils_1.Type.Number(),\n  max_coordinator_fee_rate: schema_utils_1.Type.Number(),\n  max_fee_per_kvbyte: schema_utils_1.Type.Number(),\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  coin_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  script_type: schema_utils_1.Type.Optional(exports.InputScriptType),\n  amount_unit: schema_utils_1.Type.Optional(exports.EnumAmountUnit)\n}, {\n  $id: 'AuthorizeCoinJoin'\n});\nexports.FirmwareErase = schema_utils_1.Type.Object({\n  length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'FirmwareErase'\n});\nexports.FirmwareRequest = schema_utils_1.Type.Object({\n  offset: schema_utils_1.Type.Number(),\n  length: schema_utils_1.Type.Number()\n}, {\n  $id: 'FirmwareRequest'\n});\nexports.FirmwareUpload = schema_utils_1.Type.Object({\n  payload: schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.ArrayBuffer()]),\n  hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'FirmwareUpload'\n});\nexports.ProdTestT1 = schema_utils_1.Type.Object({\n  payload: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'ProdTestT1'\n});\nvar CardanoDerivationType;\n(function (CardanoDerivationType) {\n  CardanoDerivationType[CardanoDerivationType[\"LEDGER\"] = 0] = \"LEDGER\";\n  CardanoDerivationType[CardanoDerivationType[\"ICARUS\"] = 1] = \"ICARUS\";\n  CardanoDerivationType[CardanoDerivationType[\"ICARUS_TREZOR\"] = 2] = \"ICARUS_TREZOR\";\n})(CardanoDerivationType || (exports.CardanoDerivationType = CardanoDerivationType = {}));\nexports.EnumCardanoDerivationType = schema_utils_1.Type.Enum(CardanoDerivationType);\nvar CardanoAddressType;\n(function (CardanoAddressType) {\n  CardanoAddressType[CardanoAddressType[\"BASE\"] = 0] = \"BASE\";\n  CardanoAddressType[CardanoAddressType[\"BASE_SCRIPT_KEY\"] = 1] = \"BASE_SCRIPT_KEY\";\n  CardanoAddressType[CardanoAddressType[\"BASE_KEY_SCRIPT\"] = 2] = \"BASE_KEY_SCRIPT\";\n  CardanoAddressType[CardanoAddressType[\"BASE_SCRIPT_SCRIPT\"] = 3] = \"BASE_SCRIPT_SCRIPT\";\n  CardanoAddressType[CardanoAddressType[\"POINTER\"] = 4] = \"POINTER\";\n  CardanoAddressType[CardanoAddressType[\"POINTER_SCRIPT\"] = 5] = \"POINTER_SCRIPT\";\n  CardanoAddressType[CardanoAddressType[\"ENTERPRISE\"] = 6] = \"ENTERPRISE\";\n  CardanoAddressType[CardanoAddressType[\"ENTERPRISE_SCRIPT\"] = 7] = \"ENTERPRISE_SCRIPT\";\n  CardanoAddressType[CardanoAddressType[\"BYRON\"] = 8] = \"BYRON\";\n  CardanoAddressType[CardanoAddressType[\"REWARD\"] = 14] = \"REWARD\";\n  CardanoAddressType[CardanoAddressType[\"REWARD_SCRIPT\"] = 15] = \"REWARD_SCRIPT\";\n})(CardanoAddressType || (exports.CardanoAddressType = CardanoAddressType = {}));\nexports.EnumCardanoAddressType = schema_utils_1.Type.Enum(CardanoAddressType);\nvar CardanoNativeScriptType;\n(function (CardanoNativeScriptType) {\n  CardanoNativeScriptType[CardanoNativeScriptType[\"PUB_KEY\"] = 0] = \"PUB_KEY\";\n  CardanoNativeScriptType[CardanoNativeScriptType[\"ALL\"] = 1] = \"ALL\";\n  CardanoNativeScriptType[CardanoNativeScriptType[\"ANY\"] = 2] = \"ANY\";\n  CardanoNativeScriptType[CardanoNativeScriptType[\"N_OF_K\"] = 3] = \"N_OF_K\";\n  CardanoNativeScriptType[CardanoNativeScriptType[\"INVALID_BEFORE\"] = 4] = \"INVALID_BEFORE\";\n  CardanoNativeScriptType[CardanoNativeScriptType[\"INVALID_HEREAFTER\"] = 5] = \"INVALID_HEREAFTER\";\n})(CardanoNativeScriptType || (exports.CardanoNativeScriptType = CardanoNativeScriptType = {}));\nexports.EnumCardanoNativeScriptType = schema_utils_1.Type.Enum(CardanoNativeScriptType);\nvar CardanoNativeScriptHashDisplayFormat;\n(function (CardanoNativeScriptHashDisplayFormat) {\n  CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat[\"HIDE\"] = 0] = \"HIDE\";\n  CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat[\"BECH32\"] = 1] = \"BECH32\";\n  CardanoNativeScriptHashDisplayFormat[CardanoNativeScriptHashDisplayFormat[\"POLICY_ID\"] = 2] = \"POLICY_ID\";\n})(CardanoNativeScriptHashDisplayFormat || (exports.CardanoNativeScriptHashDisplayFormat = CardanoNativeScriptHashDisplayFormat = {}));\nexports.EnumCardanoNativeScriptHashDisplayFormat = schema_utils_1.Type.Enum(CardanoNativeScriptHashDisplayFormat);\nvar CardanoTxOutputSerializationFormat;\n(function (CardanoTxOutputSerializationFormat) {\n  CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat[\"ARRAY_LEGACY\"] = 0] = \"ARRAY_LEGACY\";\n  CardanoTxOutputSerializationFormat[CardanoTxOutputSerializationFormat[\"MAP_BABBAGE\"] = 1] = \"MAP_BABBAGE\";\n})(CardanoTxOutputSerializationFormat || (exports.CardanoTxOutputSerializationFormat = CardanoTxOutputSerializationFormat = {}));\nexports.EnumCardanoTxOutputSerializationFormat = schema_utils_1.Type.Enum(CardanoTxOutputSerializationFormat);\nvar CardanoCertificateType;\n(function (CardanoCertificateType) {\n  CardanoCertificateType[CardanoCertificateType[\"STAKE_REGISTRATION\"] = 0] = \"STAKE_REGISTRATION\";\n  CardanoCertificateType[CardanoCertificateType[\"STAKE_DEREGISTRATION\"] = 1] = \"STAKE_DEREGISTRATION\";\n  CardanoCertificateType[CardanoCertificateType[\"STAKE_DELEGATION\"] = 2] = \"STAKE_DELEGATION\";\n  CardanoCertificateType[CardanoCertificateType[\"STAKE_POOL_REGISTRATION\"] = 3] = \"STAKE_POOL_REGISTRATION\";\n  CardanoCertificateType[CardanoCertificateType[\"STAKE_REGISTRATION_CONWAY\"] = 7] = \"STAKE_REGISTRATION_CONWAY\";\n  CardanoCertificateType[CardanoCertificateType[\"STAKE_DEREGISTRATION_CONWAY\"] = 8] = \"STAKE_DEREGISTRATION_CONWAY\";\n  CardanoCertificateType[CardanoCertificateType[\"VOTE_DELEGATION\"] = 9] = \"VOTE_DELEGATION\";\n})(CardanoCertificateType || (exports.CardanoCertificateType = CardanoCertificateType = {}));\nexports.EnumCardanoCertificateType = schema_utils_1.Type.Enum(CardanoCertificateType);\nvar CardanoDRepType;\n(function (CardanoDRepType) {\n  CardanoDRepType[CardanoDRepType[\"KEY_HASH\"] = 0] = \"KEY_HASH\";\n  CardanoDRepType[CardanoDRepType[\"SCRIPT_HASH\"] = 1] = \"SCRIPT_HASH\";\n  CardanoDRepType[CardanoDRepType[\"ABSTAIN\"] = 2] = \"ABSTAIN\";\n  CardanoDRepType[CardanoDRepType[\"NO_CONFIDENCE\"] = 3] = \"NO_CONFIDENCE\";\n})(CardanoDRepType || (exports.CardanoDRepType = CardanoDRepType = {}));\nexports.EnumCardanoDRepType = schema_utils_1.Type.Enum(CardanoDRepType);\nvar CardanoPoolRelayType;\n(function (CardanoPoolRelayType) {\n  CardanoPoolRelayType[CardanoPoolRelayType[\"SINGLE_HOST_IP\"] = 0] = \"SINGLE_HOST_IP\";\n  CardanoPoolRelayType[CardanoPoolRelayType[\"SINGLE_HOST_NAME\"] = 1] = \"SINGLE_HOST_NAME\";\n  CardanoPoolRelayType[CardanoPoolRelayType[\"MULTIPLE_HOST_NAME\"] = 2] = \"MULTIPLE_HOST_NAME\";\n})(CardanoPoolRelayType || (exports.CardanoPoolRelayType = CardanoPoolRelayType = {}));\nexports.EnumCardanoPoolRelayType = schema_utils_1.Type.Enum(CardanoPoolRelayType);\nvar CardanoTxAuxiliaryDataSupplementType;\n(function (CardanoTxAuxiliaryDataSupplementType) {\n  CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType[\"NONE\"] = 0] = \"NONE\";\n  CardanoTxAuxiliaryDataSupplementType[CardanoTxAuxiliaryDataSupplementType[\"CVOTE_REGISTRATION_SIGNATURE\"] = 1] = \"CVOTE_REGISTRATION_SIGNATURE\";\n})(CardanoTxAuxiliaryDataSupplementType || (exports.CardanoTxAuxiliaryDataSupplementType = CardanoTxAuxiliaryDataSupplementType = {}));\nexports.EnumCardanoTxAuxiliaryDataSupplementType = schema_utils_1.Type.Enum(CardanoTxAuxiliaryDataSupplementType);\nvar CardanoCVoteRegistrationFormat;\n(function (CardanoCVoteRegistrationFormat) {\n  CardanoCVoteRegistrationFormat[CardanoCVoteRegistrationFormat[\"CIP15\"] = 0] = \"CIP15\";\n  CardanoCVoteRegistrationFormat[CardanoCVoteRegistrationFormat[\"CIP36\"] = 1] = \"CIP36\";\n})(CardanoCVoteRegistrationFormat || (exports.CardanoCVoteRegistrationFormat = CardanoCVoteRegistrationFormat = {}));\nexports.EnumCardanoCVoteRegistrationFormat = schema_utils_1.Type.Enum(CardanoCVoteRegistrationFormat);\nvar CardanoTxSigningMode;\n(function (CardanoTxSigningMode) {\n  CardanoTxSigningMode[CardanoTxSigningMode[\"ORDINARY_TRANSACTION\"] = 0] = \"ORDINARY_TRANSACTION\";\n  CardanoTxSigningMode[CardanoTxSigningMode[\"POOL_REGISTRATION_AS_OWNER\"] = 1] = \"POOL_REGISTRATION_AS_OWNER\";\n  CardanoTxSigningMode[CardanoTxSigningMode[\"MULTISIG_TRANSACTION\"] = 2] = \"MULTISIG_TRANSACTION\";\n  CardanoTxSigningMode[CardanoTxSigningMode[\"PLUTUS_TRANSACTION\"] = 3] = \"PLUTUS_TRANSACTION\";\n})(CardanoTxSigningMode || (exports.CardanoTxSigningMode = CardanoTxSigningMode = {}));\nexports.EnumCardanoTxSigningMode = schema_utils_1.Type.Enum(CardanoTxSigningMode);\nvar CardanoTxWitnessType;\n(function (CardanoTxWitnessType) {\n  CardanoTxWitnessType[CardanoTxWitnessType[\"BYRON_WITNESS\"] = 0] = \"BYRON_WITNESS\";\n  CardanoTxWitnessType[CardanoTxWitnessType[\"SHELLEY_WITNESS\"] = 1] = \"SHELLEY_WITNESS\";\n})(CardanoTxWitnessType || (exports.CardanoTxWitnessType = CardanoTxWitnessType = {}));\nexports.EnumCardanoTxWitnessType = schema_utils_1.Type.Enum(CardanoTxWitnessType);\nexports.CardanoBlockchainPointerType = schema_utils_1.Type.Object({\n  block_index: schema_utils_1.Type.Number(),\n  tx_index: schema_utils_1.Type.Number(),\n  certificate_index: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoBlockchainPointerType'\n});\nexports.CardanoNativeScript = schema_utils_1.Type.Recursive(This => schema_utils_1.Type.Object({\n  type: exports.EnumCardanoNativeScriptType,\n  scripts: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(This)),\n  key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  key_path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  required_signatures_count: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  invalid_before: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  invalid_hereafter: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint())\n}), {\n  $id: 'CardanoNativeScript'\n});\nexports.CardanoGetNativeScriptHash = schema_utils_1.Type.Object({\n  script: exports.CardanoNativeScript,\n  display_format: exports.EnumCardanoNativeScriptHashDisplayFormat,\n  derivation_type: exports.EnumCardanoDerivationType\n}, {\n  $id: 'CardanoGetNativeScriptHash'\n});\nexports.CardanoNativeScriptHash = schema_utils_1.Type.Object({\n  script_hash: schema_utils_1.Type.String()\n}, {\n  $id: 'CardanoNativeScriptHash'\n});\nexports.CardanoAddressParametersType = schema_utils_1.Type.Object({\n  address_type: exports.EnumCardanoAddressType,\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  address_n_staking: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  staking_key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  certificate_pointer: schema_utils_1.Type.Optional(exports.CardanoBlockchainPointerType),\n  script_payment_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  script_staking_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoAddressParametersType'\n});\nexports.CardanoGetAddress = schema_utils_1.Type.Object({\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  protocol_magic: schema_utils_1.Type.Number(),\n  network_id: schema_utils_1.Type.Number(),\n  address_parameters: exports.CardanoAddressParametersType,\n  derivation_type: exports.EnumCardanoDerivationType,\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'CardanoGetAddress'\n});\nexports.CardanoAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'CardanoAddress'\n});\nexports.CardanoGetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  derivation_type: exports.EnumCardanoDerivationType\n}, {\n  $id: 'CardanoGetPublicKey'\n});\nexports.CardanoPublicKey = schema_utils_1.Type.Object({\n  xpub: schema_utils_1.Type.String(),\n  node: exports.HDNodeType\n}, {\n  $id: 'CardanoPublicKey'\n});\nexports.CardanoSignTxInit = schema_utils_1.Type.Object({\n  signing_mode: exports.EnumCardanoTxSigningMode,\n  protocol_magic: schema_utils_1.Type.Number(),\n  network_id: schema_utils_1.Type.Number(),\n  inputs_count: schema_utils_1.Type.Number(),\n  outputs_count: schema_utils_1.Type.Number(),\n  fee: schema_utils_1.Type.Uint(),\n  ttl: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  certificates_count: schema_utils_1.Type.Number(),\n  withdrawals_count: schema_utils_1.Type.Number(),\n  has_auxiliary_data: schema_utils_1.Type.Boolean(),\n  validity_interval_start: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  witness_requests_count: schema_utils_1.Type.Number(),\n  minting_asset_groups_count: schema_utils_1.Type.Number(),\n  derivation_type: exports.EnumCardanoDerivationType,\n  include_network_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  script_data_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  collateral_inputs_count: schema_utils_1.Type.Number(),\n  required_signers_count: schema_utils_1.Type.Number(),\n  has_collateral_return: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  total_collateral: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  reference_inputs_count: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  tag_cbor_sets: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'CardanoSignTxInit'\n});\nexports.CardanoTxInput = schema_utils_1.Type.Object({\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoTxInput'\n});\nexports.CardanoTxOutput = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  address_parameters: schema_utils_1.Type.Optional(exports.CardanoAddressParametersType),\n  amount: schema_utils_1.Type.Uint(),\n  asset_groups_count: schema_utils_1.Type.Number(),\n  datum_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  format: schema_utils_1.Type.Optional(exports.EnumCardanoTxOutputSerializationFormat),\n  inline_datum_size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  reference_script_size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'CardanoTxOutput'\n});\nexports.CardanoAssetGroup = schema_utils_1.Type.Object({\n  policy_id: schema_utils_1.Type.String(),\n  tokens_count: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoAssetGroup'\n});\nexports.CardanoToken = schema_utils_1.Type.Object({\n  asset_name_bytes: schema_utils_1.Type.String(),\n  amount: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  mint_amount: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint({\n    allowNegative: true\n  }))\n}, {\n  $id: 'CardanoToken'\n});\nexports.CardanoTxInlineDatumChunk = schema_utils_1.Type.Object({\n  data: schema_utils_1.Type.String()\n}, {\n  $id: 'CardanoTxInlineDatumChunk'\n});\nexports.CardanoTxReferenceScriptChunk = schema_utils_1.Type.Object({\n  data: schema_utils_1.Type.String()\n}, {\n  $id: 'CardanoTxReferenceScriptChunk'\n});\nexports.CardanoPoolOwner = schema_utils_1.Type.Object({\n  staking_key_path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  staking_key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoPoolOwner'\n});\nexports.CardanoPoolRelayParameters = schema_utils_1.Type.Object({\n  type: exports.EnumCardanoPoolRelayType,\n  ipv4_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  ipv6_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  host_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  port: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'CardanoPoolRelayParameters'\n});\nexports.CardanoPoolMetadataType = schema_utils_1.Type.Object({\n  url: schema_utils_1.Type.String(),\n  hash: schema_utils_1.Type.String()\n}, {\n  $id: 'CardanoPoolMetadataType'\n});\nexports.CardanoPoolParametersType = schema_utils_1.Type.Object({\n  pool_id: schema_utils_1.Type.String(),\n  vrf_key_hash: schema_utils_1.Type.String(),\n  pledge: schema_utils_1.Type.Uint(),\n  cost: schema_utils_1.Type.Uint(),\n  margin_numerator: schema_utils_1.Type.Uint(),\n  margin_denominator: schema_utils_1.Type.Uint(),\n  reward_account: schema_utils_1.Type.String(),\n  metadata: schema_utils_1.Type.Optional(exports.CardanoPoolMetadataType),\n  owners_count: schema_utils_1.Type.Number(),\n  relays_count: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoPoolParametersType'\n});\nexports.CardanoDRep = schema_utils_1.Type.Object({\n  type: exports.EnumCardanoDRepType,\n  key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  script_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoDRep'\n});\nexports.CardanoTxCertificate = schema_utils_1.Type.Object({\n  type: exports.EnumCardanoCertificateType,\n  path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  pool: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  pool_parameters: schema_utils_1.Type.Optional(exports.CardanoPoolParametersType),\n  script_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  deposit: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  drep: schema_utils_1.Type.Optional(exports.CardanoDRep)\n}, {\n  $id: 'CardanoTxCertificate'\n});\nexports.CardanoTxWithdrawal = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  amount: schema_utils_1.Type.Uint(),\n  script_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoTxWithdrawal'\n});\nexports.CardanoCVoteRegistrationDelegation = schema_utils_1.Type.Object({\n  vote_public_key: schema_utils_1.Type.String(),\n  weight: schema_utils_1.Type.Uint()\n}, {\n  $id: 'CardanoCVoteRegistrationDelegation'\n});\nexports.CardanoCVoteRegistrationParametersType = schema_utils_1.Type.Object({\n  vote_public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  staking_path: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  payment_address_parameters: schema_utils_1.Type.Optional(exports.CardanoAddressParametersType),\n  nonce: schema_utils_1.Type.Uint(),\n  format: schema_utils_1.Type.Optional(exports.EnumCardanoCVoteRegistrationFormat),\n  delegations: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.CardanoCVoteRegistrationDelegation)),\n  voting_purpose: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  payment_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoCVoteRegistrationParametersType'\n});\nexports.CardanoTxAuxiliaryData = schema_utils_1.Type.Object({\n  cvote_registration_parameters: schema_utils_1.Type.Optional(exports.CardanoCVoteRegistrationParametersType),\n  hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoTxAuxiliaryData'\n});\nexports.CardanoTxMint = schema_utils_1.Type.Object({\n  asset_groups_count: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoTxMint'\n});\nexports.CardanoTxCollateralInput = schema_utils_1.Type.Object({\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoTxCollateralInput'\n});\nexports.CardanoTxRequiredSigner = schema_utils_1.Type.Object({\n  key_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  key_path: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number()))\n}, {\n  $id: 'CardanoTxRequiredSigner'\n});\nexports.CardanoTxReferenceInput = schema_utils_1.Type.Object({\n  prev_hash: schema_utils_1.Type.String(),\n  prev_index: schema_utils_1.Type.Number()\n}, {\n  $id: 'CardanoTxReferenceInput'\n});\nexports.CardanoTxItemAck = schema_utils_1.Type.Object({}, {\n  $id: 'CardanoTxItemAck'\n});\nexports.CardanoTxAuxiliaryDataSupplement = schema_utils_1.Type.Object({\n  type: exports.EnumCardanoTxAuxiliaryDataSupplementType,\n  auxiliary_data_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  cvote_registration_signature: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoTxAuxiliaryDataSupplement'\n});\nexports.CardanoTxWitnessRequest = schema_utils_1.Type.Object({\n  path: schema_utils_1.Type.Array(schema_utils_1.Type.Number())\n}, {\n  $id: 'CardanoTxWitnessRequest'\n});\nexports.CardanoTxWitnessResponse = schema_utils_1.Type.Object({\n  type: exports.EnumCardanoTxWitnessType,\n  pub_key: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String(),\n  chain_code: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CardanoTxWitnessResponse'\n});\nexports.CardanoTxHostAck = schema_utils_1.Type.Object({}, {\n  $id: 'CardanoTxHostAck'\n});\nexports.CardanoTxBodyHash = schema_utils_1.Type.Object({\n  tx_hash: schema_utils_1.Type.String()\n}, {\n  $id: 'CardanoTxBodyHash'\n});\nexports.CardanoSignTxFinished = schema_utils_1.Type.Object({}, {\n  $id: 'CardanoSignTxFinished'\n});\nexports.Success = schema_utils_1.Type.Object({\n  message: schema_utils_1.Type.String()\n}, {\n  $id: 'Success'\n});\nvar FailureType;\n(function (FailureType) {\n  FailureType[FailureType[\"Failure_UnexpectedMessage\"] = 1] = \"Failure_UnexpectedMessage\";\n  FailureType[FailureType[\"Failure_ButtonExpected\"] = 2] = \"Failure_ButtonExpected\";\n  FailureType[FailureType[\"Failure_DataError\"] = 3] = \"Failure_DataError\";\n  FailureType[FailureType[\"Failure_ActionCancelled\"] = 4] = \"Failure_ActionCancelled\";\n  FailureType[FailureType[\"Failure_PinExpected\"] = 5] = \"Failure_PinExpected\";\n  FailureType[FailureType[\"Failure_PinCancelled\"] = 6] = \"Failure_PinCancelled\";\n  FailureType[FailureType[\"Failure_PinInvalid\"] = 7] = \"Failure_PinInvalid\";\n  FailureType[FailureType[\"Failure_InvalidSignature\"] = 8] = \"Failure_InvalidSignature\";\n  FailureType[FailureType[\"Failure_ProcessError\"] = 9] = \"Failure_ProcessError\";\n  FailureType[FailureType[\"Failure_NotEnoughFunds\"] = 10] = \"Failure_NotEnoughFunds\";\n  FailureType[FailureType[\"Failure_NotInitialized\"] = 11] = \"Failure_NotInitialized\";\n  FailureType[FailureType[\"Failure_PinMismatch\"] = 12] = \"Failure_PinMismatch\";\n  FailureType[FailureType[\"Failure_WipeCodeMismatch\"] = 13] = \"Failure_WipeCodeMismatch\";\n  FailureType[FailureType[\"Failure_InvalidSession\"] = 14] = \"Failure_InvalidSession\";\n  FailureType[FailureType[\"Failure_FirmwareError\"] = 99] = \"Failure_FirmwareError\";\n})(FailureType || (exports.FailureType = FailureType = {}));\nexports.EnumFailureType = schema_utils_1.Type.Enum(FailureType);\nexports.Failure = schema_utils_1.Type.Object({\n  code: schema_utils_1.Type.Optional(exports.EnumFailureType),\n  message: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'Failure'\n});\nvar Enum_ButtonRequestType;\n(function (Enum_ButtonRequestType) {\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_Other\"] = 1] = \"ButtonRequest_Other\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_FeeOverThreshold\"] = 2] = \"ButtonRequest_FeeOverThreshold\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_ConfirmOutput\"] = 3] = \"ButtonRequest_ConfirmOutput\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_ResetDevice\"] = 4] = \"ButtonRequest_ResetDevice\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_ConfirmWord\"] = 5] = \"ButtonRequest_ConfirmWord\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_WipeDevice\"] = 6] = \"ButtonRequest_WipeDevice\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_ProtectCall\"] = 7] = \"ButtonRequest_ProtectCall\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_SignTx\"] = 8] = \"ButtonRequest_SignTx\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_FirmwareCheck\"] = 9] = \"ButtonRequest_FirmwareCheck\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_Address\"] = 10] = \"ButtonRequest_Address\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_PublicKey\"] = 11] = \"ButtonRequest_PublicKey\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_MnemonicWordCount\"] = 12] = \"ButtonRequest_MnemonicWordCount\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_MnemonicInput\"] = 13] = \"ButtonRequest_MnemonicInput\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"_Deprecated_ButtonRequest_PassphraseType\"] = 14] = \"_Deprecated_ButtonRequest_PassphraseType\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_UnknownDerivationPath\"] = 15] = \"ButtonRequest_UnknownDerivationPath\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_RecoveryHomepage\"] = 16] = \"ButtonRequest_RecoveryHomepage\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_Success\"] = 17] = \"ButtonRequest_Success\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_Warning\"] = 18] = \"ButtonRequest_Warning\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_PassphraseEntry\"] = 19] = \"ButtonRequest_PassphraseEntry\";\n  Enum_ButtonRequestType[Enum_ButtonRequestType[\"ButtonRequest_PinEntry\"] = 20] = \"ButtonRequest_PinEntry\";\n})(Enum_ButtonRequestType || (exports.Enum_ButtonRequestType = Enum_ButtonRequestType = {}));\nexports.EnumEnum_ButtonRequestType = schema_utils_1.Type.Enum(Enum_ButtonRequestType);\nexports.ButtonRequestType = schema_utils_1.Type.KeyOfEnum(Enum_ButtonRequestType, {\n  $id: 'ButtonRequestType'\n});\nexports.ButtonRequest = schema_utils_1.Type.Object({\n  code: schema_utils_1.Type.Optional(exports.ButtonRequestType),\n  pages: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  name: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'ButtonRequest'\n});\nexports.ButtonAck = schema_utils_1.Type.Object({}, {\n  $id: 'ButtonAck'\n});\nvar Enum_PinMatrixRequestType;\n(function (Enum_PinMatrixRequestType) {\n  Enum_PinMatrixRequestType[Enum_PinMatrixRequestType[\"PinMatrixRequestType_Current\"] = 1] = \"PinMatrixRequestType_Current\";\n  Enum_PinMatrixRequestType[Enum_PinMatrixRequestType[\"PinMatrixRequestType_NewFirst\"] = 2] = \"PinMatrixRequestType_NewFirst\";\n  Enum_PinMatrixRequestType[Enum_PinMatrixRequestType[\"PinMatrixRequestType_NewSecond\"] = 3] = \"PinMatrixRequestType_NewSecond\";\n  Enum_PinMatrixRequestType[Enum_PinMatrixRequestType[\"PinMatrixRequestType_WipeCodeFirst\"] = 4] = \"PinMatrixRequestType_WipeCodeFirst\";\n  Enum_PinMatrixRequestType[Enum_PinMatrixRequestType[\"PinMatrixRequestType_WipeCodeSecond\"] = 5] = \"PinMatrixRequestType_WipeCodeSecond\";\n})(Enum_PinMatrixRequestType || (exports.Enum_PinMatrixRequestType = Enum_PinMatrixRequestType = {}));\nexports.EnumEnum_PinMatrixRequestType = schema_utils_1.Type.Enum(Enum_PinMatrixRequestType);\nexports.PinMatrixRequestType = schema_utils_1.Type.KeyOfEnum(Enum_PinMatrixRequestType, {\n  $id: 'PinMatrixRequestType'\n});\nexports.PinMatrixRequest = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Optional(exports.PinMatrixRequestType)\n}, {\n  $id: 'PinMatrixRequest'\n});\nexports.PinMatrixAck = schema_utils_1.Type.Object({\n  pin: schema_utils_1.Type.String()\n}, {\n  $id: 'PinMatrixAck'\n});\nexports.PassphraseRequest = schema_utils_1.Type.Object({\n  _on_device: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'PassphraseRequest'\n});\nexports.PassphraseAck = schema_utils_1.Type.Object({\n  passphrase: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  _state: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  on_device: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'PassphraseAck'\n});\nexports.Deprecated_PassphraseStateRequest = schema_utils_1.Type.Object({\n  state: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'Deprecated_PassphraseStateRequest'\n});\nexports.Deprecated_PassphraseStateAck = schema_utils_1.Type.Object({}, {\n  $id: 'Deprecated_PassphraseStateAck'\n});\nexports.CipherKeyValue = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  key: schema_utils_1.Type.String(),\n  value: schema_utils_1.Type.String(),\n  encrypt: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  ask_on_encrypt: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  ask_on_decrypt: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  iv: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'CipherKeyValue'\n});\nexports.CipheredKeyValue = schema_utils_1.Type.Object({\n  value: schema_utils_1.Type.String()\n}, {\n  $id: 'CipheredKeyValue'\n});\nexports.IdentityType = schema_utils_1.Type.Object({\n  proto: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  user: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  host: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  port: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  path: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  index: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'IdentityType'\n});\nexports.SignIdentity = schema_utils_1.Type.Object({\n  identity: exports.IdentityType,\n  challenge_hidden: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  challenge_visual: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  ecdsa_curve_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'SignIdentity'\n});\nexports.SignedIdentity = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  public_key: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'SignedIdentity'\n});\nexports.GetECDHSessionKey = schema_utils_1.Type.Object({\n  identity: exports.IdentityType,\n  peer_public_key: schema_utils_1.Type.String(),\n  ecdsa_curve_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'GetECDHSessionKey'\n});\nexports.ECDHSessionKey = schema_utils_1.Type.Object({\n  session_key: schema_utils_1.Type.String(),\n  public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'ECDHSessionKey'\n});\nvar DebugButton;\n(function (DebugButton) {\n  DebugButton[DebugButton[\"NO\"] = 0] = \"NO\";\n  DebugButton[DebugButton[\"YES\"] = 1] = \"YES\";\n  DebugButton[DebugButton[\"INFO\"] = 2] = \"INFO\";\n})(DebugButton || (exports.DebugButton = DebugButton = {}));\nexports.EnumDebugButton = schema_utils_1.Type.Enum(DebugButton);\nvar DebugPhysicalButton;\n(function (DebugPhysicalButton) {\n  DebugPhysicalButton[DebugPhysicalButton[\"LEFT_BTN\"] = 0] = \"LEFT_BTN\";\n  DebugPhysicalButton[DebugPhysicalButton[\"MIDDLE_BTN\"] = 1] = \"MIDDLE_BTN\";\n  DebugPhysicalButton[DebugPhysicalButton[\"RIGHT_BTN\"] = 2] = \"RIGHT_BTN\";\n})(DebugPhysicalButton || (exports.DebugPhysicalButton = DebugPhysicalButton = {}));\nexports.EnumDebugPhysicalButton = schema_utils_1.Type.Enum(DebugPhysicalButton);\nvar DebugWaitType;\n(function (DebugWaitType) {\n  DebugWaitType[DebugWaitType[\"IMMEDIATE\"] = 0] = \"IMMEDIATE\";\n  DebugWaitType[DebugWaitType[\"NEXT_LAYOUT\"] = 1] = \"NEXT_LAYOUT\";\n  DebugWaitType[DebugWaitType[\"CURRENT_LAYOUT\"] = 2] = \"CURRENT_LAYOUT\";\n})(DebugWaitType || (exports.DebugWaitType = DebugWaitType = {}));\nexports.EnumDebugWaitType = schema_utils_1.Type.Enum(DebugWaitType);\nexports.DebugLinkResetDebugEvents = schema_utils_1.Type.Object({}, {\n  $id: 'DebugLinkResetDebugEvents'\n});\nexports.DebugLinkOptigaSetSecMax = schema_utils_1.Type.Object({}, {\n  $id: 'DebugLinkOptigaSetSecMax'\n});\nexports.EosGetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EosGetPublicKey'\n});\nexports.EosPublicKey = schema_utils_1.Type.Object({\n  wif_public_key: schema_utils_1.Type.String(),\n  raw_public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'EosPublicKey'\n});\nexports.EosTxHeader = schema_utils_1.Type.Object({\n  expiration: schema_utils_1.Type.Number(),\n  ref_block_num: schema_utils_1.Type.Number(),\n  ref_block_prefix: schema_utils_1.Type.Number(),\n  max_net_usage_words: schema_utils_1.Type.Number(),\n  max_cpu_usage_ms: schema_utils_1.Type.Number(),\n  delay_sec: schema_utils_1.Type.Number()\n}, {\n  $id: 'EosTxHeader'\n});\nexports.EosSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  chain_id: schema_utils_1.Type.String(),\n  header: exports.EosTxHeader,\n  num_actions: schema_utils_1.Type.Number(),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EosSignTx'\n});\nexports.EosTxActionRequest = schema_utils_1.Type.Object({\n  data_size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'EosTxActionRequest'\n});\nexports.EosAsset = schema_utils_1.Type.Object({\n  amount: schema_utils_1.Type.Uint(),\n  symbol: schema_utils_1.Type.String()\n}, {\n  $id: 'EosAsset'\n});\nexports.EosPermissionLevel = schema_utils_1.Type.Object({\n  actor: schema_utils_1.Type.String(),\n  permission: schema_utils_1.Type.String()\n}, {\n  $id: 'EosPermissionLevel'\n});\nexports.EosAuthorizationKey = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  key: schema_utils_1.Type.String(),\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  weight: schema_utils_1.Type.Number()\n}, {\n  $id: 'EosAuthorizationKey'\n});\nexports.EosAuthorizationAccount = schema_utils_1.Type.Object({\n  account: exports.EosPermissionLevel,\n  weight: schema_utils_1.Type.Number()\n}, {\n  $id: 'EosAuthorizationAccount'\n});\nexports.EosAuthorizationWait = schema_utils_1.Type.Object({\n  wait_sec: schema_utils_1.Type.Number(),\n  weight: schema_utils_1.Type.Number()\n}, {\n  $id: 'EosAuthorizationWait'\n});\nexports.EosAuthorization = schema_utils_1.Type.Object({\n  threshold: schema_utils_1.Type.Number(),\n  keys: schema_utils_1.Type.Array(exports.EosAuthorizationKey),\n  accounts: schema_utils_1.Type.Array(exports.EosAuthorizationAccount),\n  waits: schema_utils_1.Type.Array(exports.EosAuthorizationWait)\n}, {\n  $id: 'EosAuthorization'\n});\nexports.EosActionCommon = schema_utils_1.Type.Object({\n  account: schema_utils_1.Type.String(),\n  name: schema_utils_1.Type.String(),\n  authorization: schema_utils_1.Type.Array(exports.EosPermissionLevel)\n}, {\n  $id: 'EosActionCommon'\n});\nexports.EosActionTransfer = schema_utils_1.Type.Object({\n  sender: schema_utils_1.Type.String(),\n  receiver: schema_utils_1.Type.String(),\n  quantity: exports.EosAsset,\n  memo: schema_utils_1.Type.String()\n}, {\n  $id: 'EosActionTransfer'\n});\nexports.EosActionDelegate = schema_utils_1.Type.Object({\n  sender: schema_utils_1.Type.String(),\n  receiver: schema_utils_1.Type.String(),\n  net_quantity: exports.EosAsset,\n  cpu_quantity: exports.EosAsset,\n  transfer: schema_utils_1.Type.Boolean()\n}, {\n  $id: 'EosActionDelegate'\n});\nexports.EosActionUndelegate = schema_utils_1.Type.Object({\n  sender: schema_utils_1.Type.String(),\n  receiver: schema_utils_1.Type.String(),\n  net_quantity: exports.EosAsset,\n  cpu_quantity: exports.EosAsset\n}, {\n  $id: 'EosActionUndelegate'\n});\nexports.EosActionRefund = schema_utils_1.Type.Object({\n  owner: schema_utils_1.Type.String()\n}, {\n  $id: 'EosActionRefund'\n});\nexports.EosActionBuyRam = schema_utils_1.Type.Object({\n  payer: schema_utils_1.Type.String(),\n  receiver: schema_utils_1.Type.String(),\n  quantity: exports.EosAsset\n}, {\n  $id: 'EosActionBuyRam'\n});\nexports.EosActionBuyRamBytes = schema_utils_1.Type.Object({\n  payer: schema_utils_1.Type.String(),\n  receiver: schema_utils_1.Type.String(),\n  bytes: schema_utils_1.Type.Number()\n}, {\n  $id: 'EosActionBuyRamBytes'\n});\nexports.EosActionSellRam = schema_utils_1.Type.Object({\n  account: schema_utils_1.Type.String(),\n  bytes: schema_utils_1.Type.Number()\n}, {\n  $id: 'EosActionSellRam'\n});\nexports.EosActionVoteProducer = schema_utils_1.Type.Object({\n  voter: schema_utils_1.Type.String(),\n  proxy: schema_utils_1.Type.String(),\n  producers: schema_utils_1.Type.Array(schema_utils_1.Type.String())\n}, {\n  $id: 'EosActionVoteProducer'\n});\nexports.EosActionUpdateAuth = schema_utils_1.Type.Object({\n  account: schema_utils_1.Type.String(),\n  permission: schema_utils_1.Type.String(),\n  parent: schema_utils_1.Type.String(),\n  auth: exports.EosAuthorization\n}, {\n  $id: 'EosActionUpdateAuth'\n});\nexports.EosActionDeleteAuth = schema_utils_1.Type.Object({\n  account: schema_utils_1.Type.String(),\n  permission: schema_utils_1.Type.String()\n}, {\n  $id: 'EosActionDeleteAuth'\n});\nexports.EosActionLinkAuth = schema_utils_1.Type.Object({\n  account: schema_utils_1.Type.String(),\n  code: schema_utils_1.Type.String(),\n  type: schema_utils_1.Type.String(),\n  requirement: schema_utils_1.Type.String()\n}, {\n  $id: 'EosActionLinkAuth'\n});\nexports.EosActionUnlinkAuth = schema_utils_1.Type.Object({\n  account: schema_utils_1.Type.String(),\n  code: schema_utils_1.Type.String(),\n  type: schema_utils_1.Type.String()\n}, {\n  $id: 'EosActionUnlinkAuth'\n});\nexports.EosActionNewAccount = schema_utils_1.Type.Object({\n  creator: schema_utils_1.Type.String(),\n  name: schema_utils_1.Type.String(),\n  owner: exports.EosAuthorization,\n  active: exports.EosAuthorization\n}, {\n  $id: 'EosActionNewAccount'\n});\nexports.EosActionUnknown = schema_utils_1.Type.Object({\n  data_size: schema_utils_1.Type.Number(),\n  data_chunk: schema_utils_1.Type.String()\n}, {\n  $id: 'EosActionUnknown'\n});\nexports.EosTxActionAck = schema_utils_1.Type.Object({\n  common: exports.EosActionCommon,\n  transfer: schema_utils_1.Type.Optional(exports.EosActionTransfer),\n  delegate: schema_utils_1.Type.Optional(exports.EosActionDelegate),\n  undelegate: schema_utils_1.Type.Optional(exports.EosActionUndelegate),\n  refund: schema_utils_1.Type.Optional(exports.EosActionRefund),\n  buy_ram: schema_utils_1.Type.Optional(exports.EosActionBuyRam),\n  buy_ram_bytes: schema_utils_1.Type.Optional(exports.EosActionBuyRamBytes),\n  sell_ram: schema_utils_1.Type.Optional(exports.EosActionSellRam),\n  vote_producer: schema_utils_1.Type.Optional(exports.EosActionVoteProducer),\n  update_auth: schema_utils_1.Type.Optional(exports.EosActionUpdateAuth),\n  delete_auth: schema_utils_1.Type.Optional(exports.EosActionDeleteAuth),\n  link_auth: schema_utils_1.Type.Optional(exports.EosActionLinkAuth),\n  unlink_auth: schema_utils_1.Type.Optional(exports.EosActionUnlinkAuth),\n  new_account: schema_utils_1.Type.Optional(exports.EosActionNewAccount),\n  unknown: schema_utils_1.Type.Optional(exports.EosActionUnknown)\n}, {\n  $id: 'EosTxActionAck'\n});\nexports.EosSignedTx = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'EosSignedTx'\n});\nvar EthereumDefinitionType;\n(function (EthereumDefinitionType) {\n  EthereumDefinitionType[EthereumDefinitionType[\"NETWORK\"] = 0] = \"NETWORK\";\n  EthereumDefinitionType[EthereumDefinitionType[\"TOKEN\"] = 1] = \"TOKEN\";\n})(EthereumDefinitionType || (exports.EthereumDefinitionType = EthereumDefinitionType = {}));\nexports.EnumEthereumDefinitionType = schema_utils_1.Type.Enum(EthereumDefinitionType);\nexports.EthereumNetworkInfo = schema_utils_1.Type.Object({\n  chain_id: schema_utils_1.Type.Number(),\n  symbol: schema_utils_1.Type.String(),\n  slip44: schema_utils_1.Type.Number(),\n  name: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumNetworkInfo'\n});\nexports.EthereumTokenInfo = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  chain_id: schema_utils_1.Type.Number(),\n  symbol: schema_utils_1.Type.String(),\n  decimals: schema_utils_1.Type.Number(),\n  name: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumTokenInfo'\n});\nexports.EthereumDefinitions = schema_utils_1.Type.Object({\n  encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),\n  encoded_token: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer())\n}, {\n  $id: 'EthereumDefinitions'\n});\nexports.EthereumSignTypedData = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  primary_type: schema_utils_1.Type.String(),\n  metamask_v4_compat: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  definitions: schema_utils_1.Type.Optional(exports.EthereumDefinitions)\n}, {\n  $id: 'EthereumSignTypedData'\n});\nexports.EthereumTypedDataStructRequest = schema_utils_1.Type.Object({\n  name: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumTypedDataStructRequest'\n});\nvar EthereumDataType;\n(function (EthereumDataType) {\n  EthereumDataType[EthereumDataType[\"UINT\"] = 1] = \"UINT\";\n  EthereumDataType[EthereumDataType[\"INT\"] = 2] = \"INT\";\n  EthereumDataType[EthereumDataType[\"BYTES\"] = 3] = \"BYTES\";\n  EthereumDataType[EthereumDataType[\"STRING\"] = 4] = \"STRING\";\n  EthereumDataType[EthereumDataType[\"BOOL\"] = 5] = \"BOOL\";\n  EthereumDataType[EthereumDataType[\"ADDRESS\"] = 6] = \"ADDRESS\";\n  EthereumDataType[EthereumDataType[\"ARRAY\"] = 7] = \"ARRAY\";\n  EthereumDataType[EthereumDataType[\"STRUCT\"] = 8] = \"STRUCT\";\n})(EthereumDataType || (exports.EthereumDataType = EthereumDataType = {}));\nexports.EnumEthereumDataType = schema_utils_1.Type.Enum(EthereumDataType);\nexports.EthereumFieldType = schema_utils_1.Type.Recursive(This => schema_utils_1.Type.Object({\n  data_type: exports.EnumEthereumDataType,\n  size: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  entry_type: schema_utils_1.Type.Optional(This),\n  struct_name: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}), {\n  $id: 'EthereumFieldType'\n});\nexports.EthereumStructMember = schema_utils_1.Type.Object({\n  type: exports.EthereumFieldType,\n  name: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumStructMember'\n});\nexports.EthereumTypedDataStructAck = schema_utils_1.Type.Object({\n  members: schema_utils_1.Type.Array(exports.EthereumStructMember)\n}, {\n  $id: 'EthereumTypedDataStructAck'\n});\nexports.EthereumTypedDataValueRequest = schema_utils_1.Type.Object({\n  member_path: schema_utils_1.Type.Array(schema_utils_1.Type.Number())\n}, {\n  $id: 'EthereumTypedDataValueRequest'\n});\nexports.EthereumTypedDataValueAck = schema_utils_1.Type.Object({\n  value: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumTypedDataValueAck'\n});\nexports.EthereumGetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EthereumGetPublicKey'\n});\nexports.EthereumPublicKey = schema_utils_1.Type.Object({\n  node: exports.HDNodeType,\n  xpub: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumPublicKey'\n});\nexports.EthereumGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EthereumGetAddress'\n});\nexports.EthereumAddress = schema_utils_1.Type.Object({\n  _old_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumAddress'\n});\nexports.EthereumSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  nonce: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  gas_price: schema_utils_1.Type.String(),\n  gas_limit: schema_utils_1.Type.String(),\n  to: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  value: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  data_initial_chunk: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  data_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  chain_id: schema_utils_1.Type.Number(),\n  tx_type: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  definitions: schema_utils_1.Type.Optional(exports.EthereumDefinitions),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EthereumSignTx'\n});\nexports.EthereumAccessList = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String(),\n  storage_keys: schema_utils_1.Type.Array(schema_utils_1.Type.String())\n}, {\n  $id: 'EthereumAccessList'\n});\nexports.EthereumSignTxEIP1559 = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  nonce: schema_utils_1.Type.String(),\n  max_gas_fee: schema_utils_1.Type.String(),\n  max_priority_fee: schema_utils_1.Type.String(),\n  gas_limit: schema_utils_1.Type.String(),\n  to: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  value: schema_utils_1.Type.String(),\n  data_initial_chunk: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  data_length: schema_utils_1.Type.Number(),\n  chain_id: schema_utils_1.Type.Number(),\n  access_list: schema_utils_1.Type.Array(exports.EthereumAccessList),\n  definitions: schema_utils_1.Type.Optional(exports.EthereumDefinitions),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EthereumSignTxEIP1559'\n});\nexports.EthereumTxRequest = schema_utils_1.Type.Object({\n  data_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  signature_v: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  signature_r: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  signature_s: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'EthereumTxRequest'\n});\nexports.EthereumTxAck = schema_utils_1.Type.Object({\n  data_chunk: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumTxAck'\n});\nexports.EthereumSignMessage = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  message: schema_utils_1.Type.String(),\n  encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EthereumSignMessage'\n});\nexports.EthereumMessageSignature = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumMessageSignature'\n});\nexports.EthereumVerifyMessage = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  message: schema_utils_1.Type.String(),\n  address: schema_utils_1.Type.String(),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EthereumVerifyMessage'\n});\nexports.EthereumSignTypedHash = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  domain_separator_hash: schema_utils_1.Type.String(),\n  message_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  encoded_network: schema_utils_1.Type.Optional(schema_utils_1.Type.ArrayBuffer())\n}, {\n  $id: 'EthereumSignTypedHash'\n});\nexports.EthereumTypedDataSignature = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'EthereumTypedDataSignature'\n});\nvar Enum_BackupType;\n(function (Enum_BackupType) {\n  Enum_BackupType[Enum_BackupType[\"Bip39\"] = 0] = \"Bip39\";\n  Enum_BackupType[Enum_BackupType[\"Slip39_Basic\"] = 1] = \"Slip39_Basic\";\n  Enum_BackupType[Enum_BackupType[\"Slip39_Advanced\"] = 2] = \"Slip39_Advanced\";\n  Enum_BackupType[Enum_BackupType[\"Slip39_Single_Extendable\"] = 3] = \"Slip39_Single_Extendable\";\n  Enum_BackupType[Enum_BackupType[\"Slip39_Basic_Extendable\"] = 4] = \"Slip39_Basic_Extendable\";\n  Enum_BackupType[Enum_BackupType[\"Slip39_Advanced_Extendable\"] = 5] = \"Slip39_Advanced_Extendable\";\n})(Enum_BackupType || (exports.Enum_BackupType = Enum_BackupType = {}));\nexports.EnumEnum_BackupType = schema_utils_1.Type.Enum(Enum_BackupType);\nexports.BackupType = schema_utils_1.Type.KeyOfEnum(Enum_BackupType, {\n  $id: 'BackupType'\n});\nvar Enum_SafetyCheckLevel;\n(function (Enum_SafetyCheckLevel) {\n  Enum_SafetyCheckLevel[Enum_SafetyCheckLevel[\"Strict\"] = 0] = \"Strict\";\n  Enum_SafetyCheckLevel[Enum_SafetyCheckLevel[\"PromptAlways\"] = 1] = \"PromptAlways\";\n  Enum_SafetyCheckLevel[Enum_SafetyCheckLevel[\"PromptTemporarily\"] = 2] = \"PromptTemporarily\";\n})(Enum_SafetyCheckLevel || (exports.Enum_SafetyCheckLevel = Enum_SafetyCheckLevel = {}));\nexports.EnumEnum_SafetyCheckLevel = schema_utils_1.Type.Enum(Enum_SafetyCheckLevel);\nexports.SafetyCheckLevel = schema_utils_1.Type.KeyOfEnum(Enum_SafetyCheckLevel, {\n  $id: 'SafetyCheckLevel'\n});\nvar Enum_DisplayRotation;\n(function (Enum_DisplayRotation) {\n  Enum_DisplayRotation[Enum_DisplayRotation[\"North\"] = 0] = \"North\";\n  Enum_DisplayRotation[Enum_DisplayRotation[\"East\"] = 90] = \"East\";\n  Enum_DisplayRotation[Enum_DisplayRotation[\"South\"] = 180] = \"South\";\n  Enum_DisplayRotation[Enum_DisplayRotation[\"West\"] = 270] = \"West\";\n})(Enum_DisplayRotation || (exports.Enum_DisplayRotation = Enum_DisplayRotation = {}));\nexports.EnumEnum_DisplayRotation = schema_utils_1.Type.Enum(Enum_DisplayRotation);\nexports.DisplayRotation = schema_utils_1.Type.KeyOfEnum(Enum_DisplayRotation, {\n  $id: 'DisplayRotation'\n});\nvar Enum_HomescreenFormat;\n(function (Enum_HomescreenFormat) {\n  Enum_HomescreenFormat[Enum_HomescreenFormat[\"Toif\"] = 1] = \"Toif\";\n  Enum_HomescreenFormat[Enum_HomescreenFormat[\"Jpeg\"] = 2] = \"Jpeg\";\n  Enum_HomescreenFormat[Enum_HomescreenFormat[\"ToiG\"] = 3] = \"ToiG\";\n})(Enum_HomescreenFormat || (exports.Enum_HomescreenFormat = Enum_HomescreenFormat = {}));\nexports.EnumEnum_HomescreenFormat = schema_utils_1.Type.Enum(Enum_HomescreenFormat);\nexports.HomescreenFormat = schema_utils_1.Type.KeyOfEnum(Enum_HomescreenFormat, {\n  $id: 'HomescreenFormat'\n});\nexports.Initialize = schema_utils_1.Type.Object({\n  session_id: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  _skip_passphrase: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  derive_cardano: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'Initialize'\n});\nexports.GetFeatures = schema_utils_1.Type.Object({}, {\n  $id: 'GetFeatures'\n});\nvar Enum_BackupAvailability;\n(function (Enum_BackupAvailability) {\n  Enum_BackupAvailability[Enum_BackupAvailability[\"NotAvailable\"] = 0] = \"NotAvailable\";\n  Enum_BackupAvailability[Enum_BackupAvailability[\"Required\"] = 1] = \"Required\";\n  Enum_BackupAvailability[Enum_BackupAvailability[\"Available\"] = 2] = \"Available\";\n})(Enum_BackupAvailability || (exports.Enum_BackupAvailability = Enum_BackupAvailability = {}));\nexports.EnumEnum_BackupAvailability = schema_utils_1.Type.Enum(Enum_BackupAvailability);\nexports.BackupAvailability = schema_utils_1.Type.KeyOfEnum(Enum_BackupAvailability, {\n  $id: 'BackupAvailability'\n});\nvar Enum_RecoveryStatus;\n(function (Enum_RecoveryStatus) {\n  Enum_RecoveryStatus[Enum_RecoveryStatus[\"Nothing\"] = 0] = \"Nothing\";\n  Enum_RecoveryStatus[Enum_RecoveryStatus[\"Recovery\"] = 1] = \"Recovery\";\n  Enum_RecoveryStatus[Enum_RecoveryStatus[\"Backup\"] = 2] = \"Backup\";\n})(Enum_RecoveryStatus || (exports.Enum_RecoveryStatus = Enum_RecoveryStatus = {}));\nexports.EnumEnum_RecoveryStatus = schema_utils_1.Type.Enum(Enum_RecoveryStatus);\nexports.RecoveryStatus = schema_utils_1.Type.KeyOfEnum(Enum_RecoveryStatus, {\n  $id: 'RecoveryStatus'\n});\nvar Enum_Capability;\n(function (Enum_Capability) {\n  Enum_Capability[Enum_Capability[\"Capability_Bitcoin\"] = 1] = \"Capability_Bitcoin\";\n  Enum_Capability[Enum_Capability[\"Capability_Bitcoin_like\"] = 2] = \"Capability_Bitcoin_like\";\n  Enum_Capability[Enum_Capability[\"Capability_Binance\"] = 3] = \"Capability_Binance\";\n  Enum_Capability[Enum_Capability[\"Capability_Cardano\"] = 4] = \"Capability_Cardano\";\n  Enum_Capability[Enum_Capability[\"Capability_Crypto\"] = 5] = \"Capability_Crypto\";\n  Enum_Capability[Enum_Capability[\"Capability_EOS\"] = 6] = \"Capability_EOS\";\n  Enum_Capability[Enum_Capability[\"Capability_Ethereum\"] = 7] = \"Capability_Ethereum\";\n  Enum_Capability[Enum_Capability[\"Capability_Lisk\"] = 8] = \"Capability_Lisk\";\n  Enum_Capability[Enum_Capability[\"Capability_Monero\"] = 9] = \"Capability_Monero\";\n  Enum_Capability[Enum_Capability[\"Capability_NEM\"] = 10] = \"Capability_NEM\";\n  Enum_Capability[Enum_Capability[\"Capability_Ripple\"] = 11] = \"Capability_Ripple\";\n  Enum_Capability[Enum_Capability[\"Capability_Stellar\"] = 12] = \"Capability_Stellar\";\n  Enum_Capability[Enum_Capability[\"Capability_Tezos\"] = 13] = \"Capability_Tezos\";\n  Enum_Capability[Enum_Capability[\"Capability_U2F\"] = 14] = \"Capability_U2F\";\n  Enum_Capability[Enum_Capability[\"Capability_Shamir\"] = 15] = \"Capability_Shamir\";\n  Enum_Capability[Enum_Capability[\"Capability_ShamirGroups\"] = 16] = \"Capability_ShamirGroups\";\n  Enum_Capability[Enum_Capability[\"Capability_PassphraseEntry\"] = 17] = \"Capability_PassphraseEntry\";\n  Enum_Capability[Enum_Capability[\"Capability_Solana\"] = 18] = \"Capability_Solana\";\n  Enum_Capability[Enum_Capability[\"Capability_Translations\"] = 19] = \"Capability_Translations\";\n  Enum_Capability[Enum_Capability[\"Capability_Brightness\"] = 20] = \"Capability_Brightness\";\n  Enum_Capability[Enum_Capability[\"Capability_Haptic\"] = 21] = \"Capability_Haptic\";\n})(Enum_Capability || (exports.Enum_Capability = Enum_Capability = {}));\nexports.EnumEnum_Capability = schema_utils_1.Type.Enum(Enum_Capability);\nexports.Capability = schema_utils_1.Type.KeyOfEnum(Enum_Capability, {\n  $id: 'Capability'\n});\nvar RecoveryDeviceInputMethod;\n(function (RecoveryDeviceInputMethod) {\n  RecoveryDeviceInputMethod[RecoveryDeviceInputMethod[\"ScrambledWords\"] = 0] = \"ScrambledWords\";\n  RecoveryDeviceInputMethod[RecoveryDeviceInputMethod[\"Matrix\"] = 1] = \"Matrix\";\n})(RecoveryDeviceInputMethod || (exports.RecoveryDeviceInputMethod = RecoveryDeviceInputMethod = {}));\nexports.EnumRecoveryDeviceInputMethod = schema_utils_1.Type.Enum(RecoveryDeviceInputMethod);\nvar Enum_RecoveryType;\n(function (Enum_RecoveryType) {\n  Enum_RecoveryType[Enum_RecoveryType[\"NormalRecovery\"] = 0] = \"NormalRecovery\";\n  Enum_RecoveryType[Enum_RecoveryType[\"DryRun\"] = 1] = \"DryRun\";\n  Enum_RecoveryType[Enum_RecoveryType[\"UnlockRepeatedBackup\"] = 2] = \"UnlockRepeatedBackup\";\n})(Enum_RecoveryType || (exports.Enum_RecoveryType = Enum_RecoveryType = {}));\nexports.EnumEnum_RecoveryType = schema_utils_1.Type.Enum(Enum_RecoveryType);\nexports.RecoveryType = schema_utils_1.Type.KeyOfEnum(Enum_RecoveryType, {\n  $id: 'RecoveryType'\n});\nexports.RecoveryDevice = schema_utils_1.Type.Object({\n  word_count: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  passphrase_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  pin_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  enforce_wordlist: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  input_method: schema_utils_1.Type.Optional(exports.EnumRecoveryDeviceInputMethod),\n  u2f_counter: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  type: schema_utils_1.Type.Optional(exports.RecoveryType)\n}, {\n  $id: 'RecoveryDevice'\n});\nexports.Features = schema_utils_1.Type.Object({\n  vendor: schema_utils_1.Type.String(),\n  major_version: schema_utils_1.Type.Number(),\n  minor_version: schema_utils_1.Type.Number(),\n  patch_version: schema_utils_1.Type.Number(),\n  bootloader_mode: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  device_id: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  pin_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  passphrase_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  language: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  label: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  initialized: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  revision: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  bootloader_hash: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  imported: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  unlocked: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  _passphrase_cached: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  firmware_present: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  backup_availability: schema_utils_1.Type.Union([exports.BackupAvailability, schema_utils_1.Type.Null()]),\n  flags: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),\n  model: schema_utils_1.Type.String(),\n  fw_major: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),\n  fw_minor: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),\n  fw_patch: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),\n  fw_vendor: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  unfinished_backup: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  no_backup: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  recovery_status: schema_utils_1.Type.Union([exports.RecoveryStatus, schema_utils_1.Type.Null()]),\n  capabilities: schema_utils_1.Type.Array(exports.Capability),\n  backup_type: schema_utils_1.Type.Union([exports.BackupType, schema_utils_1.Type.Null()]),\n  sd_card_present: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  sd_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  wipe_code_protection: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  session_id: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Null()]),\n  passphrase_always_on_device: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  safety_checks: schema_utils_1.Type.Union([exports.SafetyCheckLevel, schema_utils_1.Type.Null()]),\n  auto_lock_delay_ms: schema_utils_1.Type.Union([schema_utils_1.Type.Number(), schema_utils_1.Type.Null()]),\n  display_rotation: schema_utils_1.Type.Union([exports.DisplayRotation, schema_utils_1.Type.Null()]),\n  experimental_features: schema_utils_1.Type.Union([schema_utils_1.Type.Boolean(), schema_utils_1.Type.Null()]),\n  busy: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  homescreen_format: schema_utils_1.Type.Optional(exports.HomescreenFormat),\n  hide_passphrase_from_host: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  internal_model: exports.EnumDeviceModelInternal,\n  unit_color: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  unit_btconly: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  homescreen_width: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  homescreen_height: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  bootloader_locked: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  language_version_matches: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  unit_packaging: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  haptic_feedback: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  recovery_type: schema_utils_1.Type.Optional(exports.RecoveryType),\n  optiga_sec: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'Features'\n});\nexports.LockDevice = schema_utils_1.Type.Object({}, {\n  $id: 'LockDevice'\n});\nexports.SetBusy = schema_utils_1.Type.Object({\n  expiry_ms: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'SetBusy'\n});\nexports.EndSession = schema_utils_1.Type.Object({}, {\n  $id: 'EndSession'\n});\nexports.ApplySettings = schema_utils_1.Type.Object({\n  language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  use_passphrase: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  homescreen: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  _passphrase_source: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  auto_lock_delay_ms: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  display_rotation: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([exports.DisplayRotation, exports.EnumEnum_DisplayRotation])),\n  passphrase_always_on_device: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  safety_checks: schema_utils_1.Type.Optional(exports.SafetyCheckLevel),\n  experimental_features: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  hide_passphrase_from_host: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  haptic_feedback: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'ApplySettings'\n});\nexports.ChangeLanguage = schema_utils_1.Type.Object({\n  data_length: schema_utils_1.Type.Number(),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'ChangeLanguage'\n});\nexports.TranslationDataRequest = schema_utils_1.Type.Object({\n  data_length: schema_utils_1.Type.Number(),\n  data_offset: schema_utils_1.Type.Number()\n}, {\n  $id: 'TranslationDataRequest'\n});\nexports.TranslationDataAck = schema_utils_1.Type.Object({\n  data_chunk: schema_utils_1.Type.String()\n}, {\n  $id: 'TranslationDataAck'\n});\nexports.ApplyFlags = schema_utils_1.Type.Object({\n  flags: schema_utils_1.Type.Number()\n}, {\n  $id: 'ApplyFlags'\n});\nexports.ChangePin = schema_utils_1.Type.Object({\n  remove: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'ChangePin'\n});\nexports.ChangeWipeCode = schema_utils_1.Type.Object({\n  remove: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'ChangeWipeCode'\n});\nvar SdProtectOperationType;\n(function (SdProtectOperationType) {\n  SdProtectOperationType[SdProtectOperationType[\"DISABLE\"] = 0] = \"DISABLE\";\n  SdProtectOperationType[SdProtectOperationType[\"ENABLE\"] = 1] = \"ENABLE\";\n  SdProtectOperationType[SdProtectOperationType[\"REFRESH\"] = 2] = \"REFRESH\";\n})(SdProtectOperationType || (exports.SdProtectOperationType = SdProtectOperationType = {}));\nexports.EnumSdProtectOperationType = schema_utils_1.Type.Enum(SdProtectOperationType);\nexports.SdProtect = schema_utils_1.Type.Object({\n  operation: exports.EnumSdProtectOperationType\n}, {\n  $id: 'SdProtect'\n});\nexports.Ping = schema_utils_1.Type.Object({\n  message: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  button_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'Ping'\n});\nexports.Cancel = schema_utils_1.Type.Object({}, {\n  $id: 'Cancel'\n});\nexports.GetEntropy = schema_utils_1.Type.Object({\n  size: schema_utils_1.Type.Number()\n}, {\n  $id: 'GetEntropy'\n});\nexports.Entropy = schema_utils_1.Type.Object({\n  entropy: schema_utils_1.Type.String()\n}, {\n  $id: 'Entropy'\n});\nexports.GetFirmwareHash = schema_utils_1.Type.Object({\n  challenge: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'GetFirmwareHash'\n});\nexports.FirmwareHash = schema_utils_1.Type.Object({\n  hash: schema_utils_1.Type.String()\n}, {\n  $id: 'FirmwareHash'\n});\nexports.AuthenticateDevice = schema_utils_1.Type.Object({\n  challenge: schema_utils_1.Type.String()\n}, {\n  $id: 'AuthenticateDevice'\n});\nexports.AuthenticityProof = schema_utils_1.Type.Object({\n  certificates: schema_utils_1.Type.Array(schema_utils_1.Type.String()),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'AuthenticityProof'\n});\nexports.WipeDevice = schema_utils_1.Type.Object({}, {\n  $id: 'WipeDevice'\n});\nexports.LoadDevice = schema_utils_1.Type.Object({\n  mnemonics: schema_utils_1.Type.Array(schema_utils_1.Type.String()),\n  pin: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  passphrase_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  skip_checksum: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  u2f_counter: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  needs_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  no_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'LoadDevice'\n});\nexports.ResetDevice = schema_utils_1.Type.Object({\n  strength: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  passphrase_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  pin_protection: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  language: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  label: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  u2f_counter: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  skip_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  no_backup: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  backup_type: schema_utils_1.Type.Optional(exports.EnumEnum_BackupType),\n  entropy_check: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'ResetDevice'\n});\nexports.Slip39Group = schema_utils_1.Type.Object({\n  member_threshold: schema_utils_1.Type.Number(),\n  member_count: schema_utils_1.Type.Number()\n}, {\n  $id: 'Slip39Group'\n});\nexports.BackupDevice = schema_utils_1.Type.Object({\n  group_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  groups: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.Slip39Group))\n}, {\n  $id: 'BackupDevice'\n});\nexports.EntropyRequest = schema_utils_1.Type.Object({\n  entropy_commitment: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  prev_entropy: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'EntropyRequest'\n});\nexports.EntropyAck = schema_utils_1.Type.Object({\n  entropy: schema_utils_1.Type.String()\n}, {\n  $id: 'EntropyAck'\n});\nexports.EntropyCheckReady = schema_utils_1.Type.Object({}, {\n  $id: 'EntropyCheckReady'\n});\nexports.EntropyCheckContinue = schema_utils_1.Type.Object({\n  finish: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'EntropyCheckContinue'\n});\nvar Enum_WordRequestType;\n(function (Enum_WordRequestType) {\n  Enum_WordRequestType[Enum_WordRequestType[\"WordRequestType_Plain\"] = 0] = \"WordRequestType_Plain\";\n  Enum_WordRequestType[Enum_WordRequestType[\"WordRequestType_Matrix9\"] = 1] = \"WordRequestType_Matrix9\";\n  Enum_WordRequestType[Enum_WordRequestType[\"WordRequestType_Matrix6\"] = 2] = \"WordRequestType_Matrix6\";\n})(Enum_WordRequestType || (exports.Enum_WordRequestType = Enum_WordRequestType = {}));\nexports.EnumEnum_WordRequestType = schema_utils_1.Type.Enum(Enum_WordRequestType);\nexports.WordRequestType = schema_utils_1.Type.KeyOfEnum(Enum_WordRequestType, {\n  $id: 'WordRequestType'\n});\nexports.WordRequest = schema_utils_1.Type.Object({\n  type: exports.WordRequestType\n}, {\n  $id: 'WordRequest'\n});\nexports.WordAck = schema_utils_1.Type.Object({\n  word: schema_utils_1.Type.String()\n}, {\n  $id: 'WordAck'\n});\nexports.SetU2FCounter = schema_utils_1.Type.Object({\n  u2f_counter: schema_utils_1.Type.Number()\n}, {\n  $id: 'SetU2FCounter'\n});\nexports.GetNextU2FCounter = schema_utils_1.Type.Object({}, {\n  $id: 'GetNextU2FCounter'\n});\nexports.NextU2FCounter = schema_utils_1.Type.Object({\n  u2f_counter: schema_utils_1.Type.Number()\n}, {\n  $id: 'NextU2FCounter'\n});\nexports.DoPreauthorized = schema_utils_1.Type.Object({}, {\n  $id: 'DoPreauthorized'\n});\nexports.PreauthorizedRequest = schema_utils_1.Type.Object({}, {\n  $id: 'PreauthorizedRequest'\n});\nexports.CancelAuthorization = schema_utils_1.Type.Object({}, {\n  $id: 'CancelAuthorization'\n});\nvar BootCommand;\n(function (BootCommand) {\n  BootCommand[BootCommand[\"STOP_AND_WAIT\"] = 0] = \"STOP_AND_WAIT\";\n  BootCommand[BootCommand[\"INSTALL_UPGRADE\"] = 1] = \"INSTALL_UPGRADE\";\n})(BootCommand || (exports.BootCommand = BootCommand = {}));\nexports.EnumBootCommand = schema_utils_1.Type.Enum(BootCommand);\nexports.RebootToBootloader = schema_utils_1.Type.Object({\n  boot_command: schema_utils_1.Type.Optional(exports.EnumBootCommand),\n  firmware_header: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  language_data_length: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'RebootToBootloader'\n});\nexports.GetNonce = schema_utils_1.Type.Object({}, {\n  $id: 'GetNonce'\n});\nexports.Nonce = schema_utils_1.Type.Object({\n  nonce: schema_utils_1.Type.String()\n}, {\n  $id: 'Nonce'\n});\nexports.UnlockPath = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  mac: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'UnlockPath'\n});\nexports.UnlockedPathRequest = schema_utils_1.Type.Object({\n  mac: schema_utils_1.Type.String()\n}, {\n  $id: 'UnlockedPathRequest'\n});\nexports.ShowDeviceTutorial = schema_utils_1.Type.Object({}, {\n  $id: 'ShowDeviceTutorial'\n});\nexports.UnlockBootloader = schema_utils_1.Type.Object({}, {\n  $id: 'UnlockBootloader'\n});\nexports.SetBrightness = schema_utils_1.Type.Object({\n  value: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'SetBrightness'\n});\nexports.NEMGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'NEMGetAddress'\n});\nexports.NEMAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'NEMAddress'\n});\nexports.NEMTransactionCommon = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  timestamp: schema_utils_1.Type.Number(),\n  fee: schema_utils_1.Type.Uint(),\n  deadline: schema_utils_1.Type.Number(),\n  signer: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'NEMTransactionCommon'\n});\nexports.NEMMosaic = schema_utils_1.Type.Object({\n  namespace: schema_utils_1.Type.String(),\n  mosaic: schema_utils_1.Type.String(),\n  quantity: schema_utils_1.Type.Number()\n}, {\n  $id: 'NEMMosaic'\n});\nexports.NEMTransfer = schema_utils_1.Type.Object({\n  recipient: schema_utils_1.Type.String(),\n  amount: schema_utils_1.Type.Uint(),\n  payload: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  mosaics: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.NEMMosaic))\n}, {\n  $id: 'NEMTransfer'\n});\nexports.NEMProvisionNamespace = schema_utils_1.Type.Object({\n  namespace: schema_utils_1.Type.String(),\n  parent: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  sink: schema_utils_1.Type.String(),\n  fee: schema_utils_1.Type.Uint()\n}, {\n  $id: 'NEMProvisionNamespace'\n});\nvar NEMMosaicLevy;\n(function (NEMMosaicLevy) {\n  NEMMosaicLevy[NEMMosaicLevy[\"MosaicLevy_Absolute\"] = 1] = \"MosaicLevy_Absolute\";\n  NEMMosaicLevy[NEMMosaicLevy[\"MosaicLevy_Percentile\"] = 2] = \"MosaicLevy_Percentile\";\n})(NEMMosaicLevy || (exports.NEMMosaicLevy = NEMMosaicLevy = {}));\nexports.EnumNEMMosaicLevy = schema_utils_1.Type.Enum(NEMMosaicLevy);\nexports.NEMMosaicDefinition = schema_utils_1.Type.Object({\n  name: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  ticker: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  namespace: schema_utils_1.Type.String(),\n  mosaic: schema_utils_1.Type.String(),\n  divisibility: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  levy: schema_utils_1.Type.Optional(exports.EnumNEMMosaicLevy),\n  fee: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  levy_address: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  levy_namespace: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  levy_mosaic: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  supply: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  mutable_supply: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  transferable: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  description: schema_utils_1.Type.String(),\n  networks: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number()))\n}, {\n  $id: 'NEMMosaicDefinition'\n});\nexports.NEMMosaicCreation = schema_utils_1.Type.Object({\n  definition: exports.NEMMosaicDefinition,\n  sink: schema_utils_1.Type.String(),\n  fee: schema_utils_1.Type.Uint()\n}, {\n  $id: 'NEMMosaicCreation'\n});\nvar NEMSupplyChangeType;\n(function (NEMSupplyChangeType) {\n  NEMSupplyChangeType[NEMSupplyChangeType[\"SupplyChange_Increase\"] = 1] = \"SupplyChange_Increase\";\n  NEMSupplyChangeType[NEMSupplyChangeType[\"SupplyChange_Decrease\"] = 2] = \"SupplyChange_Decrease\";\n})(NEMSupplyChangeType || (exports.NEMSupplyChangeType = NEMSupplyChangeType = {}));\nexports.EnumNEMSupplyChangeType = schema_utils_1.Type.Enum(NEMSupplyChangeType);\nexports.NEMMosaicSupplyChange = schema_utils_1.Type.Object({\n  namespace: schema_utils_1.Type.String(),\n  mosaic: schema_utils_1.Type.String(),\n  type: exports.EnumNEMSupplyChangeType,\n  delta: schema_utils_1.Type.Number()\n}, {\n  $id: 'NEMMosaicSupplyChange'\n});\nvar NEMModificationType;\n(function (NEMModificationType) {\n  NEMModificationType[NEMModificationType[\"CosignatoryModification_Add\"] = 1] = \"CosignatoryModification_Add\";\n  NEMModificationType[NEMModificationType[\"CosignatoryModification_Delete\"] = 2] = \"CosignatoryModification_Delete\";\n})(NEMModificationType || (exports.NEMModificationType = NEMModificationType = {}));\nexports.EnumNEMModificationType = schema_utils_1.Type.Enum(NEMModificationType);\nexports.NEMCosignatoryModification = schema_utils_1.Type.Object({\n  type: exports.EnumNEMModificationType,\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'NEMCosignatoryModification'\n});\nexports.NEMAggregateModification = schema_utils_1.Type.Object({\n  modifications: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.NEMCosignatoryModification)),\n  relative_change: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'NEMAggregateModification'\n});\nvar NEMImportanceTransferMode;\n(function (NEMImportanceTransferMode) {\n  NEMImportanceTransferMode[NEMImportanceTransferMode[\"ImportanceTransfer_Activate\"] = 1] = \"ImportanceTransfer_Activate\";\n  NEMImportanceTransferMode[NEMImportanceTransferMode[\"ImportanceTransfer_Deactivate\"] = 2] = \"ImportanceTransfer_Deactivate\";\n})(NEMImportanceTransferMode || (exports.NEMImportanceTransferMode = NEMImportanceTransferMode = {}));\nexports.EnumNEMImportanceTransferMode = schema_utils_1.Type.Enum(NEMImportanceTransferMode);\nexports.NEMImportanceTransfer = schema_utils_1.Type.Object({\n  mode: exports.EnumNEMImportanceTransferMode,\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'NEMImportanceTransfer'\n});\nexports.NEMSignTx = schema_utils_1.Type.Object({\n  transaction: exports.NEMTransactionCommon,\n  multisig: schema_utils_1.Type.Optional(exports.NEMTransactionCommon),\n  transfer: schema_utils_1.Type.Optional(exports.NEMTransfer),\n  cosigning: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  provision_namespace: schema_utils_1.Type.Optional(exports.NEMProvisionNamespace),\n  mosaic_creation: schema_utils_1.Type.Optional(exports.NEMMosaicCreation),\n  supply_change: schema_utils_1.Type.Optional(exports.NEMMosaicSupplyChange),\n  aggregate_modification: schema_utils_1.Type.Optional(exports.NEMAggregateModification),\n  importance_transfer: schema_utils_1.Type.Optional(exports.NEMImportanceTransfer),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'NEMSignTx'\n});\nexports.NEMSignedTx = schema_utils_1.Type.Object({\n  data: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'NEMSignedTx'\n});\nexports.NEMDecryptMessage = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  network: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  public_key: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  payload: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'NEMDecryptMessage'\n});\nexports.NEMDecryptedMessage = schema_utils_1.Type.Object({\n  payload: schema_utils_1.Type.String()\n}, {\n  $id: 'NEMDecryptedMessage'\n});\nexports.RippleGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'RippleGetAddress'\n});\nexports.RippleAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'RippleAddress'\n});\nexports.RipplePayment = schema_utils_1.Type.Object({\n  amount: schema_utils_1.Type.Uint(),\n  destination: schema_utils_1.Type.String(),\n  destination_tag: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'RipplePayment'\n});\nexports.RippleSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  fee: schema_utils_1.Type.Uint(),\n  flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  sequence: schema_utils_1.Type.Number(),\n  last_ledger_sequence: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  payment: exports.RipplePayment,\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'RippleSignTx'\n});\nexports.RippleSignedTx = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  serialized_tx: schema_utils_1.Type.String()\n}, {\n  $id: 'RippleSignedTx'\n});\nexports.SolanaGetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'SolanaGetPublicKey'\n});\nexports.SolanaPublicKey = schema_utils_1.Type.Object({\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'SolanaPublicKey'\n});\nexports.SolanaGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'SolanaGetAddress'\n});\nexports.SolanaAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'SolanaAddress'\n});\nexports.SolanaTxTokenAccountInfo = schema_utils_1.Type.Object({\n  base_address: schema_utils_1.Type.String(),\n  token_program: schema_utils_1.Type.String(),\n  token_mint: schema_utils_1.Type.String(),\n  token_account: schema_utils_1.Type.String()\n}, {\n  $id: 'SolanaTxTokenAccountInfo'\n});\nexports.SolanaTxAdditionalInfo = schema_utils_1.Type.Object({\n  token_accounts_infos: schema_utils_1.Type.Array(exports.SolanaTxTokenAccountInfo)\n}, {\n  $id: 'SolanaTxAdditionalInfo'\n});\nexports.SolanaSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  serialized_tx: schema_utils_1.Type.String(),\n  additional_info: schema_utils_1.Type.Optional(exports.SolanaTxAdditionalInfo)\n}, {\n  $id: 'SolanaSignTx'\n});\nexports.SolanaTxSignature = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'SolanaTxSignature'\n});\nvar StellarAssetType;\n(function (StellarAssetType) {\n  StellarAssetType[StellarAssetType[\"NATIVE\"] = 0] = \"NATIVE\";\n  StellarAssetType[StellarAssetType[\"ALPHANUM4\"] = 1] = \"ALPHANUM4\";\n  StellarAssetType[StellarAssetType[\"ALPHANUM12\"] = 2] = \"ALPHANUM12\";\n})(StellarAssetType || (exports.StellarAssetType = StellarAssetType = {}));\nexports.EnumStellarAssetType = schema_utils_1.Type.Enum(StellarAssetType);\nexports.StellarAsset = schema_utils_1.Type.Object({\n  type: schema_utils_1.Type.Union([schema_utils_1.Type.Literal(0), schema_utils_1.Type.Literal(1), schema_utils_1.Type.Literal(2), schema_utils_1.Type.Literal('NATIVE'), schema_utils_1.Type.Literal('ALPHANUM4'), schema_utils_1.Type.Literal('ALPHANUM12')]),\n  code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  issuer: schema_utils_1.Type.Optional(schema_utils_1.Type.String())\n}, {\n  $id: 'StellarAsset'\n});\nexports.StellarGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'StellarGetAddress'\n});\nexports.StellarAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'StellarAddress'\n});\nvar StellarMemoType;\n(function (StellarMemoType) {\n  StellarMemoType[StellarMemoType[\"NONE\"] = 0] = \"NONE\";\n  StellarMemoType[StellarMemoType[\"TEXT\"] = 1] = \"TEXT\";\n  StellarMemoType[StellarMemoType[\"ID\"] = 2] = \"ID\";\n  StellarMemoType[StellarMemoType[\"HASH\"] = 3] = \"HASH\";\n  StellarMemoType[StellarMemoType[\"RETURN\"] = 4] = \"RETURN\";\n})(StellarMemoType || (exports.StellarMemoType = StellarMemoType = {}));\nexports.EnumStellarMemoType = schema_utils_1.Type.Enum(StellarMemoType);\nexports.StellarSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  network_passphrase: schema_utils_1.Type.String(),\n  source_account: schema_utils_1.Type.String(),\n  fee: schema_utils_1.Type.Uint(),\n  sequence_number: schema_utils_1.Type.Uint(),\n  timebounds_start: schema_utils_1.Type.Number(),\n  timebounds_end: schema_utils_1.Type.Number(),\n  memo_type: exports.EnumStellarMemoType,\n  memo_text: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  memo_id: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  memo_hash: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.String()])),\n  num_operations: schema_utils_1.Type.Number()\n}, {\n  $id: 'StellarSignTx'\n});\nexports.StellarTxOpRequest = schema_utils_1.Type.Object({}, {\n  $id: 'StellarTxOpRequest'\n});\nexports.StellarPaymentOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  destination_account: schema_utils_1.Type.String(),\n  asset: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint()\n}, {\n  $id: 'StellarPaymentOp'\n});\nexports.StellarCreateAccountOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  new_account: schema_utils_1.Type.String(),\n  starting_balance: schema_utils_1.Type.Uint()\n}, {\n  $id: 'StellarCreateAccountOp'\n});\nexports.StellarPathPaymentStrictReceiveOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  send_asset: exports.StellarAsset,\n  send_max: schema_utils_1.Type.Uint(),\n  destination_account: schema_utils_1.Type.String(),\n  destination_asset: exports.StellarAsset,\n  destination_amount: schema_utils_1.Type.Uint(),\n  paths: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset))\n}, {\n  $id: 'StellarPathPaymentStrictReceiveOp'\n});\nexports.StellarPathPaymentStrictSendOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  send_asset: exports.StellarAsset,\n  send_amount: schema_utils_1.Type.Uint(),\n  destination_account: schema_utils_1.Type.String(),\n  destination_asset: exports.StellarAsset,\n  destination_min: schema_utils_1.Type.Uint(),\n  paths: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(exports.StellarAsset))\n}, {\n  $id: 'StellarPathPaymentStrictSendOp'\n});\nexports.StellarManageSellOfferOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  selling_asset: exports.StellarAsset,\n  buying_asset: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint(),\n  price_n: schema_utils_1.Type.Number(),\n  price_d: schema_utils_1.Type.Number(),\n  offer_id: schema_utils_1.Type.Uint()\n}, {\n  $id: 'StellarManageSellOfferOp'\n});\nexports.StellarManageBuyOfferOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  selling_asset: exports.StellarAsset,\n  buying_asset: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint(),\n  price_n: schema_utils_1.Type.Number(),\n  price_d: schema_utils_1.Type.Number(),\n  offer_id: schema_utils_1.Type.Uint()\n}, {\n  $id: 'StellarManageBuyOfferOp'\n});\nexports.StellarCreatePassiveSellOfferOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  selling_asset: exports.StellarAsset,\n  buying_asset: exports.StellarAsset,\n  amount: schema_utils_1.Type.Uint(),\n  price_n: schema_utils_1.Type.Number(),\n  price_d: schema_utils_1.Type.Number()\n}, {\n  $id: 'StellarCreatePassiveSellOfferOp'\n});\nvar StellarSignerType;\n(function (StellarSignerType) {\n  StellarSignerType[StellarSignerType[\"ACCOUNT\"] = 0] = \"ACCOUNT\";\n  StellarSignerType[StellarSignerType[\"PRE_AUTH\"] = 1] = \"PRE_AUTH\";\n  StellarSignerType[StellarSignerType[\"HASH\"] = 2] = \"HASH\";\n})(StellarSignerType || (exports.StellarSignerType = StellarSignerType = {}));\nexports.EnumStellarSignerType = schema_utils_1.Type.Enum(StellarSignerType);\nexports.StellarSetOptionsOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  inflation_destination_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  clear_flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  set_flags: schema_utils_1.Type.Optional(schema_utils_1.Type.Number()),\n  master_weight: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  low_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  medium_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  high_threshold: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint()),\n  home_domain: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  signer_type: schema_utils_1.Type.Optional(exports.EnumStellarSignerType),\n  signer_key: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.String()])),\n  signer_weight: schema_utils_1.Type.Optional(schema_utils_1.Type.Number())\n}, {\n  $id: 'StellarSetOptionsOp'\n});\nexports.StellarChangeTrustOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  asset: exports.StellarAsset,\n  limit: schema_utils_1.Type.Uint()\n}, {\n  $id: 'StellarChangeTrustOp'\n});\nexports.StellarAllowTrustOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  trusted_account: schema_utils_1.Type.String(),\n  asset_type: exports.EnumStellarAssetType,\n  asset_code: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  is_authorized: schema_utils_1.Type.Boolean()\n}, {\n  $id: 'StellarAllowTrustOp'\n});\nexports.StellarAccountMergeOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  destination_account: schema_utils_1.Type.String()\n}, {\n  $id: 'StellarAccountMergeOp'\n});\nexports.StellarManageDataOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  key: schema_utils_1.Type.String(),\n  value: schema_utils_1.Type.Optional(schema_utils_1.Type.Union([schema_utils_1.Type.Buffer(), schema_utils_1.Type.String()]))\n}, {\n  $id: 'StellarManageDataOp'\n});\nexports.StellarBumpSequenceOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  bump_to: schema_utils_1.Type.Uint()\n}, {\n  $id: 'StellarBumpSequenceOp'\n});\nexports.StellarClaimClaimableBalanceOp = schema_utils_1.Type.Object({\n  source_account: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  balance_id: schema_utils_1.Type.String()\n}, {\n  $id: 'StellarClaimClaimableBalanceOp'\n});\nexports.StellarSignedTx = schema_utils_1.Type.Object({\n  public_key: schema_utils_1.Type.String(),\n  signature: schema_utils_1.Type.String()\n}, {\n  $id: 'StellarSignedTx'\n});\nexports.TezosGetAddress = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'TezosGetAddress'\n});\nexports.TezosAddress = schema_utils_1.Type.Object({\n  address: schema_utils_1.Type.String()\n}, {\n  $id: 'TezosAddress'\n});\nexports.TezosGetPublicKey = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  show_display: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'TezosGetPublicKey'\n});\nexports.TezosPublicKey = schema_utils_1.Type.Object({\n  public_key: schema_utils_1.Type.String()\n}, {\n  $id: 'TezosPublicKey'\n});\nvar TezosContractType;\n(function (TezosContractType) {\n  TezosContractType[TezosContractType[\"Implicit\"] = 0] = \"Implicit\";\n  TezosContractType[TezosContractType[\"Originated\"] = 1] = \"Originated\";\n})(TezosContractType || (exports.TezosContractType = TezosContractType = {}));\nexports.EnumTezosContractType = schema_utils_1.Type.Enum(TezosContractType);\nexports.TezosContractID = schema_utils_1.Type.Object({\n  tag: schema_utils_1.Type.Number(),\n  hash: schema_utils_1.Type.Uint8Array()\n}, {\n  $id: 'TezosContractID'\n});\nexports.TezosRevealOp = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.Uint8Array(),\n  fee: schema_utils_1.Type.Uint(),\n  counter: schema_utils_1.Type.Number(),\n  gas_limit: schema_utils_1.Type.Number(),\n  storage_limit: schema_utils_1.Type.Number(),\n  public_key: schema_utils_1.Type.Uint8Array()\n}, {\n  $id: 'TezosRevealOp'\n});\nexports.TezosManagerTransfer = schema_utils_1.Type.Object({\n  destination: exports.TezosContractID,\n  amount: schema_utils_1.Type.Uint()\n}, {\n  $id: 'TezosManagerTransfer'\n});\nexports.TezosParametersManager = schema_utils_1.Type.Object({\n  set_delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint8Array()),\n  cancel_delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  transfer: schema_utils_1.Type.Optional(exports.TezosManagerTransfer)\n}, {\n  $id: 'TezosParametersManager'\n});\nexports.TezosTransactionOp = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.Uint8Array(),\n  fee: schema_utils_1.Type.Uint(),\n  counter: schema_utils_1.Type.Number(),\n  gas_limit: schema_utils_1.Type.Number(),\n  storage_limit: schema_utils_1.Type.Number(),\n  amount: schema_utils_1.Type.Uint(),\n  destination: exports.TezosContractID,\n  parameters: schema_utils_1.Type.Optional(schema_utils_1.Type.Array(schema_utils_1.Type.Number())),\n  parameters_manager: schema_utils_1.Type.Optional(exports.TezosParametersManager)\n}, {\n  $id: 'TezosTransactionOp'\n});\nexports.TezosOriginationOp = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.Uint8Array(),\n  fee: schema_utils_1.Type.Uint(),\n  counter: schema_utils_1.Type.Number(),\n  gas_limit: schema_utils_1.Type.Number(),\n  storage_limit: schema_utils_1.Type.Number(),\n  manager_pubkey: schema_utils_1.Type.Optional(schema_utils_1.Type.String()),\n  balance: schema_utils_1.Type.Number(),\n  spendable: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  delegatable: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean()),\n  delegate: schema_utils_1.Type.Optional(schema_utils_1.Type.Uint8Array()),\n  script: schema_utils_1.Type.Union([schema_utils_1.Type.String(), schema_utils_1.Type.Array(schema_utils_1.Type.Number())])\n}, {\n  $id: 'TezosOriginationOp'\n});\nexports.TezosDelegationOp = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.Uint8Array(),\n  fee: schema_utils_1.Type.Uint(),\n  counter: schema_utils_1.Type.Number(),\n  gas_limit: schema_utils_1.Type.Number(),\n  storage_limit: schema_utils_1.Type.Number(),\n  delegate: schema_utils_1.Type.Uint8Array()\n}, {\n  $id: 'TezosDelegationOp'\n});\nexports.TezosProposalOp = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.String(),\n  period: schema_utils_1.Type.Number(),\n  proposals: schema_utils_1.Type.Array(schema_utils_1.Type.String())\n}, {\n  $id: 'TezosProposalOp'\n});\nvar TezosBallotType;\n(function (TezosBallotType) {\n  TezosBallotType[TezosBallotType[\"Yay\"] = 0] = \"Yay\";\n  TezosBallotType[TezosBallotType[\"Nay\"] = 1] = \"Nay\";\n  TezosBallotType[TezosBallotType[\"Pass\"] = 2] = \"Pass\";\n})(TezosBallotType || (exports.TezosBallotType = TezosBallotType = {}));\nexports.EnumTezosBallotType = schema_utils_1.Type.Enum(TezosBallotType);\nexports.TezosBallotOp = schema_utils_1.Type.Object({\n  source: schema_utils_1.Type.String(),\n  period: schema_utils_1.Type.Number(),\n  proposal: schema_utils_1.Type.String(),\n  ballot: exports.EnumTezosBallotType\n}, {\n  $id: 'TezosBallotOp'\n});\nexports.TezosSignTx = schema_utils_1.Type.Object({\n  address_n: schema_utils_1.Type.Array(schema_utils_1.Type.Number()),\n  branch: schema_utils_1.Type.Uint8Array(),\n  reveal: schema_utils_1.Type.Optional(exports.TezosRevealOp),\n  transaction: schema_utils_1.Type.Optional(exports.TezosTransactionOp),\n  origination: schema_utils_1.Type.Optional(exports.TezosOriginationOp),\n  delegation: schema_utils_1.Type.Optional(exports.TezosDelegationOp),\n  proposal: schema_utils_1.Type.Optional(exports.TezosProposalOp),\n  ballot: schema_utils_1.Type.Optional(exports.TezosBallotOp),\n  chunkify: schema_utils_1.Type.Optional(schema_utils_1.Type.Boolean())\n}, {\n  $id: 'TezosSignTx'\n});\nexports.TezosSignedTx = schema_utils_1.Type.Object({\n  signature: schema_utils_1.Type.String(),\n  sig_op_contents: schema_utils_1.Type.String(),\n  operation_hash: schema_utils_1.Type.String()\n}, {\n  $id: 'TezosSignedTx'\n});\nexports.MessageType = schema_utils_1.Type.Object({\n  BinanceGetAddress: exports.BinanceGetAddress,\n  BinanceAddress: exports.BinanceAddress,\n  BinanceGetPublicKey: exports.BinanceGetPublicKey,\n  BinancePublicKey: exports.BinancePublicKey,\n  BinanceSignTx: exports.BinanceSignTx,\n  BinanceTxRequest: exports.BinanceTxRequest,\n  BinanceCoin: exports.BinanceCoin,\n  BinanceInputOutput: exports.BinanceInputOutput,\n  BinanceTransferMsg: exports.BinanceTransferMsg,\n  BinanceOrderMsg: exports.BinanceOrderMsg,\n  BinanceCancelMsg: exports.BinanceCancelMsg,\n  BinanceSignedTx: exports.BinanceSignedTx,\n  HDNodeType: exports.HDNodeType,\n  HDNodePathType: exports.HDNodePathType,\n  MultisigRedeemScriptType: exports.MultisigRedeemScriptType,\n  GetPublicKey: exports.GetPublicKey,\n  PublicKey: exports.PublicKey,\n  GetAddress: exports.GetAddress,\n  Address: exports.Address,\n  GetOwnershipId: exports.GetOwnershipId,\n  OwnershipId: exports.OwnershipId,\n  SignMessage: exports.SignMessage,\n  MessageSignature: exports.MessageSignature,\n  VerifyMessage: exports.VerifyMessage,\n  CoinJoinRequest: exports.CoinJoinRequest,\n  SignTx: exports.SignTx,\n  TxRequestDetailsType: exports.TxRequestDetailsType,\n  TxRequestSerializedType: exports.TxRequestSerializedType,\n  TxRequest: exports.TxRequest,\n  TxInputType: exports.TxInputType,\n  TxOutputBinType: exports.TxOutputBinType,\n  TxOutputType: exports.TxOutputType,\n  PrevTx: exports.PrevTx,\n  PrevInput: exports.PrevInput,\n  PrevOutput: exports.PrevOutput,\n  TextMemo: exports.TextMemo,\n  RefundMemo: exports.RefundMemo,\n  CoinPurchaseMemo: exports.CoinPurchaseMemo,\n  PaymentRequestMemo: exports.PaymentRequestMemo,\n  TxAckPaymentRequest: exports.TxAckPaymentRequest,\n  TxAck: exports.TxAck,\n  TxAckInputWrapper: exports.TxAckInputWrapper,\n  TxAckInput: exports.TxAckInput,\n  TxAckOutputWrapper: exports.TxAckOutputWrapper,\n  TxAckOutput: exports.TxAckOutput,\n  TxAckPrevMeta: exports.TxAckPrevMeta,\n  TxAckPrevInputWrapper: exports.TxAckPrevInputWrapper,\n  TxAckPrevInput: exports.TxAckPrevInput,\n  TxAckPrevOutputWrapper: exports.TxAckPrevOutputWrapper,\n  TxAckPrevOutput: exports.TxAckPrevOutput,\n  TxAckPrevExtraDataWrapper: exports.TxAckPrevExtraDataWrapper,\n  TxAckPrevExtraData: exports.TxAckPrevExtraData,\n  GetOwnershipProof: exports.GetOwnershipProof,\n  OwnershipProof: exports.OwnershipProof,\n  AuthorizeCoinJoin: exports.AuthorizeCoinJoin,\n  FirmwareErase: exports.FirmwareErase,\n  FirmwareRequest: exports.FirmwareRequest,\n  FirmwareUpload: exports.FirmwareUpload,\n  ProdTestT1: exports.ProdTestT1,\n  CardanoBlockchainPointerType: exports.CardanoBlockchainPointerType,\n  CardanoNativeScript: exports.CardanoNativeScript,\n  CardanoGetNativeScriptHash: exports.CardanoGetNativeScriptHash,\n  CardanoNativeScriptHash: exports.CardanoNativeScriptHash,\n  CardanoAddressParametersType: exports.CardanoAddressParametersType,\n  CardanoGetAddress: exports.CardanoGetAddress,\n  CardanoAddress: exports.CardanoAddress,\n  CardanoGetPublicKey: exports.CardanoGetPublicKey,\n  CardanoPublicKey: exports.CardanoPublicKey,\n  CardanoSignTxInit: exports.CardanoSignTxInit,\n  CardanoTxInput: exports.CardanoTxInput,\n  CardanoTxOutput: exports.CardanoTxOutput,\n  CardanoAssetGroup: exports.CardanoAssetGroup,\n  CardanoToken: exports.CardanoToken,\n  CardanoTxInlineDatumChunk: exports.CardanoTxInlineDatumChunk,\n  CardanoTxReferenceScriptChunk: exports.CardanoTxReferenceScriptChunk,\n  CardanoPoolOwner: exports.CardanoPoolOwner,\n  CardanoPoolRelayParameters: exports.CardanoPoolRelayParameters,\n  CardanoPoolMetadataType: exports.CardanoPoolMetadataType,\n  CardanoPoolParametersType: exports.CardanoPoolParametersType,\n  CardanoDRep: exports.CardanoDRep,\n  CardanoTxCertificate: exports.CardanoTxCertificate,\n  CardanoTxWithdrawal: exports.CardanoTxWithdrawal,\n  CardanoCVoteRegistrationDelegation: exports.CardanoCVoteRegistrationDelegation,\n  CardanoCVoteRegistrationParametersType: exports.CardanoCVoteRegistrationParametersType,\n  CardanoTxAuxiliaryData: exports.CardanoTxAuxiliaryData,\n  CardanoTxMint: exports.CardanoTxMint,\n  CardanoTxCollateralInput: exports.CardanoTxCollateralInput,\n  CardanoTxRequiredSigner: exports.CardanoTxRequiredSigner,\n  CardanoTxReferenceInput: exports.CardanoTxReferenceInput,\n  CardanoTxItemAck: exports.CardanoTxItemAck,\n  CardanoTxAuxiliaryDataSupplement: exports.CardanoTxAuxiliaryDataSupplement,\n  CardanoTxWitnessRequest: exports.CardanoTxWitnessRequest,\n  CardanoTxWitnessResponse: exports.CardanoTxWitnessResponse,\n  CardanoTxHostAck: exports.CardanoTxHostAck,\n  CardanoTxBodyHash: exports.CardanoTxBodyHash,\n  CardanoSignTxFinished: exports.CardanoSignTxFinished,\n  Success: exports.Success,\n  Failure: exports.Failure,\n  ButtonRequest: exports.ButtonRequest,\n  ButtonAck: exports.ButtonAck,\n  PinMatrixRequest: exports.PinMatrixRequest,\n  PinMatrixAck: exports.PinMatrixAck,\n  PassphraseRequest: exports.PassphraseRequest,\n  PassphraseAck: exports.PassphraseAck,\n  Deprecated_PassphraseStateRequest: exports.Deprecated_PassphraseStateRequest,\n  Deprecated_PassphraseStateAck: exports.Deprecated_PassphraseStateAck,\n  CipherKeyValue: exports.CipherKeyValue,\n  CipheredKeyValue: exports.CipheredKeyValue,\n  IdentityType: exports.IdentityType,\n  SignIdentity: exports.SignIdentity,\n  SignedIdentity: exports.SignedIdentity,\n  GetECDHSessionKey: exports.GetECDHSessionKey,\n  ECDHSessionKey: exports.ECDHSessionKey,\n  DebugLinkResetDebugEvents: exports.DebugLinkResetDebugEvents,\n  DebugLinkOptigaSetSecMax: exports.DebugLinkOptigaSetSecMax,\n  EosGetPublicKey: exports.EosGetPublicKey,\n  EosPublicKey: exports.EosPublicKey,\n  EosTxHeader: exports.EosTxHeader,\n  EosSignTx: exports.EosSignTx,\n  EosTxActionRequest: exports.EosTxActionRequest,\n  EosAsset: exports.EosAsset,\n  EosPermissionLevel: exports.EosPermissionLevel,\n  EosAuthorizationKey: exports.EosAuthorizationKey,\n  EosAuthorizationAccount: exports.EosAuthorizationAccount,\n  EosAuthorizationWait: exports.EosAuthorizationWait,\n  EosAuthorization: exports.EosAuthorization,\n  EosActionCommon: exports.EosActionCommon,\n  EosActionTransfer: exports.EosActionTransfer,\n  EosActionDelegate: exports.EosActionDelegate,\n  EosActionUndelegate: exports.EosActionUndelegate,\n  EosActionRefund: exports.EosActionRefund,\n  EosActionBuyRam: exports.EosActionBuyRam,\n  EosActionBuyRamBytes: exports.EosActionBuyRamBytes,\n  EosActionSellRam: exports.EosActionSellRam,\n  EosActionVoteProducer: exports.EosActionVoteProducer,\n  EosActionUpdateAuth: exports.EosActionUpdateAuth,\n  EosActionDeleteAuth: exports.EosActionDeleteAuth,\n  EosActionLinkAuth: exports.EosActionLinkAuth,\n  EosActionUnlinkAuth: exports.EosActionUnlinkAuth,\n  EosActionNewAccount: exports.EosActionNewAccount,\n  EosActionUnknown: exports.EosActionUnknown,\n  EosTxActionAck: exports.EosTxActionAck,\n  EosSignedTx: exports.EosSignedTx,\n  EthereumNetworkInfo: exports.EthereumNetworkInfo,\n  EthereumTokenInfo: exports.EthereumTokenInfo,\n  EthereumDefinitions: exports.EthereumDefinitions,\n  EthereumSignTypedData: exports.EthereumSignTypedData,\n  EthereumTypedDataStructRequest: exports.EthereumTypedDataStructRequest,\n  EthereumFieldType: exports.EthereumFieldType,\n  EthereumStructMember: exports.EthereumStructMember,\n  EthereumTypedDataStructAck: exports.EthereumTypedDataStructAck,\n  EthereumTypedDataValueRequest: exports.EthereumTypedDataValueRequest,\n  EthereumTypedDataValueAck: exports.EthereumTypedDataValueAck,\n  EthereumGetPublicKey: exports.EthereumGetPublicKey,\n  EthereumPublicKey: exports.EthereumPublicKey,\n  EthereumGetAddress: exports.EthereumGetAddress,\n  EthereumAddress: exports.EthereumAddress,\n  EthereumSignTx: exports.EthereumSignTx,\n  EthereumAccessList: exports.EthereumAccessList,\n  EthereumSignTxEIP1559: exports.EthereumSignTxEIP1559,\n  EthereumTxRequest: exports.EthereumTxRequest,\n  EthereumTxAck: exports.EthereumTxAck,\n  EthereumSignMessage: exports.EthereumSignMessage,\n  EthereumMessageSignature: exports.EthereumMessageSignature,\n  EthereumVerifyMessage: exports.EthereumVerifyMessage,\n  EthereumSignTypedHash: exports.EthereumSignTypedHash,\n  EthereumTypedDataSignature: exports.EthereumTypedDataSignature,\n  Initialize: exports.Initialize,\n  GetFeatures: exports.GetFeatures,\n  RecoveryDevice: exports.RecoveryDevice,\n  Features: exports.Features,\n  LockDevice: exports.LockDevice,\n  SetBusy: exports.SetBusy,\n  EndSession: exports.EndSession,\n  ApplySettings: exports.ApplySettings,\n  ChangeLanguage: exports.ChangeLanguage,\n  TranslationDataRequest: exports.TranslationDataRequest,\n  TranslationDataAck: exports.TranslationDataAck,\n  ApplyFlags: exports.ApplyFlags,\n  ChangePin: exports.ChangePin,\n  ChangeWipeCode: exports.ChangeWipeCode,\n  SdProtect: exports.SdProtect,\n  Ping: exports.Ping,\n  Cancel: exports.Cancel,\n  GetEntropy: exports.GetEntropy,\n  Entropy: exports.Entropy,\n  GetFirmwareHash: exports.GetFirmwareHash,\n  FirmwareHash: exports.FirmwareHash,\n  AuthenticateDevice: exports.AuthenticateDevice,\n  AuthenticityProof: exports.AuthenticityProof,\n  WipeDevice: exports.WipeDevice,\n  LoadDevice: exports.LoadDevice,\n  ResetDevice: exports.ResetDevice,\n  Slip39Group: exports.Slip39Group,\n  BackupDevice: exports.BackupDevice,\n  EntropyRequest: exports.EntropyRequest,\n  EntropyAck: exports.EntropyAck,\n  EntropyCheckReady: exports.EntropyCheckReady,\n  EntropyCheckContinue: exports.EntropyCheckContinue,\n  WordRequest: exports.WordRequest,\n  WordAck: exports.WordAck,\n  SetU2FCounter: exports.SetU2FCounter,\n  GetNextU2FCounter: exports.GetNextU2FCounter,\n  NextU2FCounter: exports.NextU2FCounter,\n  DoPreauthorized: exports.DoPreauthorized,\n  PreauthorizedRequest: exports.PreauthorizedRequest,\n  CancelAuthorization: exports.CancelAuthorization,\n  RebootToBootloader: exports.RebootToBootloader,\n  GetNonce: exports.GetNonce,\n  Nonce: exports.Nonce,\n  UnlockPath: exports.UnlockPath,\n  UnlockedPathRequest: exports.UnlockedPathRequest,\n  ShowDeviceTutorial: exports.ShowDeviceTutorial,\n  UnlockBootloader: exports.UnlockBootloader,\n  SetBrightness: exports.SetBrightness,\n  NEMGetAddress: exports.NEMGetAddress,\n  NEMAddress: exports.NEMAddress,\n  NEMTransactionCommon: exports.NEMTransactionCommon,\n  NEMMosaic: exports.NEMMosaic,\n  NEMTransfer: exports.NEMTransfer,\n  NEMProvisionNamespace: exports.NEMProvisionNamespace,\n  NEMMosaicDefinition: exports.NEMMosaicDefinition,\n  NEMMosaicCreation: exports.NEMMosaicCreation,\n  NEMMosaicSupplyChange: exports.NEMMosaicSupplyChange,\n  NEMCosignatoryModification: exports.NEMCosignatoryModification,\n  NEMAggregateModification: exports.NEMAggregateModification,\n  NEMImportanceTransfer: exports.NEMImportanceTransfer,\n  NEMSignTx: exports.NEMSignTx,\n  NEMSignedTx: exports.NEMSignedTx,\n  NEMDecryptMessage: exports.NEMDecryptMessage,\n  NEMDecryptedMessage: exports.NEMDecryptedMessage,\n  RippleGetAddress: exports.RippleGetAddress,\n  RippleAddress: exports.RippleAddress,\n  RipplePayment: exports.RipplePayment,\n  RippleSignTx: exports.RippleSignTx,\n  RippleSignedTx: exports.RippleSignedTx,\n  SolanaGetPublicKey: exports.SolanaGetPublicKey,\n  SolanaPublicKey: exports.SolanaPublicKey,\n  SolanaGetAddress: exports.SolanaGetAddress,\n  SolanaAddress: exports.SolanaAddress,\n  SolanaTxTokenAccountInfo: exports.SolanaTxTokenAccountInfo,\n  SolanaTxAdditionalInfo: exports.SolanaTxAdditionalInfo,\n  SolanaSignTx: exports.SolanaSignTx,\n  SolanaTxSignature: exports.SolanaTxSignature,\n  StellarAsset: exports.StellarAsset,\n  StellarGetAddress: exports.StellarGetAddress,\n  StellarAddress: exports.StellarAddress,\n  StellarSignTx: exports.StellarSignTx,\n  StellarTxOpRequest: exports.StellarTxOpRequest,\n  StellarPaymentOp: exports.StellarPaymentOp,\n  StellarCreateAccountOp: exports.StellarCreateAccountOp,\n  StellarPathPaymentStrictReceiveOp: exports.StellarPathPaymentStrictReceiveOp,\n  StellarPathPaymentStrictSendOp: exports.StellarPathPaymentStrictSendOp,\n  StellarManageSellOfferOp: exports.StellarManageSellOfferOp,\n  StellarManageBuyOfferOp: exports.StellarManageBuyOfferOp,\n  StellarCreatePassiveSellOfferOp: exports.StellarCreatePassiveSellOfferOp,\n  StellarSetOptionsOp: exports.StellarSetOptionsOp,\n  StellarChangeTrustOp: exports.StellarChangeTrustOp,\n  StellarAllowTrustOp: exports.StellarAllowTrustOp,\n  StellarAccountMergeOp: exports.StellarAccountMergeOp,\n  StellarManageDataOp: exports.StellarManageDataOp,\n  StellarBumpSequenceOp: exports.StellarBumpSequenceOp,\n  StellarClaimClaimableBalanceOp: exports.StellarClaimClaimableBalanceOp,\n  StellarSignedTx: exports.StellarSignedTx,\n  TezosGetAddress: exports.TezosGetAddress,\n  TezosAddress: exports.TezosAddress,\n  TezosGetPublicKey: exports.TezosGetPublicKey,\n  TezosPublicKey: exports.TezosPublicKey,\n  TezosContractID: exports.TezosContractID,\n  TezosRevealOp: exports.TezosRevealOp,\n  TezosManagerTransfer: exports.TezosManagerTransfer,\n  TezosParametersManager: exports.TezosParametersManager,\n  TezosTransactionOp: exports.TezosTransactionOp,\n  TezosOriginationOp: exports.TezosOriginationOp,\n  TezosDelegationOp: exports.TezosDelegationOp,\n  TezosProposalOp: exports.TezosProposalOp,\n  TezosBallotOp: exports.TezosBallotOp,\n  TezosSignTx: exports.TezosSignTx,\n  TezosSignedTx: exports.TezosSignedTx\n}, {\n  $id: 'MessageType'\n});\n//# sourceMappingURL=messages-schema.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}