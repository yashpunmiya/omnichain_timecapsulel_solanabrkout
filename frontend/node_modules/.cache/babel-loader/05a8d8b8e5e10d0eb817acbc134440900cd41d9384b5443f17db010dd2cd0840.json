{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferXOR = exports.setDifference = exports.arrayContains = exports.arraysEqual = exports.hasPrefix = exports.isURType = exports.intToBytes = exports.toUint32 = exports.getCRCHex = exports.getCRC = exports.split = exports.partition = exports.sha256Hash = void 0;\nconst sha_js_1 = __importDefault(require(\"sha.js\"));\nconst crc_1 = require(\"crc\");\nconst sha256Hash = data => sha_js_1.default('sha256').update(data).digest();\nexports.sha256Hash = sha256Hash;\nconst partition = (s, n) => s.match(new RegExp('.{1,' + n + '}', 'g')) || [s];\nexports.partition = partition;\nconst split = (s, length) => [s.slice(0, -length), s.slice(-length)];\nexports.split = split;\nconst getCRC = message => crc_1.crc32(message);\nexports.getCRC = getCRC;\nconst getCRCHex = message => crc_1.crc32(message).toString(16).padStart(8, '0');\nexports.getCRCHex = getCRCHex;\nconst toUint32 = number => number >>> 0;\nexports.toUint32 = toUint32;\nconst intToBytes = num => {\n  const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\n  const view = new DataView(arr);\n  view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false\n  return Buffer.from(arr);\n};\nexports.intToBytes = intToBytes;\nconst isURType = type => {\n  return type.split('').every((_, index) => {\n    let c = type.charCodeAt(index);\n    if ('a'.charCodeAt(0) <= c && c <= 'z'.charCodeAt(0)) return true;\n    if ('0'.charCodeAt(0) <= c && c <= '9'.charCodeAt(0)) return true;\n    if (c === '-'.charCodeAt(0)) return true;\n    return false;\n  });\n};\nexports.isURType = isURType;\nconst hasPrefix = (s, prefix) => s.indexOf(prefix) === 0;\nexports.hasPrefix = hasPrefix;\nconst arraysEqual = (ar1, ar2) => {\n  if (ar1.length !== ar2.length) {\n    return false;\n  }\n  return ar1.every(el => ar2.includes(el));\n};\nexports.arraysEqual = arraysEqual;\n/**\n * Checks if ar1 contains all elements of ar2\n * @param ar1 the outer array\n * @param ar2 the array to be contained in ar1\n */\nconst arrayContains = (ar1, ar2) => {\n  return ar2.every(v => ar1.includes(v));\n};\nexports.arrayContains = arrayContains;\n/**\n * Returns the difference array of  `ar1` - `ar2`\n */\nconst setDifference = (ar1, ar2) => {\n  return ar1.filter(x => ar2.indexOf(x) < 0);\n};\nexports.setDifference = setDifference;\nconst bufferXOR = (a, b) => {\n  const length = Math.max(a.length, b.length);\n  const buffer = Buffer.allocUnsafe(length);\n  for (let i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i];\n  }\n  return buffer;\n};\nexports.bufferXOR = bufferXOR;","map":{"version":3,"names":["sha_js_1","__importDefault","require","crc_1","sha256Hash","data","default","update","digest","exports","partition","s","n","match","RegExp","split","length","slice","getCRC","message","crc32","getCRCHex","toString","padStart","toUint32","number","intToBytes","num","arr","ArrayBuffer","view","DataView","setUint32","Buffer","from","isURType","type","every","_","index","c","charCodeAt","hasPrefix","prefix","indexOf","arraysEqual","ar1","ar2","el","includes","arrayContains","v","setDifference","filter","x","bufferXOR","a","b","Math","max","buffer","allocUnsafe","i"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ngraveio\\bc-ur\\src\\utils.ts"],"sourcesContent":["import shajs from 'sha.js';\nimport { crc32 } from 'crc';\n\nexport const sha256Hash = (data: Buffer | string) => shajs('sha256').update(data).digest();\n\nexport const partition = (s: string, n: number): string[] => s.match(new RegExp('.{1,' + n + '}', 'g')) || [s];\n\nexport const split = (s: Buffer, length: number): [Buffer, Buffer] => [s.slice(0, -length), s.slice(-length)]\n\nexport const getCRC = (message: Buffer): number => crc32(message);\n\nexport const getCRCHex = (message: Buffer): string => crc32(message).toString(16).padStart(8, '0');\n\nexport const toUint32 = (number: number): number => number >>> 0;\n\nexport const intToBytes = (num: number): Buffer => {\n  const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\n  const view = new DataView(arr);\n\n  view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false\n\n  return Buffer.from(arr);\n}\n\nexport const isURType = (type: string): boolean => {\n  return type.split('').every((_, index) => {\n    let c = type.charCodeAt(index);\n\n    if ('a'.charCodeAt(0) <= c && c <= 'z'.charCodeAt(0)) return true;\n    if ('0'.charCodeAt(0) <= c && c <= '9'.charCodeAt(0)) return true;\n    if (c === '-'.charCodeAt(0)) return true;\n    return false;\n  })\n}\n\nexport const hasPrefix = (s: string, prefix: string): boolean => s.indexOf(prefix) === 0;\n\nexport const arraysEqual = (ar1: any[], ar2: any[]): boolean => {\n  if (ar1.length !== ar2.length) {\n    return false;\n  }\n\n  return ar1.every(el => ar2.includes(el))\n}\n\n/**\n * Checks if ar1 contains all elements of ar2\n * @param ar1 the outer array\n * @param ar2 the array to be contained in ar1\n */\nexport const arrayContains = (ar1: any[], ar2: any[]): boolean => {\n  return ar2.every(v => ar1.includes(v))\n}\n\n/**\n * Returns the difference array of  `ar1` - `ar2`\n */\nexport const setDifference = (ar1: any[], ar2: any[]): any[] => {\n  return ar1.filter(x => ar2.indexOf(x) < 0)\n}\n\nexport const bufferXOR = (a: Buffer, b: Buffer): Buffer => {\n  const length = Math.max(a.length, b.length);\n  const buffer = Buffer.allocUnsafe(length);\n\n  for (let i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i];\n  }\n\n  return buffer;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}