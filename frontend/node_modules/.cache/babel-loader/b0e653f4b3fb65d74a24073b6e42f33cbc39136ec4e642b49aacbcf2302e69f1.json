{"ast":null,"code":"import { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js';\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus(client, parameters) {\n  const {\n    atomic = false,\n    chainId,\n    receipts,\n    version = '2.0.0',\n    ...response\n  } = await client.request({\n    method: 'wallet_getCallsStatus',\n    params: [parameters.id]\n  });\n  const [status, statusCode] = (() => {\n    const statusCode = response.status;\n    if (statusCode >= 100 && statusCode < 200) return ['pending', statusCode];\n    if (statusCode >= 200 && statusCode < 300) return ['success', statusCode];\n    if (statusCode >= 300 && statusCode < 700) return ['failure', statusCode];\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'CONFIRMED') return ['success', 200];\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'PENDING') return ['pending', 100];\n    return [undefined, statusCode];\n  })();\n  return {\n    ...response,\n    atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: chainId ? hexToNumber(chainId) : undefined,\n    receipts: receipts?.map(receipt => ({\n      ...receipt,\n      blockNumber: hexToBigInt(receipt.blockNumber),\n      gasUsed: hexToBigInt(receipt.gasUsed),\n      status: receiptStatuses[receipt.status]\n    })) ?? [],\n    statusCode,\n    status,\n    version\n  };\n}","map":{"version":3,"names":["hexToBigInt","hexToNumber","receiptStatuses","getCallsStatus","client","parameters","atomic","chainId","receipts","version","response","request","method","params","id","status","statusCode","undefined","map","receipt","blockNumber","gasUsed"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\actions\\wallet\\getCallsStatus.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletGetCallsStatusReturnType } from '../../types/eip1193.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js'\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js'\n\nexport type GetCallsStatusParameters = { id: string }\n\nexport type GetCallsStatusReturnType = Prettify<\n  Omit<\n    WalletGetCallsStatusReturnType<\n      ExtractCapabilities<'getCallsStatus', 'ReturnType'>,\n      number,\n      bigint,\n      'success' | 'reverted'\n    >,\n    'status'\n  > & {\n    statusCode: number\n    status: 'pending' | 'success' | 'failure' | undefined\n  }\n>\n\nexport type GetCallsStatusErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: GetCallsStatusParameters,\n): Promise<GetCallsStatusReturnType> {\n  const {\n    atomic = false,\n    chainId,\n    receipts,\n    version = '2.0.0',\n    ...response\n  } = await client.request({\n    method: 'wallet_getCallsStatus',\n    params: [parameters.id],\n  })\n  const [status, statusCode] = (() => {\n    const statusCode = response.status\n    if (statusCode >= 100 && statusCode < 200)\n      return ['pending', statusCode] as const\n    if (statusCode >= 200 && statusCode < 300)\n      return ['success', statusCode] as const\n    if (statusCode >= 300 && statusCode < 700)\n      return ['failure', statusCode] as const\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'CONFIRMED') return ['success', 200] as const\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'PENDING') return ['pending', 100] as const\n    return [undefined, statusCode]\n  })()\n  return {\n    ...response,\n    atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: chainId ? hexToNumber(chainId) : undefined,\n    receipts:\n      receipts?.map((receipt) => ({\n        ...receipt,\n        blockNumber: hexToBigInt(receipt.blockNumber),\n        gasUsed: hexToBigInt(receipt.gasUsed),\n        status: receiptStatuses[receipt.status as '0x0' | '0x1'],\n      })) ?? [],\n    statusCode,\n    status,\n    version,\n  }\n}\n"],"mappings":"AASA,SAASA,WAAW,EAAEC,WAAW,QAAQ,iCAAiC;AAC1E,SAASC,eAAe,QAAQ,8CAA8C;AAqB9E;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,eAAeC,cAAcA,CAIlCC,MAAyC,EACzCC,UAAoC;EAEpC,MAAM;IACJC,MAAM,GAAG,KAAK;IACdC,OAAO;IACPC,QAAQ;IACRC,OAAO,GAAG,OAAO;IACjB,GAAGC;EAAQ,CACZ,GAAG,MAAMN,MAAM,CAACO,OAAO,CAAC;IACvBC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE,CAACR,UAAU,CAACS,EAAE;GACvB,CAAC;EACF,MAAM,CAACC,MAAM,EAAEC,UAAU,CAAC,GAAG,CAAC,MAAK;IACjC,MAAMA,UAAU,GAAGN,QAAQ,CAACK,MAAM;IAClC,IAAIC,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EACvC,OAAO,CAAC,SAAS,EAAEA,UAAU,CAAU;IACzC,IAAIA,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EACvC,OAAO,CAAC,SAAS,EAAEA,UAAU,CAAU;IACzC,IAAIA,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EACvC,OAAO,CAAC,SAAS,EAAEA,UAAU,CAAU;IACzC;IACA,IAAIA,UAAU,KAAK,WAAW,EAAE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAU;IAChE;IACA,IAAIA,UAAU,KAAK,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAU;IAC9D,OAAO,CAACC,SAAS,EAAED,UAAU,CAAC;EAChC,CAAC,EAAC,CAAE;EACJ,OAAO;IACL,GAAGN,QAAQ;IACXJ,MAAM;IACN;IACAC,OAAO,EAAEA,OAAO,GAAGN,WAAW,CAACM,OAAO,CAAC,GAAGU,SAAS;IACnDT,QAAQ,EACNA,QAAQ,EAAEU,GAAG,CAAEC,OAAO,KAAM;MAC1B,GAAGA,OAAO;MACVC,WAAW,EAAEpB,WAAW,CAACmB,OAAO,CAACC,WAAW,CAAC;MAC7CC,OAAO,EAAErB,WAAW,CAACmB,OAAO,CAACE,OAAO,CAAC;MACrCN,MAAM,EAAEb,eAAe,CAACiB,OAAO,CAACJ,MAAuB;KACxD,CAAC,CAAC,IAAI,EAAE;IACXC,UAAU;IACVD,MAAM;IACNN;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}