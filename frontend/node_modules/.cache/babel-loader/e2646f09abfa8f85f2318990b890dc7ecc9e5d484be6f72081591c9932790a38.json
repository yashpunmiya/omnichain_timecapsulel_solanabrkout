{"ast":null,"code":"import { proxy, ref } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport '@reown/appkit-common';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { SIWXUtil } from '../utils/SIWXUtil.js';\nimport { StorageUtil } from '../utils/StorageUtil.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { ModalController } from './ModalController.js';\nimport { RouterController } from './RouterController.js';\nimport { TransactionsController } from './TransactionsController.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  wcError: false,\n  buffering: false,\n  status: 'disconnected'\n});\n// eslint-disable-next-line init-declarations\nlet wcConnectionPromise;\n// -- Controller ---------------------------------------- //\nexport const ConnectionController = {\n  state,\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  _getClient() {\n    return state._client;\n  },\n  setClient(client) {\n    state._client = ref(client);\n  },\n  async connectWalletConnect() {\n    if (CoreHelperUtil.isTelegram() || CoreHelperUtil.isSafari() && CoreHelperUtil.isIos()) {\n      if (wcConnectionPromise) {\n        await wcConnectionPromise;\n        wcConnectionPromise = undefined;\n        return;\n      }\n      if (!CoreHelperUtil.isPairingExpired(state?.wcPairingExpiry)) {\n        const link = state.wcUri;\n        state.wcUri = link;\n        return;\n      }\n      wcConnectionPromise = this._getClient()?.connectWalletConnect?.().catch(() => undefined);\n      this.state.status = 'connecting';\n      await wcConnectionPromise;\n      wcConnectionPromise = undefined;\n      state.wcPairingExpiry = undefined;\n      this.state.status = 'connected';\n    } else {\n      await this._getClient()?.connectWalletConnect?.();\n    }\n  },\n  async connectExternal(options, chain, setChain = true) {\n    await this._getClient()?.connectExternal?.(options);\n    if (setChain) {\n      ChainController.setActiveNamespace(chain);\n    }\n  },\n  async reconnectExternal(options) {\n    await this._getClient()?.reconnectExternal?.(options);\n    const namespace = options.chain || ChainController.state.activeChain;\n    if (namespace) {\n      ConnectorController.setConnectorId(options.id, namespace);\n    }\n  },\n  async setPreferredAccountType(accountType) {\n    ModalController.setLoading(true, ChainController.state.activeChain);\n    const authConnector = ConnectorController.getAuthConnector();\n    if (!authConnector) {\n      return;\n    }\n    await authConnector?.provider.setPreferredAccount(accountType);\n    await this.reconnectExternal(authConnector);\n    ModalController.setLoading(false, ChainController.state.activeChain);\n    EventsController.sendEvent({\n      type: 'track',\n      event: 'SET_PREFERRED_ACCOUNT_TYPE',\n      properties: {\n        accountType,\n        network: ChainController.state.activeCaipNetwork?.caipNetworkId || ''\n      }\n    });\n  },\n  async signMessage(message) {\n    return this._getClient()?.signMessage(message);\n  },\n  parseUnits(value, decimals) {\n    return this._getClient()?.parseUnits(value, decimals);\n  },\n  formatUnits(value, decimals) {\n    return this._getClient()?.formatUnits(value, decimals);\n  },\n  async sendTransaction(args) {\n    return this._getClient()?.sendTransaction(args);\n  },\n  async getCapabilities(params) {\n    return this._getClient()?.getCapabilities(params);\n  },\n  async grantPermissions(params) {\n    return this._getClient()?.grantPermissions(params);\n  },\n  async walletGetAssets(params) {\n    return this._getClient()?.walletGetAssets(params) ?? {};\n  },\n  async estimateGas(args) {\n    return this._getClient()?.estimateGas(args);\n  },\n  async writeContract(args) {\n    return this._getClient()?.writeContract(args);\n  },\n  async getEnsAddress(value) {\n    return this._getClient()?.getEnsAddress(value);\n  },\n  async getEnsAvatar(value) {\n    return this._getClient()?.getEnsAvatar(value);\n  },\n  checkInstalled(ids) {\n    return this._getClient()?.checkInstalled?.(ids) || false;\n  },\n  resetWcConnection() {\n    state.wcUri = undefined;\n    state.wcPairingExpiry = undefined;\n    state.wcLinking = undefined;\n    state.recentWallet = undefined;\n    state.status = 'disconnected';\n    TransactionsController.resetTransactions();\n    StorageUtil.deleteWalletConnectDeepLink();\n  },\n  resetUri() {\n    state.wcUri = undefined;\n    state.wcPairingExpiry = undefined;\n  },\n  finalizeWcConnection() {\n    const {\n      wcLinking,\n      recentWallet\n    } = ConnectionController.state;\n    if (wcLinking) {\n      StorageUtil.setWalletConnectDeepLink(wcLinking);\n    }\n    if (recentWallet) {\n      StorageUtil.setAppKitRecent(recentWallet);\n    }\n    EventsController.sendEvent({\n      type: 'track',\n      event: 'CONNECT_SUCCESS',\n      properties: {\n        method: wcLinking ? 'mobile' : 'qrcode',\n        name: RouterController.state.data?.wallet?.name || 'Unknown'\n      }\n    });\n  },\n  setWcBasic(wcBasic) {\n    state.wcBasic = wcBasic;\n  },\n  setUri(uri) {\n    state.wcUri = uri;\n    state.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();\n  },\n  setWcLinking(wcLinking) {\n    state.wcLinking = wcLinking;\n  },\n  setWcError(wcError) {\n    state.wcError = wcError;\n    state.buffering = false;\n  },\n  setRecentWallet(wallet) {\n    state.recentWallet = wallet;\n  },\n  setBuffering(buffering) {\n    state.buffering = buffering;\n  },\n  setStatus(status) {\n    state.status = status;\n  },\n  async disconnect(namespace) {\n    try {\n      ModalController.setLoading(true, namespace);\n      await SIWXUtil.clearSessions();\n      await ChainController.disconnect(namespace);\n      ModalController.setLoading(false, namespace);\n      ConnectorController.setFilterByNamespace(undefined);\n    } catch (error) {\n      throw new Error('Failed to disconnect');\n    }\n  }\n};\n//# sourceMappingURL=ConnectionController.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}