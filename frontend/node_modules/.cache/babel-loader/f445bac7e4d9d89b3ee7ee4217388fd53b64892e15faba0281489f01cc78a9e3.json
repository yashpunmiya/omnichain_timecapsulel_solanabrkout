{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseConnectSettings = exports.corsValidator = exports.DEFAULT_PRIORITY = void 0;\nconst version_1 = require(\"./version\");\nexports.DEFAULT_PRIORITY = 2;\nconst initialSettings = {\n  configSrc: './data/config.json',\n  version: version_1.VERSION,\n  debug: false,\n  priority: exports.DEFAULT_PRIORITY,\n  trustedHost: true,\n  connectSrc: version_1.DEFAULT_DOMAIN,\n  iframeSrc: `${version_1.DEFAULT_DOMAIN}iframe.html`,\n  popup: false,\n  popupSrc: `${version_1.DEFAULT_DOMAIN}popup.html`,\n  webusbSrc: `${version_1.DEFAULT_DOMAIN}webusb.html`,\n  transports: undefined,\n  pendingTransportEvent: true,\n  env: 'node',\n  lazyLoad: false,\n  timestamp: new Date().getTime(),\n  interactionTimeout: 1200,\n  sharedLogger: true,\n  deeplinkUrl: `${version_1.DEFAULT_DOMAIN}deeplink/${version_1.DEEPLINK_VERSION}/`,\n  transportReconnect: true\n};\nconst parseManifest = manifest => {\n  if (!manifest) return;\n  if (typeof manifest.email !== 'string') return;\n  if (typeof manifest.appUrl !== 'string') return;\n  return {\n    email: manifest.email,\n    appUrl: manifest.appUrl\n  };\n};\nconst corsValidator = url => {\n  if (typeof url !== 'string') return;\n  if (url === '../') return url;\n  if (url.match(/^https:\\/\\/([A-Za-z0-9\\-_]+\\.)*trezor\\.io\\//)) return url;\n  if (url.match(/^https?:\\/\\/localhost:[58][0-9]{3}\\//)) return url;\n  if (url.match(/^https:\\/\\/([A-Za-z0-9\\-_]+\\.)*sldev\\.cz\\//)) return url;\n  if (url.match(/^https?:\\/\\/([A-Za-z0-9\\-_]+\\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\\.onion\\//)) return url;\n};\nexports.corsValidator = corsValidator;\nconst parseConnectSettings = (input = {}) => {\n  const settings = {\n    ...initialSettings\n  };\n  if ('debug' in input) {\n    if (typeof input.debug === 'boolean') {\n      settings.debug = input.debug;\n    } else if (typeof input.debug === 'string') {\n      settings.debug = input.debug === 'true';\n    }\n  }\n  if (input.trustedHost === false) {\n    settings.trustedHost = input.trustedHost;\n  }\n  if (typeof input.connectSrc === 'string') {\n    settings.connectSrc = (0, exports.corsValidator)(input.connectSrc);\n  } else if (settings.trustedHost) {\n    settings.connectSrc = input.connectSrc;\n  }\n  const src = settings.connectSrc || version_1.DEFAULT_DOMAIN;\n  settings.iframeSrc = `${src}iframe.html`;\n  settings.popupSrc = `${src}popup.html`;\n  settings.webusbSrc = `${src}webusb.html`;\n  if (typeof input.transportReconnect === 'boolean') {\n    settings.transportReconnect = input.transportReconnect;\n  }\n  if (Array.isArray(input.transports)) {\n    settings.transports = input.transports;\n  }\n  if (typeof input.popup === 'boolean') {\n    settings.popup = input.popup;\n  }\n  if (typeof input.lazyLoad === 'boolean') {\n    settings.lazyLoad = input.lazyLoad;\n  }\n  if (typeof input.pendingTransportEvent === 'boolean') {\n    settings.pendingTransportEvent = input.pendingTransportEvent;\n  }\n  if (typeof input.extension === 'string') {\n    settings.extension = input.extension;\n  }\n  if (typeof input.env === 'string') {\n    settings.env = input.env;\n  }\n  if (typeof input.timestamp === 'number') {\n    settings.timestamp = input.timestamp;\n  }\n  if (typeof input.interactionTimeout === 'number') {\n    settings.interactionTimeout = input.interactionTimeout;\n  }\n  if (typeof input.manifest === 'object') {\n    settings.manifest = parseManifest(input.manifest);\n  }\n  if (typeof input.sharedLogger === 'boolean') {\n    settings.sharedLogger = input.sharedLogger;\n  }\n  if (typeof input.coreMode === 'string' && ['auto', 'popup', 'iframe'].includes(input.coreMode)) {\n    settings.coreMode = input.coreMode;\n  }\n  if (typeof input._extendWebextensionLifetime === 'boolean') {\n    settings._extendWebextensionLifetime = input._extendWebextensionLifetime;\n  }\n  if (typeof input._sessionsBackgroundUrl === 'string' || input._sessionsBackgroundUrl === null) {\n    settings._sessionsBackgroundUrl = input._sessionsBackgroundUrl;\n  }\n  if (typeof input.binFilesBaseUrl === 'string') {\n    settings.binFilesBaseUrl = input.binFilesBaseUrl;\n  }\n  if (typeof input.enableFirmwareHashCheck === 'boolean') {\n    settings.enableFirmwareHashCheck = Boolean(input.enableFirmwareHashCheck);\n  }\n  if (typeof input.npmVersion === 'string') {\n    settings.npmVersion = input.npmVersion;\n  }\n  return settings;\n};\nexports.parseConnectSettings = parseConnectSettings;\n//# sourceMappingURL=connectSettings.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}