{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeSystemPolicy = void 0;\nconst index_1 = require(\"../value/guard/index\");\nvar TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n  // ------------------------------------------------------------------\n  // TypeSystemPolicy: Instancing\n  // ------------------------------------------------------------------\n  /**\n   * Configures the instantiation behavior of TypeBox types. The `default` option assigns raw JavaScript\n   * references for embedded types, which may cause side effects if type properties are explicitly updated\n   * outside the TypeBox type builder. The `clone` option creates copies of any shared types upon creation,\n   * preventing unintended side effects. The `freeze` option applies `Object.freeze()` to the type, making\n   * it fully readonly and immutable. Implementations should use `default` whenever possible, as it is the\n   * fastest way to instantiate types. The default setting is `default`.\n   */\n  TypeSystemPolicy.InstanceMode = 'default';\n  // ------------------------------------------------------------------\n  // TypeSystemPolicy: Checking\n  // ------------------------------------------------------------------\n  /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n  TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n  /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n  TypeSystemPolicy.AllowArrayObject = false;\n  /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n  TypeSystemPolicy.AllowNaN = false;\n  /** Sets whether `null` should validate for void types. The default is `false` */\n  TypeSystemPolicy.AllowNullVoid = false;\n  /** Checks this value using the ExactOptionalPropertyTypes policy */\n  function IsExactOptionalProperty(value, key) {\n    return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n  }\n  TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n  /** Checks this value using the AllowArrayObjects policy */\n  function IsObjectLike(value) {\n    const isObject = (0, index_1.IsObject)(value);\n    return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !(0, index_1.IsArray)(value);\n  }\n  TypeSystemPolicy.IsObjectLike = IsObjectLike;\n  /** Checks this value as a record using the AllowArrayObjects policy */\n  function IsRecordLike(value) {\n    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n  }\n  TypeSystemPolicy.IsRecordLike = IsRecordLike;\n  /** Checks this value using the AllowNaN policy */\n  function IsNumberLike(value) {\n    return TypeSystemPolicy.AllowNaN ? (0, index_1.IsNumber)(value) : Number.isFinite(value);\n  }\n  TypeSystemPolicy.IsNumberLike = IsNumberLike;\n  /** Checks this value using the AllowVoidNull policy */\n  function IsVoidLike(value) {\n    const isUndefined = (0, index_1.IsUndefined)(value);\n    return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n  }\n  TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (exports.TypeSystemPolicy = TypeSystemPolicy = {}));","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}