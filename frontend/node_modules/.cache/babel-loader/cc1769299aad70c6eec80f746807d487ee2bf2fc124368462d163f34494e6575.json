{"ast":null,"code":"import { hexToBigInt, hexToNumber } from '../utils/encoding/fromHex.js';\nimport { hexToBytes } from '../utils/encoding/toBytes.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { defineBlock } from '../utils/formatters/block.js';\nimport { formatLog } from '../utils/formatters/log.js';\nimport { defineTransaction } from '../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js';\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js';\nimport { gasPerPubdataDefault } from './constants/number.js';\nexport const formatters = {\n  block: /*#__PURE__*/defineBlock({\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        const formatted = formatters.transaction?.format(transaction);\n        if (formatted.typeHex === '0x71') formatted.type = 'eip712';else if (formatted.typeHex === '0xff') formatted.type = 'priority';\n        return formatted;\n      });\n      return {\n        l1BatchNumber: args.l1BatchNumber ? hexToBigInt(args.l1BatchNumber) : null,\n        l1BatchTimestamp: args.l1BatchTimestamp ? hexToBigInt(args.l1BatchTimestamp) : null,\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      const transaction = {};\n      if (args.type === '0x71') transaction.type = 'eip712';else if (args.type === '0xff') transaction.type = 'priority';\n      return {\n        ...transaction,\n        l1BatchNumber: args.l1BatchNumber ? hexToBigInt(args.l1BatchNumber) : null,\n        l1BatchTxIndex: args.l1BatchTxIndex ? hexToBigInt(args.l1BatchTxIndex) : null\n      };\n    }\n  }),\n  transactionReceipt: /*#__PURE__*/defineTransactionReceipt({\n    format(args) {\n      return {\n        l1BatchNumber: args.l1BatchNumber ? hexToBigInt(args.l1BatchNumber) : null,\n        l1BatchTxIndex: args.l1BatchTxIndex ? hexToBigInt(args.l1BatchTxIndex) : null,\n        logs: args.logs.map(log => {\n          return {\n            ...formatLog(log),\n            l1BatchNumber: log.l1BatchNumber ? hexToBigInt(log.l1BatchNumber) : null,\n            transactionLogIndex: hexToNumber(log.transactionLogIndex),\n            logType: log.logType\n          };\n        }),\n        l2ToL1Logs: args.l2ToL1Logs.map(l2ToL1Log => {\n          return {\n            blockNumber: hexToBigInt(l2ToL1Log.blockHash),\n            blockHash: l2ToL1Log.blockHash,\n            l1BatchNumber: l2ToL1Log.l1BatchNumber ? hexToBigInt(l2ToL1Log.l1BatchNumber) : null,\n            transactionIndex: hexToBigInt(l2ToL1Log.transactionIndex),\n            shardId: hexToBigInt(l2ToL1Log.shardId),\n            isService: l2ToL1Log.isService,\n            sender: l2ToL1Log.sender,\n            key: l2ToL1Log.key,\n            value: l2ToL1Log.value,\n            transactionHash: l2ToL1Log.transactionHash,\n            logIndex: hexToBigInt(l2ToL1Log.logIndex)\n          };\n        })\n      };\n    }\n  }),\n  transactionRequest: /*#__PURE__*/defineTransactionRequest({\n    exclude: ['customSignature', 'factoryDeps', 'gasPerPubdata', 'paymaster', 'paymasterInput'],\n    format(args) {\n      if (args.gasPerPubdata || args.paymaster && args.paymasterInput || args.factoryDeps || args.customSignature) return {\n        eip712Meta: {\n          ...(args.gasPerPubdata ? {\n            gasPerPubdata: toHex(args.gasPerPubdata)\n          } : {\n            gasPerPubdata: toHex(gasPerPubdataDefault)\n          }),\n          ...(args.paymaster && args.paymasterInput ? {\n            paymasterParams: {\n              paymaster: args.paymaster,\n              paymasterInput: Array.from(hexToBytes(args.paymasterInput))\n            }\n          } : {}),\n          ...(args.factoryDeps ? {\n            factoryDeps: args.factoryDeps.map(dep => Array.from(hexToBytes(dep)))\n          } : {}),\n          ...(args.customSignature ? {\n            customSignature: Array.from(hexToBytes(args.customSignature))\n          } : {})\n        },\n        type: '0x71'\n      };\n      return {};\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","hexToNumber","hexToBytes","toHex","defineBlock","formatLog","defineTransaction","defineTransactionReceipt","defineTransactionRequest","gasPerPubdataDefault","formatters","block","format","args","transactions","map","transaction","formatted","typeHex","type","l1BatchNumber","l1BatchTimestamp","l1BatchTxIndex","transactionReceipt","logs","log","transactionLogIndex","logType","l2ToL1Logs","l2ToL1Log","blockNumber","blockHash","transactionIndex","shardId","isService","sender","key","value","transactionHash","logIndex","transactionRequest","exclude","gasPerPubdata","paymaster","paymasterInput","factoryDeps","customSignature","eip712Meta","paymasterParams","Array","from","dep"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\zksync\\formatters.ts"],"sourcesContent":["import type { ChainFormatters } from '../types/chain.js'\nimport { hexToBigInt, hexToNumber } from '../utils/encoding/fromHex.js'\nimport { hexToBytes } from '../utils/encoding/toBytes.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport { formatLog } from '../utils/formatters/log.js'\nimport { defineTransaction } from '../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js'\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js'\nimport { gasPerPubdataDefault } from './constants/number.js'\nimport type { ZksyncBlock, ZksyncRpcBlock } from './types/block.js'\nimport type { ZksyncL2ToL1Log, ZksyncLog } from './types/log.js'\nimport type {\n  ZksyncRpcTransaction,\n  ZksyncRpcTransactionReceipt,\n  ZksyncRpcTransactionRequest,\n  ZksyncTransaction,\n  ZksyncTransactionReceipt,\n  ZksyncTransactionRequest,\n} from './types/transaction.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: ZksyncRpcBlock): ZksyncBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatters.transaction?.format(\n          transaction as ZksyncRpcTransaction,\n        ) as ZksyncTransaction\n        if (formatted.typeHex === '0x71') formatted.type = 'eip712'\n        else if (formatted.typeHex === '0xff') formatted.type = 'priority'\n        return formatted\n      })\n      return {\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTimestamp: args.l1BatchTimestamp\n          ? hexToBigInt(args.l1BatchTimestamp)\n          : null,\n        transactions,\n      } as ZksyncBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: ZksyncRpcTransaction): ZksyncTransaction {\n      const transaction = {} as ZksyncTransaction\n      if (args.type === '0x71') transaction.type = 'eip712'\n      else if (args.type === '0xff') transaction.type = 'priority'\n      return {\n        ...transaction,\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTxIndex: args.l1BatchTxIndex\n          ? hexToBigInt(args.l1BatchTxIndex)\n          : null,\n      } as ZksyncTransaction\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(args: ZksyncRpcTransactionReceipt): ZksyncTransactionReceipt {\n      return {\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTxIndex: args.l1BatchTxIndex\n          ? hexToBigInt(args.l1BatchTxIndex)\n          : null,\n        logs: args.logs.map((log) => {\n          return {\n            ...formatLog(log),\n            l1BatchNumber: log.l1BatchNumber\n              ? hexToBigInt(log.l1BatchNumber)\n              : null,\n            transactionLogIndex: hexToNumber(log.transactionLogIndex),\n            logType: log.logType,\n          }\n        }) as ZksyncLog[],\n        l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {\n          return {\n            blockNumber: hexToBigInt(l2ToL1Log.blockHash),\n            blockHash: l2ToL1Log.blockHash,\n            l1BatchNumber: l2ToL1Log.l1BatchNumber\n              ? hexToBigInt(l2ToL1Log.l1BatchNumber)\n              : null,\n            transactionIndex: hexToBigInt(l2ToL1Log.transactionIndex),\n            shardId: hexToBigInt(l2ToL1Log.shardId),\n            isService: l2ToL1Log.isService,\n            sender: l2ToL1Log.sender,\n            key: l2ToL1Log.key,\n            value: l2ToL1Log.value,\n            transactionHash: l2ToL1Log.transactionHash,\n            logIndex: hexToBigInt(l2ToL1Log.logIndex),\n          }\n        }) as ZksyncL2ToL1Log[],\n      } as ZksyncTransactionReceipt\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    exclude: [\n      'customSignature',\n      'factoryDeps',\n      'gasPerPubdata',\n      'paymaster',\n      'paymasterInput',\n    ],\n    format(args: ZksyncTransactionRequest): ZksyncRpcTransactionRequest {\n      if (\n        args.gasPerPubdata ||\n        (args.paymaster && args.paymasterInput) ||\n        args.factoryDeps ||\n        args.customSignature\n      )\n        return {\n          eip712Meta: {\n            ...(args.gasPerPubdata\n              ? { gasPerPubdata: toHex(args.gasPerPubdata) }\n              : { gasPerPubdata: toHex(gasPerPubdataDefault) }),\n            ...(args.paymaster && args.paymasterInput\n              ? {\n                  paymasterParams: {\n                    paymaster: args.paymaster,\n                    paymasterInput: Array.from(hexToBytes(args.paymasterInput)),\n                  },\n                }\n              : {}),\n            ...(args.factoryDeps\n              ? {\n                  factoryDeps: args.factoryDeps.map((dep) =>\n                    Array.from(hexToBytes(dep)),\n                  ),\n                }\n              : {}),\n            ...(args.customSignature\n              ? {\n                  customSignature: Array.from(hexToBytes(args.customSignature)),\n                }\n              : {}),\n          },\n          type: '0x71',\n        } as unknown as ZksyncRpcTransactionRequest\n      return {} as ZksyncRpcTransactionRequest\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,WAAW,QAAQ,8BAA8B;AACvE,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,SAASC,wBAAwB,QAAQ,2CAA2C;AACpF,SAASC,wBAAwB,QAAQ,2CAA2C;AACpF,SAASC,oBAAoB,QAAQ,uBAAuB;AAY5D,OAAO,MAAMC,UAAU,GAAG;EACxBC,KAAK,EAAE,aAAcP,WAAW,CAAC;IAC/BQ,MAAMA,CAACC,IAAoB;MACzB,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,MAAMC,SAAS,GAAGP,UAAU,CAACM,WAAW,EAAEJ,MAAM,CAC9CI,WAAmC,CACf;QACtB,IAAIC,SAAS,CAACC,OAAO,KAAK,MAAM,EAAED,SAAS,CAACE,IAAI,GAAG,QAAQ,MACtD,IAAIF,SAAS,CAACC,OAAO,KAAK,MAAM,EAAED,SAAS,CAACE,IAAI,GAAG,UAAU;QAClE,OAAOF,SAAS;MAClB,CAAC,CAAC;MACF,OAAO;QACLG,aAAa,EAAEP,IAAI,CAACO,aAAa,GAC7BpB,WAAW,CAACa,IAAI,CAACO,aAAa,CAAC,GAC/B,IAAI;QACRC,gBAAgB,EAAER,IAAI,CAACQ,gBAAgB,GACnCrB,WAAW,CAACa,IAAI,CAACQ,gBAAgB,CAAC,GAClC,IAAI;QACRP;OACc;IAClB;GACD,CAAC;EACFE,WAAW,EAAE,aAAcV,iBAAiB,CAAC;IAC3CM,MAAMA,CAACC,IAA0B;MAC/B,MAAMG,WAAW,GAAG,EAAuB;MAC3C,IAAIH,IAAI,CAACM,IAAI,KAAK,MAAM,EAAEH,WAAW,CAACG,IAAI,GAAG,QAAQ,MAChD,IAAIN,IAAI,CAACM,IAAI,KAAK,MAAM,EAAEH,WAAW,CAACG,IAAI,GAAG,UAAU;MAC5D,OAAO;QACL,GAAGH,WAAW;QACdI,aAAa,EAAEP,IAAI,CAACO,aAAa,GAC7BpB,WAAW,CAACa,IAAI,CAACO,aAAa,CAAC,GAC/B,IAAI;QACRE,cAAc,EAAET,IAAI,CAACS,cAAc,GAC/BtB,WAAW,CAACa,IAAI,CAACS,cAAc,CAAC,GAChC;OACgB;IACxB;GACD,CAAC;EACFC,kBAAkB,EAAE,aAAchB,wBAAwB,CAAC;IACzDK,MAAMA,CAACC,IAAiC;MACtC,OAAO;QACLO,aAAa,EAAEP,IAAI,CAACO,aAAa,GAC7BpB,WAAW,CAACa,IAAI,CAACO,aAAa,CAAC,GAC/B,IAAI;QACRE,cAAc,EAAET,IAAI,CAACS,cAAc,GAC/BtB,WAAW,CAACa,IAAI,CAACS,cAAc,CAAC,GAChC,IAAI;QACRE,IAAI,EAAEX,IAAI,CAACW,IAAI,CAACT,GAAG,CAAEU,GAAG,IAAI;UAC1B,OAAO;YACL,GAAGpB,SAAS,CAACoB,GAAG,CAAC;YACjBL,aAAa,EAAEK,GAAG,CAACL,aAAa,GAC5BpB,WAAW,CAACyB,GAAG,CAACL,aAAa,CAAC,GAC9B,IAAI;YACRM,mBAAmB,EAAEzB,WAAW,CAACwB,GAAG,CAACC,mBAAmB,CAAC;YACzDC,OAAO,EAAEF,GAAG,CAACE;WACd;QACH,CAAC,CAAgB;QACjBC,UAAU,EAAEf,IAAI,CAACe,UAAU,CAACb,GAAG,CAAEc,SAAS,IAAI;UAC5C,OAAO;YACLC,WAAW,EAAE9B,WAAW,CAAC6B,SAAS,CAACE,SAAS,CAAC;YAC7CA,SAAS,EAAEF,SAAS,CAACE,SAAS;YAC9BX,aAAa,EAAES,SAAS,CAACT,aAAa,GAClCpB,WAAW,CAAC6B,SAAS,CAACT,aAAa,CAAC,GACpC,IAAI;YACRY,gBAAgB,EAAEhC,WAAW,CAAC6B,SAAS,CAACG,gBAAgB,CAAC;YACzDC,OAAO,EAAEjC,WAAW,CAAC6B,SAAS,CAACI,OAAO,CAAC;YACvCC,SAAS,EAAEL,SAAS,CAACK,SAAS;YAC9BC,MAAM,EAAEN,SAAS,CAACM,MAAM;YACxBC,GAAG,EAAEP,SAAS,CAACO,GAAG;YAClBC,KAAK,EAAER,SAAS,CAACQ,KAAK;YACtBC,eAAe,EAAET,SAAS,CAACS,eAAe;YAC1CC,QAAQ,EAAEvC,WAAW,CAAC6B,SAAS,CAACU,QAAQ;WACzC;QACH,CAAC;OAC0B;IAC/B;GACD,CAAC;EACFC,kBAAkB,EAAE,aAAchC,wBAAwB,CAAC;IACzDiC,OAAO,EAAE,CACP,iBAAiB,EACjB,aAAa,EACb,eAAe,EACf,WAAW,EACX,gBAAgB,CACjB;IACD7B,MAAMA,CAACC,IAA8B;MACnC,IACEA,IAAI,CAAC6B,aAAa,IACjB7B,IAAI,CAAC8B,SAAS,IAAI9B,IAAI,CAAC+B,cAAe,IACvC/B,IAAI,CAACgC,WAAW,IAChBhC,IAAI,CAACiC,eAAe,EAEpB,OAAO;QACLC,UAAU,EAAE;UACV,IAAIlC,IAAI,CAAC6B,aAAa,GAClB;YAAEA,aAAa,EAAEvC,KAAK,CAACU,IAAI,CAAC6B,aAAa;UAAC,CAAE,GAC5C;YAAEA,aAAa,EAAEvC,KAAK,CAACM,oBAAoB;UAAC,CAAE,CAAC;UACnD,IAAII,IAAI,CAAC8B,SAAS,IAAI9B,IAAI,CAAC+B,cAAc,GACrC;YACEI,eAAe,EAAE;cACfL,SAAS,EAAE9B,IAAI,CAAC8B,SAAS;cACzBC,cAAc,EAAEK,KAAK,CAACC,IAAI,CAAChD,UAAU,CAACW,IAAI,CAAC+B,cAAc,CAAC;;WAE7D,GACD,EAAE,CAAC;UACP,IAAI/B,IAAI,CAACgC,WAAW,GAChB;YACEA,WAAW,EAAEhC,IAAI,CAACgC,WAAW,CAAC9B,GAAG,CAAEoC,GAAG,IACpCF,KAAK,CAACC,IAAI,CAAChD,UAAU,CAACiD,GAAG,CAAC,CAAC;WAE9B,GACD,EAAE,CAAC;UACP,IAAItC,IAAI,CAACiC,eAAe,GACpB;YACEA,eAAe,EAAEG,KAAK,CAACC,IAAI,CAAChD,UAAU,CAACW,IAAI,CAACiC,eAAe,CAAC;WAC7D,GACD,EAAE;SACP;QACD3B,IAAI,EAAE;OACmC;MAC7C,OAAO,EAAiC;IAC1C;GACD;CACiC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}