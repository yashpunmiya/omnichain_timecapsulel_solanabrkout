{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDeferredManager = void 0;\nconst createDeferred_1 = require(\"./createDeferred\");\nconst createDeferredManager = options => {\n  const {\n    initialId = 0,\n    timeout: defaultTimeout = 0,\n    onTimeout\n  } = options ?? {};\n  const promises = [];\n  let ID = initialId;\n  let timeoutHandle;\n  const length = () => promises.length;\n  const nextId = () => ID;\n  const replanTimeout = () => {\n    const now = Date.now();\n    const nearestDeadline = promises.reduce((prev, {\n      deadline\n    }) => (prev && deadline ? Math.min : Math.max)(prev, deadline), 0);\n    if (timeoutHandle) clearTimeout(timeoutHandle);\n    timeoutHandle = nearestDeadline ? setTimeout(timeoutCallback, Math.max(nearestDeadline - now, 0)) : undefined;\n  };\n  const timeoutCallback = () => {\n    const now = Date.now();\n    promises.filter(promise => promise.deadline && promise.deadline <= now).forEach(promise => {\n      onTimeout?.(promise.id);\n      promise.deadline = 0;\n    });\n    replanTimeout();\n  };\n  const create = (timeout = defaultTimeout) => {\n    const promiseId = ID++;\n    const deferred = (0, createDeferred_1.createDeferred)(promiseId);\n    const deadline = timeout && Date.now() + timeout;\n    promises.push({\n      ...deferred,\n      deadline\n    });\n    if (timeout) replanTimeout();\n    return {\n      promiseId,\n      promise: deferred.promise\n    };\n  };\n  const extract = promiseId => {\n    const index = promises.findIndex(({\n      id\n    }) => id === promiseId);\n    const [promise] = index >= 0 ? promises.splice(index, 1) : [undefined];\n    if (promise?.deadline) replanTimeout();\n    return promise;\n  };\n  const resolve = (promiseId, value) => {\n    const promise = extract(promiseId);\n    promise?.resolve(value);\n    return !!promise;\n  };\n  const reject = (promiseId, error) => {\n    const promise = extract(promiseId);\n    promise?.reject(error);\n    return !!promise;\n  };\n  const rejectAll = error => {\n    promises.forEach(promise => promise.reject(error));\n    const deleted = promises.splice(0, promises.length);\n    if (deleted.length) replanTimeout();\n  };\n  return {\n    length,\n    nextId,\n    create,\n    resolve,\n    reject,\n    rejectAll\n  };\n};\nexports.createDeferredManager = createDeferredManager;\n//# sourceMappingURL=createDeferredManager.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}