{"ast":null,"code":"import { EventEmitter as l } from \"events\";\nimport { safeJsonStringify as u, safeJsonParse as p } from \"@walletconnect/safe-json\";\nimport { isWsUrl as c, isReactNative as g, isLocalhostUrl as y, formatJsonRpcError as k, parseConnectionError as m } from \"@walletconnect/jsonrpc-utils\";\nconst v = () => typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket : typeof window < \"u\" && typeof window.WebSocket < \"u\" ? window.WebSocket : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : require(\"ws\"),\n  w = () => typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" || typeof window < \"u\" && typeof window.WebSocket < \"u\" || typeof self < \"u\" && typeof self.WebSocket < \"u\",\n  d = r => r.split(\"?\")[0],\n  h = 10,\n  b = v();\nclass f {\n  constructor(e) {\n    if (this.url = e, this.events = new l(), this.registering = !1, !c(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n    this.url = e;\n  }\n  get connected() {\n    return typeof this.socket < \"u\";\n  }\n  get connecting() {\n    return this.registering;\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  async open(e = this.url) {\n    await this.register(e);\n  }\n  async close() {\n    return new Promise((e, t) => {\n      if (typeof this.socket > \"u\") {\n        t(new Error(\"Connection already closed\"));\n        return;\n      }\n      this.socket.onclose = n => {\n        this.onClose(n), e();\n      }, this.socket.close();\n    });\n  }\n  async send(e) {\n    typeof this.socket > \"u\" && (this.socket = await this.register());\n    try {\n      this.socket.send(u(e));\n    } catch (t) {\n      this.onError(e.id, t);\n    }\n  }\n  register(e = this.url) {\n    if (!c(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n    if (this.registering) {\n      const t = this.events.getMaxListeners();\n      return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((n, s) => {\n        this.events.once(\"register_error\", o => {\n          this.resetMaxListeners(), s(o);\n        }), this.events.once(\"open\", () => {\n          if (this.resetMaxListeners(), typeof this.socket > \"u\") return s(new Error(\"WebSocket connection is missing or invalid\"));\n          n(this.socket);\n        });\n      });\n    }\n    return this.url = e, this.registering = !0, new Promise((t, n) => {\n      const s = g() ? void 0 : {\n          rejectUnauthorized: !y(e)\n        },\n        o = new b(e, [], s);\n      w() ? o.onerror = i => {\n        const a = i;\n        n(this.emitError(a.error));\n      } : o.on(\"error\", i => {\n        n(this.emitError(i));\n      }), o.onopen = () => {\n        this.onOpen(o), t(o);\n      };\n    });\n  }\n  onOpen(e) {\n    e.onmessage = t => this.onPayload(t), e.onclose = t => this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n  }\n  onClose(e) {\n    this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n  }\n  onPayload(e) {\n    if (typeof e.data > \"u\") return;\n    const t = typeof e.data == \"string\" ? p(e.data) : e.data;\n    this.events.emit(\"payload\", t);\n  }\n  onError(e, t) {\n    const n = this.parseError(t),\n      s = n.message || n.toString(),\n      o = k(e, s);\n    this.events.emit(\"payload\", o);\n  }\n  parseError(e, t = this.url) {\n    return m(e, d(t), \"WS\");\n  }\n  resetMaxListeners() {\n    this.events.getMaxListeners() > h && this.events.setMaxListeners(h);\n  }\n  emitError(e) {\n    const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${d(this.url)}`));\n    return this.events.emit(\"register_error\", t), t;\n  }\n}\nexport { f as WsConnection, f as default };\n//# sourceMappingURL=index.es.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}