{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nexport function normalizeSignature(signature) {\n  let active = true;\n  let current = '';\n  let level = 0;\n  let result = '';\n  let valid = false;\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i];\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true;\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++;\n    if (char === ')') level--;\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue;\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result)) result = '';else {\n        result += char;\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true;\n          break;\n        }\n      }\n      continue;\n    }\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = '';\n        active = false;\n      }\n      continue;\n    }\n    result += char;\n    current += char;\n  }\n  if (!valid) throw new BaseError('Unable to normalize signature.');\n  return result;\n}\n//# sourceMappingURL=normalizeSignature.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}