{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TemplateLiteralFiniteError = void 0;\nexports.IsTemplateLiteralExpressionFinite = IsTemplateLiteralExpressionFinite;\nexports.IsTemplateLiteralFinite = IsTemplateLiteralFinite;\nconst parse_1 = require(\"./parse\");\nconst index_1 = require(\"../error/index\");\n// ------------------------------------------------------------------\n// TemplateLiteralFiniteError\n// ------------------------------------------------------------------\nclass TemplateLiteralFiniteError extends index_1.TypeBoxError {}\nexports.TemplateLiteralFiniteError = TemplateLiteralFiniteError;\n// ------------------------------------------------------------------\n// IsTemplateLiteralFiniteCheck\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction IsNumberExpression(expression) {\n  return expression.type === 'or' && expression.expr.length === 2 && expression.expr[0].type === 'const' && expression.expr[0].const === '0' && expression.expr[1].type === 'const' && expression.expr[1].const === '[1-9][0-9]*';\n}\n// prettier-ignore\nfunction IsBooleanExpression(expression) {\n  return expression.type === 'or' && expression.expr.length === 2 && expression.expr[0].type === 'const' && expression.expr[0].const === 'true' && expression.expr[1].type === 'const' && expression.expr[1].const === 'false';\n}\n// prettier-ignore\nfunction IsStringExpression(expression) {\n  return expression.type === 'const' && expression.const === '.*';\n}\n// ------------------------------------------------------------------\n// IsTemplateLiteralExpressionFinite\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction IsTemplateLiteralExpressionFinite(expression) {\n  return IsNumberExpression(expression) || IsStringExpression(expression) ? false : IsBooleanExpression(expression) ? true : expression.type === 'and' ? expression.expr.every(expr => IsTemplateLiteralExpressionFinite(expr)) : expression.type === 'or' ? expression.expr.every(expr => IsTemplateLiteralExpressionFinite(expr)) : expression.type === 'const' ? true : (() => {\n    throw new TemplateLiteralFiniteError(`Unknown expression type`);\n  })();\n}\n/** Returns true if this TemplateLiteral resolves to a finite set of values */\nfunction IsTemplateLiteralFinite(schema) {\n  const expression = (0, parse_1.TemplateLiteralParseExact)(schema.pattern);\n  return IsTemplateLiteralExpressionFinite(expression);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}