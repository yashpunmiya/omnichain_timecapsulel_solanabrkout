{"ast":null,"code":"import { concatHex } from '../data/concat.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { numberToHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { keccak256 } from '../hash/keccak256.js';\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization(parameters) {\n  const {\n    chainId,\n    nonce,\n    to\n  } = parameters;\n  const address = parameters.contractAddress ?? parameters.address;\n  const hash = keccak256(concatHex(['0x05', toRlp([chainId ? numberToHex(chainId) : '0x', address, nonce ? numberToHex(nonce) : '0x'])]));\n  if (to === 'bytes') return hexToBytes(hash);\n  return hash;\n}","map":{"version":3,"names":["concatHex","hexToBytes","numberToHex","toRlp","keccak256","hashAuthorization","parameters","chainId","nonce","to","address","contractAddress","hash"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\authorization\\hashAuthorization.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { AuthorizationRequest } from '../../types/authorization.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type NumberToHexErrorType, numberToHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashAuthorizationParameters<to extends To> =\n  AuthorizationRequest & {\n    /** Output format. @default \"hex\" */\n    to?: to | To | undefined\n  }\n\nexport type HashAuthorizationReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashAuthorizationErrorType =\n  | Keccak256ErrorType\n  | ConcatHexErrorType\n  | ToRlpErrorType\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization<to extends To = 'hex'>(\n  parameters: HashAuthorizationParameters<to>,\n): HashAuthorizationReturnType<to> {\n  const { chainId, nonce, to } = parameters\n  const address = parameters.contractAddress ?? parameters.address\n  const hash = keccak256(\n    concatHex([\n      '0x05',\n      toRlp([\n        chainId ? numberToHex(chainId) : '0x',\n        address,\n        nonce ? numberToHex(nonce) : '0x',\n      ]),\n    ]),\n  )\n  if (to === 'bytes') return hexToBytes(hash) as HashAuthorizationReturnType<to>\n  return hash as HashAuthorizationReturnType<to>\n}\n"],"mappings":"AAGA,SAAkCA,SAAS,QAAQ,mBAAmB;AACtE,SAAmCC,UAAU,QAAQ,wBAAwB;AAC7E,SAAoCC,WAAW,QAAQ,sBAAsB;AAC7E,SAA8BC,KAAK,QAAQ,sBAAsB;AACjE,SAAkCC,SAAS,QAAQ,sBAAsB;AAsBzE;;;AAGA,OAAM,SAAUC,iBAAiBA,CAC/BC,UAA2C;EAE3C,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAE,CAAE,GAAGH,UAAU;EACzC,MAAMI,OAAO,GAAGJ,UAAU,CAACK,eAAe,IAAIL,UAAU,CAACI,OAAO;EAChE,MAAME,IAAI,GAAGR,SAAS,CACpBJ,SAAS,CAAC,CACR,MAAM,EACNG,KAAK,CAAC,CACJI,OAAO,GAAGL,WAAW,CAACK,OAAO,CAAC,GAAG,IAAI,EACrCG,OAAO,EACPF,KAAK,GAAGN,WAAW,CAACM,KAAK,CAAC,GAAG,IAAI,CAClC,CAAC,CACH,CAAC,CACH;EACD,IAAIC,EAAE,KAAK,OAAO,EAAE,OAAOR,UAAU,CAACW,IAAI,CAAoC;EAC9E,OAAOA,IAAuC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}