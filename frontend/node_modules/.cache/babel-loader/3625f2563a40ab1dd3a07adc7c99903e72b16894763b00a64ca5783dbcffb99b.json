{"ast":null,"code":"import { versionedHashVersionKzg } from '../../constants/kzg.js';\nimport { maxUint256 } from '../../constants/number.js';\nimport { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { EmptyBlobError, InvalidVersionedHashSizeError, InvalidVersionedHashVersionError } from '../../errors/blob.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { hexToNumber } from '../encoding/fromHex.js';\nexport function assertTransactionEIP7702(transaction) {\n  const {\n    authorizationList\n  } = transaction;\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const {\n        contractAddress,\n        chainId\n      } = authorization;\n      if (!isAddress(contractAddress)) throw new InvalidAddressError({\n        address: contractAddress\n      });\n      if (chainId < 0) throw new InvalidChainIdError({\n        chainId\n      });\n    }\n  }\n  assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP4844(transaction) {\n  const {\n    blobVersionedHashes\n  } = transaction;\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError();\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash);\n      const version = hexToNumber(slice(hash, 0, 1));\n      if (size_ !== 32) throw new InvalidVersionedHashSizeError({\n        hash,\n        size: size_\n      });\n      if (version !== versionedHashVersionKzg) throw new InvalidVersionedHashVersionError({\n        hash,\n        version\n      });\n    }\n  }\n  assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP1559(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (maxFeePerGas && maxFeePerGas > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n}\nexport function assertTransactionEIP2930(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (maxPriorityFeePerGas || maxFeePerGas) throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.');\n  if (gasPrice && gasPrice > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas: gasPrice\n  });\n}\nexport function assertTransactionLegacy(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (typeof chainId !== 'undefined' && chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (maxPriorityFeePerGas || maxFeePerGas) throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.');\n  if (gasPrice && gasPrice > maxUint256) throw new FeeCapTooHighError({\n    maxFeePerGas: gasPrice\n  });\n}\n//# sourceMappingURL=assertTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}