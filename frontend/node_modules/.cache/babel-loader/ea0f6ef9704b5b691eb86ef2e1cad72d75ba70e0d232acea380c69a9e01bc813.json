{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyOfPropertyKeys = KeyOfPropertyKeys;\nexports.KeyOfPattern = KeyOfPattern;\nconst index_1 = require(\"../sets/index\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\n// prettier-ignore\nfunction FromRest(T) {\n  const Acc = [];\n  for (const L of T) Acc.push(KeyOfPropertyKeys(L));\n  return Acc;\n}\n// prettier-ignore\nfunction FromIntersect(T) {\n  const C = FromRest(T);\n  const R = (0, index_1.SetUnionMany)(C);\n  return R;\n}\n// prettier-ignore\nfunction FromUnion(T) {\n  const C = FromRest(T);\n  const R = (0, index_1.SetIntersectMany)(C);\n  return R;\n}\n// prettier-ignore\nfunction FromTuple(T) {\n  return T.map((_, I) => I.toString());\n}\n// prettier-ignore\nfunction FromArray(_) {\n  return ['[number]'];\n}\n// prettier-ignore\nfunction FromProperties(T) {\n  return globalThis.Object.getOwnPropertyNames(T);\n}\n// ------------------------------------------------------------------\n// FromPatternProperties\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction FromPatternProperties(patternProperties) {\n  if (!includePatternProperties) return [];\n  const patternPropertyKeys = globalThis.Object.getOwnPropertyNames(patternProperties);\n  return patternPropertyKeys.map(key => {\n    return key[0] === '^' && key[key.length - 1] === '$' ? key.slice(1, key.length - 1) : key;\n  });\n}\n/** Returns a tuple of PropertyKeys derived from the given TSchema. */\n// prettier-ignore\nfunction KeyOfPropertyKeys(T) {\n  return (0, kind_1.IsIntersect)(T) ? FromIntersect(T.allOf) : (0, kind_1.IsUnion)(T) ? FromUnion(T.anyOf) : (0, kind_1.IsTuple)(T) ? FromTuple(T.items ?? []) : (0, kind_1.IsArray)(T) ? FromArray(T.items) : (0, kind_1.IsObject)(T) ? FromProperties(T.properties) : (0, kind_1.IsRecord)(T) ? FromPatternProperties(T.patternProperties) : [];\n}\n// ----------------------------------------------------------------\n// KeyOfPattern\n// ----------------------------------------------------------------\nlet includePatternProperties = false;\n/** Returns a regular expression pattern derived from the given TSchema */\nfunction KeyOfPattern(schema) {\n  includePatternProperties = true;\n  const keys = KeyOfPropertyKeys(schema);\n  includePatternProperties = false;\n  const pattern = keys.map(key => `(${key})`);\n  return `^(${pattern.join('|')})$`;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}