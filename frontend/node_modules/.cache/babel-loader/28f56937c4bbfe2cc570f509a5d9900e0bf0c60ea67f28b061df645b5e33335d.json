{"ast":null,"code":"import { InvalidAddressError } from '../errors/address.js';\nimport { InvalidBytesLengthError } from '../errors/data.js';\nimport { AccountStateConflictError, StateAssignmentConflictError } from '../errors/stateOverride.js';\nimport { isAddress } from './address/isAddress.js';\nimport { numberToHex } from './encoding/toHex.js';\n/** @internal */\nexport function serializeStateMapping(stateMapping) {\n  if (!stateMapping || stateMapping.length === 0) return undefined;\n  return stateMapping.reduce((acc, {\n    slot,\n    value\n  }) => {\n    if (slot.length !== 66) throw new InvalidBytesLengthError({\n      size: slot.length,\n      targetSize: 66,\n      type: 'hex'\n    });\n    if (value.length !== 66) throw new InvalidBytesLengthError({\n      size: value.length,\n      targetSize: 66,\n      type: 'hex'\n    });\n    acc[slot] = value;\n    return acc;\n  }, {});\n}\n/** @internal */\nexport function serializeAccountStateOverride(parameters) {\n  const {\n    balance,\n    nonce,\n    state,\n    stateDiff,\n    code\n  } = parameters;\n  const rpcAccountStateOverride = {};\n  if (code !== undefined) rpcAccountStateOverride.code = code;\n  if (balance !== undefined) rpcAccountStateOverride.balance = numberToHex(balance);\n  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce);\n  if (state !== undefined) rpcAccountStateOverride.state = serializeStateMapping(state);\n  if (stateDiff !== undefined) {\n    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError();\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);\n  }\n  return rpcAccountStateOverride;\n}\n/** @internal */\nexport function serializeStateOverride(parameters) {\n  if (!parameters) return undefined;\n  const rpcStateOverride = {};\n  for (const {\n    address,\n    ...accountState\n  } of parameters) {\n    if (!isAddress(address, {\n      strict: false\n    })) throw new InvalidAddressError({\n      address\n    });\n    if (rpcStateOverride[address]) throw new AccountStateConflictError({\n      address: address\n    });\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState);\n  }\n  return rpcStateOverride;\n}\n//# sourceMappingURL=stateOverride.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}