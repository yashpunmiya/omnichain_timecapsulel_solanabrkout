{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { getTransactionCount } from '../public/getTransactionCount.js';\n/**\n * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n *\n * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link PrepareAuthorizationParameters}\n * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function prepareAuthorization(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chainId,\n    nonce\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/eip7702/prepareAuthorization'\n  });\n  const account = parseAccount(account_);\n  const executor = (() => {\n    if (!parameters.executor) return undefined;\n    if (parameters.executor === 'self') return parameters.executor;\n    return parseAccount(parameters.executor);\n  })();\n  const authorization = {\n    address: parameters.contractAddress ?? parameters.address,\n    chainId,\n    nonce\n  };\n  if (typeof authorization.chainId === 'undefined') authorization.chainId = client.chain?.id ?? (await getAction(client, getChainId, 'getChainId')({}));\n  if (typeof authorization.nonce === 'undefined') {\n    authorization.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({\n      address: account.address,\n      blockTag: 'pending'\n    });\n    if (executor === 'self' || executor?.address && isAddressEqual(executor.address, account.address)) authorization.nonce += 1;\n  }\n  return authorization;\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","isAddressEqual","getAction","getChainId","getTransactionCount","prepareAuthorization","client","parameters","account","account_","chainId","nonce","docsPath","executor","undefined","authorization","address","contractAddress","chain","id","blockTag"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\actions\\wallet\\prepareAuthorization.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Authorization,\n  AuthorizationRequest,\n} from '../../types/authorization.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { PartialBy } from '../../types/utils.js'\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { getChainId } from '../public/getChainId.js'\nimport { getTransactionCount } from '../public/getTransactionCount.js'\n\nexport type PrepareAuthorizationParameters<\n  account extends Account | undefined = Account | undefined,\n> = GetAccountParameter<account> &\n  PartialBy<AuthorizationRequest, 'chainId' | 'nonce'> & {\n    /**\n     * Whether the EIP-7702 Transaction will be executed by the EOA (signing this Authorization) or another Account.\n     *\n     * By default, it will be assumed that the EIP-7702 Transaction will\n     * be executed by another Account.\n     */\n    executor?: 'self' | Account | Address | undefined\n  }\n\nexport type PrepareAuthorizationReturnType = Authorization\n\nexport type PrepareAuthorizationErrorType =\n  | ParseAccountErrorType\n  | RequestErrorType\n  | AccountNotFoundErrorType\n  | ErrorType\n\n/**\n * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n *\n * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link PrepareAuthorizationParameters}\n * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function prepareAuthorization<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: PrepareAuthorizationParameters<account>,\n): Promise<PrepareAuthorizationReturnType> {\n  const { account: account_ = client.account, chainId, nonce } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/eip7702/prepareAuthorization',\n    })\n  const account = parseAccount(account_)\n\n  const executor = (() => {\n    if (!parameters.executor) return undefined\n    if (parameters.executor === 'self') return parameters.executor\n    return parseAccount(parameters.executor)\n  })()\n\n  const authorization = {\n    address: parameters.contractAddress ?? parameters.address,\n    chainId,\n    nonce,\n  } as Authorization\n\n  if (typeof authorization.chainId === 'undefined')\n    authorization.chainId =\n      client.chain?.id ??\n      (await getAction(client, getChainId, 'getChainId')({}))\n\n  if (typeof authorization.nonce === 'undefined') {\n    authorization.nonce = await getAction(\n      client,\n      getTransactionCount,\n      'getTransactionCount',\n    )({\n      address: account.address,\n      blockTag: 'pending',\n    })\n    if (\n      executor === 'self' ||\n      (executor?.address && isAddressEqual(executor.address, account.address))\n    )\n      authorization.nonce += 1\n  }\n\n  return authorization\n}\n"],"mappings":"AAEA,SAEEA,YAAY,QACP,sCAAsC;AAG7C,SACEC,oBAAoB,QAEf,yBAAyB;AAShC,SAASC,cAAc,QAAQ,uCAAuC;AAEtE,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,mBAAmB,QAAQ,kCAAkC;AAuBtE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAO,eAAeC,oBAAoBA,CAIxCC,MAAyC,EACzCC,UAAmD;EAEnD,MAAM;IAAEC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAAEE,OAAO;IAAEC;EAAK,CAAE,GAAGJ,UAAU;EAEzE,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIT,oBAAoB,CAAC;IAC7BY,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMJ,OAAO,GAAGT,YAAY,CAACU,QAAQ,CAAC;EAEtC,MAAMI,QAAQ,GAAG,CAAC,MAAK;IACrB,IAAI,CAACN,UAAU,CAACM,QAAQ,EAAE,OAAOC,SAAS;IAC1C,IAAIP,UAAU,CAACM,QAAQ,KAAK,MAAM,EAAE,OAAON,UAAU,CAACM,QAAQ;IAC9D,OAAOd,YAAY,CAACQ,UAAU,CAACM,QAAQ,CAAC;EAC1C,CAAC,EAAC,CAAE;EAEJ,MAAME,aAAa,GAAG;IACpBC,OAAO,EAAET,UAAU,CAACU,eAAe,IAAIV,UAAU,CAACS,OAAO;IACzDN,OAAO;IACPC;GACgB;EAElB,IAAI,OAAOI,aAAa,CAACL,OAAO,KAAK,WAAW,EAC9CK,aAAa,CAACL,OAAO,GACnBJ,MAAM,CAACY,KAAK,EAAEC,EAAE,KACf,MAAMjB,SAAS,CAACI,MAAM,EAAEH,UAAU,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;EAE3D,IAAI,OAAOY,aAAa,CAACJ,KAAK,KAAK,WAAW,EAAE;IAC9CI,aAAa,CAACJ,KAAK,GAAG,MAAMT,SAAS,CACnCI,MAAM,EACNF,mBAAmB,EACnB,qBAAqB,CACtB,CAAC;MACAY,OAAO,EAAER,OAAO,CAACQ,OAAO;MACxBI,QAAQ,EAAE;KACX,CAAC;IACF,IACEP,QAAQ,KAAK,MAAM,IAClBA,QAAQ,EAAEG,OAAO,IAAIf,cAAc,CAACY,QAAQ,CAACG,OAAO,EAAER,OAAO,CAACQ,OAAO,CAAE,EAExED,aAAa,CAACJ,KAAK,IAAI,CAAC;EAC5B;EAEA,OAAOI,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}