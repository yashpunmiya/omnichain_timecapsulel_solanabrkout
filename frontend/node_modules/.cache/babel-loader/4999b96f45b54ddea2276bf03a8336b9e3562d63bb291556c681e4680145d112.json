{"ast":null,"code":"// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nexport class Lock {\n  constructor() {\n    this.permits = 1;\n    this.promiseResolverQueue = [];\n  }\n  /**\n   * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n   * @returns  A promise that gets resolved when execution is allowed to proceed.\n   */\n  async acquire() {\n    if (this.permits > 0) {\n      this.permits -= 1;\n      return Promise.resolve(true);\n    }\n    // If there is no permit available, we return a promise that resolves once the semaphore gets\n    // signaled enough times that permits is equal to one.\n    return new Promise(resolver => this.promiseResolverQueue.push(resolver));\n  }\n  /**\n   * Increases the number of permits by one. If there are other functions waiting, one of them will\n   * continue to execute in a future iteration of the event loop.\n   */\n  release() {\n    this.permits += 1;\n    if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n      // eslint-disable-next-line no-console\n      console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n    } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n      // If there is someone else waiting, immediately consume the permit that was released\n      // at the beginning of this function and let the waiting function resume.\n      this.permits -= 1;\n      const nextResolver = this.promiseResolverQueue.shift();\n      if (nextResolver) {\n        nextResolver(true);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Lock","constructor","permits","promiseResolverQueue","acquire","Promise","resolve","resolver","push","release","length","console","warn","nextResolver","shift"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@ethereumjs\\util\\src\\lock.ts"],"sourcesContent":["// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nexport class Lock {\n  private permits: number = 1\n  private promiseResolverQueue: Array<(v: boolean) => void> = []\n\n  /**\n   * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n   * @returns  A promise that gets resolved when execution is allowed to proceed.\n   */\n  public async acquire(): Promise<boolean> {\n    if (this.permits > 0) {\n      this.permits -= 1\n      return Promise.resolve(true)\n    }\n\n    // If there is no permit available, we return a promise that resolves once the semaphore gets\n    // signaled enough times that permits is equal to one.\n    return new Promise<boolean>((resolver) => this.promiseResolverQueue.push(resolver))\n  }\n\n  /**\n   * Increases the number of permits by one. If there are other functions waiting, one of them will\n   * continue to execute in a future iteration of the event loop.\n   */\n  public release(): void {\n    this.permits += 1\n\n    if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n      // eslint-disable-next-line no-console\n      console.warn('Lock.permits should never be > 0 when there is someone waiting.')\n    } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n      // If there is someone else waiting, immediately consume the permit that was released\n      // at the beginning of this function and let the waiting function resume.\n      this.permits -= 1\n\n      const nextResolver = this.promiseResolverQueue.shift()\n      if (nextResolver) {\n        nextResolver(true)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;AACA,OAAM,MAAOA,IAAI;EAAjBC,YAAA;IACU,KAAAC,OAAO,GAAW,CAAC;IACnB,KAAAC,oBAAoB,GAAgC,EAAE;EAsChE;EApCE;;;;EAIO,MAAMC,OAAOA,CAAA;IAClB,IAAI,IAAI,CAACF,OAAO,GAAG,CAAC,EAAE;MACpB,IAAI,CAACA,OAAO,IAAI,CAAC;MACjB,OAAOG,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;;IAG9B;IACA;IACA,OAAO,IAAID,OAAO,CAAWE,QAAQ,IAAK,IAAI,CAACJ,oBAAoB,CAACK,IAAI,CAACD,QAAQ,CAAC,CAAC;EACrF;EAEA;;;;EAIOE,OAAOA,CAAA;IACZ,IAAI,CAACP,OAAO,IAAI,CAAC;IAEjB,IAAI,IAAI,CAACA,OAAO,GAAG,CAAC,IAAI,IAAI,CAACC,oBAAoB,CAACO,MAAM,GAAG,CAAC,EAAE;MAC5D;MACAC,OAAO,CAACC,IAAI,CAAC,iEAAiE,CAAC;KAChF,MAAM,IAAI,IAAI,CAACV,OAAO,KAAK,CAAC,IAAI,IAAI,CAACC,oBAAoB,CAACO,MAAM,GAAG,CAAC,EAAE;MACrE;MACA;MACA,IAAI,CAACR,OAAO,IAAI,CAAC;MAEjB,MAAMW,YAAY,GAAG,IAAI,CAACV,oBAAoB,CAACW,KAAK,EAAE;MACtD,IAAID,YAAY,EAAE;QAChBA,YAAY,CAAC,IAAI,CAAC;;;EAGxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}