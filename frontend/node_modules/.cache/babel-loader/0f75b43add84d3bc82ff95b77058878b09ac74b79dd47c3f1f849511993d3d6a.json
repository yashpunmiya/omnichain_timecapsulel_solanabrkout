{"ast":null,"code":"import { AbiErrorInputsNotFoundError, AbiErrorNotFoundError } from '../../errors/abi.js';\nimport { concatHex } from '../data/concat.js';\nimport { toFunctionSelector } from '../hash/toFunctionSelector.js';\nimport { encodeAbiParameters } from './encodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeErrorResult';\nexport function encodeErrorResult(parameters) {\n  const {\n    abi,\n    errorName,\n    args\n  } = parameters;\n  let abiItem = abi[0];\n  if (errorName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: errorName\n    });\n    if (!item) throw new AbiErrorNotFoundError(errorName, {\n      docsPath\n    });\n    abiItem = item;\n  }\n  if (abiItem.type !== 'error') throw new AbiErrorNotFoundError(undefined, {\n    docsPath\n  });\n  const definition = formatAbiItem(abiItem);\n  const signature = toFunctionSelector(definition);\n  let data = '0x';\n  if (args && args.length > 0) {\n    if (!abiItem.inputs) throw new AbiErrorInputsNotFoundError(abiItem.name, {\n      docsPath\n    });\n    data = encodeAbiParameters(abiItem.inputs, args);\n  }\n  return concatHex([signature, data]);\n}","map":{"version":3,"names":["AbiErrorInputsNotFoundError","AbiErrorNotFoundError","concatHex","toFunctionSelector","encodeAbiParameters","formatAbiItem","getAbiItem","docsPath","encodeErrorResult","parameters","abi","errorName","args","abiItem","item","name","type","undefined","definition","signature","data","length","inputs"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\viem\\utils\\abi\\encodeErrorResult.ts"],"sourcesContent":["import type { Abi, ExtractAbiErrors } from 'abitype'\n\nimport {\n  AbiErrorInputsNotFoundError,\n  AbiErrorNotFoundError,\n} from '../../errors/abi.js'\nimport type {\n  ContractErrorArgs,\n  ContractErrorName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeErrorResult'\n\nexport type EncodeErrorResultParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  errorName extends ContractErrorName<abi> | undefined = ContractErrorName<abi>,\n  ///\n  hasErrors = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiErrors<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractErrorArgs<\n    abi,\n    errorName extends ContractErrorName<abi>\n      ? errorName\n      : ContractErrorName<abi>\n  >,\n  allErrorNames = ContractErrorName<abi>,\n> = {\n  abi: abi\n  args?: allArgs | undefined\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { errorName?: errorName | allErrorNames | undefined }\n      : { errorName: errorName | allErrorNames }\n    : { errorName?: errorName | allErrorNames | undefined }\n> &\n  (hasErrors extends true ? unknown : never)\n\nexport type EncodeErrorResultReturnType = Hex\n\nexport type EncodeErrorResultErrorType =\n  | GetAbiItemErrorType\n  | FormatAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | EncodeAbiParametersErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function encodeErrorResult<\n  const abi extends Abi | readonly unknown[],\n  errorName extends ContractErrorName<abi> | undefined = undefined,\n>(\n  parameters: EncodeErrorResultParameters<abi, errorName>,\n): EncodeErrorResultReturnType {\n  const { abi, errorName, args } = parameters as EncodeErrorResultParameters\n\n  let abiItem = abi[0]\n  if (errorName) {\n    const item = getAbiItem({ abi, args, name: errorName })\n    if (!item) throw new AbiErrorNotFoundError(errorName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'error')\n    throw new AbiErrorNotFoundError(undefined, { docsPath })\n\n  const definition = formatAbiItem(abiItem)\n  const signature = toFunctionSelector(definition)\n\n  let data: Hex = '0x'\n  if (args && args.length > 0) {\n    if (!abiItem.inputs)\n      throw new AbiErrorInputsNotFoundError(abiItem.name, { docsPath })\n    data = encodeAbiParameters(abiItem.inputs, args)\n  }\n  return concatHex([signature, data])\n}\n"],"mappings":"AAEA,SACEA,2BAA2B,EAC3BC,qBAAqB,QAChB,qBAAqB;AAM5B,SAAkCC,SAAS,QAAQ,mBAAmB;AACtE,SAEEC,kBAAkB,QACb,+BAA+B;AAItC,SAEEC,mBAAmB,QACd,0BAA0B;AACjC,SAAsCC,aAAa,QAAQ,oBAAoB;AAC/E,SAAmCC,UAAU,QAAQ,iBAAiB;AAEtE,MAAMC,QAAQ,GAAG,kCAAkC;AA0CnD,OAAM,SAAUC,iBAAiBA,CAI/BC,UAAuD;EAEvD,MAAM;IAAEC,GAAG;IAAEC,SAAS;IAAEC;EAAI,CAAE,GAAGH,UAAyC;EAE1E,IAAII,OAAO,GAAGH,GAAG,CAAC,CAAC,CAAC;EACpB,IAAIC,SAAS,EAAE;IACb,MAAMG,IAAI,GAAGR,UAAU,CAAC;MAAEI,GAAG;MAAEE,IAAI;MAAEG,IAAI,EAAEJ;IAAS,CAAE,CAAC;IACvD,IAAI,CAACG,IAAI,EAAE,MAAM,IAAIb,qBAAqB,CAACU,SAAS,EAAE;MAAEJ;IAAQ,CAAE,CAAC;IACnEM,OAAO,GAAGC,IAAI;EAChB;EAEA,IAAID,OAAO,CAACG,IAAI,KAAK,OAAO,EAC1B,MAAM,IAAIf,qBAAqB,CAACgB,SAAS,EAAE;IAAEV;EAAQ,CAAE,CAAC;EAE1D,MAAMW,UAAU,GAAGb,aAAa,CAACQ,OAAO,CAAC;EACzC,MAAMM,SAAS,GAAGhB,kBAAkB,CAACe,UAAU,CAAC;EAEhD,IAAIE,IAAI,GAAQ,IAAI;EACpB,IAAIR,IAAI,IAAIA,IAAI,CAACS,MAAM,GAAG,CAAC,EAAE;IAC3B,IAAI,CAACR,OAAO,CAACS,MAAM,EACjB,MAAM,IAAItB,2BAA2B,CAACa,OAAO,CAACE,IAAI,EAAE;MAAER;IAAQ,CAAE,CAAC;IACnEa,IAAI,GAAGhB,mBAAmB,CAACS,OAAO,CAACS,MAAM,EAAEV,IAAI,CAAC;EAClD;EACA,OAAOV,SAAS,CAAC,CAACiB,SAAS,EAAEC,IAAI,CAAC,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}