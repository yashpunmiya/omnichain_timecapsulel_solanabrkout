{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { W3mFrameRpcConstants } from '@reown/appkit-wallet/utils';\nimport { AccountController } from './AccountController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { EventsController } from './EventsController.js';\nimport { OptionsController } from './OptionsController.js';\nimport { SnackController } from './SnackController.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  transactions: [],\n  coinbaseTransactions: {},\n  transactionsByYear: {},\n  lastNetworkInView: undefined,\n  loading: false,\n  empty: false,\n  next: undefined\n});\n// -- Controller ---------------------------------------- //\nexport const TransactionsController = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  setLastNetworkInView(lastNetworkInView) {\n    state.lastNetworkInView = lastNetworkInView;\n  },\n  async fetchTransactions(accountAddress, onramp) {\n    if (!accountAddress) {\n      throw new Error(\"Transactions can't be fetched without an accountAddress\");\n    }\n    state.loading = true;\n    try {\n      const response = await BlockchainApiController.fetchTransactions({\n        account: accountAddress,\n        cursor: state.next,\n        onramp,\n        // Coinbase transaction history state updates require the latest data\n        cache: onramp === 'coinbase' ? 'no-cache' : undefined,\n        chainId: ChainController.state.activeCaipNetwork?.caipNetworkId\n      });\n      const nonSpamTransactions = this.filterSpamTransactions(response.data);\n      const sameChainTransactions = this.filterByConnectedChain(nonSpamTransactions);\n      const filteredTransactions = [...state.transactions, ...sameChainTransactions];\n      state.loading = false;\n      if (onramp === 'coinbase') {\n        state.coinbaseTransactions = this.groupTransactionsByYearAndMonth(state.coinbaseTransactions, response.data);\n      } else {\n        state.transactions = filteredTransactions;\n        state.transactionsByYear = this.groupTransactionsByYearAndMonth(state.transactionsByYear, sameChainTransactions);\n      }\n      state.empty = filteredTransactions.length === 0;\n      state.next = response.next ? response.next : undefined;\n    } catch (error) {\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'ERROR_FETCH_TRANSACTIONS',\n        properties: {\n          address: accountAddress,\n          projectId: OptionsController.state.projectId,\n          cursor: state.next,\n          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n        }\n      });\n      SnackController.showError('Failed to fetch transactions');\n      state.loading = false;\n      state.empty = true;\n      state.next = undefined;\n    }\n  },\n  groupTransactionsByYearAndMonth(transactionsMap = {}, transactions = []) {\n    const grouped = transactionsMap;\n    transactions.forEach(transaction => {\n      const year = new Date(transaction.metadata.minedAt).getFullYear();\n      const month = new Date(transaction.metadata.minedAt).getMonth();\n      const yearTransactions = grouped[year] ?? {};\n      const monthTransactions = yearTransactions[month] ?? [];\n      // If there's a transaction with the same id, remove the old one\n      const newMonthTransactions = monthTransactions.filter(tx => tx.id !== transaction.id);\n      grouped[year] = {\n        ...yearTransactions,\n        [month]: [...newMonthTransactions, transaction].sort((a, b) => new Date(b.metadata.minedAt).getTime() - new Date(a.metadata.minedAt).getTime())\n      };\n    });\n    return grouped;\n  },\n  filterSpamTransactions(transactions) {\n    return transactions.filter(transaction => {\n      const isAllSpam = transaction.transfers.every(transfer => transfer.nft_info?.flags.is_spam === true);\n      return !isAllSpam;\n    });\n  },\n  filterByConnectedChain(transactions) {\n    const chainId = ChainController.state.activeCaipNetwork?.caipNetworkId;\n    const filteredTransactions = transactions.filter(transaction => transaction.metadata.chain === chainId);\n    return filteredTransactions;\n  },\n  clearCursor() {\n    state.next = undefined;\n  },\n  resetTransactions() {\n    state.transactions = [];\n    state.transactionsByYear = {};\n    state.lastNetworkInView = undefined;\n    state.loading = false;\n    state.empty = false;\n    state.next = undefined;\n  }\n};","map":{"version":3,"names":["proxy","subscribe","sub","W3mFrameRpcConstants","AccountController","BlockchainApiController","ChainController","EventsController","OptionsController","SnackController","state","transactions","coinbaseTransactions","transactionsByYear","lastNetworkInView","undefined","loading","empty","next","TransactionsController","callback","setLastNetworkInView","fetchTransactions","accountAddress","onramp","Error","response","account","cursor","cache","chainId","activeCaipNetwork","caipNetworkId","nonSpamTransactions","filterSpamTransactions","data","sameChainTransactions","filterByConnectedChain","filteredTransactions","groupTransactionsByYearAndMonth","length","error","sendEvent","type","event","properties","address","projectId","isSmartAccount","preferredAccountType","ACCOUNT_TYPES","SMART_ACCOUNT","showError","transactionsMap","grouped","forEach","transaction","year","Date","metadata","minedAt","getFullYear","month","getMonth","yearTransactions","monthTransactions","newMonthTransactions","filter","tx","id","sort","a","b","getTime","isAllSpam","transfers","every","transfer","nft_info","flags","is_spam","chain","clearCursor","resetTransactions"],"sources":["../../../../src/controllers/TransactionsController.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}