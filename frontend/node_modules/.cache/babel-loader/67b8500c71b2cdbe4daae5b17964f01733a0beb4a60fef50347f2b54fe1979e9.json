{"ast":null,"code":"import { useWallet } from '@solana/wallet-adapter-react';\nimport { useCallback } from 'react';\nexport function useWalletMultiButton({\n  onSelectWallet\n}) {\n  const {\n    connect,\n    connected,\n    connecting,\n    disconnect,\n    disconnecting,\n    publicKey,\n    select,\n    wallet,\n    wallets\n  } = useWallet();\n  let buttonState;\n  if (connecting) {\n    buttonState = 'connecting';\n  } else if (connected) {\n    buttonState = 'connected';\n  } else if (disconnecting) {\n    buttonState = 'disconnecting';\n  } else if (wallet) {\n    buttonState = 'has-wallet';\n  } else {\n    buttonState = 'no-wallet';\n  }\n  const handleConnect = useCallback(() => {\n    connect().catch(() => {\n      // Silently catch because any errors are caught by the context `onError` handler\n    });\n  }, [connect]);\n  const handleDisconnect = useCallback(() => {\n    disconnect().catch(() => {\n      // Silently catch because any errors are caught by the context `onError` handler\n    });\n  }, [disconnect]);\n  const handleSelectWallet = useCallback(() => {\n    onSelectWallet({\n      onSelectWallet: select,\n      wallets\n    });\n  }, [onSelectWallet, select, wallets]);\n  return {\n    buttonState,\n    onConnect: buttonState === 'has-wallet' ? handleConnect : undefined,\n    onDisconnect: buttonState !== 'disconnecting' && buttonState !== 'no-wallet' ? handleDisconnect : undefined,\n    onSelectWallet: handleSelectWallet,\n    publicKey: publicKey ?? undefined,\n    walletIcon: wallet?.adapter.icon,\n    walletName: wallet?.adapter.name\n  };\n}\n//# sourceMappingURL=useWalletMultiButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}