{"ast":null,"code":"import { getAddress } from '../address/getAddress.js';\nimport { isAddressEqual } from '../address/isAddressEqual.js';\nimport { recoverAddress } from './recoverAddress.js';\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyHash` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyHash}\n *\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash({\n  address,\n  hash,\n  signature\n}) {\n  return isAddressEqual(getAddress(address), await recoverAddress({\n    hash,\n    signature\n  }));\n}","map":{"version":3,"names":["getAddress","isAddressEqual","recoverAddress","verifyHash","address","hash","signature"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\signature\\verifyHash.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ByteArray, Hash, Hex, Signature } from '../../types/misc.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from './recoverAddress.js'\n\nexport type VerifyHashParameters = {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hash\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray | Signature\n}\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverAddressErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyHash` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyHash}\n *\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash({\n  address,\n  hash,\n  signature,\n}: VerifyHashParameters): Promise<VerifyHashReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverAddress({ hash, signature }),\n  )\n}\n"],"mappings":"AAGA,SAAmCA,UAAU,QAAQ,0BAA0B;AAC/E,SAEEC,cAAc,QACT,8BAA8B;AAGrC,SAEEC,cAAc,QACT,qBAAqB;AAmB5B;;;;;;;;;;;;AAYA,OAAO,eAAeC,UAAUA,CAAC;EAC/BC,OAAO;EACPC,IAAI;EACJC;AAAS,CACY;EACrB,OAAOL,cAAc,CACnBD,UAAU,CAACI,OAAO,CAAC,EACnB,MAAMF,cAAc,CAAC;IAAEG,IAAI;IAAEC;EAAS,CAAE,CAAC,CAC1C;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}