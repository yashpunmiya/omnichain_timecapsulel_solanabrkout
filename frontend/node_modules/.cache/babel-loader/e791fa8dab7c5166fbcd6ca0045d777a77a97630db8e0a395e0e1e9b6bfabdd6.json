{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/uuidv4.ts\nimport { v4 } from \"uuid\";\nvar uuidv4 = () => v4().toString();\nvar uuidv4_default = uuidv4;\n\n// src/url-crypto.ts\nvar url_crypto_exports = {};\n__export(url_crypto_exports, {\n  decryptData: () => decryptData,\n  decryptUrlParam: () => decryptUrlParam,\n  encryptData: () => encryptData,\n  encryptUrlParam: () => encryptUrlParam\n});\nimport CryptoJS from \"crypto-js\";\nimport { v4 as uuidv42 } from \"uuid\";\nfunction encryptUrlParam(params = {}, encoding = \"base64\") {\n  const secretKey = uuidv42().replace(/-/g, \"\").toUpperCase();\n  const cipherText = encryptData(params, secretKey, encoding);\n  return cipherText + secretKey;\n}\nfunction encryptData(data = {}, secretKey, encoding = \"base64\") {\n  if (typeof data !== \"string\") {\n    data = JSON.stringify(data);\n  }\n  const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n  const cipherText = CryptoJS.AES.encrypt(data, keyWA, {\n    mode: CryptoJS.mode.ECB,\n    algorithm: CryptoJS.algo.AES,\n    padding: CryptoJS.pad.Pkcs7,\n    formatter: CryptoJS.format.Hex\n  }).ciphertext;\n  if (encoding === \"base64\") {\n    return encodeURIComponent(CryptoJS.enc.Base64.stringify(cipherText));\n  } else {\n    return CryptoJS.enc.Hex.stringify(cipherText).toUpperCase();\n  }\n}\nfunction decryptUrlParam(params, encoding = \"base64\") {\n  if (params) {\n    const secretKey = params.slice(-32);\n    const data = params.slice(0, params.length - 32);\n    return decryptData(data, secretKey, encoding);\n  } else {\n    return \"\";\n  }\n}\nfunction decryptData(params, secretKey, encoding = \"base64\") {\n  let dec;\n  if (encoding === \"base64\") {\n    dec = CryptoJS.enc.Base64.parse(params);\n  } else {\n    dec = CryptoJS.enc.Hex.parse(params);\n  }\n  const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n  const bytes = CryptoJS.AES.decrypt(CryptoJS.lib.CipherParams.create({\n    ciphertext: dec,\n    key: keyWA,\n    algorithm: CryptoJS.algo.AES,\n    padding: CryptoJS.pad.Pkcs7,\n    formatter: CryptoJS.format.Hex\n  }), keyWA, {\n    mode: CryptoJS.mode.ECB\n  });\n  return bytes.toString(CryptoJS.enc.Utf8);\n}\nexport { url_crypto_exports as urlCrypto, uuidv4_default as uuidv4 };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}