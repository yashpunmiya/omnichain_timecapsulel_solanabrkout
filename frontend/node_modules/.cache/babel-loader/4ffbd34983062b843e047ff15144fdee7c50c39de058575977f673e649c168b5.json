{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nexport function parseSignature(signatureHex) {\n  const {\n    r,\n    s\n  } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));\n  const yParityOrV = Number(`0x${signatureHex.slice(130)}`);\n  const [v, yParity] = (() => {\n    if (yParityOrV === 0 || yParityOrV === 1) return [undefined, yParityOrV];\n    if (yParityOrV === 27) return [BigInt(yParityOrV), 0];\n    if (yParityOrV === 28) return [BigInt(yParityOrV), 1];\n    throw new Error('Invalid yParityOrV value');\n  })();\n  if (typeof v !== 'undefined') return {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    s: numberToHex(s, {\n      size: 32\n    }),\n    v,\n    yParity\n  };\n  return {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    s: numberToHex(s, {\n      size: 32\n    }),\n    yParity\n  };\n}","map":{"version":3,"names":["secp256k1","numberToHex","parseSignature","signatureHex","r","s","Signature","fromCompact","slice","yParityOrV","Number","v","yParity","undefined","BigInt","Error","size"],"sources":["C:\\Users\\yyash\\Coding\\solana-brkout\\frontend\\node_modules\\@reown\\appkit-controllers\\node_modules\\@walletconnect\\utils\\node_modules\\viem\\utils\\signature\\parseSignature.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type ParseSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nexport function parseSignature(signatureHex: Hex) {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  const yParityOrV = Number(`0x${signatureHex.slice(130)}`)\n  const [v, yParity] = (() => {\n    if (yParityOrV === 0 || yParityOrV === 1) return [undefined, yParityOrV]\n    if (yParityOrV === 27) return [BigInt(yParityOrV), 0]\n    if (yParityOrV === 28) return [BigInt(yParityOrV), 1]\n    throw new Error('Invalid yParityOrV value')\n  })()\n\n  if (typeof v !== 'undefined')\n    return {\n      r: numberToHex(r, { size: 32 }),\n      s: numberToHex(s, { size: 32 }),\n      v,\n      yParity,\n    } satisfies Signature\n  return {\n    r: numberToHex(r, { size: 32 }),\n    s: numberToHex(s, { size: 32 }),\n    yParity,\n  } satisfies Signature\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AAInD,SAEEC,WAAW,QACN,+BAA+B;AAItC;;;;;;;;;;AAUA,OAAM,SAAUC,cAAcA,CAACC,YAAiB;EAC9C,MAAM;IAAEC,CAAC;IAAEC;EAAC,CAAE,GAAGL,SAAS,CAACM,SAAS,CAACC,WAAW,CAACJ,YAAY,CAACK,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;EAC5E,MAAMC,UAAU,GAAGC,MAAM,CAAC,KAAKP,YAAY,CAACK,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;EACzD,MAAM,CAACG,CAAC,EAAEC,OAAO,CAAC,GAAG,CAAC,MAAK;IACzB,IAAIH,UAAU,KAAK,CAAC,IAAIA,UAAU,KAAK,CAAC,EAAE,OAAO,CAACI,SAAS,EAAEJ,UAAU,CAAC;IACxE,IAAIA,UAAU,KAAK,EAAE,EAAE,OAAO,CAACK,MAAM,CAACL,UAAU,CAAC,EAAE,CAAC,CAAC;IACrD,IAAIA,UAAU,KAAK,EAAE,EAAE,OAAO,CAACK,MAAM,CAACL,UAAU,CAAC,EAAE,CAAC,CAAC;IACrD,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;EAC7C,CAAC,EAAC,CAAE;EAEJ,IAAI,OAAOJ,CAAC,KAAK,WAAW,EAC1B,OAAO;IACLP,CAAC,EAAEH,WAAW,CAACG,CAAC,EAAE;MAAEY,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BX,CAAC,EAAEJ,WAAW,CAACI,CAAC,EAAE;MAAEW,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BL,CAAC;IACDC;GACmB;EACvB,OAAO;IACLR,CAAC,EAAEH,WAAW,CAACG,CAAC,EAAE;MAAEY,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BX,CAAC,EAAEJ,WAAW,CAACI,CAAC,EAAE;MAAEW,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BJ;GACmB;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}