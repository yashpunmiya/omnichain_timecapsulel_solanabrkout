{"ast":null,"code":"export const fees = {\n  /*\n   * Estimates the fees per gas for a transaction.\n      * If the transaction is to be paid in a token (feeCurrency is present) then the fees\n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   *\n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async params => {\n    if (!params.request?.feeCurrency) return null;\n    const [gasPrice, maxPriorityFeePerGas] = await Promise.all([estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency), estimateMaxPriorityFeePerGasInFeeCurrency(params.client, params.request.feeCurrency)]);\n    // eth_gasPrice for cel2 returns baseFeePerGas + maxPriorityFeePerGas\n    const maxFeePerGas = params.multiply(gasPrice - maxPriorityFeePerGas) + maxPriorityFeePerGas;\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n};\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(client, feeCurrency) {\n  const fee = await client.request({\n    method: 'eth_gasPrice',\n    params: [feeCurrency]\n  });\n  return BigInt(fee);\n}\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(client, feeCurrency) {\n  const feesPerGas = await client.request({\n    method: 'eth_maxPriorityFeePerGas',\n    params: [feeCurrency]\n  });\n  return BigInt(feesPerGas);\n}\n//# sourceMappingURL=fees.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}