{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tslib_1 = require(\"tslib\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst dynamic_1 = require(\"@trezor/connect/lib/impl/dynamic\");\nconst connectSettings_1 = require(\"./connectSettings\");\nconst core_in_iframe_1 = require(\"./impl/core-in-iframe\");\nconst core_in_popup_1 = require(\"./impl/core-in-popup\");\nconst core_in_suite_desktop_1 = require(\"./impl/core-in-suite-desktop\");\nconst IFRAME_ERRORS = ['Init_IframeBlocked', 'Init_IframeTimeout', 'Transport_Missing'];\nconst impl = new dynamic_1.TrezorConnectDynamic({\n  implementations: [{\n    type: 'iframe',\n    impl: new core_in_iframe_1.CoreInIframe()\n  }, {\n    type: 'core-in-popup',\n    impl: new core_in_popup_1.CoreInPopup()\n  }, {\n    type: 'core-in-suite-desktop',\n    impl: new core_in_suite_desktop_1.CoreInSuiteDesktop()\n  }],\n  getInitTarget: settings => {\n    if (settings.coreMode === 'iframe') {\n      return 'iframe';\n    } else if (settings.coreMode === 'popup') {\n      return 'core-in-popup';\n    } else if (settings.coreMode === 'suite-desktop') {\n      return 'core-in-suite-desktop';\n    } else {\n      if (settings.coreMode && settings.coreMode !== 'auto') {\n        console.warn(`Invalid coreMode: ${settings.coreMode}`);\n      }\n      return 'iframe';\n    }\n  },\n  handleBeforeCall: async () => {\n    const isCoreModeDesktop = impl.lastSettings?.coreMode === 'suite-desktop';\n    if (isCoreModeDesktop) {\n      await impl.switchTarget('core-in-suite-desktop');\n    }\n  },\n  handleErrorFallback: async errorCode => {\n    const env = (0, connectSettings_1.getEnv)();\n    const isCoreModeDisabled = impl.lastSettings?.popup === false || env === 'webextension';\n    const isCoreModeAuto = impl.lastSettings?.coreMode === 'auto' || impl.lastSettings?.coreMode === undefined;\n    if (!isCoreModeDisabled && impl.getTargetType() === 'core-in-suite-desktop' && errorCode === 'Desktop_ConnectionMissing') {\n      await impl.switchTarget('core-in-popup');\n      return true;\n    }\n    if (!isCoreModeDisabled && isCoreModeAuto && IFRAME_ERRORS.includes(errorCode)) {\n      const webUsbUnavailableInBrowser = !navigator?.usb;\n      const webUsbDisabledInSettings = impl.lastSettings?.transports?.includes('WebUsbTransport') === false;\n      if (errorCode === 'Transport_Missing' && (webUsbUnavailableInBrowser || webUsbDisabledInSettings)) {\n        return false;\n      }\n      await impl.switchTarget('core-in-popup');\n      return true;\n    }\n    return false;\n  }\n});\nconst TrezorConnect = (0, factory_1.factory)({\n  eventEmitter: impl.eventEmitter,\n  init: impl.init.bind(impl),\n  call: impl.call.bind(impl),\n  setTransports: impl.setTransports.bind(impl),\n  manifest: impl.manifest.bind(impl),\n  requestLogin: impl.requestLogin.bind(impl),\n  uiResponse: impl.uiResponse.bind(impl),\n  cancel: impl.cancel.bind(impl),\n  dispose: impl.dispose.bind(impl)\n}, {\n  renderWebUSBButton: impl.getTarget().renderWebUSBButton.bind(impl),\n  disableWebUSB: impl.getTarget().disableWebUSB.bind(impl),\n  requestWebUSBDevice: impl.getTarget().requestWebUSBDevice.bind(impl)\n});\nexports.default = TrezorConnect;\ntslib_1.__exportStar(require(\"@trezor/connect/lib/exports\"), exports);\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}