{"ast":null,"code":"import { hexToBigInt, hexToNumber } from '../utils/encoding/fromHex.js';\nimport { hexToBytes } from '../utils/encoding/toBytes.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { defineBlock } from '../utils/formatters/block.js';\nimport { formatLog } from '../utils/formatters/log.js';\nimport { defineTransaction } from '../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js';\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js';\nimport { gasPerPubdataDefault } from './constants/number.js';\nexport const formatters = {\n  block: /*#__PURE__*/defineBlock({\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        const formatted = formatters.transaction?.format(transaction);\n        if (formatted.typeHex === '0x71') formatted.type = 'eip712';else if (formatted.typeHex === '0xff') formatted.type = 'priority';\n        return formatted;\n      });\n      return {\n        l1BatchNumber: args.l1BatchNumber ? hexToBigInt(args.l1BatchNumber) : null,\n        l1BatchTimestamp: args.l1BatchTimestamp ? hexToBigInt(args.l1BatchTimestamp) : null,\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      const transaction = {};\n      if (args.type === '0x71') transaction.type = 'eip712';else if (args.type === '0xff') transaction.type = 'priority';\n      return {\n        ...transaction,\n        l1BatchNumber: args.l1BatchNumber ? hexToBigInt(args.l1BatchNumber) : null,\n        l1BatchTxIndex: args.l1BatchTxIndex ? hexToBigInt(args.l1BatchTxIndex) : null\n      };\n    }\n  }),\n  transactionReceipt: /*#__PURE__*/defineTransactionReceipt({\n    format(args) {\n      return {\n        l1BatchNumber: args.l1BatchNumber ? hexToBigInt(args.l1BatchNumber) : null,\n        l1BatchTxIndex: args.l1BatchTxIndex ? hexToBigInt(args.l1BatchTxIndex) : null,\n        logs: args.logs.map(log => {\n          return {\n            ...formatLog(log),\n            l1BatchNumber: log.l1BatchNumber ? hexToBigInt(log.l1BatchNumber) : null,\n            transactionLogIndex: hexToNumber(log.transactionLogIndex),\n            logType: log.logType\n          };\n        }),\n        l2ToL1Logs: args.l2ToL1Logs.map(l2ToL1Log => {\n          return {\n            blockNumber: hexToBigInt(l2ToL1Log.blockHash),\n            blockHash: l2ToL1Log.blockHash,\n            l1BatchNumber: l2ToL1Log.l1BatchNumber ? hexToBigInt(l2ToL1Log.l1BatchNumber) : null,\n            transactionIndex: hexToBigInt(l2ToL1Log.transactionIndex),\n            shardId: hexToBigInt(l2ToL1Log.shardId),\n            isService: l2ToL1Log.isService,\n            sender: l2ToL1Log.sender,\n            key: l2ToL1Log.key,\n            value: l2ToL1Log.value,\n            transactionHash: l2ToL1Log.transactionHash,\n            logIndex: hexToBigInt(l2ToL1Log.logIndex)\n          };\n        })\n      };\n    }\n  }),\n  transactionRequest: /*#__PURE__*/defineTransactionRequest({\n    exclude: ['customSignature', 'factoryDeps', 'gasPerPubdata', 'paymaster', 'paymasterInput'],\n    format(args) {\n      if (args.gasPerPubdata || args.paymaster && args.paymasterInput || args.factoryDeps || args.customSignature) return {\n        eip712Meta: {\n          ...(args.gasPerPubdata ? {\n            gasPerPubdata: toHex(args.gasPerPubdata)\n          } : {\n            gasPerPubdata: toHex(gasPerPubdataDefault)\n          }),\n          ...(args.paymaster && args.paymasterInput ? {\n            paymasterParams: {\n              paymaster: args.paymaster,\n              paymasterInput: Array.from(hexToBytes(args.paymasterInput))\n            }\n          } : {}),\n          ...(args.factoryDeps ? {\n            factoryDeps: args.factoryDeps.map(dep => Array.from(hexToBytes(dep)))\n          } : {}),\n          ...(args.customSignature ? {\n            customSignature: Array.from(hexToBytes(args.customSignature))\n          } : {})\n        },\n        type: '0x71'\n      };\n      return {};\n    }\n  })\n};\n//# sourceMappingURL=formatters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}