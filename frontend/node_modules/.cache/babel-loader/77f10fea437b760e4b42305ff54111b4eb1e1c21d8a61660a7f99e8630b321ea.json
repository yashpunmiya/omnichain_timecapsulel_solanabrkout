{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonTypeBuilder = void 0;\nconst index_1 = require(\"../any/index\");\nconst index_2 = require(\"../array/index\");\nconst index_3 = require(\"../boolean/index\");\nconst index_4 = require(\"../composite/index\");\nconst index_5 = require(\"../const/index\");\nconst index_6 = require(\"../deref/index\");\nconst index_7 = require(\"../enum/index\");\nconst index_8 = require(\"../exclude/index\");\nconst index_9 = require(\"../extends/index\");\nconst index_10 = require(\"../extract/index\");\nconst index_11 = require(\"../indexed/index\");\nconst index_12 = require(\"../integer/index\");\nconst index_13 = require(\"../intersect/index\");\nconst index_14 = require(\"../intrinsic/index\");\nconst index_15 = require(\"../keyof/index\");\nconst index_16 = require(\"../literal/index\");\nconst index_17 = require(\"../mapped/index\");\nconst index_18 = require(\"../never/index\");\nconst index_19 = require(\"../not/index\");\nconst index_20 = require(\"../null/index\");\nconst index_21 = require(\"../number/index\");\nconst index_22 = require(\"../object/index\");\nconst index_23 = require(\"../omit/index\");\nconst index_24 = require(\"../optional/index\");\nconst index_25 = require(\"../partial/index\");\nconst index_26 = require(\"../pick/index\");\nconst index_27 = require(\"../readonly/index\");\nconst index_28 = require(\"../readonly-optional/index\");\nconst index_29 = require(\"../record/index\");\nconst index_30 = require(\"../recursive/index\");\nconst index_31 = require(\"../ref/index\");\nconst index_32 = require(\"../required/index\");\nconst index_33 = require(\"../rest/index\");\nconst index_34 = require(\"../strict/index\");\nconst index_35 = require(\"../string/index\");\nconst index_36 = require(\"../template-literal/index\");\nconst index_37 = require(\"../transform/index\");\nconst index_38 = require(\"../tuple/index\");\nconst index_39 = require(\"../union/index\");\nconst index_40 = require(\"../unknown/index\");\nconst index_41 = require(\"../unsafe/index\");\n/** Json Type Builder with Static Resolution for TypeScript */\nclass JsonTypeBuilder {\n  // ------------------------------------------------------------------------\n  // Strict\n  // ------------------------------------------------------------------------\n  /**\n   * @deprecated `[Json]` Omits compositing symbols from this schema. It is recommended\n   * to use the JSON parse/stringify to remove compositing symbols if needed. This\n   * is how Strict works internally.\n   *\n   * ```typescript\n   * JSON.parse(JSON.stringify(Type.String()))\n   * ```\n   */\n  Strict(schema) {\n    return (0, index_34.Strict)(schema);\n  }\n  // ------------------------------------------------------------------------\n  // Modifiers\n  // ------------------------------------------------------------------------\n  /** `[Json]` Creates a Readonly and Optional property */\n  ReadonlyOptional(schema) {\n    return (0, index_28.ReadonlyOptional)(schema);\n  }\n  /** `[Json]` Creates a Readonly property */\n  Readonly(schema, enable) {\n    return (0, index_27.Readonly)(schema, enable ?? true);\n  }\n  /** `[Json]` Creates a Optional property */\n  Optional(schema, enable) {\n    return (0, index_24.Optional)(schema, enable ?? true);\n  }\n  // ------------------------------------------------------------------------\n  // Types\n  // ------------------------------------------------------------------------\n  /** `[Json]` Creates an Any type */\n  Any(options) {\n    return (0, index_1.Any)(options);\n  }\n  /** `[Json]` Creates an Array type */\n  Array(schema, options) {\n    return (0, index_2.Array)(schema, options);\n  }\n  /** `[Json]` Creates a Boolean type */\n  Boolean(options) {\n    return (0, index_3.Boolean)(options);\n  }\n  /** `[Json]` Intrinsic function to Capitalize LiteralString types */\n  Capitalize(schema, options) {\n    return (0, index_14.Capitalize)(schema, options);\n  }\n  /** `[Json]` Creates a Composite object type */\n  Composite(schemas, options) {\n    return (0, index_4.Composite)(schemas, options); // (error) TS 5.4.0-dev - review TComposite implementation\n  }\n  /** `[JavaScript]` Creates a readonly const type from the given value. */\n  Const(value, options) {\n    return (0, index_5.Const)(value, options);\n  }\n  /** `[Json]` Creates a dereferenced type */\n  Deref(schema, references) {\n    return (0, index_6.Deref)(schema, references);\n  }\n  /** `[Json]` Creates a Enum type */\n  Enum(item, options) {\n    return (0, index_7.Enum)(item, options);\n  }\n  /** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */\n  Exclude(unionType, excludedMembers, options) {\n    return (0, index_8.Exclude)(unionType, excludedMembers, options);\n  }\n  /** `[Json]` Creates a Conditional type */\n  Extends(L, R, T, F, options) {\n    return (0, index_9.Extends)(L, R, T, F, options);\n  }\n  /** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */\n  Extract(type, union, options) {\n    return (0, index_10.Extract)(type, union, options);\n  }\n  /** `[Json]` Returns an Indexed property type for the given keys */\n  Index(schema, unresolved, options) {\n    return (0, index_11.Index)(schema, unresolved, options);\n  }\n  /** `[Json]` Creates an Integer type */\n  Integer(options) {\n    return (0, index_12.Integer)(options);\n  }\n  /** `[Json]` Creates an Intersect type */\n  Intersect(T, options) {\n    return (0, index_13.Intersect)(T, options);\n  }\n  /** `[Json]` Creates a KeyOf type */\n  KeyOf(schema, options) {\n    return (0, index_15.KeyOf)(schema, options);\n  }\n  /** `[Json]` Creates a Literal type */\n  Literal(value, options) {\n    return (0, index_16.Literal)(value, options);\n  }\n  /** `[Json]` Intrinsic function to Lowercase LiteralString types */\n  Lowercase(schema, options) {\n    return (0, index_14.Lowercase)(schema, options);\n  }\n  /** `[Json]` Creates a Mapped object type */\n  Mapped(key, map, options) {\n    return (0, index_17.Mapped)(key, map, options);\n  }\n  /** `[Json]` Creates a Never type */\n  Never(options) {\n    return (0, index_18.Never)(options);\n  }\n  /** `[Json]` Creates a Not type */\n  Not(schema, options) {\n    return (0, index_19.Not)(schema, options);\n  }\n  /** `[Json]` Creates a Null type */\n  Null(options) {\n    return (0, index_20.Null)(options);\n  }\n  /** `[Json]` Creates a Number type */\n  Number(options) {\n    return (0, index_21.Number)(options);\n  }\n  /** `[Json]` Creates an Object type */\n  Object(properties, options) {\n    return (0, index_22.Object)(properties, options);\n  }\n  /** `[Json]` Constructs a type whose keys are omitted from the given type */\n  Omit(schema, unresolved, options) {\n    return (0, index_23.Omit)(schema, unresolved, options);\n  }\n  /** `[Json]` Constructs a type where all properties are optional */\n  Partial(schema, options) {\n    return (0, index_25.Partial)(schema, options);\n  }\n  /** `[Json]` Constructs a type whose keys are picked from the given type */\n  Pick(schema, unresolved, options) {\n    return (0, index_26.Pick)(schema, unresolved, options);\n  }\n  /** `[Json]` Creates a Record type */\n  Record(key, schema, options) {\n    return (0, index_29.Record)(key, schema, options);\n  }\n  /** `[Json]` Creates a Recursive type */\n  Recursive(callback, options) {\n    return (0, index_30.Recursive)(callback, options);\n  }\n  /** `[Json]` Creates a Ref type. */\n  Ref(unresolved, options) {\n    return (0, index_31.Ref)(unresolved, options);\n  }\n  /** `[Json]` Constructs a type where all properties are required */\n  Required(schema, options) {\n    return (0, index_32.Required)(schema, options);\n  }\n  /** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */\n  Rest(schema) {\n    return (0, index_33.Rest)(schema);\n  }\n  /** `[Json]` Creates a String type */\n  String(options) {\n    return (0, index_35.String)(options);\n  }\n  /** `[Json]` Creates a TemplateLiteral type */\n  TemplateLiteral(unresolved, options) {\n    return (0, index_36.TemplateLiteral)(unresolved, options);\n  }\n  /** `[Json]` Creates a Transform type */\n  Transform(schema) {\n    return (0, index_37.Transform)(schema);\n  }\n  /** `[Json]` Creates a Tuple type */\n  Tuple(items, options) {\n    return (0, index_38.Tuple)(items, options);\n  }\n  /** `[Json]` Intrinsic function to Uncapitalize LiteralString types */\n  Uncapitalize(schema, options) {\n    return (0, index_14.Uncapitalize)(schema, options);\n  }\n  /** `[Json]` Creates a Union type */\n  Union(schemas, options) {\n    return (0, index_39.Union)(schemas, options);\n  }\n  /** `[Json]` Creates an Unknown type */\n  Unknown(options) {\n    return (0, index_40.Unknown)(options);\n  }\n  /** `[Json]` Creates a Unsafe type that will infers as the generic argument T */\n  Unsafe(options) {\n    return (0, index_41.Unsafe)(options);\n  }\n  /** `[Json]` Intrinsic function to Uppercase LiteralString types */\n  Uppercase(schema, options) {\n    return (0, index_14.Uppercase)(schema, options);\n  }\n}\nexports.JsonTypeBuilder = JsonTypeBuilder;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}