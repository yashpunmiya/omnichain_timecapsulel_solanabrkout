{"ast":null,"code":"import { encodeEventTopics } from '../../utils/abi/encodeEventTopics.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js';\n/**\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n *\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n *\n * @param client - Client to use\n * @param parameters - {@link CreateContractEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n * })\n */\nexport async function createContractEventFilter(client, parameters) {\n  const {\n    address,\n    abi,\n    args,\n    eventName,\n    fromBlock,\n    strict,\n    toBlock\n  } = parameters;\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter'\n  });\n  const topics = eventName ? encodeEventTopics({\n    abi,\n    args,\n    eventName\n  }) : undefined;\n  const id = await client.request({\n    method: 'eth_newFilter',\n    params: [{\n      address,\n      fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n      toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n      topics\n    }]\n  });\n  return {\n    abi,\n    args,\n    eventName,\n    id,\n    request: getRequest(id),\n    strict: Boolean(strict),\n    type: 'event'\n  };\n}\n//# sourceMappingURL=createContractEventFilter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}