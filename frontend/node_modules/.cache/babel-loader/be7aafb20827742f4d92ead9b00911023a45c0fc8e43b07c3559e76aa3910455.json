{"ast":null,"code":"import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class HttpRequestError extends BaseError {\n  constructor({\n    body,\n    cause,\n    details,\n    headers,\n    status,\n    url\n  }) {\n    super('HTTP request failed.', {\n      cause,\n      details,\n      metaMessages: [status && `Status: ${status}`, `URL: ${getUrl(url)}`, body && `Request body: ${stringify(body)}`].filter(Boolean),\n      name: 'HttpRequestError'\n    });\n    Object.defineProperty(this, \"body\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"headers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"status\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"url\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.body = body;\n    this.headers = headers;\n    this.status = status;\n    this.url = url;\n  }\n}\nexport class WebSocketRequestError extends BaseError {\n  constructor({\n    body,\n    cause,\n    details,\n    url\n  }) {\n    super('WebSocket request failed.', {\n      cause,\n      details,\n      metaMessages: [`URL: ${getUrl(url)}`, body && `Request body: ${stringify(body)}`].filter(Boolean),\n      name: 'WebSocketRequestError'\n    });\n  }\n}\nexport class RpcRequestError extends BaseError {\n  constructor({\n    body,\n    error,\n    url\n  }) {\n    super('RPC Request failed.', {\n      cause: error,\n      details: error.message,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n      name: 'RpcRequestError'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.code = error.code;\n    this.data = error.data;\n  }\n}\nexport class SocketClosedError extends BaseError {\n  constructor({\n    url\n  } = {}) {\n    super('The socket has been closed.', {\n      metaMessages: [url && `URL: ${getUrl(url)}`].filter(Boolean),\n      name: 'SocketClosedError'\n    });\n  }\n}\nexport class TimeoutError extends BaseError {\n  constructor({\n    body,\n    url\n  }) {\n    super('The request took too long to respond.', {\n      details: 'The request timed out.',\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n      name: 'TimeoutError'\n    });\n  }\n}\n//# sourceMappingURL=request.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}