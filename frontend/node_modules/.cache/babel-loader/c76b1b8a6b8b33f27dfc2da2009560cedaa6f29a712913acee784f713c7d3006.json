{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Extract = Extract;\nconst type_1 = require(\"../create/type\");\nconst index_1 = require(\"../union/index\");\nconst index_2 = require(\"../never/index\");\nconst index_3 = require(\"../extends/index\");\nconst extract_from_mapped_result_1 = require(\"./extract-from-mapped-result\");\nconst extract_from_template_literal_1 = require(\"./extract-from-template-literal\");\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nconst kind_1 = require(\"../guard/kind\");\nfunction ExtractRest(L, R) {\n  const extracted = L.filter(inner => (0, index_3.ExtendsCheck)(inner, R) !== index_3.ExtendsResult.False);\n  return extracted.length === 1 ? extracted[0] : (0, index_1.Union)(extracted);\n}\n/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */\nfunction Extract(L, R, options) {\n  // overloads\n  if ((0, kind_1.IsTemplateLiteral)(L)) return (0, type_1.CreateType)((0, extract_from_template_literal_1.ExtractFromTemplateLiteral)(L, R), options);\n  if ((0, kind_1.IsMappedResult)(L)) return (0, type_1.CreateType)((0, extract_from_mapped_result_1.ExtractFromMappedResult)(L, R), options);\n  // prettier-ignore\n  return (0, type_1.CreateType)((0, kind_1.IsUnion)(L) ? ExtractRest(L.anyOf, R) : (0, index_3.ExtendsCheck)(L, R) !== index_3.ExtendsResult.False ? L : (0, index_2.Never)(), options);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}