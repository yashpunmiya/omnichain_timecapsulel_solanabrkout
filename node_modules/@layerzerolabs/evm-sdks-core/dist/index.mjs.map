{"version":3,"sources":["../src/error-parser.ts"],"names":[],"mappings":";AAAA,SAAS,aAAa;AAef,IAAM,yBAAN,cAAqC,MAAuB;AAAA,EAG/D,YAAY,SAAiB,OAAe,MAA2B;AACnE,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AACJ;AAKO,IAAM,uBAAN,MAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,YAAmB,KAAU;AAAV;AAAA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQtB,mBAAmB,MAA2C;AAClE,QAAI;AACA,YAAM,SAAS,IAAI,MAAM,UAAU,KAAK,GAAG;AAC3C,YAAM,SAAS,OAAO,WAAW,IAAI;AACrC,UAAI,CAAC;AAAQ,eAAO;AACpB,YAAM,EAAE,MAAM,OAAO,KAAK,IAAI;AAC9B,YAAM,gBAAqC,CAAC;AAC5C,UAAI,UAAU,GAAG,KAAK;AACtB,aAAO,cAAc,OAAO,QAAQ,CAAC,EAAE,MAAM,SAAS,KAAK,GAAG,MAAM;AAChE,sBAAc,KAAK,EAAE,OAAO,SAAS,MAAM,OAAO,KAAK,CAAC,GAAG,SAAS,KAAK,KAAK,CAAC,EAAE,CAAC;AAClF,YAAI;AAAS,qBAAW,GAAG,OAAO;AAClC,mBAAW,GAAG,KAAK,CAAC,CAAC;AAAA,MACzB,CAAC;AACD,aAAO,EAAE,SAAS,QAAQ,MAAM,GAAG,EAAE,GAAG,MAAM,0BAA0B,OAAO,MAAM,cAAc;AAAA,IACvG,SAAS,OAAO;AACZ,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,MAA2C;AACpD,UAAM,QAAQ,KAAK,mBAAmB,IAAI;AAE1C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,MAAM,MAAc,mBAAiD;AACxE,UAAM,QAAQ,KAAK,mBAAmB,IAAI;AAC1C,QAAI,OAAO;AACP,YAAM,QAAQ,IAAI,uBAAuB,MAAM,SAAS,MAAM,OAAO,MAAM,IAAI;AAC/E,UAAI;AAAmB,cAAM,kBAAkB,OAAO,iBAAiB;AACvE,YAAM;AAAA,IACV;AAAA,EACJ;AACJ","sourcesContent":["import { utils } from 'ethers'\n\nexport interface LayerZeroParsedError {\n    message: string\n    name: string\n    cause: string\n    args: FormattedErrorArg[]\n}\nexport type Abi = ConstructorParameters<typeof utils.Interface>[0]\nexport interface FormattedErrorArg {\n    param: string | null\n    type: string\n    value: string\n}\n\nexport class LayerZeroContractError extends Error implements Error {\n    public args: FormattedErrorArg[]\n    public cause: string\n    constructor(message: string, cause: string, args: FormattedErrorArg[]) {\n        super(message)\n        this.name = 'LayerZeroContractError'\n        this.cause = cause\n        this.args = args\n    }\n}\n\n/**\n * Class responsible for parsing errors related to LayerZero operations.\n */\nexport class LayerZeroErrorParser {\n    /**\n     * Creates an instance of LayerZeroErrorParser.\n     * @param abi The error abi of the contracts that are interacted with.\n     */\n    constructor(public abi: Abi) {}\n\n    /**\n     * Parses a contract error from a given data string.\n     * @param data The error data string to parse.\n     * @returns The parsed error information or null if parsing fails.\n     * @private\n     */\n    private parseContractError(data: string): LayerZeroParsedError | null {\n        try {\n            const interf = new utils.Interface(this.abi)\n            const parsed = interf.parseError(data)\n            if (!parsed) return null\n            const { name: cause, args } = parsed\n            const formattedArgs: FormattedErrorArg[] = []\n            let message = `${cause}, `\n            parsed.errorFragment.inputs.forEach(({ name: argName, type }, i) => {\n                formattedArgs.push({ param: argName, type, value: args[i]?.toString() ?? args[i] })\n                if (argName) message += `${argName} `\n                message += `${args[i]}, `\n            })\n            return { message: message.slice(0, -2), name: 'LayerZeroContractError', cause, args: formattedArgs }\n        } catch (error) {\n            return null\n        }\n    }\n\n    /**\n     * Parses an error from a given data string.\n     * @param data The error data string to parse.\n     * @returns The parsed error information or null if the error is unrecognized.\n     */\n    public parse(data: string): LayerZeroParsedError | null {\n        const error = this.parseContractError(data)\n        // add more error parsers here as needed, for now only contract errors are supported\n        return error\n    }\n\n    /**\n     * Checks for a contract error in the given data string, throwing a `LayerZeroContractError` if one is found.\n     * @param data The error data string to check.\n     * @param cleanUpStackTrace An optional function to clean up the stack. This function and all function above in the stack will be excluded from the trace.\n     * @throws {LayerZeroContractError} Throws a LayerZeroContractError if an error is found corresponding to the data string.\n     */\n    public check(data: string, cleanUpStackTrace?: (...args: any) => any): void {\n        const error = this.parseContractError(data)\n        if (error) {\n            const lzErr = new LayerZeroContractError(error.message, error.cause, error.args)\n            if (cleanUpStackTrace) Error.captureStackTrace(lzErr, cleanUpStackTrace)\n            throw lzErr\n        }\n    }\n}\n"]}