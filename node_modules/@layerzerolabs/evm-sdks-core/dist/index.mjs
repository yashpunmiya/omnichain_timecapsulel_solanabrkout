import { utils } from 'ethers';

// src/error-parser.ts
var LayerZeroContractError = class extends Error {
  constructor(message, cause, args) {
    super(message);
    this.name = "LayerZeroContractError";
    this.cause = cause;
    this.args = args;
  }
};
var LayerZeroErrorParser = class {
  /**
   * Creates an instance of LayerZeroErrorParser.
   * @param abi The error abi of the contracts that are interacted with.
   */
  constructor(abi) {
    this.abi = abi;
  }
  /**
   * Parses a contract error from a given data string.
   * @param data The error data string to parse.
   * @returns The parsed error information or null if parsing fails.
   * @private
   */
  parseContractError(data) {
    try {
      const interf = new utils.Interface(this.abi);
      const parsed = interf.parseError(data);
      if (!parsed)
        return null;
      const { name: cause, args } = parsed;
      const formattedArgs = [];
      let message = `${cause}, `;
      parsed.errorFragment.inputs.forEach(({ name: argName, type }, i) => {
        formattedArgs.push({ param: argName, type, value: args[i]?.toString() ?? args[i] });
        if (argName)
          message += `${argName} `;
        message += `${args[i]}, `;
      });
      return { message: message.slice(0, -2), name: "LayerZeroContractError", cause, args: formattedArgs };
    } catch (error) {
      return null;
    }
  }
  /**
   * Parses an error from a given data string.
   * @param data The error data string to parse.
   * @returns The parsed error information or null if the error is unrecognized.
   */
  parse(data) {
    const error = this.parseContractError(data);
    return error;
  }
  /**
   * Checks for a contract error in the given data string, throwing a `LayerZeroContractError` if one is found.
   * @param data The error data string to check.
   * @param cleanUpStackTrace An optional function to clean up the stack. This function and all function above in the stack will be excluded from the trace.
   * @throws {LayerZeroContractError} Throws a LayerZeroContractError if an error is found corresponding to the data string.
   */
  check(data, cleanUpStackTrace) {
    const error = this.parseContractError(data);
    if (error) {
      const lzErr = new LayerZeroContractError(error.message, error.cause, error.args);
      if (cleanUpStackTrace)
        Error.captureStackTrace(lzErr, cleanUpStackTrace);
      throw lzErr;
    }
  }
};

export { LayerZeroContractError, LayerZeroErrorParser };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.mjs.map