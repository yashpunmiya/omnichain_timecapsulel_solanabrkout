export { al as AddressCast, am as AddressCast__factory, cp as AddressSizeConfig, cq as AddressSizeConfig__factory, bt as ArbitrumDVNAdapterL1, bu as ArbitrumDVNAdapterL1__factory, bv as ArbitrumDVNAdapterL2, bw as ArbitrumDVNAdapterL2__factory, bx as AxelarDVNAdapter, bB as AxelarDVNAdapterFeeLib, bC as AxelarDVNAdapterFeeLib__factory, by as AxelarDVNAdapter__factory, ar as BlockedMessageLib, as as BlockedMessageLib__factory, bD as CCIPDVNAdapter, bF as CCIPDVNAdapterFeeLib, bG as CCIPDVNAdapterFeeLib__factory, bE as CCIPDVNAdapter__factory, C as ComposeSentEvent, bT as DVN, bH as DVNAdapterBase, bI as DVNAdapterBase__factory, bL as DVNAdapterMessageCodec, bM as DVNAdapterMessageCodec__factory, z as DVNDecompressor, A as DVNDecompressor__factory, bV as DVNFeeLib, bW as DVNFeeLib__factory, cd as DVNOptions, ce as DVNOptions__factory, bU as DVN__factory, bR as DeadDVN, bS as DeadDVN__factory, D as DecompressorExtension, y as DecompressorExtension__factory, E as EndpointV2, n as EndpointV2Alt, H as EndpointV2Alt__factory, o as EndpointV2View, p as EndpointV2ViewUpgradeable, J as EndpointV2ViewUpgradeable__factory, I as EndpointV2View__factory, G as EndpointV2__factory, an as Errors, ao as Errors__factory, K as Executor, B as ExecutorDecompressor, F as ExecutorDecompressor__factory, q as ExecutorFeeLib, Q as ExecutorFeeLib__factory, at as ExecutorOptions, au as ExecutorOptions__factory, L as Executor__factory, da as GetARGsTypeFromFactory, d9 as GetContractTypeFromFactory, bZ as IAxelarDVNAdapter, b$ as IAxelarDVNAdapterFeeLib, c0 as IAxelarDVNAdapterFeeLib__factory, b_ as IAxelarDVNAdapter__factory, c1 as ICCIPDVNAdapter, c3 as ICCIPDVNAdapterFeeLib, c4 as ICCIPDVNAdapterFeeLib__factory, c2 as ICCIPDVNAdapter__factory, c5 as IDVN, c7 as IDVNFeeLib, c8 as IDVNFeeLib__factory, c6 as IDVN__factory, U as IExecutor, X as IExecutorFeeLib, Y as IExecutorFeeLib__factory, V as IExecutor__factory, Z as ILayerZeroComposer, _ as ILayerZeroComposer__factory, c9 as ILayerZeroDVN, ca as ILayerZeroDVN__factory, N as ILayerZeroEndpointV2, O as ILayerZeroEndpointV2__factory, $ as ILayerZeroExecutor, a0 as ILayerZeroExecutor__factory, a1 as ILayerZeroPriceFeed, a2 as ILayerZeroPriceFeed__factory, cB as ILayerZeroReceiveLibrary, cC as ILayerZeroReceiveLibrary__factory, a3 as ILayerZeroReceiver, a4 as ILayerZeroReceiver__factory, a5 as ILayerZeroTreasury, a6 as ILayerZeroTreasury__factory, a7 as IMessageLib, cr as IMessageLibE1, cs as IMessageLibE1__factory, a9 as IMessageLibManager, aa as IMessageLibManager__factory, a8 as IMessageLib__factory, ab as IMessagingChannel, ac as IMessagingChannel__factory, ad as IMessagingComposer, ae as IMessagingComposer__factory, af as IMessagingContext, ag as IMessagingContext__factory, ct as INonceContract, cu as INonceContract__factory, aI as IOAppComposer, aJ as IOAppComposer__factory, aK as IOAppCore, aL as IOAppCore__factory, aM as IOAppMsgInspector, aN as IOAppMsgInspector__factory, aO as IOAppOptionsType3, aP as IOAppOptionsType3__factory, be as IOAppPreCrimeSimulator, bf as IOAppPreCrimeSimulator__factory, aQ as IOAppReceiver, aR as IOAppReceiver__factory, b4 as IOFT, b5 as IOFT__factory, bg as IPreCrime, bh as IPreCrime__factory, bJ as IReceiveUln, cH as IReceiveUln301, cI as IReceiveUln301__factory, cT as IReceiveUln302, cU as IReceiveUln302__factory, cb as IReceiveUlnE2, cc as IReceiveUlnE2__factory, ch as IReceiveUlnView, ci as IReceiveUlnView__factory, bK as IReceiveUln__factory, ah as ISendLib, bz as ISendLibBase, bA as ISendLibBase__factory, ai as ISendLib__factory, cv as ITreasuryFeeHandler, cw as ITreasuryFeeHandler__factory, cx as IUltraLightNode301, cy as IUltraLightNode301__factory, aj as IWorker, ak as IWorker__factory, cj as LzExecutor, ck as LzExecutor__factory, M as MessageLibBase, ax as MessageLibBase__factory, r as MessageLibManager, ay as MessageLibManager__factory, s as MessagingChannel, az as MessagingChannel__factory, t as MessagingComposer, aA as MessagingComposer__factory, u as MessagingContext, aB as MessagingContext__factory, d8 as MinEthersFactory, bX as MultiSig, bY as MultiSig__factory, cz as NonceContractMock, cA as NonceContractMock__factory, aW as OApp, aY as OAppCore, aZ as OAppCore__factory, aS as OAppOptionsType3, aT as OAppOptionsType3__factory, bi as OAppPreCrimeSimulator, bj as OAppPreCrimeSimulator__factory, a_ as OAppReceiver, a$ as OAppReceiver__factory, b0 as OAppSender, b1 as OAppSender__factory, aX as OApp__factory, b6 as OFT, b8 as OFTAdapter, b9 as OFTAdapter__factory, ba as OFTCore, bb as OFTCore__factory, b7 as OFT__factory, aC as OmniCounter, aE as OmniCounterAbstract, aF as OmniCounterAbstract__factory, aG as OmniCounterPreCrime, aH as OmniCounterPreCrime__factory, aD as OmniCounter__factory, d7 as OnEvent, bN as OptimismDVNAdapterL1, bO as OptimismDVNAdapterL1__factory, bP as OptimismDVNAdapterL2, bQ as OptimismDVNAdapterL2__factory, aU as OptionsBuilder, aV as OptionsBuilder__factory, P as PacketSentEvent, b as PacketSentEvent301, a as PacketVerifiedEvent, bk as PreCrime, bc as PreCrimeE1, bd as PreCrimeE1__factory, bl as PreCrime__factory, v as PriceFeed, bm as PriceFeed__factory, db as PromiseOrValue, c$ as ProxyAdmin, d0 as ProxyAdmin__factory, b2 as RateLimiter, b3 as RateLimiter__factory, cD as ReceiveLibBaseE1, cE as ReceiveLibBaseE1__factory, R as ReceiveLibBaseE2, bp as ReceiveLibBaseE2__factory, cF as ReceiveUln301, cJ as ReceiveUln301View, cK as ReceiveUln301View__factory, cG as ReceiveUln301__factory, cR as ReceiveUln302, cV as ReceiveUln302View, cW as ReceiveUln302View__factory, cS as ReceiveUln302__factory, cl as ReceiveUlnBase, cm as ReceiveUlnBase__factory, S as SendLibBase, cL as SendLibBaseE1, cM as SendLibBaseE1__factory, w as SendLibBaseE2, br as SendLibBaseE2__factory, bq as SendLibBase__factory, cN as SendUln301, cO as SendUln301__factory, cX as SendUln302, cY as SendUln302__factory, cn as SendUlnBase, co as SendUlnBase__factory, av as SimpleMessageLib, aw as SimpleMessageLib__factory, ap as Transfer, aq as Transfer__factory, bn as TransparentUpgradeableProxy, bo as TransparentUpgradeableProxy__factory, T as Treasury, cP as TreasuryFeeHandler, cQ as TreasuryFeeHandler__factory, bs as Treasury__factory, d4 as TypedEvent, d5 as TypedEventFilter, d6 as TypedListener, cZ as UlnBase, c_ as UlnBase__factory, cf as UlnOptions, cg as UlnOptions__factory, W as Worker, d1 as WorkerUpgradeable, d2 as WorkerUpgradeable__factory, d3 as Worker__factory, c as decompressor, i as executorSol, x as factories, d as interfaces, e as libs, f as messagelib, g as oapp, h as oft, j as precrime, k as proxy, l as uln, m as upgradeable } from './index-KTPkftIR.js';
import { Abi, LayerZeroParsedError } from '@layerzerolabs/evm-sdks-core';
import 'ethers';
import '@ethersproject/providers';
import '@ethersproject/abi';

var errors = [
	"error AddressCast_InvalidAddress()",
	"error AddressCast_InvalidSizeForAddress()",
	"error AddressSizeConfig_AddressSizeAlreadySet()",
	"error AddressSizeConfig_InvalidAddressSize()",
	"error AdminAccessDenied()",
	"error AdminCallFailed()",
	"error AxelarDVNAdapter_EidNotSupported(uint32 eid)",
	"error AxelarDVNAdapter_InsufficientBalance(uint256 actual, uint256 requested)",
	"error AxelarDVNAdapter_OnlyWorkerFeeLib()",
	"error AxelarDVNAdapter_OptionsUnsupported()",
	"error AxelarDVNAdapter_UntrustedPeer(string chainName, string peer)",
	"error CCIPDVNAdapter_EidNotSupported(uint32 eid)",
	"error CCIPDVNAdapter_InvalidRouter(address router)",
	"error CCIPDVNAdapter_OptionsUnsupported()",
	"error CCIPDVNAdapter_UntrustedPeer(uint64 chainSelector, bytes peer)",
	"error CrimeFound(bytes crime)",
	"error DVN_DuplicatedHash(bytes32 executableHash)",
	"error DVN_EidNotSupported(uint32 eid)",
	"error DVN_InstructionExpired()",
	"error DVN_InvalidDVNIdx()",
	"error DVN_InvalidDVNOptions(uint256 cursor)",
	"error DVN_InvalidRole(bytes32 role)",
	"error DVN_InvalidSignatures()",
	"error DVN_InvalidTarget(address target)",
	"error DVN_InvalidVid(uint32 vid)",
	"error DVN_OnlySelf()",
	"error DVN_UnsupportedOptionType(uint8 optionType)",
	"error DVNAdapter_InsufficientBalance(uint256 actual, uint256 requested)",
	"error DVNAdapter_InvalidMessageSize()",
	"error DVNAdapter_MissingRecieveLib(address sendLib, uint32 dstEid)",
	"error DVNAdapter_NotImplemented()",
	"error Executor_EidNotSupported(uint32 eid)",
	"error Executor_InvalidExecutorOptions(uint256 cursor)",
	"error Executor_InvalidLzComposeOption()",
	"error Executor_InvalidLzReceiveOption()",
	"error Executor_InvalidNativeDropOption()",
	"error Executor_NativeAmountExceedsCap(uint256 amount, uint256 cap)",
	"error Executor_NoOptions()",
	"error Executor_UnsupportedOptionType(uint8 optionType)",
	"error Executor_ZeroLzComposeGasProvided()",
	"error Executor_ZeroLzReceiveGasProvided()",
	"error ImplementationCallFailed()",
	"error IncorrectDictAccess(uint256 value)",
	"error InspectionFailed(bytes message, bytes options)",
	"error InvalidAddress()",
	"error InvalidDelegate()",
	"error InvalidEndpoint(address expected, address actual)",
	"error InvalidEndpointCall()",
	"error InvalidLocalDecimals()",
	"error InvalidOptions(bytes options)",
	"error InvalidOptionType(uint16 optionType)",
	"error InvalidSimulationResult(uint32 eid, bytes reason)",
	"error InvalidSize(uint256 max, uint256 actual)",
	"error LZ_AlreadyRegistered()",
	"error LZ_ComposeExists()",
	"error LZ_ComposeNotFound(bytes32 expected, bytes32 actual)",
	"error LZ_DefaultReceiveLibUnavailable()",
	"error LZ_DefaultSendLibUnavailable()",
	"error LZ_InsufficientFee(uint256 requiredNative, uint256 suppliedNative, uint256 requiredLzToken, uint256 suppliedLzToken)",
	"error LZ_InvalidAmount(uint256 required, uint256 supplied)",
	"error LZ_InvalidArgument()",
	"error LZ_InvalidExpiry()",
	"error LZ_InvalidNonce(uint64 nonce)",
	"error LZ_InvalidPayloadHash()",
	"error LZ_InvalidReceiveLibrary()",
	"error LZ_LzTokenUnavailable()",
	"error LZ_MessageLib_CannotWithdrawAltToken()",
	"error LZ_MessageLib_InsufficientMsgValue()",
	"error LZ_MessageLib_InvalidAmount(uint256 requested, uint256 available)",
	"error LZ_MessageLib_InvalidExecutor()",
	"error LZ_MessageLib_InvalidMessageSize(uint256 actual, uint256 max)",
	"error LZ_MessageLib_InvalidPath()",
	"error LZ_MessageLib_InvalidSender()",
	"error LZ_MessageLib_LzTokenPaymentAddressMustBeSender()",
	"error LZ_MessageLib_NotTreasury()",
	"error LZ_MessageLib_OnlyEndpoint()",
	"error LZ_MessageLib_OnlyExecutor()",
	"error LZ_MessageLib_TransferFailed()",
	"error LZ_MessageLib_ZeroMessageSize()",
	"error LZ_NotImplemented()",
	"error LZ_OnlyAltToken()",
	"error LZ_OnlyNonDefaultLib()",
	"error LZ_OnlyReceiveLib()",
	"error LZ_OnlyRegisteredLib()",
	"error LZ_OnlyRegisteredOrDefaultLib()",
	"error LZ_OnlySendLib()",
	"error LZ_PathNotInitializable()",
	"error LZ_PathNotVerifiable()",
	"error LZ_PayloadHashNotFound(bytes32 expected, bytes32 actual)",
	"error LZ_PriceFeed_InsufficientFee(uint256 provided, uint256 required)",
	"error LZ_PriceFeed_NotAnOPStack(uint32 l2Eid)",
	"error LZ_PriceFeed_OnlyPriceUpdater()",
	"error LZ_SameValue()",
	"error LZ_SendReentrancy()",
	"error LZ_Treasury_LzTokenNotEnabled()",
	"error LZ_TreasuryFeeHandler_InvalidAmount(uint256 required, uint256 supplied)",
	"error LZ_TreasuryFeeHandler_OnlyOnSending()",
	"error LZ_TreasuryFeeHandler_OnlySendLibrary()",
	"error LZ_ULN_AtLeastOneDVN()",
	"error LZ_ULN_InvalidConfigType(uint32 configType)",
	"error LZ_ULN_InvalidConfigType(uint256 configType)",
	"error LZ_ULN_InvalidConfirmations()",
	"error LZ_ULN_InvalidEid()",
	"error LZ_ULN_InvalidLegacyType1Option()",
	"error LZ_ULN_InvalidLegacyType2Option()",
	"error LZ_ULN_InvalidOptionalDVNCount()",
	"error LZ_ULN_InvalidOptionalDVNThreshold()",
	"error LZ_ULN_InvalidPacketHeader()",
	"error LZ_ULN_InvalidPacketVersion()",
	"error LZ_ULN_InvalidRequiredDVNCount()",
	"error LZ_ULN_InvalidWorkerId(uint8 workerId)",
	"error LZ_ULN_InvalidWorkerOptions(uint256 cursor)",
	"error LZ_ULN_Unsorted()",
	"error LZ_ULN_UnsupportedEid(uint32 eid)",
	"error LZ_ULN_UnsupportedOptionType(uint16 optionType)",
	"error LZ_ULN_Verifying()",
	"error LZ_Unauthorized()",
	"error LZ_UnsupportedEid()",
	"error LZ_UnsupportedInterface()",
	"error LZ_ZeroLzTokenFee()",
	"error LzExecutor_Executed()",
	"error LzExecutor_ReceiveLibViewNotSet()",
	"error LzExecutor_Verifying()",
	"error LzTokenIsAddressZero()",
	"error LzTokenUnavailable()",
	"error MultiSig_OnlySigner()",
	"error MultiSig_QuorumIsZero()",
	"error MultiSig_SignersSizeIsLessThanQuorum(uint64 signersSize, uint64 quorum)",
	"error MultiSig_StateAlreadySet(address signer, bool active)",
	"error MultiSig_UnorderedSigners()",
	"error NoPeer()",
	"error NoPeer(uint32 eid)",
	"error NotApprovedByGateway()",
	"error NotEnoughNative(uint256 msgValue)",
	"error OnlyArbitrum()",
	"error OnlyEndpoint()",
	"error OnlyEndpoint(address addr)",
	"error OnlyOffChain()",
	"error OnlyOptimism()",
	"error OnlyPeer(uint32 eid, bytes32 sender)",
	"error OnlySelf()",
	"error OnlySendLibrary()",
	"error OnlyWhitelistCaller()",
	"error PacketOversize(uint256 max, uint256 actual)",
	"error PacketUnsorted()",
	"error RateLimitExceeded()",
	"error SimulationFailed(bytes reason)",
	"error SimulationResult(bytes result)",
	"error SimulationResultNotFound(uint32 eid)",
	"error SlippageExceeded(uint256 amountLD, uint256 minAmountLD)",
	"error ToIsAddressZero()",
	"error Transfer_NativeFailed(address _to, uint256 _value)",
	"error Transfer_ToAddressIsZero()",
	"error TransferFailed()",
	"error Unauthorized()",
	"error UntrustedPeer(address peer)",
	"error Worker_NotAllowed()",
	"error Worker_OnlyMessageLib()",
	"error Worker_RoleRenouncingDisabled()"
];

var errorSelectors = {
	"0x00575ea1": "Executor_NoOptions()",
	"0x0084ce02": "Executor_NativeAmountExceedsCap(uint256,uint256)",
	"0x0177e1ca": "LZ_PathNotVerifiable()",
	"0x01992f2a": "SimulationResultNotFound(uint32)",
	"0x04eb6e0c": "DVN_InvalidDVNOptions(uint256)",
	"0x052e5515": "Executor_UnsupportedOptionType(uint8)",
	"0x053c215b": "CCIPDVNAdapter_OptionsUnsupported()",
	"0x05df9f22": "LZ_InvalidExpiry()",
	"0x067f63e5": "MultiSig_OnlySigner()",
	"0x09beffb6": "LZ_InvalidPayloadHash()",
	"0x0b4f78c2": "CCIPDVNAdapter_UntrustedPeer(uint64,bytes)",
	"0x0bbaf263": "DVN_InstructionExpired()",
	"0x0bf526fe": "MultiSig_UnorderedSigners()",
	"0x0c509b5b": "LZ_ULN_InvalidConfigType(uint256)",
	"0x0dc652a8": "LZ_ULN_InvalidLegacyType1Option()",
	"0x0dea8466": "LzExecutor_Verifying()",
	"0x0fbdec0a": "InvalidEndpointCall()",
	"0x10647d0b": "LZ_InvalidArgument()",
	"0x14d4a4e8": "OnlySelf()",
	"0x15082194": "LZ_ComposeExists()",
	"0x1545a425": "AdminCallFailed()",
	"0x15ecadee": "DVN_InvalidSignatures()",
	"0x17751237": "LZ_ZeroLzTokenFee()",
	"0x18456c9b": "AddressCast_InvalidSizeForAddress()",
	"0x19159757": "CrimeFound(bytes)",
	"0x1bbb68a8": "LzExecutor_ReceiveLibViewNotSet()",
	"0x1ce0bfcd": "DVN_InvalidTarget(address)",
	"0x1cf849b7": "LZ_Treasury_LzTokenNotEnabled()",
	"0x1e9714b0": "InvalidLocalDecimals()",
	"0x20e9d05a": "LZ_MessageLib_InvalidExecutor()",
	"0x2657b6c3": "LZ_NotImplemented()",
	"0x2697e1c2": "DVN_InvalidVid(uint32)",
	"0x26cbb933": "AxelarDVNAdapter_OptionsUnsupported()",
	"0x320ae529": "LZ_PriceFeed_OnlyPriceUpdater()",
	"0x3256c04c": "InvalidSize(uint256,uint256)",
	"0x34084fb8": "LZ_MessageLib_InvalidAmount(uint256,uint256)",
	"0x35ca595f": "LZ_ComposeNotFound(bytes32,bytes32)",
	"0x378b1de6": "LZ_OnlyRegisteredLib()",
	"0x38682fa9": "LZ_ULN_InvalidOptionalDVNThreshold()",
	"0x391daaa4": "LZ_UnsupportedEid()",
	"0x3a51740d": "InvalidOptionType(uint16)",
	"0x3a9ae7b9": "LZ_ULN_InvalidPacketVersion()",
	"0x3c075f75": "LZ_OnlyNonDefaultLib()",
	"0x3d3496e1": "ToIsAddressZero()",
	"0x3fd387de": "LzExecutor_Executed()",
	"0x41705130": "LZ_ULN_UnsupportedOptionType(uint16)",
	"0x42211366": "LZ_ULN_InvalidOptionalDVNCount()",
	"0x42d2c97e": "LZ_ULN_InvalidEid()",
	"0x447516e1": "LZ_ULN_Unsorted()",
	"0x4641de99": "CCIPDVNAdapter_InvalidRouter(address)",
	"0x465bc834": "Transfer_NativeFailed(address,uint256)",
	"0x467409c3": "LZ_MessageLib_OnlyEndpoint()",
	"0x4796aee1": "Executor_InvalidLzReceiveOption()",
	"0x49cfac43": "LZ_MessageLib_ZeroMessageSize()",
	"0x4ab5ebcd": "Worker_NotAllowed()",
	"0x4c3118d4": "LZ_ULN_Verifying()",
	"0x4f3ec0d3": "LZ_InsufficientFee(uint256,uint256,uint256,uint256)",
	"0x4fa6ecac": "LZ_InvalidReceiveLibrary()",
	"0x500c44b4": "NotApprovedByGateway()",
	"0x503667ae": "LZ_ULN_InvalidConfirmations()",
	"0x50695b8f": "IncorrectDictAccess(uint256)",
	"0x50823c85": "PacketUnsorted()",
	"0x5373352a": "LzTokenUnavailable()",
	"0x54c1781b": "LzTokenIsAddressZero()",
	"0x572e17ee": "InvalidSimulationResult(uint32,bytes)",
	"0x576cbba3": "AxelarDVNAdapter_InsufficientBalance(uint256,uint256)",
	"0x58c8d2a0": "MultiSig_StateAlreadySet(address,bool)",
	"0x5af6d2aa": "LZ_LzTokenUnavailable()",
	"0x5cc0c62a": "AxelarDVNAdapter_UntrustedPeer(string,string)",
	"0x5dc90ccd": "LZ_MessageLib_LzTokenPaymentAddressMustBeSender()",
	"0x5ee08b97": "Worker_OnlyMessageLib()",
	"0x5f86e177": "MultiSig_QuorumIsZero()",
	"0x6079581f": "DVNAdapter_InsufficientBalance(uint256,uint256)",
	"0x611136c8": "AxelarDVNAdapter_OnlyWorkerFeeLib()",
	"0x614cbd8a": "SimulationFailed(bytes)",
	"0x624ac803": "UntrustedPeer(address)",
	"0x6281faa2": "AddressCast_InvalidAddress()",
	"0x645f0f4f": "LZ_MessageLib_InsufficientMsgValue()",
	"0x6592671c": "LZ_ULN_InvalidWorkerOptions(uint256)",
	"0x659cceb7": "LZ_PriceFeed_InsufficientFee(uint256,uint256)",
	"0x6780cfaf": "LZ_ULN_InvalidWorkerId(uint8)",
	"0x6b7a9310": "Transfer_ToAddressIsZero()",
	"0x6bce18d7": "ImplementationCallFailed()",
	"0x6c1ccdb5": "LZ_DefaultSendLibUnavailable()",
	"0x6f85e1b7": "AddressSizeConfig_InvalidAddressSize()",
	"0x7085244b": "DVN_UnsupportedOptionType(uint8)",
	"0x70b216ec": "OnlyWhitelistCaller()",
	"0x7182306f": "LZ_PayloadHashNotFound(bytes32,bytes32)",
	"0x71c4efed": "SlippageExceeded(uint256,uint256)",
	"0x751cb20f": "LZ_PathNotInitializable()",
	"0x78e84d06": "LZ_DefaultReceiveLibUnavailable()",
	"0x7a01ede2": "LZ_OnlySendLib()",
	"0x7b43b439": "InspectionFailed(bytes,bytes)",
	"0x7eb966c8": "OnlyEndpoint()",
	"0x7f57789c": "OnlyArbitrum()",
	"0x82b42900": "Unauthorized()",
	"0x8351eea7": "SimulationResult(bytes)",
	"0x83aa17da": "LZ_ULN_InvalidRequiredDVNCount()",
	"0x84ead636": "LZ_OnlyReceiveLib()",
	"0x87a64839": "InvalidEndpoint(address,address)",
	"0x885762a7": "LZ_MessageLib_NotTreasury()",
	"0x8aea2fe6": "LZ_AlreadyRegistered()",
	"0x8b4aa70b": "Executor_InvalidLzComposeOption()",
	"0x901cc980": "LZ_TreasuryFeeHandler_InvalidAmount(uint256,uint256)",
	"0x90b8ec18": "TransferFailed()",
	"0x91ac5e4f": "OnlyEndpoint(address)",
	"0x94cfb9e7": "OnlySendLibrary()",
	"0x94fdc372": "DVN_InvalidRole(bytes32)",
	"0x990776ea": "Executor_InvalidExecutorOptions(uint256)",
	"0x9a317a52": "LZ_OnlyAltToken()",
	"0x9a6d49cd": "InvalidOptions(bytes)",
	"0x9c5846fd": "DVNAdapter_NotImplemented()",
	"0x9cbfe066": "OnlyOffChain()",
	"0x9d6a45a6": "DVN_DuplicatedHash(bytes32)",
	"0x9db08605": "PacketOversize(uint256,uint256)",
	"0x9f704120": "NotEnoughNative(uint256)",
	"0xa169d0e1": "Executor_ZeroLzComposeGasProvided()",
	"0xa4dba779": "LZ_InvalidAmount(uint256,uint256)",
	"0xa4ff2ec3": "LZ_OnlyRegisteredOrDefaultLib()",
	"0xa74c1c5f": "RateLimitExceeded()",
	"0xabc18390": "OnlyOptimism()",
	"0xb5863604": "InvalidDelegate()",
	"0xb7386d32": "LZ_MessageLib_OnlyExecutor()",
	"0xba97c1fa": "LZ_ULN_InvalidConfigType(uint32)",
	"0xbae51fef": "LZ_TreasuryFeeHandler_OnlyOnSending()",
	"0xc0927c56": "LZ_ULN_InvalidLegacyType2Option()",
	"0xc09b6350": "LZ_InvalidNonce(uint64)",
	"0xc1c149b6": "LZ_MessageLib_InvalidSender()",
	"0xc26bebcc": "OnlyPeer(uint32,bytes32)",
	"0xc3a1858e": "Executor_InvalidNativeDropOption()",
	"0xc3baa0b7": "Executor_EidNotSupported(uint32)",
	"0xc4c52593": "LZ_Unauthorized()",
	"0xc667af3e": "LZ_MessageLib_InvalidMessageSize(uint256,uint256)",
	"0xc857f60c": "LZ_TreasuryFeeHandler_OnlySendLibrary()",
	"0xc9bf37b7": "LZ_ULN_InvalidPacketHeader()",
	"0xce2c3751": "LZ_ULN_AtLeastOneDVN()",
	"0xd009138a": "DVN_EidNotSupported(uint32)",
	"0xd0ecb66b": "LZ_SameValue()",
	"0xd3d3d9bc": "DVN_InvalidDVNIdx()",
	"0xdaffed9a": "NoPeer()",
	"0xde5999a0": "LZ_MessageLib_TransferFailed()",
	"0xdec9f031": "Worker_RoleRenouncingDisabled()",
	"0xe234d766": "CCIPDVNAdapter_EidNotSupported(uint32)",
	"0xe4df7bef": "AddressSizeConfig_AddressSizeAlreadySet()",
	"0xe5eb8f30": "Executor_ZeroLzReceiveGasProvided()",
	"0xe695d044": "LZ_MessageLib_CannotWithdrawAltToken()",
	"0xe6c4247b": "InvalidAddress()",
	"0xeb64f35d": "LZ_UnsupportedInterface()",
	"0xee120b09": "LZ_SendReentrancy()",
	"0xefa83a13": "LZ_MessageLib_InvalidPath()",
	"0xf0951e97": "AxelarDVNAdapter_EidNotSupported(uint32)",
	"0xf0c10d04": "LZ_ULN_UnsupportedEid(uint32)",
	"0xf0d4b23e": "AdminAccessDenied()",
	"0xf1c582ae": "MultiSig_SignersSizeIsLessThanQuorum(uint64,uint64)",
	"0xf1d10e0d": "DVNAdapter_InvalidMessageSize()",
	"0xf25127e6": "DVNAdapter_MissingRecieveLib(address,uint32)",
	"0xf42c33dc": "LZ_PriceFeed_NotAnOPStack(uint32)",
	"0xf6ff4fb7": "NoPeer(uint32)",
	"0xfaba723a": "DVN_OnlySelf()"
};

declare function getDeployedContractAddress(network: string, contractName: string): string;
declare function getDeploymentAddressAndAbi(network: string, contractName: string): {
    address: string;
    abi: any;
};
declare function checkError(data: string, abi?: Abi): void;
declare function parseError(data: string, abi?: Abi): LayerZeroParsedError | null;

export { checkError, errorSelectors, errors, getDeployedContractAddress, getDeploymentAddressAndAbi, parseError };
