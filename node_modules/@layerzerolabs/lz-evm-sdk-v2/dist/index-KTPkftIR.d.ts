import { Event, EventFilter, BaseContract, Signer, CallOverrides, BigNumber, BigNumberish, BytesLike, Overrides, ContractTransaction, PayableOverrides, PopulatedTransaction, utils, ContractFactory } from 'ethers';
import { Listener, Provider, TransactionRequest } from '@ethersproject/providers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';

interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
    args: TArgsArray & TArgsObject;
}
interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {
}
interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}
type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>, listener: TypedListener<TEvent>): TRes;
    (eventName: string, listener: Listener): TRes;
}
type MinEthersFactory<C, ARGS> = {
    deploy(...a: ARGS[]): Promise<C>;
};
type GetContractTypeFromFactory<F> = F extends MinEthersFactory<infer C, any> ? C : never;
type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any> ? Parameters<F["deploy"]> : never;
type PromiseOrValue<T> = T | Promise<T>;

type OriginStruct$j = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type OriginStructOutput$6 = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
declare namespace IExecutor$3 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        lzReceiveBaseGas: PromiseOrValue<BigNumberish>;
        lzComposeBaseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        nativeCap: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        dstEid: number;
        lzReceiveBaseGas: BigNumber;
        lzComposeBaseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
    };
    type NativeDropParamsStruct = {
        receiver: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
    };
    type NativeDropParamsStructOutput = [string, BigNumber] & {
        receiver: string;
        amount: BigNumber;
    };
    type ExecutionParamsStruct = {
        receiver: PromiseOrValue<string>;
        origin: OriginStruct$j;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        extraData: PromiseOrValue<BytesLike>;
        gasLimit: PromiseOrValue<BigNumberish>;
    };
    type ExecutionParamsStructOutput = [
        string,
        OriginStructOutput$6,
        string,
        string,
        string,
        BigNumber
    ] & {
        receiver: string;
        origin: OriginStructOutput$6;
        guid: string;
        message: string;
        extraData: string;
        gasLimit: BigNumber;
    };
}
interface ExecutorInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
        "compose302(address,address,bytes32,uint16,bytes,bytes,uint256)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "execute301(bytes,uint256)": FunctionFragment;
        "execute302((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": FunctionFragment;
        "getFee(uint32,address,uint256,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "initialize(address,address,address[],address,address,address[])": FunctionFragment;
        "localEid()": FunctionFragment;
        "nativeDrop((uint32,bytes32,uint64),uint32,address,(address,uint256)[],uint256)": FunctionFragment;
        "nativeDropAndExecute301((uint32,bytes32,uint64),(address,uint256)[],uint256,bytes,uint256)": FunctionFragment;
        "nativeDropAndExecute302((address,uint256)[],uint256,(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": FunctionFragment;
        "onUpgrade(address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveUln301()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig((uint32,uint64,uint64,uint16,uint128,uint128)[])": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "compose302" | "defaultMultiplierBps" | "dstConfig" | "endpoint" | "execute301" | "execute302" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "initialize" | "localEid" | "nativeDrop" | "nativeDropAndExecute301" | "nativeDropAndExecute302" | "onUpgrade" | "paused" | "priceFeed" | "receiveUln301" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "compose302", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "execute301", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "execute302", values: [IExecutor$3.ExecutionParamsStruct]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>[],
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>[]
    ]): string;
    encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeDrop", values: [
        OriginStruct$j,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        IExecutor$3.NativeDropParamsStruct[],
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "nativeDropAndExecute301", values: [
        OriginStruct$j,
        IExecutor$3.NativeDropParamsStruct[],
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "nativeDropAndExecute302", values: [
        IExecutor$3.NativeDropParamsStruct[],
        PromiseOrValue<BigNumberish>,
        IExecutor$3.ExecutionParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "onUpgrade", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveUln301", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IExecutor$3.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "compose302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDrop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDropAndExecute301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDropAndExecute302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onUpgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveUln301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "Initialized(uint8)": EventFragment;
        "NativeDropApplied(tuple,uint32,address,tuple[],bool[])": EventFragment;
        "Paused(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeDropApplied"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface DstConfigSetEventObject$9 {
    params: IExecutor$3.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$9 = TypedEvent<[
    IExecutor$3.DstConfigParamStructOutput[]
], DstConfigSetEventObject$9>;
type DstConfigSetEventFilter$9 = TypedEventFilter<DstConfigSetEvent$9>;
interface InitializedEventObject$9 {
    version: number;
}
type InitializedEvent$9 = TypedEvent<[number], InitializedEventObject$9>;
type InitializedEventFilter$9 = TypedEventFilter<InitializedEvent$9>;
interface NativeDropAppliedEventObject$1 {
    origin: OriginStructOutput$6;
    dstEid: number;
    oapp: string;
    params: IExecutor$3.NativeDropParamsStructOutput[];
    success: boolean[];
}
type NativeDropAppliedEvent$1 = TypedEvent<[
    OriginStructOutput$6,
    number,
    string,
    IExecutor$3.NativeDropParamsStructOutput[],
    boolean[]
], NativeDropAppliedEventObject$1>;
type NativeDropAppliedEventFilter$1 = TypedEventFilter<NativeDropAppliedEvent$1>;
interface PausedEventObject$a {
    account: string;
}
type PausedEvent$a = TypedEvent<[string], PausedEventObject$a>;
type PausedEventFilter$a = TypedEventFilter<PausedEvent$a>;
interface RoleAdminChangedEventObject$a {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$a = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$a>;
type RoleAdminChangedEventFilter$a = TypedEventFilter<RoleAdminChangedEvent$a>;
interface RoleGrantedEventObject$a {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$a = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$a>;
type RoleGrantedEventFilter$a = TypedEventFilter<RoleGrantedEvent$a>;
interface RoleRevokedEventObject$a {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$a = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$a>;
type RoleRevokedEventFilter$a = TypedEventFilter<RoleRevokedEvent$a>;
interface SetDefaultMultiplierBpsEventObject$d {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$d = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$d>;
type SetDefaultMultiplierBpsEventFilter$d = TypedEventFilter<SetDefaultMultiplierBpsEvent$d>;
interface SetPriceFeedEventObject$d {
    priceFeed: string;
}
type SetPriceFeedEvent$d = TypedEvent<[string], SetPriceFeedEventObject$d>;
type SetPriceFeedEventFilter$d = TypedEventFilter<SetPriceFeedEvent$d>;
interface SetSupportedOptionTypesEventObject$d {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$d = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$d>;
type SetSupportedOptionTypesEventFilter$d = TypedEventFilter<SetSupportedOptionTypesEvent$d>;
interface SetWorkerLibEventObject$d {
    workerLib: string;
}
type SetWorkerLibEvent$d = TypedEvent<[string], SetWorkerLibEventObject$d>;
type SetWorkerLibEventFilter$d = TypedEventFilter<SetWorkerLibEvent$d>;
interface UnpausedEventObject$a {
    account: string;
}
type UnpausedEvent$a = TypedEvent<[string], UnpausedEventObject$a>;
type UnpausedEventFilter$a = TypedEventFilter<UnpausedEvent$a>;
interface WithdrawEventObject$d {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$d = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$d>;
type WithdrawEventFilter$d = TypedEventFilter<WithdrawEvent$d>;
interface Executor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        compose302(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            lzReceiveBaseGas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
            nativeCap: BigNumber;
            lzComposeBaseGas: BigNumber;
        }>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        execute301(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        execute302(_executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        localEid(overrides?: CallOverrides): Promise<[number]>;
        nativeDrop(_origin: OriginStruct$j, _dstEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeDropAndExecute301(_origin: OriginStruct$j, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeDropAndExecute302(_nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        onUpgrade(_receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveUln301(overrides?: CallOverrides): Promise<[string]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_params: IExecutor$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    compose302(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        lzReceiveBaseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
        lzComposeBaseGas: BigNumber;
    }>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    execute301(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    execute302(_executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_endpoint: PromiseOrValue<string>, _receiveUln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    localEid(overrides?: CallOverrides): Promise<number>;
    nativeDrop(_origin: OriginStruct$j, _dstEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeDropAndExecute301(_origin: OriginStruct$j, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeDropAndExecute302(_nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    onUpgrade(_receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveUln301(overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_params: IExecutor$3.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        compose302(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            lzReceiveBaseGas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
            nativeCap: BigNumber;
            lzComposeBaseGas: BigNumber;
        }>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        execute301(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        execute302(_executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: CallOverrides): Promise<void>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        localEid(overrides?: CallOverrides): Promise<number>;
        nativeDrop(_origin: OriginStruct$j, _dstEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        nativeDropAndExecute301(_origin: OriginStruct$j, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        nativeDropAndExecute302(_nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: CallOverrides): Promise<void>;
        onUpgrade(_receiveUln301: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveUln301(overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_params: IExecutor$3.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$9;
        DstConfigSet(params?: null): DstConfigSetEventFilter$9;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$9;
        Initialized(version?: null): InitializedEventFilter$9;
        "NativeDropApplied(tuple,uint32,address,tuple[],bool[])"(origin?: null, dstEid?: null, oapp?: null, params?: null, success?: null): NativeDropAppliedEventFilter$1;
        NativeDropApplied(origin?: null, dstEid?: null, oapp?: null, params?: null, success?: null): NativeDropAppliedEventFilter$1;
        "Paused(address)"(account?: null): PausedEventFilter$a;
        Paused(account?: null): PausedEventFilter$a;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$a;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$a;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$a;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$a;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$a;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$a;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$d;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$d;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$d;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$d;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$d;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$d;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$d;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$d;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$a;
        Unpaused(account?: null): UnpausedEventFilter$a;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$d;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$d;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        compose302(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        execute301(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        execute302(_executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        localEid(overrides?: CallOverrides): Promise<BigNumber>;
        nativeDrop(_origin: OriginStruct$j, _dstEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeDropAndExecute301(_origin: OriginStruct$j, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeDropAndExecute302(_nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        onUpgrade(_receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveUln301(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_params: IExecutor$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        compose302(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute301(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        execute302(_executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeDrop(_origin: OriginStruct$j, _dstEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeDropAndExecute301(_origin: OriginStruct$j, _nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeDropAndExecute302(_nativeDropParams: IExecutor$3.NativeDropParamsStruct[], _nativeDropGasLimit: PromiseOrValue<BigNumberish>, _executionParams: IExecutor$3.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        onUpgrade(_receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveUln301(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_params: IExecutor$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$i = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface ILayerZeroEndpointV2Interface$1 extends utils.Interface {
    functions: {
        "eid()": FunctionFragment;
        "lzCompose(address,address,bytes32,uint16,bytes,bytes)": FunctionFragment;
        "lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": FunctionFragment;
        "lzReceiveAlert((uint32,bytes32,uint64),address,bytes32,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "eid" | "lzCompose" | "lzComposeAlert" | "lzReceive" | "lzReceiveAlert"): FunctionFragment;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzComposeAlert", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$i,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAlert", values: [
        OriginStruct$i,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzComposeAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAlert", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroEndpointV2$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroEndpointV2Interface$1;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        eid(overrides?: CallOverrides): Promise<[number]>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAlert(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    eid(overrides?: CallOverrides): Promise<number>;
    lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAlert(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        eid(overrides?: CallOverrides): Promise<number>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAlert(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAlert(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAlert(_origin: OriginStruct$i, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$1g_Executor = Executor;
declare namespace index$1g {
  export type { index$1g_Executor as Executor, ILayerZeroEndpointV2$1 as ILayerZeroEndpointV2 };
}

type DVNParamStruct = {
    idx: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
};
type TargetParamStruct = {
    idx: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
};
interface DVNDecompressorInterface extends utils.Interface {
    functions: {
        "MAX_DICT_LEN()": FunctionFragment;
        "RESERVE_DICT_LEN()": FunctionFragment;
        "addDVNs((uint16,address)[])": FunctionFragment;
        "addTargets((uint8,address)[])": FunctionFragment;
        "decompress()": FunctionFragment;
        "decompressed()": FunctionFragment;
        "dvns(uint16)": FunctionFragment;
        "execute(bytes)": FunctionFragment;
        "getData(uint256,uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "removeDVNs(uint16[])": FunctionFragment;
        "removeTargets(uint8[])": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "targets(uint8)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "vid()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAX_DICT_LEN" | "RESERVE_DICT_LEN" | "addDVNs" | "addTargets" | "decompress" | "decompressed" | "dvns" | "execute" | "getData" | "owner" | "removeDVNs" | "removeTargets" | "renounceOwnership" | "targets" | "transferOwnership" | "vid"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAX_DICT_LEN", values?: undefined): string;
    encodeFunctionData(functionFragment: "RESERVE_DICT_LEN", values?: undefined): string;
    encodeFunctionData(functionFragment: "addDVNs", values: [DVNParamStruct[]]): string;
    encodeFunctionData(functionFragment: "addTargets", values: [TargetParamStruct[]]): string;
    encodeFunctionData(functionFragment: "decompress", values?: undefined): string;
    encodeFunctionData(functionFragment: "decompressed", values?: undefined): string;
    encodeFunctionData(functionFragment: "dvns", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "execute", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getData", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeDVNs", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "removeTargets", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "targets", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "vid", values?: undefined): string;
    decodeFunctionResult(functionFragment: "MAX_DICT_LEN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RESERVE_DICT_LEN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addDVNs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addTargets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decompress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decompressed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dvns", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeDVNs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeTargets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vid", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$D {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$D = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$D>;
type OwnershipTransferredEventFilter$D = TypedEventFilter<OwnershipTransferredEvent$D>;
interface DVNDecompressor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DVNDecompressorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        addDVNs(_dvns: DVNParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addTargets(_targets: TargetParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        decompressed(overrides?: CallOverrides): Promise<[string] & {
            raw: string;
        }>;
        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            dvn: string;
        }>;
        execute(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[]] & {
            res: string[];
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        removeDVNs(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeTargets(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            target: string;
        }>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        vid(overrides?: CallOverrides): Promise<[number]>;
    };
    MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
    RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
    addDVNs(_dvns: DVNParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addTargets(_targets: TargetParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    decompress(overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    decompressed(overrides?: CallOverrides): Promise<string>;
    dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    execute(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
    owner(overrides?: CallOverrides): Promise<string>;
    removeDVNs(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeTargets(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    vid(overrides?: CallOverrides): Promise<number>;
    callStatic: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        addDVNs(_dvns: DVNParamStruct[], overrides?: CallOverrides): Promise<void>;
        addTargets(_targets: TargetParamStruct[], overrides?: CallOverrides): Promise<void>;
        decompress(overrides?: CallOverrides): Promise<void>;
        decompressed(overrides?: CallOverrides): Promise<string>;
        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        execute(_encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
        owner(overrides?: CallOverrides): Promise<string>;
        removeDVNs(_idx: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        removeTargets(_idx: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        vid(overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$D;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$D;
    };
    estimateGas: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        addDVNs(_dvns: DVNParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addTargets(_targets: TargetParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        decompressed(overrides?: CallOverrides): Promise<BigNumber>;
        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        execute(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        removeDVNs(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeTargets(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        vid(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        addDVNs(_dvns: DVNParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addTargets(_targets: TargetParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        decompressed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeDVNs(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeTargets(_idx: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        vid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface DecompressorExtensionInterface extends utils.Interface {
    functions: {
        "MAX_DICT_LEN()": FunctionFragment;
        "RESERVE_DICT_LEN()": FunctionFragment;
        "decompress()": FunctionFragment;
        "decompressed()": FunctionFragment;
        "getData(uint256,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAX_DICT_LEN" | "RESERVE_DICT_LEN" | "decompress" | "decompressed" | "getData"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAX_DICT_LEN", values?: undefined): string;
    encodeFunctionData(functionFragment: "RESERVE_DICT_LEN", values?: undefined): string;
    encodeFunctionData(functionFragment: "decompress", values?: undefined): string;
    encodeFunctionData(functionFragment: "decompressed", values?: undefined): string;
    encodeFunctionData(functionFragment: "getData", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "MAX_DICT_LEN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RESERVE_DICT_LEN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decompress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decompressed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
    events: {};
}
interface DecompressorExtension extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DecompressorExtensionInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        decompressed(overrides?: CallOverrides): Promise<[string] & {
            raw: string;
        }>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[]] & {
            res: string[];
        }>;
    };
    MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
    RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
    decompress(overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    decompressed(overrides?: CallOverrides): Promise<string>;
    getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
    callStatic: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        decompress(overrides?: CallOverrides): Promise<void>;
        decompressed(overrides?: CallOverrides): Promise<string>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
    };
    filters: {};
    estimateGas: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        decompressed(overrides?: CallOverrides): Promise<BigNumber>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        decompressed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ExecutorDecompressorInterface extends utils.Interface {
    functions: {
        "MAX_DICT_LEN()": FunctionFragment;
        "RESERVE_DICT_LEN()": FunctionFragment;
        "decompress()": FunctionFragment;
        "decompressed()": FunctionFragment;
        "execute301(bytes)": FunctionFragment;
        "executor()": FunctionFragment;
        "getData(uint256,uint256)": FunctionFragment;
        "nativeDrop(bytes)": FunctionFragment;
        "nativeDropAndExecute301(bytes)": FunctionFragment;
        "nativeDropAndExecute302(bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAX_DICT_LEN" | "RESERVE_DICT_LEN" | "decompress" | "decompressed" | "execute301" | "executor" | "getData" | "nativeDrop" | "nativeDropAndExecute301" | "nativeDropAndExecute302" | "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAX_DICT_LEN", values?: undefined): string;
    encodeFunctionData(functionFragment: "RESERVE_DICT_LEN", values?: undefined): string;
    encodeFunctionData(functionFragment: "decompress", values?: undefined): string;
    encodeFunctionData(functionFragment: "decompressed", values?: undefined): string;
    encodeFunctionData(functionFragment: "execute301", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "executor", values?: undefined): string;
    encodeFunctionData(functionFragment: "getData", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "nativeDrop", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "nativeDropAndExecute301", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "nativeDropAndExecute302", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "MAX_DICT_LEN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RESERVE_DICT_LEN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decompress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decompressed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDrop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDropAndExecute301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDropAndExecute302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$C {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$C = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$C>;
type OwnershipTransferredEventFilter$C = TypedEventFilter<OwnershipTransferredEvent$C>;
interface ExecutorDecompressor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExecutorDecompressorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        decompressed(overrides?: CallOverrides): Promise<[string] & {
            raw: string;
        }>;
        execute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executor(overrides?: CallOverrides): Promise<[string]>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[]] & {
            res: string[];
        }>;
        nativeDrop(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeDropAndExecute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeDropAndExecute302(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
    RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
    decompress(overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    decompressed(overrides?: CallOverrides): Promise<string>;
    execute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executor(overrides?: CallOverrides): Promise<string>;
    getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
    nativeDrop(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeDropAndExecute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeDropAndExecute302(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        decompress(overrides?: CallOverrides): Promise<void>;
        decompressed(overrides?: CallOverrides): Promise<string>;
        execute301(_encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        executor(overrides?: CallOverrides): Promise<string>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
        nativeDrop(_encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nativeDropAndExecute301(_encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nativeDropAndExecute302(_encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$C;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$C;
    };
    estimateGas: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        decompressed(overrides?: CallOverrides): Promise<BigNumber>;
        execute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executor(overrides?: CallOverrides): Promise<BigNumber>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nativeDrop(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeDropAndExecute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeDropAndExecute302(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decompress(overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        decompressed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getData(begin: PromiseOrValue<BigNumberish>, end: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeDrop(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeDropAndExecute301(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeDropAndExecute302(_encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$1f_DVNDecompressor = DVNDecompressor;
type index$1f_DecompressorExtension = DecompressorExtension;
type index$1f_ExecutorDecompressor = ExecutorDecompressor;
declare namespace index$1f {
  export type { index$1f_DVNDecompressor as DVNDecompressor, index$1f_DecompressorExtension as DecompressorExtension, index$1f_ExecutorDecompressor as ExecutorDecompressor };
}

type OriginStructOutput$5 = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
interface IExecutorInterface extends utils.Interface {
    functions: {
        "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "getFee(uint32,address,uint256,bytes)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "getSupportedOptionTypes" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "setSupportedOptionTypes" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "NativeDropApplied(tuple,uint32,address,tuple[],bool[])": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeDropApplied"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface DstConfigSetEventObject$8 {
    params: IExecutor$2.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$8 = TypedEvent<[
    IExecutor$2.DstConfigParamStructOutput[]
], DstConfigSetEventObject$8>;
type DstConfigSetEventFilter$8 = TypedEventFilter<DstConfigSetEvent$8>;
interface NativeDropAppliedEventObject {
    origin: OriginStructOutput$5;
    dstEid: number;
    oapp: string;
    params: IExecutor$2.NativeDropParamsStructOutput[];
    success: boolean[];
}
type NativeDropAppliedEvent = TypedEvent<[
    OriginStructOutput$5,
    number,
    string,
    IExecutor$2.NativeDropParamsStructOutput[],
    boolean[]
], NativeDropAppliedEventObject>;
type NativeDropAppliedEventFilter = TypedEventFilter<NativeDropAppliedEvent>;
interface SetDefaultMultiplierBpsEventObject$c {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$c = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$c>;
type SetDefaultMultiplierBpsEventFilter$c = TypedEventFilter<SetDefaultMultiplierBpsEvent$c>;
interface SetPriceFeedEventObject$c {
    priceFeed: string;
}
type SetPriceFeedEvent$c = TypedEvent<[string], SetPriceFeedEventObject$c>;
type SetPriceFeedEventFilter$c = TypedEventFilter<SetPriceFeedEvent$c>;
interface SetSupportedOptionTypesEventObject$c {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$c = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$c>;
type SetSupportedOptionTypesEventFilter$c = TypedEventFilter<SetSupportedOptionTypesEvent$c>;
interface SetWorkerLibEventObject$c {
    workerLib: string;
}
type SetWorkerLibEvent$c = TypedEvent<[string], SetWorkerLibEventObject$c>;
type SetWorkerLibEventFilter$c = TypedEventFilter<SetWorkerLibEvent$c>;
interface WithdrawEventObject$c {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$c = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$c>;
type WithdrawEventFilter$c = TypedEventFilter<WithdrawEvent$c>;
declare namespace IExecutor$2 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        lzReceiveBaseGas: PromiseOrValue<BigNumberish>;
        lzComposeBaseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        nativeCap: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        dstEid: number;
        lzReceiveBaseGas: BigNumber;
        lzComposeBaseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
    };
    type NativeDropParamsStruct = {
        receiver: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
    };
    type NativeDropParamsStructOutput = [string, BigNumber] & {
        receiver: string;
        amount: BigNumber;
    };
}
interface IExecutor$2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber, BigNumber, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            price: BigNumber;
        }>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber, BigNumber, BigNumber]>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber, BigNumber, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$8;
        DstConfigSet(params?: null): DstConfigSetEventFilter$8;
        "NativeDropApplied(tuple,uint32,address,tuple[],bool[])"(origin?: null, dstEid?: null, oapp?: null, params?: null, success?: null): NativeDropAppliedEventFilter;
        NativeDropApplied(origin?: null, dstEid?: null, oapp?: null, params?: null, success?: null): NativeDropAppliedEventFilter;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$c;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$c;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$c;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$c;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$c;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$c;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$c;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$c;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$c;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$c;
    };
    estimateGas: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IExecutor$1 {
    type DstConfigStruct = {
        lzReceiveBaseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        nativeCap: PromiseOrValue<BigNumberish>;
        lzComposeBaseGas: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        lzReceiveBaseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
        lzComposeBaseGas: BigNumber;
    };
}
interface IExecutorFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128,uint64),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128,uint64),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IExecutorFeeLib$1.FeeParamsStruct,
        IExecutor$1.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IExecutorFeeLib$1.FeeParamsStruct,
        IExecutor$1.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {};
}
declare namespace IExecutorFeeLib$1 {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        calldataSize: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        sender: string;
        calldataSize: BigNumber;
        defaultMultiplierBps: number;
    };
}
interface IExecutorFeeLib$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IExecutorFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$1.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroComposerInterface extends utils.Interface {
    functions: {
        "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "lzCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$h = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type OriginStructOutput$4 = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
type MessagingParamsStruct$2 = {
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
    options: PromiseOrValue<BytesLike>;
    payInLzToken: PromiseOrValue<boolean>;
};
type MessagingFeeStructOutput$a = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput$6 = [
    string,
    BigNumber,
    MessagingFeeStructOutput$a
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$a;
};
type SetConfigParamStruct$a = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface ILayerZeroEndpointV2Interface extends utils.Interface {
    functions: {
        "burn(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "clear(address,(uint32,bytes32,uint64),bytes32,bytes)": FunctionFragment;
        "composeQueue(address,address,bytes32,uint16)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "eid()": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendContext()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "lazyInboundNonce(address,uint32,bytes32)": FunctionFragment;
        "lzCompose(address,address,bytes32,uint16,bytes,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": FunctionFragment;
        "lzToken()": FunctionFragment;
        "nativeToken()": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "nilify(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "quote((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "send((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
        "sendCompose(address,bytes32,uint16,bytes)": FunctionFragment;
        "setConfig(address,address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setLzToken(address)": FunctionFragment;
        "setReceiveLibrary(address,uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(address,uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(address,uint32,address)": FunctionFragment;
        "skip(address,uint32,bytes32,uint64)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address)": FunctionFragment;
        "verify((uint32,bytes32,uint64),address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "burn" | "clear" | "composeQueue" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "eid" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "inboundNonce" | "inboundPayloadHash" | "initializable" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "isValidReceiveLibrary" | "lazyInboundNonce" | "lzCompose" | "lzReceive" | "lzToken" | "nativeToken" | "nextGuid" | "nilify" | "outboundNonce" | "quote" | "receiveLibraryTimeout" | "registerLibrary" | "send" | "sendCompose" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setDelegate" | "setLzToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "verifiable" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "burn", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "clear", values: [
        PromiseOrValue<string>,
        OriginStruct$h,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composeQueue", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct$h, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$h,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nilify", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quote", values: [MessagingParamsStruct$2, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "send", values: [MessagingParamsStruct$2, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        SetConfigParamStruct$a[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [OriginStruct$h, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verify", values: [OriginStruct$h, PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nilify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {
        "ComposeDelivered(address,address,bytes32,uint16)": EventFragment;
        "ComposeSent(address,address,bytes32,uint16,bytes)": EventFragment;
        "DefaultReceiveLibrarySet(uint32,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "DelegateSet(address,address)": EventFragment;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": EventFragment;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)": EventFragment;
        "LzTokenSet(address)": EventFragment;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketDelivered(tuple,address)": EventFragment;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketSent(bytes,bytes,address)": EventFragment;
        "PacketVerified(tuple,address,bytes32)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address)": EventFragment;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelegateSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeAlert"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzReceiveAlert"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketBurnt"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketNilified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketVerified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface ComposeDeliveredEventObject$4 {
    from: string;
    to: string;
    guid: string;
    index: number;
}
type ComposeDeliveredEvent$4 = TypedEvent<[
    string,
    string,
    string,
    number
], ComposeDeliveredEventObject$4>;
type ComposeDeliveredEventFilter$4 = TypedEventFilter<ComposeDeliveredEvent$4>;
interface ComposeSentEventObject$4 {
    from: string;
    to: string;
    guid: string;
    index: number;
    message: string;
}
type ComposeSentEvent$4 = TypedEvent<[
    string,
    string,
    string,
    number,
    string
], ComposeSentEventObject$4>;
type ComposeSentEventFilter$4 = TypedEventFilter<ComposeSentEvent$4>;
interface DefaultReceiveLibrarySetEventObject$4 {
    eid: number;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$4 = TypedEvent<[
    number,
    string
], DefaultReceiveLibrarySetEventObject$4>;
type DefaultReceiveLibrarySetEventFilter$4 = TypedEventFilter<DefaultReceiveLibrarySetEvent$4>;
interface DefaultReceiveLibraryTimeoutSetEventObject$4 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$4 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$4>;
type DefaultReceiveLibraryTimeoutSetEventFilter$4 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$4>;
interface DefaultSendLibrarySetEventObject$4 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$4 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$4>;
type DefaultSendLibrarySetEventFilter$4 = TypedEventFilter<DefaultSendLibrarySetEvent$4>;
interface DelegateSetEventObject$2 {
    sender: string;
    delegate: string;
}
type DelegateSetEvent$2 = TypedEvent<[
    string,
    string
], DelegateSetEventObject$2>;
type DelegateSetEventFilter$2 = TypedEventFilter<DelegateSetEvent$2>;
interface InboundNonceSkippedEventObject$4 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$4 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$4>;
type InboundNonceSkippedEventFilter$4 = TypedEventFilter<InboundNonceSkippedEvent$4>;
interface LibraryRegisteredEventObject$4 {
    newLib: string;
}
type LibraryRegisteredEvent$4 = TypedEvent<[
    string
], LibraryRegisteredEventObject$4>;
type LibraryRegisteredEventFilter$4 = TypedEventFilter<LibraryRegisteredEvent$4>;
interface LzComposeAlertEventObject$4 {
    from: string;
    to: string;
    executor: string;
    guid: string;
    index: number;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzComposeAlertEvent$4 = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzComposeAlertEventObject$4>;
type LzComposeAlertEventFilter$4 = TypedEventFilter<LzComposeAlertEvent$4>;
interface LzReceiveAlertEventObject$2 {
    receiver: string;
    executor: string;
    origin: OriginStructOutput$4;
    guid: string;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzReceiveAlertEvent$2 = TypedEvent<[
    string,
    string,
    OriginStructOutput$4,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzReceiveAlertEventObject$2>;
type LzReceiveAlertEventFilter$2 = TypedEventFilter<LzReceiveAlertEvent$2>;
interface LzTokenSetEventObject$4 {
    token: string;
}
type LzTokenSetEvent$4 = TypedEvent<[string], LzTokenSetEventObject$4>;
type LzTokenSetEventFilter$4 = TypedEventFilter<LzTokenSetEvent$4>;
interface PacketBurntEventObject$4 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketBurntEvent$4 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketBurntEventObject$4>;
type PacketBurntEventFilter$4 = TypedEventFilter<PacketBurntEvent$4>;
interface PacketDeliveredEventObject$4 {
    origin: OriginStructOutput$4;
    receiver: string;
}
type PacketDeliveredEvent$4 = TypedEvent<[
    OriginStructOutput$4,
    string
], PacketDeliveredEventObject$4>;
type PacketDeliveredEventFilter$4 = TypedEventFilter<PacketDeliveredEvent$4>;
interface PacketNilifiedEventObject$4 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketNilifiedEvent$4 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketNilifiedEventObject$4>;
type PacketNilifiedEventFilter$4 = TypedEventFilter<PacketNilifiedEvent$4>;
interface PacketSentEventObject$4 {
    encodedPayload: string;
    options: string;
    sendLibrary: string;
}
type PacketSentEvent$4 = TypedEvent<[
    string,
    string,
    string
], PacketSentEventObject$4>;
type PacketSentEventFilter$4 = TypedEventFilter<PacketSentEvent$4>;
interface PacketVerifiedEventObject$2 {
    origin: OriginStructOutput$4;
    receiver: string;
    payloadHash: string;
}
type PacketVerifiedEvent$2 = TypedEvent<[
    OriginStructOutput$4,
    string,
    string
], PacketVerifiedEventObject$2>;
type PacketVerifiedEventFilter$2 = TypedEventFilter<PacketVerifiedEvent$2>;
interface ReceiveLibrarySetEventObject$4 {
    receiver: string;
    eid: number;
    newLib: string;
}
type ReceiveLibrarySetEvent$4 = TypedEvent<[
    string,
    number,
    string
], ReceiveLibrarySetEventObject$4>;
type ReceiveLibrarySetEventFilter$4 = TypedEventFilter<ReceiveLibrarySetEvent$4>;
interface ReceiveLibraryTimeoutSetEventObject$4 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimeoutSetEvent$4 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimeoutSetEventObject$4>;
type ReceiveLibraryTimeoutSetEventFilter$4 = TypedEventFilter<ReceiveLibraryTimeoutSetEvent$4>;
interface SendLibrarySetEventObject$4 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$4 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$4>;
type SendLibrarySetEventFilter$4 = TypedEventFilter<SendLibrarySetEvent$4>;
interface ILayerZeroEndpointV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroEndpointV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$h, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string] & {
            dstEid: number;
            sender: string;
        }>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        initializable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzToken(overrides?: CallOverrides): Promise<[string]>;
        nativeToken(overrides?: CallOverrides): Promise<[string]>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        quote(_params: MessagingParamsStruct$2, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$a]>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_params: MessagingParamsStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$a[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$h, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    eid(overrides?: CallOverrides): Promise<number>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendContext(overrides?: CallOverrides): Promise<[number, string] & {
        dstEid: number;
        sender: string;
    }>;
    getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    initializable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzToken(overrides?: CallOverrides): Promise<string>;
    nativeToken(overrides?: CallOverrides): Promise<string>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    quote(_params: MessagingParamsStruct$2, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$a>;
    receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_params: MessagingParamsStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$a[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verify(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$h, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        eid(overrides?: CallOverrides): Promise<number>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string] & {
            dstEid: number;
            sender: string;
        }>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        initializable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzToken(overrides?: CallOverrides): Promise<string>;
        nativeToken(overrides?: CallOverrides): Promise<string>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quote(_params: MessagingParamsStruct$2, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$a>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        send(_params: MessagingParamsStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingReceiptStructOutput$6>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$a[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        verifiable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verify(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)"(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$4;
        ComposeDelivered(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$4;
        "ComposeSent(address,address,bytes32,uint16,bytes)"(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$4;
        ComposeSent(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$4;
        "DefaultReceiveLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$4;
        DefaultReceiveLibrarySet(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$4;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$4;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$4;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$4;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$4;
        "DelegateSet(address,address)"(sender?: null, delegate?: null): DelegateSetEventFilter$2;
        DelegateSet(sender?: null, delegate?: null): DelegateSetEventFilter$2;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$4;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$4;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$4;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$4;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$4;
        LzComposeAlert(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$4;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)"(receiver?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, origin?: null, guid?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzReceiveAlertEventFilter$2;
        LzReceiveAlert(receiver?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, origin?: null, guid?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzReceiveAlertEventFilter$2;
        "LzTokenSet(address)"(token?: null): LzTokenSetEventFilter$4;
        LzTokenSet(token?: null): LzTokenSetEventFilter$4;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$4;
        PacketBurnt(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$4;
        "PacketDelivered(tuple,address)"(origin?: null, receiver?: null): PacketDeliveredEventFilter$4;
        PacketDelivered(origin?: null, receiver?: null): PacketDeliveredEventFilter$4;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$4;
        PacketNilified(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$4;
        "PacketSent(bytes,bytes,address)"(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter$4;
        PacketSent(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter$4;
        "PacketVerified(tuple,address,bytes32)"(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter$2;
        PacketVerified(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter$2;
        "ReceiveLibrarySet(address,uint32,address)"(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$4;
        ReceiveLibrarySet(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$4;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$4;
        ReceiveLibraryTimeoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$4;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$4;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$4;
    };
    estimateGas: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$h, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzToken(overrides?: CallOverrides): Promise<BigNumber>;
        nativeToken(overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quote(_params: MessagingParamsStruct$2, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_params: MessagingParamsStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$a[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$h, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_params: MessagingParamsStruct$2, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_params: MessagingParamsStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$a[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_origin: OriginStruct$h, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroExecutorInterface extends utils.Interface {
    functions: {
        "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
        "getFee(uint32,address,uint256,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            price: BigNumber;
        }>;
    };
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroPriceFeedInterface extends utils.Interface {
    functions: {
        "estimateFeeByEid(uint32,uint256,uint256)": FunctionFragment;
        "estimateFeeOnSend(uint32,uint256,uint256)": FunctionFragment;
        "getFee(uint32,uint256,uint256)": FunctionFragment;
        "getPrice(uint32)": FunctionFragment;
        "getPriceRatioDenominator()": FunctionFragment;
        "nativeTokenPriceUSD()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "estimateFeeByEid" | "estimateFeeOnSend" | "getFee" | "getPrice" | "getPriceRatioDenominator" | "nativeTokenPriceUSD"): FunctionFragment;
    encodeFunctionData(functionFragment: "estimateFeeByEid", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "estimateFeeOnSend", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPrice", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPriceRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeTokenPriceUSD", values?: undefined): string;
    decodeFunctionResult(functionFragment: "estimateFeeByEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeTokenPriceUSD", data: BytesLike): Result;
    events: {};
}
declare namespace ILayerZeroPriceFeed$1 {
    type PriceStruct = {
        priceRatio: PromiseOrValue<BigNumberish>;
        gasPriceInUnit: PromiseOrValue<BigNumberish>;
        gasPerByte: PromiseOrValue<BigNumberish>;
    };
    type PriceStructOutput = [BigNumber, BigNumber, number] & {
        priceRatio: BigNumber;
        gasPriceInUnit: BigNumber;
        gasPerByte: number;
    };
}
interface ILayerZeroPriceFeed$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroPriceFeedInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
            priceRatioDenominator: BigNumber;
            nativePriceUSD: BigNumber;
        }>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[ILayerZeroPriceFeed$1.PriceStructOutput]>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        fee: BigNumber;
        priceRatio: BigNumber;
        priceRatioDenominator: BigNumber;
        nativePriceUSD: BigNumber;
    }>;
    estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed$1.PriceStructOutput>;
    getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
    nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
            priceRatioDenominator: BigNumber;
            nativePriceUSD: BigNumber;
        }>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
            priceRatioDenominator: BigNumber;
            nativePriceUSD: BigNumber;
        }>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed$1.PriceStructOutput>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$g = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface ILayerZeroReceiverInterface extends utils.Interface {
    functions: {
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowInitializePath" | "lzReceive" | "nextNonce"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$g]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$g,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroReceiver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroReceiverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowInitializePath(_origin: OriginStruct$g, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceive(_origin: OriginStruct$g, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    allowInitializePath(_origin: OriginStruct$g, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$g, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        allowInitializePath(_origin: OriginStruct$g, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$g, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        allowInitializePath(_origin: OriginStruct$g, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$g, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        allowInitializePath(_origin: OriginStruct$g, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$g, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroTreasuryInterface extends utils.Interface {
    functions: {
        "getFee(address,uint32,uint256,bool)": FunctionFragment;
        "payFee(address,uint32,uint256,bool)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "payFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "payFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroTreasury extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroTreasuryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        payFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    payFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        payFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        payFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payFee(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _totalNativeFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type SetConfigParamStruct$9 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface IMessageLibInterface extends utils.Interface {
    functions: {
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "setConfig(address,(uint32,uint32,bytes)[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getConfig" | "isSupportedEid" | "messageLibType" | "setConfig" | "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [PromiseOrValue<string>, SetConfigParamStruct$9[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {};
}
interface IMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$9[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$9[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    callStatic: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$9[], overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    filters: {};
    estimateGas: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$9[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$9[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type SetConfigParamStruct$8 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface IMessageLibManagerInterface extends utils.Interface {
    functions: {
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "setConfig(address,address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setReceiveLibrary(address,uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(address,uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(address,uint32,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendLibrary" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSupportedEid" | "isValidReceiveLibrary" | "receiveLibraryTimeout" | "registerLibrary" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        SetConfigParamStruct$8[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    events: {
        "DefaultReceiveLibrarySet(uint32,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address)": EventFragment;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface DefaultReceiveLibrarySetEventObject$3 {
    eid: number;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$3 = TypedEvent<[
    number,
    string
], DefaultReceiveLibrarySetEventObject$3>;
type DefaultReceiveLibrarySetEventFilter$3 = TypedEventFilter<DefaultReceiveLibrarySetEvent$3>;
interface DefaultReceiveLibraryTimeoutSetEventObject$3 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$3 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$3>;
type DefaultReceiveLibraryTimeoutSetEventFilter$3 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$3>;
interface DefaultSendLibrarySetEventObject$3 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$3 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$3>;
type DefaultSendLibrarySetEventFilter$3 = TypedEventFilter<DefaultSendLibrarySetEvent$3>;
interface LibraryRegisteredEventObject$3 {
    newLib: string;
}
type LibraryRegisteredEvent$3 = TypedEvent<[
    string
], LibraryRegisteredEventObject$3>;
type LibraryRegisteredEventFilter$3 = TypedEventFilter<LibraryRegisteredEvent$3>;
interface ReceiveLibrarySetEventObject$3 {
    receiver: string;
    eid: number;
    newLib: string;
}
type ReceiveLibrarySetEvent$3 = TypedEvent<[
    string,
    number,
    string
], ReceiveLibrarySetEventObject$3>;
type ReceiveLibrarySetEventFilter$3 = TypedEventFilter<ReceiveLibrarySetEvent$3>;
interface ReceiveLibraryTimeoutSetEventObject$3 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimeoutSetEvent$3 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimeoutSetEventObject$3>;
type ReceiveLibraryTimeoutSetEventFilter$3 = TypedEventFilter<ReceiveLibraryTimeoutSetEvent$3>;
interface SendLibrarySetEventObject$3 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$3 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$3>;
type SendLibrarySetEventFilter$3 = TypedEventFilter<SendLibrarySetEvent$3>;
interface IMessageLibManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageLibManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$8[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$8[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$8[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultReceiveLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$3;
        DefaultReceiveLibrarySet(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$3;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$3;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$3;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$3;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$3;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$3;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$3;
        "ReceiveLibrarySet(address,uint32,address)"(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$3;
        ReceiveLibrarySet(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$3;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$3;
        ReceiveLibraryTimeoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$3;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$3;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$3;
    };
    estimateGas: {
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$8[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$8[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessagingChannelInterface extends utils.Interface {
    functions: {
        "burn(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "eid()": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "lazyInboundNonce(address,uint32,bytes32)": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "nilify(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "skip(address,uint32,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "burn" | "eid" | "inboundNonce" | "inboundPayloadHash" | "lazyInboundNonce" | "nextGuid" | "nilify" | "outboundNonce" | "skip"): FunctionFragment;
    encodeFunctionData(functionFragment: "burn", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nilify", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nilify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    events: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketBurnt"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketNilified"): EventFragment;
}
interface InboundNonceSkippedEventObject$3 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$3 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$3>;
type InboundNonceSkippedEventFilter$3 = TypedEventFilter<InboundNonceSkippedEvent$3>;
interface PacketBurntEventObject$3 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketBurntEvent$3 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketBurntEventObject$3>;
type PacketBurntEventFilter$3 = TypedEventFilter<PacketBurntEvent$3>;
interface PacketNilifiedEventObject$3 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketNilifiedEvent$3 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketNilifiedEventObject$3>;
type PacketNilifiedEventFilter$3 = TypedEventFilter<PacketNilifiedEvent$3>;
interface IMessagingChannel extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessagingChannelInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    eid(overrides?: CallOverrides): Promise<number>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        eid(overrides?: CallOverrides): Promise<number>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$3;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$3;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$3;
        PacketBurnt(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$3;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$3;
        PacketNilified(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$3;
    };
    estimateGas: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lazyInboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessagingComposerInterface extends utils.Interface {
    functions: {
        "composeQueue(address,address,bytes32,uint16)": FunctionFragment;
        "lzCompose(address,address,bytes32,uint16,bytes,bytes)": FunctionFragment;
        "sendCompose(address,bytes32,uint16,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "composeQueue" | "lzCompose" | "sendCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "composeQueue", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    events: {
        "ComposeDelivered(address,address,bytes32,uint16)": EventFragment;
        "ComposeSent(address,address,bytes32,uint16,bytes)": EventFragment;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeAlert"): EventFragment;
}
interface ComposeDeliveredEventObject$3 {
    from: string;
    to: string;
    guid: string;
    index: number;
}
type ComposeDeliveredEvent$3 = TypedEvent<[
    string,
    string,
    string,
    number
], ComposeDeliveredEventObject$3>;
type ComposeDeliveredEventFilter$3 = TypedEventFilter<ComposeDeliveredEvent$3>;
interface ComposeSentEventObject$3 {
    from: string;
    to: string;
    guid: string;
    index: number;
    message: string;
}
type ComposeSentEvent$3 = TypedEvent<[
    string,
    string,
    string,
    number,
    string
], ComposeSentEventObject$3>;
type ComposeSentEventFilter$3 = TypedEventFilter<ComposeSentEvent$3>;
interface LzComposeAlertEventObject$3 {
    from: string;
    to: string;
    executor: string;
    guid: string;
    index: number;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzComposeAlertEvent$3 = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzComposeAlertEventObject$3>;
type LzComposeAlertEventFilter$3 = TypedEventFilter<LzComposeAlertEvent$3>;
interface IMessagingComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessagingComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)"(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$3;
        ComposeDelivered(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$3;
        "ComposeSent(address,address,bytes32,uint16,bytes)"(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$3;
        ComposeSent(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$3;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$3;
        LzComposeAlert(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$3;
    };
    estimateGas: {
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        composeQueue(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessagingContextInterface extends utils.Interface {
    functions: {
        "getSendContext()": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getSendContext" | "isSendingMessage"): FunctionFragment;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    events: {};
}
interface IMessagingContext extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessagingContextInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string] & {
            dstEid: number;
            sender: string;
        }>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
    };
    getSendContext(overrides?: CallOverrides): Promise<[number, string] & {
        dstEid: number;
        sender: string;
    }>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string] & {
            dstEid: number;
            sender: string;
        }>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type PacketStruct$3 = {
    nonce: PromiseOrValue<BigNumberish>;
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    guid: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
};
type MessagingFeeStructOutput$9 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type SetConfigParamStruct$7 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface ISendLibInterface extends utils.Interface {
    functions: {
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setConfig(address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getConfig" | "isSupportedEid" | "messageLibType" | "quote" | "send" | "setConfig" | "setTreasury" | "supportsInterface" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct$3, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct$3, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [PromiseOrValue<string>, SetConfigParamStruct$7[]]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {};
}
interface ISendLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ISendLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        quote(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$9]>;
        send(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$7[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    quote(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$9>;
    send(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$7[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        quote(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$9>;
        send(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$9, string] & {
            encodedPacket: string;
        }>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$7[], overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$7[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_packet: PacketStruct$3, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$7[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IWorkerInterface extends utils.Interface {
    functions: {
        "defaultMultiplierBps()": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultMultiplierBps" | "getSupportedOptionTypes" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "setSupportedOptionTypes" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface SetDefaultMultiplierBpsEventObject$b {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$b = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$b>;
type SetDefaultMultiplierBpsEventFilter$b = TypedEventFilter<SetDefaultMultiplierBpsEvent$b>;
interface SetPriceFeedEventObject$b {
    priceFeed: string;
}
type SetPriceFeedEvent$b = TypedEvent<[string], SetPriceFeedEventObject$b>;
type SetPriceFeedEventFilter$b = TypedEventFilter<SetPriceFeedEvent$b>;
interface SetSupportedOptionTypesEventObject$b {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$b = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$b>;
type SetSupportedOptionTypesEventFilter$b = TypedEventFilter<SetSupportedOptionTypesEvent$b>;
interface SetWorkerLibEventObject$b {
    workerLib: string;
}
type SetWorkerLibEvent$b = TypedEvent<[string], SetWorkerLibEventObject$b>;
type SetWorkerLibEventFilter$b = TypedEventFilter<SetWorkerLibEvent$b>;
interface WithdrawEventObject$b {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$b = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$b>;
type WithdrawEventFilter$b = TypedEventFilter<WithdrawEvent$b>;
interface IWorker extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IWorkerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$b;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$b;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$b;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$b;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$b;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$b;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$b;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$b;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$b;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$b;
    };
    estimateGas: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$1e_ILayerZeroComposer = ILayerZeroComposer;
type index$1e_ILayerZeroEndpointV2 = ILayerZeroEndpointV2;
type index$1e_ILayerZeroExecutor = ILayerZeroExecutor;
type index$1e_ILayerZeroReceiver = ILayerZeroReceiver;
type index$1e_ILayerZeroTreasury = ILayerZeroTreasury;
type index$1e_IMessageLib = IMessageLib;
type index$1e_IMessageLibManager = IMessageLibManager;
type index$1e_IMessagingChannel = IMessagingChannel;
type index$1e_IMessagingComposer = IMessagingComposer;
type index$1e_IMessagingContext = IMessagingContext;
type index$1e_ISendLib = ISendLib;
type index$1e_IWorker = IWorker;
declare namespace index$1e {
  export { IExecutor$2 as IExecutor, IExecutorFeeLib$1 as IExecutorFeeLib, type index$1e_ILayerZeroComposer as ILayerZeroComposer, type index$1e_ILayerZeroEndpointV2 as ILayerZeroEndpointV2, type index$1e_ILayerZeroExecutor as ILayerZeroExecutor, ILayerZeroPriceFeed$1 as ILayerZeroPriceFeed, type index$1e_ILayerZeroReceiver as ILayerZeroReceiver, type index$1e_ILayerZeroTreasury as ILayerZeroTreasury, type index$1e_IMessageLib as IMessageLib, type index$1e_IMessageLibManager as IMessageLibManager, type index$1e_IMessagingChannel as IMessagingChannel, type index$1e_IMessagingComposer as IMessagingComposer, type index$1e_IMessagingContext as IMessagingContext, type index$1e_ISendLib as ISendLib, type index$1e_IWorker as IWorker };
}

interface AddressCastInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface AddressCast extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AddressCastInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

interface ErrorsInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface Errors extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ErrorsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

interface TransferInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface Transfer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TransferInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

type index$1d_AddressCast = AddressCast;
type index$1d_Errors = Errors;
type index$1d_Transfer = Transfer;
declare namespace index$1d {
  export type { index$1d_AddressCast as AddressCast, index$1d_Errors as Errors, index$1d_Transfer as Transfer };
}

interface ExecutorOptionsInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface ExecutorOptions extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExecutorOptionsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

type index$1c_ExecutorOptions = ExecutorOptions;
declare namespace index$1c {
  export type { index$1c_ExecutorOptions as ExecutorOptions };
}

interface BlockedMessageLibInterface extends utils.Interface {
    functions: {
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "isSupportedEid" | "messageLibType" | "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {};
}
interface BlockedMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BlockedMessageLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    callStatic: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    filters: {};
    estimateGas: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type PacketStruct$2 = {
    nonce: PromiseOrValue<BigNumberish>;
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    guid: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
};
type MessagingFeeStructOutput$8 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
interface SimpleMessageLibInterface extends utils.Interface {
    functions: {
        "PACKET_VERSION()": FunctionFragment;
        "defaultOption()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "localEid()": FunctionFragment;
        "lzTokenFee()": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "nativeFee()": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setDefaultOption(bytes)": FunctionFragment;
        "setMessagingFee(uint256,uint256)": FunctionFragment;
        "setWhitelistCaller(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "validatePacket(bytes)": FunctionFragment;
        "version()": FunctionFragment;
        "whitelistCaller()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "PACKET_VERSION" | "defaultOption" | "endpoint" | "isSupportedEid" | "localEid" | "lzTokenFee" | "messageLibType" | "nativeFee" | "owner" | "quote" | "renounceOwnership" | "send" | "setDefaultOption" | "setMessagingFee" | "setWhitelistCaller" | "supportsInterface" | "transferOwnership" | "treasury" | "validatePacket" | "version" | "whitelistCaller" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "PACKET_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultOption", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzTokenFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct$2, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct$2, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setDefaultOption", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setMessagingFee", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setWhitelistCaller", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "validatePacket", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelistCaller", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "PACKET_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultOption", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOption", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMessagingFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatePacket", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$B {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$B = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$B>;
type OwnershipTransferredEventFilter$B = TypedEventFilter<OwnershipTransferredEvent$B>;
interface SimpleMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SimpleMessageLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<[number]>;
        defaultOption(overrides?: CallOverrides): Promise<[string]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        localEid(overrides?: CallOverrides): Promise<[number]>;
        lzTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        nativeFee(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(arg0: PacketStruct$2, arg1: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$8]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: PacketStruct$2, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        whitelistCaller(overrides?: CallOverrides): Promise<[string]>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    PACKET_VERSION(overrides?: CallOverrides): Promise<number>;
    defaultOption(overrides?: CallOverrides): Promise<string>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    localEid(overrides?: CallOverrides): Promise<number>;
    lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    nativeFee(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(arg0: PacketStruct$2, arg1: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$8>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: PacketStruct$2, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    whitelistCaller(overrides?: CallOverrides): Promise<string>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<number>;
        defaultOption(overrides?: CallOverrides): Promise<string>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        localEid(overrides?: CallOverrides): Promise<number>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        nativeFee(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(arg0: PacketStruct$2, arg1: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$8>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_packet: PacketStruct$2, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            MessagingFeeStructOutput$8,
            string,
            string
        ] & {
            fee: MessagingFeeStructOutput$8;
            encodedPacket: string;
            options: string;
        }>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        whitelistCaller(overrides?: CallOverrides): Promise<string>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$B;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$B;
    };
    estimateGas: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<BigNumber>;
        defaultOption(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        localEid(overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        nativeFee(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(arg0: PacketStruct$2, arg1: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: PacketStruct$2, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        whitelistCaller(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(arg0: PacketStruct$2, arg1: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: PacketStruct$2, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelistCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$1b_BlockedMessageLib = BlockedMessageLib;
type index$1b_SimpleMessageLib = SimpleMessageLib;
declare namespace index$1b {
  export { type index$1b_BlockedMessageLib as BlockedMessageLib, type index$1b_SimpleMessageLib as SimpleMessageLib, index$1c as libs };
}

type OriginStruct$f = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct$6 = {
    origin: OriginStruct$f;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
interface OmniCounterInterface extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "batchIncrement(uint32[],uint8[],bytes[])": FunctionFragment;
        "brokenIncrement(uint32,uint8,bytes)": FunctionFragment;
        "composedCount()": FunctionFragment;
        "count()": FunctionFragment;
        "eid()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "inboundCount(uint32)": FunctionFragment;
        "increment(uint32,uint8,bytes)": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oApp()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "outboundCount(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "preCrime()": FunctionFragment;
        "quote(uint32,uint8,bytes)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setAdmin(address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setOrderedNonce(bool)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
        "skipInboundNonce(uint32,bytes32,uint64)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdraw(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "allowInitializePath" | "batchIncrement" | "brokenIncrement" | "composedCount" | "count" | "eid" | "endpoint" | "inboundCount" | "increment" | "isComposeMsgSender" | "isPeer" | "lzCompose" | "lzReceive" | "lzReceiveAndRevert" | "lzReceiveSimulate" | "nextNonce" | "oApp" | "oAppVersion" | "outboundCount" | "owner" | "peers" | "preCrime" | "quote" | "renounceOwnership" | "setAdmin" | "setDelegate" | "setOrderedNonce" | "setPeer" | "setPreCrime" | "skipInboundNonce" | "transferOwnership" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$f]): string;
    encodeFunctionData(functionFragment: "batchIncrement", values: [
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "brokenIncrement", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composedCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "count", values?: undefined): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "increment", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$f, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$f,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$6[]]): string;
    encodeFunctionData(functionFragment: "lzReceiveSimulate", values: [
        OriginStruct$f,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "outboundCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setOrderedNonce", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "skipInboundNonce", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "brokenIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composedCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveSimulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOrderedNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skipInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
        "PreCrimeSet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
}
interface OwnershipTransferredEventObject$A {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$A = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$A>;
type OwnershipTransferredEventFilter$A = TypedEventFilter<OwnershipTransferredEvent$A>;
interface PeerSetEventObject$c {
    eid: number;
    peer: string;
}
type PeerSetEvent$c = TypedEvent<[number, string], PeerSetEventObject$c>;
type PeerSetEventFilter$c = TypedEventFilter<PeerSetEvent$c>;
interface PreCrimeSetEventObject$6 {
    preCrimeAddress: string;
}
type PreCrimeSetEvent$6 = TypedEvent<[string], PreCrimeSetEventObject$6>;
type PreCrimeSetEventFilter$6 = TypedEventFilter<PreCrimeSetEvent$6>;
interface OmniCounter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: CallOverrides): Promise<[string]>;
        allowInitializePath(origin: OriginStruct$f, overrides?: CallOverrides): Promise<[boolean]>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composedCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        count(overrides?: CallOverrides): Promise<[BigNumber]>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isComposeMsgSender(arg0: OriginStruct$f, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$6[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: CallOverrides): Promise<string>;
    allowInitializePath(origin: OriginStruct$f, overrides?: CallOverrides): Promise<boolean>;
    batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composedCount(overrides?: CallOverrides): Promise<BigNumber>;
    count(overrides?: CallOverrides): Promise<BigNumber>;
    eid(overrides?: CallOverrides): Promise<number>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isComposeMsgSender(arg0: OriginStruct$f, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: InboundPacketStruct$6[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveSimulate(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        allowInitializePath(origin: OriginStruct$f, overrides?: CallOverrides): Promise<boolean>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composedCount(overrides?: CallOverrides): Promise<BigNumber>;
        count(overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<number>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        isComposeMsgSender(arg0: OriginStruct$f, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$6[], overrides?: CallOverrides): Promise<void>;
        lzReceiveSimulate(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$A;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$A;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$c;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$c;
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter$6;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter$6;
    };
    estimateGas: {
        admin(overrides?: CallOverrides): Promise<BigNumber>;
        allowInitializePath(origin: OriginStruct$f, overrides?: CallOverrides): Promise<BigNumber>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composedCount(overrides?: CallOverrides): Promise<BigNumber>;
        count(overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$f, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$6[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveSimulate(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowInitializePath(origin: OriginStruct$f, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        count(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$f, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$6[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$f, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$e = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct$5 = {
    origin: OriginStruct$e;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
interface OmniCounterAbstractInterface extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "batchIncrement(uint32[],uint8[],bytes[])": FunctionFragment;
        "brokenIncrement(uint32,uint8,bytes)": FunctionFragment;
        "composedCount()": FunctionFragment;
        "count()": FunctionFragment;
        "eid()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "inboundCount(uint32)": FunctionFragment;
        "increment(uint32,uint8,bytes)": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oApp()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "outboundCount(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "preCrime()": FunctionFragment;
        "quote(uint32,uint8,bytes)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setAdmin(address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setOrderedNonce(bool)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
        "skipInboundNonce(uint32,bytes32,uint64)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdraw(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "allowInitializePath" | "batchIncrement" | "brokenIncrement" | "composedCount" | "count" | "eid" | "endpoint" | "inboundCount" | "increment" | "isComposeMsgSender" | "isPeer" | "lzCompose" | "lzReceive" | "lzReceiveAndRevert" | "lzReceiveSimulate" | "nextNonce" | "oApp" | "oAppVersion" | "outboundCount" | "owner" | "peers" | "preCrime" | "quote" | "renounceOwnership" | "setAdmin" | "setDelegate" | "setOrderedNonce" | "setPeer" | "setPreCrime" | "skipInboundNonce" | "transferOwnership" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$e]): string;
    encodeFunctionData(functionFragment: "batchIncrement", values: [
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "brokenIncrement", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composedCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "count", values?: undefined): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "increment", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$e, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$e,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$5[]]): string;
    encodeFunctionData(functionFragment: "lzReceiveSimulate", values: [
        OriginStruct$e,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "outboundCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setOrderedNonce", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "skipInboundNonce", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "brokenIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composedCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveSimulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOrderedNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skipInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
        "PreCrimeSet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
}
interface OwnershipTransferredEventObject$z {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$z = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$z>;
type OwnershipTransferredEventFilter$z = TypedEventFilter<OwnershipTransferredEvent$z>;
interface PeerSetEventObject$b {
    eid: number;
    peer: string;
}
type PeerSetEvent$b = TypedEvent<[number, string], PeerSetEventObject$b>;
type PeerSetEventFilter$b = TypedEventFilter<PeerSetEvent$b>;
interface PreCrimeSetEventObject$5 {
    preCrimeAddress: string;
}
type PreCrimeSetEvent$5 = TypedEvent<[string], PreCrimeSetEventObject$5>;
type PreCrimeSetEventFilter$5 = TypedEventFilter<PreCrimeSetEvent$5>;
interface OmniCounterAbstract extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterAbstractInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: CallOverrides): Promise<[string]>;
        allowInitializePath(origin: OriginStruct$e, overrides?: CallOverrides): Promise<[boolean]>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composedCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        count(overrides?: CallOverrides): Promise<[BigNumber]>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isComposeMsgSender(arg0: OriginStruct$e, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$5[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: CallOverrides): Promise<string>;
    allowInitializePath(origin: OriginStruct$e, overrides?: CallOverrides): Promise<boolean>;
    batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composedCount(overrides?: CallOverrides): Promise<BigNumber>;
    count(overrides?: CallOverrides): Promise<BigNumber>;
    eid(overrides?: CallOverrides): Promise<number>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isComposeMsgSender(arg0: OriginStruct$e, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: InboundPacketStruct$5[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveSimulate(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        allowInitializePath(origin: OriginStruct$e, overrides?: CallOverrides): Promise<boolean>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composedCount(overrides?: CallOverrides): Promise<BigNumber>;
        count(overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<number>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        isComposeMsgSender(arg0: OriginStruct$e, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$5[], overrides?: CallOverrides): Promise<void>;
        lzReceiveSimulate(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$z;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$z;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$b;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$b;
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter$5;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter$5;
    };
    estimateGas: {
        admin(overrides?: CallOverrides): Promise<BigNumber>;
        allowInitializePath(origin: OriginStruct$e, overrides?: CallOverrides): Promise<BigNumber>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composedCount(overrides?: CallOverrides): Promise<BigNumber>;
        count(overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$e, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$5[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveSimulate(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowInitializePath(origin: OriginStruct$e, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        count(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$e, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_oApp: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$5[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$e, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type PreCrimePeerStruct$2 = {
    eid: PromiseOrValue<BigNumberish>;
    preCrime: PromiseOrValue<BytesLike>;
    oApp: PromiseOrValue<BytesLike>;
};
type PreCrimePeerStructOutput$2 = [number, string, string] & {
    eid: number;
    preCrime: string;
    oApp: string;
};
interface OmniCounterPreCrimeInterface extends utils.Interface {
    functions: {
        "buildSimulationResult()": FunctionFragment;
        "getConfig(bytes[],uint256[])": FunctionFragment;
        "getPreCrimePeers()": FunctionFragment;
        "maxBatchSize()": FunctionFragment;
        "oApp()": FunctionFragment;
        "owner()": FunctionFragment;
        "preCrime(bytes[],uint256[],bytes[])": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setMaxBatchSize(uint64)": FunctionFragment;
        "setPreCrimePeers((uint32,bytes32,bytes32)[])": FunctionFragment;
        "simulate(bytes[],uint256[])": FunctionFragment;
        "simulator()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "buildSimulationResult" | "getConfig" | "getPreCrimePeers" | "maxBatchSize" | "oApp" | "owner" | "preCrime" | "renounceOwnership" | "setMaxBatchSize" | "setPreCrimePeers" | "simulate" | "simulator" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "getPreCrimePeers", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "preCrime", values: [
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPreCrimePeers", values: [PreCrimePeerStruct$2[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "simulator", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$y {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$y = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$y>;
type OwnershipTransferredEventFilter$y = TypedEventFilter<OwnershipTransferredEvent$y>;
interface OmniCounterPreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterPreCrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        buildSimulationResult(overrides?: CallOverrides): Promise<[string]>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<[PreCrimePeerStructOutput$2[]]>;
        maxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulator(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    buildSimulationResult(overrides?: CallOverrides): Promise<string>;
    getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput$2[]>;
    maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$2[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulator(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
        major: BigNumber;
        minor: number;
    }>;
    callStatic: {
        buildSimulationResult(overrides?: CallOverrides): Promise<string>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput$2[]>;
        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$2[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        simulator(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$y;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$y;
    };
    estimateGas: {
        buildSimulationResult(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<BigNumber>;
        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulator(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        buildSimulationResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$1a_OmniCounter = OmniCounter;
type index$1a_OmniCounterAbstract = OmniCounterAbstract;
type index$1a_OmniCounterPreCrime = OmniCounterPreCrime;
declare namespace index$1a {
  export type { index$1a_OmniCounter as OmniCounter, index$1a_OmniCounterAbstract as OmniCounterAbstract, index$1a_OmniCounterPreCrime as OmniCounterPreCrime };
}

interface IOAppComposerInterface extends utils.Interface {
    functions: {
        "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "lzCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    events: {};
}
interface IOAppComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        lzCompose(_from: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IOAppCoreInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "oAppVersion" | "peers" | "setDelegate" | "setPeer"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    events: {
        "PeerSet(uint32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
}
interface PeerSetEventObject$a {
    eid: number;
    peer: string;
}
type PeerSetEvent$a = TypedEvent<[number, string], PeerSetEventObject$a>;
type PeerSetEventFilter$a = TypedEventFilter<PeerSetEvent$a>;
interface IOAppCore extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppCoreInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string] & {
            iEndpoint: string;
        }>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        peers(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    peers(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        peers(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$a;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$a;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        peers(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IOAppMsgInspectorInterface extends utils.Interface {
    functions: {
        "inspect(bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "inspect"): FunctionFragment;
    encodeFunctionData(functionFragment: "inspect", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "inspect", data: BytesLike): Result;
    events: {};
}
interface IOAppMsgInspector extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppMsgInspectorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            valid: boolean;
        }>;
    };
    inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type EnforcedOptionParamStruct$4 = {
    eid: PromiseOrValue<BigNumberish>;
    msgType: PromiseOrValue<BigNumberish>;
    options: PromiseOrValue<BytesLike>;
};
type EnforcedOptionParamStructOutput$4 = [number, number, string] & {
    eid: number;
    msgType: number;
    options: string;
};
interface IOAppOptionsType3Interface extends utils.Interface {
    functions: {
        "combineOptions(uint32,uint16,bytes)": FunctionFragment;
        "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "combineOptions" | "setEnforcedOptions"): FunctionFragment;
    encodeFunctionData(functionFragment: "combineOptions", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$4[]]): string;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    events: {
        "EnforcedOptionSet(tuple[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
}
interface EnforcedOptionSetEventObject$4 {
    _enforcedOptions: EnforcedOptionParamStructOutput$4[];
}
type EnforcedOptionSetEvent$4 = TypedEvent<[
    EnforcedOptionParamStructOutput$4[]
], EnforcedOptionSetEventObject$4>;
type EnforcedOptionSetEventFilter$4 = TypedEventFilter<EnforcedOptionSetEvent$4>;
interface IOAppOptionsType3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppOptionsType3Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string] & {
            options: string;
        }>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$4[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$4[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "EnforcedOptionSet(tuple[])"(_enforcedOptions?: null): EnforcedOptionSetEventFilter$4;
        EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter$4;
    };
    estimateGas: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$d = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface IOAppReceiverInterface extends utils.Interface {
    functions: {
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowInitializePath" | "isComposeMsgSender" | "lzReceive" | "nextNonce"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$d]): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$d, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$d,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    events: {};
}
interface IOAppReceiver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppReceiverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowInitializePath(_origin: OriginStruct$d, overrides?: CallOverrides): Promise<[boolean]>;
        isComposeMsgSender(_origin: OriginStruct$d, _message: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            isSender: boolean;
        }>;
        lzReceive(_origin: OriginStruct$d, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    allowInitializePath(_origin: OriginStruct$d, overrides?: CallOverrides): Promise<boolean>;
    isComposeMsgSender(_origin: OriginStruct$d, _message: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$d, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        allowInitializePath(_origin: OriginStruct$d, overrides?: CallOverrides): Promise<boolean>;
        isComposeMsgSender(_origin: OriginStruct$d, _message: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$d, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        allowInitializePath(_origin: OriginStruct$d, overrides?: CallOverrides): Promise<BigNumber>;
        isComposeMsgSender(_origin: OriginStruct$d, _message: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$d, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        allowInitializePath(_origin: OriginStruct$d, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isComposeMsgSender(_origin: OriginStruct$d, _message: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$d, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$19_IOAppComposer = IOAppComposer;
type index$19_IOAppCore = IOAppCore;
type index$19_IOAppMsgInspector = IOAppMsgInspector;
type index$19_IOAppOptionsType3 = IOAppOptionsType3;
type index$19_IOAppReceiver = IOAppReceiver;
declare namespace index$19 {
  export type { index$19_IOAppComposer as IOAppComposer, index$19_IOAppCore as IOAppCore, index$19_IOAppMsgInspector as IOAppMsgInspector, index$19_IOAppOptionsType3 as IOAppOptionsType3, index$19_IOAppReceiver as IOAppReceiver };
}

type EnforcedOptionParamStruct$3 = {
    eid: PromiseOrValue<BigNumberish>;
    msgType: PromiseOrValue<BigNumberish>;
    options: PromiseOrValue<BytesLike>;
};
type EnforcedOptionParamStructOutput$3 = [number, number, string] & {
    eid: number;
    msgType: number;
    options: string;
};
interface OAppOptionsType3Interface extends utils.Interface {
    functions: {
        "combineOptions(uint32,uint16,bytes)": FunctionFragment;
        "enforcedOptions(uint32,uint16)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "combineOptions" | "enforcedOptions" | "owner" | "renounceOwnership" | "setEnforcedOptions" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "combineOptions", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "EnforcedOptionSet(tuple[])": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface EnforcedOptionSetEventObject$3 {
    _enforcedOptions: EnforcedOptionParamStructOutput$3[];
}
type EnforcedOptionSetEvent$3 = TypedEvent<[
    EnforcedOptionParamStructOutput$3[]
], EnforcedOptionSetEventObject$3>;
type EnforcedOptionSetEventFilter$3 = TypedEventFilter<EnforcedOptionSetEvent$3>;
interface OwnershipTransferredEventObject$x {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$x = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$x>;
type OwnershipTransferredEventFilter$x = TypedEventFilter<OwnershipTransferredEvent$x>;
interface OAppOptionsType3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppOptionsType3Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            enforcedOption: string;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$3[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$3[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "EnforcedOptionSet(tuple[])"(_enforcedOptions?: null): EnforcedOptionSetEventFilter$3;
        EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter$3;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$x;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$x;
    };
    estimateGas: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface OptionsBuilderInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface OptionsBuilder extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OptionsBuilderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

type index$18_OAppOptionsType3 = OAppOptionsType3;
type index$18_OptionsBuilder = OptionsBuilder;
declare namespace index$18 {
  export type { index$18_OAppOptionsType3 as OAppOptionsType3, index$18_OptionsBuilder as OptionsBuilder };
}

interface RateLimiterInterface extends utils.Interface {
    functions: {
        "getAmountCanBeSent(uint32)": FunctionFragment;
        "rateLimits(uint32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getAmountCanBeSent" | "rateLimits"): FunctionFragment;
    encodeFunctionData(functionFragment: "getAmountCanBeSent", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "rateLimits", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "getAmountCanBeSent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rateLimits", data: BytesLike): Result;
    events: {
        "RateLimitsChanged(tuple[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "RateLimitsChanged"): EventFragment;
}
interface RateLimitsChangedEventObject {
    rateLimitConfigs: RateLimiter.RateLimitConfigStructOutput[];
}
type RateLimitsChangedEvent = TypedEvent<[
    RateLimiter.RateLimitConfigStructOutput[]
], RateLimitsChangedEventObject>;
type RateLimitsChangedEventFilter = TypedEventFilter<RateLimitsChangedEvent>;
declare namespace RateLimiter {
    type RateLimitConfigStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        limit: PromiseOrValue<BigNumberish>;
        window: PromiseOrValue<BigNumberish>;
    };
    type RateLimitConfigStructOutput = [number, BigNumber, BigNumber] & {
        dstEid: number;
        limit: BigNumber;
        window: BigNumber;
    };
}
interface RateLimiter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RateLimiterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getAmountCanBeSent(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            currentAmountInFlight: BigNumber;
            amountCanBeSent: BigNumber;
        }>;
        rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            amountInFlight: BigNumber;
            lastUpdated: BigNumber;
            limit: BigNumber;
            window: BigNumber;
        }>;
    };
    getAmountCanBeSent(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        currentAmountInFlight: BigNumber;
        amountCanBeSent: BigNumber;
    }>;
    rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        amountInFlight: BigNumber;
        lastUpdated: BigNumber;
        limit: BigNumber;
        window: BigNumber;
    }>;
    callStatic: {
        getAmountCanBeSent(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            currentAmountInFlight: BigNumber;
            amountCanBeSent: BigNumber;
        }>;
        rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            amountInFlight: BigNumber;
            lastUpdated: BigNumber;
            limit: BigNumber;
            window: BigNumber;
        }>;
    };
    filters: {
        "RateLimitsChanged(tuple[])"(rateLimitConfigs?: null): RateLimitsChangedEventFilter;
        RateLimitsChanged(rateLimitConfigs?: null): RateLimitsChangedEventFilter;
    };
    estimateGas: {
        getAmountCanBeSent(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getAmountCanBeSent(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$17_RateLimiter = RateLimiter;
declare namespace index$17 {
  export type { index$17_RateLimiter as RateLimiter };
}

type OriginStruct$c = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface OAppInterface extends utils.Interface {
    functions: {
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "endpoint()": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowInitializePath" | "endpoint" | "isComposeMsgSender" | "lzReceive" | "nextNonce" | "oAppVersion" | "owner" | "peers" | "renounceOwnership" | "setDelegate" | "setPeer" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$c]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$c, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$c,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
}
interface OwnershipTransferredEventObject$w {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$w = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$w>;
type OwnershipTransferredEventFilter$w = TypedEventFilter<OwnershipTransferredEvent$w>;
interface PeerSetEventObject$9 {
    eid: number;
    peer: string;
}
type PeerSetEvent$9 = TypedEvent<[number, string], PeerSetEventObject$9>;
type PeerSetEventFilter$9 = TypedEventFilter<PeerSetEvent$9>;
interface OApp extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowInitializePath(origin: OriginStruct$c, overrides?: CallOverrides): Promise<[boolean]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        isComposeMsgSender(arg0: OriginStruct$c, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceive(_origin: OriginStruct$c, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    allowInitializePath(origin: OriginStruct$c, overrides?: CallOverrides): Promise<boolean>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    isComposeMsgSender(arg0: OriginStruct$c, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$c, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        allowInitializePath(origin: OriginStruct$c, overrides?: CallOverrides): Promise<boolean>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        isComposeMsgSender(arg0: OriginStruct$c, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$c, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$w;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$w;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$9;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$9;
    };
    estimateGas: {
        allowInitializePath(origin: OriginStruct$c, overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$c, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$c, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        allowInitializePath(origin: OriginStruct$c, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$c, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$c, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface OAppCoreInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "oAppVersion" | "owner" | "peers" | "renounceOwnership" | "setDelegate" | "setPeer" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
}
interface OwnershipTransferredEventObject$v {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$v = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$v>;
type OwnershipTransferredEventFilter$v = TypedEventFilter<OwnershipTransferredEvent$v>;
interface PeerSetEventObject$8 {
    eid: number;
    peer: string;
}
type PeerSetEvent$8 = TypedEvent<[number, string], PeerSetEventObject$8>;
type PeerSetEventFilter$8 = TypedEventFilter<PeerSetEvent$8>;
interface OAppCore extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppCoreInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$v;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$v;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$8;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$8;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$b = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface OAppReceiverInterface extends utils.Interface {
    functions: {
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "endpoint()": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowInitializePath" | "endpoint" | "isComposeMsgSender" | "lzReceive" | "nextNonce" | "oAppVersion" | "owner" | "peers" | "renounceOwnership" | "setDelegate" | "setPeer" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$b]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$b, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$b,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
}
interface OwnershipTransferredEventObject$u {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$u = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$u>;
type OwnershipTransferredEventFilter$u = TypedEventFilter<OwnershipTransferredEvent$u>;
interface PeerSetEventObject$7 {
    eid: number;
    peer: string;
}
type PeerSetEvent$7 = TypedEvent<[number, string], PeerSetEventObject$7>;
type PeerSetEventFilter$7 = TypedEventFilter<PeerSetEvent$7>;
interface OAppReceiver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppReceiverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowInitializePath(origin: OriginStruct$b, overrides?: CallOverrides): Promise<[boolean]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        isComposeMsgSender(arg0: OriginStruct$b, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceive(_origin: OriginStruct$b, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    allowInitializePath(origin: OriginStruct$b, overrides?: CallOverrides): Promise<boolean>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    isComposeMsgSender(arg0: OriginStruct$b, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$b, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        allowInitializePath(origin: OriginStruct$b, overrides?: CallOverrides): Promise<boolean>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        isComposeMsgSender(arg0: OriginStruct$b, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$b, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$u;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$u;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$7;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$7;
    };
    estimateGas: {
        allowInitializePath(origin: OriginStruct$b, overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$b, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$b, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        allowInitializePath(origin: OriginStruct$b, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$b, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$b, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface OAppSenderInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "oAppVersion" | "owner" | "peers" | "renounceOwnership" | "setDelegate" | "setPeer" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
}
interface OwnershipTransferredEventObject$t {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$t = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$t>;
type OwnershipTransferredEventFilter$t = TypedEventFilter<OwnershipTransferredEvent$t>;
interface PeerSetEventObject$6 {
    eid: number;
    peer: string;
}
type PeerSetEvent$6 = TypedEvent<[number, string], PeerSetEventObject$6>;
type PeerSetEventFilter$6 = TypedEventFilter<PeerSetEvent$6>;
interface OAppSender extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppSenderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$t;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$t;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$6;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$6;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$16_OApp = OApp;
type index$16_OAppCore = OAppCore;
type index$16_OAppReceiver = OAppReceiver;
type index$16_OAppSender = OAppSender;
declare namespace index$16 {
  export { type index$16_OApp as OApp, type index$16_OAppCore as OAppCore, type index$16_OAppReceiver as OAppReceiver, type index$16_OAppSender as OAppSender, index$1a as examples, index$19 as interfaces, index$18 as libs, index$17 as utils };
}

type SendParamStruct$3 = {
    dstEid: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BytesLike>;
    amountLD: PromiseOrValue<BigNumberish>;
    minAmountLD: PromiseOrValue<BigNumberish>;
    extraOptions: PromiseOrValue<BytesLike>;
    composeMsg: PromiseOrValue<BytesLike>;
    oftCmd: PromiseOrValue<BytesLike>;
};
type OFTLimitStructOutput$3 = [BigNumber, BigNumber] & {
    minAmountLD: BigNumber;
    maxAmountLD: BigNumber;
};
type OFTFeeDetailStructOutput$3 = [BigNumber, string] & {
    feeAmountLD: BigNumber;
    description: string;
};
type OFTReceiptStructOutput$3 = [BigNumber, BigNumber] & {
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
};
type MessagingFeeStruct$3 = {
    nativeFee: PromiseOrValue<BigNumberish>;
    lzTokenFee: PromiseOrValue<BigNumberish>;
};
type MessagingFeeStructOutput$7 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput$5 = [
    string,
    BigNumber,
    MessagingFeeStructOutput$7
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$7;
};
interface IOFTInterface extends utils.Interface {
    functions: {
        "approvalRequired()": FunctionFragment;
        "oftVersion()": FunctionFragment;
        "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
        "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
        "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "token()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "approvalRequired" | "oftVersion" | "quoteOFT" | "quoteSend" | "send" | "sharedDecimals" | "token"): FunctionFragment;
    encodeFunctionData(functionFragment: "approvalRequired", values?: undefined): string;
    encodeFunctionData(functionFragment: "oftVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteOFT", values: [SendParamStruct$3]): string;
    encodeFunctionData(functionFragment: "quoteSend", values: [SendParamStruct$3, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "send", values: [SendParamStruct$3, MessagingFeeStruct$3, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    decodeFunctionResult(functionFragment: "approvalRequired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    events: {
        "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
        "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
}
interface OFTReceivedEventObject$3 {
    guid: string;
    srcEid: number;
    toAddress: string;
    amountReceivedLD: BigNumber;
}
type OFTReceivedEvent$3 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], OFTReceivedEventObject$3>;
type OFTReceivedEventFilter$3 = TypedEventFilter<OFTReceivedEvent$3>;
interface OFTSentEventObject$3 {
    guid: string;
    dstEid: number;
    fromAddress: string;
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
}
type OFTSentEvent$3 = TypedEvent<[
    string,
    number,
    string,
    BigNumber,
    BigNumber
], OFTSentEventObject$3>;
type OFTSentEventFilter$3 = TypedEventFilter<OFTSentEvent$3>;
interface IOFT extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOFTInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        quoteOFT(_sendParam: SendParamStruct$3, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput$3,
            OFTFeeDetailStructOutput$3[],
            OFTReceiptStructOutput$3
        ] & {
            oftFeeDetails: OFTFeeDetailStructOutput$3[];
        }>;
        quoteSend(_sendParam: SendParamStruct$3, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$7]>;
        send(_sendParam: SendParamStruct$3, _fee: MessagingFeeStruct$3, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        token(overrides?: CallOverrides): Promise<[string]>;
    };
    approvalRequired(overrides?: CallOverrides): Promise<boolean>;
    oftVersion(overrides?: CallOverrides): Promise<[string, BigNumber] & {
        interfaceId: string;
        version: BigNumber;
    }>;
    quoteOFT(_sendParam: SendParamStruct$3, overrides?: CallOverrides): Promise<[
        OFTLimitStructOutput$3,
        OFTFeeDetailStructOutput$3[],
        OFTReceiptStructOutput$3
    ] & {
        oftFeeDetails: OFTFeeDetailStructOutput$3[];
    }>;
    quoteSend(_sendParam: SendParamStruct$3, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$7>;
    send(_sendParam: SendParamStruct$3, _fee: MessagingFeeStruct$3, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    token(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        approvalRequired(overrides?: CallOverrides): Promise<boolean>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        quoteOFT(_sendParam: SendParamStruct$3, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput$3,
            OFTFeeDetailStructOutput$3[],
            OFTReceiptStructOutput$3
        ] & {
            oftFeeDetails: OFTFeeDetailStructOutput$3[];
        }>;
        quoteSend(_sendParam: SendParamStruct$3, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$7>;
        send(_sendParam: SendParamStruct$3, _fee: MessagingFeeStruct$3, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[MessagingReceiptStructOutput$5, OFTReceiptStructOutput$3]>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        token(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "OFTReceived(bytes32,uint32,address,uint256)"(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter$3;
        OFTReceived(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter$3;
        "OFTSent(bytes32,uint32,address,uint256,uint256)"(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter$3;
        OFTSent(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter$3;
    };
    estimateGas: {
        approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;
        oftVersion(overrides?: CallOverrides): Promise<BigNumber>;
        quoteOFT(_sendParam: SendParamStruct$3, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSend(_sendParam: SendParamStruct$3, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_sendParam: SendParamStruct$3, _fee: MessagingFeeStruct$3, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteOFT(_sendParam: SendParamStruct$3, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSend(_sendParam: SendParamStruct$3, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_sendParam: SendParamStruct$3, _fee: MessagingFeeStruct$3, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$15_IOFT = IOFT;
declare namespace index$15 {
  export type { index$15_IOFT as IOFT };
}

type EnforcedOptionParamStruct$2 = {
    eid: PromiseOrValue<BigNumberish>;
    msgType: PromiseOrValue<BigNumberish>;
    options: PromiseOrValue<BytesLike>;
};
type EnforcedOptionParamStructOutput$2 = [number, number, string] & {
    eid: number;
    msgType: number;
    options: string;
};
type OriginStruct$a = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct$4 = {
    origin: OriginStruct$a;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
type SendParamStruct$2 = {
    dstEid: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BytesLike>;
    amountLD: PromiseOrValue<BigNumberish>;
    minAmountLD: PromiseOrValue<BigNumberish>;
    extraOptions: PromiseOrValue<BytesLike>;
    composeMsg: PromiseOrValue<BytesLike>;
    oftCmd: PromiseOrValue<BytesLike>;
};
type OFTLimitStructOutput$2 = [BigNumber, BigNumber] & {
    minAmountLD: BigNumber;
    maxAmountLD: BigNumber;
};
type OFTFeeDetailStructOutput$2 = [BigNumber, string] & {
    feeAmountLD: BigNumber;
    description: string;
};
type OFTReceiptStructOutput$2 = [BigNumber, BigNumber] & {
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
};
type MessagingFeeStruct$2 = {
    nativeFee: PromiseOrValue<BigNumberish>;
    lzTokenFee: PromiseOrValue<BigNumberish>;
};
type MessagingFeeStructOutput$6 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput$4 = [
    string,
    BigNumber,
    MessagingFeeStructOutput$6
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$6;
};
interface OFTInterface extends utils.Interface {
    functions: {
        "SEND()": FunctionFragment;
        "SEND_AND_CALL()": FunctionFragment;
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approvalRequired()": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "combineOptions(uint32,uint16,bytes)": FunctionFragment;
        "decimalConversionRate()": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "enforcedOptions(uint32,uint16)": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "msgInspector()": FunctionFragment;
        "name()": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oApp()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "oftVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "preCrime()": FunctionFragment;
        "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
        "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
        "setMsgInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "symbol()": FunctionFragment;
        "token()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SEND" | "SEND_AND_CALL" | "allowInitializePath" | "allowance" | "approvalRequired" | "approve" | "balanceOf" | "combineOptions" | "decimalConversionRate" | "decimals" | "decreaseAllowance" | "endpoint" | "enforcedOptions" | "increaseAllowance" | "isComposeMsgSender" | "isPeer" | "lzReceive" | "lzReceiveAndRevert" | "lzReceiveSimulate" | "msgInspector" | "name" | "nextNonce" | "oApp" | "oAppVersion" | "oftVersion" | "owner" | "peers" | "preCrime" | "quoteOFT" | "quoteSend" | "renounceOwnership" | "send" | "setDelegate" | "setEnforcedOptions" | "setMsgInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "symbol" | "token" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "SEND", values?: undefined): string;
    encodeFunctionData(functionFragment: "SEND_AND_CALL", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$a]): string;
    encodeFunctionData(functionFragment: "allowance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "approvalRequired", values?: undefined): string;
    encodeFunctionData(functionFragment: "approve", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "decimalConversionRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$a, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$a,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$4[]]): string;
    encodeFunctionData(functionFragment: "lzReceiveSimulate", values: [
        OriginStruct$a,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "msgInspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "oftVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteOFT", values: [SendParamStruct$2]): string;
    encodeFunctionData(functionFragment: "quoteSend", values: [SendParamStruct$2, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [SendParamStruct$2, MessagingFeeStruct$2, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "setMsgInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "SEND", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SEND_AND_CALL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approvalRequired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimalConversionRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveSimulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "msgInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMsgInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "Approval(address,address,uint256)": EventFragment;
        "EnforcedOptionSet(tuple[])": EventFragment;
        "MsgInspectorSet(address)": EventFragment;
        "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
        "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
        "PreCrimeSet(address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MsgInspectorSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalEventObject {
    owner: string;
    spender: string;
    value: BigNumber;
}
type ApprovalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject>;
type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
interface EnforcedOptionSetEventObject$2 {
    _enforcedOptions: EnforcedOptionParamStructOutput$2[];
}
type EnforcedOptionSetEvent$2 = TypedEvent<[
    EnforcedOptionParamStructOutput$2[]
], EnforcedOptionSetEventObject$2>;
type EnforcedOptionSetEventFilter$2 = TypedEventFilter<EnforcedOptionSetEvent$2>;
interface MsgInspectorSetEventObject$2 {
    inspector: string;
}
type MsgInspectorSetEvent$2 = TypedEvent<[
    string
], MsgInspectorSetEventObject$2>;
type MsgInspectorSetEventFilter$2 = TypedEventFilter<MsgInspectorSetEvent$2>;
interface OFTReceivedEventObject$2 {
    guid: string;
    srcEid: number;
    toAddress: string;
    amountReceivedLD: BigNumber;
}
type OFTReceivedEvent$2 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], OFTReceivedEventObject$2>;
type OFTReceivedEventFilter$2 = TypedEventFilter<OFTReceivedEvent$2>;
interface OFTSentEventObject$2 {
    guid: string;
    dstEid: number;
    fromAddress: string;
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
}
type OFTSentEvent$2 = TypedEvent<[
    string,
    number,
    string,
    BigNumber,
    BigNumber
], OFTSentEventObject$2>;
type OFTSentEventFilter$2 = TypedEventFilter<OFTSentEvent$2>;
interface OwnershipTransferredEventObject$s {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$s = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$s>;
type OwnershipTransferredEventFilter$s = TypedEventFilter<OwnershipTransferredEvent$s>;
interface PeerSetEventObject$5 {
    eid: number;
    peer: string;
}
type PeerSetEvent$5 = TypedEvent<[number, string], PeerSetEventObject$5>;
type PeerSetEventFilter$5 = TypedEventFilter<PeerSetEvent$5>;
interface PreCrimeSetEventObject$4 {
    preCrimeAddress: string;
}
type PreCrimeSetEvent$4 = TypedEvent<[string], PreCrimeSetEventObject$4>;
type PreCrimeSetEventFilter$4 = TypedEventFilter<PreCrimeSetEvent$4>;
interface TransferEventObject {
    from: string;
    to: string;
    value: BigNumber;
}
type TransferEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject>;
type TransferEventFilter = TypedEventFilter<TransferEvent>;
interface OFT extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SEND(overrides?: CallOverrides): Promise<[number]>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<[number]>;
        allowInitializePath(origin: OriginStruct$a, overrides?: CallOverrides): Promise<[boolean]>;
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        decimalConversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            enforcedOption: string;
        }>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isComposeMsgSender(arg0: OriginStruct$a, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceive(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$4[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        msgInspector(overrides?: CallOverrides): Promise<[string]>;
        name(overrides?: CallOverrides): Promise<[string]>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        quoteOFT(_sendParam: SendParamStruct$2, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput$2,
            OFTFeeDetailStructOutput$2[],
            OFTReceiptStructOutput$2
        ] & {
            oftLimit: OFTLimitStructOutput$2;
            oftFeeDetails: OFTFeeDetailStructOutput$2[];
            oftReceipt: OFTReceiptStructOutput$2;
        }>;
        quoteSend(_sendParam: SendParamStruct$2, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            MessagingFeeStructOutput$6
        ] & {
            msgFee: MessagingFeeStructOutput$6;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sendParam: SendParamStruct$2, _fee: MessagingFeeStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    SEND(overrides?: CallOverrides): Promise<number>;
    SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
    allowInitializePath(origin: OriginStruct$a, overrides?: CallOverrides): Promise<boolean>;
    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    approvalRequired(overrides?: CallOverrides): Promise<boolean>;
    approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
    decimals(overrides?: CallOverrides): Promise<number>;
    decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isComposeMsgSender(arg0: OriginStruct$a, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: InboundPacketStruct$4[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveSimulate(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    msgInspector(overrides?: CallOverrides): Promise<string>;
    name(overrides?: CallOverrides): Promise<string>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    oftVersion(overrides?: CallOverrides): Promise<[string, BigNumber] & {
        interfaceId: string;
        version: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    quoteOFT(_sendParam: SendParamStruct$2, overrides?: CallOverrides): Promise<[
        OFTLimitStructOutput$2,
        OFTFeeDetailStructOutput$2[],
        OFTReceiptStructOutput$2
    ] & {
        oftLimit: OFTLimitStructOutput$2;
        oftFeeDetails: OFTFeeDetailStructOutput$2[];
        oftReceipt: OFTReceiptStructOutput$2;
    }>;
    quoteSend(_sendParam: SendParamStruct$2, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$6>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sendParam: SendParamStruct$2, _fee: MessagingFeeStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$2[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    symbol(overrides?: CallOverrides): Promise<string>;
    token(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        SEND(overrides?: CallOverrides): Promise<number>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
        allowInitializePath(origin: OriginStruct$a, overrides?: CallOverrides): Promise<boolean>;
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approvalRequired(overrides?: CallOverrides): Promise<boolean>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<number>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isComposeMsgSender(arg0: OriginStruct$a, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$4[], overrides?: CallOverrides): Promise<void>;
        lzReceiveSimulate(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        msgInspector(overrides?: CallOverrides): Promise<string>;
        name(overrides?: CallOverrides): Promise<string>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        quoteOFT(_sendParam: SendParamStruct$2, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput$2,
            OFTFeeDetailStructOutput$2[],
            OFTReceiptStructOutput$2
        ] & {
            oftLimit: OFTLimitStructOutput$2;
            oftFeeDetails: OFTFeeDetailStructOutput$2[];
            oftReceipt: OFTReceiptStructOutput$2;
        }>;
        quoteSend(_sendParam: SendParamStruct$2, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$6>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sendParam: SendParamStruct$2, _fee: MessagingFeeStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            MessagingReceiptStructOutput$4,
            OFTReceiptStructOutput$2
        ] & {
            msgReceipt: MessagingReceiptStructOutput$4;
            oftReceipt: OFTReceiptStructOutput$2;
        }>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$2[], overrides?: CallOverrides): Promise<void>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        symbol(overrides?: CallOverrides): Promise<string>;
        token(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Approval(address,address,uint256)"(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter;
        Approval(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter;
        "EnforcedOptionSet(tuple[])"(_enforcedOptions?: null): EnforcedOptionSetEventFilter$2;
        EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter$2;
        "MsgInspectorSet(address)"(inspector?: null): MsgInspectorSetEventFilter$2;
        MsgInspectorSet(inspector?: null): MsgInspectorSetEventFilter$2;
        "OFTReceived(bytes32,uint32,address,uint256)"(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter$2;
        OFTReceived(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter$2;
        "OFTSent(bytes32,uint32,address,uint256,uint256)"(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter$2;
        OFTSent(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter$2;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$s;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$s;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$5;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$5;
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter$4;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter$4;
        "Transfer(address,address,uint256)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter;
        Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter;
    };
    estimateGas: {
        SEND(overrides?: CallOverrides): Promise<BigNumber>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<BigNumber>;
        allowInitializePath(origin: OriginStruct$a, overrides?: CallOverrides): Promise<BigNumber>;
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$a, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$4[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveSimulate(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        msgInspector(overrides?: CallOverrides): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        oftVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteOFT(_sendParam: SendParamStruct$2, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSend(_sendParam: SendParamStruct$2, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sendParam: SendParamStruct$2, _fee: MessagingFeeStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowInitializePath(origin: OriginStruct$a, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimalConversionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$a, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$4[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$a, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        msgInspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteOFT(_sendParam: SendParamStruct$2, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSend(_sendParam: SendParamStruct$2, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sendParam: SendParamStruct$2, _fee: MessagingFeeStruct$2, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type EnforcedOptionParamStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    msgType: PromiseOrValue<BigNumberish>;
    options: PromiseOrValue<BytesLike>;
};
type EnforcedOptionParamStructOutput$1 = [number, number, string] & {
    eid: number;
    msgType: number;
    options: string;
};
type OriginStruct$9 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct$3 = {
    origin: OriginStruct$9;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
type SendParamStruct$1 = {
    dstEid: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BytesLike>;
    amountLD: PromiseOrValue<BigNumberish>;
    minAmountLD: PromiseOrValue<BigNumberish>;
    extraOptions: PromiseOrValue<BytesLike>;
    composeMsg: PromiseOrValue<BytesLike>;
    oftCmd: PromiseOrValue<BytesLike>;
};
type OFTLimitStructOutput$1 = [BigNumber, BigNumber] & {
    minAmountLD: BigNumber;
    maxAmountLD: BigNumber;
};
type OFTFeeDetailStructOutput$1 = [BigNumber, string] & {
    feeAmountLD: BigNumber;
    description: string;
};
type OFTReceiptStructOutput$1 = [BigNumber, BigNumber] & {
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
};
type MessagingFeeStruct$1 = {
    nativeFee: PromiseOrValue<BigNumberish>;
    lzTokenFee: PromiseOrValue<BigNumberish>;
};
type MessagingFeeStructOutput$5 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput$3 = [
    string,
    BigNumber,
    MessagingFeeStructOutput$5
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$5;
};
interface OFTAdapterInterface extends utils.Interface {
    functions: {
        "SEND()": FunctionFragment;
        "SEND_AND_CALL()": FunctionFragment;
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "approvalRequired()": FunctionFragment;
        "combineOptions(uint32,uint16,bytes)": FunctionFragment;
        "decimalConversionRate()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "enforcedOptions(uint32,uint16)": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "msgInspector()": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oApp()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "oftVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "preCrime()": FunctionFragment;
        "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
        "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
        "setMsgInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "token()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SEND" | "SEND_AND_CALL" | "allowInitializePath" | "approvalRequired" | "combineOptions" | "decimalConversionRate" | "endpoint" | "enforcedOptions" | "isComposeMsgSender" | "isPeer" | "lzReceive" | "lzReceiveAndRevert" | "lzReceiveSimulate" | "msgInspector" | "nextNonce" | "oApp" | "oAppVersion" | "oftVersion" | "owner" | "peers" | "preCrime" | "quoteOFT" | "quoteSend" | "renounceOwnership" | "send" | "setDelegate" | "setEnforcedOptions" | "setMsgInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "token" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "SEND", values?: undefined): string;
    encodeFunctionData(functionFragment: "SEND_AND_CALL", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$9]): string;
    encodeFunctionData(functionFragment: "approvalRequired", values?: undefined): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "decimalConversionRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$9, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$9,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$3[]]): string;
    encodeFunctionData(functionFragment: "lzReceiveSimulate", values: [
        OriginStruct$9,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "msgInspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "oftVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteOFT", values: [SendParamStruct$1]): string;
    encodeFunctionData(functionFragment: "quoteSend", values: [SendParamStruct$1, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [SendParamStruct$1, MessagingFeeStruct$1, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "setMsgInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "SEND", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SEND_AND_CALL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approvalRequired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimalConversionRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveSimulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "msgInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMsgInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "EnforcedOptionSet(tuple[])": EventFragment;
        "MsgInspectorSet(address)": EventFragment;
        "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
        "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
        "PreCrimeSet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MsgInspectorSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
}
interface EnforcedOptionSetEventObject$1 {
    _enforcedOptions: EnforcedOptionParamStructOutput$1[];
}
type EnforcedOptionSetEvent$1 = TypedEvent<[
    EnforcedOptionParamStructOutput$1[]
], EnforcedOptionSetEventObject$1>;
type EnforcedOptionSetEventFilter$1 = TypedEventFilter<EnforcedOptionSetEvent$1>;
interface MsgInspectorSetEventObject$1 {
    inspector: string;
}
type MsgInspectorSetEvent$1 = TypedEvent<[
    string
], MsgInspectorSetEventObject$1>;
type MsgInspectorSetEventFilter$1 = TypedEventFilter<MsgInspectorSetEvent$1>;
interface OFTReceivedEventObject$1 {
    guid: string;
    srcEid: number;
    toAddress: string;
    amountReceivedLD: BigNumber;
}
type OFTReceivedEvent$1 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], OFTReceivedEventObject$1>;
type OFTReceivedEventFilter$1 = TypedEventFilter<OFTReceivedEvent$1>;
interface OFTSentEventObject$1 {
    guid: string;
    dstEid: number;
    fromAddress: string;
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
}
type OFTSentEvent$1 = TypedEvent<[
    string,
    number,
    string,
    BigNumber,
    BigNumber
], OFTSentEventObject$1>;
type OFTSentEventFilter$1 = TypedEventFilter<OFTSentEvent$1>;
interface OwnershipTransferredEventObject$r {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$r = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$r>;
type OwnershipTransferredEventFilter$r = TypedEventFilter<OwnershipTransferredEvent$r>;
interface PeerSetEventObject$4 {
    eid: number;
    peer: string;
}
type PeerSetEvent$4 = TypedEvent<[number, string], PeerSetEventObject$4>;
type PeerSetEventFilter$4 = TypedEventFilter<PeerSetEvent$4>;
interface PreCrimeSetEventObject$3 {
    preCrimeAddress: string;
}
type PreCrimeSetEvent$3 = TypedEvent<[string], PreCrimeSetEventObject$3>;
type PreCrimeSetEventFilter$3 = TypedEventFilter<PreCrimeSetEvent$3>;
interface OFTAdapter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTAdapterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SEND(overrides?: CallOverrides): Promise<[number]>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<[number]>;
        allowInitializePath(origin: OriginStruct$9, overrides?: CallOverrides): Promise<[boolean]>;
        approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        decimalConversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            enforcedOption: string;
        }>;
        isComposeMsgSender(arg0: OriginStruct$9, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceive(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$3[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        msgInspector(overrides?: CallOverrides): Promise<[string]>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        quoteOFT(_sendParam: SendParamStruct$1, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput$1,
            OFTFeeDetailStructOutput$1[],
            OFTReceiptStructOutput$1
        ] & {
            oftLimit: OFTLimitStructOutput$1;
            oftFeeDetails: OFTFeeDetailStructOutput$1[];
            oftReceipt: OFTReceiptStructOutput$1;
        }>;
        quoteSend(_sendParam: SendParamStruct$1, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            MessagingFeeStructOutput$5
        ] & {
            msgFee: MessagingFeeStructOutput$5;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sendParam: SendParamStruct$1, _fee: MessagingFeeStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    SEND(overrides?: CallOverrides): Promise<number>;
    SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
    allowInitializePath(origin: OriginStruct$9, overrides?: CallOverrides): Promise<boolean>;
    approvalRequired(overrides?: CallOverrides): Promise<boolean>;
    combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isComposeMsgSender(arg0: OriginStruct$9, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: InboundPacketStruct$3[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveSimulate(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    msgInspector(overrides?: CallOverrides): Promise<string>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    oftVersion(overrides?: CallOverrides): Promise<[string, BigNumber] & {
        interfaceId: string;
        version: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    quoteOFT(_sendParam: SendParamStruct$1, overrides?: CallOverrides): Promise<[
        OFTLimitStructOutput$1,
        OFTFeeDetailStructOutput$1[],
        OFTReceiptStructOutput$1
    ] & {
        oftLimit: OFTLimitStructOutput$1;
        oftFeeDetails: OFTFeeDetailStructOutput$1[];
        oftReceipt: OFTReceiptStructOutput$1;
    }>;
    quoteSend(_sendParam: SendParamStruct$1, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$5>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sendParam: SendParamStruct$1, _fee: MessagingFeeStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    token(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        SEND(overrides?: CallOverrides): Promise<number>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
        allowInitializePath(origin: OriginStruct$9, overrides?: CallOverrides): Promise<boolean>;
        approvalRequired(overrides?: CallOverrides): Promise<boolean>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isComposeMsgSender(arg0: OriginStruct$9, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$3[], overrides?: CallOverrides): Promise<void>;
        lzReceiveSimulate(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        msgInspector(overrides?: CallOverrides): Promise<string>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        quoteOFT(_sendParam: SendParamStruct$1, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput$1,
            OFTFeeDetailStructOutput$1[],
            OFTReceiptStructOutput$1
        ] & {
            oftLimit: OFTLimitStructOutput$1;
            oftFeeDetails: OFTFeeDetailStructOutput$1[];
            oftReceipt: OFTReceiptStructOutput$1;
        }>;
        quoteSend(_sendParam: SendParamStruct$1, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$5>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sendParam: SendParamStruct$1, _fee: MessagingFeeStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            MessagingReceiptStructOutput$3,
            OFTReceiptStructOutput$1
        ] & {
            msgReceipt: MessagingReceiptStructOutput$3;
            oftReceipt: OFTReceiptStructOutput$1;
        }>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        token(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "EnforcedOptionSet(tuple[])"(_enforcedOptions?: null): EnforcedOptionSetEventFilter$1;
        EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter$1;
        "MsgInspectorSet(address)"(inspector?: null): MsgInspectorSetEventFilter$1;
        MsgInspectorSet(inspector?: null): MsgInspectorSetEventFilter$1;
        "OFTReceived(bytes32,uint32,address,uint256)"(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter$1;
        OFTReceived(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter$1;
        "OFTSent(bytes32,uint32,address,uint256,uint256)"(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter$1;
        OFTSent(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$r;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$r;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$4;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$4;
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter$3;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter$3;
    };
    estimateGas: {
        SEND(overrides?: CallOverrides): Promise<BigNumber>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<BigNumber>;
        allowInitializePath(origin: OriginStruct$9, overrides?: CallOverrides): Promise<BigNumber>;
        approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$9, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$3[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveSimulate(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        msgInspector(overrides?: CallOverrides): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        oftVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteOFT(_sendParam: SendParamStruct$1, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSend(_sendParam: SendParamStruct$1, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sendParam: SendParamStruct$1, _fee: MessagingFeeStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowInitializePath(origin: OriginStruct$9, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimalConversionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$9, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$3[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$9, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        msgInspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteOFT(_sendParam: SendParamStruct$1, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSend(_sendParam: SendParamStruct$1, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sendParam: SendParamStruct$1, _fee: MessagingFeeStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type EnforcedOptionParamStruct = {
    eid: PromiseOrValue<BigNumberish>;
    msgType: PromiseOrValue<BigNumberish>;
    options: PromiseOrValue<BytesLike>;
};
type EnforcedOptionParamStructOutput = [number, number, string] & {
    eid: number;
    msgType: number;
    options: string;
};
type OriginStruct$8 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct$2 = {
    origin: OriginStruct$8;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
type SendParamStruct = {
    dstEid: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BytesLike>;
    amountLD: PromiseOrValue<BigNumberish>;
    minAmountLD: PromiseOrValue<BigNumberish>;
    extraOptions: PromiseOrValue<BytesLike>;
    composeMsg: PromiseOrValue<BytesLike>;
    oftCmd: PromiseOrValue<BytesLike>;
};
type OFTLimitStructOutput = [BigNumber, BigNumber] & {
    minAmountLD: BigNumber;
    maxAmountLD: BigNumber;
};
type OFTFeeDetailStructOutput = [BigNumber, string] & {
    feeAmountLD: BigNumber;
    description: string;
};
type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
};
type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>;
    lzTokenFee: PromiseOrValue<BigNumberish>;
};
type MessagingFeeStructOutput$4 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput$2 = [
    string,
    BigNumber,
    MessagingFeeStructOutput$4
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$4;
};
interface OFTCoreInterface extends utils.Interface {
    functions: {
        "SEND()": FunctionFragment;
        "SEND_AND_CALL()": FunctionFragment;
        "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
        "approvalRequired()": FunctionFragment;
        "combineOptions(uint32,uint16,bytes)": FunctionFragment;
        "decimalConversionRate()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "enforcedOptions(uint32,uint16)": FunctionFragment;
        "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "msgInspector()": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "oApp()": FunctionFragment;
        "oAppVersion()": FunctionFragment;
        "oftVersion()": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "preCrime()": FunctionFragment;
        "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
        "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
        "setMsgInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32)": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "token()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SEND" | "SEND_AND_CALL" | "allowInitializePath" | "approvalRequired" | "combineOptions" | "decimalConversionRate" | "endpoint" | "enforcedOptions" | "isComposeMsgSender" | "isPeer" | "lzReceive" | "lzReceiveAndRevert" | "lzReceiveSimulate" | "msgInspector" | "nextNonce" | "oApp" | "oAppVersion" | "oftVersion" | "owner" | "peers" | "preCrime" | "quoteOFT" | "quoteSend" | "renounceOwnership" | "send" | "setDelegate" | "setEnforcedOptions" | "setMsgInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "token" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "SEND", values?: undefined): string;
    encodeFunctionData(functionFragment: "SEND_AND_CALL", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowInitializePath", values: [OriginStruct$8]): string;
    encodeFunctionData(functionFragment: "approvalRequired", values?: undefined): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "decimalConversionRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isComposeMsgSender", values: [OriginStruct$8, PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$8,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$2[]]): string;
    encodeFunctionData(functionFragment: "lzReceiveSimulate", values: [
        OriginStruct$8,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "msgInspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "oAppVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "oftVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteOFT", values: [SendParamStruct]): string;
    encodeFunctionData(functionFragment: "quoteSend", values: [SendParamStruct, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setMsgInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "SEND", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SEND_AND_CALL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowInitializePath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approvalRequired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimalConversionRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isComposeMsgSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveSimulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "msgInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oAppVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMsgInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "EnforcedOptionSet(tuple[])": EventFragment;
        "MsgInspectorSet(address)": EventFragment;
        "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
        "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PeerSet(uint32,bytes32)": EventFragment;
        "PreCrimeSet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MsgInspectorSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
}
interface EnforcedOptionSetEventObject {
    _enforcedOptions: EnforcedOptionParamStructOutput[];
}
type EnforcedOptionSetEvent = TypedEvent<[
    EnforcedOptionParamStructOutput[]
], EnforcedOptionSetEventObject>;
type EnforcedOptionSetEventFilter = TypedEventFilter<EnforcedOptionSetEvent>;
interface MsgInspectorSetEventObject {
    inspector: string;
}
type MsgInspectorSetEvent = TypedEvent<[
    string
], MsgInspectorSetEventObject>;
type MsgInspectorSetEventFilter = TypedEventFilter<MsgInspectorSetEvent>;
interface OFTReceivedEventObject {
    guid: string;
    srcEid: number;
    toAddress: string;
    amountReceivedLD: BigNumber;
}
type OFTReceivedEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], OFTReceivedEventObject>;
type OFTReceivedEventFilter = TypedEventFilter<OFTReceivedEvent>;
interface OFTSentEventObject {
    guid: string;
    dstEid: number;
    fromAddress: string;
    amountSentLD: BigNumber;
    amountReceivedLD: BigNumber;
}
type OFTSentEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber,
    BigNumber
], OFTSentEventObject>;
type OFTSentEventFilter = TypedEventFilter<OFTSentEvent>;
interface OwnershipTransferredEventObject$q {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$q = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$q>;
type OwnershipTransferredEventFilter$q = TypedEventFilter<OwnershipTransferredEvent$q>;
interface PeerSetEventObject$3 {
    eid: number;
    peer: string;
}
type PeerSetEvent$3 = TypedEvent<[number, string], PeerSetEventObject$3>;
type PeerSetEventFilter$3 = TypedEventFilter<PeerSetEvent$3>;
interface PreCrimeSetEventObject$2 {
    preCrimeAddress: string;
}
type PreCrimeSetEvent$2 = TypedEvent<[string], PreCrimeSetEventObject$2>;
type PreCrimeSetEventFilter$2 = TypedEventFilter<PreCrimeSetEvent$2>;
interface OFTCore extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTCoreInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SEND(overrides?: CallOverrides): Promise<[number]>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<[number]>;
        allowInitializePath(origin: OriginStruct$8, overrides?: CallOverrides): Promise<[boolean]>;
        approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        decimalConversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            enforcedOption: string;
        }>;
        isComposeMsgSender(arg0: OriginStruct$8, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceive(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$2[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        msgInspector(overrides?: CallOverrides): Promise<[string]>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput,
            OFTFeeDetailStructOutput[],
            OFTReceiptStructOutput
        ] & {
            oftLimit: OFTLimitStructOutput;
            oftFeeDetails: OFTFeeDetailStructOutput[];
            oftReceipt: OFTReceiptStructOutput;
        }>;
        quoteSend(_sendParam: SendParamStruct, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            MessagingFeeStructOutput$4
        ] & {
            msgFee: MessagingFeeStructOutput$4;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sendParam: SendParamStruct, _fee: MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    SEND(overrides?: CallOverrides): Promise<number>;
    SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
    allowInitializePath(origin: OriginStruct$8, overrides?: CallOverrides): Promise<boolean>;
    approvalRequired(overrides?: CallOverrides): Promise<boolean>;
    combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isComposeMsgSender(arg0: OriginStruct$8, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzReceive(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: InboundPacketStruct$2[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveSimulate(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    msgInspector(overrides?: CallOverrides): Promise<string>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    oAppVersion(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
    }>;
    oftVersion(overrides?: CallOverrides): Promise<[string, BigNumber] & {
        interfaceId: string;
        version: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<[
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
    ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
    }>;
    quoteSend(_sendParam: SendParamStruct, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$4>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sendParam: SendParamStruct, _fee: MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    token(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        SEND(overrides?: CallOverrides): Promise<number>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
        allowInitializePath(origin: OriginStruct$8, overrides?: CallOverrides): Promise<boolean>;
        approvalRequired(overrides?: CallOverrides): Promise<boolean>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isComposeMsgSender(arg0: OriginStruct$8, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzReceive(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$2[], overrides?: CallOverrides): Promise<void>;
        lzReceiveSimulate(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        msgInspector(overrides?: CallOverrides): Promise<string>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        oAppVersion(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            senderVersion: BigNumber;
            receiverVersion: BigNumber;
        }>;
        oftVersion(overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            interfaceId: string;
            version: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<[
            OFTLimitStructOutput,
            OFTFeeDetailStructOutput[],
            OFTReceiptStructOutput
        ] & {
            oftLimit: OFTLimitStructOutput;
            oftFeeDetails: OFTFeeDetailStructOutput[];
            oftReceipt: OFTReceiptStructOutput;
        }>;
        quoteSend(_sendParam: SendParamStruct, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$4>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sendParam: SendParamStruct, _fee: MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            MessagingReceiptStructOutput$2,
            OFTReceiptStructOutput
        ] & {
            msgReceipt: MessagingReceiptStructOutput$2;
            oftReceipt: OFTReceiptStructOutput;
        }>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct[], overrides?: CallOverrides): Promise<void>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        token(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "EnforcedOptionSet(tuple[])"(_enforcedOptions?: null): EnforcedOptionSetEventFilter;
        EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter;
        "MsgInspectorSet(address)"(inspector?: null): MsgInspectorSetEventFilter;
        MsgInspectorSet(inspector?: null): MsgInspectorSetEventFilter;
        "OFTReceived(bytes32,uint32,address,uint256)"(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter;
        OFTReceived(guid?: PromiseOrValue<BytesLike> | null, srcEid?: null, toAddress?: PromiseOrValue<string> | null, amountReceivedLD?: null): OFTReceivedEventFilter;
        "OFTSent(bytes32,uint32,address,uint256,uint256)"(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter;
        OFTSent(guid?: PromiseOrValue<BytesLike> | null, dstEid?: null, fromAddress?: PromiseOrValue<string> | null, amountSentLD?: null, amountReceivedLD?: null): OFTSentEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$q;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$q;
        "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter$3;
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter$3;
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter$2;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter$2;
    };
    estimateGas: {
        SEND(overrides?: CallOverrides): Promise<BigNumber>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<BigNumber>;
        allowInitializePath(origin: OriginStruct$8, overrides?: CallOverrides): Promise<BigNumber>;
        approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isComposeMsgSender(arg0: OriginStruct$8, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$2[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveSimulate(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        msgInspector(overrides?: CallOverrides): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;
        oftVersion(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSend(_sendParam: SendParamStruct, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sendParam: SendParamStruct, _fee: MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SEND_AND_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowInitializePath(origin: OriginStruct$8, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        combineOptions(_eid: PromiseOrValue<BigNumberish>, _msgType: PromiseOrValue<BigNumberish>, _extraOptions: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimalConversionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        enforcedOptions(eid: PromiseOrValue<BigNumberish>, msgType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isComposeMsgSender(arg0: OriginStruct$8, arg1: PromiseOrValue<BytesLike>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$2[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$8, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        msgInspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSend(_sendParam: SendParamStruct, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sendParam: SendParamStruct, _fee: MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMsgInspector(_msgInspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$14_OFT = OFT;
type index$14_OFTAdapter = OFTAdapter;
type index$14_OFTCore = OFTCore;
declare namespace index$14 {
  export { type index$14_OFT as OFT, type index$14_OFTAdapter as OFTAdapter, type index$14_OFTCore as OFTCore, index$15 as interfaces };
}

type PreCrimePeerStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    preCrime: PromiseOrValue<BytesLike>;
    oApp: PromiseOrValue<BytesLike>;
};
type PreCrimePeerStructOutput$1 = [number, string, string] & {
    eid: number;
    preCrime: string;
    oApp: string;
};
interface PreCrimeE1Interface extends utils.Interface {
    functions: {
        "buildSimulationResult()": FunctionFragment;
        "getConfig(bytes[],uint256[])": FunctionFragment;
        "getPreCrimePeers()": FunctionFragment;
        "maxBatchSize()": FunctionFragment;
        "oApp()": FunctionFragment;
        "owner()": FunctionFragment;
        "preCrime(bytes[],uint256[],bytes[])": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setMaxBatchSize(uint64)": FunctionFragment;
        "setPreCrimePeers((uint32,bytes32,bytes32)[])": FunctionFragment;
        "simulate(bytes[],uint256[])": FunctionFragment;
        "simulator()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "buildSimulationResult" | "getConfig" | "getPreCrimePeers" | "maxBatchSize" | "oApp" | "owner" | "preCrime" | "renounceOwnership" | "setMaxBatchSize" | "setPreCrimePeers" | "simulate" | "simulator" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "getPreCrimePeers", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "preCrime", values: [
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPreCrimePeers", values: [PreCrimePeerStruct$1[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "simulator", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$p {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$p = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$p>;
type OwnershipTransferredEventFilter$p = TypedEventFilter<OwnershipTransferredEvent$p>;
interface PreCrimeE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PreCrimeE1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        buildSimulationResult(overrides?: CallOverrides): Promise<[string]>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<[PreCrimePeerStructOutput$1[]]>;
        maxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulator(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    buildSimulationResult(overrides?: CallOverrides): Promise<string>;
    getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput$1[]>;
    maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulator(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
        major: BigNumber;
        minor: number;
    }>;
    callStatic: {
        buildSimulationResult(overrides?: CallOverrides): Promise<string>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput$1[]>;
        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$1[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        simulator(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$p;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$p;
    };
    estimateGas: {
        buildSimulationResult(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<BigNumber>;
        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulator(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        buildSimulationResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$13_PreCrimeE1 = PreCrimeE1;
declare namespace index$13 {
  export type { index$13_PreCrimeE1 as PreCrimeE1 };
}

type OriginStruct$7 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct$1 = {
    origin: OriginStruct$7;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
interface IOAppPreCrimeSimulatorInterface extends utils.Interface {
    functions: {
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "oApp()": FunctionFragment;
        "preCrime()": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "isPeer" | "lzReceiveAndRevert" | "oApp" | "preCrime" | "setPreCrime"): FunctionFragment;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$1[]]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    events: {
        "PreCrimeSet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
}
interface PreCrimeSetEventObject$1 {
    preCrimeAddress: string;
}
type PreCrimeSetEvent$1 = TypedEvent<[string], PreCrimeSetEventObject$1>;
type PreCrimeSetEventFilter$1 = TypedEventFilter<PreCrimeSetEvent$1>;
interface IOAppPreCrimeSimulator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppPreCrimeSimulatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$1[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzReceiveAndRevert(_packets: InboundPacketStruct$1[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    oApp(overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$1[], overrides?: CallOverrides): Promise<void>;
        oApp(overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter$1;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter$1;
    };
    estimateGas: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$1[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct$1[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IPreCrimeInterface extends utils.Interface {
    functions: {
        "buildSimulationResult()": FunctionFragment;
        "getConfig(bytes[],uint256[])": FunctionFragment;
        "preCrime(bytes[],uint256[],bytes[])": FunctionFragment;
        "simulate(bytes[],uint256[])": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "buildSimulationResult" | "getConfig" | "preCrime" | "simulate" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "preCrime", values: [
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "simulate", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {};
}
interface IPreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IPreCrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        buildSimulationResult(overrides?: CallOverrides): Promise<[string]>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    buildSimulationResult(overrides?: CallOverrides): Promise<string>;
    getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
        major: BigNumber;
        minor: number;
    }>;
    callStatic: {
        buildSimulationResult(overrides?: CallOverrides): Promise<string>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    filters: {};
    estimateGas: {
        buildSimulationResult(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        buildSimulationResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$12_IOAppPreCrimeSimulator = IOAppPreCrimeSimulator;
type index$12_IPreCrime = IPreCrime;
declare namespace index$12 {
  export type { index$12_IOAppPreCrimeSimulator as IOAppPreCrimeSimulator, index$12_IPreCrime as IPreCrime };
}

type OriginStruct$6 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type InboundPacketStruct = {
    origin: OriginStruct$6;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
};
interface OAppPreCrimeSimulatorInterface extends utils.Interface {
    functions: {
        "isPeer(uint32,bytes32)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
        "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "oApp()": FunctionFragment;
        "owner()": FunctionFragment;
        "preCrime()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setPreCrime(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "isPeer" | "lzReceiveAndRevert" | "lzReceiveSimulate" | "oApp" | "owner" | "preCrime" | "renounceOwnership" | "setPreCrime" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "isPeer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct[]]): string;
    encodeFunctionData(functionFragment: "lzReceiveSimulate", values: [
        OriginStruct$6,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveSimulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PreCrimeSet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
}
interface OwnershipTransferredEventObject$o {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$o = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$o>;
type OwnershipTransferredEventFilter$o = TypedEventFilter<OwnershipTransferredEvent$o>;
interface PreCrimeSetEventObject {
    preCrimeAddress: string;
}
type PreCrimeSetEvent = TypedEvent<[string], PreCrimeSetEventObject>;
type PreCrimeSetEventFilter = TypedEventFilter<PreCrimeSetEvent>;
interface OAppPreCrimeSimulator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppPreCrimeSimulatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        lzReceiveAndRevert(_packets: InboundPacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$6, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        preCrime(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    lzReceiveAndRevert(_packets: InboundPacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveSimulate(_origin: OriginStruct$6, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    oApp(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    preCrime(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        lzReceiveAndRevert(_packets: InboundPacketStruct[], overrides?: CallOverrides): Promise<void>;
        lzReceiveSimulate(_origin: OriginStruct$6, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        oApp(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        preCrime(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$o;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$o;
        "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter;
        PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter;
    };
    estimateGas: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: InboundPacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveSimulate(_origin: OriginStruct$6, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        isPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: InboundPacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveSimulate(_origin: OriginStruct$6, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrime(_preCrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type PreCrimePeerStruct = {
    eid: PromiseOrValue<BigNumberish>;
    preCrime: PromiseOrValue<BytesLike>;
    oApp: PromiseOrValue<BytesLike>;
};
type PreCrimePeerStructOutput = [number, string, string] & {
    eid: number;
    preCrime: string;
    oApp: string;
};
interface PreCrimeInterface extends utils.Interface {
    functions: {
        "buildSimulationResult()": FunctionFragment;
        "getConfig(bytes[],uint256[])": FunctionFragment;
        "getPreCrimePeers()": FunctionFragment;
        "maxBatchSize()": FunctionFragment;
        "oApp()": FunctionFragment;
        "owner()": FunctionFragment;
        "preCrime(bytes[],uint256[],bytes[])": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setMaxBatchSize(uint64)": FunctionFragment;
        "setPreCrimePeers((uint32,bytes32,bytes32)[])": FunctionFragment;
        "simulate(bytes[],uint256[])": FunctionFragment;
        "simulator()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "buildSimulationResult" | "getConfig" | "getPreCrimePeers" | "maxBatchSize" | "oApp" | "owner" | "preCrime" | "renounceOwnership" | "setMaxBatchSize" | "setPreCrimePeers" | "simulate" | "simulator" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "getPreCrimePeers", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "preCrime", values: [
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPreCrimePeers", values: [PreCrimePeerStruct[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "simulator", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$n {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$n = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$n>;
type OwnershipTransferredEventFilter$n = TypedEventFilter<OwnershipTransferredEvent$n>;
interface PreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PreCrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        buildSimulationResult(overrides?: CallOverrides): Promise<[string]>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<[PreCrimePeerStructOutput[]]>;
        maxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        oApp(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulator(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    buildSimulationResult(overrides?: CallOverrides): Promise<string>;
    getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput[]>;
    maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    oApp(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulator(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
        major: BigNumber;
        minor: number;
    }>;
    callStatic: {
        buildSimulationResult(overrides?: CallOverrides): Promise<string>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput[]>;
        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;
        simulator(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[BigNumber, number] & {
            major: BigNumber;
            minor: number;
        }>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$n;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$n;
    };
    estimateGas: {
        buildSimulationResult(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<BigNumber>;
        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        oApp(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulator(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        buildSimulationResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPreCrimePeers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preCrime(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], _simulations: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: PromiseOrValue<BytesLike>[], _packetMsgValues: PromiseOrValue<BigNumberish>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$11_OAppPreCrimeSimulator = OAppPreCrimeSimulator;
type index$11_PreCrime = PreCrime;
declare namespace index$11 {
  export { type index$11_OAppPreCrimeSimulator as OAppPreCrimeSimulator, type index$11_PreCrime as PreCrime, index$13 as extensions, index$12 as interfaces };
}

interface TransparentUpgradeableProxyInterface$1 extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "changeAdmin(address)": FunctionFragment;
        "implementation()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "changeAdmin" | "implementation" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "changeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$1 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$1 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$1>;
type AdminChangedEventFilter$1 = TypedEventFilter<AdminChangedEvent$1>;
interface BeaconUpgradedEventObject$1 {
    beacon: string;
}
type BeaconUpgradedEvent$1 = TypedEvent<[
    string
], BeaconUpgradedEventObject$1>;
type BeaconUpgradedEventFilter$1 = TypedEventFilter<BeaconUpgradedEvent$1>;
interface UpgradedEventObject$1 {
    implementation: string;
}
type UpgradedEvent$1 = TypedEvent<[string], UpgradedEventObject$1>;
type UpgradedEventFilter$1 = TypedEventFilter<UpgradedEvent$1>;
interface TransparentUpgradeableProxy$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TransparentUpgradeableProxyInterface$1;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    implementation(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        implementation(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$1;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$1;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$1;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$1;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$1;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$1;
    };
    estimateGas: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace index$10 {
  export type { TransparentUpgradeableProxy$1 as TransparentUpgradeableProxy };
}

interface IReceiveUlnViewInterface extends utils.Interface {
    functions: {
        "verifiable(bytes,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "verifiable", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {};
}
interface IReceiveUlnView extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IReceiveUlnViewInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
    };
    verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    callStatic: {
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    };
    filters: {};
    estimateGas: {
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$5 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type LzReceiveParamStruct = {
    origin: OriginStruct$5;
    receiver: PromiseOrValue<string>;
    guid: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
    gas: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
};
type NativeDropParamStruct = {
    _receiver: PromiseOrValue<string>;
    _amount: PromiseOrValue<BigNumberish>;
};
interface LzExecutorInterface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "commitAndExecute(address,((uint32,bytes32,uint64),address,bytes32,bytes,bytes,uint256,uint256),(address,uint256)[])": FunctionFragment;
        "endpoint()": FunctionFragment;
        "executable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initialize(address,address,address)": FunctionFragment;
        "localEid()": FunctionFragment;
        "owner()": FunctionFragment;
        "receiveLibToView(address)": FunctionFragment;
        "receiveUln302()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setReceiveLibView(address,address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)": FunctionFragment;
        "withdrawNative(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "commitAndExecute" | "endpoint" | "executable" | "initializable" | "initialize" | "localEid" | "owner" | "receiveLibToView" | "receiveUln302" | "renounceOwnership" | "setReceiveLibView" | "transferOwnership" | "verifiable" | "withdrawNative"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "commitAndExecute", values: [
        PromiseOrValue<string>,
        LzReceiveParamStruct,
        NativeDropParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [OriginStruct$5, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct$5, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibToView", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "receiveUln302", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setReceiveLibView", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        OriginStruct$5,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawNative", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "commitAndExecute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibToView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveUln302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawNative", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "NativeWithdrawn(address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveLibViewSet(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibViewSet"): EventFragment;
}
interface InitializedEventObject$8 {
    version: number;
}
type InitializedEvent$8 = TypedEvent<[number], InitializedEventObject$8>;
type InitializedEventFilter$8 = TypedEventFilter<InitializedEvent$8>;
interface NativeWithdrawnEventObject {
    _to: string;
    _amount: BigNumber;
}
type NativeWithdrawnEvent = TypedEvent<[
    string,
    BigNumber
], NativeWithdrawnEventObject>;
type NativeWithdrawnEventFilter = TypedEventFilter<NativeWithdrawnEvent>;
interface OwnershipTransferredEventObject$m {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$m = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$m>;
type OwnershipTransferredEventFilter$m = TypedEventFilter<OwnershipTransferredEvent$m>;
interface ReceiveLibViewSetEventObject {
    _receiveLib: string;
    _receiveLibView: string;
}
type ReceiveLibViewSetEvent = TypedEvent<[
    string,
    string
], ReceiveLibViewSetEventObject>;
type ReceiveLibViewSetEventFilter = TypedEventFilter<ReceiveLibViewSetEvent>;
interface LzExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: LzExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        commitAndExecute(_receiveLib: PromiseOrValue<string>, _lzReceiveParam: LzReceiveParamStruct, _nativeDropParams: NativeDropParamStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        executable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        initializable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_receiveUln302: PromiseOrValue<string>, _receiveUln302View: PromiseOrValue<string>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        localEid(overrides?: CallOverrides): Promise<[number]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            receiveLibView: string;
        }>;
        receiveUln302(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibView(_receiveLib: PromiseOrValue<string>, _receiveLibView: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawNative(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    commitAndExecute(_receiveLib: PromiseOrValue<string>, _lzReceiveParam: LzReceiveParamStruct, _nativeDropParams: NativeDropParamStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    executable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    initializable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_receiveUln302: PromiseOrValue<string>, _receiveUln302View: PromiseOrValue<string>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    localEid(overrides?: CallOverrides): Promise<number>;
    owner(overrides?: CallOverrides): Promise<string>;
    receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    receiveUln302(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibView(_receiveLib: PromiseOrValue<string>, _receiveLibView: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawNative(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        commitAndExecute(_receiveLib: PromiseOrValue<string>, _lzReceiveParam: LzReceiveParamStruct, _nativeDropParams: NativeDropParamStruct[], overrides?: CallOverrides): Promise<void>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        executable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        initializable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_receiveUln302: PromiseOrValue<string>, _receiveUln302View: PromiseOrValue<string>, _endpoint: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        localEid(overrides?: CallOverrides): Promise<number>;
        owner(overrides?: CallOverrides): Promise<string>;
        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        receiveUln302(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setReceiveLibView(_receiveLib: PromiseOrValue<string>, _receiveLibView: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawNative(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$8;
        Initialized(version?: null): InitializedEventFilter$8;
        "NativeWithdrawn(address,uint256)"(_to?: null, _amount?: null): NativeWithdrawnEventFilter;
        NativeWithdrawn(_to?: null, _amount?: null): NativeWithdrawnEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$m;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$m;
        "ReceiveLibViewSet(address,address)"(_receiveLib?: null, _receiveLibView?: null): ReceiveLibViewSetEventFilter;
        ReceiveLibViewSet(_receiveLib?: null, _receiveLibView?: null): ReceiveLibViewSetEventFilter;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        commitAndExecute(_receiveLib: PromiseOrValue<string>, _lzReceiveParam: LzReceiveParamStruct, _nativeDropParams: NativeDropParamStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        executable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_receiveUln302: PromiseOrValue<string>, _receiveUln302View: PromiseOrValue<string>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        localEid(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveUln302(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibView(_receiveLib: PromiseOrValue<string>, _receiveLibView: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawNative(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        commitAndExecute(_receiveLib: PromiseOrValue<string>, _lzReceiveParam: LzReceiveParamStruct, _nativeDropParams: NativeDropParamStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_receiveUln302: PromiseOrValue<string>, _receiveUln302View: PromiseOrValue<string>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveUln302(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibView(_receiveLib: PromiseOrValue<string>, _receiveLibView: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_origin: OriginStruct$5, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawNative(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$$_IReceiveUlnView = IReceiveUlnView;
type index$$_LzExecutor = LzExecutor;
declare namespace index$$ {
  export type { index$$_IReceiveUlnView as IReceiveUlnView, index$$_LzExecutor as LzExecutor };
}

type ReceiveLibParamStruct$6 = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput$6 = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace ICCIPDVNAdapter$3 {
    type DstConfigParamStruct = {
        eid: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        chainSelector: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        peer: PromiseOrValue<BytesLike>;
    };
    type DstConfigParamStructOutput = [
        number,
        number,
        BigNumber,
        BigNumber,
        string
    ] & {
        eid: number;
        multiplierBps: number;
        chainSelector: BigNumber;
        gas: BigNumber;
        peer: string;
    };
}
declare namespace ILayerZeroDVN$a {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
declare namespace Client$2 {
    type EVMTokenAmountStruct = {
        token: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
    };
    type EVMTokenAmountStructOutput = [string, BigNumber] & {
        token: string;
        amount: BigNumber;
    };
    type Any2EVMMessageStruct = {
        messageId: PromiseOrValue<BytesLike>;
        sourceChainSelector: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        data: PromiseOrValue<BytesLike>;
        destTokenAmounts: Client$2.EVMTokenAmountStruct[];
    };
    type Any2EVMMessageStructOutput = [
        string,
        BigNumber,
        string,
        string,
        Client$2.EVMTokenAmountStructOutput[]
    ] & {
        messageId: string;
        sourceChainSelector: BigNumber;
        sender: string;
        data: string;
        destTokenAmounts: Client$2.EVMTokenAmountStructOutput[];
    };
}
interface CCIPDVNAdapterInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "router()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig((uint32,uint16,uint64,uint256,bytes)[])": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "srcConfig(uint64)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "ccipReceive" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "router" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "srcConfig" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$a.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "ccipReceive", values: [Client$2.Any2EVMMessageStruct]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "router", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [ICCIPDVNAdapter$3.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct$6[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "srcConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ccipReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "srcConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "Paused(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface DstConfigSetEventObject$7 {
    params: ICCIPDVNAdapter$3.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$7 = TypedEvent<[
    ICCIPDVNAdapter$3.DstConfigParamStructOutput[]
], DstConfigSetEventObject$7>;
type DstConfigSetEventFilter$7 = TypedEventFilter<DstConfigSetEvent$7>;
interface PausedEventObject$9 {
    account: string;
}
type PausedEvent$9 = TypedEvent<[string], PausedEventObject$9>;
type PausedEventFilter$9 = TypedEventFilter<PausedEvent$9>;
interface ReceiveLibsSetEventObject$6 {
    params: ReceiveLibParamStructOutput$6[];
}
type ReceiveLibsSetEvent$6 = TypedEvent<[
    ReceiveLibParamStructOutput$6[]
], ReceiveLibsSetEventObject$6>;
type ReceiveLibsSetEventFilter$6 = TypedEventFilter<ReceiveLibsSetEvent$6>;
interface RoleAdminChangedEventObject$9 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$9 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$9>;
type RoleAdminChangedEventFilter$9 = TypedEventFilter<RoleAdminChangedEvent$9>;
interface RoleGrantedEventObject$9 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$9 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$9>;
type RoleGrantedEventFilter$9 = TypedEventFilter<RoleGrantedEvent$9>;
interface RoleRevokedEventObject$9 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$9 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$9>;
type RoleRevokedEventFilter$9 = TypedEventFilter<RoleRevokedEvent$9>;
interface SetDefaultMultiplierBpsEventObject$a {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$a = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$a>;
type SetDefaultMultiplierBpsEventFilter$a = TypedEventFilter<SetDefaultMultiplierBpsEvent$a>;
interface SetPriceFeedEventObject$a {
    priceFeed: string;
}
type SetPriceFeedEvent$a = TypedEvent<[string], SetPriceFeedEventObject$a>;
type SetPriceFeedEventFilter$a = TypedEventFilter<SetPriceFeedEvent$a>;
interface SetSupportedOptionTypesEventObject$a {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$a = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$a>;
type SetSupportedOptionTypesEventFilter$a = TypedEventFilter<SetSupportedOptionTypesEvent$a>;
interface SetWorkerLibEventObject$a {
    workerLib: string;
}
type SetWorkerLibEvent$a = TypedEvent<[string], SetWorkerLibEventObject$a>;
type SetWorkerLibEventFilter$a = TypedEventFilter<SetWorkerLibEvent$a>;
interface UnpausedEventObject$9 {
    account: string;
}
type UnpausedEvent$9 = TypedEvent<[string], UnpausedEventObject$9>;
type UnpausedEventFilter$9 = TypedEventFilter<UnpausedEvent$9>;
interface WithdrawEventObject$a {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$a = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$a>;
type WithdrawEventFilter$a = TypedEventFilter<WithdrawEvent$a>;
interface CCIPDVNAdapter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: CCIPDVNAdapterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(_param: ILayerZeroDVN$a.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        ccipReceive(_message: Client$2.Any2EVMMessageStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            string,
            BigNumber
        ] & {
            chainSelector: BigNumber;
            multiplierBps: number;
            peer: string;
            gas: BigNumber;
        }>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalFee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        router(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_params: ICCIPDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        srcConfig(srcChainSelector: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            eid: number;
            peer: string;
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(_param: ILayerZeroDVN$a.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    ccipReceive(_message: Client$2.Any2EVMMessageStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        string,
        BigNumber
    ] & {
        chainSelector: BigNumber;
        multiplierBps: number;
        peer: string;
        gas: BigNumber;
    }>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    router(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_params: ICCIPDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct$6[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    srcConfig(srcChainSelector: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
        eid: number;
        peer: string;
    }>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$a.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        ccipReceive(_message: Client$2.Any2EVMMessageStruct, overrides?: CallOverrides): Promise<void>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            string,
            BigNumber
        ] & {
            chainSelector: BigNumber;
            multiplierBps: number;
            peer: string;
            gas: BigNumber;
        }>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        router(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_params: ICCIPDVNAdapter$3.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct$6[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        srcConfig(srcChainSelector: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            eid: number;
            peer: string;
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$7;
        DstConfigSet(params?: null): DstConfigSetEventFilter$7;
        "Paused(address)"(account?: null): PausedEventFilter$9;
        Paused(account?: null): PausedEventFilter$9;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter$6;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter$6;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$9;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$9;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$9;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$9;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$9;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$9;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$a;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$a;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$a;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$a;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$a;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$a;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$a;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$a;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$9;
        Unpaused(account?: null): UnpausedEventFilter$9;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$a;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$a;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$a.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        ccipReceive(_message: Client$2.Any2EVMMessageStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        router(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_params: ICCIPDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        srcConfig(srcChainSelector: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_param: ILayerZeroDVN$a.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        ccipReceive(_message: Client$2.Any2EVMMessageStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_params: ICCIPDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        srcConfig(srcChainSelector: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace ICCIPDVNAdapterFeeLib$1 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [number, BigNumber] & {
        dstEid: number;
        floorMarginUSD: BigNumber;
    };
    type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        defaultMultiplierBps: number;
    };
}
declare namespace ICCIPDVNAdapter$2 {
    type DstConfigStruct = {
        chainSelector: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        peer: PromiseOrValue<BytesLike>;
        gas: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [BigNumber, number, string, BigNumber] & {
        chainSelector: BigNumber;
        multiplierBps: number;
        peer: string;
        gas: BigNumber;
    };
}
declare namespace Client$1 {
    type EVMTokenAmountStruct = {
        token: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
    };
    type EVMTokenAmountStructOutput = [string, BigNumber] & {
        token: string;
        amount: BigNumber;
    };
    type EVM2AnyMessageStruct = {
        receiver: PromiseOrValue<BytesLike>;
        data: PromiseOrValue<BytesLike>;
        tokenAmounts: Client$1.EVMTokenAmountStruct[];
        feeToken: PromiseOrValue<string>;
        extraArgs: PromiseOrValue<BytesLike>;
    };
    type EVM2AnyMessageStructOutput = [
        string,
        string,
        Client$1.EVMTokenAmountStructOutput[],
        string,
        string
    ] & {
        receiver: string;
        data: string;
        tokenAmounts: Client$1.EVMTokenAmountStructOutput[];
        feeToken: string;
        extraArgs: string;
    };
}
interface CCIPDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        "dstConfig(uint32)": FunctionFragment;
        "getFee((uint32,uint64,address,uint16),(uint64,uint16,bytes,uint256),(bytes,bytes,(address,uint256)[],address,bytes),bytes,address)": FunctionFragment;
        "getFeeOnSend((uint32,uint64,address,uint16),(uint64,uint16,bytes,uint256),(bytes,bytes,(address,uint256)[],address,bytes),bytes,address)": FunctionFragment;
        "initialize()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDstConfig((uint32,uint128)[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "dstConfig" | "getFee" | "getFeeOnSend" | "initialize" | "owner" | "renounceOwnership" | "setDstConfig" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        ICCIPDVNAdapterFeeLib$1.ParamStruct,
        ICCIPDVNAdapter$2.DstConfigStruct,
        Client$1.EVM2AnyMessageStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        ICCIPDVNAdapterFeeLib$1.ParamStruct,
        ICCIPDVNAdapter$2.DstConfigStruct,
        Client$1.EVM2AnyMessageStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "initialize", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [ICCIPDVNAdapterFeeLib$1.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "Initialized(uint8)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface DstConfigSetEventObject$6 {
    params: ICCIPDVNAdapterFeeLib$1.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$6 = TypedEvent<[
    ICCIPDVNAdapterFeeLib$1.DstConfigParamStructOutput[]
], DstConfigSetEventObject$6>;
type DstConfigSetEventFilter$6 = TypedEventFilter<DstConfigSetEvent$6>;
interface InitializedEventObject$7 {
    version: number;
}
type InitializedEvent$7 = TypedEvent<[number], InitializedEventObject$7>;
type InitializedEventFilter$7 = TypedEventFilter<InitializedEvent$7>;
interface OwnershipTransferredEventObject$l {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$l = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$l>;
type OwnershipTransferredEventFilter$l = TypedEventFilter<OwnershipTransferredEvent$l>;
interface CCIPDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: CCIPDVNAdapterFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            floorMarginUSD: BigNumber;
        }>;
        getFee(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalFee: BigNumber;
        }>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initialize(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_param: ICCIPDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getFee(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initialize(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_param: ICCIPDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            ccipFee: BigNumber;
            totalFee: BigNumber;
        }>;
        initialize(overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDstConfig(_param: ICCIPDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$6;
        DstConfigSet(params?: null): DstConfigSetEventFilter$6;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$7;
        Initialized(version?: null): InitializedEventFilter$7;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$l;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$l;
    };
    estimateGas: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initialize(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_param: ICCIPDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib$1.ParamStruct, _dstConfig: ICCIPDVNAdapter$2.DstConfigStruct, _message: Client$1.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initialize(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_param: ICCIPDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$__CCIPDVNAdapter = CCIPDVNAdapter;
type index$__CCIPDVNAdapterFeeLib = CCIPDVNAdapterFeeLib;
declare namespace index$_ {
  export type { index$__CCIPDVNAdapter as CCIPDVNAdapter, index$__CCIPDVNAdapterFeeLib as CCIPDVNAdapterFeeLib };
}

type ReceiveLibParamStruct$5 = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput$5 = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace ILayerZeroDVN$9 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface DVNAdapterBaseInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$9.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct$5[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Paused(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface PausedEventObject$8 {
    account: string;
}
type PausedEvent$8 = TypedEvent<[string], PausedEventObject$8>;
type PausedEventFilter$8 = TypedEventFilter<PausedEvent$8>;
interface ReceiveLibsSetEventObject$5 {
    params: ReceiveLibParamStructOutput$5[];
}
type ReceiveLibsSetEvent$5 = TypedEvent<[
    ReceiveLibParamStructOutput$5[]
], ReceiveLibsSetEventObject$5>;
type ReceiveLibsSetEventFilter$5 = TypedEventFilter<ReceiveLibsSetEvent$5>;
interface RoleAdminChangedEventObject$8 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$8 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$8>;
type RoleAdminChangedEventFilter$8 = TypedEventFilter<RoleAdminChangedEvent$8>;
interface RoleGrantedEventObject$8 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$8 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$8>;
type RoleGrantedEventFilter$8 = TypedEventFilter<RoleGrantedEvent$8>;
interface RoleRevokedEventObject$8 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$8 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$8>;
type RoleRevokedEventFilter$8 = TypedEventFilter<RoleRevokedEvent$8>;
interface SetDefaultMultiplierBpsEventObject$9 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$9 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$9>;
type SetDefaultMultiplierBpsEventFilter$9 = TypedEventFilter<SetDefaultMultiplierBpsEvent$9>;
interface SetPriceFeedEventObject$9 {
    priceFeed: string;
}
type SetPriceFeedEvent$9 = TypedEvent<[string], SetPriceFeedEventObject$9>;
type SetPriceFeedEventFilter$9 = TypedEventFilter<SetPriceFeedEvent$9>;
interface SetSupportedOptionTypesEventObject$9 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$9 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$9>;
type SetSupportedOptionTypesEventFilter$9 = TypedEventFilter<SetSupportedOptionTypesEvent$9>;
interface SetWorkerLibEventObject$9 {
    workerLib: string;
}
type SetWorkerLibEvent$9 = TypedEvent<[string], SetWorkerLibEventObject$9>;
type SetWorkerLibEventFilter$9 = TypedEventFilter<SetWorkerLibEvent$9>;
interface UnpausedEventObject$8 {
    account: string;
}
type UnpausedEvent$8 = TypedEvent<[string], UnpausedEventObject$8>;
type UnpausedEventFilter$8 = TypedEventFilter<UnpausedEvent$8>;
interface WithdrawEventObject$9 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$9 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$9>;
type WithdrawEventFilter$9 = TypedEventFilter<WithdrawEvent$9>;
interface DVNAdapterBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DVNAdapterBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(_param: ILayerZeroDVN$9.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(_param: ILayerZeroDVN$9.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct$5[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$9.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct$5[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Paused(address)"(account?: null): PausedEventFilter$8;
        Paused(account?: null): PausedEventFilter$8;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter$5;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter$5;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$8;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$8;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$8;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$8;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$8;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$8;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$9;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$9;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$9;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$9;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$9;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$9;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$9;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$9;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$8;
        Unpaused(account?: null): UnpausedEventFilter$8;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$9;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$9;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$9.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_param: ILayerZeroDVN$9.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IReceiveUlnInterface extends utils.Interface {
    functions: {
        "verify(bytes,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {};
}
interface IReceiveUln extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IReceiveUlnInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ISendLibBaseInterface$1 extends utils.Interface {
    functions: {
        "fees(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "fees"): FunctionFragment;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    events: {};
}
interface ISendLibBase$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ISendLibBaseInterface$1;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$Z_DVNAdapterBase = DVNAdapterBase;
type index$Z_IReceiveUln = IReceiveUln;
declare namespace index$Z {
  export type { index$Z_DVNAdapterBase as DVNAdapterBase, index$Z_IReceiveUln as IReceiveUln, ISendLibBase$1 as ISendLibBase };
}

type ReceiveLibParamStruct$4 = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput$4 = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace ILayerZeroDVN$8 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface ArbitrumDVNAdapterL1Interface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "arbitrumEid()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig()": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "inbox()": FunctionFragment;
        "paused()": FunctionFragment;
        "peer()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig(uint16,uint256,uint256,uint256)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPeer(address)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "arbitrumEid" | "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "inbox" | "paused" | "peer" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPeer" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "arbitrumEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$8.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "inbox", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "peer", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct$4[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "arbitrumEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Paused(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RetryableTicketCreated(uint256)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RetryableTicketCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface PausedEventObject$7 {
    account: string;
}
type PausedEvent$7 = TypedEvent<[string], PausedEventObject$7>;
type PausedEventFilter$7 = TypedEventFilter<PausedEvent$7>;
interface ReceiveLibsSetEventObject$4 {
    params: ReceiveLibParamStructOutput$4[];
}
type ReceiveLibsSetEvent$4 = TypedEvent<[
    ReceiveLibParamStructOutput$4[]
], ReceiveLibsSetEventObject$4>;
type ReceiveLibsSetEventFilter$4 = TypedEventFilter<ReceiveLibsSetEvent$4>;
interface RetryableTicketCreatedEventObject {
    ticketId: BigNumber;
}
type RetryableTicketCreatedEvent = TypedEvent<[
    BigNumber
], RetryableTicketCreatedEventObject>;
type RetryableTicketCreatedEventFilter = TypedEventFilter<RetryableTicketCreatedEvent>;
interface RoleAdminChangedEventObject$7 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$7 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$7>;
type RoleAdminChangedEventFilter$7 = TypedEventFilter<RoleAdminChangedEvent$7>;
interface RoleGrantedEventObject$7 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$7 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$7>;
type RoleGrantedEventFilter$7 = TypedEventFilter<RoleGrantedEvent$7>;
interface RoleRevokedEventObject$7 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$7 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$7>;
type RoleRevokedEventFilter$7 = TypedEventFilter<RoleRevokedEvent$7>;
interface SetDefaultMultiplierBpsEventObject$8 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$8 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$8>;
type SetDefaultMultiplierBpsEventFilter$8 = TypedEventFilter<SetDefaultMultiplierBpsEvent$8>;
interface SetPriceFeedEventObject$8 {
    priceFeed: string;
}
type SetPriceFeedEvent$8 = TypedEvent<[string], SetPriceFeedEventObject$8>;
type SetPriceFeedEventFilter$8 = TypedEventFilter<SetPriceFeedEvent$8>;
interface SetSupportedOptionTypesEventObject$8 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$8 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$8>;
type SetSupportedOptionTypesEventFilter$8 = TypedEventFilter<SetSupportedOptionTypesEvent$8>;
interface SetWorkerLibEventObject$8 {
    workerLib: string;
}
type SetWorkerLibEvent$8 = TypedEvent<[string], SetWorkerLibEventObject$8>;
type SetWorkerLibEventFilter$8 = TypedEventFilter<SetWorkerLibEvent$8>;
interface UnpausedEventObject$7 {
    account: string;
}
type UnpausedEvent$7 = TypedEvent<[string], UnpausedEventObject$7>;
type UnpausedEventFilter$7 = TypedEventFilter<UnpausedEvent$7>;
interface WithdrawEventObject$8 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$8 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$8>;
type WithdrawEventFilter$8 = TypedEventFilter<WithdrawEvent$8>;
interface ArbitrumDVNAdapterL1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbitrumDVNAdapterL1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        arbitrumEid(overrides?: CallOverrides): Promise<[number]>;
        assignJob(_param: ILayerZeroDVN$8.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            multiplierBps: number;
            maxSubmissionCost: BigNumber;
            gasLimit: BigNumber;
            maxFeePerGas: BigNumber;
        }>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        inbox(overrides?: CallOverrides): Promise<[string]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        peer(overrides?: CallOverrides): Promise<[string]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_multiplierBps: PromiseOrValue<BigNumberish>, _maxSubmissionCost: PromiseOrValue<BigNumberish>, _gasLimit: PromiseOrValue<BigNumberish>, _maxFeePerGas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    arbitrumEid(overrides?: CallOverrides): Promise<number>;
    assignJob(_param: ILayerZeroDVN$8.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        multiplierBps: number;
        maxSubmissionCost: BigNumber;
        gasLimit: BigNumber;
        maxFeePerGas: BigNumber;
    }>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    inbox(overrides?: CallOverrides): Promise<string>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    peer(overrides?: CallOverrides): Promise<string>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_multiplierBps: PromiseOrValue<BigNumberish>, _maxSubmissionCost: PromiseOrValue<BigNumberish>, _gasLimit: PromiseOrValue<BigNumberish>, _maxFeePerGas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct$4[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        arbitrumEid(overrides?: CallOverrides): Promise<number>;
        assignJob(_param: ILayerZeroDVN$8.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            multiplierBps: number;
            maxSubmissionCost: BigNumber;
            gasLimit: BigNumber;
            maxFeePerGas: BigNumber;
        }>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        inbox(overrides?: CallOverrides): Promise<string>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        peer(overrides?: CallOverrides): Promise<string>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_multiplierBps: PromiseOrValue<BigNumberish>, _maxSubmissionCost: PromiseOrValue<BigNumberish>, _gasLimit: PromiseOrValue<BigNumberish>, _maxFeePerGas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct$4[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Paused(address)"(account?: null): PausedEventFilter$7;
        Paused(account?: null): PausedEventFilter$7;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter$4;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter$4;
        "RetryableTicketCreated(uint256)"(ticketId?: PromiseOrValue<BigNumberish> | null): RetryableTicketCreatedEventFilter;
        RetryableTicketCreated(ticketId?: PromiseOrValue<BigNumberish> | null): RetryableTicketCreatedEventFilter;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$7;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$7;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$7;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$7;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$7;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$7;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$8;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$8;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$8;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$8;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$8;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$8;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$8;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$8;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$7;
        Unpaused(account?: null): UnpausedEventFilter$7;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$8;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$8;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        arbitrumEid(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$8.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        inbox(overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        peer(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_multiplierBps: PromiseOrValue<BigNumberish>, _maxSubmissionCost: PromiseOrValue<BigNumberish>, _gasLimit: PromiseOrValue<BigNumberish>, _maxFeePerGas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        arbitrumEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_param: ILayerZeroDVN$8.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_multiplierBps: PromiseOrValue<BigNumberish>, _maxSubmissionCost: PromiseOrValue<BigNumberish>, _gasLimit: PromiseOrValue<BigNumberish>, _maxFeePerGas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ReceiveLibParamStruct$3 = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput$3 = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace ILayerZeroDVN$7 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface ArbitrumDVNAdapterL2Interface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "peer()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPeer(address)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "verify(bytes)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "peer" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPeer" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "verify" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$7.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "peer", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verify", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Paused(address)": EventFragment;
        "PeerSet(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface PausedEventObject$6 {
    account: string;
}
type PausedEvent$6 = TypedEvent<[string], PausedEventObject$6>;
type PausedEventFilter$6 = TypedEventFilter<PausedEvent$6>;
interface PeerSetEventObject$2 {
    peer: string;
}
type PeerSetEvent$2 = TypedEvent<[string], PeerSetEventObject$2>;
type PeerSetEventFilter$2 = TypedEventFilter<PeerSetEvent$2>;
interface ReceiveLibsSetEventObject$3 {
    params: ReceiveLibParamStructOutput$3[];
}
type ReceiveLibsSetEvent$3 = TypedEvent<[
    ReceiveLibParamStructOutput$3[]
], ReceiveLibsSetEventObject$3>;
type ReceiveLibsSetEventFilter$3 = TypedEventFilter<ReceiveLibsSetEvent$3>;
interface RoleAdminChangedEventObject$6 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$6 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$6>;
type RoleAdminChangedEventFilter$6 = TypedEventFilter<RoleAdminChangedEvent$6>;
interface RoleGrantedEventObject$6 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$6 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$6>;
type RoleGrantedEventFilter$6 = TypedEventFilter<RoleGrantedEvent$6>;
interface RoleRevokedEventObject$6 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$6 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$6>;
type RoleRevokedEventFilter$6 = TypedEventFilter<RoleRevokedEvent$6>;
interface SetDefaultMultiplierBpsEventObject$7 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$7 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$7>;
type SetDefaultMultiplierBpsEventFilter$7 = TypedEventFilter<SetDefaultMultiplierBpsEvent$7>;
interface SetPriceFeedEventObject$7 {
    priceFeed: string;
}
type SetPriceFeedEvent$7 = TypedEvent<[string], SetPriceFeedEventObject$7>;
type SetPriceFeedEventFilter$7 = TypedEventFilter<SetPriceFeedEvent$7>;
interface SetSupportedOptionTypesEventObject$7 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$7 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$7>;
type SetSupportedOptionTypesEventFilter$7 = TypedEventFilter<SetSupportedOptionTypesEvent$7>;
interface SetWorkerLibEventObject$7 {
    workerLib: string;
}
type SetWorkerLibEvent$7 = TypedEvent<[string], SetWorkerLibEventObject$7>;
type SetWorkerLibEventFilter$7 = TypedEventFilter<SetWorkerLibEvent$7>;
interface UnpausedEventObject$6 {
    account: string;
}
type UnpausedEvent$6 = TypedEvent<[string], UnpausedEventObject$6>;
type UnpausedEventFilter$6 = TypedEventFilter<UnpausedEvent$6>;
interface WithdrawEventObject$7 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$7 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$7>;
type WithdrawEventFilter$7 = TypedEventFilter<WithdrawEvent$7>;
interface ArbitrumDVNAdapterL2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbitrumDVNAdapterL2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(arg0: ILayerZeroDVN$7.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        peer(overrides?: CallOverrides): Promise<[string]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(arg0: ILayerZeroDVN$7.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    peer(overrides?: CallOverrides): Promise<string>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct$3[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(arg0: ILayerZeroDVN$7.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        peer(overrides?: CallOverrides): Promise<string>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct$3[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Paused(address)"(account?: null): PausedEventFilter$6;
        Paused(account?: null): PausedEventFilter$6;
        "PeerSet(address)"(peer?: null): PeerSetEventFilter$2;
        PeerSet(peer?: null): PeerSetEventFilter$2;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter$3;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter$3;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$6;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$6;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$6;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$6;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$6;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$6;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$7;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$7;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$7;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$7;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$7;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$7;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$7;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$7;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$6;
        Unpaused(account?: null): UnpausedEventFilter$6;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$7;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$7;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(arg0: ILayerZeroDVN$7.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        peer(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(arg0: ILayerZeroDVN$7.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$Y_ArbitrumDVNAdapterL1 = ArbitrumDVNAdapterL1;
type index$Y_ArbitrumDVNAdapterL2 = ArbitrumDVNAdapterL2;
declare namespace index$Y {
  export type { index$Y_ArbitrumDVNAdapterL1 as ArbitrumDVNAdapterL1, index$Y_ArbitrumDVNAdapterL2 as ArbitrumDVNAdapterL2 };
}

type ReceiveLibParamStruct$2 = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput$2 = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace IAxelarDVNAdapter$3 {
    type DstConfigParamStruct = {
        eid: PromiseOrValue<BigNumberish>;
        chainName: PromiseOrValue<string>;
        peer: PromiseOrValue<string>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        nativeGasFee: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        string,
        string,
        number,
        BigNumber
    ] & {
        eid: number;
        chainName: string;
        peer: string;
        multiplierBps: number;
        nativeGasFee: BigNumber;
    };
    type FloorMarginUSDParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type FloorMarginUSDParamStructOutput = [number, BigNumber] & {
        dstEid: number;
        floorMarginUSD: BigNumber;
    };
    type MultiplierParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
    };
    type MultiplierParamStructOutput = [number, number] & {
        dstEid: number;
        multiplierBps: number;
    };
    type NativeGasFeeParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        nativeGasFee: PromiseOrValue<BigNumberish>;
    };
    type NativeGasFeeParamStructOutput = [number, BigNumber] & {
        dstEid: number;
        nativeGasFee: BigNumber;
    };
}
declare namespace ILayerZeroDVN$6 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface AxelarDVNAdapterInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "execute(bytes32,string,string,bytes)": FunctionFragment;
        "executeWithToken(bytes32,string,string,bytes,string,uint256)": FunctionFragment;
        "gateway()": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig((uint32,string,string,uint16,uint256)[])": FunctionFragment;
        "setNativeGasFee((uint32,uint256)[])": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "srcConfig(string)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToFeeLib(address)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "dstConfig" | "execute" | "executeWithToken" | "gateway" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setNativeGasFee" | "setPaused" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "srcConfig" | "supportsInterface" | "withdrawFee" | "withdrawToFeeLib" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$6.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "execute", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "executeWithToken", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IAxelarDVNAdapter$3.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setNativeGasFee", values: [IAxelarDVNAdapter$3.NativeGasFeeParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "srcConfig", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeWithToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeGasFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "srcConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "FloorMarginUSDSet(tuple[])": EventFragment;
        "MultiplierSet(tuple[])": EventFragment;
        "NativeGasFeeSet(tuple[])": EventFragment;
        "Paused(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FloorMarginUSDSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MultiplierSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeGasFeeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface DstConfigSetEventObject$5 {
    params: IAxelarDVNAdapter$3.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$5 = TypedEvent<[
    IAxelarDVNAdapter$3.DstConfigParamStructOutput[]
], DstConfigSetEventObject$5>;
type DstConfigSetEventFilter$5 = TypedEventFilter<DstConfigSetEvent$5>;
interface FloorMarginUSDSetEventObject$1 {
    params: IAxelarDVNAdapter$3.FloorMarginUSDParamStructOutput[];
}
type FloorMarginUSDSetEvent$1 = TypedEvent<[
    IAxelarDVNAdapter$3.FloorMarginUSDParamStructOutput[]
], FloorMarginUSDSetEventObject$1>;
type FloorMarginUSDSetEventFilter$1 = TypedEventFilter<FloorMarginUSDSetEvent$1>;
interface MultiplierSetEventObject$1 {
    params: IAxelarDVNAdapter$3.MultiplierParamStructOutput[];
}
type MultiplierSetEvent$1 = TypedEvent<[
    IAxelarDVNAdapter$3.MultiplierParamStructOutput[]
], MultiplierSetEventObject$1>;
type MultiplierSetEventFilter$1 = TypedEventFilter<MultiplierSetEvent$1>;
interface NativeGasFeeSetEventObject$1 {
    params: IAxelarDVNAdapter$3.NativeGasFeeParamStructOutput[];
}
type NativeGasFeeSetEvent$1 = TypedEvent<[
    IAxelarDVNAdapter$3.NativeGasFeeParamStructOutput[]
], NativeGasFeeSetEventObject$1>;
type NativeGasFeeSetEventFilter$1 = TypedEventFilter<NativeGasFeeSetEvent$1>;
interface PausedEventObject$5 {
    account: string;
}
type PausedEvent$5 = TypedEvent<[string], PausedEventObject$5>;
type PausedEventFilter$5 = TypedEventFilter<PausedEvent$5>;
interface ReceiveLibsSetEventObject$2 {
    params: ReceiveLibParamStructOutput$2[];
}
type ReceiveLibsSetEvent$2 = TypedEvent<[
    ReceiveLibParamStructOutput$2[]
], ReceiveLibsSetEventObject$2>;
type ReceiveLibsSetEventFilter$2 = TypedEventFilter<ReceiveLibsSetEvent$2>;
interface RoleAdminChangedEventObject$5 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$5 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$5>;
type RoleAdminChangedEventFilter$5 = TypedEventFilter<RoleAdminChangedEvent$5>;
interface RoleGrantedEventObject$5 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$5 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$5>;
type RoleGrantedEventFilter$5 = TypedEventFilter<RoleGrantedEvent$5>;
interface RoleRevokedEventObject$5 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$5 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$5>;
type RoleRevokedEventFilter$5 = TypedEventFilter<RoleRevokedEvent$5>;
interface SetDefaultMultiplierBpsEventObject$6 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$6 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$6>;
type SetDefaultMultiplierBpsEventFilter$6 = TypedEventFilter<SetDefaultMultiplierBpsEvent$6>;
interface SetPriceFeedEventObject$6 {
    priceFeed: string;
}
type SetPriceFeedEvent$6 = TypedEvent<[string], SetPriceFeedEventObject$6>;
type SetPriceFeedEventFilter$6 = TypedEventFilter<SetPriceFeedEvent$6>;
interface SetSupportedOptionTypesEventObject$6 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$6 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$6>;
type SetSupportedOptionTypesEventFilter$6 = TypedEventFilter<SetSupportedOptionTypesEvent$6>;
interface SetWorkerLibEventObject$6 {
    workerLib: string;
}
type SetWorkerLibEvent$6 = TypedEvent<[string], SetWorkerLibEventObject$6>;
type SetWorkerLibEventFilter$6 = TypedEventFilter<SetWorkerLibEvent$6>;
interface UnpausedEventObject$5 {
    account: string;
}
type UnpausedEvent$5 = TypedEvent<[string], UnpausedEventObject$5>;
type UnpausedEventFilter$5 = TypedEventFilter<UnpausedEvent$5>;
interface WithdrawEventObject$6 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$6 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$6>;
type WithdrawEventFilter$6 = TypedEventFilter<WithdrawEvent$6>;
interface AxelarDVNAdapter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AxelarDVNAdapterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(_param: ILayerZeroDVN$6.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            BigNumber
        ] & {
            chainName: string;
            peer: string;
            multiplierBps: number;
            nativeGasFee: BigNumber;
        }>;
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        gateway(overrides?: CallOverrides): Promise<[string]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalFee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_params: IAxelarDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNativeGasFee(_params: IAxelarDVNAdapter$3.NativeGasFeeParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        srcConfig(srcChainName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number, string] & {
            eid: number;
            peer: string;
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(_param: ILayerZeroDVN$6.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        string,
        string,
        number,
        BigNumber
    ] & {
        chainName: string;
        peer: string;
        multiplierBps: number;
        nativeGasFee: BigNumber;
    }>;
    execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    gateway(overrides?: CallOverrides): Promise<string>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_params: IAxelarDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNativeGasFee(_params: IAxelarDVNAdapter$3.NativeGasFeeParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct$2[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    srcConfig(srcChainName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number, string] & {
        eid: number;
        peer: string;
    }>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$6.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            BigNumber
        ] & {
            chainName: string;
            peer: string;
            multiplierBps: number;
            nativeGasFee: BigNumber;
        }>;
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        gateway(overrides?: CallOverrides): Promise<string>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_params: IAxelarDVNAdapter$3.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setNativeGasFee(_params: IAxelarDVNAdapter$3.NativeGasFeeParamStruct[], overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct$2[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        srcConfig(srcChainName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number, string] & {
            eid: number;
            peer: string;
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$5;
        DstConfigSet(params?: null): DstConfigSetEventFilter$5;
        "FloorMarginUSDSet(tuple[])"(params?: null): FloorMarginUSDSetEventFilter$1;
        FloorMarginUSDSet(params?: null): FloorMarginUSDSetEventFilter$1;
        "MultiplierSet(tuple[])"(params?: null): MultiplierSetEventFilter$1;
        MultiplierSet(params?: null): MultiplierSetEventFilter$1;
        "NativeGasFeeSet(tuple[])"(params?: null): NativeGasFeeSetEventFilter$1;
        NativeGasFeeSet(params?: null): NativeGasFeeSetEventFilter$1;
        "Paused(address)"(account?: null): PausedEventFilter$5;
        Paused(account?: null): PausedEventFilter$5;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter$2;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter$2;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$5;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$5;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$5;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$5;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$5;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$5;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$6;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$6;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$6;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$6;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$6;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$6;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$6;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$6;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$5;
        Unpaused(account?: null): UnpausedEventFilter$5;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$6;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$6;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$6.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        gateway(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_params: IAxelarDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNativeGasFee(_params: IAxelarDVNAdapter$3.NativeGasFeeParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        srcConfig(srcChainName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_param: ILayerZeroDVN$6.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_params: IAxelarDVNAdapter$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNativeGasFee(_params: IAxelarDVNAdapter$3.NativeGasFeeParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        srcConfig(srcChainName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ISendLibBaseInterface extends utils.Interface {
    functions: {
        "fees(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "fees"): FunctionFragment;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    events: {};
}
interface ISendLibBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ISendLibBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        fees(_worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$X_AxelarDVNAdapter = AxelarDVNAdapter;
type index$X_ISendLibBase = ISendLibBase;
declare namespace index$X {
  export type { index$X_AxelarDVNAdapter as AxelarDVNAdapter, index$X_ISendLibBase as ISendLibBase };
}

declare namespace IAxelarDVNAdapterFeeLib$1 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [number, BigNumber, BigNumber] & {
        dstEid: number;
        gas: BigNumber;
        floorMarginUSD: BigNumber;
    };
    type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        defaultMultiplierBps: number;
    };
}
declare namespace IAxelarDVNAdapter$2 {
    type DstConfigStruct = {
        chainName: PromiseOrValue<string>;
        peer: PromiseOrValue<string>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        nativeGasFee: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [string, string, number, BigNumber] & {
        chainName: string;
        peer: string;
        multiplierBps: number;
        nativeGasFee: BigNumber;
    };
}
interface AxelarDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        "dstConfig(uint32)": FunctionFragment;
        "dvn()": FunctionFragment;
        "gasService()": FunctionFragment;
        "getFee((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes)": FunctionFragment;
        "getFeeOnSend((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes,bytes,address)": FunctionFragment;
        "initialize(address,address,uint16)": FunctionFragment;
        "nativeGasFeeMultiplierBps()": FunctionFragment;
        "owner()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDstConfig((uint32,uint64,uint128)[])": FunctionFragment;
        "setGasService(address)": FunctionFragment;
        "setNativeGasFeeMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "dstConfig" | "dvn" | "gasService" | "getFee" | "getFeeOnSend" | "initialize" | "nativeGasFeeMultiplierBps" | "owner" | "priceFeed" | "renounceOwnership" | "setDstConfig" | "setGasService" | "setNativeGasFeeMultiplierBps" | "setPriceFeed" | "transferOwnership" | "withdrawToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "dvn", values?: undefined): string;
    encodeFunctionData(functionFragment: "gasService", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        IAxelarDVNAdapterFeeLib$1.ParamStruct,
        IAxelarDVNAdapter$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IAxelarDVNAdapterFeeLib$1.ParamStruct,
        IAxelarDVNAdapter$2.DstConfigStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "nativeGasFeeMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IAxelarDVNAdapterFeeLib$1.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setGasService", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setNativeGasFeeMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dvn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasService", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeGasFeeMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasService", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeGasFeeMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "GasServiceSet(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "NativeGasFeeMultiplierBpsSet(uint16)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PriceFeedSet(address)": EventFragment;
        "TokenWithdrawn(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasServiceSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeGasFeeMultiplierBpsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PriceFeedSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
}
interface DstConfigSetEventObject$4 {
    params: IAxelarDVNAdapterFeeLib$1.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$4 = TypedEvent<[
    IAxelarDVNAdapterFeeLib$1.DstConfigParamStructOutput[]
], DstConfigSetEventObject$4>;
type DstConfigSetEventFilter$4 = TypedEventFilter<DstConfigSetEvent$4>;
interface GasServiceSetEventObject$1 {
    gasService: string;
}
type GasServiceSetEvent$1 = TypedEvent<[string], GasServiceSetEventObject$1>;
type GasServiceSetEventFilter$1 = TypedEventFilter<GasServiceSetEvent$1>;
interface InitializedEventObject$6 {
    version: number;
}
type InitializedEvent$6 = TypedEvent<[number], InitializedEventObject$6>;
type InitializedEventFilter$6 = TypedEventFilter<InitializedEvent$6>;
interface NativeGasFeeMultiplierBpsSetEventObject$1 {
    multiplierBps: number;
}
type NativeGasFeeMultiplierBpsSetEvent$1 = TypedEvent<[
    number
], NativeGasFeeMultiplierBpsSetEventObject$1>;
type NativeGasFeeMultiplierBpsSetEventFilter$1 = TypedEventFilter<NativeGasFeeMultiplierBpsSetEvent$1>;
interface OwnershipTransferredEventObject$k {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$k = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$k>;
type OwnershipTransferredEventFilter$k = TypedEventFilter<OwnershipTransferredEvent$k>;
interface PriceFeedSetEventObject$1 {
    priceFeed: string;
}
type PriceFeedSetEvent$1 = TypedEvent<[string], PriceFeedSetEventObject$1>;
type PriceFeedSetEventFilter$1 = TypedEventFilter<PriceFeedSetEvent$1>;
interface TokenWithdrawnEventObject$1 {
    token: string;
    to: string;
    amount: BigNumber;
}
type TokenWithdrawnEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], TokenWithdrawnEventObject$1>;
type TokenWithdrawnEventFilter$1 = TypedEventFilter<TokenWithdrawnEvent$1>;
interface AxelarDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AxelarDVNAdapterFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            gas: BigNumber;
            floorMarginUSD: BigNumber;
        }>;
        dvn(overrides?: CallOverrides): Promise<[string]>;
        gasService(overrides?: CallOverrides): Promise<[string]>;
        getFee(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalFee: BigNumber;
        }>;
        getFeeOnSend(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initialize(_gasService: PromiseOrValue<string>, _dvn: PromiseOrValue<string>, _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_param: IAxelarDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setGasService(_gasService: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNativeGasFeeMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        gas: BigNumber;
        floorMarginUSD: BigNumber;
    }>;
    dvn(overrides?: CallOverrides): Promise<string>;
    gasService(overrides?: CallOverrides): Promise<string>;
    getFee(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initialize(_gasService: PromiseOrValue<string>, _dvn: PromiseOrValue<string>, _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<number>;
    owner(overrides?: CallOverrides): Promise<string>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_param: IAxelarDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setGasService(_gasService: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNativeGasFeeMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            gas: BigNumber;
            floorMarginUSD: BigNumber;
        }>;
        dvn(overrides?: CallOverrides): Promise<string>;
        gasService(overrides?: CallOverrides): Promise<string>;
        getFee(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_gasService: PromiseOrValue<string>, _dvn: PromiseOrValue<string>, _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<number>;
        owner(overrides?: CallOverrides): Promise<string>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDstConfig(_param: IAxelarDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setGasService(_gasService: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setNativeGasFeeMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$4;
        DstConfigSet(params?: null): DstConfigSetEventFilter$4;
        "GasServiceSet(address)"(gasService?: null): GasServiceSetEventFilter$1;
        GasServiceSet(gasService?: null): GasServiceSetEventFilter$1;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$6;
        Initialized(version?: null): InitializedEventFilter$6;
        "NativeGasFeeMultiplierBpsSet(uint16)"(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter$1;
        NativeGasFeeMultiplierBpsSet(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$k;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$k;
        "PriceFeedSet(address)"(priceFeed?: null): PriceFeedSetEventFilter$1;
        PriceFeedSet(priceFeed?: null): PriceFeedSetEventFilter$1;
        "TokenWithdrawn(address,address,uint256)"(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter$1;
        TokenWithdrawn(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter$1;
    };
    estimateGas: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        dvn(overrides?: CallOverrides): Promise<BigNumber>;
        gasService(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initialize(_gasService: PromiseOrValue<string>, _dvn: PromiseOrValue<string>, _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_param: IAxelarDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setGasService(_gasService: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNativeGasFeeMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dvn(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        gasService(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_param: IAxelarDVNAdapterFeeLib$1.ParamStruct, _dstConfig: IAxelarDVNAdapter$2.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initialize(_gasService: PromiseOrValue<string>, _dvn: PromiseOrValue<string>, _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_param: IAxelarDVNAdapterFeeLib$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setGasService(_gasService: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNativeGasFeeMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$W_AxelarDVNAdapterFeeLib = AxelarDVNAdapterFeeLib;
declare namespace index$W {
  export { type index$W_AxelarDVNAdapterFeeLib as AxelarDVNAdapterFeeLib, index$X as axelarDvnAdapterSol };
}

interface DVNAdapterMessageCodecInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface DVNAdapterMessageCodec extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DVNAdapterMessageCodecInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

type index$V_DVNAdapterMessageCodec = DVNAdapterMessageCodec;
declare namespace index$V {
  export type { index$V_DVNAdapterMessageCodec as DVNAdapterMessageCodec };
}

type ReceiveLibParamStruct$1 = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput$1 = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace ILayerZeroDVN$5 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface OptimismDVNAdapterL1Interface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "gasLimit()": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "l1Messenger()": FunctionFragment;
        "optimismEid()": FunctionFragment;
        "paused()": FunctionFragment;
        "peer()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setGasLimit(uint32)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPeer(address)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "gasLimit" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "l1Messenger" | "optimismEid" | "paused" | "peer" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setGasLimit" | "setPaused" | "setPeer" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$5.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "l1Messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "optimismEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "peer", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setGasLimit", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l1Messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "optimismEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "GasLimitSet(uint32)": EventFragment;
        "Paused(address)": EventFragment;
        "PeerSet(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "GasLimitSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface GasLimitSetEventObject {
    gasLimit: number;
}
type GasLimitSetEvent = TypedEvent<[number], GasLimitSetEventObject>;
type GasLimitSetEventFilter = TypedEventFilter<GasLimitSetEvent>;
interface PausedEventObject$4 {
    account: string;
}
type PausedEvent$4 = TypedEvent<[string], PausedEventObject$4>;
type PausedEventFilter$4 = TypedEventFilter<PausedEvent$4>;
interface PeerSetEventObject$1 {
    peer: string;
}
type PeerSetEvent$1 = TypedEvent<[string], PeerSetEventObject$1>;
type PeerSetEventFilter$1 = TypedEventFilter<PeerSetEvent$1>;
interface ReceiveLibsSetEventObject$1 {
    params: ReceiveLibParamStructOutput$1[];
}
type ReceiveLibsSetEvent$1 = TypedEvent<[
    ReceiveLibParamStructOutput$1[]
], ReceiveLibsSetEventObject$1>;
type ReceiveLibsSetEventFilter$1 = TypedEventFilter<ReceiveLibsSetEvent$1>;
interface RoleAdminChangedEventObject$4 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$4 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$4>;
type RoleAdminChangedEventFilter$4 = TypedEventFilter<RoleAdminChangedEvent$4>;
interface RoleGrantedEventObject$4 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$4 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$4>;
type RoleGrantedEventFilter$4 = TypedEventFilter<RoleGrantedEvent$4>;
interface RoleRevokedEventObject$4 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$4 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$4>;
type RoleRevokedEventFilter$4 = TypedEventFilter<RoleRevokedEvent$4>;
interface SetDefaultMultiplierBpsEventObject$5 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$5 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$5>;
type SetDefaultMultiplierBpsEventFilter$5 = TypedEventFilter<SetDefaultMultiplierBpsEvent$5>;
interface SetPriceFeedEventObject$5 {
    priceFeed: string;
}
type SetPriceFeedEvent$5 = TypedEvent<[string], SetPriceFeedEventObject$5>;
type SetPriceFeedEventFilter$5 = TypedEventFilter<SetPriceFeedEvent$5>;
interface SetSupportedOptionTypesEventObject$5 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$5 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$5>;
type SetSupportedOptionTypesEventFilter$5 = TypedEventFilter<SetSupportedOptionTypesEvent$5>;
interface SetWorkerLibEventObject$5 {
    workerLib: string;
}
type SetWorkerLibEvent$5 = TypedEvent<[string], SetWorkerLibEventObject$5>;
type SetWorkerLibEventFilter$5 = TypedEventFilter<SetWorkerLibEvent$5>;
interface UnpausedEventObject$4 {
    account: string;
}
type UnpausedEvent$4 = TypedEvent<[string], UnpausedEventObject$4>;
type UnpausedEventFilter$4 = TypedEventFilter<UnpausedEvent$4>;
interface WithdrawEventObject$5 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$5 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$5>;
type WithdrawEventFilter$5 = TypedEventFilter<WithdrawEvent$5>;
interface OptimismDVNAdapterL1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OptimismDVNAdapterL1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(_param: ILayerZeroDVN$5.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        gasLimit(overrides?: CallOverrides): Promise<[number]>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        l1Messenger(overrides?: CallOverrides): Promise<[string]>;
        optimismEid(overrides?: CallOverrides): Promise<[number]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        peer(overrides?: CallOverrides): Promise<[string]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setGasLimit(_gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(_param: ILayerZeroDVN$5.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    gasLimit(overrides?: CallOverrides): Promise<number>;
    getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    l1Messenger(overrides?: CallOverrides): Promise<string>;
    optimismEid(overrides?: CallOverrides): Promise<number>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    peer(overrides?: CallOverrides): Promise<string>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setGasLimit(_gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$5.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        gasLimit(overrides?: CallOverrides): Promise<number>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        l1Messenger(overrides?: CallOverrides): Promise<string>;
        optimismEid(overrides?: CallOverrides): Promise<number>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        peer(overrides?: CallOverrides): Promise<string>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setGasLimit(_gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "GasLimitSet(uint32)"(gasLimit?: null): GasLimitSetEventFilter;
        GasLimitSet(gasLimit?: null): GasLimitSetEventFilter;
        "Paused(address)"(account?: null): PausedEventFilter$4;
        Paused(account?: null): PausedEventFilter$4;
        "PeerSet(address)"(peer?: PromiseOrValue<string> | null): PeerSetEventFilter$1;
        PeerSet(peer?: PromiseOrValue<string> | null): PeerSetEventFilter$1;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter$1;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter$1;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$4;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$4;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$4;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$4;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$4;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$4;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$5;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$5;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$5;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$5;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$5;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$5;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$5;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$5;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$4;
        Unpaused(account?: null): UnpausedEventFilter$4;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$5;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$5;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_param: ILayerZeroDVN$5.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        gasLimit(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        l1Messenger(overrides?: CallOverrides): Promise<BigNumber>;
        optimismEid(overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        peer(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setGasLimit(_gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_param: ILayerZeroDVN$5.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        gasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l1Messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        optimismEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setGasLimit(_gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ReceiveLibParamStruct = {
    sendLib: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiveLib: PromiseOrValue<BytesLike>;
};
type ReceiveLibParamStructOutput = [string, number, string] & {
    sendLib: string;
    dstEid: number;
    receiveLib: string;
};
declare namespace ILayerZeroDVN$4 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface OptimismDVNAdapterL2Interface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "l2Messenger()": FunctionFragment;
        "paused()": FunctionFragment;
        "peer()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "receiveLibs(address,uint32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPeer(address)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setReceiveLibs((address,uint32,bytes32)[])": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "verify(bytes)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "l2Messenger" | "paused" | "peer" | "priceFeed" | "receiveLibs" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPeer" | "setPriceFeed" | "setReceiveLibs" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "verify" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$4.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "l2Messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "peer", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibs", values: [ReceiveLibParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verify", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2Messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Paused(address)": EventFragment;
        "PeerSet(address)": EventFragment;
        "ReceiveLibsSet(tuple[])": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface PausedEventObject$3 {
    account: string;
}
type PausedEvent$3 = TypedEvent<[string], PausedEventObject$3>;
type PausedEventFilter$3 = TypedEventFilter<PausedEvent$3>;
interface PeerSetEventObject {
    peer: string;
}
type PeerSetEvent = TypedEvent<[string], PeerSetEventObject>;
type PeerSetEventFilter = TypedEventFilter<PeerSetEvent>;
interface ReceiveLibsSetEventObject {
    params: ReceiveLibParamStructOutput[];
}
type ReceiveLibsSetEvent = TypedEvent<[
    ReceiveLibParamStructOutput[]
], ReceiveLibsSetEventObject>;
type ReceiveLibsSetEventFilter = TypedEventFilter<ReceiveLibsSetEvent>;
interface RoleAdminChangedEventObject$3 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$3 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$3>;
type RoleAdminChangedEventFilter$3 = TypedEventFilter<RoleAdminChangedEvent$3>;
interface RoleGrantedEventObject$3 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$3 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$3>;
type RoleGrantedEventFilter$3 = TypedEventFilter<RoleGrantedEvent$3>;
interface RoleRevokedEventObject$3 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$3 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$3>;
type RoleRevokedEventFilter$3 = TypedEventFilter<RoleRevokedEvent$3>;
interface SetDefaultMultiplierBpsEventObject$4 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$4 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$4>;
type SetDefaultMultiplierBpsEventFilter$4 = TypedEventFilter<SetDefaultMultiplierBpsEvent$4>;
interface SetPriceFeedEventObject$4 {
    priceFeed: string;
}
type SetPriceFeedEvent$4 = TypedEvent<[string], SetPriceFeedEventObject$4>;
type SetPriceFeedEventFilter$4 = TypedEventFilter<SetPriceFeedEvent$4>;
interface SetSupportedOptionTypesEventObject$4 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$4 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$4>;
type SetSupportedOptionTypesEventFilter$4 = TypedEventFilter<SetSupportedOptionTypesEvent$4>;
interface SetWorkerLibEventObject$4 {
    workerLib: string;
}
type SetWorkerLibEvent$4 = TypedEvent<[string], SetWorkerLibEventObject$4>;
type SetWorkerLibEventFilter$4 = TypedEventFilter<SetWorkerLibEvent$4>;
interface UnpausedEventObject$3 {
    account: string;
}
type UnpausedEvent$3 = TypedEvent<[string], UnpausedEventObject$3>;
type UnpausedEventFilter$3 = TypedEventFilter<UnpausedEvent$3>;
interface WithdrawEventObject$4 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$4 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$4>;
type WithdrawEventFilter$4 = TypedEventFilter<WithdrawEvent$4>;
interface OptimismDVNAdapterL2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OptimismDVNAdapterL2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(arg0: ILayerZeroDVN$4.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        l2Messenger(overrides?: CallOverrides): Promise<[string]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        peer(overrides?: CallOverrides): Promise<[string]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            receiveLib: string;
        }>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(arg0: ILayerZeroDVN$4.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    l2Messenger(overrides?: CallOverrides): Promise<string>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    peer(overrides?: CallOverrides): Promise<string>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibs(_params: ReceiveLibParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(arg0: ILayerZeroDVN$4.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        l2Messenger(overrides?: CallOverrides): Promise<string>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        peer(overrides?: CallOverrides): Promise<string>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibs(_params: ReceiveLibParamStruct[], overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Paused(address)"(account?: null): PausedEventFilter$3;
        Paused(account?: null): PausedEventFilter$3;
        "PeerSet(address)"(peer?: PromiseOrValue<string> | null): PeerSetEventFilter;
        PeerSet(peer?: PromiseOrValue<string> | null): PeerSetEventFilter;
        "ReceiveLibsSet(tuple[])"(params?: null): ReceiveLibsSetEventFilter;
        ReceiveLibsSet(params?: null): ReceiveLibsSetEventFilter;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$3;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$3;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$3;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$3;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$3;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$3;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$4;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$4;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$4;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$4;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$4;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$4;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$4;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$4;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$3;
        Unpaused(account?: null): UnpausedEventFilter$3;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$4;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$4;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(arg0: ILayerZeroDVN$4.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        l2Messenger(overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        peer(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibs(_params: ReceiveLibParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(arg0: ILayerZeroDVN$4.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2Messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibs(sendLib: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_peer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibs(_params: ReceiveLibParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$U_OptimismDVNAdapterL1 = OptimismDVNAdapterL1;
type index$U_OptimismDVNAdapterL2 = OptimismDVNAdapterL2;
declare namespace index$U {
  export type { index$U_OptimismDVNAdapterL1 as OptimismDVNAdapterL1, index$U_OptimismDVNAdapterL2 as OptimismDVNAdapterL2 };
}

declare namespace index$T {
  export { index$Y as arbitrum, index$W as axelar, index$_ as ccip, index$Z as dvnAdapterBaseSol, index$V as libs, index$U as optimism };
}

type ExecuteParamStruct = {
    vid: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
    expiration: PromiseOrValue<BigNumberish>;
    signatures: PromiseOrValue<BytesLike>;
};
type ExecuteParamStructOutput = [
    number,
    string,
    string,
    BigNumber,
    string
] & {
    vid: number;
    target: string;
    callData: string;
    expiration: BigNumber;
    signatures: string;
};
declare namespace IDVN$3 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        number,
        BigNumber
    ] & {
        dstEid: number;
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
declare namespace ILayerZeroDVN$3 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface DVNInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "assignJob(uint16,uint16,uint64,address)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "execute((uint32,address,bytes,uint256,bytes)[])": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getFee(uint16,uint16,uint64,address)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "hashCallData(uint32,address,bytes,uint256)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "quorum()": FunctionFragment;
        "quorumChangeAdmin((uint32,address,bytes,uint256,bytes))": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig((uint32,uint64,uint16,uint128)[])": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setQuorum(uint64)": FunctionFragment;
        "setSigner(address,bool)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "signerSize()": FunctionFragment;
        "signers(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "usedHashes(bytes32)": FunctionFragment;
        "verifySignatures(bytes32,bytes)": FunctionFragment;
        "vid()": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawFeeFromUlnV2(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob((uint32,bytes,bytes32,uint64,address),bytes)" | "assignJob(uint16,uint16,uint64,address)" | "defaultMultiplierBps" | "dstConfig" | "execute" | "getFee(uint32,uint64,address,bytes)" | "getFee(uint16,uint16,uint64,address)" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "hashCallData" | "paused" | "priceFeed" | "quorum" | "quorumChangeAdmin" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setQuorum" | "setSigner" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "signerSize" | "signers" | "supportsInterface" | "usedHashes" | "verifySignatures" | "vid" | "withdrawFee" | "withdrawFeeFromUlnV2" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)", values: [ILayerZeroDVN$3.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "assignJob(uint16,uint16,uint64,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "execute", values: [ExecuteParamStruct[]]): string;
    encodeFunctionData(functionFragment: "getFee(uint32,uint64,address,bytes)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFee(uint16,uint16,uint64,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hashCallData", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumChangeAdmin", values: [ExecuteParamStruct]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IDVN$3.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setQuorum", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setSigner", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "usedHashes", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "vid", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawFeeFromUlnV2", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint32,uint64,address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashCallData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumChangeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFeeFromUlnV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "ExecuteFailed(uint256,bytes)": EventFragment;
        "HashAlreadyUsed(tuple,bytes32)": EventFragment;
        "Paused(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetDstConfig(tuple[])": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "UpdateQuorum(uint64)": EventFragment;
        "UpdateSigner(address,bool)": EventFragment;
        "VerifierFeePaid(uint256)": EventFragment;
        "VerifySignaturesFailed(uint256)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExecuteFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "HashAlreadyUsed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDstConfig"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateQuorum"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateSigner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VerifierFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VerifySignaturesFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface ExecuteFailedEventObject {
    _index: BigNumber;
    _data: string;
}
type ExecuteFailedEvent = TypedEvent<[
    BigNumber,
    string
], ExecuteFailedEventObject>;
type ExecuteFailedEventFilter = TypedEventFilter<ExecuteFailedEvent>;
interface HashAlreadyUsedEventObject {
    param: ExecuteParamStructOutput;
    _hash: string;
}
type HashAlreadyUsedEvent = TypedEvent<[
    ExecuteParamStructOutput,
    string
], HashAlreadyUsedEventObject>;
type HashAlreadyUsedEventFilter = TypedEventFilter<HashAlreadyUsedEvent>;
interface PausedEventObject$2 {
    account: string;
}
type PausedEvent$2 = TypedEvent<[string], PausedEventObject$2>;
type PausedEventFilter$2 = TypedEventFilter<PausedEvent$2>;
interface RoleAdminChangedEventObject$2 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$2 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$2>;
type RoleAdminChangedEventFilter$2 = TypedEventFilter<RoleAdminChangedEvent$2>;
interface RoleGrantedEventObject$2 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$2 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$2>;
type RoleGrantedEventFilter$2 = TypedEventFilter<RoleGrantedEvent$2>;
interface RoleRevokedEventObject$2 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$2 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$2>;
type RoleRevokedEventFilter$2 = TypedEventFilter<RoleRevokedEvent$2>;
interface SetDefaultMultiplierBpsEventObject$3 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$3 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$3>;
type SetDefaultMultiplierBpsEventFilter$3 = TypedEventFilter<SetDefaultMultiplierBpsEvent$3>;
interface SetDstConfigEventObject$1 {
    params: IDVN$3.DstConfigParamStructOutput[];
}
type SetDstConfigEvent$1 = TypedEvent<[
    IDVN$3.DstConfigParamStructOutput[]
], SetDstConfigEventObject$1>;
type SetDstConfigEventFilter$1 = TypedEventFilter<SetDstConfigEvent$1>;
interface SetPriceFeedEventObject$3 {
    priceFeed: string;
}
type SetPriceFeedEvent$3 = TypedEvent<[string], SetPriceFeedEventObject$3>;
type SetPriceFeedEventFilter$3 = TypedEventFilter<SetPriceFeedEvent$3>;
interface SetSupportedOptionTypesEventObject$3 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$3 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$3>;
type SetSupportedOptionTypesEventFilter$3 = TypedEventFilter<SetSupportedOptionTypesEvent$3>;
interface SetWorkerLibEventObject$3 {
    workerLib: string;
}
type SetWorkerLibEvent$3 = TypedEvent<[string], SetWorkerLibEventObject$3>;
type SetWorkerLibEventFilter$3 = TypedEventFilter<SetWorkerLibEvent$3>;
interface UnpausedEventObject$2 {
    account: string;
}
type UnpausedEvent$2 = TypedEvent<[string], UnpausedEventObject$2>;
type UnpausedEventFilter$2 = TypedEventFilter<UnpausedEvent$2>;
interface UpdateQuorumEventObject$1 {
    _quorum: BigNumber;
}
type UpdateQuorumEvent$1 = TypedEvent<[
    BigNumber
], UpdateQuorumEventObject$1>;
type UpdateQuorumEventFilter$1 = TypedEventFilter<UpdateQuorumEvent$1>;
interface UpdateSignerEventObject$1 {
    _signer: string;
    _active: boolean;
}
type UpdateSignerEvent$1 = TypedEvent<[
    string,
    boolean
], UpdateSignerEventObject$1>;
type UpdateSignerEventFilter$1 = TypedEventFilter<UpdateSignerEvent$1>;
interface VerifierFeePaidEventObject {
    fee: BigNumber;
}
type VerifierFeePaidEvent = TypedEvent<[
    BigNumber
], VerifierFeePaidEventObject>;
type VerifierFeePaidEventFilter = TypedEventFilter<VerifierFeePaidEvent>;
interface VerifySignaturesFailedEventObject {
    idx: BigNumber;
}
type VerifySignaturesFailedEvent = TypedEvent<[
    BigNumber
], VerifySignaturesFailedEventObject>;
type VerifySignaturesFailedEventFilter = TypedEventFilter<VerifySignaturesFailedEvent>;
interface WithdrawEventObject$3 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$3 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$3>;
type WithdrawEventFilter$3 = TypedEventFilter<WithdrawEvent$3>;
interface DVN extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DVNInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(_param: ILayerZeroDVN$3.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber
        ] & {
            gas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
        }>;
        execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hashCallData(_vid: PromiseOrValue<BigNumberish>, _target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        quorum(overrides?: CallOverrides): Promise<[BigNumber]>;
        quorumChangeAdmin(_param: ExecuteParamStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_params: IDVN$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            used: boolean;
        }>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, number]>;
        vid(overrides?: CallOverrides): Promise<[number]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(_param: ILayerZeroDVN$3.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        BigNumber
    ] & {
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    }>;
    execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hashCallData(_vid: PromiseOrValue<BigNumberish>, _target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    quorum(overrides?: CallOverrides): Promise<BigNumber>;
    quorumChangeAdmin(_param: ExecuteParamStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_params: IDVN$3.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    signerSize(overrides?: CallOverrides): Promise<BigNumber>;
    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, number]>;
    vid(overrides?: CallOverrides): Promise<number>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(_param: ILayerZeroDVN$3.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber
        ] & {
            gas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
        }>;
        execute(_params: ExecuteParamStruct[], overrides?: CallOverrides): Promise<void>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hashCallData(_vid: PromiseOrValue<BigNumberish>, _target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        quorumChangeAdmin(_param: ExecuteParamStruct, overrides?: CallOverrides): Promise<void>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_params: IDVN$3.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, number]>;
        vid(overrides?: CallOverrides): Promise<number>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ExecuteFailed(uint256,bytes)"(_index?: null, _data?: null): ExecuteFailedEventFilter;
        ExecuteFailed(_index?: null, _data?: null): ExecuteFailedEventFilter;
        "HashAlreadyUsed(tuple,bytes32)"(param?: null, _hash?: null): HashAlreadyUsedEventFilter;
        HashAlreadyUsed(param?: null, _hash?: null): HashAlreadyUsedEventFilter;
        "Paused(address)"(account?: null): PausedEventFilter$2;
        Paused(account?: null): PausedEventFilter$2;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$2;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$2;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$2;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$2;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$2;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$2;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$3;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$3;
        "SetDstConfig(tuple[])"(params?: null): SetDstConfigEventFilter$1;
        SetDstConfig(params?: null): SetDstConfigEventFilter$1;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$3;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$3;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$3;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$3;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$3;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$3;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$2;
        Unpaused(account?: null): UnpausedEventFilter$2;
        "UpdateQuorum(uint64)"(_quorum?: null): UpdateQuorumEventFilter$1;
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter$1;
        "UpdateSigner(address,bool)"(_signer?: null, _active?: null): UpdateSignerEventFilter$1;
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter$1;
        "VerifierFeePaid(uint256)"(fee?: null): VerifierFeePaidEventFilter;
        VerifierFeePaid(fee?: null): VerifierFeePaidEventFilter;
        "VerifySignaturesFailed(uint256)"(idx?: null): VerifySignaturesFailedEventFilter;
        VerifySignaturesFailed(idx?: null): VerifySignaturesFailedEventFilter;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$3;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$3;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(_param: ILayerZeroDVN$3.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hashCallData(_vid: PromiseOrValue<BigNumberish>, _target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        quorumChangeAdmin(_param: ExecuteParamStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_params: IDVN$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        vid(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(_param: ILayerZeroDVN$3.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashCallData(_vid: PromiseOrValue<BigNumberish>, _target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quorumChangeAdmin(_param: ExecuteParamStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_params: IDVN$3.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        vid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IDVNFeeLib$1 {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        quorum: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        quorum: BigNumber;
        defaultMultiplierBps: number;
    };
}
declare namespace IDVN$2 {
    type DstConfigStruct = {
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [BigNumber, number, BigNumber] & {
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface DVNFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend" | "owner" | "renounceOwnership" | "transferOwnership" | "withdrawToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IDVNFeeLib$1.FeeParamsStruct,
        IDVN$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IDVNFeeLib$1.FeeParamsStruct,
        IDVN$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$j {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$j = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$j>;
type OwnershipTransferredEventFilter$j = TypedEventFilter<OwnershipTransferredEvent$j>;
interface DVNFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DVNFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getFeeOnSend(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$j;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$j;
    };
    estimateGas: {
        getFee(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IDVNFeeLib$1.FeeParamsStruct, _dstConfig: IDVN$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace ILayerZeroDVN$2 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface DeadDVNInterface extends utils.Interface {
    functions: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "assignJob(uint16,uint16,uint64,address)": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getFee(uint16,uint16,uint64,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)" | "assignJob(uint16,uint16,uint64,address)" | "getFee(uint32,uint64,address,bytes)" | "getFee(uint16,uint16,uint64,address)"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)", values: [ILayerZeroDVN$2.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "assignJob(uint16,uint16,uint64,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "getFee(uint32,uint64,address,bytes)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFee(uint16,uint16,uint64,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint32,uint64,address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint16,uint16,uint64,address)", data: BytesLike): Result;
    events: {};
}
interface DeadDVN extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DeadDVNInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(arg0: ILayerZeroDVN$2.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "assignJob(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        "getFee(uint32,uint64,address,bytes)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        "getFee(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(arg0: ILayerZeroDVN$2.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "assignJob(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    "getFee(uint32,uint64,address,bytes)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    "getFee(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(arg0: ILayerZeroDVN$2.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint32,uint64,address,bytes)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(arg0: ILayerZeroDVN$2.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "assignJob(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint32,uint64,address,bytes)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"(arg0: ILayerZeroDVN$2.AssignJobParamStruct, arg1: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "assignJob(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFee(uint32,uint64,address,bytes)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFee(uint16,uint16,uint64,address)"(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface MultiSigInterface extends utils.Interface {
    functions: {
        "quorum()": FunctionFragment;
        "signerSize()": FunctionFragment;
        "signers(address)": FunctionFragment;
        "verifySignatures(bytes32,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "quorum" | "signerSize" | "signers" | "verifySignatures"): FunctionFragment;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
    events: {
        "UpdateQuorum(uint64)": EventFragment;
        "UpdateSigner(address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "UpdateQuorum"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateSigner"): EventFragment;
}
interface UpdateQuorumEventObject {
    _quorum: BigNumber;
}
type UpdateQuorumEvent = TypedEvent<[
    BigNumber
], UpdateQuorumEventObject>;
type UpdateQuorumEventFilter = TypedEventFilter<UpdateQuorumEvent>;
interface UpdateSignerEventObject {
    _signer: string;
    _active: boolean;
}
type UpdateSignerEvent = TypedEvent<[
    string,
    boolean
], UpdateSignerEventObject>;
type UpdateSignerEventFilter = TypedEventFilter<UpdateSignerEvent>;
interface MultiSig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MultiSigInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        quorum(overrides?: CallOverrides): Promise<[BigNumber]>;
        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, number]>;
    };
    quorum(overrides?: CallOverrides): Promise<BigNumber>;
    signerSize(overrides?: CallOverrides): Promise<BigNumber>;
    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, number]>;
    callStatic: {
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, number]>;
    };
    filters: {
        "UpdateQuorum(uint64)"(_quorum?: null): UpdateQuorumEventFilter;
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter;
        "UpdateSigner(address,bool)"(_signer?: null, _active?: null): UpdateSignerEventFilter;
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter;
    };
    estimateGas: {
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$S_DVN = DVN;
type index$S_DVNFeeLib = DVNFeeLib;
type index$S_DeadDVN = DeadDVN;
type index$S_MultiSig = MultiSig;
declare namespace index$S {
  export { type index$S_DVN as DVN, type index$S_DVNFeeLib as DVNFeeLib, type index$S_DeadDVN as DeadDVN, type index$S_MultiSig as MultiSig, index$T as adapters };
}

interface IAxelarDVNAdapterInterface extends utils.Interface {
    functions: {
        "withdrawToFeeLib(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "withdrawToFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "withdrawToFeeLib", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "withdrawToFeeLib", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "FloorMarginUSDSet(tuple[])": EventFragment;
        "MultiplierSet(tuple[])": EventFragment;
        "NativeGasFeeSet(tuple[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FloorMarginUSDSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MultiplierSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeGasFeeSet"): EventFragment;
}
interface DstConfigSetEventObject$3 {
    params: IAxelarDVNAdapter$1.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$3 = TypedEvent<[
    IAxelarDVNAdapter$1.DstConfigParamStructOutput[]
], DstConfigSetEventObject$3>;
type DstConfigSetEventFilter$3 = TypedEventFilter<DstConfigSetEvent$3>;
interface FloorMarginUSDSetEventObject {
    params: IAxelarDVNAdapter$1.FloorMarginUSDParamStructOutput[];
}
type FloorMarginUSDSetEvent = TypedEvent<[
    IAxelarDVNAdapter$1.FloorMarginUSDParamStructOutput[]
], FloorMarginUSDSetEventObject>;
type FloorMarginUSDSetEventFilter = TypedEventFilter<FloorMarginUSDSetEvent>;
interface MultiplierSetEventObject {
    params: IAxelarDVNAdapter$1.MultiplierParamStructOutput[];
}
type MultiplierSetEvent = TypedEvent<[
    IAxelarDVNAdapter$1.MultiplierParamStructOutput[]
], MultiplierSetEventObject>;
type MultiplierSetEventFilter = TypedEventFilter<MultiplierSetEvent>;
interface NativeGasFeeSetEventObject {
    params: IAxelarDVNAdapter$1.NativeGasFeeParamStructOutput[];
}
type NativeGasFeeSetEvent = TypedEvent<[
    IAxelarDVNAdapter$1.NativeGasFeeParamStructOutput[]
], NativeGasFeeSetEventObject>;
type NativeGasFeeSetEventFilter = TypedEventFilter<NativeGasFeeSetEvent>;
declare namespace IAxelarDVNAdapter$1 {
    type DstConfigParamStruct = {
        eid: PromiseOrValue<BigNumberish>;
        chainName: PromiseOrValue<string>;
        peer: PromiseOrValue<string>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        nativeGasFee: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        string,
        string,
        number,
        BigNumber
    ] & {
        eid: number;
        chainName: string;
        peer: string;
        multiplierBps: number;
        nativeGasFee: BigNumber;
    };
    type FloorMarginUSDParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type FloorMarginUSDParamStructOutput = [number, BigNumber] & {
        dstEid: number;
        floorMarginUSD: BigNumber;
    };
    type MultiplierParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
    };
    type MultiplierParamStructOutput = [number, number] & {
        dstEid: number;
        multiplierBps: number;
    };
    type NativeGasFeeParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        nativeGasFee: PromiseOrValue<BigNumberish>;
    };
    type NativeGasFeeParamStructOutput = [number, BigNumber] & {
        dstEid: number;
        nativeGasFee: BigNumber;
    };
}
interface IAxelarDVNAdapter$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAxelarDVNAdapterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$3;
        DstConfigSet(params?: null): DstConfigSetEventFilter$3;
        "FloorMarginUSDSet(tuple[])"(params?: null): FloorMarginUSDSetEventFilter;
        FloorMarginUSDSet(params?: null): FloorMarginUSDSetEventFilter;
        "MultiplierSet(tuple[])"(params?: null): MultiplierSetEventFilter;
        MultiplierSet(params?: null): MultiplierSetEventFilter;
        "NativeGasFeeSet(tuple[])"(params?: null): NativeGasFeeSetEventFilter;
        NativeGasFeeSet(params?: null): NativeGasFeeSetEventFilter;
    };
    estimateGas: {
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IAxelarDVNAdapter {
    type DstConfigStruct = {
        chainName: PromiseOrValue<string>;
        peer: PromiseOrValue<string>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        nativeGasFee: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [string, string, number, BigNumber] & {
        chainName: string;
        peer: string;
        multiplierBps: number;
        nativeGasFee: BigNumber;
    };
}
interface IAxelarDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes)": FunctionFragment;
        "getFeeOnSend((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes,bytes,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IAxelarDVNAdapterFeeLib.ParamStruct,
        IAxelarDVNAdapter.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IAxelarDVNAdapterFeeLib.ParamStruct,
        IAxelarDVNAdapter.DstConfigStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
        "GasServiceSet(address)": EventFragment;
        "NativeGasFeeMultiplierBpsSet(uint16)": EventFragment;
        "PriceFeedSet(address)": EventFragment;
        "TokenWithdrawn(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasServiceSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeGasFeeMultiplierBpsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PriceFeedSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
}
interface DstConfigSetEventObject$2 {
    params: IAxelarDVNAdapterFeeLib.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$2 = TypedEvent<[
    IAxelarDVNAdapterFeeLib.DstConfigParamStructOutput[]
], DstConfigSetEventObject$2>;
type DstConfigSetEventFilter$2 = TypedEventFilter<DstConfigSetEvent$2>;
interface GasServiceSetEventObject {
    gasService: string;
}
type GasServiceSetEvent = TypedEvent<[string], GasServiceSetEventObject>;
type GasServiceSetEventFilter = TypedEventFilter<GasServiceSetEvent>;
interface NativeGasFeeMultiplierBpsSetEventObject {
    multiplierBps: number;
}
type NativeGasFeeMultiplierBpsSetEvent = TypedEvent<[
    number
], NativeGasFeeMultiplierBpsSetEventObject>;
type NativeGasFeeMultiplierBpsSetEventFilter = TypedEventFilter<NativeGasFeeMultiplierBpsSetEvent>;
interface PriceFeedSetEventObject {
    priceFeed: string;
}
type PriceFeedSetEvent = TypedEvent<[string], PriceFeedSetEventObject>;
type PriceFeedSetEventFilter = TypedEventFilter<PriceFeedSetEvent>;
interface TokenWithdrawnEventObject {
    token: string;
    to: string;
    amount: BigNumber;
}
type TokenWithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TokenWithdrawnEventObject>;
type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>;
declare namespace IAxelarDVNAdapterFeeLib {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [number, BigNumber, BigNumber] & {
        dstEid: number;
        gas: BigNumber;
        floorMarginUSD: BigNumber;
    };
    type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        defaultMultiplierBps: number;
    };
}
interface IAxelarDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAxelarDVNAdapterFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalFee: BigNumber;
        }>;
        getFeeOnSend(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$2;
        DstConfigSet(params?: null): DstConfigSetEventFilter$2;
        "GasServiceSet(address)"(gasService?: null): GasServiceSetEventFilter;
        GasServiceSet(gasService?: null): GasServiceSetEventFilter;
        "NativeGasFeeMultiplierBpsSet(uint16)"(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter;
        NativeGasFeeMultiplierBpsSet(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter;
        "PriceFeedSet(address)"(priceFeed?: null): PriceFeedSetEventFilter;
        PriceFeedSet(priceFeed?: null): PriceFeedSetEventFilter;
        "TokenWithdrawn(address,address,uint256)"(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter;
        TokenWithdrawn(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter;
    };
    estimateGas: {
        getFee(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IAxelarDVNAdapterFeeLib.ParamStruct, _dstConfig: IAxelarDVNAdapter.DstConfigStruct, _payload: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, _sendLib: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ICCIPDVNAdapterInterface extends utils.Interface {
    functions: {};
    events: {
        "DstConfigSet(tuple[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
}
interface DstConfigSetEventObject$1 {
    params: ICCIPDVNAdapter$1.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$1 = TypedEvent<[
    ICCIPDVNAdapter$1.DstConfigParamStructOutput[]
], DstConfigSetEventObject$1>;
type DstConfigSetEventFilter$1 = TypedEventFilter<DstConfigSetEvent$1>;
declare namespace ICCIPDVNAdapter$1 {
    type DstConfigParamStruct = {
        eid: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        chainSelector: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        peer: PromiseOrValue<BytesLike>;
    };
    type DstConfigParamStructOutput = [
        number,
        number,
        BigNumber,
        BigNumber,
        string
    ] & {
        eid: number;
        multiplierBps: number;
        chainSelector: BigNumber;
        gas: BigNumber;
        peer: string;
    };
}
interface ICCIPDVNAdapter$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ICCIPDVNAdapterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$1;
        DstConfigSet(params?: null): DstConfigSetEventFilter$1;
    };
    estimateGas: {};
    populateTransaction: {};
}

declare namespace ICCIPDVNAdapter {
    type DstConfigStruct = {
        chainSelector: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        peer: PromiseOrValue<BytesLike>;
        gas: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [BigNumber, number, string, BigNumber] & {
        chainSelector: BigNumber;
        multiplierBps: number;
        peer: string;
        gas: BigNumber;
    };
}
declare namespace Client {
    type EVMTokenAmountStruct = {
        token: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
    };
    type EVMTokenAmountStructOutput = [string, BigNumber] & {
        token: string;
        amount: BigNumber;
    };
    type EVM2AnyMessageStruct = {
        receiver: PromiseOrValue<BytesLike>;
        data: PromiseOrValue<BytesLike>;
        tokenAmounts: Client.EVMTokenAmountStruct[];
        feeToken: PromiseOrValue<string>;
        extraArgs: PromiseOrValue<BytesLike>;
    };
    type EVM2AnyMessageStructOutput = [
        string,
        string,
        Client.EVMTokenAmountStructOutput[],
        string,
        string
    ] & {
        receiver: string;
        data: string;
        tokenAmounts: Client.EVMTokenAmountStructOutput[];
        feeToken: string;
        extraArgs: string;
    };
}
interface ICCIPDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((uint32,uint64,address,uint16),(uint64,uint16,bytes,uint256),(bytes,bytes,(address,uint256)[],address,bytes),bytes,address)": FunctionFragment;
        "getFeeOnSend((uint32,uint64,address,uint16),(uint64,uint16,bytes,uint256),(bytes,bytes,(address,uint256)[],address,bytes),bytes,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        ICCIPDVNAdapterFeeLib.ParamStruct,
        ICCIPDVNAdapter.DstConfigStruct,
        Client.EVM2AnyMessageStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        ICCIPDVNAdapterFeeLib.ParamStruct,
        ICCIPDVNAdapter.DstConfigStruct,
        Client.EVM2AnyMessageStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {
        "DstConfigSet(tuple[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
}
interface DstConfigSetEventObject {
    params: ICCIPDVNAdapterFeeLib.DstConfigParamStructOutput[];
}
type DstConfigSetEvent = TypedEvent<[
    ICCIPDVNAdapterFeeLib.DstConfigParamStructOutput[]
], DstConfigSetEventObject>;
type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>;
declare namespace ICCIPDVNAdapterFeeLib {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [number, BigNumber] & {
        dstEid: number;
        floorMarginUSD: BigNumber;
    };
    type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        defaultMultiplierBps: number;
    };
}
interface ICCIPDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ICCIPDVNAdapterFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalFee: BigNumber;
        }>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            ccipFee: BigNumber;
            totalFee: BigNumber;
        }>;
    };
    filters: {
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter;
        DstConfigSet(params?: null): DstConfigSetEventFilter;
    };
    estimateGas: {
        getFee(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: ICCIPDVNAdapterFeeLib.ParamStruct, _dstConfig: ICCIPDVNAdapter.DstConfigStruct, _message: Client.EVM2AnyMessageStruct, _options: PromiseOrValue<BytesLike>, _router: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$R_IAxelarDVNAdapterFeeLib = IAxelarDVNAdapterFeeLib;
type index$R_ICCIPDVNAdapterFeeLib = ICCIPDVNAdapterFeeLib;
declare namespace index$R {
  export { IAxelarDVNAdapter$1 as IAxelarDVNAdapter, type index$R_IAxelarDVNAdapterFeeLib as IAxelarDVNAdapterFeeLib, ICCIPDVNAdapter$1 as ICCIPDVNAdapter, type index$R_ICCIPDVNAdapterFeeLib as ICCIPDVNAdapterFeeLib };
}

declare namespace ILayerZeroDVN$1 {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface IDVNInterface extends utils.Interface {
    functions: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "getSupportedOptionTypes" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "setSupportedOptionTypes" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$1.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetDstConfig(tuple[])": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDstConfig"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface SetDefaultMultiplierBpsEventObject$2 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$2 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$2>;
type SetDefaultMultiplierBpsEventFilter$2 = TypedEventFilter<SetDefaultMultiplierBpsEvent$2>;
interface SetDstConfigEventObject {
    params: IDVN$1.DstConfigParamStructOutput[];
}
type SetDstConfigEvent = TypedEvent<[
    IDVN$1.DstConfigParamStructOutput[]
], SetDstConfigEventObject>;
type SetDstConfigEventFilter = TypedEventFilter<SetDstConfigEvent>;
interface SetPriceFeedEventObject$2 {
    priceFeed: string;
}
type SetPriceFeedEvent$2 = TypedEvent<[string], SetPriceFeedEventObject$2>;
type SetPriceFeedEventFilter$2 = TypedEventFilter<SetPriceFeedEvent$2>;
interface SetSupportedOptionTypesEventObject$2 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$2 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$2>;
type SetSupportedOptionTypesEventFilter$2 = TypedEventFilter<SetSupportedOptionTypesEvent$2>;
interface SetWorkerLibEventObject$2 {
    workerLib: string;
}
type SetWorkerLibEvent$2 = TypedEvent<[string], SetWorkerLibEventObject$2>;
type SetWorkerLibEventFilter$2 = TypedEventFilter<SetWorkerLibEvent$2>;
interface WithdrawEventObject$2 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$2>;
type WithdrawEventFilter$2 = TypedEventFilter<WithdrawEvent$2>;
declare namespace IDVN$1 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        number,
        BigNumber
    ] & {
        dstEid: number;
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface IDVN$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDVNInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_param: ILayerZeroDVN$1.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    assignJob(_param: ILayerZeroDVN$1.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber]>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        assignJob(_param: ILayerZeroDVN$1.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$2;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$2;
        "SetDstConfig(tuple[])"(params?: null): SetDstConfigEventFilter;
        SetDstConfig(params?: null): SetDstConfigEventFilter;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$2;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$2;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$2;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$2;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$2;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$2;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$2;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$2;
    };
    estimateGas: {
        assignJob(_param: ILayerZeroDVN$1.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_param: ILayerZeroDVN$1.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IDVN {
    type DstConfigStruct = {
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [BigNumber, number, BigNumber] & {
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface IDVNFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IDVNFeeLib.FeeParamsStruct,
        IDVN.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IDVNFeeLib.FeeParamsStruct,
        IDVN.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {};
}
declare namespace IDVNFeeLib {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        quorum: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        quorum: BigNumber;
        defaultMultiplierBps: number;
    };
}
interface IDVNFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDVNFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getFeeOnSend(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IDVNFeeLib.FeeParamsStruct, _dstConfig: IDVN.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroDVNInterface extends utils.Interface {
    functions: {
        "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN.AssignJobParamStruct, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    events: {};
}
declare namespace ILayerZeroDVN {
    type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        packetHeader: PromiseOrValue<BytesLike>;
        payloadHash: PromiseOrValue<BytesLike>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type AssignJobParamStructOutput = [
        number,
        string,
        string,
        BigNumber,
        string
    ] & {
        dstEid: number;
        packetHeader: string;
        payloadHash: string;
        confirmations: BigNumber;
        sender: string;
    };
}
interface ILayerZeroDVN extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroDVNInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_param: ILayerZeroDVN.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
    };
    assignJob(_param: ILayerZeroDVN.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        assignJob(_param: ILayerZeroDVN.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        assignJob(_param: ILayerZeroDVN.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_param: ILayerZeroDVN.AssignJobParamStruct, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IReceiveUlnE2Interface extends utils.Interface {
    functions: {
        "commitVerification(bytes,bytes32)": FunctionFragment;
        "verify(bytes,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "commitVerification" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "commitVerification", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "commitVerification", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {};
}
interface IReceiveUlnE2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IReceiveUlnE2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$Q_IDVNFeeLib = IDVNFeeLib;
type index$Q_ILayerZeroDVN = ILayerZeroDVN;
type index$Q_IReceiveUlnE2 = IReceiveUlnE2;
declare namespace index$Q {
  export { IDVN$1 as IDVN, type index$Q_IDVNFeeLib as IDVNFeeLib, type index$Q_ILayerZeroDVN as ILayerZeroDVN, type index$Q_IReceiveUlnE2 as IReceiveUlnE2, index$R as adapters };
}

interface DVNOptionsInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface DVNOptions extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DVNOptionsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

interface UlnOptionsInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface UlnOptions extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UlnOptionsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

type index$P_DVNOptions = DVNOptions;
type index$P_UlnOptions = UlnOptions;
declare namespace index$P {
  export type { index$P_DVNOptions as DVNOptions, index$P_UlnOptions as UlnOptions };
}

interface ILayerZeroReceiveLibraryInterface extends utils.Interface {
    functions: {
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getConfig" | "setConfig"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroReceiveLibrary extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroReceiveLibraryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type SetDefaultExecutorParamStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type SetDefaultExecutorParamStructOutput$1 = [number, string] & {
    eid: number;
    executor: string;
};
type OriginStructOutput$3 = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
interface ReceiveLibBaseE1Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "defaultExecutors(uint32)": FunctionFragment;
        "executors(address,uint32)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getExecutor(address,uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setDefaultExecutors((uint32,address)[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "defaultExecutors" | "executors" | "getConfig" | "getExecutor" | "owner" | "renounceOwnership" | "setAddressSize" | "setConfig" | "setDefaultExecutors" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultExecutors", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "executors", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getExecutor", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutors", values: [SetDefaultExecutorParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultExecutors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "AddressSizeSet(uint16,uint256)": EventFragment;
        "DefaultExecutorsSet(tuple[])": EventFragment;
        "ExecutorSet(address,uint32,address)": EventFragment;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketDelivered(tuple,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddressSizeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InvalidDst"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
}
interface AddressSizeSetEventObject$4 {
    eid: number;
    size: BigNumber;
}
type AddressSizeSetEvent$4 = TypedEvent<[
    number,
    BigNumber
], AddressSizeSetEventObject$4>;
type AddressSizeSetEventFilter$4 = TypedEventFilter<AddressSizeSetEvent$4>;
interface DefaultExecutorsSetEventObject$1 {
    params: SetDefaultExecutorParamStructOutput$1[];
}
type DefaultExecutorsSetEvent$1 = TypedEvent<[
    SetDefaultExecutorParamStructOutput$1[]
], DefaultExecutorsSetEventObject$1>;
type DefaultExecutorsSetEventFilter$1 = TypedEventFilter<DefaultExecutorsSetEvent$1>;
interface ExecutorSetEventObject$1 {
    oapp: string;
    eid: number;
    executor: string;
}
type ExecutorSetEvent$1 = TypedEvent<[
    string,
    number,
    string
], ExecutorSetEventObject$1>;
type ExecutorSetEventFilter$1 = TypedEventFilter<ExecutorSetEvent$1>;
interface InvalidDstEventObject$1 {
    srcChainId: number;
    srcAddress: string;
    dstAddress: string;
    nonce: BigNumber;
    payloadHash: string;
}
type InvalidDstEvent$1 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], InvalidDstEventObject$1>;
type InvalidDstEventFilter$1 = TypedEventFilter<InvalidDstEvent$1>;
interface OwnershipTransferredEventObject$i {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$i = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$i>;
type OwnershipTransferredEventFilter$i = TypedEventFilter<OwnershipTransferredEvent$i>;
interface PacketDeliveredEventObject$3 {
    origin: OriginStructOutput$3;
    receiver: string;
}
type PacketDeliveredEvent$3 = TypedEvent<[
    OriginStructOutput$3,
    string
], PacketDeliveredEventObject$3>;
type PacketDeliveredEventFilter$3 = TypedEventFilter<PacketDeliveredEvent$3>;
interface ReceiveLibBaseE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveLibBaseE1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            executor: string;
        }>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            executor: string;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutors(_params: SetDefaultExecutorParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddressSizeSet(uint16,uint256)"(eid?: null, size?: null): AddressSizeSetEventFilter$4;
        AddressSizeSet(eid?: null, size?: null): AddressSizeSetEventFilter$4;
        "DefaultExecutorsSet(tuple[])"(params?: null): DefaultExecutorsSetEventFilter$1;
        DefaultExecutorsSet(params?: null): DefaultExecutorsSetEventFilter$1;
        "ExecutorSet(address,uint32,address)"(oapp?: null, eid?: null, executor?: null): ExecutorSetEventFilter$1;
        ExecutorSet(oapp?: null, eid?: null, executor?: null): ExecutorSetEventFilter$1;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)"(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter$1;
        InvalidDst(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$i;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$i;
        "PacketDelivered(tuple,address)"(origin?: null, receiver?: null): PacketDeliveredEventFilter$3;
        PacketDelivered(origin?: null, receiver?: null): PacketDeliveredEventFilter$3;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$O_ILayerZeroReceiveLibrary = ILayerZeroReceiveLibrary;
type index$O_ReceiveLibBaseE1 = ReceiveLibBaseE1;
declare namespace index$O {
  export type { index$O_ILayerZeroReceiveLibrary as ILayerZeroReceiveLibrary, index$O_ReceiveLibBaseE1 as ReceiveLibBaseE1 };
}

type UlnConfigStruct$8 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$8 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
interface IReceiveUln301Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "assertHeader(bytes,uint32)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "verifiable((uint64,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "assertHeader" | "endpoint" | "getUlnConfig" | "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "assertHeader", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        UlnConfigStruct$8,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assertHeader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {};
}
interface IReceiveUln301 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IReceiveUln301Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$8] & {
            rtnConfig: UlnConfigStructOutput$8;
        }>;
        verifiable(_config: UlnConfigStruct$8, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    addressSizes(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$8>;
    verifiable(_config: UlnConfigStruct$8, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        addressSizes(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$8>;
        verifiable(_config: UlnConfigStruct$8, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        addressSizes(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        verifiable(_config: UlnConfigStruct$8, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifiable(_config: UlnConfigStruct$8, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ReceiveUln301ViewInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "executable(bytes,bytes32)": FunctionFragment;
        "initialize(address,uint32,address)": FunctionFragment;
        "receiveUln301()": FunctionFragment;
        "verifiable(bytes,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "executable" | "initialize" | "receiveUln301" | "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "receiveUln301", values?: undefined): string;
    encodeFunctionData(functionFragment: "verifiable", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveUln301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
interface InitializedEventObject$5 {
    version: number;
}
type InitializedEvent$5 = TypedEvent<[number], InitializedEventObject$5>;
type InitializedEventFilter$5 = TypedEventFilter<InitializedEvent$5>;
interface ReceiveUln301View extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveUln301ViewInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        executable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
        initialize(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        receiveUln301(overrides?: CallOverrides): Promise<[string]>;
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    executable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    initialize(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    receiveUln301(overrides?: CallOverrides): Promise<string>;
    verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        executable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
        initialize(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _receiveUln301: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        receiveUln301(overrides?: CallOverrides): Promise<string>;
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$5;
        Initialized(version?: null): InitializedEventFilter$5;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        executable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        receiveUln301(overrides?: CallOverrides): Promise<BigNumber>;
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _receiveUln301: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        receiveUln301(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifiable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$N_IReceiveUln301 = IReceiveUln301;
type index$N_ReceiveUln301View = ReceiveUln301View;
declare namespace index$N {
  export type { index$N_IReceiveUln301 as IReceiveUln301, index$N_ReceiveUln301View as ReceiveUln301View };
}

interface IMessageLibE1Interface extends utils.Interface {
    functions: {
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setLzToken(address)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "estimateFees" | "getConfig" | "send" | "setConfig" | "setLzToken" | "setTreasury" | "version" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {};
}
interface IMessageLibE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageLibE1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface INonceContractInterface extends utils.Interface {
    functions: {
        "increment(uint16,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "increment"): FunctionFragment;
    encodeFunctionData(functionFragment: "increment", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    events: {};
}
interface INonceContract extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: INonceContractInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ITreasuryFeeHandlerInterface extends utils.Interface {
    functions: {
        "payFee(address,address,uint256,uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "payFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "payFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    events: {};
}
interface ITreasuryFeeHandler extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ITreasuryFeeHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IUltraLightNode301Interface extends utils.Interface {
    functions: {
        "commitVerification(bytes,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "commitVerification"): FunctionFragment;
    encodeFunctionData(functionFragment: "commitVerification", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "commitVerification", data: BytesLike): Result;
    events: {};
}
interface IUltraLightNode301 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IUltraLightNode301Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$M_IMessageLibE1 = IMessageLibE1;
type index$M_INonceContract = INonceContract;
type index$M_ITreasuryFeeHandler = ITreasuryFeeHandler;
type index$M_IUltraLightNode301 = IUltraLightNode301;
declare namespace index$M {
  export type { index$M_IMessageLibE1 as IMessageLibE1, index$M_INonceContract as INonceContract, index$M_ITreasuryFeeHandler as ITreasuryFeeHandler, index$M_IUltraLightNode301 as IUltraLightNode301 };
}

interface NonceContractMockInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "increment(uint16,address,bytes)": FunctionFragment;
        "outboundNonce(uint16,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "increment" | "outboundNonce"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "increment", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    events: {};
}
interface NonceContractMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: NonceContractMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$L_NonceContractMock = NonceContractMock;
declare namespace index$L {
  export type { index$L_NonceContractMock as NonceContractMock };
}

interface AddressSizeConfigInterface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "owner" | "renounceOwnership" | "setAddressSize" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "AddressSizeSet(uint16,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddressSizeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface AddressSizeSetEventObject$3 {
    eid: number;
    size: BigNumber;
}
type AddressSizeSetEvent$3 = TypedEvent<[
    number,
    BigNumber
], AddressSizeSetEventObject$3>;
type AddressSizeSetEventFilter$3 = TypedEventFilter<AddressSizeSetEvent$3>;
interface OwnershipTransferredEventObject$h {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$h = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$h>;
type OwnershipTransferredEventFilter$h = TypedEventFilter<OwnershipTransferredEvent$h>;
interface AddressSizeConfig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AddressSizeConfigInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddressSizeSet(uint16,uint256)"(eid?: null, size?: null): AddressSizeSetEventFilter$3;
        AddressSizeSet(eid?: null, size?: null): AddressSizeSetEventFilter$3;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$h;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$h;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type SetDefaultExecutorParamStruct = {
    eid: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type SetDefaultExecutorParamStructOutput = [number, string] & {
    eid: number;
    executor: string;
};
type UlnConfigStruct$7 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$7 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$6 = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct$7;
};
type SetDefaultUlnConfigParamStructOutput$6 = [
    number,
    UlnConfigStructOutput$7
] & {
    eid: number;
    config: UlnConfigStructOutput$7;
};
type OriginStructOutput$2 = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
interface ReceiveUln301Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "assertHeader(bytes,uint32)": FunctionFragment;
        "commitVerification(bytes,uint256)": FunctionFragment;
        "defaultExecutors(uint32)": FunctionFragment;
        "executors(address,uint32)": FunctionFragment;
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getExecutor(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "hashLookup(bytes32,bytes32,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setDefaultExecutors((uint32,address)[])": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifiable((uint64,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
        "verify(bytes,bytes32,uint64)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "assertHeader" | "commitVerification" | "defaultExecutors" | "executors" | "getAppUlnConfig" | "getConfig" | "getExecutor" | "getUlnConfig" | "hashLookup" | "owner" | "renounceOwnership" | "setAddressSize" | "setConfig" | "setDefaultExecutors" | "setDefaultUlnConfigs" | "transferOwnership" | "verifiable" | "verify" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "assertHeader", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "commitVerification", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultExecutors", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "executors", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getExecutor", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutors", values: [SetDefaultExecutorParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$6[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        UlnConfigStruct$7,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assertHeader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "commitVerification", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultExecutors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "AddressSizeSet(uint16,uint256)": EventFragment;
        "DefaultExecutorsSet(tuple[])": EventFragment;
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "ExecutorSet(address,uint32,address)": EventFragment;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketDelivered(tuple,address)": EventFragment;
        "PayloadVerified(address,bytes,uint256,bytes32)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddressSizeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InvalidDst"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayloadVerified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface AddressSizeSetEventObject$2 {
    eid: number;
    size: BigNumber;
}
type AddressSizeSetEvent$2 = TypedEvent<[
    number,
    BigNumber
], AddressSizeSetEventObject$2>;
type AddressSizeSetEventFilter$2 = TypedEventFilter<AddressSizeSetEvent$2>;
interface DefaultExecutorsSetEventObject {
    params: SetDefaultExecutorParamStructOutput[];
}
type DefaultExecutorsSetEvent = TypedEvent<[
    SetDefaultExecutorParamStructOutput[]
], DefaultExecutorsSetEventObject>;
type DefaultExecutorsSetEventFilter = TypedEventFilter<DefaultExecutorsSetEvent>;
interface DefaultUlnConfigsSetEventObject$6 {
    params: SetDefaultUlnConfigParamStructOutput$6[];
}
type DefaultUlnConfigsSetEvent$6 = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput$6[]
], DefaultUlnConfigsSetEventObject$6>;
type DefaultUlnConfigsSetEventFilter$6 = TypedEventFilter<DefaultUlnConfigsSetEvent$6>;
interface ExecutorSetEventObject {
    oapp: string;
    eid: number;
    executor: string;
}
type ExecutorSetEvent = TypedEvent<[
    string,
    number,
    string
], ExecutorSetEventObject>;
type ExecutorSetEventFilter = TypedEventFilter<ExecutorSetEvent>;
interface InvalidDstEventObject {
    srcChainId: number;
    srcAddress: string;
    dstAddress: string;
    nonce: BigNumber;
    payloadHash: string;
}
type InvalidDstEvent = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], InvalidDstEventObject>;
type InvalidDstEventFilter = TypedEventFilter<InvalidDstEvent>;
interface OwnershipTransferredEventObject$g {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$g = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$g>;
type OwnershipTransferredEventFilter$g = TypedEventFilter<OwnershipTransferredEvent$g>;
interface PacketDeliveredEventObject$2 {
    origin: OriginStructOutput$2;
    receiver: string;
}
type PacketDeliveredEvent$2 = TypedEvent<[
    OriginStructOutput$2,
    string
], PacketDeliveredEventObject$2>;
type PacketDeliveredEventFilter$2 = TypedEventFilter<PacketDeliveredEvent$2>;
interface PayloadVerifiedEventObject$2 {
    dvn: string;
    header: string;
    confirmations: BigNumber;
    proofHash: string;
}
type PayloadVerifiedEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], PayloadVerifiedEventObject$2>;
type PayloadVerifiedEventFilter$2 = TypedEventFilter<PayloadVerifiedEvent$2>;
interface UlnConfigSetEventObject$6 {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput$7;
}
type UlnConfigSetEvent$6 = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput$7
], UlnConfigSetEventObject$6>;
type UlnConfigSetEventFilter$6 = TypedEventFilter<UlnConfigSetEvent$6>;
interface ReceiveUln301 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveUln301Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            executor: string;
        }>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            executor: string;
        }>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$7]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$7] & {
            rtnConfig: UlnConfigStructOutput$7;
        }>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            boolean,
            BigNumber
        ] & {
            submitted: boolean;
            confirmations: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_config: UlnConfigStruct$7, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$7>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$7>;
    hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        boolean,
        BigNumber
    ] & {
        submitted: boolean;
        confirmations: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutors(_params: SetDefaultExecutorParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$6[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_config: UlnConfigStruct$7, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$7>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$7>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            boolean,
            BigNumber
        ] & {
            submitted: boolean;
            confirmations: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$6[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_config: UlnConfigStruct$7, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    filters: {
        "AddressSizeSet(uint16,uint256)"(eid?: null, size?: null): AddressSizeSetEventFilter$2;
        AddressSizeSet(eid?: null, size?: null): AddressSizeSetEventFilter$2;
        "DefaultExecutorsSet(tuple[])"(params?: null): DefaultExecutorsSetEventFilter;
        DefaultExecutorsSet(params?: null): DefaultExecutorsSetEventFilter;
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter$6;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter$6;
        "ExecutorSet(address,uint32,address)"(oapp?: null, eid?: null, executor?: null): ExecutorSetEventFilter;
        ExecutorSet(oapp?: null, eid?: null, executor?: null): ExecutorSetEventFilter;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)"(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter;
        InvalidDst(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$g;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$g;
        "PacketDelivered(tuple,address)"(origin?: null, receiver?: null): PacketDeliveredEventFilter$2;
        PacketDelivered(origin?: null, receiver?: null): PacketDeliveredEventFilter$2;
        "PayloadVerified(address,bytes,uint256,bytes32)"(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter$2;
        PayloadVerified(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter$2;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$6;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$6;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_config: UlnConfigStruct$7, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        commitVerification(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultExecutors(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executors(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutor(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutors(_params: SetDefaultExecutorParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_config: UlnConfigStruct$7, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ExecutorConfigStruct$4 = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type ExecutorConfigStructOutput$4 = [number, string] & {
    maxMessageSize: number;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct$4 = {
    eid: PromiseOrValue<BigNumberish>;
    config: ExecutorConfigStruct$4;
};
type SetDefaultExecutorConfigParamStructOutput$4 = [
    number,
    ExecutorConfigStructOutput$4
] & {
    eid: number;
    config: ExecutorConfigStructOutput$4;
};
interface SendLibBaseE1Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "executorConfigs(address,uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getExecutorConfig(address,uint32)": FunctionFragment;
        "nonceContract()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setDefaultExecutorConfigs((uint32,(uint32,address))[])": FunctionFragment;
        "setLzToken(address)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "setTreasuryNativeFeeCap(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "treasuryFeeHandler()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "estimateFees" | "executorConfigs" | "fees" | "getConfig" | "getExecutorConfig" | "nonceContract" | "owner" | "renounceOwnership" | "send" | "setAddressSize" | "setConfig" | "setDefaultExecutorConfigs" | "setLzToken" | "setTreasury" | "setTreasuryNativeFeeCap" | "transferOwnership" | "treasury" | "treasuryFeeHandler" | "version" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "executorConfigs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "nonceContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct$4[]]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasuryNativeFeeCap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "treasuryFeeHandler", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonceContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryNativeFeeCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasuryFeeHandler", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "AddressSizeSet(uint16,uint256)": EventFragment;
        "DefaultExecutorConfigsSet(tuple[])": EventFragment;
        "ExecutorConfigSet(address,uint32,tuple)": EventFragment;
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "LzTokenSet(address)": EventFragment;
        "NativeFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketSent(bytes,bytes,uint256,uint256)": EventFragment;
        "TreasuryNativeFeeCapSet(uint256)": EventFragment;
        "TreasurySet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddressSizeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryNativeFeeCapSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
}
interface AddressSizeSetEventObject$1 {
    eid: number;
    size: BigNumber;
}
type AddressSizeSetEvent$1 = TypedEvent<[
    number,
    BigNumber
], AddressSizeSetEventObject$1>;
type AddressSizeSetEventFilter$1 = TypedEventFilter<AddressSizeSetEvent$1>;
interface DefaultExecutorConfigsSetEventObject$4 {
    params: SetDefaultExecutorConfigParamStructOutput$4[];
}
type DefaultExecutorConfigsSetEvent$4 = TypedEvent<[
    SetDefaultExecutorConfigParamStructOutput$4[]
], DefaultExecutorConfigsSetEventObject$4>;
type DefaultExecutorConfigsSetEventFilter$4 = TypedEventFilter<DefaultExecutorConfigsSetEvent$4>;
interface ExecutorConfigSetEventObject$4 {
    oapp: string;
    eid: number;
    config: ExecutorConfigStructOutput$4;
}
type ExecutorConfigSetEvent$4 = TypedEvent<[
    string,
    number,
    ExecutorConfigStructOutput$4
], ExecutorConfigSetEventObject$4>;
type ExecutorConfigSetEventFilter$4 = TypedEventFilter<ExecutorConfigSetEvent$4>;
interface ExecutorFeePaidEventObject$4 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$4 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$4>;
type ExecutorFeePaidEventFilter$4 = TypedEventFilter<ExecutorFeePaidEvent$4>;
interface LzTokenSetEventObject$3 {
    token: string;
}
type LzTokenSetEvent$3 = TypedEvent<[string], LzTokenSetEventObject$3>;
type LzTokenSetEventFilter$3 = TypedEventFilter<LzTokenSetEvent$3>;
interface NativeFeeWithdrawnEventObject$3 {
    user: string;
    receiver: string;
    amount: BigNumber;
}
type NativeFeeWithdrawnEvent$3 = TypedEvent<[
    string,
    string,
    BigNumber
], NativeFeeWithdrawnEventObject$3>;
type NativeFeeWithdrawnEventFilter$3 = TypedEventFilter<NativeFeeWithdrawnEvent$3>;
interface OwnershipTransferredEventObject$f {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$f = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$f>;
type OwnershipTransferredEventFilter$f = TypedEventFilter<OwnershipTransferredEvent$f>;
interface PacketSentEventObject$3 {
    encodedPayload: string;
    options: string;
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
}
type PacketSentEvent$3 = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], PacketSentEventObject$3>;
type PacketSentEventFilter$3 = TypedEventFilter<PacketSentEvent$3>;
interface TreasuryNativeFeeCapSetEventObject$4 {
    newTreasuryNativeFeeCap: BigNumber;
}
type TreasuryNativeFeeCapSetEvent$4 = TypedEvent<[
    BigNumber
], TreasuryNativeFeeCapSetEventObject$4>;
type TreasuryNativeFeeCapSetEventFilter$4 = TypedEventFilter<TreasuryNativeFeeCapSetEvent$4>;
interface TreasurySetEventObject$4 {
    treasury: string;
}
type TreasurySetEvent$4 = TypedEvent<[string], TreasurySetEventObject$4>;
type TreasurySetEventFilter$4 = TypedEventFilter<TreasurySetEvent$4>;
interface SendLibBaseE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SendLibBaseE1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ExecutorConfigStructOutput$4
        ] & {
            rtnConfig: ExecutorConfigStructOutput$4;
        }>;
        nonceContract(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<[string]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
        maxMessageSize: number;
        executor: string;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$4>;
    nonceContract(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$4[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    treasuryFeeHandler(overrides?: CallOverrides): Promise<string>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$4>;
        nonceContract(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$4[], overrides?: CallOverrides): Promise<void>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddressSizeSet(uint16,uint256)"(eid?: null, size?: null): AddressSizeSetEventFilter$1;
        AddressSizeSet(eid?: null, size?: null): AddressSizeSetEventFilter$1;
        "DefaultExecutorConfigsSet(tuple[])"(params?: null): DefaultExecutorConfigsSetEventFilter$4;
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter$4;
        "ExecutorConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$4;
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$4;
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$4;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$4;
        "LzTokenSet(address)"(token?: null): LzTokenSetEventFilter$3;
        LzTokenSet(token?: null): LzTokenSetEventFilter$3;
        "NativeFeeWithdrawn(address,address,uint256)"(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$3;
        NativeFeeWithdrawn(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$3;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$f;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$f;
        "PacketSent(bytes,bytes,uint256,uint256)"(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$3;
        PacketSent(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$3;
        "TreasuryNativeFeeCapSet(uint256)"(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$4;
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$4;
        "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter$4;
        TreasurySet(treasury?: null): TreasurySetEventFilter$4;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nonceContract(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nonceContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type ExecutorConfigStruct$3 = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type ExecutorConfigStructOutput$3 = [number, string] & {
    maxMessageSize: number;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct$3 = {
    eid: PromiseOrValue<BigNumberish>;
    config: ExecutorConfigStruct$3;
};
type SetDefaultExecutorConfigParamStructOutput$3 = [
    number,
    ExecutorConfigStructOutput$3
] & {
    eid: number;
    config: ExecutorConfigStructOutput$3;
};
type UlnConfigStruct$6 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$6 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$5 = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct$6;
};
type SetDefaultUlnConfigParamStructOutput$5 = [
    number,
    UlnConfigStructOutput$6
] & {
    eid: number;
    config: UlnConfigStructOutput$6;
};
interface SendUln301Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "executorConfigs(address,uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getExecutorConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "nonceContract()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setDefaultExecutorConfigs((uint32,(uint32,address))[])": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "setLzToken(address)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "setTreasuryNativeFeeCap(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "treasuryFeeHandler()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "estimateFees" | "executorConfigs" | "fees" | "getAppUlnConfig" | "getConfig" | "getExecutorConfig" | "getUlnConfig" | "isSupportedEid" | "nonceContract" | "owner" | "renounceOwnership" | "send" | "setAddressSize" | "setConfig" | "setDefaultExecutorConfigs" | "setDefaultUlnConfigs" | "setLzToken" | "setTreasury" | "setTreasuryNativeFeeCap" | "transferOwnership" | "treasury" | "treasuryFeeHandler" | "version" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "executorConfigs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "nonceContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$5[]]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasuryNativeFeeCap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "treasuryFeeHandler", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonceContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryNativeFeeCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasuryFeeHandler", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "AddressSizeSet(uint16,uint256)": EventFragment;
        "DVNFeePaid(address[],address[],uint256[])": EventFragment;
        "DefaultExecutorConfigsSet(tuple[])": EventFragment;
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "ExecutorConfigSet(address,uint32,tuple)": EventFragment;
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "LzTokenSet(address)": EventFragment;
        "NativeFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketSent(bytes,bytes,uint256,uint256)": EventFragment;
        "TreasuryNativeFeeCapSet(uint256)": EventFragment;
        "TreasurySet(address)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddressSizeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DVNFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryNativeFeeCapSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface AddressSizeSetEventObject {
    eid: number;
    size: BigNumber;
}
type AddressSizeSetEvent = TypedEvent<[
    number,
    BigNumber
], AddressSizeSetEventObject>;
type AddressSizeSetEventFilter = TypedEventFilter<AddressSizeSetEvent>;
interface DVNFeePaidEventObject$2 {
    requiredDVNs: string[];
    optionalDVNs: string[];
    fees: BigNumber[];
}
type DVNFeePaidEvent$2 = TypedEvent<[
    string[],
    string[],
    BigNumber[]
], DVNFeePaidEventObject$2>;
type DVNFeePaidEventFilter$2 = TypedEventFilter<DVNFeePaidEvent$2>;
interface DefaultExecutorConfigsSetEventObject$3 {
    params: SetDefaultExecutorConfigParamStructOutput$3[];
}
type DefaultExecutorConfigsSetEvent$3 = TypedEvent<[
    SetDefaultExecutorConfigParamStructOutput$3[]
], DefaultExecutorConfigsSetEventObject$3>;
type DefaultExecutorConfigsSetEventFilter$3 = TypedEventFilter<DefaultExecutorConfigsSetEvent$3>;
interface DefaultUlnConfigsSetEventObject$5 {
    params: SetDefaultUlnConfigParamStructOutput$5[];
}
type DefaultUlnConfigsSetEvent$5 = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput$5[]
], DefaultUlnConfigsSetEventObject$5>;
type DefaultUlnConfigsSetEventFilter$5 = TypedEventFilter<DefaultUlnConfigsSetEvent$5>;
interface ExecutorConfigSetEventObject$3 {
    oapp: string;
    eid: number;
    config: ExecutorConfigStructOutput$3;
}
type ExecutorConfigSetEvent$3 = TypedEvent<[
    string,
    number,
    ExecutorConfigStructOutput$3
], ExecutorConfigSetEventObject$3>;
type ExecutorConfigSetEventFilter$3 = TypedEventFilter<ExecutorConfigSetEvent$3>;
interface ExecutorFeePaidEventObject$3 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$3 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$3>;
type ExecutorFeePaidEventFilter$3 = TypedEventFilter<ExecutorFeePaidEvent$3>;
interface LzTokenSetEventObject$2 {
    token: string;
}
type LzTokenSetEvent$2 = TypedEvent<[string], LzTokenSetEventObject$2>;
type LzTokenSetEventFilter$2 = TypedEventFilter<LzTokenSetEvent$2>;
interface NativeFeeWithdrawnEventObject$2 {
    user: string;
    receiver: string;
    amount: BigNumber;
}
type NativeFeeWithdrawnEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber
], NativeFeeWithdrawnEventObject$2>;
type NativeFeeWithdrawnEventFilter$2 = TypedEventFilter<NativeFeeWithdrawnEvent$2>;
interface OwnershipTransferredEventObject$e {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$e = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$e>;
type OwnershipTransferredEventFilter$e = TypedEventFilter<OwnershipTransferredEvent$e>;
interface PacketSentEventObject$2 {
    encodedPayload: string;
    options: string;
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
}
type PacketSentEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], PacketSentEventObject$2>;
type PacketSentEventFilter$2 = TypedEventFilter<PacketSentEvent$2>;
interface TreasuryNativeFeeCapSetEventObject$3 {
    newTreasuryNativeFeeCap: BigNumber;
}
type TreasuryNativeFeeCapSetEvent$3 = TypedEvent<[
    BigNumber
], TreasuryNativeFeeCapSetEventObject$3>;
type TreasuryNativeFeeCapSetEventFilter$3 = TypedEventFilter<TreasuryNativeFeeCapSetEvent$3>;
interface TreasurySetEventObject$3 {
    treasury: string;
}
type TreasurySetEvent$3 = TypedEvent<[string], TreasurySetEventObject$3>;
type TreasurySetEventFilter$3 = TypedEventFilter<TreasurySetEvent$3>;
interface UlnConfigSetEventObject$5 {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput$6;
}
type UlnConfigSetEvent$5 = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput$6
], UlnConfigSetEventObject$5>;
type UlnConfigSetEventFilter$5 = TypedEventFilter<UlnConfigSetEvent$5>;
interface SendUln301 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SendUln301Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$6]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ExecutorConfigStructOutput$3
        ] & {
            rtnConfig: ExecutorConfigStructOutput$3;
        }>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$6] & {
            rtnConfig: UlnConfigStructOutput$6;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        nonceContract(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<[string]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
        maxMessageSize: number;
        executor: string;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$6>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$3>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$6>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    nonceContract(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$3[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$5[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    treasuryFeeHandler(overrides?: CallOverrides): Promise<string>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$6>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$3>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$6>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        nonceContract(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$3[], overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$5[], overrides?: CallOverrides): Promise<void>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddressSizeSet(uint16,uint256)"(eid?: null, size?: null): AddressSizeSetEventFilter;
        AddressSizeSet(eid?: null, size?: null): AddressSizeSetEventFilter;
        "DVNFeePaid(address[],address[],uint256[])"(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter$2;
        DVNFeePaid(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter$2;
        "DefaultExecutorConfigsSet(tuple[])"(params?: null): DefaultExecutorConfigsSetEventFilter$3;
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter$3;
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter$5;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter$5;
        "ExecutorConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$3;
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$3;
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$3;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$3;
        "LzTokenSet(address)"(token?: null): LzTokenSetEventFilter$2;
        LzTokenSet(token?: null): LzTokenSetEventFilter$2;
        "NativeFeeWithdrawn(address,address,uint256)"(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$2;
        NativeFeeWithdrawn(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$2;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$e;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$e;
        "PacketSent(bytes,bytes,uint256,uint256)"(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$2;
        PacketSent(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$2;
        "TreasuryNativeFeeCapSet(uint256)"(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$3;
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$3;
        "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter$3;
        TreasurySet(treasury?: null): TreasurySetEventFilter$3;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$5;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$5;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nonceContract(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nonceContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        treasuryFeeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface TreasuryFeeHandlerInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "payFee(address,address,uint256,uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "payFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "payFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    events: {};
}
interface TreasuryFeeHandler extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TreasuryFeeHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$K_AddressSizeConfig = AddressSizeConfig;
type index$K_ReceiveUln301 = ReceiveUln301;
type index$K_SendLibBaseE1 = SendLibBaseE1;
type index$K_SendUln301 = SendUln301;
type index$K_TreasuryFeeHandler = TreasuryFeeHandler;
declare namespace index$K {
  export { type index$K_AddressSizeConfig as AddressSizeConfig, type index$K_ReceiveUln301 as ReceiveUln301, type index$K_SendLibBaseE1 as SendLibBaseE1, type index$K_SendUln301 as SendUln301, type index$K_TreasuryFeeHandler as TreasuryFeeHandler, index$M as interfaces, index$L as mocks, index$O as receiveLibBaseE1Sol, index$N as receiveUln301ViewSol };
}

type UlnConfigStruct$5 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$5 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
interface IReceiveUln302Interface extends utils.Interface {
    functions: {
        "assertHeader(bytes,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "verifiable((uint64,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assertHeader" | "getUlnConfig" | "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "assertHeader", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        UlnConfigStruct$5,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "assertHeader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {};
}
interface IReceiveUln302 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IReceiveUln302Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$5] & {
            rtnConfig: UlnConfigStructOutput$5;
        }>;
        verifiable(_config: UlnConfigStruct$5, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$5>;
    verifiable(_config: UlnConfigStruct$5, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$5>;
        verifiable(_config: UlnConfigStruct$5, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        verifiable(_config: UlnConfigStruct$5, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifiable(_config: UlnConfigStruct$5, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$4 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface ReceiveUln302ViewInterface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "executable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initialize(address,address)": FunctionFragment;
        "receiveUln302()": FunctionFragment;
        "verifiable(bytes,bytes32)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "endpoint" | "executable" | "initializable" | "initialize" | "receiveUln302" | "verifiable(bytes,bytes32)" | "verifiable((uint32,bytes32,uint64),address,address,bytes32)"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [OriginStruct$4, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct$4, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "receiveUln302", values?: undefined): string;
    encodeFunctionData(functionFragment: "verifiable(bytes,bytes32)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verifiable((uint32,bytes32,uint64),address,address,bytes32)", values: [
        OriginStruct$4,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveUln302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable(bytes,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable((uint32,bytes32,uint64),address,address,bytes32)", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
interface InitializedEventObject$4 {
    version: number;
}
type InitializedEvent$4 = TypedEvent<[number], InitializedEventObject$4>;
type InitializedEventFilter$4 = TypedEventFilter<InitializedEvent$4>;
interface ReceiveUln302View extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveUln302ViewInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        executable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        initializable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln302: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        receiveUln302(overrides?: CallOverrides): Promise<[string]>;
        "verifiable(bytes,bytes32)"(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)"(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    executable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    initializable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_endpoint: PromiseOrValue<string>, _receiveUln302: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    receiveUln302(overrides?: CallOverrides): Promise<string>;
    "verifiable(bytes,bytes32)"(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    "verifiable((uint32,bytes32,uint64),address,address,bytes32)"(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        executable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        initializable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln302: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        receiveUln302(overrides?: CallOverrides): Promise<string>;
        "verifiable(bytes,bytes32)"(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)"(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$4;
        Initialized(version?: null): InitializedEventFilter$4;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        executable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln302: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        receiveUln302(overrides?: CallOverrides): Promise<BigNumber>;
        "verifiable(bytes,bytes32)"(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)"(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_endpoint: PromiseOrValue<string>, _receiveUln302: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        receiveUln302(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "verifiable(bytes,bytes32)"(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)"(_origin: OriginStruct$4, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$J_IReceiveUln302 = IReceiveUln302;
type index$J_ReceiveUln302View = ReceiveUln302View;
declare namespace index$J {
  export type { index$J_IReceiveUln302 as IReceiveUln302, index$J_ReceiveUln302View as ReceiveUln302View };
}

type UlnConfigStruct$4 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$4 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$4 = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct$4;
};
type SetDefaultUlnConfigParamStructOutput$4 = [
    number,
    UlnConfigStructOutput$4
] & {
    eid: number;
    config: UlnConfigStructOutput$4;
};
type SetConfigParamStruct$6 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface ReceiveUln302Interface extends utils.Interface {
    functions: {
        "assertHeader(bytes,uint32)": FunctionFragment;
        "commitVerification(bytes,bytes32)": FunctionFragment;
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "hashLookup(bytes32,bytes32,address)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setConfig(address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifiable((uint64,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
        "verify(bytes,bytes32,uint64)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assertHeader" | "commitVerification" | "getAppUlnConfig" | "getConfig" | "getUlnConfig" | "hashLookup" | "isSupportedEid" | "messageLibType" | "owner" | "renounceOwnership" | "setConfig" | "setDefaultUlnConfigs" | "supportsInterface" | "transferOwnership" | "verifiable" | "verify" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "assertHeader", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "commitVerification", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [PromiseOrValue<string>, SetConfigParamStruct$6[]]): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$4[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        UlnConfigStruct$4,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "assertHeader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "commitVerification", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PayloadVerified(address,bytes,uint256,bytes32)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayloadVerified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface DefaultUlnConfigsSetEventObject$4 {
    params: SetDefaultUlnConfigParamStructOutput$4[];
}
type DefaultUlnConfigsSetEvent$4 = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput$4[]
], DefaultUlnConfigsSetEventObject$4>;
type DefaultUlnConfigsSetEventFilter$4 = TypedEventFilter<DefaultUlnConfigsSetEvent$4>;
interface OwnershipTransferredEventObject$d {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$d = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$d>;
type OwnershipTransferredEventFilter$d = TypedEventFilter<OwnershipTransferredEvent$d>;
interface PayloadVerifiedEventObject$1 {
    dvn: string;
    header: string;
    confirmations: BigNumber;
    proofHash: string;
}
type PayloadVerifiedEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], PayloadVerifiedEventObject$1>;
type PayloadVerifiedEventFilter$1 = TypedEventFilter<PayloadVerifiedEvent$1>;
interface UlnConfigSetEventObject$4 {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput$4;
}
type UlnConfigSetEvent$4 = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput$4
], UlnConfigSetEventObject$4>;
type UlnConfigSetEventFilter$4 = TypedEventFilter<UlnConfigSetEvent$4>;
interface ReceiveUln302 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveUln302Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$4]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$4] & {
            rtnConfig: UlnConfigStructOutput$4;
        }>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            boolean,
            BigNumber
        ] & {
            submitted: boolean;
            confirmations: BigNumber;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_config: UlnConfigStruct$4, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$4>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$4>;
    hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        boolean,
        BigNumber
    ] & {
        submitted: boolean;
        confirmations: BigNumber;
    }>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$6[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$4[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_config: UlnConfigStruct$4, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    callStatic: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$4>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$4>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            boolean,
            BigNumber
        ] & {
            submitted: boolean;
            confirmations: BigNumber;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$6[], overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$4[], overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_config: UlnConfigStruct$4, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    filters: {
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter$4;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter$4;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$d;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$d;
        "PayloadVerified(address,bytes,uint256,bytes32)"(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter$1;
        PayloadVerified(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter$1;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$4;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$4;
    };
    estimateGas: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_config: UlnConfigStruct$4, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        commitVerification(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$6[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_config: UlnConfigStruct$4, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ExecutorConfigStruct$2 = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type ExecutorConfigStructOutput$2 = [number, string] & {
    maxMessageSize: number;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct$2 = {
    eid: PromiseOrValue<BigNumberish>;
    config: ExecutorConfigStruct$2;
};
type SetDefaultExecutorConfigParamStructOutput$2 = [
    number,
    ExecutorConfigStructOutput$2
] & {
    eid: number;
    config: ExecutorConfigStructOutput$2;
};
type UlnConfigStruct$3 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$3 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$3 = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct$3;
};
type SetDefaultUlnConfigParamStructOutput$3 = [
    number,
    UlnConfigStructOutput$3
] & {
    eid: number;
    config: UlnConfigStructOutput$3;
};
type PacketStruct$1 = {
    nonce: PromiseOrValue<BigNumberish>;
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    guid: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
};
type MessagingFeeStructOutput$3 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type SetConfigParamStruct$5 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface SendUln302Interface extends utils.Interface {
    functions: {
        "executorConfigs(address,uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "getExecutorConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setConfig(address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultExecutorConfigs((uint32,(uint32,address))[])": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "setTreasuryNativeFeeCap(uint256)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "executorConfigs" | "fees" | "getAppUlnConfig" | "getConfig" | "getExecutorConfig" | "getUlnConfig" | "isSupportedEid" | "messageLibType" | "owner" | "quote" | "renounceOwnership" | "send" | "setConfig" | "setDefaultExecutorConfigs" | "setDefaultUlnConfigs" | "setTreasury" | "setTreasuryNativeFeeCap" | "supportsInterface" | "transferOwnership" | "treasury" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "executorConfigs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct$1, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct$1, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [PromiseOrValue<string>, SetConfigParamStruct$5[]]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasuryNativeFeeCap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryNativeFeeCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {
        "DVNFeePaid(address[],address[],uint256[])": EventFragment;
        "DefaultExecutorConfigsSet(tuple[])": EventFragment;
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "ExecutorConfigSet(address,uint32,tuple)": EventFragment;
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "LzTokenFeeWithdrawn(address,address,uint256)": EventFragment;
        "NativeFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "TreasuryNativeFeeCapSet(uint256)": EventFragment;
        "TreasurySet(address)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DVNFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryNativeFeeCapSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface DVNFeePaidEventObject$1 {
    requiredDVNs: string[];
    optionalDVNs: string[];
    fees: BigNumber[];
}
type DVNFeePaidEvent$1 = TypedEvent<[
    string[],
    string[],
    BigNumber[]
], DVNFeePaidEventObject$1>;
type DVNFeePaidEventFilter$1 = TypedEventFilter<DVNFeePaidEvent$1>;
interface DefaultExecutorConfigsSetEventObject$2 {
    params: SetDefaultExecutorConfigParamStructOutput$2[];
}
type DefaultExecutorConfigsSetEvent$2 = TypedEvent<[
    SetDefaultExecutorConfigParamStructOutput$2[]
], DefaultExecutorConfigsSetEventObject$2>;
type DefaultExecutorConfigsSetEventFilter$2 = TypedEventFilter<DefaultExecutorConfigsSetEvent$2>;
interface DefaultUlnConfigsSetEventObject$3 {
    params: SetDefaultUlnConfigParamStructOutput$3[];
}
type DefaultUlnConfigsSetEvent$3 = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput$3[]
], DefaultUlnConfigsSetEventObject$3>;
type DefaultUlnConfigsSetEventFilter$3 = TypedEventFilter<DefaultUlnConfigsSetEvent$3>;
interface ExecutorConfigSetEventObject$2 {
    oapp: string;
    eid: number;
    config: ExecutorConfigStructOutput$2;
}
type ExecutorConfigSetEvent$2 = TypedEvent<[
    string,
    number,
    ExecutorConfigStructOutput$2
], ExecutorConfigSetEventObject$2>;
type ExecutorConfigSetEventFilter$2 = TypedEventFilter<ExecutorConfigSetEvent$2>;
interface ExecutorFeePaidEventObject$2 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$2 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$2>;
type ExecutorFeePaidEventFilter$2 = TypedEventFilter<ExecutorFeePaidEvent$2>;
interface LzTokenFeeWithdrawnEventObject$1 {
    lzToken: string;
    receiver: string;
    amount: BigNumber;
}
type LzTokenFeeWithdrawnEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], LzTokenFeeWithdrawnEventObject$1>;
type LzTokenFeeWithdrawnEventFilter$1 = TypedEventFilter<LzTokenFeeWithdrawnEvent$1>;
interface NativeFeeWithdrawnEventObject$1 {
    worker: string;
    receiver: string;
    amount: BigNumber;
}
type NativeFeeWithdrawnEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], NativeFeeWithdrawnEventObject$1>;
type NativeFeeWithdrawnEventFilter$1 = TypedEventFilter<NativeFeeWithdrawnEvent$1>;
interface OwnershipTransferredEventObject$c {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$c = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$c>;
type OwnershipTransferredEventFilter$c = TypedEventFilter<OwnershipTransferredEvent$c>;
interface TreasuryNativeFeeCapSetEventObject$2 {
    newTreasuryNativeFeeCap: BigNumber;
}
type TreasuryNativeFeeCapSetEvent$2 = TypedEvent<[
    BigNumber
], TreasuryNativeFeeCapSetEventObject$2>;
type TreasuryNativeFeeCapSetEventFilter$2 = TypedEventFilter<TreasuryNativeFeeCapSetEvent$2>;
interface TreasurySetEventObject$2 {
    treasury: string;
}
type TreasurySetEvent$2 = TypedEvent<[string], TreasurySetEventObject$2>;
type TreasurySetEventFilter$2 = TypedEventFilter<TreasurySetEvent$2>;
interface UlnConfigSetEventObject$3 {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput$3;
}
type UlnConfigSetEvent$3 = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput$3
], UlnConfigSetEventObject$3>;
type UlnConfigSetEventFilter$3 = TypedEventFilter<UlnConfigSetEvent$3>;
interface SendUln302 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SendUln302Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$3]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ExecutorConfigStructOutput$2
        ] & {
            rtnConfig: ExecutorConfigStructOutput$2;
        }>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$3] & {
            rtnConfig: UlnConfigStructOutput$3;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$3]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
        maxMessageSize: number;
        executor: string;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$3>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$2>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$3>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$3>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$5[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$2[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$3[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$3>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$2>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$3>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$3>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$3, string]>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$5[], overrides?: CallOverrides): Promise<void>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$2[], overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$3[], overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DVNFeePaid(address[],address[],uint256[])"(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter$1;
        DVNFeePaid(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter$1;
        "DefaultExecutorConfigsSet(tuple[])"(params?: null): DefaultExecutorConfigsSetEventFilter$2;
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter$2;
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter$3;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter$3;
        "ExecutorConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$2;
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$2;
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$2;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$2;
        "LzTokenFeeWithdrawn(address,address,uint256)"(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter$1;
        LzTokenFeeWithdrawn(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter$1;
        "NativeFeeWithdrawn(address,address,uint256)"(worker?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$1;
        NativeFeeWithdrawn(worker?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$c;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$c;
        "TreasuryNativeFeeCapSet(uint256)"(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$2;
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$2;
        "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter$2;
        TreasurySet(treasury?: null): TreasurySetEventFilter$2;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$3;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$3;
    };
    estimateGas: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: PacketStruct$1, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _params: SetConfigParamStruct$5[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$I_ReceiveUln302 = ReceiveUln302;
type index$I_SendUln302 = SendUln302;
declare namespace index$I {
  export { type index$I_ReceiveUln302 as ReceiveUln302, type index$I_SendUln302 as SendUln302, index$J as receiveUln302ViewSol };
}

type UlnConfigStruct$2 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$2 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$2 = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct$2;
};
type SetDefaultUlnConfigParamStructOutput$2 = [
    number,
    UlnConfigStructOutput$2
] & {
    eid: number;
    config: UlnConfigStructOutput$2;
};
interface ReceiveUlnBaseInterface extends utils.Interface {
    functions: {
        "assertHeader(bytes,uint32)": FunctionFragment;
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "hashLookup(bytes32,bytes32,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifiable((uint64,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assertHeader" | "getAppUlnConfig" | "getUlnConfig" | "hashLookup" | "owner" | "renounceOwnership" | "setDefaultUlnConfigs" | "transferOwnership" | "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "assertHeader", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        UlnConfigStruct$2,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "assertHeader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PayloadVerified(address,bytes,uint256,bytes32)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayloadVerified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface DefaultUlnConfigsSetEventObject$2 {
    params: SetDefaultUlnConfigParamStructOutput$2[];
}
type DefaultUlnConfigsSetEvent$2 = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput$2[]
], DefaultUlnConfigsSetEventObject$2>;
type DefaultUlnConfigsSetEventFilter$2 = TypedEventFilter<DefaultUlnConfigsSetEvent$2>;
interface OwnershipTransferredEventObject$b {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$b = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$b>;
type OwnershipTransferredEventFilter$b = TypedEventFilter<OwnershipTransferredEvent$b>;
interface PayloadVerifiedEventObject {
    dvn: string;
    header: string;
    confirmations: BigNumber;
    proofHash: string;
}
type PayloadVerifiedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], PayloadVerifiedEventObject>;
type PayloadVerifiedEventFilter = TypedEventFilter<PayloadVerifiedEvent>;
interface UlnConfigSetEventObject$2 {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput$2;
}
type UlnConfigSetEvent$2 = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput$2
], UlnConfigSetEventObject$2>;
type UlnConfigSetEventFilter$2 = TypedEventFilter<UlnConfigSetEvent$2>;
interface ReceiveUlnBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveUlnBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$2]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$2] & {
            rtnConfig: UlnConfigStructOutput$2;
        }>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            boolean,
            BigNumber
        ] & {
            submitted: boolean;
            confirmations: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_config: UlnConfigStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$2>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$2>;
    hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        boolean,
        BigNumber
    ] & {
        submitted: boolean;
        confirmations: BigNumber;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$2[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_config: UlnConfigStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$2>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$2>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            boolean,
            BigNumber
        ] & {
            submitted: boolean;
            confirmations: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$2[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_config: UlnConfigStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter$2;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter$2;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$b;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$b;
        "PayloadVerified(address,bytes,uint256,bytes32)"(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter;
        PayloadVerified(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$2;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$2;
    };
    estimateGas: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_config: UlnConfigStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assertHeader(_packetHeader: PromiseOrValue<BytesLike>, _localEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, dvn: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_config: UlnConfigStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type UlnConfigStruct$1 = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput$1 = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct$1;
};
type SetDefaultUlnConfigParamStructOutput$1 = [
    number,
    UlnConfigStructOutput$1
] & {
    eid: number;
    config: UlnConfigStructOutput$1;
};
interface SendUlnBaseInterface extends utils.Interface {
    functions: {
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getAppUlnConfig" | "getUlnConfig" | "owner" | "renounceOwnership" | "setDefaultUlnConfigs" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "DVNFeePaid(address[],address[],uint256[])": EventFragment;
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DVNFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface DVNFeePaidEventObject {
    requiredDVNs: string[];
    optionalDVNs: string[];
    fees: BigNumber[];
}
type DVNFeePaidEvent = TypedEvent<[
    string[],
    string[],
    BigNumber[]
], DVNFeePaidEventObject>;
type DVNFeePaidEventFilter = TypedEventFilter<DVNFeePaidEvent>;
interface DefaultUlnConfigsSetEventObject$1 {
    params: SetDefaultUlnConfigParamStructOutput$1[];
}
type DefaultUlnConfigsSetEvent$1 = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput$1[]
], DefaultUlnConfigsSetEventObject$1>;
type DefaultUlnConfigsSetEventFilter$1 = TypedEventFilter<DefaultUlnConfigsSetEvent$1>;
interface OwnershipTransferredEventObject$a {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$a = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$a>;
type OwnershipTransferredEventFilter$a = TypedEventFilter<OwnershipTransferredEvent$a>;
interface UlnConfigSetEventObject$1 {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput$1;
}
type UlnConfigSetEvent$1 = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput$1
], UlnConfigSetEventObject$1>;
type UlnConfigSetEventFilter$1 = TypedEventFilter<UlnConfigSetEvent$1>;
interface SendUlnBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SendUlnBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$1]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput$1] & {
            rtnConfig: UlnConfigStructOutput$1;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$1>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$1>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$1>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput$1>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DVNFeePaid(address[],address[],uint256[])"(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter;
        DVNFeePaid(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter;
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter$1;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$a;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$a;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$1;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter$1;
    };
    estimateGas: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type UlnConfigStruct = {
    confirmations: PromiseOrValue<BigNumberish>;
    requiredDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNCount: PromiseOrValue<BigNumberish>;
    optionalDVNThreshold: PromiseOrValue<BigNumberish>;
    requiredDVNs: PromiseOrValue<string>[];
    optionalDVNs: PromiseOrValue<string>[];
};
type UlnConfigStructOutput = [
    BigNumber,
    number,
    number,
    number,
    string[],
    string[]
] & {
    confirmations: BigNumber;
    requiredDVNCount: number;
    optionalDVNCount: number;
    optionalDVNThreshold: number;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>;
    config: UlnConfigStruct;
};
type SetDefaultUlnConfigParamStructOutput = [
    number,
    UlnConfigStructOutput
] & {
    eid: number;
    config: UlnConfigStructOutput;
};
interface UlnBaseInterface extends utils.Interface {
    functions: {
        "getAppUlnConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getAppUlnConfig" | "getUlnConfig" | "owner" | "renounceOwnership" | "setDefaultUlnConfigs" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "DefaultUlnConfigsSet(tuple[])": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "UlnConfigSet(address,uint32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UlnConfigSet"): EventFragment;
}
interface DefaultUlnConfigsSetEventObject {
    params: SetDefaultUlnConfigParamStructOutput[];
}
type DefaultUlnConfigsSetEvent = TypedEvent<[
    SetDefaultUlnConfigParamStructOutput[]
], DefaultUlnConfigsSetEventObject>;
type DefaultUlnConfigsSetEventFilter = TypedEventFilter<DefaultUlnConfigsSetEvent>;
interface OwnershipTransferredEventObject$9 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$9 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$9>;
type OwnershipTransferredEventFilter$9 = TypedEventFilter<OwnershipTransferredEvent$9>;
interface UlnConfigSetEventObject {
    oapp: string;
    eid: number;
    config: UlnConfigStructOutput;
}
type UlnConfigSetEvent = TypedEvent<[
    string,
    number,
    UlnConfigStructOutput
], UlnConfigSetEventObject>;
type UlnConfigSetEventFilter = TypedEventFilter<UlnConfigSetEvent>;
interface UlnBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UlnBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructOutput] & {
            rtnConfig: UlnConfigStructOutput;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructOutput>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultUlnConfigsSet(tuple[])"(params?: null): DefaultUlnConfigsSetEventFilter;
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$9;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$9;
        "UlnConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter;
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter;
    };
    estimateGas: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getAppUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$H_ReceiveUlnBase = ReceiveUlnBase;
type index$H_SendUlnBase = SendUlnBase;
type index$H_UlnBase = UlnBase;
declare namespace index$H {
  export { type index$H_ReceiveUlnBase as ReceiveUlnBase, type index$H_SendUlnBase as SendUlnBase, type index$H_UlnBase as UlnBase, index$S as dvn, index$Q as interfaces, index$P as libs, index$$ as lzExecutorSol, index$K as uln301, index$I as uln302 };
}

interface ProxyAdminInterface extends utils.Interface {
    functions: {
        "changeProxyAdmin(address,address)": FunctionFragment;
        "getProxyAdmin(address)": FunctionFragment;
        "getProxyImplementation(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "upgrade(address,address)": FunctionFragment;
        "upgradeAndCall(address,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "changeProxyAdmin" | "getProxyAdmin" | "getProxyImplementation" | "owner" | "renounceOwnership" | "transferOwnership" | "upgrade" | "upgradeAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "changeProxyAdmin", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getProxyAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getProxyImplementation", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgrade", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeAndCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "changeProxyAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeAndCall", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$8 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$8 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$8>;
type OwnershipTransferredEventFilter$8 = TypedEventFilter<OwnershipTransferredEvent$8>;
interface ProxyAdmin extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ProxyAdminInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$8;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$8;
    };
    estimateGas: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface TransparentUpgradeableProxyInterface extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "changeAdmin(address)": FunctionFragment;
        "implementation()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "changeAdmin" | "implementation" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "changeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent = TypedEvent<[
    string,
    string
], AdminChangedEventObject>;
type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
interface BeaconUpgradedEventObject {
    beacon: string;
}
type BeaconUpgradedEvent = TypedEvent<[
    string
], BeaconUpgradedEventObject>;
type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
interface UpgradedEventObject {
    implementation: string;
}
type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
interface TransparentUpgradeableProxy extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TransparentUpgradeableProxyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    implementation(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        implementation(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };
    estimateGas: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$G_ProxyAdmin = ProxyAdmin;
type index$G_TransparentUpgradeableProxy = TransparentUpgradeableProxy;
declare namespace index$G {
  export type { index$G_ProxyAdmin as ProxyAdmin, index$G_TransparentUpgradeableProxy as TransparentUpgradeableProxy };
}

interface WorkerUpgradeableInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "defaultMultiplierBps" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "Paused(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface InitializedEventObject$3 {
    version: number;
}
type InitializedEvent$3 = TypedEvent<[number], InitializedEventObject$3>;
type InitializedEventFilter$3 = TypedEventFilter<InitializedEvent$3>;
interface PausedEventObject$1 {
    account: string;
}
type PausedEvent$1 = TypedEvent<[string], PausedEventObject$1>;
type PausedEventFilter$1 = TypedEventFilter<PausedEvent$1>;
interface RoleAdminChangedEventObject$1 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$1 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$1>;
type RoleAdminChangedEventFilter$1 = TypedEventFilter<RoleAdminChangedEvent$1>;
interface RoleGrantedEventObject$1 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$1 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$1>;
type RoleGrantedEventFilter$1 = TypedEventFilter<RoleGrantedEvent$1>;
interface RoleRevokedEventObject$1 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$1 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$1>;
type RoleRevokedEventFilter$1 = TypedEventFilter<RoleRevokedEvent$1>;
interface SetDefaultMultiplierBpsEventObject$1 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$1 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$1>;
type SetDefaultMultiplierBpsEventFilter$1 = TypedEventFilter<SetDefaultMultiplierBpsEvent$1>;
interface SetPriceFeedEventObject$1 {
    priceFeed: string;
}
type SetPriceFeedEvent$1 = TypedEvent<[string], SetPriceFeedEventObject$1>;
type SetPriceFeedEventFilter$1 = TypedEventFilter<SetPriceFeedEvent$1>;
interface SetSupportedOptionTypesEventObject$1 {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent$1 = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject$1>;
type SetSupportedOptionTypesEventFilter$1 = TypedEventFilter<SetSupportedOptionTypesEvent$1>;
interface SetWorkerLibEventObject$1 {
    workerLib: string;
}
type SetWorkerLibEvent$1 = TypedEvent<[string], SetWorkerLibEventObject$1>;
type SetWorkerLibEventFilter$1 = TypedEventFilter<SetWorkerLibEvent$1>;
interface UnpausedEventObject$1 {
    account: string;
}
type UnpausedEvent$1 = TypedEvent<[string], UnpausedEventObject$1>;
type UnpausedEventFilter$1 = TypedEventFilter<UnpausedEvent$1>;
interface WithdrawEventObject$1 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$1>;
type WithdrawEventFilter$1 = TypedEventFilter<WithdrawEvent$1>;
interface WorkerUpgradeable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WorkerUpgradeableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$3;
        Initialized(version?: null): InitializedEventFilter$3;
        "Paused(address)"(account?: null): PausedEventFilter$1;
        Paused(account?: null): PausedEventFilter$1;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$1;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$1;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$1;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$1;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$1;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$1;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$1;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$1;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$1;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$1;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$1;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter$1;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$1;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$1;
        "Unpaused(address)"(account?: null): UnpausedEventFilter$1;
        Unpaused(account?: null): UnpausedEventFilter$1;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$1;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$1;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$F_WorkerUpgradeable = WorkerUpgradeable;
declare namespace index$F {
  export { type index$F_WorkerUpgradeable as WorkerUpgradeable, index$G as proxy };
}

type OriginStruct$3 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type OriginStructOutput$1 = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
type MessagingParamsStruct$1 = {
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
    options: PromiseOrValue<BytesLike>;
    payInLzToken: PromiseOrValue<boolean>;
};
type MessagingFeeStructOutput$2 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput$1 = [
    string,
    BigNumber,
    MessagingFeeStructOutput$2
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$2;
};
type SetConfigParamStruct$4 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface EndpointV2Interface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "blockedLibrary()": FunctionFragment;
        "burn(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "clear(address,(uint32,bytes32,uint64),bytes32,bytes)": FunctionFragment;
        "composeQueue(address,address,bytes32,uint16)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "delegates(address)": FunctionFragment;
        "eid()": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendContext()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "lazyInboundNonce(address,uint32,bytes32)": FunctionFragment;
        "lzCompose(address,address,bytes32,uint16,bytes,bytes)": FunctionFragment;
        "lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": FunctionFragment;
        "lzReceiveAlert((uint32,bytes32,uint64),address,bytes32,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
        "lzToken()": FunctionFragment;
        "nativeToken()": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "nilify(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "recoverToken(address,address,uint256)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
        "sendCompose(address,bytes32,uint16,bytes)": FunctionFragment;
        "setConfig(address,address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setLzToken(address)": FunctionFragment;
        "setReceiveLibrary(address,uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(address,uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(address,uint32,address)": FunctionFragment;
        "skip(address,uint32,bytes32,uint64)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address)": FunctionFragment;
        "verify((uint32,bytes32,uint64),address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "blockedLibrary" | "burn" | "clear" | "composeQueue" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "delegates" | "eid" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "inboundNonce" | "inboundPayloadHash" | "initializable" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "isValidReceiveLibrary" | "lazyInboundNonce" | "lzCompose" | "lzComposeAlert" | "lzReceive" | "lzReceiveAlert" | "lzToken" | "nativeToken" | "nextGuid" | "nilify" | "outboundNonce" | "owner" | "quote" | "receiveLibraryTimeout" | "recoverToken" | "registerLibrary" | "renounceOwnership" | "send" | "sendCompose" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setDelegate" | "setLzToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "transferOwnership" | "verifiable" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "burn", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "clear", values: [
        PromiseOrValue<string>,
        OriginStruct$3,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composeQueue", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "delegates", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct$3, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzComposeAlert", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$3,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAlert", values: [
        OriginStruct$3,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nilify", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [MessagingParamsStruct$1, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "recoverToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [MessagingParamsStruct$1, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        SetConfigParamStruct$4[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [OriginStruct$3, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verify", values: [OriginStruct$3, PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzComposeAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nilify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recoverToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {
        "ComposeDelivered(address,address,bytes32,uint16)": EventFragment;
        "ComposeSent(address,address,bytes32,uint16,bytes)": EventFragment;
        "DefaultReceiveLibrarySet(uint32,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "DelegateSet(address,address)": EventFragment;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": EventFragment;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)": EventFragment;
        "LzTokenSet(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketDelivered(tuple,address)": EventFragment;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketSent(bytes,bytes,address)": EventFragment;
        "PacketVerified(tuple,address,bytes32)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address)": EventFragment;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelegateSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeAlert"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzReceiveAlert"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketBurnt"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketNilified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketVerified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface ComposeDeliveredEventObject$2 {
    from: string;
    to: string;
    guid: string;
    index: number;
}
type ComposeDeliveredEvent$2 = TypedEvent<[
    string,
    string,
    string,
    number
], ComposeDeliveredEventObject$2>;
type ComposeDeliveredEventFilter$2 = TypedEventFilter<ComposeDeliveredEvent$2>;
interface ComposeSentEventObject$2 {
    from: string;
    to: string;
    guid: string;
    index: number;
    message: string;
}
type ComposeSentEvent$2 = TypedEvent<[
    string,
    string,
    string,
    number,
    string
], ComposeSentEventObject$2>;
type ComposeSentEventFilter$2 = TypedEventFilter<ComposeSentEvent$2>;
interface DefaultReceiveLibrarySetEventObject$2 {
    eid: number;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$2 = TypedEvent<[
    number,
    string
], DefaultReceiveLibrarySetEventObject$2>;
type DefaultReceiveLibrarySetEventFilter$2 = TypedEventFilter<DefaultReceiveLibrarySetEvent$2>;
interface DefaultReceiveLibraryTimeoutSetEventObject$2 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$2 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$2>;
type DefaultReceiveLibraryTimeoutSetEventFilter$2 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$2>;
interface DefaultSendLibrarySetEventObject$2 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$2 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$2>;
type DefaultSendLibrarySetEventFilter$2 = TypedEventFilter<DefaultSendLibrarySetEvent$2>;
interface DelegateSetEventObject$1 {
    sender: string;
    delegate: string;
}
type DelegateSetEvent$1 = TypedEvent<[
    string,
    string
], DelegateSetEventObject$1>;
type DelegateSetEventFilter$1 = TypedEventFilter<DelegateSetEvent$1>;
interface InboundNonceSkippedEventObject$2 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$2 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$2>;
type InboundNonceSkippedEventFilter$2 = TypedEventFilter<InboundNonceSkippedEvent$2>;
interface LibraryRegisteredEventObject$2 {
    newLib: string;
}
type LibraryRegisteredEvent$2 = TypedEvent<[
    string
], LibraryRegisteredEventObject$2>;
type LibraryRegisteredEventFilter$2 = TypedEventFilter<LibraryRegisteredEvent$2>;
interface LzComposeAlertEventObject$2 {
    from: string;
    to: string;
    executor: string;
    guid: string;
    index: number;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzComposeAlertEvent$2 = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzComposeAlertEventObject$2>;
type LzComposeAlertEventFilter$2 = TypedEventFilter<LzComposeAlertEvent$2>;
interface LzReceiveAlertEventObject$1 {
    receiver: string;
    executor: string;
    origin: OriginStructOutput$1;
    guid: string;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzReceiveAlertEvent$1 = TypedEvent<[
    string,
    string,
    OriginStructOutput$1,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzReceiveAlertEventObject$1>;
type LzReceiveAlertEventFilter$1 = TypedEventFilter<LzReceiveAlertEvent$1>;
interface LzTokenSetEventObject$1 {
    token: string;
}
type LzTokenSetEvent$1 = TypedEvent<[string], LzTokenSetEventObject$1>;
type LzTokenSetEventFilter$1 = TypedEventFilter<LzTokenSetEvent$1>;
interface OwnershipTransferredEventObject$7 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$7 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$7>;
type OwnershipTransferredEventFilter$7 = TypedEventFilter<OwnershipTransferredEvent$7>;
interface PacketBurntEventObject$2 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketBurntEvent$2 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketBurntEventObject$2>;
type PacketBurntEventFilter$2 = TypedEventFilter<PacketBurntEvent$2>;
interface PacketDeliveredEventObject$1 {
    origin: OriginStructOutput$1;
    receiver: string;
}
type PacketDeliveredEvent$1 = TypedEvent<[
    OriginStructOutput$1,
    string
], PacketDeliveredEventObject$1>;
type PacketDeliveredEventFilter$1 = TypedEventFilter<PacketDeliveredEvent$1>;
interface PacketNilifiedEventObject$2 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketNilifiedEvent$2 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketNilifiedEventObject$2>;
type PacketNilifiedEventFilter$2 = TypedEventFilter<PacketNilifiedEvent$2>;
interface PacketSentEventObject$1 {
    encodedPayload: string;
    options: string;
    sendLibrary: string;
}
type PacketSentEvent$1 = TypedEvent<[
    string,
    string,
    string
], PacketSentEventObject$1>;
type PacketSentEventFilter$1 = TypedEventFilter<PacketSentEvent$1>;
interface PacketVerifiedEventObject$1 {
    origin: OriginStructOutput$1;
    receiver: string;
    payloadHash: string;
}
type PacketVerifiedEvent$1 = TypedEvent<[
    OriginStructOutput$1,
    string,
    string
], PacketVerifiedEventObject$1>;
type PacketVerifiedEventFilter$1 = TypedEventFilter<PacketVerifiedEvent$1>;
interface ReceiveLibrarySetEventObject$2 {
    receiver: string;
    eid: number;
    newLib: string;
}
type ReceiveLibrarySetEvent$2 = TypedEvent<[
    string,
    number,
    string
], ReceiveLibrarySetEventObject$2>;
type ReceiveLibrarySetEventFilter$2 = TypedEventFilter<ReceiveLibrarySetEvent$2>;
interface ReceiveLibraryTimeoutSetEventObject$2 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimeoutSetEvent$2 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimeoutSetEventObject$2>;
type ReceiveLibraryTimeoutSetEventFilter$2 = TypedEventFilter<ReceiveLibraryTimeoutSetEvent$2>;
interface SendLibrarySetEventObject$2 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$2 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$2>;
type SendLibrarySetEventFilter$2 = TypedEventFilter<SendLibrarySetEvent$2>;
interface EndpointV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EndpointV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        blockedLibrary(overrides?: CallOverrides): Promise<[string]>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$3, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            delegate: string;
        }>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            payloadHash: string;
        }>;
        initializable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAlert(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzToken(overrides?: CallOverrides): Promise<[string]>;
        nativeToken(overrides?: CallOverrides): Promise<[string]>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_params: MessagingParamsStruct$1, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$2]>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_params: MessagingParamsStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    blockedLibrary(overrides?: CallOverrides): Promise<string>;
    burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$3, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    eid(overrides?: CallOverrides): Promise<number>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    initializable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAlert(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzToken(overrides?: CallOverrides): Promise<string>;
    nativeToken(overrides?: CallOverrides): Promise<string>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_params: MessagingParamsStruct$1, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$2>;
    receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_params: MessagingParamsStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$4[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verify(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        blockedLibrary(overrides?: CallOverrides): Promise<string>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$3, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        eid(overrides?: CallOverrides): Promise<number>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        initializable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAlert(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzToken(overrides?: CallOverrides): Promise<string>;
        nativeToken(overrides?: CallOverrides): Promise<string>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_params: MessagingParamsStruct$1, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$2>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_params: MessagingParamsStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingReceiptStructOutput$1>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$4[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verify(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)"(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$2;
        ComposeDelivered(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$2;
        "ComposeSent(address,address,bytes32,uint16,bytes)"(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$2;
        ComposeSent(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$2;
        "DefaultReceiveLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$2;
        DefaultReceiveLibrarySet(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$2;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$2;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$2;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$2;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$2;
        "DelegateSet(address,address)"(sender?: null, delegate?: null): DelegateSetEventFilter$1;
        DelegateSet(sender?: null, delegate?: null): DelegateSetEventFilter$1;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$2;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$2;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$2;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$2;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$2;
        LzComposeAlert(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$2;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)"(receiver?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, origin?: null, guid?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzReceiveAlertEventFilter$1;
        LzReceiveAlert(receiver?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, origin?: null, guid?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzReceiveAlertEventFilter$1;
        "LzTokenSet(address)"(token?: null): LzTokenSetEventFilter$1;
        LzTokenSet(token?: null): LzTokenSetEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$7;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$7;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$2;
        PacketBurnt(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$2;
        "PacketDelivered(tuple,address)"(origin?: null, receiver?: null): PacketDeliveredEventFilter$1;
        PacketDelivered(origin?: null, receiver?: null): PacketDeliveredEventFilter$1;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$2;
        PacketNilified(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$2;
        "PacketSent(bytes,bytes,address)"(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter$1;
        PacketSent(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter$1;
        "PacketVerified(tuple,address,bytes32)"(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter$1;
        PacketVerified(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter$1;
        "ReceiveLibrarySet(address,uint32,address)"(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$2;
        ReceiveLibrarySet(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$2;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$2;
        ReceiveLibraryTimeoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$2;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$2;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$2;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        blockedLibrary(overrides?: CallOverrides): Promise<BigNumber>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$3, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAlert(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzToken(overrides?: CallOverrides): Promise<BigNumber>;
        nativeToken(overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_params: MessagingParamsStruct$1, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_params: MessagingParamsStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        blockedLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$3, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAlert(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_params: MessagingParamsStruct$1, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_params: MessagingParamsStruct$1, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$4[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_origin: OriginStruct$3, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$2 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
type OriginStructOutput = [number, string, BigNumber] & {
    srcEid: number;
    sender: string;
    nonce: BigNumber;
};
type MessagingParamsStruct = {
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
    options: PromiseOrValue<BytesLike>;
    payInLzToken: PromiseOrValue<boolean>;
};
type MessagingFeeStructOutput$1 = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type MessagingReceiptStructOutput = [
    string,
    BigNumber,
    MessagingFeeStructOutput$1
] & {
    guid: string;
    nonce: BigNumber;
    fee: MessagingFeeStructOutput$1;
};
type SetConfigParamStruct$3 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface EndpointV2AltInterface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "blockedLibrary()": FunctionFragment;
        "burn(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "clear(address,(uint32,bytes32,uint64),bytes32,bytes)": FunctionFragment;
        "composeQueue(address,address,bytes32,uint16)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "delegates(address)": FunctionFragment;
        "eid()": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendContext()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "lazyInboundNonce(address,uint32,bytes32)": FunctionFragment;
        "lzCompose(address,address,bytes32,uint16,bytes,bytes)": FunctionFragment;
        "lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": FunctionFragment;
        "lzReceiveAlert((uint32,bytes32,uint64),address,bytes32,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
        "lzToken()": FunctionFragment;
        "nativeToken()": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "nilify(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "recoverToken(address,address,uint256)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
        "sendCompose(address,bytes32,uint16,bytes)": FunctionFragment;
        "setConfig(address,address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setDelegate(address)": FunctionFragment;
        "setLzToken(address)": FunctionFragment;
        "setReceiveLibrary(address,uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(address,uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(address,uint32,address)": FunctionFragment;
        "skip(address,uint32,bytes32,uint64)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address)": FunctionFragment;
        "verify((uint32,bytes32,uint64),address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "blockedLibrary" | "burn" | "clear" | "composeQueue" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "delegates" | "eid" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "inboundNonce" | "inboundPayloadHash" | "initializable" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "isValidReceiveLibrary" | "lazyInboundNonce" | "lzCompose" | "lzComposeAlert" | "lzReceive" | "lzReceiveAlert" | "lzToken" | "nativeToken" | "nextGuid" | "nilify" | "outboundNonce" | "owner" | "quote" | "receiveLibraryTimeout" | "recoverToken" | "registerLibrary" | "renounceOwnership" | "send" | "sendCompose" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setDelegate" | "setLzToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "transferOwnership" | "verifiable" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "burn", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "clear", values: [
        PromiseOrValue<string>,
        OriginStruct$2,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composeQueue", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "delegates", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct$2, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzComposeAlert", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        OriginStruct$2,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAlert", values: [
        OriginStruct$2,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nilify", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [MessagingParamsStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "recoverToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [MessagingParamsStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        SetConfigParamStruct$3[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDelegate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [OriginStruct$2, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verify", values: [OriginStruct$2, PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzComposeAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nilify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recoverToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {
        "ComposeDelivered(address,address,bytes32,uint16)": EventFragment;
        "ComposeSent(address,address,bytes32,uint16,bytes)": EventFragment;
        "DefaultReceiveLibrarySet(uint32,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "DelegateSet(address,address)": EventFragment;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": EventFragment;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)": EventFragment;
        "LzTokenSet(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketDelivered(tuple,address)": EventFragment;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketSent(bytes,bytes,address)": EventFragment;
        "PacketVerified(tuple,address,bytes32)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address)": EventFragment;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelegateSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeAlert"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzReceiveAlert"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketBurnt"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketNilified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketVerified"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface ComposeDeliveredEventObject$1 {
    from: string;
    to: string;
    guid: string;
    index: number;
}
type ComposeDeliveredEvent$1 = TypedEvent<[
    string,
    string,
    string,
    number
], ComposeDeliveredEventObject$1>;
type ComposeDeliveredEventFilter$1 = TypedEventFilter<ComposeDeliveredEvent$1>;
interface ComposeSentEventObject$1 {
    from: string;
    to: string;
    guid: string;
    index: number;
    message: string;
}
type ComposeSentEvent$1 = TypedEvent<[
    string,
    string,
    string,
    number,
    string
], ComposeSentEventObject$1>;
type ComposeSentEventFilter$1 = TypedEventFilter<ComposeSentEvent$1>;
interface DefaultReceiveLibrarySetEventObject$1 {
    eid: number;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$1 = TypedEvent<[
    number,
    string
], DefaultReceiveLibrarySetEventObject$1>;
type DefaultReceiveLibrarySetEventFilter$1 = TypedEventFilter<DefaultReceiveLibrarySetEvent$1>;
interface DefaultReceiveLibraryTimeoutSetEventObject$1 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$1 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$1>;
type DefaultReceiveLibraryTimeoutSetEventFilter$1 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$1>;
interface DefaultSendLibrarySetEventObject$1 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$1 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$1>;
type DefaultSendLibrarySetEventFilter$1 = TypedEventFilter<DefaultSendLibrarySetEvent$1>;
interface DelegateSetEventObject {
    sender: string;
    delegate: string;
}
type DelegateSetEvent = TypedEvent<[
    string,
    string
], DelegateSetEventObject>;
type DelegateSetEventFilter = TypedEventFilter<DelegateSetEvent>;
interface InboundNonceSkippedEventObject$1 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$1 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$1>;
type InboundNonceSkippedEventFilter$1 = TypedEventFilter<InboundNonceSkippedEvent$1>;
interface LibraryRegisteredEventObject$1 {
    newLib: string;
}
type LibraryRegisteredEvent$1 = TypedEvent<[
    string
], LibraryRegisteredEventObject$1>;
type LibraryRegisteredEventFilter$1 = TypedEventFilter<LibraryRegisteredEvent$1>;
interface LzComposeAlertEventObject$1 {
    from: string;
    to: string;
    executor: string;
    guid: string;
    index: number;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzComposeAlertEvent$1 = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzComposeAlertEventObject$1>;
type LzComposeAlertEventFilter$1 = TypedEventFilter<LzComposeAlertEvent$1>;
interface LzReceiveAlertEventObject {
    receiver: string;
    executor: string;
    origin: OriginStructOutput;
    guid: string;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzReceiveAlertEvent = TypedEvent<[
    string,
    string,
    OriginStructOutput,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzReceiveAlertEventObject>;
type LzReceiveAlertEventFilter = TypedEventFilter<LzReceiveAlertEvent>;
interface LzTokenSetEventObject {
    token: string;
}
type LzTokenSetEvent = TypedEvent<[string], LzTokenSetEventObject>;
type LzTokenSetEventFilter = TypedEventFilter<LzTokenSetEvent>;
interface OwnershipTransferredEventObject$6 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$6 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$6>;
type OwnershipTransferredEventFilter$6 = TypedEventFilter<OwnershipTransferredEvent$6>;
interface PacketBurntEventObject$1 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketBurntEvent$1 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketBurntEventObject$1>;
type PacketBurntEventFilter$1 = TypedEventFilter<PacketBurntEvent$1>;
interface PacketDeliveredEventObject {
    origin: OriginStructOutput;
    receiver: string;
}
type PacketDeliveredEvent = TypedEvent<[
    OriginStructOutput,
    string
], PacketDeliveredEventObject>;
type PacketDeliveredEventFilter = TypedEventFilter<PacketDeliveredEvent>;
interface PacketNilifiedEventObject$1 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketNilifiedEvent$1 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketNilifiedEventObject$1>;
type PacketNilifiedEventFilter$1 = TypedEventFilter<PacketNilifiedEvent$1>;
interface PacketSentEventObject {
    encodedPayload: string;
    options: string;
    sendLibrary: string;
}
type PacketSentEvent = TypedEvent<[
    string,
    string,
    string
], PacketSentEventObject>;
type PacketSentEventFilter = TypedEventFilter<PacketSentEvent>;
interface PacketVerifiedEventObject {
    origin: OriginStructOutput;
    receiver: string;
    payloadHash: string;
}
type PacketVerifiedEvent = TypedEvent<[
    OriginStructOutput,
    string,
    string
], PacketVerifiedEventObject>;
type PacketVerifiedEventFilter = TypedEventFilter<PacketVerifiedEvent>;
interface ReceiveLibrarySetEventObject$1 {
    receiver: string;
    eid: number;
    newLib: string;
}
type ReceiveLibrarySetEvent$1 = TypedEvent<[
    string,
    number,
    string
], ReceiveLibrarySetEventObject$1>;
type ReceiveLibrarySetEventFilter$1 = TypedEventFilter<ReceiveLibrarySetEvent$1>;
interface ReceiveLibraryTimeoutSetEventObject$1 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimeoutSetEvent$1 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimeoutSetEventObject$1>;
type ReceiveLibraryTimeoutSetEventFilter$1 = TypedEventFilter<ReceiveLibraryTimeoutSetEvent$1>;
interface SendLibrarySetEventObject$1 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$1 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$1>;
type SendLibrarySetEventFilter$1 = TypedEventFilter<SendLibrarySetEvent$1>;
interface EndpointV2Alt extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EndpointV2AltInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        blockedLibrary(overrides?: CallOverrides): Promise<[string]>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$2, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            delegate: string;
        }>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            payloadHash: string;
        }>;
        initializable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAlert(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzToken(overrides?: CallOverrides): Promise<[string]>;
        nativeToken(overrides?: CallOverrides): Promise<[string]>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_params: MessagingParamsStruct, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput$1]>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_params: MessagingParamsStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    blockedLibrary(overrides?: CallOverrides): Promise<string>;
    burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$2, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    eid(overrides?: CallOverrides): Promise<number>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    initializable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAlert(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzToken(overrides?: CallOverrides): Promise<string>;
    nativeToken(overrides?: CallOverrides): Promise<string>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_params: MessagingParamsStruct, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$1>;
    receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_params: MessagingParamsStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$3[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verify(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        blockedLibrary(overrides?: CallOverrides): Promise<string>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$2, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        eid(overrides?: CallOverrides): Promise<number>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        initializable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAlert(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzToken(overrides?: CallOverrides): Promise<string>;
        nativeToken(overrides?: CallOverrides): Promise<string>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_params: MessagingParamsStruct, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput$1>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_params: MessagingParamsStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MessagingReceiptStructOutput>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$3[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verify(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)"(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$1;
        ComposeDelivered(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter$1;
        "ComposeSent(address,address,bytes32,uint16,bytes)"(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$1;
        ComposeSent(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter$1;
        "DefaultReceiveLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$1;
        DefaultReceiveLibrarySet(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$1;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$1;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$1;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$1;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$1;
        "DelegateSet(address,address)"(sender?: null, delegate?: null): DelegateSetEventFilter;
        DelegateSet(sender?: null, delegate?: null): DelegateSetEventFilter;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$1;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$1;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$1;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$1;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$1;
        LzComposeAlert(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter$1;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)"(receiver?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, origin?: null, guid?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzReceiveAlertEventFilter;
        LzReceiveAlert(receiver?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, origin?: null, guid?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzReceiveAlertEventFilter;
        "LzTokenSet(address)"(token?: null): LzTokenSetEventFilter;
        LzTokenSet(token?: null): LzTokenSetEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$6;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$6;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$1;
        PacketBurnt(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter$1;
        "PacketDelivered(tuple,address)"(origin?: null, receiver?: null): PacketDeliveredEventFilter;
        PacketDelivered(origin?: null, receiver?: null): PacketDeliveredEventFilter;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$1;
        PacketNilified(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter$1;
        "PacketSent(bytes,bytes,address)"(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter;
        PacketSent(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter;
        "PacketVerified(tuple,address,bytes32)"(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter;
        PacketVerified(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter;
        "ReceiveLibrarySet(address,uint32,address)"(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$1;
        ReceiveLibrarySet(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter$1;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$1;
        ReceiveLibraryTimeoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter$1;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$1;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$1;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        blockedLibrary(overrides?: CallOverrides): Promise<BigNumber>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$2, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAlert(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzToken(overrides?: CallOverrides): Promise<BigNumber>;
        nativeToken(overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_params: MessagingParamsStruct, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_params: MessagingParamsStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        blockedLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        clear(_oapp: PromiseOrValue<string>, _origin: OriginStruct$2, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAlert(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_params: MessagingParamsStruct, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_params: MessagingParamsStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$3[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDelegate(_delegate: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_origin: OriginStruct$2, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type OriginStruct$1 = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface EndpointV2ViewInterface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "executable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "endpoint" | "executable" | "initializable" | "initialize" | "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [OriginStruct$1, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct$1, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        OriginStruct$1,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
interface InitializedEventObject$2 {
    version: number;
}
type InitializedEvent$2 = TypedEvent<[number], InitializedEventObject$2>;
type InitializedEventFilter$2 = TypedEventFilter<InitializedEvent$2>;
interface EndpointV2View extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EndpointV2ViewInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        executable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        initializable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifiable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    executable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    initializable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifiable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        executable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        initializable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_endpoint: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        verifiable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$2;
        Initialized(version?: null): InitializedEventFilter$2;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        executable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifiable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifiable(_origin: OriginStruct$1, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OriginStruct = {
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
};
interface EndpointV2ViewUpgradeableInterface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "executable((uint32,bytes32,uint64),address)": FunctionFragment;
        "initializable((uint32,bytes32,uint64),address)": FunctionFragment;
        "verifiable((uint32,bytes32,uint64),address,address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "endpoint" | "executable" | "initializable" | "verifiable"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [OriginStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializable", values: [OriginStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [
        OriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
interface InitializedEventObject$1 {
    version: number;
}
type InitializedEvent$1 = TypedEvent<[number], InitializedEventObject$1>;
type InitializedEventFilter$1 = TypedEventFilter<InitializedEvent$1>;
interface EndpointV2ViewUpgradeable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EndpointV2ViewUpgradeableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        verifiable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verifiable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verifiable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$1;
        Initialized(version?: null): InitializedEventFilter$1;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verifiable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifiable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, _receiveLib: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IExecutorFeeLib {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        calldataSize: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        sender: string;
        calldataSize: BigNumber;
        defaultMultiplierBps: number;
    };
}
declare namespace IExecutor {
    type DstConfigStruct = {
        lzReceiveBaseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        nativeCap: PromiseOrValue<BigNumberish>;
        lzComposeBaseGas: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        lzReceiveBaseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
        lzComposeBaseGas: BigNumber;
    };
}
interface ExecutorFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128,uint64),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128,uint64),bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend" | "owner" | "renounceOwnership" | "transferOwnership" | "withdrawToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IExecutorFeeLib.FeeParamsStruct,
        IExecutor.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IExecutorFeeLib.FeeParamsStruct,
        IExecutor.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$5 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$5 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$5>;
type OwnershipTransferredEventFilter$5 = TypedEventFilter<OwnershipTransferredEvent$5>;
interface ExecutorFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExecutorFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$5;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$5;
    };
    estimateGas: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessageLibBaseInterface extends utils.Interface {
    functions: {};
    events: {};
}
interface MessageLibBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessageLibBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {};
    estimateGas: {};
    populateTransaction: {};
}

type SetConfigParamStruct$2 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface MessageLibManagerInterface extends utils.Interface {
    functions: {
        "blockedLibrary()": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setConfig(address,address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setReceiveLibrary(address,uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(address,uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(address,uint32,address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "blockedLibrary" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendLibrary" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSupportedEid" | "isValidReceiveLibrary" | "owner" | "receiveLibraryTimeout" | "registerLibrary" | "renounceOwnership" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        SetConfigParamStruct$2[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "DefaultReceiveLibrarySet(uint32,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address)": EventFragment;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface DefaultReceiveLibrarySetEventObject {
    eid: number;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent = TypedEvent<[
    number,
    string
], DefaultReceiveLibrarySetEventObject>;
type DefaultReceiveLibrarySetEventFilter = TypedEventFilter<DefaultReceiveLibrarySetEvent>;
interface DefaultReceiveLibraryTimeoutSetEventObject {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject>;
type DefaultReceiveLibraryTimeoutSetEventFilter = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent>;
interface DefaultSendLibrarySetEventObject {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject>;
type DefaultSendLibrarySetEventFilter = TypedEventFilter<DefaultSendLibrarySetEvent>;
interface LibraryRegisteredEventObject {
    newLib: string;
}
type LibraryRegisteredEvent = TypedEvent<[
    string
], LibraryRegisteredEventObject>;
type LibraryRegisteredEventFilter = TypedEventFilter<LibraryRegisteredEvent>;
interface OwnershipTransferredEventObject$4 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$4 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$4>;
type OwnershipTransferredEventFilter$4 = TypedEventFilter<OwnershipTransferredEvent$4>;
interface ReceiveLibrarySetEventObject {
    receiver: string;
    eid: number;
    newLib: string;
}
type ReceiveLibrarySetEvent = TypedEvent<[
    string,
    number,
    string
], ReceiveLibrarySetEventObject>;
type ReceiveLibrarySetEventFilter = TypedEventFilter<ReceiveLibrarySetEvent>;
interface ReceiveLibraryTimeoutSetEventObject {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimeoutSetEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimeoutSetEventObject>;
type ReceiveLibraryTimeoutSetEventFilter = TypedEventFilter<ReceiveLibraryTimeoutSetEvent>;
interface SendLibrarySetEventObject {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject>;
type SendLibrarySetEventFilter = TypedEventFilter<SendLibrarySetEvent>;
interface MessageLibManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessageLibManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        blockedLibrary(overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    blockedLibrary(overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$2[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        blockedLibrary(overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$2[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultReceiveLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter;
        DefaultReceiveLibrarySet(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$4;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$4;
        "ReceiveLibrarySet(address,uint32,address)"(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter;
        ReceiveLibrarySet(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter;
        "ReceiveLibraryTimeoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter;
        ReceiveLibraryTimeoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimeoutSetEventFilter;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter;
    };
    estimateGas: {
        blockedLibrary(overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        blockedLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _params: SetConfigParamStruct$2[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessagingChannelInterface extends utils.Interface {
    functions: {
        "EMPTY_PAYLOAD_HASH()": FunctionFragment;
        "NIL_PAYLOAD_HASH()": FunctionFragment;
        "burn(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "eid()": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "lazyInboundNonce(address,uint32,bytes32)": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "nilify(address,uint32,bytes32,uint64,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "skip(address,uint32,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EMPTY_PAYLOAD_HASH" | "NIL_PAYLOAD_HASH" | "burn" | "eid" | "inboundNonce" | "inboundPayloadHash" | "lazyInboundNonce" | "nextGuid" | "nilify" | "outboundNonce" | "skip"): FunctionFragment;
    encodeFunctionData(functionFragment: "EMPTY_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "NIL_PAYLOAD_HASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "burn", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nilify", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "EMPTY_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NIL_PAYLOAD_HASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nilify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    events: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)": EventFragment;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketBurnt"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketNilified"): EventFragment;
}
interface InboundNonceSkippedEventObject {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject>;
type InboundNonceSkippedEventFilter = TypedEventFilter<InboundNonceSkippedEvent>;
interface PacketBurntEventObject {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketBurntEvent = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketBurntEventObject>;
type PacketBurntEventFilter = TypedEventFilter<PacketBurntEvent>;
interface PacketNilifiedEventObject {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
    payloadHash: string;
}
type PacketNilifiedEvent = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], PacketNilifiedEventObject>;
type PacketNilifiedEventFilter = TypedEventFilter<PacketNilifiedEvent>;
interface MessagingChannel extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessagingChannelInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            payloadHash: string;
        }>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
    burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    eid(overrides?: CallOverrides): Promise<number>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        eid(overrides?: CallOverrides): Promise<number>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter;
        "PacketBurnt(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter;
        PacketBurnt(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketBurntEventFilter;
        "PacketNilified(uint32,bytes32,address,uint64,bytes32)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter;
        PacketNilified(srcEid?: null, sender?: null, receiver?: null, nonce?: null, payloadHash?: null): PacketNilifiedEventFilter;
    };
    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burn(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lazyInboundNonce(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nilify(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        skip(_oapp: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessagingComposerInterface extends utils.Interface {
    functions: {
        "composeQueue(address,address,bytes32,uint16)": FunctionFragment;
        "lzCompose(address,address,bytes32,uint16,bytes,bytes)": FunctionFragment;
        "lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": FunctionFragment;
        "sendCompose(address,bytes32,uint16,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "composeQueue" | "lzCompose" | "lzComposeAlert" | "sendCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "composeQueue", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzComposeAlert", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzComposeAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    events: {
        "ComposeDelivered(address,address,bytes32,uint16)": EventFragment;
        "ComposeSent(address,address,bytes32,uint16,bytes)": EventFragment;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeAlert"): EventFragment;
}
interface ComposeDeliveredEventObject {
    from: string;
    to: string;
    guid: string;
    index: number;
}
type ComposeDeliveredEvent = TypedEvent<[
    string,
    string,
    string,
    number
], ComposeDeliveredEventObject>;
type ComposeDeliveredEventFilter = TypedEventFilter<ComposeDeliveredEvent>;
interface ComposeSentEventObject {
    from: string;
    to: string;
    guid: string;
    index: number;
    message: string;
}
type ComposeSentEvent = TypedEvent<[
    string,
    string,
    string,
    number,
    string
], ComposeSentEventObject>;
type ComposeSentEventFilter = TypedEventFilter<ComposeSentEvent>;
interface LzComposeAlertEventObject {
    from: string;
    to: string;
    executor: string;
    guid: string;
    index: number;
    gas: BigNumber;
    value: BigNumber;
    message: string;
    extraData: string;
    reason: string;
}
type LzComposeAlertEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string
], LzComposeAlertEventObject>;
type LzComposeAlertEventFilter = TypedEventFilter<LzComposeAlertEvent>;
interface MessagingComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessagingComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)"(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter;
        ComposeDelivered(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter;
        "ComposeSent(address,address,bytes32,uint16,bytes)"(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter;
        ComposeSent(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter;
        LzComposeAlert(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, executor?: PromiseOrValue<string> | null, guid?: null, index?: null, gas?: null, value?: null, message?: null, extraData?: null, reason?: null): LzComposeAlertEventFilter;
    };
    estimateGas: {
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        composeQueue(from: PromiseOrValue<string>, to: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzComposeAlert(_from: PromiseOrValue<string>, _to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, _value: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, _reason: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendCompose(_to: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessagingContextInterface extends utils.Interface {
    functions: {
        "getSendContext()": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getSendContext" | "isSendingMessage"): FunctionFragment;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    events: {};
}
interface MessagingContext extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessagingContextInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
    };
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type SetEidToModelTypeParamStruct = {
    dstEid: PromiseOrValue<BigNumberish>;
    modelType: PromiseOrValue<BigNumberish>;
};
declare namespace ILayerZeroPriceFeed {
    type ArbitrumPriceExtStruct = {
        gasPerL2Tx: PromiseOrValue<BigNumberish>;
        gasPerL1CallDataByte: PromiseOrValue<BigNumberish>;
    };
    type ArbitrumPriceExtStructOutput = [BigNumber, number] & {
        gasPerL2Tx: BigNumber;
        gasPerL1CallDataByte: number;
    };
    type PriceStruct = {
        priceRatio: PromiseOrValue<BigNumberish>;
        gasPriceInUnit: PromiseOrValue<BigNumberish>;
        gasPerByte: PromiseOrValue<BigNumberish>;
    };
    type PriceStructOutput = [BigNumber, BigNumber, number] & {
        priceRatio: BigNumber;
        gasPriceInUnit: BigNumber;
        gasPerByte: number;
    };
    type UpdatePriceStruct = {
        eid: PromiseOrValue<BigNumberish>;
        price: ILayerZeroPriceFeed.PriceStruct;
    };
    type UpdatePriceStructOutput = [
        number,
        ILayerZeroPriceFeed.PriceStructOutput
    ] & {
        eid: number;
        price: ILayerZeroPriceFeed.PriceStructOutput;
    };
    type UpdatePriceExtStruct = {
        eid: PromiseOrValue<BigNumberish>;
        price: ILayerZeroPriceFeed.PriceStruct;
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStruct;
    };
    type UpdatePriceExtStructOutput = [
        number,
        ILayerZeroPriceFeed.PriceStructOutput,
        ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput
    ] & {
        eid: number;
        price: ILayerZeroPriceFeed.PriceStructOutput;
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput;
    };
}
interface PriceFeedInterface extends utils.Interface {
    functions: {
        "ARBITRUM_COMPRESSION_PERCENT()": FunctionFragment;
        "arbitrumPriceExt()": FunctionFragment;
        "eidToModelType(uint32)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "estimateFeeByChain(uint16,uint256,uint256)": FunctionFragment;
        "estimateFeeByEid(uint32,uint256,uint256)": FunctionFragment;
        "estimateFeeOnSend(uint32,uint256,uint256)": FunctionFragment;
        "getFee(uint32,uint256,uint256)": FunctionFragment;
        "getPrice(uint32)": FunctionFragment;
        "getPrice(uint16)": FunctionFragment;
        "getPriceRatioDenominator()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "nativeTokenPriceUSD()": FunctionFragment;
        "owner()": FunctionFragment;
        "priceUpdater(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setArbitrumCompressionPercent(uint128)": FunctionFragment;
        "setEidToModelType((uint32,uint8)[])": FunctionFragment;
        "setEndpoint(address)": FunctionFragment;
        "setNativeTokenPriceUSD(uint128)": FunctionFragment;
        "setPrice((uint32,(uint128,uint64,uint32))[])": FunctionFragment;
        "setPriceForArbitrum((uint32,(uint128,uint64,uint32),(uint64,uint32)))": FunctionFragment;
        "setPriceRatioDenominator(uint128)": FunctionFragment;
        "setPriceUpdater(address,bool)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ARBITRUM_COMPRESSION_PERCENT" | "arbitrumPriceExt" | "eidToModelType" | "endpoint" | "estimateFeeByChain" | "estimateFeeByEid" | "estimateFeeOnSend" | "getFee" | "getPrice(uint32)" | "getPrice(uint16)" | "getPriceRatioDenominator" | "initialize" | "nativeTokenPriceUSD" | "owner" | "priceUpdater" | "renounceOwnership" | "setArbitrumCompressionPercent" | "setEidToModelType" | "setEndpoint" | "setNativeTokenPriceUSD" | "setPrice" | "setPriceForArbitrum" | "setPriceRatioDenominator" | "setPriceUpdater" | "transferOwnership" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "ARBITRUM_COMPRESSION_PERCENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "arbitrumPriceExt", values?: undefined): string;
    encodeFunctionData(functionFragment: "eidToModelType", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "estimateFeeByChain", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "estimateFeeByEid", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "estimateFeeOnSend", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPrice(uint32)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPrice(uint16)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPriceRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "nativeTokenPriceUSD", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceUpdater", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setArbitrumCompressionPercent", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setEidToModelType", values: [SetEidToModelTypeParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setEndpoint", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setNativeTokenPriceUSD", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrice", values: [ILayerZeroPriceFeed.UpdatePriceStruct[]]): string;
    encodeFunctionData(functionFragment: "setPriceForArbitrum", values: [ILayerZeroPriceFeed.UpdatePriceExtStruct]): string;
    encodeFunctionData(functionFragment: "setPriceRatioDenominator", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceUpdater", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "ARBITRUM_COMPRESSION_PERCENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "arbitrumPriceExt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eidToModelType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeByChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeByEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice(uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice(uint16)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeTokenPriceUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceUpdater", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArbitrumCompressionPercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEidToModelType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeTokenPriceUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceForArbitrum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceUpdater", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface InitializedEventObject {
    version: number;
}
type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
interface OwnershipTransferredEventObject$3 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$3 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$3>;
type OwnershipTransferredEventFilter$3 = TypedEventFilter<OwnershipTransferredEvent$3>;
interface PriceFeed extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PriceFeedInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<[ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput]>;
        eidToModelType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
        }>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ILayerZeroPriceFeed.PriceStructOutput
        ] & {
            price: ILayerZeroPriceFeed.PriceStructOutput;
        }>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ILayerZeroPriceFeed.PriceStructOutput
        ] & {
            price: ILayerZeroPriceFeed.PriceStructOutput;
        }>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEidToModelType(_params: SetEidToModelTypeParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
    arbitrumPriceExt(overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput>;
    eidToModelType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        fee: BigNumber;
        priceRatio: BigNumber;
    }>;
    estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
    estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
    "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
    getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
    initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEidToModelType(_params: SetEidToModelTypeParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput>;
        eidToModelType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
        }>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setEidToModelType(_params: SetEidToModelTypeParamStruct[], overrides?: CallOverrides): Promise<void>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: CallOverrides): Promise<void>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: CallOverrides): Promise<void>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$3;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$3;
    };
    estimateGas: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<BigNumber>;
        eidToModelType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEidToModelType(_params: SetEidToModelTypeParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eidToModelType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEidToModelType(_params: SetEidToModelTypeParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type SetConfigParamStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface ReceiveLibBaseE2Interface extends utils.Interface {
    functions: {
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "setConfig(address,(uint32,uint32,bytes)[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getConfig" | "isSupportedEid" | "messageLibType" | "setConfig" | "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [PromiseOrValue<string>, SetConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {};
}
interface ReceiveLibBaseE2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ReceiveLibBaseE2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    callStatic: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    filters: {};
    estimateGas: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ExecutorConfigStruct$1 = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type ExecutorConfigStructOutput$1 = [number, string] & {
    maxMessageSize: number;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    config: ExecutorConfigStruct$1;
};
type SetDefaultExecutorConfigParamStructOutput$1 = [
    number,
    ExecutorConfigStructOutput$1
] & {
    eid: number;
    config: ExecutorConfigStructOutput$1;
};
interface SendLibBaseInterface extends utils.Interface {
    functions: {
        "executorConfigs(address,uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getExecutorConfig(address,uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDefaultExecutorConfigs((uint32,(uint32,address))[])": FunctionFragment;
        "setTreasuryNativeFeeCap(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "executorConfigs" | "fees" | "getExecutorConfig" | "owner" | "renounceOwnership" | "setDefaultExecutorConfigs" | "setTreasuryNativeFeeCap" | "transferOwnership" | "treasury"): FunctionFragment;
    encodeFunctionData(functionFragment: "executorConfigs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "setTreasuryNativeFeeCap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryNativeFeeCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    events: {
        "DefaultExecutorConfigsSet(tuple[])": EventFragment;
        "ExecutorConfigSet(address,uint32,tuple)": EventFragment;
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "TreasuryNativeFeeCapSet(uint256)": EventFragment;
        "TreasurySet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryNativeFeeCapSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
}
interface DefaultExecutorConfigsSetEventObject$1 {
    params: SetDefaultExecutorConfigParamStructOutput$1[];
}
type DefaultExecutorConfigsSetEvent$1 = TypedEvent<[
    SetDefaultExecutorConfigParamStructOutput$1[]
], DefaultExecutorConfigsSetEventObject$1>;
type DefaultExecutorConfigsSetEventFilter$1 = TypedEventFilter<DefaultExecutorConfigsSetEvent$1>;
interface ExecutorConfigSetEventObject$1 {
    oapp: string;
    eid: number;
    config: ExecutorConfigStructOutput$1;
}
type ExecutorConfigSetEvent$1 = TypedEvent<[
    string,
    number,
    ExecutorConfigStructOutput$1
], ExecutorConfigSetEventObject$1>;
type ExecutorConfigSetEventFilter$1 = TypedEventFilter<ExecutorConfigSetEvent$1>;
interface ExecutorFeePaidEventObject$1 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$1 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$1>;
type ExecutorFeePaidEventFilter$1 = TypedEventFilter<ExecutorFeePaidEvent$1>;
interface OwnershipTransferredEventObject$2 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$2 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$2>;
type OwnershipTransferredEventFilter$2 = TypedEventFilter<OwnershipTransferredEvent$2>;
interface TreasuryNativeFeeCapSetEventObject$1 {
    newTreasuryNativeFeeCap: BigNumber;
}
type TreasuryNativeFeeCapSetEvent$1 = TypedEvent<[
    BigNumber
], TreasuryNativeFeeCapSetEventObject$1>;
type TreasuryNativeFeeCapSetEventFilter$1 = TypedEventFilter<TreasuryNativeFeeCapSetEvent$1>;
interface TreasurySetEventObject$1 {
    treasury: string;
}
type TreasurySetEvent$1 = TypedEvent<[string], TreasurySetEventObject$1>;
type TreasurySetEventFilter$1 = TypedEventFilter<TreasurySetEvent$1>;
interface SendLibBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SendLibBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ExecutorConfigStructOutput$1
        ] & {
            rtnConfig: ExecutorConfigStructOutput$1;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
    };
    executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
        maxMessageSize: number;
        executor: string;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$1>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput$1>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DefaultExecutorConfigsSet(tuple[])"(params?: null): DefaultExecutorConfigsSetEventFilter$1;
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter$1;
        "ExecutorConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$1;
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter$1;
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$1;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$2;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$2;
        "TreasuryNativeFeeCapSet(uint256)"(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$1;
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter$1;
        "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter$1;
        TreasurySet(treasury?: null): TreasurySetEventFilter$1;
    };
    estimateGas: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ExecutorConfigStruct = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type ExecutorConfigStructOutput = [number, string] & {
    maxMessageSize: number;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>;
    config: ExecutorConfigStruct;
};
type SetDefaultExecutorConfigParamStructOutput = [
    number,
    ExecutorConfigStructOutput
] & {
    eid: number;
    config: ExecutorConfigStructOutput;
};
type PacketStruct = {
    nonce: PromiseOrValue<BigNumberish>;
    srcEid: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    dstEid: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<BytesLike>;
    guid: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
};
type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
};
type SetConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>;
    configType: PromiseOrValue<BigNumberish>;
    config: PromiseOrValue<BytesLike>;
};
interface SendLibBaseE2Interface extends utils.Interface {
    functions: {
        "executorConfigs(address,uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "getExecutorConfig(address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "messageLibType()": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setConfig(address,(uint32,uint32,bytes)[])": FunctionFragment;
        "setDefaultExecutorConfigs((uint32,(uint32,address))[])": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "setTreasuryNativeFeeCap(uint256)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "executorConfigs" | "fees" | "getConfig" | "getExecutorConfig" | "isSupportedEid" | "messageLibType" | "owner" | "quote" | "renounceOwnership" | "send" | "setConfig" | "setDefaultExecutorConfigs" | "setTreasury" | "setTreasuryNativeFeeCap" | "supportsInterface" | "transferOwnership" | "treasury" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "executorConfigs", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [PromiseOrValue<string>, SetConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasuryNativeFeeCap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasuryNativeFeeCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {
        "DefaultExecutorConfigsSet(tuple[])": EventFragment;
        "ExecutorConfigSet(address,uint32,tuple)": EventFragment;
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "LzTokenFeeWithdrawn(address,address,uint256)": EventFragment;
        "NativeFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "TreasuryNativeFeeCapSet(uint256)": EventFragment;
        "TreasurySet(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryNativeFeeCapSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
}
interface DefaultExecutorConfigsSetEventObject {
    params: SetDefaultExecutorConfigParamStructOutput[];
}
type DefaultExecutorConfigsSetEvent = TypedEvent<[
    SetDefaultExecutorConfigParamStructOutput[]
], DefaultExecutorConfigsSetEventObject>;
type DefaultExecutorConfigsSetEventFilter = TypedEventFilter<DefaultExecutorConfigsSetEvent>;
interface ExecutorConfigSetEventObject {
    oapp: string;
    eid: number;
    config: ExecutorConfigStructOutput;
}
type ExecutorConfigSetEvent = TypedEvent<[
    string,
    number,
    ExecutorConfigStructOutput
], ExecutorConfigSetEventObject>;
type ExecutorConfigSetEventFilter = TypedEventFilter<ExecutorConfigSetEvent>;
interface ExecutorFeePaidEventObject {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject>;
type ExecutorFeePaidEventFilter = TypedEventFilter<ExecutorFeePaidEvent>;
interface LzTokenFeeWithdrawnEventObject {
    lzToken: string;
    receiver: string;
    amount: BigNumber;
}
type LzTokenFeeWithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], LzTokenFeeWithdrawnEventObject>;
type LzTokenFeeWithdrawnEventFilter = TypedEventFilter<LzTokenFeeWithdrawnEvent>;
interface NativeFeeWithdrawnEventObject {
    worker: string;
    receiver: string;
    amount: BigNumber;
}
type NativeFeeWithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], NativeFeeWithdrawnEventObject>;
type NativeFeeWithdrawnEventFilter = TypedEventFilter<NativeFeeWithdrawnEvent>;
interface OwnershipTransferredEventObject$1 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$1 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$1>;
type OwnershipTransferredEventFilter$1 = TypedEventFilter<OwnershipTransferredEvent$1>;
interface TreasuryNativeFeeCapSetEventObject {
    newTreasuryNativeFeeCap: BigNumber;
}
type TreasuryNativeFeeCapSetEvent = TypedEvent<[
    BigNumber
], TreasuryNativeFeeCapSetEventObject>;
type TreasuryNativeFeeCapSetEventFilter = TypedEventFilter<TreasuryNativeFeeCapSetEvent>;
interface TreasurySetEventObject {
    treasury: string;
}
type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>;
type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;
interface SendLibBaseE2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SendLibBaseE2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ExecutorConfigStructOutput
        ] & {
            rtnConfig: ExecutorConfigStructOutput;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        messageLibType(overrides?: CallOverrides): Promise<[number]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
        maxMessageSize: number;
        executor: string;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    messageLibType(overrides?: CallOverrides): Promise<number>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, string] & {
            maxMessageSize: number;
            executor: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ExecutorConfigStructOutput>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        messageLibType(overrides?: CallOverrides): Promise<number>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<MessagingFeeStructOutput>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[MessagingFeeStructOutput, string]>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultExecutorConfigsSet(tuple[])"(params?: null): DefaultExecutorConfigsSetEventFilter;
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter;
        "ExecutorConfigSet(address,uint32,tuple)"(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter;
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter;
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter;
        "LzTokenFeeWithdrawn(address,address,uint256)"(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter;
        LzTokenFeeWithdrawn(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter;
        "NativeFeeWithdrawn(address,address,uint256)"(worker?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter;
        NativeFeeWithdrawn(worker?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$1;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$1;
        "TreasuryNativeFeeCapSet(uint256)"(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter;
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter;
        "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter;
        TreasurySet(treasury?: null): TreasurySetEventFilter;
    };
    estimateGas: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        messageLibType(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        executorConfigs(oapp: PromiseOrValue<string>, eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecutorConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _config: SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultExecutorConfigs(_params: SetDefaultExecutorConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasuryNativeFeeCap(_newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface TreasuryInterface extends utils.Interface {
    functions: {
        "getFee(address,uint32,uint256,bool)": FunctionFragment;
        "lzTokenEnabled()": FunctionFragment;
        "lzTokenFee()": FunctionFragment;
        "nativeBP()": FunctionFragment;
        "owner()": FunctionFragment;
        "payFee(address,uint32,uint256,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setLzTokenEnabled(bool)": FunctionFragment;
        "setLzTokenFee(uint256)": FunctionFragment;
        "setNativeFeeBP(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawLzToken(address,address,address,uint256)": FunctionFragment;
        "withdrawNativeFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "lzTokenEnabled" | "lzTokenFee" | "nativeBP" | "owner" | "payFee" | "renounceOwnership" | "setLzTokenEnabled" | "setLzTokenFee" | "setNativeFeeBP" | "transferOwnership" | "withdrawLzToken" | "withdrawNativeFee" | "withdrawToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "lzTokenEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzTokenFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeBP", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "payFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setLzTokenEnabled", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setLzTokenFee", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setNativeFeeBP", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawLzToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawNativeFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeBP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzTokenEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeFeeBP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawNativeFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
interface Treasury extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TreasuryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<[boolean]>;
        lzTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;
        nativeBP(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        payFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzTokenEnabled(_lzTokenEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzTokenFee(_lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzToken(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    lzTokenEnabled(overrides?: CallOverrides): Promise<boolean>;
    lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
    nativeBP(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    payFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzTokenEnabled(_lzTokenEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzTokenFee(_lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzToken(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<boolean>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        nativeBP(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        payFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setLzTokenEnabled(_lzTokenEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setLzTokenFee(_lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawLzToken(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        nativeBP(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        payFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzTokenEnabled(_lzTokenEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzTokenFee(_lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzToken(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzTokenEnabled(_lzTokenEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzTokenFee(_lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzToken(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface WorkerInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getSupportedOptionTypes(uint32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasAcl(address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawToken(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "defaultMultiplierBps" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Paused(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface PausedEventObject {
    account: string;
}
type PausedEvent = TypedEvent<[string], PausedEventObject>;
type PausedEventFilter = TypedEventFilter<PausedEvent>;
interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject>;
type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;
interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject>;
type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;
interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject>;
type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;
interface SetDefaultMultiplierBpsEventObject {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject>;
type SetDefaultMultiplierBpsEventFilter = TypedEventFilter<SetDefaultMultiplierBpsEvent>;
interface SetPriceFeedEventObject {
    priceFeed: string;
}
type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>;
type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>;
interface SetSupportedOptionTypesEventObject {
    dstEid: number;
    optionTypes: number[];
}
type SetSupportedOptionTypesEvent = TypedEvent<[
    number,
    number[]
], SetSupportedOptionTypesEventObject>;
type SetSupportedOptionTypesEventFilter = TypedEventFilter<SetSupportedOptionTypesEvent>;
interface SetWorkerLibEventObject {
    workerLib: string;
}
type SetWorkerLibEvent = TypedEvent<[string], SetWorkerLibEventObject>;
type SetWorkerLibEventFilter = TypedEventFilter<SetWorkerLibEvent>;
interface UnpausedEventObject {
    account: string;
}
type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;
type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;
interface WithdrawEventObject {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject>;
type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;
interface Worker extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WorkerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Paused(address)"(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter;
        "SetSupportedOptionTypes(uint32,uint8[])"(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter;
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter;
        "Unpaused(address)"(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, _optionTypes: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type ExecutorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Executor__factory extends ContractFactory {
    constructor(...args: ExecutorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Executor>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Executor;
    connect(signer: Signer): Executor__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50614810806100206000396000f3fe60806040526004361061024d5760003560e01c8063717e8a4211610138578063c2803b2c116100b0578063cd88b9031161007f578063d2ae210411610064578063d2ae210414610804578063d547741f14610856578063fa34c84e1461087657600080fd5b8063cd88b903146107d1578063cfc32570146107f157600080fd5b8063c2803b2c14610736578063c358de0a14610764578063c416aa5114610784578063c7b2370b146107b157600080fd5b80637cd447341161010757806391d14854116100ec57806391d14854146105f15780639e94496514610644578063a217fddf1461072157600080fd5b80637cd44734146105cb5780638624ba07146105de57600080fd5b8063717e8a4214610513578063724e78da146105335780637260753714610553578063741bef1a1461059e57600080fd5b80632f2ff15d116101cb5780633d85ac331161019a5780635c975abb1161017f5780635c975abb146104885780635e280f11146104a0578063709eb664146104f357600080fd5b80633d85ac3314610455578063475b6d9e1461047557600080fd5b80632f2ff15d146103e25780633146646a1461040257806336568abe146104225780633927c0751461044257600080fd5b80631095b6d711610222578063248a9ca311610207578063248a9ca31461035757806326e67a37146103955780632de11376146103c257600080fd5b80631095b6d71461031757806316c38b3c1461033757600080fd5b80629fc68114610252578062bf2e801461027457806301e33667146102c757806301ffc9a7146102e7575b600080fd5b34801561025e57600080fd5b5061027261026d3660046136f8565b610896565b005b34801561028057600080fd5b5060c9546102af907c0100000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b3480156102d357600080fd5b506102726102e236600461379d565b610c35565b3480156102f357600080fd5b506103076103023660046137d9565b610c70565b60405190151581526020016102be565b34801561032357600080fd5b5061027261033236600461379d565b610d09565b34801561034357600080fd5b50610272610352366004613829565b610e98565b34801561036357600080fd5b50610387610372366004613846565b60009081526065602052604090206001015490565b6040519081526020016102be565b3480156103a157600080fd5b506103b56103b0366004613871565b610ebd565b6040516102be919061388e565b3480156103ce57600080fd5b506103076103dd3660046138d5565b610f44565b3480156103ee57600080fd5b506102726103fd3660046138f0565b611028565b34801561040e57600080fd5b5061027261041d366004613965565b611052565b34801561042e57600080fd5b5061027261043d3660046138f0565b61111b565b610272610450366004613a0e565b61114d565b34801561046157600080fd5b50610272610470366004613aec565b611237565b610272610483366004613bf4565b61141d565b34801561049457600080fd5b5060975460ff16610307565b3480156104ac57600080fd5b5061012e546104ce9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102be565b3480156104ff57600080fd5b5061038761050e366004613c75565b611471565b34801561051f57600080fd5b5061038761052e366004613c75565b6115ca565b34801561053f57600080fd5b5061027261054e3660046138d5565b611750565b34801561055f57600080fd5b5061012e546105899074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016102be565b3480156105aa57600080fd5b5060ca546104ce9073ffffffffffffffffffffffffffffffffffffffff1681565b6102726105d9366004613ce6565b6117ed565b6102726105ec366004613dac565b6119a2565b3480156105fd57600080fd5b5061030761060c3660046138f0565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561065057600080fd5b506106d461065f366004613871565b61012d602052600090815260409020805460019091015467ffffffffffffffff8083169261ffff68010000000000000000820416926fffffffffffffffffffffffffffffffff6a0100000000000000000000909204821692918116917001000000000000000000000000000000009091041685565b6040805167ffffffffffffffff968716815261ffff90951660208601526fffffffffffffffffffffffffffffffff938416908501529116606083015291909116608082015260a0016102be565b34801561072d57600080fd5b50610387600081565b34801561074257600080fd5b5061012f546104ce9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561077057600080fd5b5061027261077f366004613e1f565b611bb8565b34801561079057600080fd5b5060c9546104ce9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156107bd57600080fd5b506102726107cc3660046138d5565b611c65565b3480156107dd57600080fd5b506102726107ec366004613e3a565b611d02565b6102726107ff366004613ec2565b611d4c565b34801561081057600080fd5b5060c95461083d9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102be565b34801561086257600080fd5b506102726108713660046138f0565b611f08565b34801561088257600080fd5b506102726108913660046138d5565b611f2d565b60006108c07fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166109195773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561093b565b3373ffffffffffffffffffffffffffffffffffffffff82161461093b57600080fd5b600054610100900460ff161580801561095b5750600054600160ff909116105b806109755750303b158015610975575060005460ff166001145b610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a6457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610a6c61201b565b610a7b8686612ee087876120bc565b61012e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16908117909155604080517f416ecebf000000000000000000000000000000000000000000000000000000008152905163416ecebf916004808201926020929091908290030181865afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b379190613ef7565b61012e80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff939093169290920291909117905561012f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89161790558015610c2b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c5f81612178565b610c6a848484612185565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610d0357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d3381612178565b73ffffffffffffffffffffffffffffffffffffffff841660009081527fe3a3b2721d010eec8988605a93cd7c15d969808c0e2b42f6155dc2b4fa13c081602052604090205460ff16610db1576040517f5ee08b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b6000610ea381612178565b8115610eb557610eb16121b5565b5050565b610eb161223a565b63ffffffff8116600090815260cb6020908152604091829020805483518184028101840190945280845260609392830182828015610f3857602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610f095790505b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f0f6a9529577ef7bf1cbc8fccda1cc3c881f755c7e92e34c7c4deac1fa3c1c791602052604081205460ff1615610f9957506000919050565b60c95474010000000000000000000000000000000000000000900467ffffffffffffffff16158061100e575073ffffffffffffffffffffffffffffffffffffffff821660009081527f35c5067391a9036240763c1067bfa438a7b0131204a675a2fe562dd73782ce85602052604090205460ff165b1561101b57506001919050565b506000919050565b919050565b60008281526065602052604090206001015461104381612178565b61104d8383612291565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561107c81612178565b611084612358565b61012f546040517fe65106f800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e65106f8906110df90879087908790600401613f5d565b600060405180830381600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b50505050610c6a600160fb55565b6040517fdec9f03100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561117781612178565b61117f612358565b61119f8861118d86866123d2565b61119787876123f5565b8a8a8a61240e565b5061012f546040517fe65106f800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e65106f8906111fb90879087908790600401613f5d565b600060405180830381600087803b15801561121557600080fd5b505af1158015611229573d6000803e3d6000fd5b50505050610c2b600160fb55565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561126181612178565b60005b82518110156113e157600083828151811061128157611281613f81565b6020908102919091018101516040805160a080820183528385015167ffffffffffffffff908116835260608086015161ffff9081168589019081526080808901516fffffffffffffffffffffffffffffffff908116888a01908152968a01518116948801948552888a01518616918801918252985163ffffffff16600090815261012d909a5296909820945185549851945188166a0100000000000000000000027fffffffffffff00000000000000000000000000000000ffffffffffffffffffff9590921668010000000000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090991690841617979097179290921695909517825551600191820180549351909516700100000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090931693169290921717909155919091019050611264565b507fb99f6de5e22c60c178b03bfacf2daeb4b6089f5b37e0fe2c48a5d5141191fc53826040516114119190613fb0565b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561144781612178565b61144f612358565b61145d87878787878761240e565b50611468600160fb55565b50505050505050565b60008461147d81610f44565b6114b3576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114bb612583565b6040805160a08101825260ca5473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8a1660208084018290528a831684860152606084018a905260c95461ffff7c01000000000000000000000000000000000000000000000000000000008204166080860152600092835261012d9091529084902093517f434ee016000000000000000000000000000000000000000000000000000000008152929391169163434ee0169161157d918591908a908a90600401614057565b602060405180830381865afa15801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115be9190614117565b98975050505050505050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de6115f681612178565b8561160081610f44565b611636576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61163e612583565b6040805160a08101825260ca5473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8b1660208084018290528b831684860152606084018b905260c95461ffff7c01000000000000000000000000000000000000000000000000000000008204166080860152600092835261012d9091529084902093517f566ef762000000000000000000000000000000000000000000000000000000008152929391169163566ef76291611700918591908b908b90600401614057565b6020604051808303816000875af115801561171f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117439190614117565b9998505050505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561177a81612178565b60ca80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d90602001611411565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561181781612178565b61181f612358565b61012e546040517f91d20fa100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906391d20fa19084903490611888908f908f908f908f908f908f908f908f90600401614130565b6000604051808303818589803b1580156118a157600080fd5b5088f194505050505080156118b4575060015b61198c573d8080156118e2576040519150601f19603f3d011682016040523d82523d6000602084013e6118e7565b606091505b5061012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663697fe6b68c8c8c8c88348e8e8e8e8c6040518c63ffffffff1660e01b81526004016119589b9a9998979695949392919061420a565b600060405180830381600087803b15801561197257600080fd5b505af1158015611986573d6000803e3d6000fd5b50505050505b611996600160fb55565b50505050505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756119cc81612178565b6119d4612358565b61012e54600090611a1490602085019074010000000000000000000000000000000000000000900463ffffffff16611a0c82876138d5565b89898961240e565b90506000611a2282346142cc565b61012e5490915073ffffffffffffffffffffffffffffffffffffffff16630c0c389e60e08601358360208801611a58818a6138d5565b60808a0135611a6a60a08c018c6142df565b611a7760c08e018e6142df565b6040518a63ffffffff1660e01b8152600401611a999796959493929190614380565b6000604051808303818589803b158015611ab257600080fd5b5088f19450505050508015611ac5575060015b611ba5573d808015611af3576040519150601f19603f3d011682016040523d82523d6000602084013e611af8565b606091505b5061012e5473ffffffffffffffffffffffffffffffffffffffff16636bf73fa360208701611b2681896138d5565b608089013560e08a013587611b3e60a08d018d6142df565b611b4b60c08f018f6142df565b8b6040518b63ffffffff1660e01b8152600401611b719a999897969594939291906143e4565b600060405180830381600087803b158015611b8b57600080fd5b505af1158015611b9f573d6000803e3d6000fd5b50505050505b5050611bb1600160fb55565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611be281612178565b60c980547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001611411565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c8f81612178565b60c980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001611411565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d2c81612178565b63ffffffff8416600090815260cb60205260409020611bb19084846134d5565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d7681612178565b611d7e612358565b61012e5473ffffffffffffffffffffffffffffffffffffffff16630c0c389e60e08401353460208601611db181886138d5565b6080880135611dc360a08a018a6142df565b611dd060c08c018c6142df565b6040518a63ffffffff1660e01b8152600401611df29796959493929190614380565b6000604051808303818589803b158015611e0b57600080fd5b5088f19450505050508015611e1e575060015b611efe573d808015611e4c576040519150601f19603f3d011682016040523d82523d6000602084013e611e51565b606091505b5061012e5473ffffffffffffffffffffffffffffffffffffffff16636bf73fa360208501611e7f81876138d5565b608087013560e088013534611e9760a08b018b6142df565b611ea460c08d018d6142df565b8b6040518b63ffffffff1660e01b8152600401611eca9a999897969594939291906143e4565b600060405180830381600087803b158015611ee457600080fd5b505af1158015611ef8573d6000803e3d6000fd5b50505050505b610eb1600160fb55565b600082815260656020526040902060010154611f2381612178565b61104d83836125f0565b6000611f577fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff8116611fb05773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611fd2565b3373ffffffffffffffffffffffffffffffffffffffff821614611fd257600080fd5b5061012f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff166120b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109fd565b6120ba6126b6565b565b600054610100900460ff16612153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109fd565b61215b61274d565b61216361274d565b61216b6127e4565b611bb185858585856128a5565b6121828133612a8a565b50565b73ffffffffffffffffffffffffffffffffffffffff83166121aa5761104d8282612b44565b61104d838383612c4a565b6121bd612583565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122103390565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b612242612cb8565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612210565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156122f05750600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b1561234e5760c980546014906123279074010000000000000000000000000000000000000000900467ffffffffffffffff16614470565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610eb18282612d24565b600260fb54036123c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109fd565b600260fb55565b600160fb55565b60006123e26031602d8486614497565b6123eb916144c1565b60e01c9392505050565b60006124076124048484612e18565b90565b9392505050565b6000808367ffffffffffffffff81111561242a5761242a6135b7565b604051908082528060200260200182016040528015612453578160200160208202803683370190505b50905060005b8481101561253657600086868381811061247557612475613f81565b90506040020180360381019061248b9190614509565b90506000816000015173ffffffffffffffffffffffffffffffffffffffff1682602001518790604051600060405180830381858888f193505050503d80600081146124f2576040519150601f19603f3d011682016040523d82523d6000602084013e6124f7565b606091505b505090508084848151811061250e5761250e613f81565b91151560209283029190910182015282015161252a9086614560565b94505050600101612459565b507f1f48172553121d8bf273ce457a5a3dd180d464e0add3e0143045b7fa039c3468888888888886604051612570969594939291906145b1565b60405180910390a1509695505050505050565b60975460ff16156120ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016109fd565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8214801561264e5750600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b156126ac5760c980546014906126859074010000000000000000000000000000000000000000900467ffffffffffffffff16614643565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610eb18282612e31565b600054610100900460ff166123cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109fd565b600054610100900460ff166120ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109fd565b600054610100900460ff1661287b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109fd565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600054610100900460ff1661293c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109fd565b60c980547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000061ffff86160217905560ca80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff868116919091179091558216156129e0576129e0600083612291565b60005b8551811015612a3757612a2f7f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110612a2257612a22613f81565b6020026020010151612291565b6001016129e3565b5060005b8151811015612a8257612a7a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110612a2257612a22613f81565b600101612a3b565b505050505050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610eb157612aca81612eec565b612ad5836020612f0b565b604051602001612ae6929190614685565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526109fd91600401614706565b73ffffffffffffffffffffffffffffffffffffffff8216612b91576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612beb576040519150601f19603f3d011682016040523d82523d6000602084013e612bf0565b606091505b505090508061104d576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016109fd565b73ffffffffffffffffffffffffffffffffffffffff8216612c97576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61104d73ffffffffffffffffffffffffffffffffffffffff8416838361314e565b60975460ff166120ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016109fd565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610eb157600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612dba3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000612e28605160318486614497565b61240791614719565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610eb157600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060610d0373ffffffffffffffffffffffffffffffffffffffff831660145b60606000612f1a836002614755565b612f25906002614560565b67ffffffffffffffff811115612f3d57612f3d6135b7565b6040519080825280601f01601f191660200182016040528015612f67576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612f9e57612f9e613f81565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061300157613001613f81565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061303d846002614755565b613048906001614560565b90505b60018111156130e5577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061308957613089613f81565b1a60f81b82828151811061309f5761309f613f81565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936130de8161476c565b905061304b565b508315612407576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109fd565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261104d928692916000916132199185169084906132c6565b905080516000148061323a57508080602001905181019061323a91906147a1565b61104d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109fd565b60606132d584846000856132dd565b949350505050565b60608247101561336f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161339891906147be565b60006040518083038185875af1925050503d80600081146133d5576040519150601f19603f3d011682016040523d82523d6000602084013e6133da565b606091505b50915091506133eb878383876133f6565b979650505050505050565b6060831561348c5782516000036134855773ffffffffffffffffffffffffffffffffffffffff85163b613485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109fd565b50816132d5565b6132d583838151156134a15781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd9190614706565b82805482825590600052602060002090601f0160209004810192821561356e5791602002820160005b8382111561353f57833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026134fe565b801561356c5782816101000a81549060ff021916905560010160208160000104928301926001030261353f565b505b5061357a92915061357e565b5090565b5b8082111561357a576000815560010161357f565b803573ffffffffffffffffffffffffffffffffffffffff8116811461102357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613609576136096135b7565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613656576136566135b7565b604052919050565b600067ffffffffffffffff821115613678576136786135b7565b5060051b60200190565b600082601f83011261369357600080fd5b813560206136a86136a38361365e565b61360f565b8083825260208201915060208460051b8701019350868411156136ca57600080fd5b602086015b848110156136ed576136e081613593565b83529183019183016136cf565b509695505050505050565b60008060008060008060c0878903121561371157600080fd5b61371a87613593565b955061372860208801613593565b9450604087013567ffffffffffffffff8082111561374557600080fd5b6137518a838b01613682565b955061375f60608a01613593565b945061376d60808a01613593565b935060a089013591508082111561378357600080fd5b5061379089828a01613682565b9150509295509295509295565b6000806000606084860312156137b257600080fd5b6137bb84613593565b92506137c960208501613593565b9150604084013590509250925092565b6000602082840312156137eb57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461240757600080fd5b801515811461218257600080fd5b60006020828403121561383b57600080fd5b81356124078161381b565b60006020828403121561385857600080fd5b5035919050565b63ffffffff8116811461218257600080fd5b60006020828403121561388357600080fd5b81356124078161385f565b6020808252825182820181905260009190848201906040850190845b818110156138c957835160ff16835292840192918401916001016138aa565b50909695505050505050565b6000602082840312156138e757600080fd5b61240782613593565b6000806040838503121561390357600080fd5b8235915061391360208401613593565b90509250929050565b60008083601f84011261392e57600080fd5b50813567ffffffffffffffff81111561394657600080fd5b60208301915083602082850101111561395e57600080fd5b9250929050565b60008060006040848603121561397a57600080fd5b833567ffffffffffffffff81111561399157600080fd5b61399d8682870161391c565b909790965060209590950135949350505050565b6000606082840312156139c357600080fd5b50919050565b60008083601f8401126139db57600080fd5b50813567ffffffffffffffff8111156139f357600080fd5b6020830191508360208260061b850101111561395e57600080fd5b600080600080600080600060e0888a031215613a2957600080fd5b613a3389896139b1565b9650606088013567ffffffffffffffff80821115613a5057600080fd5b613a5c8b838c016139c9565b909850965060808a0135955060a08a0135915080821115613a7c57600080fd5b50613a898a828b0161391c565b989b979a5095989497959660c090950135949350505050565b803567ffffffffffffffff8116811461102357600080fd5b803561ffff8116811461102357600080fd5b80356fffffffffffffffffffffffffffffffff8116811461102357600080fd5b60006020808385031215613aff57600080fd5b823567ffffffffffffffff811115613b1657600080fd5b8301601f81018513613b2757600080fd5b8035613b356136a38261365e565b81815260c09182028301840191848201919088841115613b5457600080fd5b938501935b83851015613be85780858a031215613b715760008081fd5b613b796135e6565b8535613b848161385f565b8152613b91868801613aa2565b878201526040613ba2818801613aa2565b908201526060613bb3878201613aba565b908201526080613bc4878201613acc565b9082015260a0613bd5878201613acc565b9082015283529384019391850191613b59565b50979650505050505050565b60008060008060008060e08789031215613c0d57600080fd5b613c1788886139b1565b95506060870135613c278161385f565b9450613c3560808801613593565b935060a087013567ffffffffffffffff811115613c5157600080fd5b613c5d89828a016139c9565b979a969950949794969560c090950135949350505050565b600080600080600060808688031215613c8d57600080fd5b8535613c988161385f565b9450613ca660208701613593565b935060408601359250606086013567ffffffffffffffff811115613cc957600080fd5b613cd58882890161391c565b969995985093965092949392505050565b600080600080600080600080600060e08a8c031215613d0457600080fd5b613d0d8a613593565b9850613d1b60208b01613593565b975060408a01359650613d3060608b01613aba565b955060808a013567ffffffffffffffff80821115613d4d57600080fd5b613d598d838e0161391c565b909750955060a08c0135915080821115613d7257600080fd5b50613d7f8c828d0161391c565b9a9d999c50979a9699959894979660c00135949350505050565b600061010082840312156139c357600080fd5b60008060008060608587031215613dc257600080fd5b843567ffffffffffffffff80821115613dda57600080fd5b613de6888389016139c9565b9096509450602087013593506040870135915080821115613e0657600080fd5b50613e1387828801613d99565b91505092959194509250565b600060208284031215613e3157600080fd5b61240782613aba565b600080600060408486031215613e4f57600080fd5b8335613e5a8161385f565b9250602084013567ffffffffffffffff80821115613e7757600080fd5b818601915086601f830112613e8b57600080fd5b813581811115613e9a57600080fd5b8760208260051b8501011115613eaf57600080fd5b6020830194508093505050509250925092565b600060208284031215613ed457600080fd5b813567ffffffffffffffff811115613eeb57600080fd5b6132d584828501613d99565b600060208284031215613f0957600080fd5b81516124078161385f565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000613f71604083018587613f14565b9050826020830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b8281101561404a578151805163ffffffff1685528681015167ffffffffffffffff9081168887015286820151168686015260608082015161ffff16908601526080808201516fffffffffffffffffffffffffffffffff9081169187019190915260a091820151169085015260c09093019290850190600101613fcd565b5091979650505050505050565b845173ffffffffffffffffffffffffffffffffffffffff908116825260208087015163ffffffff1690830152604080870151909116818301526060808701519083015260808087015161ffff90811682850152865467ffffffffffffffff80821660a08701529381901c90911660c085015260501c6fffffffffffffffffffffffffffffffff90811660e08501526001870154908116610100850152901c1661012082015261016061014082018190526000906133eb8382018587613f14565b60006020828403121561412957600080fd5b5051919050565b600073ffffffffffffffffffffffffffffffffffffffff808b168352808a1660208401525087604083015261ffff8716606083015260c0608083015261417a60c083018688613f14565b82810360a084015261418d818587613f14565b9b9a5050505050505050505050565b60005b838110156141b757818101518382015260200161419f565b50506000910152565b600081518084526141d881602086016020860161419c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600061012073ffffffffffffffffffffffffffffffffffffffff808f168452808e166020850152508b604084015261ffff8b1660608401528960808401528860a08401528060c0840152614261818401888a613f14565b905082810360e0840152614276818688613f14565b905082810361010084015261428b81856141c0565b9e9d5050505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610d0357610d0361429d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261431457600080fd5b83018035915067ffffffffffffffff82111561432f57600080fd5b60200191503681900382131561395e57600080fd5b803561434f8161385f565b63ffffffff1682526020818101359083015267ffffffffffffffff61437660408301613aa2565b1660408301525050565b61438a8189614344565b73ffffffffffffffffffffffffffffffffffffffff8716606082015285608082015260e060a082015260006143c360e083018688613f14565b82810360c08401526143d6818587613f14565b9a9950505050505050505050565b60006101406143f3838e614344565b73ffffffffffffffffffffffffffffffffffffffff8c1660608401528a60808401528960a08401528860c08401528060e0840152614434818401888a613f14565b905082810361010084015261444a818688613f14565b905082810361012084015261445f81856141c0565b9d9c50505050505050505050505050565b600067ffffffffffffffff80831681810361448d5761448d61429d565b6001019392505050565b600080858511156144a757600080fd5b838611156144b457600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156145015780818660040360031b1b83161692505b505092915050565b60006040828403121561451b57600080fd5b6040516040810181811067ffffffffffffffff8211171561453e5761453e6135b7565b60405261454a83613593565b8152602083013560208201528091505092915050565b80820180821115610d0357610d0361429d565b60008151808452602080850194506020840160005b838110156145a6578151151587529582019590820190600101614588565b509495945050505050565b600060e082016145c1838a614344565b63ffffffff8816606084015273ffffffffffffffffffffffffffffffffffffffff878116608085015260e060a0850152908590528590610100840160005b87811015614630578261461185613593565b16825260208481013590830152604093840193909101906001016145ff565b5084810360c086015261418d8187614573565b600067ffffffffffffffff82168061465d5761465d61429d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146bd81601785016020880161419c565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516146fa81602884016020880161419c565b01602801949350505050565b60208152600061240760208301846141c0565b80356020831015610d03577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b8082028115828204841417610d0357610d0361429d565b60008161477b5761477b61429d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156147b357600080fd5b81516124078161381b565b600082516147d081846020870161419c565b919091019291505056fea2646970667358221220bb5382f6bd016bb892c3d11f11c63089cd2f3aef30e1fdb7c7ed28d930c1142c64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.NativeDropParams[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "bool[]";
            readonly name: "success";
            readonly type: "bool[]";
        }];
        readonly name: "NativeDropApplied";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "compose302";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "lzReceiveBaseGas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativeCap";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint64";
            readonly name: "lzComposeBaseGas";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "execute301";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.ExecutionParams";
            readonly name: "_executionParams";
            readonly type: "tuple";
        }];
        readonly name: "execute302";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveUln301";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_messageLibs";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_roleAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.NativeDropParams[]";
            readonly name: "_nativeDropParams";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nativeDropGasLimit";
            readonly type: "uint256";
        }];
        readonly name: "nativeDrop";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.NativeDropParams[]";
            readonly name: "_nativeDropParams";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nativeDropGasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "nativeDropAndExecute301";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.NativeDropParams[]";
            readonly name: "_nativeDropParams";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nativeDropGasLimit";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.ExecutionParams";
            readonly name: "_executionParams";
            readonly type: "tuple";
        }];
        readonly name: "nativeDropAndExecute302";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiveUln301";
            readonly type: "address";
        }];
        readonly name: "onUpgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "receiveUln301";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Executor;
}

declare class ILayerZeroEndpointV2__factory$1 {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzComposeAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroEndpointV2Interface$1;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroEndpointV2$1;
}

type index$E_Executor__factory = Executor__factory;
declare const index$E_Executor__factory: typeof Executor__factory;
declare namespace index$E {
  export { index$E_Executor__factory as Executor__factory, ILayerZeroEndpointV2__factory$1 as ILayerZeroEndpointV2__factory };
}

type DVNDecompressorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVNDecompressor__factory extends ContractFactory {
    constructor(...args: DVNDecompressorConstructorParams);
    deploy(_vid: PromiseOrValue<BigNumberish>, _dvns: DVNParamStruct[], _targets: TargetParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DVNDecompressor>;
    getDeployTransaction(_vid: PromiseOrValue<BigNumberish>, _dvns: DVNParamStruct[], _targets: TargetParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DVNDecompressor;
    connect(signer: Signer): DVNDecompressor__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b5060405162001baf38038062001baf8339810160408190526200003491620002f2565b6200003f3362000137565b63ffffffff831660805260005b8251811015620000bb5760008382815181106200006d576200006d6200041b565b60209081029190910181015180820151905161ffff16600090815262100001909252604090912080546001600160a01b0319166001600160a01b03909216919091179055506001016200004c565b5060005b81518110156200012d576000828281518110620000e057620000e06200041b565b60209081029190910181015180820151905160ff16600090815262100002909252604090912080546001600160a01b0319166001600160a01b0390921691909117905550600101620000bf565b5050505062000431565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620001c257620001c262000187565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620001f357620001f362000187565b604052919050565b60006001600160401b0382111562000217576200021762000187565b5060051b60200190565b80516001600160a01b03811681146200023957600080fd5b919050565b600082601f8301126200025057600080fd5b81516020620002696200026383620001fb565b620001c8565b82815260069290921b840181019181810190868411156200028957600080fd5b8286015b84811015620002e75760408189031215620002a85760008081fd5b620002b26200019d565b815160ff81168114620002c55760008081fd5b8152620002d482860162000221565b818601528352918301916040016200028d565b509695505050505050565b6000806000606084860312156200030857600080fd5b835163ffffffff811681146200031d57600080fd5b602085810151919450906001600160401b03808211156200033d57600080fd5b818701915087601f8301126200035257600080fd5b8151620003636200026382620001fb565b81815260069190911b8301840190848101908a8311156200038357600080fd5b938501935b82851015620003e7576040858c031215620003a35760008081fd5b620003ad6200019d565b855161ffff81168114620003c15760008081fd5b8152620003d086880162000221565b818801528252604094909401939085019062000388565b60408a015190975094505050808311156200040157600080fd5b505062000411868287016200023e565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b60805161175b62000454600039600081816103350152610419015261175b6000f3fe6080604052600436106100f35760003560e01c8063701c06101161008a57806397a656141161005957806397a65614146102d6578063ac423ce1146102de578063cf34c76814610323578063f2fde38b1461036c57600080fd5b8063701c06101461020c578063715018a6146102765780637302478c1461028b5780638da5cb5b146102ab57600080fd5b8063422b45fc116100c6578063422b45fc146101855780634736d978146101a55780634e4fe306146101ca57806362a8fdcb146101f757600080fd5b806308b8a08b146100f857806309c5eabe1461011a578063269f12601461013a5780633bec591e1461015a575b600080fd5b34801561010457600080fd5b50610118610113366004611016565b61038c565b005b34801561012657600080fd5b506101186101353660046110b3565b610407565b34801561014657600080fd5b5061011861015536600461115b565b6104e7565b34801561016657600080fd5b5061016f61059b565b60405161017c9190611279565b60405180910390f35b34801561019157600080fd5b506101186101a0366004611293565b6105b8565b3480156101b157600080fd5b506101bc6210000081565b60405190815260200161017c565b3480156101d657600080fd5b506101ea6101e5366004611320565b610630565b60405161017c9190611342565b34801561020357600080fd5b506101bc600281565b34801561021857600080fd5b50610251610227366004611386565b621000016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161017c565b34801561028257600080fd5b50610118610772565b34801561029757600080fd5b506101186102a63660046113a1565b610786565b3480156102b757600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610251565b610118610839565b3480156102ea57600080fd5b506102516102f936600461145b565b621000026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561032f57600080fd5b506103577f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161017c565b34801561037857600080fd5b50610118610387366004611476565b610849565b610394610900565b60005b8151811015610403576210000260008383815181106103b8576103b8611491565b60209081029190910181015160ff16825281019190915260400160002080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600101610397565b5050565b61040f610900565b60008061044184847f000000000000000000000000000000000000000000000000000000000000000062100002610981565b61ffff82166000908152621000016020526040908190205490517fb143044b00000000000000000000000000000000000000000000000000000000815292945090925073ffffffffffffffffffffffffffffffffffffffff169063b143044b906104af9084906004016114c0565b600060405180830381600087803b1580156104c957600080fd5b505af11580156104dd573d6000803e3d6000fd5b5050505050505050565b6104ef610900565b60005b81518110156104035781818151811061050d5761050d611491565b60200260200101516020015162100001600084848151811061053157610531611491565b6020908102919091018101515161ffff16825281019190915260400160002080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556001016104f2565b60606105b36105ae3660048160006115a3565b610d01565b905090565b6105c0610900565b60005b8151811015610403576210000160008383815181106105e4576105e4611491565b60209081029190910181015161ffff16825281019190915260400160002080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556001016105c3565b60608260028110806106455750621000008110155b15610684576040517f50695b8f000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b8260028110806106975750621000008110155b156106d1576040517f50695b8f0000000000000000000000000000000000000000000000000000000081526004810182905260240161067b565b8385101561076a5784840367ffffffffffffffff8111156106f4576106f4610f35565b60405190808252806020026020018201604052801561071d578160200160208202803683370190505b509250845b848110156107685760018162100000811061073f5761073f611491565b0154848783038151811061075557610755611491565b6020908102919091010152600101610722565b505b505092915050565b61077a610900565b6107846000610e9e565b565b61078e610900565b60005b8151811015610403578181815181106107ac576107ac611491565b6020026020010151602001516210000260008484815181106107d0576107d0611491565b6020908102919091018101515160ff16825281019190915260400160002080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600101610791565b61078461084461059b565b610f13565b610851610900565b73ffffffffffffffffffffffffffffffffffffffff81166108f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161067b565b6108fd81610e9e565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067b565b60006060818681876109946002836115cd565b926109a1939291906115a3565b6109aa9161160d565b60f01c92506109ba6002826115cd565b905060008782886109cc6001836115cd565b926109d9939291906115a3565b6109e291611653565b60f81c90506109f26001836115cd565b91508060ff1667ffffffffffffffff811115610a1057610a10610f35565b604051908082528060200260200182016040528015610a6b57816020015b6040805160a0810182526000808252602082018190526060928201839052828201526080810191909152815260200190600190039081610a2e5790505b50925060005b8160ff16811015610cf557600089848a610a8c6001836115cd565b92610a99939291906115a3565b610aa291611653565b60f81c9050610ab26001856115cd565b935060008a858b610ac46010836115cd565b92610ad1939291906115a3565b610ada91611699565b60801c9050610aea6010866115cd565b945060008b868c610afc6002836115cd565b92610b09939291906115a3565b610b129161160d565b60f01c9050610b226002876115cd565b955060008c878d610b3761ffff8616836115cd565b92610b44939291906115a3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929350610b8a9250505061ffff8316886115cd565b965060008d888e610b9c6008836115cd565b92610ba9939291906115a3565b610bb2916116df565b60c01c9050610bc26008896115cd565b975060008e898f610bdd67ffffffffffffffff8616836115cd565b92610bea939291906115a3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929350610c369250505067ffffffffffffffff83168a6115cd565b98506040518060a001604052808e63ffffffff1681526020018d60008960ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001866fffffffffffffffffffffffffffffffff168152602001848152508a8881518110610cd757610cd7611491565b60200260200101819052505050505050508080600101915050610a71565b50505094509492505050565b60405160208101838301845b81811015610e6c57803560008160fe1c60008114610d425760018114610d5d5760028114610db85760038114610dcc57610ddc565b60018360001a01803688379590950194505050600101610d0d565b60018360001a601f16017f2000000000000000000000000000000000000000000000000000000000000000841615610d9c576000875280602003870196505b8060018601883795860195939093016001019250610d0d915050565b8260041b60f41c9150600284019350610ddc565b8260041b60ec1c91506003840193505b506000818015610dfa5760018114610e025782600101549150610e06565b339150610e06565b3091505b508260021b60fe1c60008114610e375760018114610e455760028114610e56578160081b8752601f87019650610e63565b818752602087019650610e63565b8160601b8752601487019650610e63565b8160e01b87526004870196505b50505050610d0d565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820301825260405292915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080825160208401305af43d6000803e8015610f2f573d6000f35b503d6000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610f8757610f87610f35565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610fd457610fd4610f35565b604052919050565b600067ffffffffffffffff821115610ff657610ff6610f35565b5060051b60200190565b803560ff8116811461101157600080fd5b919050565b6000602080838503121561102957600080fd5b823567ffffffffffffffff81111561104057600080fd5b8301601f8101851361105157600080fd5b803561106461105f82610fdc565b610f8d565b81815260059190911b8201830190838101908783111561108357600080fd5b928401925b828410156110a85761109984611000565b82529284019290840190611088565b979650505050505050565b600080602083850312156110c657600080fd5b823567ffffffffffffffff808211156110de57600080fd5b818501915085601f8301126110f257600080fd5b81358181111561110157600080fd5b86602082850101111561111357600080fd5b60209290920196919550909350505050565b803561ffff8116811461101157600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461101157600080fd5b6000602080838503121561116e57600080fd5b823567ffffffffffffffff81111561118557600080fd5b8301601f8101851361119657600080fd5b80356111a461105f82610fdc565b81815260069190911b820183019083810190878311156111c357600080fd5b928401925b828410156110a857604084890312156111e15760008081fd5b6111e9610f64565b6111f285611125565b81526111ff868601611137565b81870152825260409390930192908401906111c8565b6000815180845260005b8181101561123b5760208185018101518683018201520161121f565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061128c6020830184611215565b9392505050565b600060208083850312156112a657600080fd5b823567ffffffffffffffff8111156112bd57600080fd5b8301601f810185136112ce57600080fd5b80356112dc61105f82610fdc565b81815260059190911b820183019083810190878311156112fb57600080fd5b928401925b828410156110a85761131184611125565b82529284019290840190611300565b6000806040838503121561133357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561137a5783518352928401929184019160010161135e565b50909695505050505050565b60006020828403121561139857600080fd5b61128c82611125565b600060208083850312156113b457600080fd5b823567ffffffffffffffff8111156113cb57600080fd5b8301601f810185136113dc57600080fd5b80356113ea61105f82610fdc565b81815260069190911b8201830190838101908783111561140957600080fd5b928401925b828410156110a857604084890312156114275760008081fd5b61142f610f64565b61143885611000565b8152611445868601611137565b818701528252604093909301929084019061140e565b60006020828403121561146d57600080fd5b61128c82611000565b60006020828403121561148857600080fd5b61128c82611137565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015611595577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160a063ffffffff825116855273ffffffffffffffffffffffffffffffffffffffff89830151168986015287820151818987015261155982870182611215565b9150506060808301518187015250608080830151925085820381870152506115818183611215565b9689019694505050908601906001016114e9565b509098975050505050505050565b600080858511156115b357600080fd5b838611156115c057600080fd5b5050820193919092039150565b80820180821115611607577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7fffff000000000000000000000000000000000000000000000000000000000000813581811691600285101561076a5760029490940360031b84901b1690921692915050565b7fff00000000000000000000000000000000000000000000000000000000000000813581811691600185101561076a5760019490940360031b84901b1690921692915050565b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000813581811691601085101561076a5760109490940360031b84901b1690921692915050565b7fffffffffffffffff000000000000000000000000000000000000000000000000813581811691600885101561076a5760089490940360031b84901b169092169291505056fea26469706673582212205d07514a5c59af558128ae1928b147b419ec35d859c85183662042180affbb1264736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_vid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "idx";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }];
            readonly internalType: "struct DVNParam[]";
            readonly name: "_dvns";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "idx";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }];
            readonly internalType: "struct TargetParam[]";
            readonly name: "_targets";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectDictAccess";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_DICT_LEN";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RESERVE_DICT_LEN";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "idx";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }];
            readonly internalType: "struct DVNParam[]";
            readonly name: "_dvns";
            readonly type: "tuple[]";
        }];
        readonly name: "addDVNs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "idx";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }];
            readonly internalType: "struct TargetParam[]";
            readonly name: "_targets";
            readonly type: "tuple[]";
        }];
        readonly name: "addTargets";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decompress";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decompressed";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "raw";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "dvns";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_encoded";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "begin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "end";
            readonly type: "uint256";
        }];
        readonly name: "getData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "res";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16[]";
            readonly name: "_idx";
            readonly type: "uint16[]";
        }];
        readonly name: "removeDVNs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "_idx";
            readonly type: "uint8[]";
        }];
        readonly name: "removeTargets";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "index";
            readonly type: "uint8";
        }];
        readonly name: "targets";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DVNDecompressorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DVNDecompressor;
}

declare class DecompressorExtension__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectDictAccess";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_DICT_LEN";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RESERVE_DICT_LEN";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decompress";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decompressed";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "raw";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "begin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "end";
            readonly type: "uint256";
        }];
        readonly name: "getData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "res";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DecompressorExtensionInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DecompressorExtension;
}

type ExecutorDecompressorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ExecutorDecompressor__factory extends ContractFactory {
    constructor(...args: ExecutorDecompressorConstructorParams);
    deploy(_executor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ExecutorDecompressor>;
    getDeployTransaction(_executor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ExecutorDecompressor;
    connect(signer: Signer): ExecutorDecompressor__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161183f38038061183f83398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b60805161173f61010060003960008181610266015281816102ff015281816104f3015281816105b30152610645015261173f6000f3fe6080604052600436106100d25760003560e01c806366e654181161007f5780638da5cb5b116100595780638da5cb5b1461020057806397a656141461024c578063c34c08e514610254578063f2fde38b1461028857600080fd5b806366e65418146101ab578063715018a6146101cb578063882357e8146101e057600080fd5b80634e4fe306116100b05780634e4fe306146101495780634f49d4711461017657806362a8fdcb1461019657600080fd5b806337ce069c146100d75780633bec591e146100f95780634736d97814610124575b600080fd5b3480156100e357600080fd5b506100f76100f23660046110e0565b6102a8565b005b34801561010557600080fd5b5061010e61036e565b60405161011b91906111b6565b60405180910390f35b34801561013057600080fd5b5061013b6210000081565b60405190815260200161011b565b34801561015557600080fd5b506101696101643660046111d0565b61038b565b60405161011b91906111f2565b34801561018257600080fd5b506100f76101913660046110e0565b6104cd565b3480156101a257600080fd5b5061013b600281565b3480156101b757600080fd5b506100f76101c63660046110e0565b61058d565b3480156101d757600080fd5b506100f7610612565b3480156101ec57600080fd5b506100f76101fb3660046110e0565b610626565b34801561020c57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011b565b6100f76106d9565b34801561026057600080fd5b506102277f000000000000000000000000000000000000000000000000000000000000000081565b34801561029457600080fd5b506100f76102a3366004611236565b6106e9565b6102b06107a0565b6000806102bd8484610821565b6040517f3146646a000000000000000000000000000000000000000000000000000000008152919350915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633146646a90610336908590859060040161126c565b600060405180830381600087803b15801561035057600080fd5b505af1158015610364573d6000803e3d6000fd5b5050505050505050565b606061038661038136600481600061128e565b61088c565b905090565b60608260028110806103a05750621000008110155b156103df576040517f50695b8f000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b8260028110806103f25750621000008110155b1561042c576040517f50695b8f000000000000000000000000000000000000000000000000000000008152600481018290526024016103d6565b838510156104c55784840367ffffffffffffffff81111561044f5761044f6112b8565b604051908082528060200260200182016040528015610478578160200160208202803683370190505b509250845b848110156104c35760018162100000811061049a5761049a6112e7565b015484878303815181106104b0576104b06112e7565b602090810291909101015260010161047d565b505b505092915050565b6104d56107a0565b60008060008060006104e78787610a29565b945094509450945094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633927c07586868686866040518663ffffffff1660e01b8152600401610552959493929190611373565b600060405180830381600087803b15801561056c57600080fd5b505af1158015610580573d6000803e3d6000fd5b5050505050505050505050565b6105956107a0565b60008060008060006105a78787610b84565b945094509450945094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663475b6d9e86868686866040518663ffffffff1660e01b81526004016105529594939291906113dc565b61061a6107a0565b6106246000610c82565b565b61062e6107a0565b600080600061063d8585610cf7565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638624ba078484846040518463ffffffff1660e01b81526004016106a093929190611454565b600060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050505050505050565b6106246106e461036e565b610f6e565b6106f16107a0565b73ffffffffffffffffffffffffffffffffffffffff8116610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103d6565b61079d81610c82565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d6565b60606000610832600882858761128e565b61083b9161151e565b60c01c905061084d836008818761128e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929793965092945050505050565b60405160208101838301845b818110156109f757803560008160fe1c600081146108cd57600181146108e85760028114610943576003811461095757610967565b60018360001a01803688379590950194505050600101610898565b60018360001a601f16017f2000000000000000000000000000000000000000000000000000000000000000841615610927576000875280602003870196505b8060018601883795860195939093016001019250610898915050565b8260041b60f41c9150600284019350610967565b8260041b60ec1c91506003840193505b506000818015610985576001811461098d5782600101549150610991565b339150610991565b3091505b508260021b60fe1c600081146109c257600181146109d057600281146109e1578160081b8752601f870196506109ee565b8187526020870196506109ee565b8160601b87526014870196506109ee565b8160e01b87526004870196505b50505050610898565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820301825260405292915050565b6040805160608101825260008082526020820181905291810191909152606060008181610a59600482888a61128e565b610a6291611564565b60e01c9250610a7560086004888a61128e565b610a7e91611564565b60e01c8552610a9160286008888a61128e565b610a9a916115aa565b6020860152610aad60306028888a61128e565b610ab69161151e565b60c01c6040860152610acc60386030888a61128e565b610ad59161151e565b60c01c90506000610aea60406038898b61128e565b610af39161151e565b60c01c90506040888189610b078583611616565b92610b149392919061128e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929650610b609250505067ffffffffffffffff831682611616565b9050610b76610b718983818d61128e565b610f90565b955050509295509295909350565b6040805160608101825260008082526020820181905291810191909152600080606081610bb4600482888a61128e565b610bbd91611564565b60e01c9050610bd060086004888a61128e565b610bd991611564565b60e01c8552610bec60286008888a61128e565b610bf5916115aa565b6020860152610c0860306028888a61128e565b610c119161151e565b60c01c6040860152610c2760446030888a61128e565b610c3091611629565b60601c92506000610c436004604461166f565b9050610c5560ff82166044898b61128e565b610c5e91611564565b60e01c9450610c75610b718860ff8416818c61128e565b9250509295509295909350565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160c081018252600080825282516060818101855282825260208083018490528286018490528401919091529282018190528183018390526080820183905260a0820181905290610d4f60046000868861128e565b610d5891611564565b60e01c9150610d6b60086004868861128e565b610d7491611564565b602082015160e09190911c9052610d8f60286008868861128e565b610d98916115aa565b6020808301510152610dae60306028868861128e565b610db79161151e565b602082015160c09190911c604090910152610dd660446030868861128e565b610ddf91611629565b60601c8152610df260646044868861128e565b610dfb916115aa565b6040820152610e0e606c6064868861128e565b610e179161151e565b60c01c60a08201526000610e2f6074606c878961128e565b610e389161151e565b60c01c90506074868187610e4c8583611616565b92610e599392919061128e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506060840152610ea667ffffffffffffffff831682611616565b90506000878288610eb8600883611616565b92610ec59392919061128e565b610ece9161151e565b60c01c9050610ede600883611616565b9150878288610ef767ffffffffffffffff851683611616565b92610f049392919061128e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506080850152610f5167ffffffffffffffff821683611616565b9150610f62610b718884818c61128e565b95505050509250925092565b600080825160208401305af43d6000803e8015610f8a573d6000f35b503d6000fd5b6060600080610fa0601d85611688565b90508067ffffffffffffffff811115610fbb57610fbb6112b8565b60405190808252806020026020018201604052801561100057816020015b6040805180820190915260008082526020820152815260200190600190039081610fd95790505b50925060005b818110156104c35785838661101c601483611616565b926110299392919061128e565b61103291611629565b60601c848281518110611047576110476112e7565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff9091169052611077601484611616565b9250858386611087600983611616565b926110949392919061128e565b61109d916116c3565b60b81c68ffffffffffffffffff168482815181106110bd576110bd6112e7565b60209081029190910181015101526110d6600984611616565b9250600101611006565b600080602083850312156110f357600080fd5b823567ffffffffffffffff8082111561110b57600080fd5b818501915085601f83011261111f57600080fd5b81358181111561112e57600080fd5b86602082850101111561114057600080fd5b60209290920196919550909350505050565b6000815180845260005b818110156111785760208185018101518683018201520161115c565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006111c96020830184611152565b9392505050565b600080604083850312156111e357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561122a5783518352928401929184019160010161120e565b50909695505050505050565b60006020828403121561124857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146111c957600080fd5b60408152600061127f6040830185611152565b90508260208301529392505050565b6000808585111561129e57600080fd5b838611156112ab57600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151808452602080850194506020840160005b83811015611368578151805173ffffffffffffffffffffffffffffffffffffffff168852830151838801526040909601959082019060010161132b565b509495945050505050565b855163ffffffff1681526020808701519082015260408087015167ffffffffffffffff169082015260e0606082015260006113b160e0830187611316565b85608084015282810360a08401526113c98186611152565b9150508260c08301529695505050505050565b855163ffffffff1681526020808701519082015260408087015167ffffffffffffffff169082015263ffffffff8516606082015273ffffffffffffffffffffffffffffffffffffffff8416608082015260e060a0820152600061144260e0830185611316565b90508260c08301529695505050505050565b6060815260006114676060830186611316565b846020840152828103604084015261010073ffffffffffffffffffffffffffffffffffffffff855116825260208501516114c86020840182805163ffffffff1682526020808201519083015260409081015167ffffffffffffffff16910152565b506040850151608083015260608501518160a08401526114ea82840182611152565b915050608085015182820360c08401526115048282611152565b91505060a085015160e08301528092505050949350505050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156104c55760089490940360031b84901b1690921692915050565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156104c55760049490940360031b84901b1690921692915050565b803560208310156115e1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b165b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156115e1576115e16115e7565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156104c55760149490940360031b84901b1690921692915050565b60ff81811683821601908111156115e1576115e16115e7565b6000826116be577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7fffffffffffffffffff000000000000000000000000000000000000000000000081358181169160098510156104c55760099490940360031b84901b169092169291505056fea26469706673582212201e6e2b8c660b38a39cb8b1ec607acb2babcc6d7646b55f90241609dfc2e0b64364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract Executor";
            readonly name: "_executor";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectDictAccess";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_DICT_LEN";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RESERVE_DICT_LEN";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decompress";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decompressed";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "raw";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_encoded";
            readonly type: "bytes";
        }];
        readonly name: "execute301";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "executor";
        readonly outputs: readonly [{
            readonly internalType: "contract Executor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "begin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "end";
            readonly type: "uint256";
        }];
        readonly name: "getData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "res";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_encoded";
            readonly type: "bytes";
        }];
        readonly name: "nativeDrop";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_encoded";
            readonly type: "bytes";
        }];
        readonly name: "nativeDropAndExecute301";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_encoded";
            readonly type: "bytes";
        }];
        readonly name: "nativeDropAndExecute302";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ExecutorDecompressorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ExecutorDecompressor;
}

type index$D_DVNDecompressor__factory = DVNDecompressor__factory;
declare const index$D_DVNDecompressor__factory: typeof DVNDecompressor__factory;
type index$D_DecompressorExtension__factory = DecompressorExtension__factory;
declare const index$D_DecompressorExtension__factory: typeof DecompressorExtension__factory;
type index$D_ExecutorDecompressor__factory = ExecutorDecompressor__factory;
declare const index$D_ExecutorDecompressor__factory: typeof ExecutorDecompressor__factory;
declare namespace index$D {
  export { index$D_DVNDecompressor__factory as DVNDecompressor__factory, index$D_DecompressorExtension__factory as DecompressorExtension__factory, index$D_ExecutorDecompressor__factory as ExecutorDecompressor__factory };
}

declare class IExecutor__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.NativeDropParams[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "bool[]";
            readonly name: "success";
            readonly type: "bool[]";
        }];
        readonly name: "NativeDropApplied";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IExecutor$2;
}

declare class IExecutorFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "Executor_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "Executor_InvalidExecutorOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "Executor_NativeAmountExceedsCap";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_NoOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "Executor_UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_ZeroLzComposeGasProvided";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_ZeroLzReceiveGasProvided";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IExecutorFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IExecutorFeeLib$1;
}

declare class ILayerZeroComposer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroComposer;
}

declare class ILayerZeroEndpointV2__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly name: "DelegateSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketBurnt";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketNilified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "nilify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroEndpointV2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroEndpointV2;
}

declare class ILayerZeroExecutor__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroExecutor;
}

declare class ILayerZeroPriceFeed__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "provided";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }];
        readonly name: "LZ_PriceFeed_InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "l2Eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_PriceFeed_NotAnOPStack";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PriceFeed_OnlyPriceUpdater";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByEid";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatioDenominator";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativePriceUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatioDenominator";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativePriceUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPriceRatioDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeTokenPriceUSD";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroPriceFeedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroPriceFeed$1;
}

declare class ILayerZeroReceiver__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroReceiverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroReceiver;
}

declare class ILayerZeroTreasury__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalNativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalNativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroTreasuryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroTreasury;
}

declare class IMessageLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLib;
}

declare class IMessageLibManager__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLibManager;
}

declare class IMessagingChannel__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketBurnt";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketNilified";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "nilify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessagingChannelInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessagingChannel;
}

declare class IMessagingComposer__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessagingComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessagingComposer;
}

declare class IMessagingContext__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IMessagingContextInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessagingContext;
}

declare class ISendLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedPacket";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ISendLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ISendLib;
}

declare class IWorker__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IWorkerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IWorker;
}

type index$C_IExecutorFeeLib__factory = IExecutorFeeLib__factory;
declare const index$C_IExecutorFeeLib__factory: typeof IExecutorFeeLib__factory;
type index$C_IExecutor__factory = IExecutor__factory;
declare const index$C_IExecutor__factory: typeof IExecutor__factory;
type index$C_ILayerZeroComposer__factory = ILayerZeroComposer__factory;
declare const index$C_ILayerZeroComposer__factory: typeof ILayerZeroComposer__factory;
type index$C_ILayerZeroEndpointV2__factory = ILayerZeroEndpointV2__factory;
declare const index$C_ILayerZeroEndpointV2__factory: typeof ILayerZeroEndpointV2__factory;
type index$C_ILayerZeroExecutor__factory = ILayerZeroExecutor__factory;
declare const index$C_ILayerZeroExecutor__factory: typeof ILayerZeroExecutor__factory;
type index$C_ILayerZeroPriceFeed__factory = ILayerZeroPriceFeed__factory;
declare const index$C_ILayerZeroPriceFeed__factory: typeof ILayerZeroPriceFeed__factory;
type index$C_ILayerZeroReceiver__factory = ILayerZeroReceiver__factory;
declare const index$C_ILayerZeroReceiver__factory: typeof ILayerZeroReceiver__factory;
type index$C_ILayerZeroTreasury__factory = ILayerZeroTreasury__factory;
declare const index$C_ILayerZeroTreasury__factory: typeof ILayerZeroTreasury__factory;
type index$C_IMessageLibManager__factory = IMessageLibManager__factory;
declare const index$C_IMessageLibManager__factory: typeof IMessageLibManager__factory;
type index$C_IMessageLib__factory = IMessageLib__factory;
declare const index$C_IMessageLib__factory: typeof IMessageLib__factory;
type index$C_IMessagingChannel__factory = IMessagingChannel__factory;
declare const index$C_IMessagingChannel__factory: typeof IMessagingChannel__factory;
type index$C_IMessagingComposer__factory = IMessagingComposer__factory;
declare const index$C_IMessagingComposer__factory: typeof IMessagingComposer__factory;
type index$C_IMessagingContext__factory = IMessagingContext__factory;
declare const index$C_IMessagingContext__factory: typeof IMessagingContext__factory;
type index$C_ISendLib__factory = ISendLib__factory;
declare const index$C_ISendLib__factory: typeof ISendLib__factory;
type index$C_IWorker__factory = IWorker__factory;
declare const index$C_IWorker__factory: typeof IWorker__factory;
declare namespace index$C {
  export { index$C_IExecutorFeeLib__factory as IExecutorFeeLib__factory, index$C_IExecutor__factory as IExecutor__factory, index$C_ILayerZeroComposer__factory as ILayerZeroComposer__factory, index$C_ILayerZeroEndpointV2__factory as ILayerZeroEndpointV2__factory, index$C_ILayerZeroExecutor__factory as ILayerZeroExecutor__factory, index$C_ILayerZeroPriceFeed__factory as ILayerZeroPriceFeed__factory, index$C_ILayerZeroReceiver__factory as ILayerZeroReceiver__factory, index$C_ILayerZeroTreasury__factory as ILayerZeroTreasury__factory, index$C_IMessageLibManager__factory as IMessageLibManager__factory, index$C_IMessageLib__factory as IMessageLib__factory, index$C_IMessagingChannel__factory as IMessagingChannel__factory, index$C_IMessagingComposer__factory as IMessagingComposer__factory, index$C_IMessagingContext__factory as IMessagingContext__factory, index$C_ISendLib__factory as ISendLib__factory, index$C_IWorker__factory as IWorker__factory };
}

type AddressCastConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class AddressCast__factory extends ContractFactory {
    constructor(...args: AddressCastConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<AddressCast>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): AddressCast;
    connect(signer: Signer): AddressCast__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f0edbea7caac4e8f1f0fccd8f8141d9c88d475dde8672e25fabed0290ed375664736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AddressCast_InvalidAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressCast_InvalidSizeForAddress";
        readonly type: "error";
    }];
    static createInterface(): AddressCastInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AddressCast;
}

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Errors__factory extends ContractFactory {
    constructor(...args: ErrorsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Errors>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Errors;
    connect(signer: Signer): Errors__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee4e5ff80e72cf65c8cc5fa273578092c1f724159d71f20ab473329e530bea6b64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_ComposeNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requiredNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredLzToken";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedLzToken";
            readonly type: "uint256";
        }];
        readonly name: "LZ_InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "supplied";
            readonly type: "uint256";
        }];
        readonly name: "LZ_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidArgument";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "LZ_InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidPayloadHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidReceiveLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PathNotInitializable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PathNotVerifiable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_PayloadHashNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SendReentrancy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ZeroLzTokenFee";
        readonly type: "error";
    }];
    static createInterface(): ErrorsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Errors;
}

type TransferConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Transfer__factory extends ContractFactory {
    constructor(...args: TransferConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Transfer>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Transfer;
    connect(signer: Signer): Transfer__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208298bff483bd9b587924db4952d6da04dd43aeaf1837cb8523edf99d4a011eac64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }];
    static createInterface(): TransferInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Transfer;
}

type index$B_AddressCast__factory = AddressCast__factory;
declare const index$B_AddressCast__factory: typeof AddressCast__factory;
type index$B_Errors__factory = Errors__factory;
declare const index$B_Errors__factory: typeof Errors__factory;
type index$B_Transfer__factory = Transfer__factory;
declare const index$B_Transfer__factory: typeof Transfer__factory;
declare namespace index$B {
  export { index$B_AddressCast__factory as AddressCast__factory, index$B_Errors__factory as Errors__factory, index$B_Transfer__factory as Transfer__factory };
}

type ExecutorOptionsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ExecutorOptions__factory extends ContractFactory {
    constructor(...args: ExecutorOptionsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ExecutorOptions>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ExecutorOptions;
    connect(signer: Signer): ExecutorOptions__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202802f6fc7b0324d6e90f6b255a6d960eb59c14b267656809c799020401b377d164736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "Executor_InvalidLzComposeOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_InvalidLzReceiveOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_InvalidNativeDropOption";
        readonly type: "error";
    }];
    static createInterface(): ExecutorOptionsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ExecutorOptions;
}

type index$A_ExecutorOptions__factory = ExecutorOptions__factory;
declare const index$A_ExecutorOptions__factory: typeof ExecutorOptions__factory;
declare namespace index$A {
  export { index$A_ExecutorOptions__factory as ExecutorOptions__factory };
}

type BlockedMessageLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class BlockedMessageLib__factory extends ContractFactory {
    constructor(...args: BlockedMessageLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<BlockedMessageLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): BlockedMessageLib;
    connect(signer: Signer): BlockedMessageLib__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061026f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461007e5780631881d94d146100a657806354fd4d50146100b55780636750cd4c146100dc575b6040517f2657b6c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61009161008c366004610189565b6100f0565b60405190151581526020015b60405180910390f35b600260405161009d91906101d2565b6040805167ffffffffffffffff815260ff602082015260029181019190915260600161009d565b6100916100ea366004610213565b50600190565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f97f0258400000000000000000000000000000000000000000000000000000000148061018357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60006020828403121561019b57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146101cb57600080fd5b9392505050565b602081016003831061020d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60006020828403121561022557600080fd5b813563ffffffff811681146101cb57600080fdfea2646970667358221220468116af6289d47cca395a20001eab24a8adf35da1e528b23e346fe87a8bc04064736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_NotImplemented";
        readonly type: "error";
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): BlockedMessageLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): BlockedMessageLib;
}

type SimpleMessageLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class SimpleMessageLib__factory extends ContractFactory {
    constructor(...args: SimpleMessageLibConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SimpleMessageLib>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SimpleMessageLib;
    connect(signer: Signer): SimpleMessageLib__factory;
    static readonly bytecode = "0x60e06040523480156200001157600080fd5b50604051620020033803806200200383398101604081905262000034916200013f565b6200003f33620000d2565b6001600160a01b03808316608081905290821660a0526040805163416ecebf60e01b8152905163416ecebf916004808201926020929091908290030181865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b7919062000177565b63ffffffff1660c052505060636002556064600355620001a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013a57600080fd5b919050565b600080604083850312156200015357600080fd5b6200015e8362000122565b91506200016e6020840162000122565b90509250929050565b6000602082840312156200018a57600080fd5b815163ffffffff811681146200019f57600080fd5b9392505050565b60805160a05160c051611e11620001f260003960006103d40152600061034301526000818161030f015281816106ce015281816107fd01528181610a450152610d070152611e116000f3fe6080604052600436106101845760003560e01c8063715018a6116100d6578063996f79c01161007f578063dabca06311610059578063dabca063146104ff578063f2fde38b1461051f578063fd9be5221461053f5761018b565b8063996f79c01461049c578063aec336e6146104b2578063d80e9bd9146104d25761018b565b80638da5cb5b116100b05780638da5cb5b1461042d5780638f58aa7a1461045857806390953238146104785761018b565b8063715018a6146103ad57806372607537146103c257806372d713221461040b5761018b565b80634389e58f1161013857806361d027b31161011257806361d027b3146103315780636251b637146103655780636750cd4c1461038c5761018b565b80634389e58f146102a257806354fd4d50146102d15780635e280f11146102fd5761018b565b80631881d94d116101695780631881d94d146102145780631c7c294e14610230578063334993ff146102825761018b565b806301ffc9a7146101bd57806312cc947f146101f25761018b565b3661018b57005b6040517f2657b6c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156101c957600080fd5b506101dd6101d8366004611451565b61055f565b60405190151581526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d3660046114d5565b6105f8565b005b34801561022057600080fd5b5060026040516101e99190611517565b34801561023c57600080fd5b5060015461025d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e9565b34801561028e57600080fd5b5061021261029d366004611558565b6107d1565b3480156102ae57600080fd5b506102c26102bd3660046116a3565b6107e4565b6040516101e993929190611789565b3480156102dd57600080fd5b5060408051600080825260208201526002918101919091526060016101e9565b34801561030957600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561033d57600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037157600080fd5b5061037a600181565b60405160ff90911681526020016101e9565b34801561039857600080fd5b506101dd6103a73660046117e2565b50600190565b3480156103b957600080fd5b5061021261094a565b3480156103ce57600080fd5b506103f67f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101e9565b34801561041757600080fd5b5061042061095e565b6040516101e991906117fd565b34801561043957600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661025d565b34801561046457600080fd5b5061021261047336600461183d565b6109ec565b34801561048457600080fd5b5061048e60025481565b6040519081526020016101e9565b3480156104a857600080fd5b5061048e60035481565b3480156104be57600080fd5b506102126104cd366004611869565b610b47565b3480156104de57600080fd5b506104f26104ed366004611886565b610b96565b6040516101e99190611902565b34801561050b57600080fd5b5061021261051a366004611919565b610bda565b34801561052b57600080fd5b5061021261053a366004611869565b610bf2565b34801561054b57600080fd5b5061021261055a36600461183d565b610cae565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f97f025840000000000000000000000000000000000000000000000000000000014806105f257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff1615801590610637575060015473ffffffffffffffffffffffffffffffffffffffff163314155b1561066e576040517f70b216ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180606001604052806106858585610da1565b63ffffffff16815260200161069a8585610dc4565b81526020016106a98585610de4565b67ffffffffffffffff169052905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a825d747826106fe8686610e07565b6107088787610e19565b60405161071692919061194e565b6040805191829003822060e086901b7fffffffff00000000000000000000000000000000000000000000000000000000168352845163ffffffff1660048401526020850151602484015293015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff9091166064820152608481019190915260a401600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b50505050505050565b6107d9610e35565b600391909155600255565b60408051808201909152600080825260208201526060807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461086a576040517f7eb966c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61087b61087687611976565b610eb6565b9150845160001461088c5784610918565b6004805461089990611a14565b80601f01602080910402602001604051908101604052809291908181526020018280546108c590611a14565b80156109125780601f106108e757610100808354040283529160200191610912565b820191906000526020600020905b8154815290600101906020018083116108f557829003601f168201915b50505050505b9050604051806040016040528060035481526020018561093957600061093d565b6002545b9052969195509350915050565b610952610e35565b61095c6000610f1b565b565b6004805461096b90611a14565b80601f016020809104026020016040519081016040528092919081815260200182805461099790611a14565b80156109e45780601f106109b9576101008083540402835291602001916109e4565b820191906000526020600020905b8154815290600101906020018083116109c757829003601f168201915b505050505081565b6109f4610e35565b73ffffffffffffffffffffffffffffffffffffffff8216610a41576040517f3d3496e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad29190611a61565b905073ffffffffffffffffffffffffffffffffffffffff8116610b21576040517f54c1781b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4273ffffffffffffffffffffffffffffffffffffffff82168484610f90565b505050565b610b4f610e35565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60408051808201909152600080825260208201526040518060400160405280600354815260200183610bc9576000610bcd565b6002545b905290505b949350505050565b610be2610e35565b6004610bee8282611ace565b5050565b610bfa610e35565b73ffffffffffffffffffffffffffffffffffffffff8116610ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610cab81610f1b565b50565b610cb6610e35565b73ffffffffffffffffffffffffffffffffffffffff8216610d03576040517f3d3496e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190611a61565b9050610b4281848461101d565b6000610db1600d60098486611be8565b610dba91611c12565b60e01c9392505050565b6000610dd4602d600d8486611be8565b610ddd91611c5a565b9392505050565b6000610df4600960018486611be8565b610dfd91611c96565b60c01c9392505050565b6000610ddd610e16848461104d565b90565b366000610e298360518187611be8565b915091505b9250929050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c99565b8051602080830151604080850151606080870151608088015160a089015160c08a015195519398610f05986001989197919673ffffffffffffffffffffffffffffffffffffffff169501611cdc565b6040516020818303038152906040529050919050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b4290849061105d565b73ffffffffffffffffffffffffffffffffffffffff831661104257610b42828261116c565b610b42838383611272565b6000610dd4605160318486611be8565b60006110bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112e09092919063ffffffff16565b90508051600014806110e05750808060200190518101906110e09190611da2565b610b42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c99565b73ffffffffffffffffffffffffffffffffffffffff82166111b9576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611213576040519150601f19603f3d011682016040523d82523d6000602084013e611218565b606091505b5050905080610b42576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610c99565b73ffffffffffffffffffffffffffffffffffffffff82166112bf576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4273ffffffffffffffffffffffffffffffffffffffff84168383610f90565b6060610bd28484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113149190611dbf565b60006040518083038185875af1925050503d8060008114611351576040519150601f19603f3d011682016040523d82523d6000602084013e611356565b606091505b509150915061136787838387611372565b979650505050505050565b606083156114085782516000036114015773ffffffffffffffffffffffffffffffffffffffff85163b611401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c99565b5081610bd2565b610bd2838381511561141d5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9991906117fd565b60006020828403121561146357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ddd57600080fd5b60008083601f8401126114a557600080fd5b50813567ffffffffffffffff8111156114bd57600080fd5b602083019150836020828501011115610e2e57600080fd5b600080602083850312156114e857600080fd5b823567ffffffffffffffff8111156114ff57600080fd5b61150b85828601611493565b90969095509350505050565b6020810160038310611552577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806040838503121561156b57600080fd5b50508035926020909101359150565b600060e0828403121561158c57600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156115e4576115e4611592565b60405290565b600082601f8301126115fb57600080fd5b813567ffffffffffffffff8082111561161657611616611592565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561165c5761165c611592565b8160405283815286602085880101111561167557600080fd5b836020870160208301376000602085830101528094505050505092915050565b8015158114610cab57600080fd5b6000806000606084860312156116b857600080fd5b833567ffffffffffffffff808211156116d057600080fd5b6116dc8783880161157a565b945060208601359150808211156116f257600080fd5b506116ff868287016115ea565b925050604084013561171081611695565b809150509250925092565b60005b8381101561173657818101518382015260200161171e565b50506000910152565b6000815180845261175781602086016020860161171b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b83518152602080850151908201526080604082015260006117ad608083018561173f565b82810360608401526117bf818561173f565b9695505050505050565b803563ffffffff811681146117dd57600080fd5b919050565b6000602082840312156117f457600080fd5b610ddd826117c9565b602081526000610ddd602083018461173f565b73ffffffffffffffffffffffffffffffffffffffff81168114610cab57600080fd5b80356117dd81611810565b6000806040838503121561185057600080fd5b823561185b81611810565b946020939093013593505050565b60006020828403121561187b57600080fd5b8135610ddd81611810565b6000806000806060858703121561189c57600080fd5b843567ffffffffffffffff808211156118b457600080fd5b6118c08883890161157a565b955060208701359150808211156118d657600080fd5b506118e387828801611493565b90945092505060408501356118f781611695565b939692955090935050565b8151815260208083015190820152604081016105f2565b60006020828403121561192b57600080fd5b813567ffffffffffffffff81111561194257600080fd5b610bd2848285016115ea565b8183823760009101908152919050565b803567ffffffffffffffff811681146117dd57600080fd5b600060e0823603121561198857600080fd5b6119906115c1565b6119998361195e565b81526119a7602084016117c9565b60208201526119b860408401611832565b60408201526119c9606084016117c9565b60608201526080830135608082015260a083013560a082015260c083013567ffffffffffffffff8111156119fc57600080fd5b611a08368286016115ea565b60c08301525092915050565b600181811c90821680611a2857607f821691505b60208210810361158c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060208284031215611a7357600080fd5b8151610ddd81611810565b601f821115610b42576000816000526020600020601f850160051c81016020861015611aa75750805b601f850160051c820191505b81811015611ac657828155600101611ab3565b505050505050565b815167ffffffffffffffff811115611ae857611ae8611592565b611afc81611af68454611a14565b84611a7e565b602080601f831160018114611b4f5760008415611b195750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611ac6565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611b9c57888601518255948401946001909101908401611b7d565b5085821015611bd857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008085851115611bf857600080fd5b83861115611c0557600080fd5b5050820193919092039150565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015611c525780818660040360031b1b83161692505b505092915050565b803560208310156105f2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff0000000000000000000000000000000000000000000000008135818116916008851015611c525760089490940360031b84901b1690921692915050565b7fff000000000000000000000000000000000000000000000000000000000000008960f81b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b16600182015260007fffffffff00000000000000000000000000000000000000000000000000000000808960e01b16600984015287600d840152808760e01b16602d840152508460318301528360518301528251611d8e81607185016020870161171b565b919091016071019998505050505050505050565b600060208284031215611db457600080fd5b8151610ddd81611695565b60008251611dd181846020870161171b565b919091019291505056fea2646970667358221220ee1b7c735b0fa7565dff5d7445c6e279621be0035906fb99f1fb2fc55ea6450864736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "expected";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "actual";
            readonly type: "address";
        }];
        readonly name: "InvalidEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenIsAddressZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyWhitelistCaller";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToIsAddressZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "PACKET_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultOption";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "fee";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedPacket";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_defaultOption";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOption";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "setMessagingFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_whitelistCaller";
            readonly type: "address";
        }];
        readonly name: "setWhitelistCaller";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "packetBytes";
            readonly type: "bytes";
        }];
        readonly name: "validatePacket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "whitelistCaller";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SimpleMessageLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SimpleMessageLib;
}

type index$z_BlockedMessageLib__factory = BlockedMessageLib__factory;
declare const index$z_BlockedMessageLib__factory: typeof BlockedMessageLib__factory;
type index$z_SimpleMessageLib__factory = SimpleMessageLib__factory;
declare const index$z_SimpleMessageLib__factory: typeof SimpleMessageLib__factory;
declare namespace index$z {
  export { index$z_BlockedMessageLib__factory as BlockedMessageLib__factory, index$z_SimpleMessageLib__factory as SimpleMessageLib__factory, index$A as libs };
}

type OmniCounterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounter__factory extends ContractFactory {
    constructor(...args: OmniCounterConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OmniCounter>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _delegate: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OmniCounter;
    connect(signer: Signer): OmniCounter__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b5060405162003656380380620036568339810160408190526200003491620001ed565b818181818181620000453362000180565b6001600160a01b0380831660805281166200007357604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000bb57600080fd5b505af1158015620000d0573d6000803e3d6000fd5b5050600580546001600160a01b0319163317905550506040805163416ecebf60e01b815290516001600160a01b038816955063416ecebf9450600480830194506020935090918290030181865afa15801562000130573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000156919062000225565b600560146101000a81548163ffffffff021916908363ffffffff1602179055505050505062000254565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001e857600080fd5b919050565b600080604083850312156200020157600080fd5b6200020c83620001d0565b91506200021c60208401620001d0565b90509250929050565b6000602082840312156200023857600080fd5b815163ffffffff811681146200024d57600080fd5b9392505050565b6080516133a7620002af600039600081816103a40152818161068901528181610adc01528181610f75015281816110ac015281816117f001528181611b4201528181611da101528181612035015261212e01526133a76000f3fe6080604052600436106101e75760003560e01c80637d25a05e1161010e578063ca5eb5e1116100a7578063d424388511610079578063f3fef3a311610061578063f3fef3a31461061a578063f851a4401461063a578063ff7bd03d1461066757005b8063d4243885146105da578063f2fde38b146105fa57005b8063ca5eb5e11461055f578063d045a0dc1461057f578063d0a1026014610592578063d22446ce146105a557005b8063b7abbb5d116100e0578063b7abbb5d146104f9578063bb0b6a531461050c578063bd815db014610539578063c95c55be1461054c57005b80637d25a05e1461044857806382413eac146104815780638da5cb5b146104a1578063b731ea0a146104cc57005b806356a4728911610180578063622f17f611610152578063622f17f6146103c6578063704b6c02146103f35780637112f86f14610413578063715018a61461043357005b806356a47289146103155780635a0dfe4d146103425780635b849af6146103725780635e280f111461039257005b80633400288b116101b95780633400288b14610264578063416ecebf1461028457806352ae2879146102ce578063542e7b561461030257005b806306661abd146101f057806313137d651461021957806317442b701461022c578063257f4e051461024e57005b366101ee57005b005b3480156101fc57600080fd5b5061020660035481565b6040519081526020015b60405180910390f35b6101ee610227366004612742565b610687565b34801561023857600080fd5b5060408051600181526002602082015201610210565b34801561025a57600080fd5b5061020660045481565b34801561027057600080fd5b506101ee61027f3660046127fb565b610786565b34801561029057600080fd5b506005546102b99074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff9091168152602001610210565b3480156102da57600080fd5b50305b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610210565b6101ee61031036600461286a565b61079c565b34801561032157600080fd5b50610206610330366004612904565b60086020526000908152604090205481565b34801561034e57600080fd5b5061036261035d3660046127fb565b610963565b6040519015158152602001610210565b34801561037e57600080fd5b506101ee61038d36600461292d565b610982565b34801561039e57600080fd5b506102dd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d257600080fd5b506102066103e1366004612904565b60096020526000908152604090205481565b3480156103ff57600080fd5b506101ee61040e36600461294a565b6109bb565b34801561041f57600080fd5b506101ee61042e36600461297d565b610a83565b34801561043f57600080fd5b506101ee610bbd565b34801561045457600080fd5b506104686104633660046127fb565b610bd1565b60405167ffffffffffffffff9091168152602001610210565b34801561048d57600080fd5b5061036261049c3660046129bd565b610c24565b3480156104ad57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166102dd565b3480156104d857600080fd5b506002546102dd9073ffffffffffffffffffffffffffffffffffffffff1681565b6101ee610507366004612a35565b610c46565b34801561051857600080fd5b50610206610527366004612904565b60016020526000908152604090205481565b6101ee610547366004612a96565b610cc9565b6101ee61055a366004612a35565b610e80565b34801561056b57600080fd5b506101ee61057a36600461294a565b610f28565b6101ee61058d366004612742565b610fcd565b6101ee6105a0366004612ad8565b611015565b3480156105b157600080fd5b506105c56105c0366004612a35565b6112ea565b60408051928352602083019190915201610210565b3480156105e657600080fd5b506101ee6105f536600461294a565b611361565b34801561060657600080fd5b506101ee61061536600461294a565b6113e2565b34801561062657600080fd5b506101ee610635366004612b59565b611499565b34801561064657600080fd5b506005546102dd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561067357600080fd5b50610362610682366004612b77565b6115e4565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146106fd576040517f91ac5e4f0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6020870180359061071790610712908a612904565b61161a565b1461076e576107296020880188612904565b6040517fc26bebcc00000000000000000000000000000000000000000000000000000000815263ffffffff9091166004820152602088013560248201526044016106f4565b61077d8787878787878761166f565b50505050505050565b61078e6119c0565b6107988282611a41565b5050565b84811480156107aa57508483145b610810576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f6d6e69436f756e7465723a206c656e677468206d69736d617463680000000060448201526064016106f4565b610818612677565b3460005b8781101561095857600061083160018a612bc2565b821461083d573061083f565b335b905060008a8a8481811061085557610855612bd5565b905060200201602081019061086a9190612904565b9050600089898581811061088057610880612bd5565b90506020020160208101906108959190612c04565b905061092c826108b783600560149054906101000a900463ffffffff16611a96565b8a8a888181106108c9576108c9612bd5565b90506020028101906108db9190612c1f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080518082019091528d815260208101919091529250899150611b0f9050565b955061093782611c27565b6040860151516109479086612bc2565b9450506001909201915061081c9050565b505050505050505050565b63ffffffff821660009081526001602052604090205481145b92915050565b61098a6119c0565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60055473ffffffffffffffffffffffffffffffffffffffff163314610a3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064016106f4565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610a8b6119c0565b6040517fd70b890200000000000000000000000000000000000000000000000000000000815230600482015263ffffffff841660248201526044810183905267ffffffffffffffff821660648201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d70b890290608401600060405180830381600087803b158015610b3557600080fd5b505af1158015610b49573d6000803e3d6000fd5b505060075460ff16159150610bb890505763ffffffff831660009081526006602090815260408083208584529091528120805467ffffffffffffffff1691610b9083612c84565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b505050565b610bc56119c0565b610bcf6000611c50565b565b60075460009060ff1615610c1c5763ffffffff83166000908152600660209081526040808320858452909152902054610c159067ffffffffffffffff166001612cab565b905061097c565b50600061097c565b73ffffffffffffffffffffffffffffffffffffffff811630145b949350505050565b610cb984610c6685600560149054906101000a900463ffffffff16611a96565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805180820190915234815260208101919091529250339150611b0f9050565b50610cc384611c27565b50505050565b60005b81811015610dbb5736838383818110610ce757610ce7612bd5565b9050602002810190610cf99190612cd3565b9050610d15610d0b6020830183612904565b6020830135610963565b610d1f5750610db3565b3063d045a0dc60c08301358360a0810135610d3e610100830183612c1f565b610d4f610100890160e08a0161294a565b610d5d6101208a018a612c1f565b6040518963ffffffff1660e01b8152600401610d7f9796959493929190612d5a565b6000604051808303818588803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b5050505050505b600101610ccc565b503373ffffffffffffffffffffffffffffffffffffffff16638e9e70996040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e07573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e4d9190810190612e41565b6040517f8351eea70000000000000000000000000000000000000000000000000000000081526004016106f49190612f4b565b60055473ffffffffffffffffffffffffffffffffffffffff163314610f01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064016106f4565b610f2184610c6685600560149054906101000a900463ffffffff16611a96565b5050505050565b610f306119c0565b6040517fca5eb5e100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610fb957600080fd5b505af1158015610f21573d6000803e3d6000fd5b333014611006576040517f14d4a4e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077d8787878787878761076e565b73ffffffffffffffffffffffffffffffffffffffff87163014611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f216f41707000000000000000000000000000000000000000000000000000000060448201526064016106f4565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21656e64706f696e74000000000000000000000000000000000000000000000060448201526064016106f4565b600061113f8686611cc5565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff8216016111895760016004600082825461117e9190612f5e565b909155506112e09050565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff82160161127e576001600460008282546111c69190612f5e565b90915550600090506111d88787611ce7565b90506111e381611c27565b600061123662030d40600061122f604080517e03000000000000000000000000000000000000000000000000000000000000602082015281516002818303018152602290910190915290565b9190611d0a565b9050611276826112596001600560149054906101000a900463ffffffff16611a96565b836040518060400160405280348152602001600081525030611b0f565b5050506112e0565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e76616c6964206d657373616765207479706500000000000000000000000060448201526064016106f4565b5050505050505050565b600080600061134b8761130f88600560149054906101000a900463ffffffff16611a96565b87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611d8b915050565b8051602090910151909890975095505050505050565b6113696119c0565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd48d879cef83a1c0bdda516f27b13ddb1b3f8bbac1c9e1511bb2a659c24277609060200160405180910390a150565b6113ea6119c0565b73ffffffffffffffffffffffffffffffffffffffff811661148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f4565b61149681611c50565b50565b60055473ffffffffffffffffffffffffffffffffffffffff16331461151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064016106f4565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611574576040519150601f19603f3d011682016040523d82523d6000602084013e611579565b606091505b5050905080610bb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f6d6e69436f756e7465723a207769746864726177206661696c65640000000060448201526064016106f4565b60006020820180359060019083906115fc9086612904565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff81166000908152600160205260408120548061097c576040517ff6ff4fb700000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526024016106f4565b61169961167f6020890189612904565b602089013561169460608b0160408c01612f71565b611e79565b60006116a58686611cc5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff82160161177357600380549060006116e183612f8e565b91905055506116f08686611faf565b341015611759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6d6e69436f756e7465723a20696e73756666696369656e742076616c75650060448201526064016106f4565b61176e61176960208a018a612904565b611fce565b6112e0565b60ff811660021480611788575060ff81166004145b15611865576003805490600061179d83612f8e565b909155506117b3905061176960208a018a612904565b6040517f7cb5901200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690637cb590129061182e9030908b906000908c908c90600401612fc6565b600060405180830381600087803b15801561184857600080fd5b505af115801561185c573d6000803e3d6000fd5b505050506112e0565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff82160161127e576003805490600061189f83612f8e565b909155506118b5905061176960208a018a612904565b6118ca6118c560208a018a612904565b611c27565b600061191662030d40600a61122f604080517e03000000000000000000000000000000000000000000000000000000000000602082015281516002818303018152602290910190915290565b90506119b961192860208b018b612904565b600554604080517f010000000000000000000000000000000000000000000000000000000000000060208201527401000000000000000000000000000000000000000090920460e01b7fffffffff00000000000000000000000000000000000000000000000000000000166021830152600a6025808401919091528151808403909101815260459092019052611259565b50506112e0565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f4565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b6040517fff0000000000000000000000000000000000000000000000000000000000000060f884901b1660208201527fffffffff0000000000000000000000000000000000000000000000000000000060e083901b1660218201526060906025015b604051602081830303815290604052905092915050565b611b17612677565b6000611b268460000151611fef565b602085015190915015611b4057611b408460200151612031565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632637a450826040518060a001604052808b63ffffffff168152602001611b9d8c61161a565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401611bd9929190613006565b60806040518083038185885af1158015611bf7573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c1c91906130f9565b979650505050505050565b63ffffffff81166000908152600960205260408120805491611c4883612f8e565b919050555050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611cd46001828486613161565b611cdd9161318b565b60f81c9392505050565b6000611cf7600560018486613161565b611d00916131d3565b60e01c9392505050565b6060836003611d1a826000612153565b61ffff1614611d6757611d2e816000612153565b6040517f3a51740d00000000000000000000000000000000000000000000000000000000815261ffff90911660048201526024016106f4565b6000611d7385856121d3565b9050611d8186600183612273565b9695505050505050565b60408051808201909152600080825260208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ddc28c586040518060a001604052808863ffffffff168152602001611dfb8961161a565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401611e30929190613006565b6040805180830381865afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190613219565b95945050505050565b63ffffffff8316600090815260066020908152604080832085845290915290205460075467ffffffffffffffff9091169060ff1615611f3957611ebd816001612cab565b67ffffffffffffffff168267ffffffffffffffff1614611f39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f4170703a20696e76616c6964206e6f6e63650000000000000000000000000060448201526064016106f4565b8067ffffffffffffffff168267ffffffffffffffff161115610cc35763ffffffff841660009081526006602090815260408083208684529091529020805467ffffffffffffffff84167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090911617905550505050565b6000611fbe8260058186613161565b611fc791613235565b9392505050565b63ffffffff81166000908152600860205260408120805491611c4883612f8e565b60008134101561202d576040517f9f7041200000000000000000000000000000000000000000000000000000000081523460048201526024016106f4565b5090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c29190613271565b905073ffffffffffffffffffffffffffffffffffffffff8116612111576040517f5373352a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079873ffffffffffffffffffffffffffffffffffffffff8216337f0000000000000000000000000000000000000000000000000000000000000000856122de565b6000612160826002612f5e565b835110156121ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016106f4565b50016002015190565b60606fffffffffffffffffffffffffffffffff82161561223c57604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608086811b8216602084015285901b16603082015201604051602081830303815290604052611fc7565b6040517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608085901b166020820152603001611af8565b6060836003612283826000612153565b61ffff161461229757611d2e816000612153565b8460016122a48551612373565b6122af90600161328e565b86866040516020016122c59594939291906132a9565b6040516020818303038152906040529150509392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610cc3908590612407565b600061ffff82111561202d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f362062697473000000000000000000000000000000000000000000000000000060648201526084016106f4565b6000612469826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125169092919063ffffffff16565b905080516000148061248a57508080602001905181019061248a9190613342565b610bb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106f4565b6060610c3e8484600085856000808673ffffffffffffffffffffffffffffffffffffffff16858760405161254a919061335f565b60006040518083038185875af1925050503d8060008114612587576040519150601f19603f3d011682016040523d82523d6000602084013e61258c565b606091505b5091509150611c1c878383876060831561262e5782516000036126275773ffffffffffffffffffffffffffffffffffffffff85163b612627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f4565b5081610c3e565b610c3e83838151156126435781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f49190612f4b565b604051806060016040528060008019168152602001600067ffffffffffffffff1681526020016126ba604051806040016040528060008152602001600081525090565b905290565b6000606082840312156126d157600080fd5b50919050565b60008083601f8401126126e957600080fd5b50813567ffffffffffffffff81111561270157600080fd5b60208301915083602082850101111561271957600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461149657600080fd5b600080600080600080600060e0888a03121561275d57600080fd5b61276789896126bf565b965060608801359550608088013567ffffffffffffffff8082111561278b57600080fd5b6127978b838c016126d7565b909750955060a08a013591506127ac82612720565b90935060c089013590808211156127c257600080fd5b506127cf8a828b016126d7565b989b979a50959850939692959293505050565b803563ffffffff811681146127f657600080fd5b919050565b6000806040838503121561280e57600080fd5b612817836127e2565b946020939093013593505050565b60008083601f84011261283757600080fd5b50813567ffffffffffffffff81111561284f57600080fd5b6020830191508360208260051b850101111561271957600080fd5b6000806000806000806060878903121561288357600080fd5b863567ffffffffffffffff8082111561289b57600080fd5b6128a78a838b01612825565b909850965060208901359150808211156128c057600080fd5b6128cc8a838b01612825565b909650945060408901359150808211156128e557600080fd5b506128f289828a01612825565b979a9699509497509295939492505050565b60006020828403121561291657600080fd5b611fc7826127e2565b801515811461149657600080fd5b60006020828403121561293f57600080fd5b8135611fc78161291f565b60006020828403121561295c57600080fd5b8135611fc781612720565b67ffffffffffffffff8116811461149657600080fd5b60008060006060848603121561299257600080fd5b61299b846127e2565b92506020840135915060408401356129b281612967565b809150509250925092565b60008060008060a085870312156129d357600080fd5b6129dd86866126bf565b9350606085013567ffffffffffffffff8111156129f957600080fd5b612a05878288016126d7565b9094509250506080850135612a1981612720565b939692955090935050565b803560ff811681146127f657600080fd5b60008060008060608587031215612a4b57600080fd5b612a54856127e2565b9350612a6260208601612a24565b9250604085013567ffffffffffffffff811115612a7e57600080fd5b612a8a878288016126d7565b95989497509550505050565b60008060208385031215612aa957600080fd5b823567ffffffffffffffff811115612ac057600080fd5b612acc85828601612825565b90969095509350505050565b600080600080600080600060a0888a031215612af357600080fd5b8735612afe81612720565b965060208801359550604088013567ffffffffffffffff80821115612b2257600080fd5b612b2e8b838c016126d7565b909750955060608a01359150612b4382612720565b909350608089013590808211156127c257600080fd5b60008060408385031215612b6c57600080fd5b823561281781612720565b600060608284031215612b8957600080fd5b611fc783836126bf565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561097c5761097c612b93565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612c1657600080fd5b611fc782612a24565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612c5457600080fd5b83018035915067ffffffffffffffff821115612c6f57600080fd5b60200191503681900382131561271957600080fd5b600067ffffffffffffffff808316818103612ca157612ca1612b93565b6001019392505050565b67ffffffffffffffff818116838216019080821115612ccc57612ccc612b93565b5092915050565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112612d0757600080fd5b9190910192915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b63ffffffff612d68896127e2565b1681526020880135602082015260006040890135612d8581612967565b67ffffffffffffffff811660408401525087606083015260e06080830152612db160e083018789612d11565b73ffffffffffffffffffffffffffffffffffffffff861660a084015282810360c0840152612de0818587612d11565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60005b83811015612e38578181015183820152602001612e20565b50506000910152565b600060208284031215612e5357600080fd5b815167ffffffffffffffff80821115612e6b57600080fd5b818401915084601f830112612e7f57600080fd5b815181811115612e9157612e91612dee565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612ed757612ed7612dee565b81604052828152876020848701011115612ef057600080fd5b611c1c836020830160208801612e1d565b60008151808452612f19816020860160208601612e1d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611fc76020830184612f01565b8082018082111561097c5761097c612b93565b600060208284031215612f8357600080fd5b8135611fc781612967565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fbf57612fbf612b93565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015261ffff84166040820152608060608201526000611c1c608083018486612d11565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a0608084015261303c60e0840182612f01565b905060608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08483030160a08501526130778282612f01565b60809690960151151560c085015250505073ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b6000604082840312156130bc57600080fd5b6040516040810181811067ffffffffffffffff821117156130df576130df612dee565b604052825181526020928301519281019290925250919050565b60006080828403121561310b57600080fd5b6040516060810181811067ffffffffffffffff8211171561312e5761312e612dee565b60405282518152602083015161314381612967565b602082015261315584604085016130aa565b60408201529392505050565b6000808585111561317157600080fd5b8386111561317e57600080fd5b5050820193919092039150565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156131cb5780818660010360031b1b83161692505b505092915050565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156131cb5760049490940360031b84901b1690921692915050565b60006040828403121561322b57600080fd5b611fc783836130aa565b8035602083101561097c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b60006020828403121561328357600080fd5b8151611fc781612720565b61ffff818116838216019080821115612ccc57612ccc612b93565b600086516132bb818460208b01612e1d565b80830190507fff00000000000000000000000000000000000000000000000000000000000000808860f81b1682527fffff0000000000000000000000000000000000000000000000000000000000008760f01b166001830152808660f81b166003830152508351613333816004840160208801612e1d565b01600401979650505050505050565b60006020828403121561335457600080fd5b8151611fc78161291f565b60008251612d07818460208701612e1d56fea264697066735822122071df9779a99432656fb94b662cd3eb1247cf0ed379ec189caed8ad4af4cf049f64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "InvalidOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_types";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_options";
            readonly type: "bytes[]";
        }];
        readonly name: "batchIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "brokenIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "composedCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "count";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "inboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oApp";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveSimulate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "outboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_orderedNonce";
            readonly type: "bool";
        }];
        readonly name: "setOrderedNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skipInboundNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OmniCounterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounter;
}

declare class OmniCounterAbstract__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "InvalidOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_types";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_options";
            readonly type: "bytes[]";
        }];
        readonly name: "batchIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "brokenIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "composedCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "count";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "inboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oApp";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveSimulate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "outboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_orderedNonce";
            readonly type: "bool";
        }];
        readonly name: "setOrderedNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skipInboundNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OmniCounterAbstractInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounterAbstract;
}

type OmniCounterPreCrimeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounterPreCrime__factory extends ContractFactory {
    constructor(...args: OmniCounterPreCrimeConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _counter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OmniCounterPreCrime>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _counter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OmniCounterPreCrime;
    connect(signer: Signer): OmniCounterPreCrime__factory;
    static readonly bytecode = "0x60e06040523480156200001157600080fd5b5060405162002da338038062002da383398101604081905262000034916200013c565b81816200004133620000cf565b6001600160a01b03808316608052811660a0819052604080516352ae287960e01b815290516352ae2879916004808201926020929091908290030181865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b8919062000174565b6001600160a01b031660c052506200019992505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013757600080fd5b919050565b600080604083850312156200015057600080fd5b6200015b836200011f565b91506200016b602084016200011f565b90509250929050565b6000602082840312156200018757600080fd5b62000192826200011f565b9392505050565b60805160a05160c051612bb7620001ec6000396000818161018d0152611b9b01526000818161029f015281816105f0015281816111d90152611384015260008181611a2f0152611bd90152612bb76000f3fe6080604052600436106100dd5760003560e01c80638e9e70991161007f578063bf7b5d7a11610059578063bf7b5d7a1461028d578063f0cd3836146102c1578063f2fde38b146102e1578063f8bcddf61461030157600080fd5b80638e9e709914610236578063afea44ef1461024b578063b9a1f5e71461026b57600080fd5b806352ae2879116100bb57806352ae28791461017b57806354fd4d50146101d4578063715018a6146101f65780638da5cb5b1461020b57600080fd5b806310f9cf3a146100e25780632913daa01461010457806350dfa9371461015b575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046120c1565b610321565b005b34801561011057600080fd5b5060005461013d9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b61016e61016936600461215b565b610539565b6040516101529190612235565b34801561018757600080fd5b506101af7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610152565b3480156101e057600080fd5b5060408051600281526000602082015201610152565b34801561020257600080fd5b506101026105d4565b34801561021757600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101af565b34801561024257600080fd5b5061016e6105e8565b34801561025757600080fd5b5061010261026636600461225e565b610859565b34801561027757600080fd5b506102806108b4565b604051610152919061227b565b34801561029957600080fd5b506101af7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cd57600080fd5b5061016e6102dc36600461215b565b610933565b3480156102ed57600080fd5b506101026102fc3660046122da565b610bd0565b34801561030d57600080fd5b5061010261031c366004612310565b610c8c565b3361dead1461035c576040517f9cbfe06600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061039c8787878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610cfc92505050565b905060008267ffffffffffffffff8111156103b9576103b9612385565b6040519080825280602002602001820160405280156103e2578160200160208202803683370190505b50905060008367ffffffffffffffff81111561040057610400612385565b60405190808252806020026020018201604052801561043357816020015b606081526020019060019003908161041e5790505b50905060005b8481101561051857366000878784818110610456576104566123b4565b905060200281019061046891906123e3565b909250905061047b600460008385612448565b61048491612472565b60e01c858481518110610499576104996123b4565b63ffffffff909216602092830291909101909101526104bb8160048185612448565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505086518792508691508110610503576105036123b4565b60209081029190910101525050600101610439565b506105238383610e6a565b61052e838383610f54565b505050505050505050565b60603361dead14610576576040517f9cbfe06600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105b68686868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610cfc92505050565b90506105c1816110d2565b6105ca8161137d565b9695505050505050565b6105dc6114e4565b6105e66000611565565b565b6001546060907f000000000000000000000000000000000000000000000000000000000000000090819060009067ffffffffffffffff81111561062d5761062d612385565b60405190808252806020026020018201604052801561068857816020015b6106756040518060600160405280600063ffffffff16815260200160008152602001600081525090565b81526020019060019003908161064b5790505b50905060005b600154811015610830576000600182815481106106ad576106ad6123b4565b600091825260209182902060039190910201546040805160608101825263ffffffff90921680835290517f56a4728900000000000000000000000000000000000000000000000000000000815260048101829052909350909182019073ffffffffffffffffffffffffffffffffffffffff8716906356a4728990602401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b91906124ba565b81526040517f622f17f600000000000000000000000000000000000000000000000000000000815263ffffffff8416600482015260209091019073ffffffffffffffffffffffffffffffffffffffff87169063622f17f690602401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080791906124ba565b81525083838151811061081c5761081c6123b4565b60209081029190910101525060010161068e565b5080604051602001610842919061227b565b604051602081830303815290604052935050505090565b6108616114e4565b6000805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561092a5760008481526020908190206040805160608101825260038602909201805463ffffffff168352600180820154848601526002909101549183019190915290835290920191016108d8565b50505050905090565b60603361dead14610970576040517f9cbfe06600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546040517e0200000000000000000000000000000000000000000000000000000000000060208201527401000000000000000000000000000000000000000090910460c01b7fffffffffffffffff000000000000000000000000000000000000000000000000166022820152602a01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060008515610a6557610a60610a5b8888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610cfc92505050565b6115da565b610ade565b6001805480602002602001604051908101604052809291908181526020016000905b82821015610ad95760008481526020908190206040805160608101825260038602909201805463ffffffff16835260018082015484860152600290910154918301919091529083529092019101610a87565b505050505b805190915015610bc6578051604051610afd90849083906020016124d3565b604051602081830303815290604052925060005b8161ffff16811015610bc35783838281518110610b3057610b306123b4565b602002602001015160000151848381518110610b4e57610b4e6123b4565b602002602001015160200151858481518110610b6c57610b6c6123b4565b602002602001015160400151604051602001610b8b949392919061251d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529350600101610b11565b50505b5095945050505050565b610bd86114e4565b73ffffffffffffffffffffffffffffffffffffffff8116610c80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610c8981611565565b50565b610c946114e4565b610ca060016000612017565b60005b81811015610cf7576001838383818110610cbf57610cbf6123b4565b835460018101855560009485526020909420606090910292909201926003029091019050610ced8282612586565b5050600101610ca3565b505050565b60608267ffffffffffffffff811115610d1757610d17612385565b604051908082528060200260200182016040528015610dbd57816020015b604080516101608101825260006101008201818152610120830182905261014083018290528252602080830182905292820181905260608083018290526080830182905260a083019190915260c0820181905260e082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610d355790505b50905060005b83811015610e6257366000868684818110610de057610de06123b4565b9050602002810190610df291906123e3565b91509150610e0082826118a1565b848481518110610e1257610e126123b4565b6020026020010181905250848381518110610e2f57610e2f6123b4565b6020026020010151848481518110610e4957610e496123b4565b6020908102919091010151608001525050600101610dc3565b509392505050565b815115610f00576000610e7c836115da565b905060005b8151811015610efd576000828281518110610e9e57610e9e6123b4565b6020026020010151600001519050610eb684826119d4565b610ef4576040517f01992f2a00000000000000000000000000000000000000000000000000000000815263ffffffff82166004820152602401610c77565b50600101610e81565b50505b6000610f0a611a2b565b9050610f1682826119d4565b610cf7576040517f01992f2a00000000000000000000000000000000000000000000000000000000815263ffffffff82166004820152602401610c77565b6000610f5e611a2b565b9050606060005b8451811015610fd6578263ffffffff16858281518110610f8757610f876123b4565b602002602001015163ffffffff1603610fce57838181518110610fac57610fac6123b4565b6020026020010151806020019051810190610fc79190612650565b9150610fd6565b600101610f65565b5060005b84518110156110ca576000858281518110610ff757610ff76123b4565b602002602001015190506000858381518110611015576110156123b4565b60200260200101518060200190518101906110309190612650565b9050600061103e8584611ac1565b509050600061104d8388611ac1565b915050808211156110ba576040517f1915975700000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f696e626f756e64436f756e74203e206f7574626f756e64436f756e74000000006044820152606401610c77565b505060019092019150610fda9050565b505050505050565b60005481517401000000000000000000000000000000000000000090910467ffffffffffffffff1610156111605760005481516040517f9db086050000000000000000000000000000000000000000000000000000000081527401000000000000000000000000000000000000000090920467ffffffffffffffff1660048301526024820152604401610c77565b805115610c895760008080805b845181101561137657600085828151811061118a5761118a6123b4565b602090810291909101810151805180519201516040517f5a0dfe4d00000000000000000000000000000000000000000000000000000000815263ffffffff9093166004840152602483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635a0dfe4d90604401602060405180830381865afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611259919061272d565b611263575061136e565b80515163ffffffff80871691161080611295575080515163ffffffff8681169116148015611295575080516020015184115b156112cc576040517f50823c8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80515163ffffffff86811691161415806112eb57508051602001518414155b1561130c578051805160209091015190955093506113098585611b5e565b92505b6113158361277e565b92508267ffffffffffffffff1681600001516040015167ffffffffffffffff161461136c576040517f50823c8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60010161116d565b5050505050565b60606000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163463bd815db060e01b866040516024016113d391906127a5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161145c919061290b565b60006040518083038185875af1925050503d8060008114611499576040519150601f19603f3d011682016040523d82523d6000602084013e61149e565b606091505b509150915060006114af8383611c4d565b90506114b9611a2b565b816040516020016114cb929190612927565b6040516020818303038152906040529350505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c77565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060006001805480602002602001604051908101604052809291908181526020016000905b828210156116525760008481526020908190206040805160608101825260038602909201805463ffffffff16835260018082015484860152600290910154918301919091529083529092019101611600565b5050505090506000835167ffffffffffffffff81111561167457611674612385565b6040519080825280602002602001820160405280156116dd57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116925790505b5090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60005b85518110156117af576000868281518110611721576117216123b4565b602002602001015160000151600001519050600061173f8683611d6c565b90506000811215801561175b575060006117598684611d6c565b125b156117a5578361176a81612972565b94505085818151811061177f5761177f6123b4565b6020026020010151858581518110611799576117996123b4565b60200260200101819052505b5050600101611704565b50600081126118995760006117c58260016129aa565b90508067ffffffffffffffff8111156117e0576117e0612385565b60405190808252806020026020018201604052801561184957816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816117fe5790505b50945060005b8181101561189657838181518110611869576118696123b4565b6020026020010151868281518110611883576118836123b4565b602090810291909101015260010161184f565b50505b505050919050565b6040805161016081018252600061010082018181526101208301829052610140830182905282526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915260405180606001604052806119108585611de1565b63ffffffff1681526020016119258585611e04565b81526020016119348585611e1d565b67ffffffffffffffff169052815261194c8383611e40565b63ffffffff1660208201526119618383611e50565b73ffffffffffffffffffffffffffffffffffffffff1660408201526119868383611e62565b60608201526119958383611e72565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060c082015292915050565b6000805b8351811015611a1f578263ffffffff168482815181106119fa576119fa6123b4565b602002602001015163ffffffff1603611a17576001915050611a25565b6001016119d8565b50600090505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abc91906129bd565b905090565b60008060005b8451811015611b4e578363ffffffff16858281518110611ae957611ae96123b4565b60200260200101516000015163ffffffff1603611b4657848181518110611b1257611b126123b4565b602002602001015160200151858281518110611b3057611b306123b4565b6020026020010151604001519250925050611b57565b600101611ac7565b50600080915091505b9250929050565b6040517fa0dd43fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015263ffffffff84166024830152604482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a0dd43fc90606401602060405180830381865afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4691906129da565b9392505050565b60608215611cb7576040517f614cbd8a00000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f2072657665727400000000000000000000000000000000000000000000006044820152606401610c77565b7f8351eea700000000000000000000000000000000000000000000000000000000611ce1836129f7565b7fffffffff000000000000000000000000000000000000000000000000000000001614611d3c57816040517f614cbd8a000000000000000000000000000000000000000000000000000000008152600401610c779190612235565b611d566004808451611d4e9190612a43565b849190611e8d565b905080806020019051810190611c469190612a56565b6000805b8351811015611db8578263ffffffff16848281518110611d9257611d926123b4565b60200260200101516000015163ffffffff1603611db0579050611a25565b600101611d70565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9392505050565b6000611df1600d60098486612448565b611dfa91612472565b60e01c9392505050565b6000611e14602d600d8486612448565b611c4691612aff565b6000611e2d600960018486612448565b611e3691612b3b565b60c01c9392505050565b6000611df16031602d8486612448565b6000611c46611e5f8484612007565b90565b6000611e14607160518486612448565b366000611e828360718187612448565b915091509250929050565b606081611e9b81601f6129aa565b1015611f03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610c77565b611f0d82846129aa565b84511015611f77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610c77565b606082158015611f965760405191506000825260208201604052611ffe565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611fcf578051835260209283019201611fb7565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6000611e14605160318486612448565b5080546000825560030290600052602060002090810190610c8991905b808211156120785780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001681556000600182018190556002820155600301612034565b5090565b60008083601f84011261208e57600080fd5b50813567ffffffffffffffff8111156120a657600080fd5b6020830191508360208260051b8501011115611b5757600080fd5b600080600080600080606087890312156120da57600080fd5b863567ffffffffffffffff808211156120f257600080fd5b6120fe8a838b0161207c565b9098509650602089013591508082111561211757600080fd5b6121238a838b0161207c565b9096509450604089013591508082111561213c57600080fd5b5061214989828a0161207c565b979a9699509497509295939492505050565b6000806000806040858703121561217157600080fd5b843567ffffffffffffffff8082111561218957600080fd5b6121958883890161207c565b909650945060208701359150808211156121ae57600080fd5b506121bb8782880161207c565b95989497509550505050565b60005b838110156121e25781810151838201526020016121ca565b50506000910152565b600081518084526122038160208601602086016121c7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611c4660208301846121eb565b67ffffffffffffffff81168114610c8957600080fd5b60006020828403121561227057600080fd5b8135611c4681612248565b602080825282518282018190526000919060409081850190868401855b828110156122cd578151805163ffffffff16855286810151878601528501518585015260609093019290850190600101612298565b5091979650505050505050565b6000602082840312156122ec57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611c4657600080fd5b6000806020838503121561232357600080fd5b823567ffffffffffffffff8082111561233b57600080fd5b818501915085601f83011261234f57600080fd5b81358181111561235e57600080fd5b86602060608302850101111561237357600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261241857600080fd5b83018035915067ffffffffffffffff82111561243357600080fd5b602001915036819003821315611b5757600080fd5b6000808585111561245857600080fd5b8386111561246557600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156124b25780818660040360031b1b83161692505b505092915050565b6000602082840312156124cc57600080fd5b5051919050565b600083516124e58184602088016121c7565b60f09390931b7fffff000000000000000000000000000000000000000000000000000000000000169190920190815260020192915050565b6000855161252f818460208a016121c7565b60e09590951b7fffffffff0000000000000000000000000000000000000000000000000000000016919094019081526004810192909252602482015260440192915050565b63ffffffff81168114610c8957600080fd5b813561259181612574565b63ffffffff81167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008354161782555060208201356001820155604082013560028201555050565b6040516060810167ffffffffffffffff811182821017156125fb576125fb612385565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561264857612648612385565b604052919050565b6000602080838503121561266357600080fd5b825167ffffffffffffffff8082111561267b57600080fd5b818501915085601f83011261268f57600080fd5b8151818111156126a1576126a1612385565b6126af848260051b01612601565b818152848101925060609182028401850191888311156126ce57600080fd5b938501935b828510156127215780858a0312156126eb5760008081fd5b6126f36125d8565b85516126fe81612574565b8152858701518782015260408087015190820152845293840193928501926126d3565b50979650505050505050565b60006020828403121561273f57600080fd5b81518015158114611c4657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681810361279b5761279b61274f565b6001019392505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156128fd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08984030185528151610140612831858351805163ffffffff1682526020808201519083015260409081015167ffffffffffffffff16910152565b8882015160606128488188018363ffffffff169052565b89840151915060806128718189018473ffffffffffffffffffffffffffffffffffffffff169052565b9084015160a0888101919091529084015160c08089019190915290840151915060e0906128b58289018473ffffffffffffffffffffffffffffffffffffffff169052565b840151610100880184905291506128ce878401836121eb565b9301518684036101208801529291506128e9905081836121eb565b9689019694505050908601906001016127ce565b509098975050505050505050565b6000825161291d8184602087016121c7565b9190910192915050565b7fffffffff000000000000000000000000000000000000000000000000000000008360e01b168152600082516129648160048501602087016121c7565b919091016004019392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129a3576129a361274f565b5060010190565b80820180821115611a2557611a2561274f565b6000602082840312156129cf57600080fd5b8151611c4681612574565b6000602082840312156129ec57600080fd5b8151611c4681612248565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156118995760049290920360031b82901b161692915050565b81810381811115611a2557611a2561274f565b600060208284031215612a6857600080fd5b815167ffffffffffffffff80821115612a8057600080fd5b818401915084601f830112612a9457600080fd5b815181811115612aa657612aa6612385565b612ad760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612601565b9150808252856020828501011115612aee57600080fd5b611ffe8160208401602086016121c7565b80356020831015611a25577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156124b25760089490940360031b84901b169092169291505056fea2646970667358221220dbf4c7d68c5592cedd23318968acb241f27d4f79675b8735f13d0224635d310464736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_counter";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPreCrimePeers";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "preCrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oApp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "preCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "preCrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oApp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "_preCrimePeers";
            readonly type: "tuple[]";
        }];
        readonly name: "setPreCrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): OmniCounterPreCrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounterPreCrime;
}

type index$y_OmniCounterAbstract__factory = OmniCounterAbstract__factory;
declare const index$y_OmniCounterAbstract__factory: typeof OmniCounterAbstract__factory;
type index$y_OmniCounterPreCrime__factory = OmniCounterPreCrime__factory;
declare const index$y_OmniCounterPreCrime__factory: typeof OmniCounterPreCrime__factory;
type index$y_OmniCounter__factory = OmniCounter__factory;
declare const index$y_OmniCounter__factory: typeof OmniCounter__factory;
declare namespace index$y {
  export { index$y_OmniCounterAbstract__factory as OmniCounterAbstract__factory, index$y_OmniCounterPreCrime__factory as OmniCounterPreCrime__factory, index$y_OmniCounter__factory as OmniCounter__factory };
}

declare class IOAppComposer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): IOAppComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOAppComposer;
}

declare class IOAppCore__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "iEndpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IOAppCoreInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOAppCore;
}

declare class IOAppMsgInspector__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly name: "InspectionFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "inspect";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOAppMsgInspectorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOAppMsgInspector;
}

declare class IOAppOptionsType3__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "EnforcedOptionSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IOAppOptionsType3Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOAppOptionsType3;
}

declare class IOAppReceiver__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isSender";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOAppReceiverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOAppReceiver;
}

type index$x_IOAppComposer__factory = IOAppComposer__factory;
declare const index$x_IOAppComposer__factory: typeof IOAppComposer__factory;
type index$x_IOAppCore__factory = IOAppCore__factory;
declare const index$x_IOAppCore__factory: typeof IOAppCore__factory;
type index$x_IOAppMsgInspector__factory = IOAppMsgInspector__factory;
declare const index$x_IOAppMsgInspector__factory: typeof IOAppMsgInspector__factory;
type index$x_IOAppOptionsType3__factory = IOAppOptionsType3__factory;
declare const index$x_IOAppOptionsType3__factory: typeof IOAppOptionsType3__factory;
type index$x_IOAppReceiver__factory = IOAppReceiver__factory;
declare const index$x_IOAppReceiver__factory: typeof IOAppReceiver__factory;
declare namespace index$x {
  export { index$x_IOAppComposer__factory as IOAppComposer__factory, index$x_IOAppCore__factory as IOAppCore__factory, index$x_IOAppMsgInspector__factory as IOAppMsgInspector__factory, index$x_IOAppOptionsType3__factory as IOAppOptionsType3__factory, index$x_IOAppReceiver__factory as IOAppReceiver__factory };
}

declare class OAppOptionsType3__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "EnforcedOptionSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "enforcedOption";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OAppOptionsType3Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): OAppOptionsType3;
}

type OptionsBuilderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OptionsBuilder__factory extends ContractFactory {
    constructor(...args: OptionsBuilderConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OptionsBuilder>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OptionsBuilder;
    connect(signer: Signer): OptionsBuilder__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e74edfa13f8d3cde19ecb3c92d48dbda7452e87cddfff512372c3ea5e00d82c064736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "InvalidOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "InvalidSize";
        readonly type: "error";
    }];
    static createInterface(): OptionsBuilderInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OptionsBuilder;
}

type index$w_OAppOptionsType3__factory = OAppOptionsType3__factory;
declare const index$w_OAppOptionsType3__factory: typeof OAppOptionsType3__factory;
type index$w_OptionsBuilder__factory = OptionsBuilder__factory;
declare const index$w_OptionsBuilder__factory: typeof OptionsBuilder__factory;
declare namespace index$w {
  export { index$w_OAppOptionsType3__factory as OAppOptionsType3__factory, index$w_OptionsBuilder__factory as OptionsBuilder__factory };
}

declare class RateLimiter__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "RateLimitExceeded";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "limit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "window";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct RateLimiter.RateLimitConfig[]";
            readonly name: "rateLimitConfigs";
            readonly type: "tuple[]";
        }];
        readonly name: "RateLimitsChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getAmountCanBeSent";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "currentAmountInFlight";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountCanBeSent";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "rateLimits";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountInFlight";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastUpdated";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "limit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "window";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): RateLimiterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RateLimiter;
}

type index$v_RateLimiter__factory = RateLimiter__factory;
declare const index$v_RateLimiter__factory: typeof RateLimiter__factory;
declare namespace index$v {
  export { index$v_RateLimiter__factory as RateLimiter__factory };
}

declare class OApp__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OAppInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OApp;
}

declare class OAppCore__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OAppCoreInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OAppCore;
}

declare class OAppReceiver__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OAppReceiverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OAppReceiver;
}

declare class OAppSender__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OAppSenderInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OAppSender;
}

type index$u_OAppCore__factory = OAppCore__factory;
declare const index$u_OAppCore__factory: typeof OAppCore__factory;
type index$u_OAppReceiver__factory = OAppReceiver__factory;
declare const index$u_OAppReceiver__factory: typeof OAppReceiver__factory;
type index$u_OAppSender__factory = OAppSender__factory;
declare const index$u_OAppSender__factory: typeof OAppSender__factory;
type index$u_OApp__factory = OApp__factory;
declare const index$u_OApp__factory: typeof OApp__factory;
declare namespace index$u {
  export { index$u_OAppCore__factory as OAppCore__factory, index$u_OAppReceiver__factory as OAppReceiver__factory, index$u_OAppSender__factory as OAppSender__factory, index$u_OApp__factory as OApp__factory, index$y as examples, index$x as interfaces, index$w as libs, index$v as utils };
}

declare class IOFT__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidLocalDecimals";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountLD";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "SlippageExceeded";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountSentLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTSent";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "approvalRequired";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oftVersion";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }, {
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }];
        readonly name: "quoteOFT";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxAmountLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTLimit";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "int256";
                readonly name: "feeAmountLD";
                readonly type: "int256";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }];
            readonly internalType: "struct OFTFeeDetail[]";
            readonly name: "oftFeeDetails";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSend";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "_fee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOFTInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOFT;
}

type index$t_IOFT__factory = IOFT__factory;
declare const index$t_IOFT__factory: typeof IOFT__factory;
declare namespace index$t {
  export { index$t_IOFT__factory as IOFT__factory };
}

declare class OFT__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLocalDecimals";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountLD";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "SlippageExceeded";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "EnforcedOptionSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "inspector";
            readonly type: "address";
        }];
        readonly name: "MsgInspectorSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountSentLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND_AND_CALL";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "approvalRequired";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimalConversionRate";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "enforcedOption";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveSimulate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "msgInspector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oftVersion";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }, {
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }];
        readonly name: "quoteOFT";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxAmountLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTLimit";
            readonly name: "oftLimit";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "int256";
                readonly name: "feeAmountLD";
                readonly type: "int256";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }];
            readonly internalType: "struct OFTFeeDetail[]";
            readonly name: "oftFeeDetails";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "oftReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSend";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "msgFee";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "_fee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "oftReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_msgInspector";
            readonly type: "address";
        }];
        readonly name: "setMsgInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OFTInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFT;
}

declare class OFTAdapter__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLocalDecimals";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountLD";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "SlippageExceeded";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "EnforcedOptionSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "inspector";
            readonly type: "address";
        }];
        readonly name: "MsgInspectorSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountSentLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND_AND_CALL";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "approvalRequired";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimalConversionRate";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "enforcedOption";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveSimulate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "msgInspector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oftVersion";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }, {
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }];
        readonly name: "quoteOFT";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxAmountLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTLimit";
            readonly name: "oftLimit";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "int256";
                readonly name: "feeAmountLD";
                readonly type: "int256";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }];
            readonly internalType: "struct OFTFeeDetail[]";
            readonly name: "oftFeeDetails";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "oftReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSend";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "msgFee";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "_fee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "oftReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_msgInspector";
            readonly type: "address";
        }];
        readonly name: "setMsgInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OFTAdapterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFTAdapter;
}

declare class OFTCore__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLocalDecimals";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "msgValue";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "OnlyPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountLD";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "SlippageExceeded";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "EnforcedOptionSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "inspector";
            readonly type: "address";
        }];
        readonly name: "MsgInspectorSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountSentLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountReceivedLD";
            readonly type: "uint256";
        }];
        readonly name: "OFTSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND_AND_CALL";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }];
        readonly name: "allowInitializePath";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "approvalRequired";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimalConversionRate";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "enforcedOption";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "isComposeMsgSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveSimulate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "msgInspector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oAppVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "senderVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "receiverVersion";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oftVersion";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }, {
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }];
        readonly name: "quoteOFT";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxAmountLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTLimit";
            readonly name: "oftLimit";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "int256";
                readonly name: "feeAmountLD";
                readonly type: "int256";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }];
            readonly internalType: "struct OFTFeeDetail[]";
            readonly name: "oftFeeDetails";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "oftReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSend";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "msgFee";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraOptions";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "composeMsg";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "oftCmd";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SendParam";
            readonly name: "_sendParam";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "_fee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "amountSentLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountReceivedLD";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OFTReceipt";
            readonly name: "oftReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_msgInspector";
            readonly type: "address";
        }];
        readonly name: "setMsgInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OFTCoreInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFTCore;
}

type index$s_OFTAdapter__factory = OFTAdapter__factory;
declare const index$s_OFTAdapter__factory: typeof OFTAdapter__factory;
type index$s_OFTCore__factory = OFTCore__factory;
declare const index$s_OFTCore__factory: typeof OFTCore__factory;
type index$s_OFT__factory = OFT__factory;
declare const index$s_OFT__factory: typeof OFT__factory;
declare namespace index$s {
  export { index$s_OFTAdapter__factory as OFTAdapter__factory, index$s_OFTCore__factory as OFTCore__factory, index$s_OFT__factory as OFT__factory, index$t as interfaces };
}

declare class PreCrimeE1__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPreCrimePeers";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "preCrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oApp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "preCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "preCrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oApp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "_preCrimePeers";
            readonly type: "tuple[]";
        }];
        readonly name: "setPreCrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeE1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): PreCrimeE1;
}

type index$r_PreCrimeE1__factory = PreCrimeE1__factory;
declare const index$r_PreCrimeE1__factory: typeof PreCrimeE1__factory;
declare namespace index$r {
  export { index$r_PreCrimeE1__factory as PreCrimeE1__factory };
}

declare class IOAppPreCrimeSimulator__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IOAppPreCrimeSimulatorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOAppPreCrimeSimulator;
}

declare class IPreCrime__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "preCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPreCrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IPreCrime;
}

type index$q_IOAppPreCrimeSimulator__factory = IOAppPreCrimeSimulator__factory;
declare const index$q_IOAppPreCrimeSimulator__factory: typeof IOAppPreCrimeSimulator__factory;
type index$q_IPreCrime__factory = IPreCrime__factory;
declare const index$q_IPreCrime__factory: typeof IPreCrime__factory;
declare namespace index$q {
  export { index$q_IOAppPreCrimeSimulator__factory as IOAppPreCrimeSimulator__factory, index$q_IPreCrime__factory as IPreCrime__factory };
}

declare class OAppPreCrimeSimulator__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "preCrimeAddress";
            readonly type: "address";
        }];
        readonly name: "PreCrimeSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveSimulate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "preCrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_preCrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OAppPreCrimeSimulatorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OAppPreCrimeSimulator;
}

declare class PreCrime__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPreCrimePeers";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "preCrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oApp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oApp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "preCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "preCrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oApp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "_preCrimePeers";
            readonly type: "tuple[]";
        }];
        readonly name: "setPreCrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_packetMsgValues";
            readonly type: "uint256[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PreCrime;
}

type index$p_OAppPreCrimeSimulator__factory = OAppPreCrimeSimulator__factory;
declare const index$p_OAppPreCrimeSimulator__factory: typeof OAppPreCrimeSimulator__factory;
type index$p_PreCrime__factory = PreCrime__factory;
declare const index$p_PreCrime__factory: typeof PreCrime__factory;
declare namespace index$p {
  export { index$p_OAppPreCrimeSimulator__factory as OAppPreCrimeSimulator__factory, index$p_PreCrime__factory as PreCrime__factory, index$r as extensions, index$q as interfaces };
}

type TransparentUpgradeableProxyConstructorParams$1 = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TransparentUpgradeableProxy__factory$1 extends ContractFactory {
    constructor(...args: TransparentUpgradeableProxyConstructorParams$1);
    deploy(_logic: PromiseOrValue<string>, admin_: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TransparentUpgradeableProxy$1>;
    getDeployTransaction(_logic: PromiseOrValue<string>, admin_: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TransparentUpgradeableProxy$1;
    connect(signer: Signer): TransparentUpgradeableProxy__factory$1;
    static readonly bytecode = "0x608060405260405162000fb438038062000fb4833981016040819052620000269162000473565b828162000036828260006200009a565b5062000066905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000553565b60008051602062000f6d8339815191521462000086576200008662000575565b6200009182620000cc565b505050620005de565b620000a5836200013e565b600082511180620000b35750805b15620000c757620000c5838362000180565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200010e60008051602062000f6d833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16200013b81620001b1565b50565b62000149816200024f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001a8838360405180606001604052806027815260200162000f8d60279139620002e6565b90505b92915050565b6001600160a01b0381166200021c5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b8060008051602062000f6d8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000213565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6200022e565b6060600080856001600160a01b0316856040516200030591906200058b565b600060405180830381855af49150503d806000811462000342576040519150601f19603f3d011682016040523d82523d6000602084013e62000347565b606091505b5090925090506200035b8683838762000365565b9695505050505050565b60608315620003d9578251600003620003d1576001600160a01b0385163b620003d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000213565b5081620003e5565b620003e58383620003ed565b949350505050565b815115620003fe5781518083602001fd5b8060405162461bcd60e51b8152600401620002139190620005a9565b80516001600160a01b03811681146200043257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200046a57818101518382015260200162000450565b50506000910152565b6000806000606084860312156200048957600080fd5b62000494846200041a565b9250620004a4602085016200041a565b60408501519092506001600160401b0380821115620004c257600080fd5b818601915086601f830112620004d757600080fd5b815181811115620004ec57620004ec62000437565b604051601f8201601f19908116603f0116810190838211818310171562000517576200051762000437565b816040528281528960208487010111156200053157600080fd5b620005448360208301602088016200044d565b80955050505050509250925092565b81810381811115620001ab57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600082516200059f8184602087016200044d565b9190910192915050565b6020815260008251806020840152620005ca8160408501602087016200044d565b601f01601f19169190910160400192915050565b61097f80620005ee6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100e6578063f851a440146101065761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61011b565b005b61006b61011b565b34801561008157600080fd5b5061006b6100903660046107f3565b610135565b61006b6100a336600461080e565b61017f565b3480156100b457600080fd5b506100bd6101f3565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100f257600080fd5b5061006b6101013660046107f3565b610231565b34801561011257600080fd5b506100bd61025e565b61012361028c565b61013361012e6102e2565b6102ec565b565b61013d610310565b73ffffffffffffffffffffffffffffffffffffffff1633036101775761017481604051806020016040528060008152506000610350565b50565b61017461011b565b610187610310565b73ffffffffffffffffffffffffffffffffffffffff1633036101eb576101e68383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610350915050565b505050565b6101e661011b565b60006101fd610310565b73ffffffffffffffffffffffffffffffffffffffff163303610226576102216102e2565b905090565b61022e61011b565b90565b610239610310565b73ffffffffffffffffffffffffffffffffffffffff163303610177576101748161037b565b6000610268610310565b73ffffffffffffffffffffffffffffffffffffffff16330361022657610221610310565b610294610310565b73ffffffffffffffffffffffffffffffffffffffff163303610133576040517ff0d4b23e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102216103dc565b3660008037600080366000845af43d6000803e80801561030b573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b5473ffffffffffffffffffffffffffffffffffffffff16919050565b61035983610404565b6000825111806103665750805b156101e6576103758383610451565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103a4610310565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301520160405180910390a16101748161047d565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610334565b61040d8161058e565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610476838360405180606001604052806027815260200161092360279139610659565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b73ffffffffffffffffffffffffffffffffffffffff81163b610632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161051c565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610548565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405161068391906108b5565b600060405180830381855af49150503d80600081146106be576040519150601f19603f3d011682016040523d82523d6000602084013e6106c3565b606091505b50915091506106d4868383876106de565b9695505050505050565b6060831561077457825160000361076d5773ffffffffffffffffffffffffffffffffffffffff85163b61076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051c565b508161077e565b61077e8383610786565b949350505050565b8151156107965781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c91906108d1565b803573ffffffffffffffffffffffffffffffffffffffff811681146107ee57600080fd5b919050565b60006020828403121561080557600080fd5b610476826107ca565b60008060006040848603121561082357600080fd5b61082c846107ca565b9250602084013567ffffffffffffffff8082111561084957600080fd5b818601915086601f83011261085d57600080fd5b81358181111561086c57600080fd5b87602082850101111561087e57600080fd5b6020830194508093505050509250925092565b60005b838110156108ac578181015183820152602001610894565b50506000910152565b600082516108c7818460208701610891565b9190910192915050565b60208152600082518060208401526108f0816040850160208701610891565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122077144df0be47c9a6de1da981c26a5b43efc81bf743637b69867b5ccb514e568f64736f6c63430008160033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_logic";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AdminAccessDenied";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TransparentUpgradeableProxyInterface$1;
    static connect(address: string, signerOrProvider: Signer | Provider): TransparentUpgradeableProxy$1;
}

declare namespace index$o {
  export { TransparentUpgradeableProxy__factory$1 as TransparentUpgradeableProxy__factory };
}

declare class IReceiveUlnView__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "enum VerificationState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IReceiveUlnViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IReceiveUlnView;
}

type LzExecutorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class LzExecutor__factory extends ContractFactory {
    constructor(...args: LzExecutorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<LzExecutor>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): LzExecutor;
    connect(signer: Signer): LzExecutor__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611f29806100206000396000f3fe6080604052600436106100f35760003560e01c8063861e1ca51161008a578063d73d37c611610059578063d73d37c61461033f578063dcfdeb601461035f578063e1e3a7df14610372578063f2fde38b1461039257600080fd5b8063861e1ca5146102af5780638da5cb5b146102df578063c0c53b8b1461030a578063cb5026b91461032a57600080fd5b80636f178835116100c65780636f178835146101e0578063715018a6146102235780637260753714610238578063843c7b0e1461028257600080fd5b806307b18bde146100f85780632baf0be71461011a5780634b4b2efb146101615780635e280f111461018e575b600080fd5b34801561010457600080fd5b506101186101133660046118ed565b6103b2565b005b34801561012657600080fd5b5061014e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c3660046119d3565b610418565b6040516101589190611a36565b34801561019a57600080fd5b506065546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610158565b3480156101ec57600080fd5b506101bb6101fb366004611a77565b60986020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561022f57600080fd5b50610118610713565b34801561024457600080fd5b5060975461026d9074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff9091168152602001610158565b34801561028e57600080fd5b506097546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102bb57600080fd5b506102cf6102ca3660046119d3565b610727565b6040519015158152602001610158565b3480156102eb57600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff166101bb565b34801561031657600080fd5b50610118610325366004611a99565b610810565b34801561033657600080fd5b5061014e600081565b34801561034b57600080fd5b5061011861035a366004611adc565b610bbf565b61011861036d366004611b06565b610c50565b34801561037e57600080fd5b506102cf61038d366004611bb4565b6111ae565b34801561039e57600080fd5b506101186103ad366004611a77565b61134d565b6103ba611404565b6103c48282611485565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fc303ca808382409472acbbf899c316cf439f409f6584aae22df86dfa3c9ed50491015b60405180910390a15050565b6065548251602084015160408086015190517fc9fc7bcd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff1660648201526000928392169063c9fc7bcd90608401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611c00565b9050801580156105b55750606554845160208601516040517f5b17bb7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90931660248201526044810191909152911690635b17bb7090606401602060405180830381865afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190611c19565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b156105c457600391505061070d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81148015906106ba5750606554845160208601516040517fa0dd43fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9093166024820152604481019190915291169063a0dd43fc90606401602060405180830381865afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190611c19565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b156106c957600291505061070d565b80158015906106f857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b1561070757600191505061070d565b60009150505b92915050565b61071b611404565b6107256000611590565b565b606554604080517f861e1ca5000000000000000000000000000000000000000000000000000000008152845163ffffffff166004820152602085015160248201529084015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8381166064830152600092169063861e1ca590608401602060405180830381865afa9250505080156107fd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526107fa91810190611c36565b60015b6108095750600061070d565b905061070d565b600061083a7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166108935773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556108b5565b3373ffffffffffffffffffffffffffffffffffffffff8216146108b557600080fd5b600054610100900460ff16158080156108d55750600054600160ff909116105b806108ef5750303b1580156108ef575060005460ff166001145b610980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156109de57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6109e6611607565b6109ef836116a6565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691909117909155606554604080517f416ecebf0000000000000000000000000000000000000000000000000000000081529051919092169163416ecebf9160048083019260209291908290030181865afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190611c58565b609780547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff939093169290920291909117905573ffffffffffffffffffffffffffffffffffffffff858116600090815260986020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790558015610bb857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610bc7611404565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526098602090815260409182902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016948616948517905581519283528201929092527f142c46535a86ac791981f3f16bdfd58291f3f03fc3fd111646f3f0e4eb326b63910161040c565b6000610c74610c6436869003860186611c75565b61017c6080870160608801611a77565b90506003816003811115610c8a57610c8a611a07565b03610cc1576040517f3fd387de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816003811115610cd557610cd5611a07565b146110ac5760975460009073ffffffffffffffffffffffffffffffffffffffff1615610d195760975473ffffffffffffffffffffffffffffffffffffffff16610d1b565b855b905060006001610d316060880160408901611c91565b610d3e6020890189611cae565b60975460208a01359074010000000000000000000000000000000000000000900463ffffffff16610d7560808c0160608d01611a77565b60405160f89690961b7fff0000000000000000000000000000000000000000000000000000000000000016602087015260c09490941b7fffffffffffffffff00000000000000000000000000000000000000000000000016602186015260e092831b7fffffffff000000000000000000000000000000000000000000000000000000009081166029870152602d86019290925290911b16604d83015273ffffffffffffffffffffffffffffffffffffffff166051820152607101604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060006080870135610e7360a0890189611ccb565b604051602001610e8593929190611d37565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012073ffffffffffffffffffffffffffffffffffffffff8087166000908152609890945291909220549192501680610f1d576040517f1bbb68a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f27d12cd900000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8316906327d12cd990610f749087908790600401611d51565b602060405180830381865afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190611dc4565b90506001816003811115610fcb57610fcb611a07565b0361105b576040517f0894edf100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630894edf1906110249087908790600401611d51565b600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b505050506110a6565b600081600381111561106f5761106f611a07565b036110a6576040517f0dea846600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505b60005b828110156110f857368484838181106110ca576110ca611de5565b6040029190910191506110ef90506110e56020830183611a77565b8260200135611485565b506001016110af565b5060655473ffffffffffffffffffffffffffffffffffffffff16630c0c389e60e0860135610100870135876111336080820160608301611a77565b60808a013561114560a08c018c611ccb565b61115260c08e018e611ccb565b6040518a63ffffffff1660e01b81526004016111749796959493929190611e5d565b6000604051808303818589803b15801561118d57600080fd5b5088f11580156111a1573d6000803e3d6000fd5b5050505050505050505050565b60655484516040517f9d7f977500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015263ffffffff909216602482015284821660448201526000929190911690639d7f977590606401602060405180830381865afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d9190611c36565b61126957506000611345565b606554604080517fc9a54a99000000000000000000000000000000000000000000000000000000008152875163ffffffff166004820152602088015160248201529087015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff86811660648301529091169063c9a54a9990608401602060405180830381865afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113289190611c36565b61133457506000611345565b8161134157506000611345565b5060015b949350505050565b611355611404565b73ffffffffffffffffffffffffffffffffffffffff81166113f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610977565b61140181611590565b50565b60335473ffffffffffffffffffffffffffffffffffffffff163314610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610977565b73ffffffffffffffffffffffffffffffffffffffff82166114d2576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461152c576040519150601f19603f3d011682016040523d82523d6000602084013e611531565b606091505b505090508061158b576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610977565b505050565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610977565b610725611746565b600054610100900460ff1661173d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610977565b611401816117e6565b600054610100900460ff166117dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610977565b61072533611590565b600054610100900460ff1661187d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610977565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b803573ffffffffffffffffffffffffffffffffffffffff811681146118e857600080fd5b919050565b6000806040838503121561190057600080fd5b611909836118c4565b946020939093013593505050565b63ffffffff8116811461140157600080fd5b67ffffffffffffffff8116811461140157600080fd5b60006060828403121561195157600080fd5b6040516060810181811067ffffffffffffffff8211171561199b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290508082356119ac81611917565b81526020838101359082015260408301356119c681611929565b6040919091015292915050565b600080608083850312156119e657600080fd5b6119f0848461193f565b91506119fe606084016118c4565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160048310611a71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208284031215611a8957600080fd5b611a92826118c4565b9392505050565b600080600060608486031215611aae57600080fd5b611ab7846118c4565b9250611ac5602085016118c4565b9150611ad3604085016118c4565b90509250925092565b60008060408385031215611aef57600080fd5b611af8836118c4565b91506119fe602084016118c4565b60008060008060608587031215611b1c57600080fd5b611b25856118c4565b9350602085013567ffffffffffffffff80821115611b4257600080fd5b908601906101208289031215611b5757600080fd5b90935060408601359080821115611b6d57600080fd5b818701915087601f830112611b8157600080fd5b813581811115611b9057600080fd5b8860208260061b8501011115611ba557600080fd5b95989497505060200194505050565b60008060008060c08587031215611bca57600080fd5b611bd4868661193f565b9350611be2606086016118c4565b9250611bf0608086016118c4565b9396929550929360a00135925050565b600060208284031215611c1257600080fd5b5051919050565b600060208284031215611c2b57600080fd5b8151611a9281611929565b600060208284031215611c4857600080fd5b81518015158114611a9257600080fd5b600060208284031215611c6a57600080fd5b8151611a9281611917565b600060608284031215611c8757600080fd5b611a92838361193f565b600060208284031215611ca357600080fd5b8135611a9281611929565b600060208284031215611cc057600080fd5b8135611a9281611917565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611d0057600080fd5b83018035915067ffffffffffffffff821115611d1b57600080fd5b602001915036819003821315611d3057600080fd5b9250929050565b838152818360208301376000910160200190815292915050565b604081526000835180604084015260005b81811015611d7f5760208187018101516060868401015201611d62565b5060006060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150508260208301529392505050565b600060208284031215611dd657600080fd5b815160048110611a9257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60008835611e6a81611917565b63ffffffff168252602089810135908301526040890135611e8a81611929565b67ffffffffffffffff811660408401525073ffffffffffffffffffffffffffffffffffffffff8816606083015286608083015260e060a0830152611ed260e083018688611e14565b82810360c0840152611ee5818587611e14565b9a995050505050505050505056fea2646970667358221220d4dc21622cd209072937535e93f175af6275d7c6daba87d120fca111727ed06364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LzExecutor_Executed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzExecutor_ReceiveLibViewNotSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzExecutor_Verifying";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_receiveLibView";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibViewSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LzReceiveParam";
            readonly name: "_lzReceiveParam";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "_receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct NativeDropParam[]";
            readonly name: "_nativeDropParams";
            readonly type: "tuple[]";
        }];
        readonly name: "commitAndExecute";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiveUln302";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveUln302View";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiveLib";
            readonly type: "address";
        }];
        readonly name: "receiveLibToView";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiveLibView";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "receiveUln302";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLibView";
            readonly type: "address";
        }];
        readonly name: "setReceiveLibView";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawNative";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): LzExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LzExecutor;
}

type index$n_IReceiveUlnView__factory = IReceiveUlnView__factory;
declare const index$n_IReceiveUlnView__factory: typeof IReceiveUlnView__factory;
type index$n_LzExecutor__factory = LzExecutor__factory;
declare const index$n_LzExecutor__factory: typeof LzExecutor__factory;
declare namespace index$n {
  export { index$n_IReceiveUlnView__factory as IReceiveUlnView__factory, index$n_LzExecutor__factory as LzExecutor__factory };
}

type CCIPDVNAdapterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class CCIPDVNAdapter__factory extends ContractFactory {
    constructor(...args: CCIPDVNAdapterConstructorParams);
    deploy(_admins: PromiseOrValue<string>[], _router: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<CCIPDVNAdapter>;
    getDeployTransaction(_admins: PromiseOrValue<string>[], _router: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): CCIPDVNAdapter;
    connect(signer: Signer): CCIPDVNAdapter__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b5060405162004399380380620043998339810160408190526200003491620002e0565b604080516000808252602082019092526001805460ff61ffff60e81b01191661017760ed1b179055600280546001600160a01b031916905533918491612ee09182858581156200008b576200008b6000836200015f565b60005b8551811015620000ef57620000e67f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000d257620000d2620003c6565b60200260200101516200015f60201b60201c565b6001016200008e565b5060005b81518110156200014057620001377fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000d257620000d2620003c6565b600101620000f3565b5050506001600160a01b03909616608052506200041995505050505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015620001b057506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b15620001fd5760018054601590620001d890600160a81b90046001600160401b0316620003dc565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6200020982826200020d565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000209576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002693390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002db57600080fd5b919050565b60008060408385031215620002f457600080fd5b82516001600160401b03808211156200030c57600080fd5b818501915085601f8301126200032157600080fd5b8151602082821115620003385762000338620002ad565b8160051b604051601f19603f83011681018181108682111715620003605762000360620002ad565b6040529283528183019350848101820192898411156200037f57600080fd5b948201945b83861015620003a8576200039886620002c3565b8552948201949382019362000384565b9650620003b99050878201620002c3565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b031981016200040f57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b608051613f4f6200044a600039600081816106bd01528181610ce9015281816111d0015261160d0152613f4f6000f3fe6080604052600436106101d05760003560e01c8063741bef1a116100f7578063becc1fe311610095578063cd88b90311610064578063cd88b90314610618578063d2ae210414610638578063d547741f1461068b578063f887ea40146106ab57600080fd5b8063becc1fe314610578578063c358de0a146105a6578063c416aa51146105c6578063c7b2370b146105f857600080fd5b806391d14854116100d157806391d14854146104cf57806395d376d7146105205780639e94496514610533578063a217fddf1461056357600080fd5b8063741bef1a1461043d5780637a6ce2cc1461048f57806385572ffb146104af57600080fd5b80632de113761161016f5780634cfa6d2c1161013e5780634cfa6d2c146103ad57806351b6a0fd146103e55780635c975abb14610405578063724e78da1461041d57600080fd5b80632de113761461032d5780632f2ff15d1461034d57806330bb3aac1461036d57806336568abe1461038d57600080fd5b80631095b6d7116101ab5780631095b6d71461028257806316c38b3c146102a2578063248a9ca3146102c257806326e67a371461030057600080fd5b8062bf2e80146101dc57806301e336671461023057806301ffc9a71461025257600080fd5b366101d757005b600080fd5b3480156101e857600080fd5b50600154610218907d010000000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004612f55565b6106df565b005b34801561025e57600080fd5b5061027261026d366004612f91565b61071a565b6040519015158152602001610227565b34801561028e57600080fd5b5061025061029d366004612f55565b610776565b3480156102ae57600080fd5b506102506102bd366004612fe1565b610905565b3480156102ce57600080fd5b506102f26102dd366004612ffe565b60009081526020819052604090206001015490565b604051908152602001610227565b34801561030c57600080fd5b5061032061031b36600461302b565b61092a565b6040516102279190613046565b34801561033957600080fd5b5061027261034836600461308d565b6109b1565b34801561035957600080fd5b506102506103683660046130a8565b610a96565b34801561037957600080fd5b506102f2610388366004613135565b610ac0565b34801561039957600080fd5b506102506103a83660046130a8565b610d61565b3480156103b957600080fd5b506102f26103c83660046131ab565b600460209081526000928352604080842090915290825290205481565b3480156103f157600080fd5b506102506104003660046131d5565b610d93565b34801561041157600080fd5b5060015460ff16610272565b34801561042957600080fd5b5061025061043836600461308d565b610e8a565b34801561044957600080fd5b5060025461046a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610227565b34801561049b57600080fd5b506102506104aa36600461328f565b610f2f565b3480156104bb57600080fd5b506102506104ca3660046132e9565b6111b8565b3480156104db57600080fd5b506102726104ea3660046130a8565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6102f261052e36600461331e565b611386565b34801561053f57600080fd5b5061055361054e36600461302b565b61178c565b60405161022794939291906133f5565b34801561056f57600080fd5b506102f2600081565b34801561058457600080fd5b50610598610593366004613433565b611854565b60405161022792919061344e565b3480156105b257600080fd5b506102506105c136600461347f565b611900565b3480156105d257600080fd5b5060015461046a90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561060457600080fd5b5061025061061336600461308d565b6119ae565b34801561062457600080fd5b5061025061063336600461349a565b611a52565b34801561064457600080fd5b50600154610672907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610227565b34801561069757600080fd5b506102506106a63660046130a8565b611aa3565b3480156106b757600080fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561070981611ac8565b610714848484611ad5565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f85572ffb000000000000000000000000000000000000000000000000000000001480610770575061077082611b05565b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756107a081611ac8565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff1661081e576040517f5ee08b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b15801561088e57600080fd5b505af11580156108a2573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b600061091081611ac8565b81156109225761091e611b9c565b5050565b61091e611c1b565b63ffffffff81166000908152600360209081526040918290208054835181840281018401909452808452606093928301828280156109a557602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109765790505b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e86630553602052604081205460ff1615610a0657506000919050565b6001547501000000000000000000000000000000000000000000900467ffffffffffffffff161580610a7c575073ffffffffffffffffffffffffffffffffffffffff821660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15610a8957506001919050565b506000919050565b919050565b600082815260208190526040902060010154610ab181611ac8565b610abb8383611c72565b505050565b600083610acc816109b1565b610b02576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825263ffffffff8916815267ffffffffffffffff8816602082015273ffffffffffffffffffffffffffffffffffffffff8716918101919091526001547d010000000000000000000000000000000000000000000000000000000000900461ffff1660608201526000600581610b816175308c6134e0565b63ffffffff16815260208082019290925260409081016000208151608081018352815467ffffffffffffffff8116825268010000000000000000900461ffff16938101939093526001810180549192840191610bdc9061352a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c089061352a565b8015610c555780601f10610c2a57610100808354040283529160200191610c55565b820191906000526020600020905b815481529060010190602001808311610c3857829003601f168201915b5050505050815260200160028201548152505090506000610c74611d38565b90506000610c8b8284604001518560600151611d6b565b6001546040517fcbe56fcc000000000000000000000000000000000000000000000000000000008152919250610100900473ffffffffffffffffffffffffffffffffffffffff169063cbe56fcc90610d11908790879086908e908e907f00000000000000000000000000000000000000000000000000000000000000009060040161369d565b602060405180830381865afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190613787565b9b9a5050505050505050505050565b6040517fdec9f03100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d9e81611ac8565b60005b82811015610e4b5736848483818110610dbc57610dbc6137a0565b60600291909101915050604081013560046000610ddc602085018561308d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020016020810190610e2b919061302b565b63ffffffff16815260208101919091526040016000205550600101610da1565b507f360a0efdea8fcc9a11ee20a2099e314ddcf49a941d66790cd4e5adea30faa0748383604051610e7d9291906137cf565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610eb481611ac8565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f5981611ac8565b60005b828110156111865736848483818110610f7757610f776137a0565b9050602002810190610f89919061384a565b90506000617530610f9d602084018461302b565b610fa791906134e0565b63ffffffff811660009081526005602052604081205491925067ffffffffffffffff909116900361110e57610fe26060830160408401613433565b63ffffffff8216600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691909117905561103b6080830183613888565b63ffffffff831660009081526005602052604090206001019161105f91908361396c565b5080600660006110756060860160408701613433565b67ffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff929092169190911790556110cf6080830183613888565b600660006110e36060870160408801613433565b67ffffffffffffffff16815260208101919091526040016000206001019161110c91908361396c565b505b61111e604083016020840161347f565b63ffffffff9091166000908152600560205260409020805461ffff9290921668010000000000000000027fffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff909216919091178155606090910135600290910155600101610f5c565b507f3e45c9c6c5ff16903cc7bc124fa7a101346d0e71bd9326e3f9370e2a90d57dd08383604051610e7d929190613a86565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461122e576040517f4641de990000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006006816112436040850160208601613433565b67ffffffffffffffff16815260208082019290925260409081016000208151808301909252805463ffffffff16825260018101805492939192918401916112899061352a565b80601f01602080910402602001604051908101604052809291908181526020018280546112b59061352a565b80156113025780601f106112d757610100808354040283529160200191611302565b820191906000526020600020905b8154815290600101906020018083116112e557829003601f168201915b505050505081525050905061136e8260200160208101906113239190613433565b6113306040850185613888565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506020840151611e9e565b805161091e906113816060850185613888565b611ee9565b600061139860a085016080860161308d565b6113a1816109b1565b6113d7576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113ef336113ea602089018961302b565b612008565b60408051608081019091529091506000908061140e60208a018a61302b565b63ffffffff16815260200161142960808a0160608b01613433565b67ffffffffffffffff16815260200161144860a08a0160808b0161308d565b73ffffffffffffffffffffffffffffffffffffffff1681526001547d010000000000000000000000000000000000000000000000000000000000900461ffff166020918201529091506000906005908290617530906114a9908c018c61302b565b6114b391906134e0565b63ffffffff16815260208082019290925260409081016000208151608081018352815467ffffffffffffffff8116825268010000000000000000900461ffff1693810193909352600181018054919284019161150e9061352a565b80601f016020809104026020016040519081016040528092919081815260200182805461153a9061352a565b80156115875780601f1061155c57610100808354040283529160200191611587565b820191906000526020600020905b81548152906001019060200180831161156a57829003601f168201915b50505050508152602001600282015481525050905060006115f0848a80602001906115b29190613888565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060408c013561209a565b905060006116078284604001518560600151611d6b565b905060007f00000000000000000000000000000000000000000000000000000000000000009050600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e034df88787868f8f886040518763ffffffff1660e01b81526004016116939695949392919061369d565b60408051808303816000875af11580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190613be7565b995090506116e333826120af565b84516040517f96f4e9f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416916396f4e9f9918491611739918890600401613c0b565b60206040518083038185885af1158015611757573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061177c9190613787565b5050505050505050509392505050565b6005602052600090815260409020805460018201805467ffffffffffffffff8316936801000000000000000090930461ffff169291906117cb9061352a565b80601f01602080910402602001604051908101604052809291908181526020018280546117f79061352a565b80156118445780601f1061181957610100808354040283529160200191611844565b820191906000526020600020905b81548152906001019060200180831161182757829003601f168201915b5050505050908060020154905084565b6006602052600090815260409020805460018201805463ffffffff909216929161187d9061352a565b80601f01602080910402602001604051908101604052809291908181526020018280546118a99061352a565b80156118f65780601f106118cb576101008083540402835291602001916118f6565b820191906000526020600020905b8154815290600101906020018083116118d957829003601f168201915b5050505050905082565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561192a81611ac8565b600180547fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167d01000000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001610f23565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756119d881611ac8565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001610f23565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611a7c81611ac8565b63ffffffff84166000908152600360205260409020611a9c908484612e73565b5050505050565b600082815260208190526040902060010154611abe81611ac8565b610abb8383612108565b611ad281336121cd565b50565b73ffffffffffffffffffffffffffffffffffffffff8316611afa57610abb8282612285565b610abb83838361238b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061077057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610770565b611ba46123f9565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b611c23612468565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611bf1565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611ccf575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b15611d2e5760018054601590611d07907501000000000000000000000000000000000000000000900467ffffffffffffffff16613c5d565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b61091e82826124d4565b60408051605180825260808201909252606091611d66916000916020820181803683370190505060006125c4565b905090565b611db36040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040805160a0810182528481526020808201879052825160008082529181018452919283019190611e06565b6040805180820190915260008082526020820152815260200190600190039081611ddf5790505b50815260006020808301829052604080518082018252878152820192835280516024810188905292511515604480850191909152815180850390910181526064909301815290820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97a657c90000000000000000000000000000000000000000000000000000000017905290910152949350505050565b8080519060200120828051906020012014610abb5782826040517f0b4f78c2000000000000000000000000000000000000000000000000000000008152600401611225929190613c84565b8263ffffffff16617530611efd84846125f3565b611f0791906134e0565b63ffffffff1614611f74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f44564e41646170746572426173653a20696e76616c69642073726345696400006044820152606401611225565b6000806000611f838585612624565b9250925092508273ffffffffffffffffffffffffffffffffffffffff16630223536e838367ffffffffffffffff6040518463ffffffff1660e01b8152600401611fce93929190613ca7565b600060405180830381600087803b158015611fe857600080fd5b505af1158015611ffc573d6000803e3d6000fd5b50505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020908152604080832063ffffffff8516845290915290205480610770576040517ff25127e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015263ffffffff83166024820152604401611225565b60606120a78484846125c4565b949350505050565b4781811015610abb576120c283306126f3565b504781811015610abb576040517f6079581f0000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401611225565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015612164575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b156121c3576001805460159061219c907501000000000000000000000000000000000000000000900467ffffffffffffffff16613cda565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b61091e828261286a565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661091e5761220b81612921565b612216836020612940565b604051602001612227929190613d1c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261122591600401613d9d565b73ffffffffffffffffffffffffffffffffffffffff82166122d2576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461232c576040519150601f19603f3d011682016040523d82523d6000602084013e612331565b606091505b5050905080610abb576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401611225565b73ffffffffffffffffffffffffffffffffffffffff82166123d8576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610abb73ffffffffffffffffffffffffffffffffffffffff84168383612b8a565b60015460ff1615612466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611225565b565b60015460ff16612466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401611225565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661091e5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556125663390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60608382846040516020016125db93929190613db0565b60405160208183030381529060405290509392505050565b600082604983612604826004613ddd565b9261261193929190613df0565b61261a91613e1a565b60e01c9392505050565b600060608161263560516040613ddd565b841461266d576040517ff1d10e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61268a61267e602060008789613df0565b61268791613e62565b90565b925061269a604060208688613df0565b6126a391613e62565b90506126b28460408188613df0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509598929750929550909350505050565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063faaebd2190602401602060405180830381865afa158015612760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127849190613787565b90508015610abb576040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063fd9be52290604401600060405180830381600087803b1580156127fc57600080fd5b505af1158015612810573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8088168252861660208201529081018490527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb92506060019050610e7d565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561091e5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606061077073ffffffffffffffffffffffffffffffffffffffff831660145b6060600061294f836002613e9e565b61295a906002613ddd565b67ffffffffffffffff811115612972576129726138ed565b6040519080825280601f01601f19166020018201604052801561299c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129d3576129d36137a0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a3657612a366137a0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612a72846002613e9e565b612a7d906001613ddd565b90505b6001811115612b1a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612abe57612abe6137a0565b1a60f81b828281518110612ad457612ad46137a0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612b1381613eb5565b9050612a80565b508315612b83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401611225565b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610abb92869291600091612c55918516908490612d02565b9050805160001480612c76575080806020019051810190612c769190613eea565b610abb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611225565b60606120a78484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051612d369190613f07565b60006040518083038185875af1925050503d8060008114612d73576040519150601f19603f3d011682016040523d82523d6000602084013e612d78565b606091505b5091509150612d8987838387612d94565b979650505050505050565b60608315612e2a578251600003612e235773ffffffffffffffffffffffffffffffffffffffff85163b612e23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611225565b50816120a7565b6120a78383815115612e3f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112259190613d9d565b82805482825590600052602060002090601f01602090048101928215612f0c5791602002820160005b83821115612edd57833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612e9c565b8015612f0a5782816101000a81549060ff0219169055600101602081600001049283019260010302612edd565b505b50612f18929150612f1c565b5090565b5b80821115612f185760008155600101612f1d565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9157600080fd5b600080600060608486031215612f6a57600080fd5b612f7384612f31565b9250612f8160208501612f31565b9150604084013590509250925092565b600060208284031215612fa357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612b8357600080fd5b8015158114611ad257600080fd5b600060208284031215612ff357600080fd5b8135612b8381612fd3565b60006020828403121561301057600080fd5b5035919050565b803563ffffffff81168114610a9157600080fd5b60006020828403121561303d57600080fd5b612b8382613017565b6020808252825182820181905260009190848201906040850190845b8181101561308157835160ff1683529284019291840191600101613062565b50909695505050505050565b60006020828403121561309f57600080fd5b612b8382612f31565b600080604083850312156130bb57600080fd5b823591506130cb60208401612f31565b90509250929050565b803567ffffffffffffffff81168114610a9157600080fd5b60008083601f8401126130fe57600080fd5b50813567ffffffffffffffff81111561311657600080fd5b60208301915083602082850101111561312e57600080fd5b9250929050565b60008060008060006080868803121561314d57600080fd5b61315686613017565b9450613164602087016130d4565b935061317260408701612f31565b9250606086013567ffffffffffffffff81111561318e57600080fd5b61319a888289016130ec565b969995985093965092949392505050565b600080604083850312156131be57600080fd5b6131c783612f31565b91506130cb60208401613017565b600080602083850312156131e857600080fd5b823567ffffffffffffffff8082111561320057600080fd5b818501915085601f83011261321457600080fd5b81358181111561322357600080fd5b86602060608302850101111561323857600080fd5b60209290920196919550909350505050565b60008083601f84011261325c57600080fd5b50813567ffffffffffffffff81111561327457600080fd5b6020830191508360208260051b850101111561312e57600080fd5b600080602083850312156132a257600080fd5b823567ffffffffffffffff8111156132b957600080fd5b6132c58582860161324a565b90969095509350505050565b600060a082840312156132e357600080fd5b50919050565b6000602082840312156132fb57600080fd5b813567ffffffffffffffff81111561331257600080fd5b6120a7848285016132d1565b60008060006040848603121561333357600080fd5b833567ffffffffffffffff8082111561334b57600080fd5b613357878388016132d1565b9450602086013591508082111561336d57600080fd5b5061337a868287016130ec565b9497909650939450505050565b60005b838110156133a257818101518382015260200161338a565b50506000910152565b600081518084526133c3816020860160208601613387565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b67ffffffffffffffff8516815261ffff8416602082015260806040820152600061342260808301856133ab565b905082606083015295945050505050565b60006020828403121561344557600080fd5b612b83826130d4565b63ffffffff831681526040602082015260006120a760408301846133ab565b803561ffff81168114610a9157600080fd5b60006020828403121561349157600080fd5b612b838261346d565b6000806000604084860312156134af57600080fd5b6134b884613017565b9250602084013567ffffffffffffffff8111156134d457600080fd5b61337a8682870161324a565b600063ffffffff8084168061351e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b600181811c9082168061353e57607f821691505b6020821081036132e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000815160a0845261358c60a08501826133ab565b9050602080840151858303828701526135a583826133ab565b60408681015188830389830152805180845290850195509092506000918401905b80831015613605578551805173ffffffffffffffffffffffffffffffffffffffff168352850151858301529484019460019290920191908301906135c6565b506060870151945061362f606089018673ffffffffffffffffffffffffffffffffffffffff169052565b60808701519450878103608089015261364881866133ab565b98975050505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600061010063ffffffff8951168352602089015167ffffffffffffffff808216602086015273ffffffffffffffffffffffffffffffffffffffff60408c015116604086015260608b0151915061ffff8083166060870152836080870152818b5116848701528060208c015116610120870152505050506040870151608061014084015261372e6101808401826133ab565b9050606088015161016084015282810360a084015261374d8188613577565b905082810360c0840152613762818688613654565b915050612d8960e083018473ffffffffffffffffffffffffffffffffffffffff169052565b60006020828403121561379957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020808252818101839052600090604080840186845b8781101561383d5773ffffffffffffffffffffffffffffffffffffffff61380b83612f31565b16835263ffffffff61381e868401613017565b16838601528184013584840152606092830192909101906001016137e5565b5090979650505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261387e57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126138bd57600080fd5b83018035915067ffffffffffffffff8211156138d857600080fd5b60200191503681900382131561312e57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610abb576000816000526020600020601f850160051c810160208610156139455750805b601f850160051c820191505b8181101561396457828155600101613951565b505050505050565b67ffffffffffffffff831115613984576139846138ed565b61399883613992835461352a565b8361391c565b6000601f8411600181146139ea57600085156139b45750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611a9c565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015613a395786850135825560209485019460019092019101613a19565b5086821015613a74577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208082528181018390526000906040808401600586901b8501820187855b88811015613bd9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff618b3603018112613b0657600080fd5b8a0160a063ffffffff613b1883613017565b16855261ffff613b2989840161346d565b1688860152613b398783016130d4565b67ffffffffffffffff908116868901526060838101359087015260809081840135368590037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112613b8b57600080fd5b90930189810193903581811115613ba157600080fd5b803603851315613bb057600080fd5b8383890152613bc28489018287613654565b988b01989750505093880193505050600101613aa5565b509098975050505050505050565b60008060408385031215613bfa57600080fd5b505080516020909101519092909150565b67ffffffffffffffff831681526040602082015260006120a76040830184613577565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff808316818103613c7a57613c7a613c2e565b6001019392505050565b67ffffffffffffffff831681526040602082015260006120a760408301846133ab565b606081526000613cba60608301866133ab565b905083602083015267ffffffffffffffff83166040830152949350505050565b600067ffffffffffffffff821680613cf457613cf4613c2e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613d54816017850160208801613387565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613d91816028840160208801613387565b01602801949350505050565b602081526000612b8360208301846133ab565b83815282602082015260008251613dce816040850160208701613387565b91909101604001949350505050565b8082018082111561077057610770613c2e565b60008085851115613e0057600080fd5b83861115613e0d57600080fd5b5050820193919092039150565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015613e5a5780818660040360031b1b83161692505b505092915050565b80356020831015610770577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b808202811582820484141761077057610770613c2e565b600081613ec457613ec4613c2e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215613efc57600080fd5b8151612b8381612fd3565b6000825161387e81846020870161338756fea2646970667358221220d38195cb49297f95b2507db2e2c875fd55013adc25aa35c58b3f5a813ba5361664736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }];
        readonly name: "CCIPDVNAdapter_InvalidRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "chainSelector";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes";
            readonly name: "peer";
            readonly type: "bytes";
        }];
        readonly name: "CCIPDVNAdapter_UntrustedPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct ICCIPDVNAdapter.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "messageId";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "sourceChainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes";
                readonly name: "sender";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Client.EVMTokenAmount[]";
                readonly name: "destTokenAmounts";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct Client.Any2EVMMessage";
            readonly name: "_message";
            readonly type: "tuple";
        }];
        readonly name: "ccipReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "chainSelector";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "peer";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "router";
        readonly outputs: readonly [{
            readonly internalType: "contract IRouterClient";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICCIPDVNAdapter.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "srcChainSelector";
            readonly type: "uint64";
        }];
        readonly name: "srcConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "peer";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): CCIPDVNAdapterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CCIPDVNAdapter;
}

type CCIPDVNAdapterFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class CCIPDVNAdapterFeeLib__factory extends ContractFactory {
    constructor(...args: CCIPDVNAdapterFeeLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<CCIPDVNAdapterFeeLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): CCIPDVNAdapterFeeLib;
    connect(signer: Signer): CCIPDVNAdapterFeeLib__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611100806100206000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b146100f95780639e9449651461012e578063cbe56fcc1461018e578063f2fde38b146101bc57600080fd5b806334378d4814610080578063715018a6146100a25780637e034df8146100b75780638129fc1c146100e4575b600080fd5b34801561008c57600080fd5b506100a061009b366004610ab8565b6101dc565b005b3480156100ae57600080fd5b506100a06102e7565b6100ca6100c5366004610b77565b6102fb565b604080519283526020830191909152015b60405180910390f35b3480156100f057600080fd5b506100a061044f565b34801561010557600080fd5b5060335460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100db565b34801561013a57600080fd5b5061016d610149366004610c71565b6065602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff90911681526020016100db565b34801561019a57600080fd5b506101ae6101a9366004610b77565b610683565b6040519081526020016100db565b3480156101c857600080fd5b506100a06101d7366004610c93565b610794565b6101e461084b565b60005b818110156102a9573683838381811061020257610202610cb0565b905060400201905060405180602001604052808260200160208101906102289190610cff565b6fffffffffffffffffffffffffffffffff1690526065600061024d6020850185610c71565b63ffffffff1681526020810191909152604001600020905181547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff909116179055506001016101e7565b507ff7b6cda39b1452736c50bab7ae8d79d01c5ce740d844f51fe6e1c9a2b5dd43d382826040516102db929190610d1a565b60405180910390a15050565b6102ef61084b565b6102f960006108cc565b565b6000808660600135600003610357576103176020890189610c71565b6040517fe234d76600000000000000000000000000000000000000000000000000000000815263ffffffff90911660048201526024015b60405180910390fd5b831561038f576040517f053c215b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166320487ded6103b860208a018a610d87565b886040518363ffffffff1660e01b81526004016103d6929190610ec5565b602060405180830381865afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610417919061100e565b915061044261042c6040890160208a01611027565b61043c60808b0160608c01611027565b84610943565b9050965096945050505050565b60006104797fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166104d25773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556104f4565b3373ffffffffffffffffffffffffffffffffffffffff8216146104f457600080fd5b600054610100900460ff16158080156105145750600054600160ff909116105b8061052e5750303b15801561052e575060005460ff166001145b6105ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161034e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561061857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61062061097e565b801561067f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102db565b5050565b6000856060013560000361069e576103176020880188610c71565b82156106d6576040517f053c215b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166320487ded6106ff6020890189610d87565b876040518363ffffffff1660e01b815260040161071d929190610ec5565b602060405180830381865afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e919061100e565b90506107896107736040880160208901611027565b61078360808a0160608b01611027565b83610943565b979650505050505050565b61079c61084b565b73ffffffffffffffffffffffffffffffffffffffff811661083f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161034e565b610848816108cc565b50565b60335473ffffffffffffffffffffffffffffffffffffffff1633146102f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034e565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061ffff8516156109565784610958565b835b61ffff16905061271061096b828561104b565b610975919061108f565b95945050505050565b600054610100900460ff16610a15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161034e565b6102f9600054610100900460ff16610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161034e565b6102f9336108cc565b60008060208385031215610acb57600080fd5b823567ffffffffffffffff80821115610ae357600080fd5b818501915085601f830112610af757600080fd5b813581811115610b0657600080fd5b8660208260061b8501011115610b1b57600080fd5b60209290920196919550909350505050565b600060808284031215610b3f57600080fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461084857600080fd5b8035610b7281610b45565b919050565b6000806000806000806101008789031215610b9157600080fd5b610b9b8888610b2d565b9550608087013567ffffffffffffffff80821115610bb857600080fd5b610bc48a838b01610b2d565b965060a0890135915080821115610bda57600080fd5b9088019060a0828b031215610bee57600080fd5b90945060c08801359080821115610c0457600080fd5b818901915089601f830112610c1857600080fd5b813581811115610c2757600080fd5b8a6020828501011115610c3957600080fd5b602083019550809450505050610c5160e08801610b67565b90509295509295509295565b803563ffffffff81168114610b7257600080fd5b600060208284031215610c8357600080fd5b610c8c82610c5d565b9392505050565b600060208284031215610ca557600080fd5b8135610c8c81610b45565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80356fffffffffffffffffffffffffffffffff81168114610b7257600080fd5b600060208284031215610d1157600080fd5b610c8c82610cdf565b6020808252818101839052600090604080840186845b87811015610d7a5763ffffffff610d4683610c5d565b1683526fffffffffffffffffffffffffffffffff610d65868401610cdf565b16838601529183019190830190600101610d30565b5090979650505050505050565b600060208284031215610d9957600080fd5b813567ffffffffffffffff81168114610c8c57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610de657600080fd5b830160208101925035905067ffffffffffffffff811115610e0657600080fd5b803603821315610e1557600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015610eba578135610e8881610b45565b73ffffffffffffffffffffffffffffffffffffffff168752818301358388015260409687019690910190600101610e75565b509495945050505050565b600067ffffffffffffffff808516835260406020840152610ee68485610db1565b60a06040860152610efb60e086018284610e1c565b915050610f0b6020860186610db1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080878503016060880152610f41848385610e1c565b9350604088013592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018312610f7a57600080fd5b60209288019283019235915084821115610f9357600080fd5b8160061b3603831315610fa557600080fd5b80878503016080880152610fba848385610e65565b9450610fc860608901610b67565b73ffffffffffffffffffffffffffffffffffffffff811660a08901529350610ff36080890189610db1565b94509250808786030160c08801525050610789838383610e1c565b60006020828403121561102057600080fd5b5051919050565b60006020828403121561103957600080fd5b813561ffff81168114610c8c57600080fd5b8082028115828204841417611089577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b6000826110c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122002e3c03822ce1eda610862edb9652c1b4f4bfc6c274298a76bb4fb0621a1082964736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "CCIPDVNAdapter_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CCIPDVNAdapter_OptionsUnsupported";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.Param";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ICCIPDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "receiver";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Client.EVMTokenAmount[]";
                readonly name: "tokenAmounts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "feeToken";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraArgs";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Client.EVM2AnyMessage";
            readonly name: "_message";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "contract IRouterClient";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.Param";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ICCIPDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "receiver";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Client.EVMTokenAmount[]";
                readonly name: "tokenAmounts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "feeToken";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraArgs";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Client.EVM2AnyMessage";
            readonly name: "_message";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "contract IRouterClient";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "ccipFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.DstConfigParam[]";
            readonly name: "_param";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): CCIPDVNAdapterFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CCIPDVNAdapterFeeLib;
}

type index$m_CCIPDVNAdapterFeeLib__factory = CCIPDVNAdapterFeeLib__factory;
declare const index$m_CCIPDVNAdapterFeeLib__factory: typeof CCIPDVNAdapterFeeLib__factory;
type index$m_CCIPDVNAdapter__factory = CCIPDVNAdapter__factory;
declare const index$m_CCIPDVNAdapter__factory: typeof CCIPDVNAdapter__factory;
declare namespace index$m {
  export { index$m_CCIPDVNAdapterFeeLib__factory as CCIPDVNAdapterFeeLib__factory, index$m_CCIPDVNAdapter__factory as CCIPDVNAdapter__factory };
}

declare class DVNAdapterBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): DVNAdapterBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DVNAdapterBase;
}

declare class IReceiveUln__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IReceiveUlnInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IReceiveUln;
}

declare class ISendLibBase__factory$1 {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ISendLibBaseInterface$1;
    static connect(address: string, signerOrProvider: Signer | Provider): ISendLibBase$1;
}

type index$l_DVNAdapterBase__factory = DVNAdapterBase__factory;
declare const index$l_DVNAdapterBase__factory: typeof DVNAdapterBase__factory;
type index$l_IReceiveUln__factory = IReceiveUln__factory;
declare const index$l_IReceiveUln__factory: typeof IReceiveUln__factory;
declare namespace index$l {
  export { index$l_DVNAdapterBase__factory as DVNAdapterBase__factory, index$l_IReceiveUln__factory as IReceiveUln__factory, ISendLibBase__factory$1 as ISendLibBase__factory };
}

type ArbitrumDVNAdapterL1ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ArbitrumDVNAdapterL1__factory extends ContractFactory {
    constructor(...args: ArbitrumDVNAdapterL1ConstructorParams);
    deploy(_admins: PromiseOrValue<string>[], _arbitrumEid: PromiseOrValue<BigNumberish>, _inbox: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ArbitrumDVNAdapterL1>;
    getDeployTransaction(_admins: PromiseOrValue<string>[], _arbitrumEid: PromiseOrValue<BigNumberish>, _inbox: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ArbitrumDVNAdapterL1;
    connect(signer: Signer): ArbitrumDVNAdapterL1__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162002f8e38038062002f8e8339810160408190526200003491620002ff565b604080516000808252602082019092526001805460ff61ffff60e81b01191661017760ed1b179055600280546001600160a01b031916905533918591612ee09182858581156200008b576200008b60008362000169565b60005b8551811015620000ef57620000e67f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000d257620000d2620003f7565b60200260200101516200016960201b60201c565b6001016200008e565b5060005b81518110156200014057620001377fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000d257620000d2620003f7565b600101620000f3565b5050505063ffffffff96909616608052505050506001600160a01b031660a052506200044a9050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015620001ba57506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b15620002075760018054601590620001e290600160a81b90046001600160401b03166200040d565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b62000213828262000217565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000213576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002733390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002e557600080fd5b919050565b805163ffffffff81168114620002e557600080fd5b6000806000606084860312156200031557600080fd5b83516001600160401b03808211156200032d57600080fd5b818601915086601f8301126200034257600080fd5b8151602082821115620003595762000359620002b7565b8160051b604051601f19603f83011681018181108682111715620003815762000381620002b7565b60405292835281830193508481018201928a841115620003a057600080fd5b948201945b83861015620003c957620003b986620002cd565b85529482019493820193620003a5565b9750620003da9050888201620002ea565b955050505050620003ee60408501620002cd565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b031981016200044057634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60805160a051612b106200047e6000396000818161072c015261102801526000818161054a01526115220152612b106000f3fe6080604052600436106101db5760003560e01c806369b90d6811610102578063c416aa5111610095578063d2ae210411610064578063d2ae21041461065b578063d547741f146106ae578063e6a9776d146106ce578063fb0e722b1461071a57600080fd5b8063c416aa51146105c9578063c7b2370b146105fb578063c8c1d25b1461061b578063cd88b9031461063b57600080fd5b806395673ee4116100d157806395673ee41461053857806395d376d714610581578063a217fddf14610594578063c358de0a146105a957600080fd5b806369b90d681461047a578063724e78da1461049a578063741bef1a146104ba57806391d14854146104e757600080fd5b806326e67a371161017a57806336568abe1161014957806336568abe146103ea5780634cfa6d2c1461040a57806351b6a0fd146104425780635c975abb1461046257600080fd5b806326e67a371461035d5780632de113761461038a5780632f2ff15d146103aa57806330bb3aac146103ca57600080fd5b80631095b6d7116101b65780631095b6d71461028d57806311cda415146102ad57806316c38b3c146102ff578063248a9ca31461031f57600080fd5b8062bf2e80146101e757806301e336671461023b57806301ffc9a71461025d57600080fd5b366101e257005b600080fd5b3480156101f357600080fd5b50600154610223907d010000000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561024757600080fd5b5061025b61025636600461222b565b61074e565b005b34801561026957600080fd5b5061027d610278366004612267565b610789565b6040519015158152602001610232565b34801561029957600080fd5b5061025b6102a836600461222b565b610822565b3480156102b957600080fd5b506005546102da9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610232565b34801561030b57600080fd5b5061025b61031a3660046122b7565b6109b1565b34801561032b57600080fd5b5061034f61033a3660046122d4565b60009081526020819052604090206001015490565b604051908152602001610232565b34801561036957600080fd5b5061037d610378366004612301565b6109d6565b604051610232919061231c565b34801561039657600080fd5b5061027d6103a5366004612363565b610a5d565b3480156103b657600080fd5b5061025b6103c536600461237e565b610b42565b3480156103d657600080fd5b5061034f6103e53660046123f3565b610b6c565b3480156103f657600080fd5b5061025b61040536600461237e565b610bc6565b34801561041657600080fd5b5061034f610425366004612475565b600460209081526000928352604080842090915290825290205481565b34801561044e57600080fd5b5061025b61045d36600461249f565b610bf8565b34801561046e57600080fd5b5060015460ff1661027d565b34801561048657600080fd5b5061025b610495366004612363565b610cef565b3480156104a657600080fd5b5061025b6104b5366004612363565b610d61565b3480156104c657600080fd5b506002546102da9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104f357600080fd5b5061027d61050236600461237e565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561054457600080fd5b5061056c7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610232565b61034f61058f366004612514565b610e06565b3480156105a057600080fd5b5061034f600081565b3480156105b557600080fd5b5061025b6105c4366004612597565b6110eb565b3480156105d557600080fd5b506001546102da90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561060757600080fd5b5061025b610616366004612363565b611199565b34801561062757600080fd5b5061025b6106363660046125b2565b61123d565b34801561064757600080fd5b5061025b6106563660046125eb565b6112ca565b34801561066757600080fd5b50600154610695907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610232565b3480156106ba57600080fd5b5061025b6106c936600461237e565b61131b565b3480156106da57600080fd5b506006546007546008546009546106f59361ffff1692919084565b6040805161ffff90951685526020850193909352918301526060820152608001610232565b34801561072657600080fd5b506102da7f000000000000000000000000000000000000000000000000000000000000000081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561077881611340565b61078384848461134d565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061081c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561084c81611340565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166108ca576040517f5ee08b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b15801561093a57600080fd5b505af115801561094e573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b60006109bc81611340565b81156109ce576109ca61137d565b5050565b6109ca6113fc565b63ffffffff8116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610a5157602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610a225790505b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e86630553602052604081205460ff1615610ab257506000919050565b6001547501000000000000000000000000000000000000000000900467ffffffffffffffff161580610b28575073ffffffffffffffffffffffffffffffffffffffff821660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15610b3557506001919050565b506000919050565b919050565b600082815260208190526040902060010154610b5d81611340565b610b678383611453565b505050565b600083610b7881610a5d565b610bae576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006610bba8882611519565b98975050505050505050565b6040517fdec9f03100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c0381611340565b60005b82811015610cb05736848483818110610c2157610c21612671565b60600291909101915050604081013560046000610c416020850185612363565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020016020810190610c909190612301565b63ffffffff16815260208101919091526040016000205550600101610c06565b507f360a0efdea8fcc9a11ee20a2099e314ddcf49a941d66790cd4e5adea30faa0748383604051610ce29291906126a0565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d1981611340565b50600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d8b81611340565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de610e3281611340565b610e4260a0860160808701612363565b610e4b81610a5d565b610e81576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006610e99610e936020890189612301565b82611519565b336000908152600460209081526040822092965090917f8e760afe0000000000000000000000000000000000000000000000000000000091610f4791908490610ee4908d018d612301565b63ffffffff1681526020808201929092526040016000205490610f09908c018c61271b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060408c01356115b5565b604051602401610f5791906127ee565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260055460018501546002860154600387015494517f679b6ded00000000000000000000000000000000000000000000000000000000815293955060009473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169563679b6ded958d9561106e9591909316938993928592839290918d90600401612801565b60206040518083038185885af115801561108c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110b1919061286a565b60405190915081907fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f90600090a250505050509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561111581611340565b600180547fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167d01000000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001610dfa565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111c381611340565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001610dfa565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561126781611340565b506040805160808101825261ffff909516808652602086018590529085018390526060909401819052600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016909417909355600791909155600855600955565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112f481611340565b63ffffffff84166000908152600360205260409020611314908484612149565b5050505050565b60008281526020819052604090206001015461133681611340565b610b6783836115e4565b61134a81336116a9565b50565b73ffffffffffffffffffffffffffffffffffffffff831661137257610b67828261176a565b610b67838383611870565b6113856118de565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b61140461194d565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336113d2565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156114b0575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b1561150f57600180546015906114e8907501000000000000000000000000000000000000000000900467ffffffffffffffff166128b2565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6109ca82826119b9565b600063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661154e617530856128d9565b63ffffffff161461158b576040517f7f57789c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160030154826002015461159f9190612923565b82600101546115ae919061293a565b9392505050565b60608382846040516020016115cc9392919061294d565b60405160208183030381529060405290509392505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611640575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b1561169f5760018054601590611678907501000000000000000000000000000000000000000000900467ffffffffffffffff1661297a565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6109ca8282611aa9565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166109ca576116e781611b60565b6116f2836020611b7f565b6040516020016117039291906129bc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252611761916004016127ee565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166117b7576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611811576040519150601f19603f3d011682016040523d82523d6000602084013e611816565b606091505b5050905080610b67576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401611761565b73ffffffffffffffffffffffffffffffffffffffff82166118bd576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b6773ffffffffffffffffffffffffffffffffffffffff84168383611dc2565b60015460ff161561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611761565b565b60015460ff1661194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401611761565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166109ca5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611a4b3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156109ca5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606061081c73ffffffffffffffffffffffffffffffffffffffff831660145b60606000611b8e836002612923565b611b9990600261293a565b67ffffffffffffffff811115611bb157611bb1612a3d565b6040519080825280601f01601f191660200182016040528015611bdb576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c1257611c12612671565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c7557611c75612671565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611cb1846002612923565b611cbc90600161293a565b90505b6001811115611d59577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611cfd57611cfd612671565b1a60f81b828281518110611d1357611d13612671565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611d5281612a6c565b9050611cbf565b5083156115ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401611761565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610b6792869291600091611e8d918516908490611f3a565b9050805160001480611eae575080806020019051810190611eae9190612aa1565b610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611761565b6060611f498484600085611f51565b949350505050565b606082471015611fe3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611761565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161200c9190612abe565b60006040518083038185875af1925050503d8060008114612049576040519150601f19603f3d011682016040523d82523d6000602084013e61204e565b606091505b509150915061205f8783838761206a565b979650505050505050565b606083156121005782516000036120f95773ffffffffffffffffffffffffffffffffffffffff85163b6120f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611761565b5081611f49565b611f4983838151156121155781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176191906127ee565b82805482825590600052602060002090601f016020900481019282156121e25791602002820160005b838211156121b357833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612172565b80156121e05782816101000a81549060ff02191690556001016020816000010492830192600103026121b3565b505b506121ee9291506121f2565b5090565b5b808211156121ee57600081556001016121f3565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b3d57600080fd5b60008060006060848603121561224057600080fd5b61224984612207565b925061225760208501612207565b9150604084013590509250925092565b60006020828403121561227957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146115ae57600080fd5b801515811461134a57600080fd5b6000602082840312156122c957600080fd5b81356115ae816122a9565b6000602082840312156122e657600080fd5b5035919050565b803563ffffffff81168114610b3d57600080fd5b60006020828403121561231357600080fd5b6115ae826122ed565b6020808252825182820181905260009190848201906040850190845b8181101561235757835160ff1683529284019291840191600101612338565b50909695505050505050565b60006020828403121561237557600080fd5b6115ae82612207565b6000806040838503121561239157600080fd5b823591506123a160208401612207565b90509250929050565b60008083601f8401126123bc57600080fd5b50813567ffffffffffffffff8111156123d457600080fd5b6020830191508360208285010111156123ec57600080fd5b9250929050565b60008060008060006080868803121561240b57600080fd5b612414866122ed565b9450602086013567ffffffffffffffff808216821461243257600080fd5b81955061244160408901612207565b9450606088013591508082111561245757600080fd5b50612464888289016123aa565b969995985093965092949392505050565b6000806040838503121561248857600080fd5b61249183612207565b91506123a1602084016122ed565b600080602083850312156124b257600080fd5b823567ffffffffffffffff808211156124ca57600080fd5b818501915085601f8301126124de57600080fd5b8135818111156124ed57600080fd5b86602060608302850101111561250257600080fd5b60209290920196919550909350505050565b60008060006040848603121561252957600080fd5b833567ffffffffffffffff8082111561254157600080fd5b9085019060a0828803121561255557600080fd5b9093506020850135908082111561256b57600080fd5b50612578868287016123aa565b9497909650939450505050565b803561ffff81168114610b3d57600080fd5b6000602082840312156125a957600080fd5b6115ae82612585565b600080600080608085870312156125c857600080fd5b6125d185612585565b966020860135965060408601359560600135945092505050565b60008060006040848603121561260057600080fd5b612609846122ed565b9250602084013567ffffffffffffffff8082111561262657600080fd5b818601915086601f83011261263a57600080fd5b81358181111561264957600080fd5b8760208260051b850101111561265e57600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020808252818101839052600090604080840186845b8781101561270e5773ffffffffffffffffffffffffffffffffffffffff6126dc83612207565b16835263ffffffff6126ef8684016122ed565b16838601528184013584840152606092830192909101906001016126b6565b5090979650505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261275057600080fd5b83018035915067ffffffffffffffff82111561276b57600080fd5b6020019150368190038213156123ec57600080fd5b60005b8381101561279b578181015183820152602001612783565b50506000910152565b600081518084526127bc816020860160208601612780565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006115ae60208301846127a4565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a602085015289604085015280891660608501528088166080850152508560a08401528460c08401528060e084015261285b818401856127a4565b9b9a5050505050505050505050565b60006020828403121561287c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff8083168181036128cf576128cf612883565b6001019392505050565b600063ffffffff80841680612917577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b808202811582820484141761081c5761081c612883565b8082018082111561081c5761081c612883565b8381528260208201526000825161296b816040850160208701612780565b91909101604001949350505050565b600067ffffffffffffffff82168061299457612994612883565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516129f4816017850160208801612780565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612a31816028840160208801612780565b01602801949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081612a7b57612a7b612883565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215612ab357600080fd5b81516115ae816122a9565b60008251612ad0818460208701612780565b919091019291505056fea264697066735822122065a4c579ec57778815660783a73228365f4268ba3495842b08b05d2cd4c7ef3364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint32";
            readonly name: "_arbitrumEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_inbox";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyArbitrum";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "ticketId";
            readonly type: "uint256";
        }];
        readonly name: "RetryableTicketCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "arbitrumEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxSubmissionCost";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxFeePerGas";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inbox";
        readonly outputs: readonly [{
            readonly internalType: "contract IInbox";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "peer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_maxSubmissionCost";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_maxFeePerGas";
            readonly type: "uint256";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_peer";
            readonly type: "address";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): ArbitrumDVNAdapterL1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ArbitrumDVNAdapterL1;
}

type ArbitrumDVNAdapterL2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ArbitrumDVNAdapterL2__factory extends ContractFactory {
    constructor(...args: ArbitrumDVNAdapterL2ConstructorParams);
    deploy(_admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ArbitrumDVNAdapterL2>;
    getDeployTransaction(_admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ArbitrumDVNAdapterL2;
    connect(signer: Signer): ArbitrumDVNAdapterL2__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }];
        readonly name: "UntrustedPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "peer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_peer";
            readonly type: "address";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): ArbitrumDVNAdapterL2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ArbitrumDVNAdapterL2;
}

type index$k_ArbitrumDVNAdapterL1__factory = ArbitrumDVNAdapterL1__factory;
declare const index$k_ArbitrumDVNAdapterL1__factory: typeof ArbitrumDVNAdapterL1__factory;
type index$k_ArbitrumDVNAdapterL2__factory = ArbitrumDVNAdapterL2__factory;
declare const index$k_ArbitrumDVNAdapterL2__factory: typeof ArbitrumDVNAdapterL2__factory;
declare namespace index$k {
  export { index$k_ArbitrumDVNAdapterL1__factory as ArbitrumDVNAdapterL1__factory, index$k_ArbitrumDVNAdapterL2__factory as ArbitrumDVNAdapterL2__factory };
}

type AxelarDVNAdapterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class AxelarDVNAdapter__factory extends ContractFactory {
    constructor(...args: AxelarDVNAdapterConstructorParams);
    deploy(_admins: PromiseOrValue<string>[], _gateway: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<AxelarDVNAdapter>;
    getDeployTransaction(_admins: PromiseOrValue<string>[], _gateway: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): AxelarDVNAdapter;
    connect(signer: Signer): AxelarDVNAdapter__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b50604051620048eb380380620048eb833981016040819052620000349162000334565b803383612710600060405190808252806020026020018201604052801562000066578160200160208202803683370190505b506001805460ff61ffff60e81b011916600160e81b61ffff851602179055600280546001600160a01b031916905560008285856001600160a01b03821615620000b657620000b6600083620001b3565b60005b85518110156200011a57620001117f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000fd57620000fd6200041a565b6020026020010151620001b360201b60201c565b600101620000b9565b5060005b81518110156200016b57620001627fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000fd57620000fd6200041a565b6001016200011e565b5050506001600160a01b03871695506200019e9450505050505760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0316608052506200046d9050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156200020457506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b156200025157600180546015906200022c90600160a81b90046001600160401b031662000430565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6200025d828262000261565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200025d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200032f57600080fd5b919050565b600080604083850312156200034857600080fd5b82516001600160401b03808211156200036057600080fd5b818501915085601f8301126200037557600080fd5b81516020828211156200038c576200038c62000301565b8160051b604051601f19603f83011681018181108682111715620003b457620003b462000301565b604052928352818301935084810182019289841115620003d357600080fd5b948201945b83861015620003fc57620003ec8662000317565b85529482019493820193620003d8565b96506200040d905087820162000317565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b031981016200046357634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60805161444d6200049e6000396000818161030501528181610c6401528181611063015261169b015261444d6000f3fe6080604052600436106102015760003560e01c8063491606581161011d5780639e944965116100b0578063c416aa511161007f578063cd88b90311610064578063cd88b903146106dd578063d2ae2104146106fd578063d547741f1461075057600080fd5b8063c416aa511461068b578063c7b2370b146106bd57600080fd5b80639e94496514610606578063a217fddf14610636578063af896a3b1461064b578063c358de0a1461066b57600080fd5b8063724e78da116100ec578063724e78da14610555578063741bef1a1461057557806391d14854146105a257806395d376d7146105f357600080fd5b806349160658146104c55780634cfa6d2c146104e557806351b6a0fd1461051d5780635c975abb1461053d57600080fd5b806316c38b3c116101955780632de11376116101645780632de11376146104455780632f2ff15d1461046557806330bb3aac1461048557806336568abe146104a557600080fd5b806316c38b3c1461039a5780631a98b2e0146103ba578063248a9ca3146103da57806326e67a371461041857600080fd5b80631095b6d7116101d15780631095b6d7146102d3578063116191b6146102f3578063127124171461034c578063143b165f1461036c57600080fd5b8062bf2e801461020d57806301e336671461026157806301ffc9a71461028357806302d6e8b0146102b357600080fd5b3661020857005b600080fd5b34801561021957600080fd5b50600154610249907d010000000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561026d57600080fd5b5061028161027c366004613013565b610770565b005b34801561028f57600080fd5b506102a361029e36600461304f565b6107ab565b6040519015158152602001610258565b3480156102bf57600080fd5b506102816102ce366004613091565b610844565b3480156102df57600080fd5b506102816102ee366004613013565b61091f565b3480156102ff57600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610258565b34801561035857600080fd5b50610281610367366004613106565b610aae565b34801561037857600080fd5b5061038c610387366004613150565b610b31565b60405161025892919061328d565b3480156103a657600080fd5b506102816103b53660046132ba565b610be8565b3480156103c657600080fd5b506102816103d5366004613320565b610c0d565b3480156103e657600080fd5b5061040a6103f53660046133fa565b60009081526020819052604090206001015490565b604051908152602001610258565b34801561042457600080fd5b50610438610433366004613427565b610d2f565b6040516102589190613442565b34801561045157600080fd5b506102a3610460366004613106565b610db6565b34801561047157600080fd5b50610281610480366004613489565b610e9b565b34801561049157600080fd5b5061040a6104a03660046134cd565b610ec5565b3480156104b157600080fd5b506102816104c0366004613489565b610fda565b3480156104d157600080fd5b506102816104e0366004613543565b61100c565b3480156104f157600080fd5b5061040a6105003660046135e7565b600460209081526000928352604080842090915290825290205481565b34801561052957600080fd5b50610281610538366004613611565b611133565b34801561054957600080fd5b5060015460ff166102a3565b34801561056157600080fd5b50610281610570366004613106565b61121d565b34801561058157600080fd5b506002546103279073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105ae57600080fd5b506102a36105bd366004613489565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61040a610601366004613674565b6112c2565b34801561061257600080fd5b50610626610621366004613427565b611710565b60405161025894939291906136e5565b34801561064257600080fd5b5061040a600081565b34801561065757600080fd5b50610281610666366004613767565b61184d565b34801561067757600080fd5b506102816106863660046137bb565b611aa4565b34801561069757600080fd5b5060015461032790610100900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156106c957600080fd5b506102816106d8366004613106565b611b52565b3480156106e957600080fd5b506102816106f83660046137d6565b611bf6565b34801561070957600080fd5b50600154610737907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610258565b34801561075c57600080fd5b5061028161076b366004613489565b611c47565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561079a81611c6c565b6107a5848484611c76565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061083e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561086e81611c6c565b60005b828110156108e0573684848381811061088c5761088c61381c565b90506040020190508060200135600660006175308460000160208101906108b39190613427565b6108bd919061384b565b63ffffffff16815260208101919091526040016000206003015550600101610871565b507fd6dac4a884ac5f80781f154f28ed88464b2097f6b866143bb77e46736572136a8383604051610912929190613895565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561094981611c6c565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166109c7576040517f5ee08b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b600154610100900473ffffffffffffffffffffffffffffffffffffffff163314610b04576040517f611136c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b2e8160018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ca6565b50565b80516020818301810180516005825292820191909301209152805460018201805463ffffffff9092169291610b65906138e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b91906138e9565b8015610bde5780601f10610bb357610100808354040283529160200191610bde565b820191906000526020600020905b815481529060010190602001808311610bc157829003601f168201915b5050505050905082565b6000610bf381611c6c565b8115610c0557610c01611e1d565b5050565b610c01611e9c565b60008585604051610c1f92919061393c565b6040519081900381207f1876eed9000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631876eed990610ca9908e908e908e908e908e9089908d908d908d90600401613995565b6020604051808303816000875af1158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec91906139f4565b610d22576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050505050565b63ffffffff8116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610daa57602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610d7b5790505b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e86630553602052604081205460ff1615610e0b57506000919050565b6001547501000000000000000000000000000000000000000000900467ffffffffffffffff161580610e81575073ffffffffffffffffffffffffffffffffffffffff821660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15610e8e57506001919050565b506000919050565b919050565b600082815260208190526040902060010154610eb681611c6c565b610ec08383611ef3565b505050565b6040805160808101825263ffffffff8716815267ffffffffffffffff8616602082015273ffffffffffffffffffffffffffffffffffffffff8086169282019290925260015461ffff7d01000000000000000000000000000000000000000000000000000000000082041660608301526000926101009091041663f0b81bb482600685610f536175308d61384b565b63ffffffff1663ffffffff16815260200190815260200160002087876040518563ffffffff1660e01b8152600401610f8e9493929190613aac565b602060405180830381865afa158015610fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcf9190613b7c565b979650505050505050565b6040517fdec9f03100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828260405161101e92919061393c565b6040519081900381207f5f6970c3000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906110a2908b908b908b908b908b908990600401613b95565b6020604051808303816000875af11580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e591906139f4565b61111b576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611129878787878787611fb9565b5050505050505050565b600061113e81611c6c565b60005b828110156111eb573684848381811061115c5761115c61381c565b6060029190910191505060408101356004600061117c6020850185613106565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360200160208101906111cb9190613427565b63ffffffff16815260208101919091526040016000205550600101611141565b507f360a0efdea8fcc9a11ee20a2099e314ddcf49a941d66790cd4e5adea30faa0748383604051610912929190613bd6565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561124781611c6c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b60006112d460a0850160808601613106565b6112dd81610db6565b611313576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061132b336113266020890189613427565b612113565b60408051608081019091529091506000908061134a60208a018a613427565b63ffffffff16815260200161136560808a0160608b01613c44565b67ffffffffffffffff16815260200161138460a08a0160808b01613106565b73ffffffffffffffffffffffffffffffffffffffff1681526001547d010000000000000000000000000000000000000000000000000000000000900461ffff166020918201529091506000906006908290617530906113e5908c018c613427565b6113ef919061384b565b63ffffffff1663ffffffff168152602001908152602001600020604051806080016040529081600082018054611424906138e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611450906138e9565b801561149d5780601f106114725761010080835404028352916020019161149d565b820191906000526020600020905b81548152906001019060200180831161148057829003601f168201915b505050505081526020016001820180546114b6906138e9565b80601f01602080910402602001604051908101604052809291908181526020018280546114e2906138e9565b801561152f5780601f106115045761010080835404028352916020019161152f565b820191906000526020600020905b81548152906001019060200180831161151257829003601f168201915b5050509183525050600282015461ffff166020808301919091526003909201546040909101529091506000906115ab90859061156d908c018c613c5f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060408c01356121aa565b6001546040517fd135ca93000000000000000000000000000000000000000000000000000000008152919250610100900473ffffffffffffffffffffffffffffffffffffffff169063d135ca9390611611908690869086908e908e903390600401613cc4565b6020604051808303816000875af1158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613b7c565b825160208401516040517f1c92115f00000000000000000000000000000000000000000000000000000000815292985073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692631c92115f926116d29290918690600401613dd7565b600060405180830381600087803b1580156116ec57600080fd5b505af1158015611700573d6000803e3d6000fd5b5050505050505050509392505050565b60066020526000908152604090208054819061172b906138e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611757906138e9565b80156117a45780601f10611779576101008083540402835291602001916117a4565b820191906000526020600020905b81548152906001019060200180831161178757829003601f168201915b5050505050908060010180546117b9906138e9565b80601f01602080910402602001604051908101604052809291908181526020018280546117e5906138e9565b80156118325780601f1061180757610100808354040283529160200191611832565b820191906000526020600020905b81548152906001019060200180831161181557829003601f168201915b505050506002830154600390930154919261ffff1691905084565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561187781611c6c565b60005b82811015611a7257368484838181106118955761189561381c565b90506020028101906118a79190613e1a565b905060006175306118bb6020840184613427565b6118c5919061384b565b63ffffffff811660009081526006602052604090208054919250906118e9906138e9565b9050600003611a01576118ff6020830183613c5f565b63ffffffff8316600090815260066020526040902091611920919083613ea8565b5061192e6040830183613c5f565b63ffffffff8316600090815260066020526040902060010191611952919083613ea8565b508060056119636020850185613c5f565b60405161197192919061393c565b9081526040805191829003602001909120805463ffffffff939093167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909316929092179091556119c490830183613c5f565b60056119d36020860186613c5f565b6040516119e192919061393c565b908152602001604051809103902060010191826119ff929190613ea8565b505b611a1160808301606084016137bb565b63ffffffff9190911660009081526006602052604090206002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909316929092179091556080919091013560039091015560010161187a565b507f53ede267f8a00cf87be90c85641900454b96a922b10a82a0d5f5b4d93b16b38a8383604051610912929190614026565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611ace81611c6c565b600180547fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167d01000000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d906020016112b6565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611b7c81611c6c565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e0906020016112b6565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c2081611c6c565b63ffffffff84166000908152600360205260409020611c40908484612f31565b5050505050565b600082815260208190526040902060010154611c6281611c6c565b610ec083836121bf565b610b2e8133612284565b73ffffffffffffffffffffffffffffffffffffffff8316611c9b57610ec0828261233c565b610ec0838383612442565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063faaebd2190602401602060405180830381865afa158015611d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d379190613b7c565b90508015610ec0576040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063fd9be52290604401600060405180830381600087803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8088168252861660208201529081018490527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb92506060019050610912565b611e256124b0565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b611ea461251f565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611e72565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611f50575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b15611faf5760018054601590611f88907501000000000000000000000000000000000000000000900467ffffffffffffffff1661416d565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610c01828261258b565b600060058787604051611fcd92919061393c565b908152604080519182900360209081018320838301909252815463ffffffff16835260018201805491840191612002906138e9565b80601f016020809104026020016040519081016040528092919081815260200182805461202e906138e9565b801561207b5780601f106120505761010080835404028352916020019161207b565b820191906000526020600020905b81548152906001019060200180831161205e57829003601f168201915b50505050508152505090506120fd87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250505050602084015161267b565b805161210a9084846126c6565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020908152604080832063ffffffff851684529091529020548061083e576040517ff25127e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015263ffffffff831660248201526044015b60405180910390fd5b60606121b78484846127e5565b949350505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8214801561221b575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b1561227a5760018054601590612253907501000000000000000000000000000000000000000000900467ffffffffffffffff16614194565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610c018282612814565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610c01576122c2816128cb565b6122cd8360206128ea565b6040516020016122de9291906141d6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526121a191600401614257565b73ffffffffffffffffffffffffffffffffffffffff8216612389576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146123e3576040519150601f19603f3d011682016040523d82523d6000602084013e6123e8565b606091505b5050905080610ec0576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016121a1565b73ffffffffffffffffffffffffffffffffffffffff821661248f576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ec073ffffffffffffffffffffffffffffffffffffffff84168383612b34565b60015460ff161561251d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016121a1565b565b60015460ff1661251d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016121a1565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610c015760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561261d3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8080519060200120828051906020012014610ec05782826040517f5cc0c62a0000000000000000000000000000000000000000000000000000000081526004016121a192919061426a565b8263ffffffff166175306126da8484612bc1565b6126e4919061384b565b63ffffffff1614612751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f44564e41646170746572426173653a20696e76616c696420737263456964000060448201526064016121a1565b60008060006127608585612bf2565b9250925092508273ffffffffffffffffffffffffffffffffffffffff16630223536e838367ffffffffffffffff6040518463ffffffff1660e01b81526004016127ab93929190614298565b600060405180830381600087803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b50505050505050505050565b60608382846040516020016127fc939291906142cb565b60405160208183030381529060405290509392505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610c015760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606061083e73ffffffffffffffffffffffffffffffffffffffff831660145b606060006128f98360026142f8565b61290490600261430f565b67ffffffffffffffff81111561291c5761291c613121565b6040519080825280601f01601f191660200182016040528015612946576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061297d5761297d61381c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129e0576129e061381c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612a1c8460026142f8565b612a2790600161430f565b90505b6001811115612ac4577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a6857612a6861381c565b1a60f81b828281518110612a7e57612a7e61381c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612abd81614322565b9050612a2a565b508315612b2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016121a1565b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ec0908490612cc1565b600082604983612bd282600461430f565b92612bdf93929190614357565b612be891614381565b60e01c9392505050565b6000606081612c036051604061430f565b8414612c3b576040517ff1d10e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c58612c4c602060008789614357565b612c55916143c9565b90565b9250612c68604060208688614357565b612c71916143c9565b9050612c808460408188614357565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509598929750929550909350505050565b6000612d23826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dd09092919063ffffffff16565b9050805160001480612d44575080806020019051810190612d4491906139f4565b610ec0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016121a1565b60606121b78484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e049190614405565b60006040518083038185875af1925050503d8060008114612e41576040519150601f19603f3d011682016040523d82523d6000602084013e612e46565b606091505b5091509150610fcf8783838760608315612ee8578251600003612ee15773ffffffffffffffffffffffffffffffffffffffff85163b612ee1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016121a1565b50816121b7565b6121b78383815115612efd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a19190614257565b82805482825590600052602060002090601f01602090048101928215612fca5791602002820160005b83821115612f9b57833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612f5a565b8015612fc85782816101000a81549060ff0219169055600101602081600001049283019260010302612f9b565b505b50612fd6929150612fda565b5090565b5b80821115612fd65760008155600101612fdb565b803573ffffffffffffffffffffffffffffffffffffffff81168114610e9657600080fd5b60008060006060848603121561302857600080fd5b61303184612fef565b925061303f60208501612fef565b9150604084013590509250925092565b60006020828403121561306157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612b2d57600080fd5b600080602083850312156130a457600080fd5b823567ffffffffffffffff808211156130bc57600080fd5b818501915085601f8301126130d057600080fd5b8135818111156130df57600080fd5b8660208260061b85010111156130f457600080fd5b60209290920196919550909350505050565b60006020828403121561311857600080fd5b612b2d82612fef565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561316257600080fd5b813567ffffffffffffffff8082111561317a57600080fd5b818401915084601f83011261318e57600080fd5b8135818111156131a0576131a0613121565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156131e6576131e6613121565b816040528281528760208487010111156131ff57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b8381101561323a578181015183820152602001613222565b50506000910152565b6000815180845261325b81602086016020860161321f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b63ffffffff831681526040602082015260006121b76040830184613243565b8015158114610b2e57600080fd5b6000602082840312156132cc57600080fd5b8135612b2d816132ac565b60008083601f8401126132e957600080fd5b50813567ffffffffffffffff81111561330157600080fd5b60208301915083602082850101111561331957600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561333f57600080fd5b8a35995060208b013567ffffffffffffffff8082111561335e57600080fd5b61336a8e838f016132d7565b909b50995060408d013591508082111561338357600080fd5b61338f8e838f016132d7565b909950975060608d01359150808211156133a857600080fd5b6133b48e838f016132d7565b909750955060808d01359150808211156133cd57600080fd5b506133da8d828e016132d7565b9150809450508092505060a08b013590509295989b9194979a5092959850565b60006020828403121561340c57600080fd5b5035919050565b803563ffffffff81168114610e9657600080fd5b60006020828403121561343957600080fd5b612b2d82613413565b6020808252825182820181905260009190848201906040850190845b8181101561347d57835160ff168352928401929184019160010161345e565b50909695505050505050565b6000806040838503121561349c57600080fd5b823591506134ac60208401612fef565b90509250929050565b803567ffffffffffffffff81168114610e9657600080fd5b6000806000806000608086880312156134e557600080fd5b6134ee86613413565b94506134fc602087016134b5565b935061350a60408701612fef565b9250606086013567ffffffffffffffff81111561352657600080fd5b613532888289016132d7565b969995985093965092949392505050565b60008060008060008060006080888a03121561355e57600080fd5b87359650602088013567ffffffffffffffff8082111561357d57600080fd5b6135898b838c016132d7565b909850965060408a01359150808211156135a257600080fd5b6135ae8b838c016132d7565b909650945060608a01359150808211156135c757600080fd5b506135d48a828b016132d7565b989b979a50959850939692959293505050565b600080604083850312156135fa57600080fd5b61360383612fef565b91506134ac60208401613413565b6000806020838503121561362457600080fd5b823567ffffffffffffffff8082111561363c57600080fd5b818501915085601f83011261365057600080fd5b81358181111561365f57600080fd5b8660206060830285010111156130f457600080fd5b60008060006040848603121561368957600080fd5b833567ffffffffffffffff808211156136a157600080fd5b9085019060a082880312156136b557600080fd5b909350602085013590808211156136cb57600080fd5b506136d8868287016132d7565b9497909650939450505050565b6080815260006136f86080830187613243565b828103602084015261370a8187613243565b61ffff95909516604084015250506060015292915050565b60008083601f84011261373457600080fd5b50813567ffffffffffffffff81111561374c57600080fd5b6020830191508360208260051b850101111561331957600080fd5b6000806020838503121561377a57600080fd5b823567ffffffffffffffff81111561379157600080fd5b61379d85828601613722565b90969095509350505050565b803561ffff81168114610e9657600080fd5b6000602082840312156137cd57600080fd5b612b2d826137a9565b6000806000604084860312156137eb57600080fd5b6137f484613413565b9250602084013567ffffffffffffffff81111561381057600080fd5b6136d886828701613722565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff80841680613889577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b6020808252818101839052600090604080840186845b878110156138dc5763ffffffff6138c183613413565b168352818501358584015291830191908301906001016138ab565b5090979650505050505050565b600181811c908216806138fd57607f821691505b602082108103613936577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b89815260c0602082015260006139af60c083018a8c61394c565b82810360408401526139c281898b61394c565b905086606084015282810360808401526139dd81868861394c565b9150508260a08301529a9950505050505050505050565b600060208284031215613a0657600080fd5b8151612b2d816132ac565b60008154613a1e816138e9565b808552602060018381168015613a3b5760018114613a7357613aa1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838901528284151560051b8901019550613aa1565b866000528260002060005b85811015613a995781548a8201860152908301908401613a7e565b890184019650505b505050505092915050565b845163ffffffff16815260208086015167ffffffffffffffff169082015260408086015173ffffffffffffffffffffffffffffffffffffffff169082015260608086015161ffff169082015260c06080820152608060c08201526000613b16610140830186613a11565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408382030160e0840152613b4d8160018801613a11565b905061ffff600287015416610100840152600386015461012084015282810360a0840152610fcf81858761394c565b600060208284031215613b8e57600080fd5b5051919050565b868152608060208201526000613baf60808301878961394c565b8281036040840152613bc281868861394c565b915050826060830152979650505050505050565b6020808252818101839052600090604080840186845b878110156138dc5773ffffffffffffffffffffffffffffffffffffffff613c1283612fef565b16835263ffffffff613c25868401613413565b1683860152818401358484015260609283019290910190600101613bec565b600060208284031215613c5657600080fd5b612b2d826134b5565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613c9457600080fd5b83018035915067ffffffffffffffff821115613caf57600080fd5b60200191503681900382131561331957600080fd5b865163ffffffff16815260208088015167ffffffffffffffff169082015260408088015173ffffffffffffffffffffffffffffffffffffffff169082015260608088015161ffff169082015260006101008060808401528751608082850152613d31610180850182613243565b91505060208801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084830301610120850152613d6e8282613243565b91505061ffff604089015116610140840152606088015161016084015282810360a0840152613d9d8188613243565b905082810360c0840152613db281868861394c565b915050610fcf60e083018473ffffffffffffffffffffffffffffffffffffffff169052565b606081526000613dea6060830186613243565b8281036020840152613dfc8186613243565b90508281036040840152613e108185613243565b9695505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112613e4e57600080fd5b9190910192915050565b601f821115610ec0576000816000526020600020601f850160051c81016020861015613e815750805b601f850160051c820191505b81811015613ea057828155600101613e8d565b505050505050565b67ffffffffffffffff831115613ec057613ec0613121565b613ed483613ece83546138e9565b83613e58565b6000601f841160018114613f265760008515613ef05750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611c40565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015613f755786850135825560209485019460019092019101613f55565b5086821015613fb0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613ff757600080fd5b830160208101925035905067ffffffffffffffff81111561401757600080fd5b80360382131561331957600080fd5b60208082528181018390526000906040808401600586901b850182018785805b8981101561412f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff618c36030181126140a6578283fd5b8b0160a063ffffffff6140b883613413565b1686526140c789830183613fc2565b828b8901526140d9838901828461394c565b925050506140e988830183613fc2565b8783038a8901526140fb83828461394c565b92505050606061ffff61410f8285016137a9565b169087015260809182013591909501529386019391860191600101614046565b50919998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681810361418a5761418a61413e565b6001019392505050565b600067ffffffffffffffff8216806141ae576141ae61413e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161420e81601785016020880161321f565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161424b81602884016020880161321f565b01602801949350505050565b602081526000612b2d6020830184613243565b60408152600061427d6040830185613243565b828103602084015261428f8185613243565b95945050505050565b6060815260006142ab6060830186613243565b905083602083015267ffffffffffffffff83166040830152949350505050565b838152826020820152600082516142e981604085016020870161321f565b91909101604001949350505050565b808202811582820484141761083e5761083e61413e565b8082018082111561083e5761083e61413e565b6000816143315761433161413e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000808585111561436757600080fd5b8386111561437457600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156143c15780818660040360031b1b83161692505b505092915050565b8035602083101561083e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b60008251613e4e81846020870161321f56fea2646970667358221220c432de4619f1b6b97b29e23070c396e94d4d0d4e5328ef11f66a519f79d1663964736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_gateway";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AxelarDVNAdapter_OnlyWorkerFeeLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "chainName";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "peer";
            readonly type: "string";
        }];
        readonly name: "AxelarDVNAdapter_UntrustedPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotApprovedByGateway";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.FloorMarginUSDParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "FloorMarginUSDSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.MultiplierParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "MultiplierSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.NativeGasFeeParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "NativeGasFeeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "chainName";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "peer";
            readonly type: "string";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "nativeGasFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "commandId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "sourceChain";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "sourceAddress";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "commandId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "sourceChain";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "sourceAddress";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "tokenSymbol";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "executeWithToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "gateway";
        readonly outputs: readonly [{
            readonly internalType: "contract IAxelarGateway";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAxelarDVNAdapter.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAxelarDVNAdapter.NativeGasFeeParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setNativeGasFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "srcChainName";
            readonly type: "string";
        }];
        readonly name: "srcConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "string";
            readonly name: "peer";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sendLib";
            readonly type: "address";
        }];
        readonly name: "withdrawToFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): AxelarDVNAdapterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AxelarDVNAdapter;
}

declare class ISendLibBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ISendLibBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ISendLibBase;
}

type index$j_AxelarDVNAdapter__factory = AxelarDVNAdapter__factory;
declare const index$j_AxelarDVNAdapter__factory: typeof AxelarDVNAdapter__factory;
type index$j_ISendLibBase__factory = ISendLibBase__factory;
declare const index$j_ISendLibBase__factory: typeof ISendLibBase__factory;
declare namespace index$j {
  export { index$j_AxelarDVNAdapter__factory as AxelarDVNAdapter__factory, index$j_ISendLibBase__factory as ISendLibBase__factory };
}

type AxelarDVNAdapterFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class AxelarDVNAdapterFeeLib__factory extends ContractFactory {
    constructor(...args: AxelarDVNAdapterFeeLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<AxelarDVNAdapterFeeLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): AxelarDVNAdapterFeeLib;
    connect(signer: Signer): AxelarDVNAdapterFeeLib__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611cc9806100206000396000f3fe6080604052600436106100f75760003560e01c80638596f3631161008a578063d135ca9311610059578063d135ca9314610352578063dfdd8b9014610373578063f0b81bb414610393578063f2fde38b146103b357600080fd5b80638596f363146102515780638da5cb5b146102715780639e9449651461029c578063b44966801461032457600080fd5b806371a6fbfe116100c657806371a6fbfe146101c4578063724e78da146101e4578063741bef1a146102045780637ebef5291461023157600080fd5b806301e336671461010357806317b00e7d146101255780636a22d8cc14610182578063715018a6146101af57600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e36600461155c565b6103d3565b005b34801561013157600080fd5b506065546101589062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561018e57600080fd5b506066546101589073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101bb57600080fd5b50610123610443565b3480156101d057600080fd5b506101236101df3660046115aa565b610457565b3480156101f057600080fd5b506101236101ff3660046115cc565b6104c7565b34801561021057600080fd5b506067546101589073ffffffffffffffffffffffffffffffffffffffff1681565b34801561023d57600080fd5b5061012361024c3660046115e7565b610542565b34801561025d57600080fd5b5061012361026c36600461162a565b610826565b34801561027d57600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff16610158565b3480156102a857600080fd5b506102f36102b73660046116b3565b60686020526000908152604090205467ffffffffffffffff8116906801000000000000000090046fffffffffffffffffffffffffffffffff1682565b6040805167ffffffffffffffff90931683526fffffffffffffffffffffffffffffffff909116602083015201610179565b34801561033057600080fd5b5060655461033f9061ffff1681565b60405161ffff9091168152602001610179565b61036561036036600461175e565b610974565b604051908152602001610179565b34801561037f57600080fd5b5061012361038e3660046115cc565b610bb7565b34801561039f57600080fd5b506103656103ae36600461189f565b610c32565b3480156103bf57600080fd5b506101236103ce3660046115cc565b610cbb565b6103db610d72565b6103e6838383610df3565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e56209060600160405180910390a1505050565b61044b610d72565b6104556000610e28565b565b61045f610d72565b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff83169081179091556040519081527f9cdcd7ab8980314cc1c51bbe119a035a775ddb353b9b897287d010d00f4bb01c906020015b60405180910390a150565b6104cf610d72565b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f40d8738b990e6ff9a2f56f11247e657a1e7070472260b020a4fc3ab1844787bd906020016104bc565b600061056c7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166105c55773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556105e7565b3373ffffffffffffffffffffffffffffffffffffffff8216146105e757600080fd5b600054610100900460ff16158080156106075750600054600160ff909116105b806106215750303b158015610621575060005460ff166001145b6106b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561071057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610718610e9f565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691909117909155606580547fffffffffffffffffffff000000000000000000000000000000000000000000001662010000928716929092027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169190911761ffff8516179055801561081f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b61082e610d72565b60005b81811015610936573683838381811061084c5761084c611917565b90506060020190506040518060400160405280826020016020810190610872919061195e565b67ffffffffffffffff1681526020016108916060840160408501611999565b6fffffffffffffffffffffffffffffffff169052606860006108b660208501856116b3565b63ffffffff1681526020808201929092526040016000208251815493909201516fffffffffffffffffffffffffffffffff1668010000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090931667ffffffffffffffff9092169190911791909117905550600101610831565b507f4bc47f7ad04f6122b687e6997c1313863ab8340f575aedbf8c2496fa5274861b82826040516109689291906119b4565b60405180910390a15050565b600085606001356000036109ca5761098f60208801886116b3565b6040517ff0951e9700000000000000000000000000000000000000000000000000000000815263ffffffff90911660048201526024016106a9565b8215610a02576040517f26cbb93300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2f610a1560608801604089016115aa565b610a2560808a0160608b016115aa565b8860600135610f3e565b90506000610a408760600135610f70565b90504781811015610b1e576065546040517f1271241700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526201000090920490911690631271241790602401600060405180830381600087803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b5050505047905081811015610b1e576040517f576cbba300000000000000000000000000000000000000000000000000000000815260048101829052602481018390526044016106a9565b60665473ffffffffffffffffffffffffffffffffffffffff16630c93e3bb8333610b488c80611a3d565b610b5560208f018f611a3d565b8e306040518963ffffffff1660e01b8152600401610b799796959493929190611b59565b6000604051808303818588803b158015610b9257600080fd5b505af1158015610ba6573d6000803e3d6000fd5b505050505050509695505050505050565b610bbf610d72565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f83650e857191635cdf372edf115c49497fa8a7db67978cab532ffa395405803a906020016104bc565b60008360600135600003610c4d5761098f60208601866116b3565b8115610c85576040517f26cbb93300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cb2610c9860608601604087016115aa565b610ca860808801606089016115aa565b8660600135610f3e565b95945050505050565b610cc3610d72565b73ffffffffffffffffffffffffffffffffffffffff8116610d66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106a9565b610d6f81610e28565b50565b60335473ffffffffffffffffffffffffffffffffffffffff163314610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a9565b73ffffffffffffffffffffffffffffffffffffffff8316610e1d57610e188282610f98565b505050565b610e1883838361109e565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610f36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106a9565b61045561110c565b60008061ffff851615610f515784610f53565b835b61ffff169050612710610f668285611bc9565b610cb29190611c07565b60655460009061271090610f889061ffff1684611bc9565b610f929190611c07565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8216610fe5576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461103f576040519150601f19603f3d011682016040523d82523d6000602084013e611044565b606091505b5050905080610e18576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016106a9565b73ffffffffffffffffffffffffffffffffffffffff82166110eb576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e1873ffffffffffffffffffffffffffffffffffffffff841683836111ac565b600054610100900460ff166111a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106a9565b61045533610e28565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610e1892869291600091611277918516908490611324565b90508051600014806112985750808060200190518101906112989190611c42565b610e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106a9565b6060611333848460008561133b565b949350505050565b6060824710156113cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106a9565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113f69190611c64565b60006040518083038185875af1925050503d8060008114611433576040519150601f19603f3d011682016040523d82523d6000602084013e611438565b606091505b509150915061144987838387611454565b979650505050505050565b606083156114ea5782516000036114e35773ffffffffffffffffffffffffffffffffffffffff85163b6114e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a9565b5081611333565b61133383838151156114ff5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a99190611c80565b803573ffffffffffffffffffffffffffffffffffffffff8116811461155757600080fd5b919050565b60008060006060848603121561157157600080fd5b61157a84611533565b925061158860208501611533565b9150604084013590509250925092565b803561ffff8116811461155757600080fd5b6000602082840312156115bc57600080fd5b6115c582611598565b9392505050565b6000602082840312156115de57600080fd5b6115c582611533565b6000806000606084860312156115fc57600080fd5b61160584611533565b925061161360208501611533565b915061162160408501611598565b90509250925092565b6000806020838503121561163d57600080fd5b823567ffffffffffffffff8082111561165557600080fd5b818501915085601f83011261166957600080fd5b81358181111561167857600080fd5b86602060608302850101111561168d57600080fd5b60209290920196919550909350505050565b803563ffffffff8116811461155757600080fd5b6000602082840312156116c557600080fd5b6115c58261169f565b6000608082840312156116e057600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261172757600080fd5b50813567ffffffffffffffff81111561173f57600080fd5b60208301915083602082850101111561175757600080fd5b9250929050565b600080600080600080610100878903121561177857600080fd5b61178288886116ce565b9550608087013567ffffffffffffffff8082111561179f57600080fd5b6117ab8a838b016116ce565b965060a08901359150808211156117c157600080fd5b818901915089601f8301126117d557600080fd5b8135818111156117e7576117e76116e6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561182d5761182d6116e6565b816040528281528c602084870101111561184657600080fd5b8260208601602083013760006020848301015280985050505060c089013591508082111561187357600080fd5b5061188089828a01611715565b9094509250611893905060e08801611533565b90509295509295509295565b60008060008060c085870312156118b557600080fd5b6118bf86866116ce565b9350608085013567ffffffffffffffff808211156118dc57600080fd5b6118e8888389016116ce565b945060a08701359150808211156118fe57600080fd5b5061190b87828801611715565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b803567ffffffffffffffff8116811461155757600080fd5b60006020828403121561197057600080fd5b6115c582611946565b80356fffffffffffffffffffffffffffffffff8116811461155757600080fd5b6000602082840312156119ab57600080fd5b6115c582611979565b6020808252818101839052600090604080840186845b87811015611a305763ffffffff6119e08361169f565b16835267ffffffffffffffff6119f7868401611946565b16858401526fffffffffffffffffffffffffffffffff611a18858401611979565b168385015260609283019291909101906001016119ca565b5090979650505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611a7257600080fd5b83018035915067ffffffffffffffff821115611a8d57600080fd5b60200191503681900382131561175757600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60005b83811015611b06578181015183820152602001611aee565b50506000910152565b60008151808452611b27816020860160208601611aeb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835260a06020840152611b8a60a08401898b611aa2565b8381036040850152611b9d81888a611aa2565b90508381036060850152611bb18187611b0f565b92505080841660808401525098975050505050505050565b8082028115828204841417610f92577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611c3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611c5457600080fd5b815180151581146115c557600080fd5b60008251611c76818460208701611aeb565b9190910192915050565b6020815260006115c56020830184611b0f56fea2646970667358221220341084d743be51f24cd3f62bb4e7cd712d16ef0eead90b2b1e85d7884e3e5f2264736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "AxelarDVNAdapter_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "AxelarDVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AxelarDVNAdapter_OptionsUnsupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "gasService";
            readonly type: "address";
        }];
        readonly name: "GasServiceSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "NativeGasFeeMultiplierBpsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "PriceFeedSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "TokenWithdrawn";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "gas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dvn";
        readonly outputs: readonly [{
            readonly internalType: "contract IAxelarDVNAdapter";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "gasService";
        readonly outputs: readonly [{
            readonly internalType: "contract IAxelarGasService";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.Param";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAxelarDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.Param";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAxelarDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sendLib";
            readonly type: "address";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_gasService";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_dvn";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_nativeGasFeeMultiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeGasFeeMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroPriceFeed";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.DstConfigParam[]";
            readonly name: "_param";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_gasService";
            readonly type: "address";
        }];
        readonly name: "setGasService";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setNativeGasFeeMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): AxelarDVNAdapterFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AxelarDVNAdapterFeeLib;
}

type index$i_AxelarDVNAdapterFeeLib__factory = AxelarDVNAdapterFeeLib__factory;
declare const index$i_AxelarDVNAdapterFeeLib__factory: typeof AxelarDVNAdapterFeeLib__factory;
declare namespace index$i {
  export { index$i_AxelarDVNAdapterFeeLib__factory as AxelarDVNAdapterFeeLib__factory, index$j as axelarDvnAdapterSol };
}

type DVNAdapterMessageCodecConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVNAdapterMessageCodec__factory extends ContractFactory {
    constructor(...args: DVNAdapterMessageCodecConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DVNAdapterMessageCodec>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DVNAdapterMessageCodec;
    connect(signer: Signer): DVNAdapterMessageCodec__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203902c7fdc7724c29f89c78d6c0d147c94d7df95f2a18e9a8f68a81a01c2129fe64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_InvalidMessageSize";
        readonly type: "error";
    }];
    static createInterface(): DVNAdapterMessageCodecInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DVNAdapterMessageCodec;
}

type index$h_DVNAdapterMessageCodec__factory = DVNAdapterMessageCodec__factory;
declare const index$h_DVNAdapterMessageCodec__factory: typeof DVNAdapterMessageCodec__factory;
declare namespace index$h {
  export { index$h_DVNAdapterMessageCodec__factory as DVNAdapterMessageCodec__factory };
}

type OptimismDVNAdapterL1ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OptimismDVNAdapterL1__factory extends ContractFactory {
    constructor(...args: OptimismDVNAdapterL1ConstructorParams);
    deploy(_admins: PromiseOrValue<string>[], _optimismEid: PromiseOrValue<BigNumberish>, _l1Messenger: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OptimismDVNAdapterL1>;
    getDeployTransaction(_admins: PromiseOrValue<string>[], _optimismEid: PromiseOrValue<BigNumberish>, _l1Messenger: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OptimismDVNAdapterL1;
    connect(signer: Signer): OptimismDVNAdapterL1__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162002f5f38038062002f5f8339810160408190526200003491620002ff565b604080516000808252602082019092526001805460ff61ffff60e81b01191661017760ed1b179055600280546001600160a01b031916905533918591612ee09182858581156200008b576200008b60008362000169565b60005b8551811015620000ef57620000e67f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000d257620000d2620003f7565b60200260200101516200016960201b60201c565b6001016200008e565b5060005b81518110156200014057620001377fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000d257620000d2620003f7565b600101620000f3565b5050505063ffffffff96909616608052505050506001600160a01b031660a052506200044a9050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015620001ba57506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b15620002075760018054601590620001e290600160a81b90046001600160401b03166200040d565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b62000213828262000217565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000213576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002733390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002e557600080fd5b919050565b805163ffffffff81168114620002e557600080fd5b6000806000606084860312156200031557600080fd5b83516001600160401b03808211156200032d57600080fd5b818601915086601f8301126200034257600080fd5b8151602082821115620003595762000359620002b7565b8160051b604051601f19603f83011681018181108682111715620003815762000381620002b7565b60405292835281830193508481018201928a841115620003a057600080fd5b948201945b83861015620003c957620003b986620002cd565b85529482019493820193620003a5565b9750620003da9050888201620002ea565b955050505050620003ee60408501620002cd565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b031981016200044057634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60805160a051612ae16200047e600039600081816104b401526111480152600081816106d30152610f020152612ae16000f3fe6080604052600436106101db5760003560e01c80635c975abb11610102578063c358de0a11610095578063d2ae210411610064578063d2ae21041461064e578063d547741f146106a1578063d81e8dfe146106c1578063f68016b71461070a57600080fd5b8063c358de0a146105bc578063c416aa51146105dc578063c7b2370b1461060e578063cd88b9031461062e57600080fd5b8063741bef1a116100d1578063741bef1a1461051657806391d148541461054357806395d376d714610594578063a217fddf146105a757600080fd5b80635c975abb1461048a5780636140e0e6146104a257806369b90d68146104d6578063724e78da146104f657600080fd5b806326e67a371161017a57806336568abe1161014957806336568abe146103f25780634cfa6d2c1461041257806351b6a0fd1461044a57806352d84c621461046a57600080fd5b806326e67a37146103655780632de11376146103925780632f2ff15d146103b257806330bb3aac146103d257600080fd5b80631095b6d7116101b65780631095b6d71461028d57806311cda415146102ad57806316c38b3c14610307578063248a9ca31461032757600080fd5b8062bf2e80146101e757806301e336671461023b57806301ffc9a71461025d57600080fd5b366101e257005b600080fd5b3480156101f357600080fd5b50600154610223907d010000000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561024757600080fd5b5061025b61025636600461227b565b610727565b005b34801561026957600080fd5b5061027d6102783660046122b7565b610762565b6040519015158152602001610232565b34801561029957600080fd5b5061025b6102a836600461227b565b6107fb565b3480156102b957600080fd5b506005546102e290640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610232565b34801561031357600080fd5b5061025b610322366004612307565b61098a565b34801561033357600080fd5b50610357610342366004612324565b60009081526020819052604090206001015490565b604051908152602001610232565b34801561037157600080fd5b50610385610380366004612351565b6109af565b604051610232919061236c565b34801561039e57600080fd5b5061027d6103ad3660046123b3565b610a36565b3480156103be57600080fd5b5061025b6103cd3660046123ce565b610b1b565b3480156103de57600080fd5b506103576103ed366004612443565b610b45565b3480156103fe57600080fd5b5061025b61040d3660046123ce565b610b94565b34801561041e57600080fd5b5061035761042d3660046124c5565b600460209081526000928352604080842090915290825290205481565b34801561045657600080fd5b5061025b6104653660046124ef565b610bc6565b34801561047657600080fd5b5061025b610485366004612351565b610cbd565b34801561049657600080fd5b5060015460ff1661027d565b3480156104ae57600080fd5b506102e27f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e257600080fd5b5061025b6104f13660046123b3565b610d52565b34801561050257600080fd5b5061025b6105113660046123b3565b610df6565b34801561052257600080fd5b506002546102e29073ffffffffffffffffffffffffffffffffffffffff1681565b34801561054f57600080fd5b5061027d61055e3660046123ce565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6103576105a2366004612564565b610e93565b3480156105b357600080fd5b50610357600081565b3480156105c857600080fd5b5061025b6105d73660046125d5565b6111cf565b3480156105e857600080fd5b506001546102e290610100900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561061a57600080fd5b5061025b6106293660046123b3565b61127d565b34801561063a57600080fd5b5061025b6106493660046125f9565b611321565b34801561065a57600080fd5b50600154610688907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610232565b3480156106ad57600080fd5b5061025b6106bc3660046123ce565b611372565b3480156106cd57600080fd5b506106f57f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610232565b34801561071657600080fd5b506005546106f59063ffffffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561075181611397565b61075c8484846113a4565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806107f557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561082581611397565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166108a3576040517f5ee08b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b600061099581611397565b81156109a7576109a36113d4565b5050565b6109a3611453565b63ffffffff8116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610a2a57602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109fb5790505b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e86630553602052604081205460ff1615610a8b57506000919050565b6001547501000000000000000000000000000000000000000000900467ffffffffffffffff161580610b01575073ffffffffffffffffffffffffffffffffffffffff821660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15610b0e57506001919050565b506000919050565b919050565b600082815260208190526040902060010154610b3681611397565b610b4083836114aa565b505050565b600083610b5181610a36565b610b87576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060009695505050505050565b6040517fdec9f03100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bd181611397565b60005b82811015610c7e5736848483818110610bef57610bef61267f565b60600291909101915050604081013560046000610c0f60208501856123b3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020016020810190610c5e9190612351565b63ffffffff16815260208101919091526040016000205550600101610bd4565b507f360a0efdea8fcc9a11ee20a2099e314ddcf49a941d66790cd4e5adea30faa0748383604051610cb09291906126ae565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610ce781611397565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff84169081179091556040519081527f8ab199d61b4607e4688f098b55f3871b3597fc3f8a7dc0702201fba354d8b58a906020015b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d7c81611397565b600580547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1664010000000073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040517f25fecc89eba6e3655a12d5db63dceb5f0711081bd42663652110b98d9a1ec77390600090a25050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610e2081611397565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d90602001610d46565b6000610ea560a08501608086016123b3565b610eae81610a36565b610ee4576040517f4ab5ebcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610efa33610ef56020880188612351565b611570565b5063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016617530610f326020880188612351565b610f3c9190612729565b63ffffffff1614610f79576040517fabc1839000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554640100000000900473ffffffffffffffffffffffffffffffffffffffff16610fd0576040517fdaffed9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260046020908152604082207f8e760afe000000000000000000000000000000000000000000000000000000009161107991908490611016908b018b612351565b63ffffffff168152602080820192909252604001600020549061103b908a018a612773565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060408a0135611607565b6040516024016110899190612846565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260055491517f3dbb202b00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811692633dbb202b926111919264010000000083041691869163ffffffff90911690600401612859565b600060405180830381600087803b1580156111ab57600080fd5b505af11580156111bf573d6000803e3d6000fd5b5060009998505050505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111f981611397565b600180547fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167d01000000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001610d46565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112a781611397565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001610d46565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561134b81611397565b63ffffffff8416600090815260036020526040902061136b908484612199565b5050505050565b60008281526020819052604090206001015461138d81611397565b610b408383611636565b6113a181336116fb565b50565b73ffffffffffffffffffffffffffffffffffffffff83166113c957610b4082826117b3565b610b408383836118b9565b6113dc611927565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b61145b611996565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611429565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611507575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b15611566576001805460159061153f907501000000000000000000000000000000000000000000900467ffffffffffffffff166128cd565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6109a38282611a02565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020908152604080832063ffffffff85168452909152902054806107f5576040517ff25127e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015263ffffffff831660248201526044015b60405180910390fd5b606083828460405160200161161e939291906128f4565b60405160208183030381529060405290509392505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611692575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b156116f157600180546015906116ca907501000000000000000000000000000000000000000000900467ffffffffffffffff16612921565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6109a38282611af2565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166109a35761173981611ba9565b611744836020611bc8565b604051602001611755929190612963565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526115fe91600401612846565b73ffffffffffffffffffffffffffffffffffffffff8216611800576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461185a576040519150601f19603f3d011682016040523d82523d6000602084013e61185f565b606091505b5050905080610b40576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016115fe565b73ffffffffffffffffffffffffffffffffffffffff8216611906576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4073ffffffffffffffffffffffffffffffffffffffff84168383611e12565b60015460ff1615611994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016115fe565b565b60015460ff16611994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016115fe565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166109a35760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611a943390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156109a35760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606107f573ffffffffffffffffffffffffffffffffffffffff831660145b60606000611bd78360026129e4565b611be29060026129fb565b67ffffffffffffffff811115611bfa57611bfa612a0e565b6040519080825280601f01601f191660200182016040528015611c24576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c5b57611c5b61267f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611cbe57611cbe61267f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611cfa8460026129e4565b611d059060016129fb565b90505b6001811115611da2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611d4657611d4661267f565b1a60f81b828281518110611d5c57611d5c61267f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611d9b81612a3d565b9050611d08565b508315611e0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016115fe565b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610b4092869291600091611edd918516908490611f8a565b9050805160001480611efe575080806020019051810190611efe9190612a72565b610b40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016115fe565b6060611f998484600085611fa1565b949350505050565b606082471015612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016115fe565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161205c9190612a8f565b60006040518083038185875af1925050503d8060008114612099576040519150601f19603f3d011682016040523d82523d6000602084013e61209e565b606091505b50915091506120af878383876120ba565b979650505050505050565b606083156121505782516000036121495773ffffffffffffffffffffffffffffffffffffffff85163b612149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016115fe565b5081611f99565b611f9983838151156121655781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fe9190612846565b82805482825590600052602060002090601f016020900481019282156122325791602002820160005b8382111561220357833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026121c2565b80156122305782816101000a81549060ff0219169055600101602081600001049283019260010302612203565b505b5061223e929150612242565b5090565b5b8082111561223e5760008155600101612243565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b1657600080fd5b60008060006060848603121561229057600080fd5b61229984612257565b92506122a760208501612257565b9150604084013590509250925092565b6000602082840312156122c957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611e0b57600080fd5b80151581146113a157600080fd5b60006020828403121561231957600080fd5b8135611e0b816122f9565b60006020828403121561233657600080fd5b5035919050565b803563ffffffff81168114610b1657600080fd5b60006020828403121561236357600080fd5b611e0b8261233d565b6020808252825182820181905260009190848201906040850190845b818110156123a757835160ff1683529284019291840191600101612388565b50909695505050505050565b6000602082840312156123c557600080fd5b611e0b82612257565b600080604083850312156123e157600080fd5b823591506123f160208401612257565b90509250929050565b60008083601f84011261240c57600080fd5b50813567ffffffffffffffff81111561242457600080fd5b60208301915083602082850101111561243c57600080fd5b9250929050565b60008060008060006080868803121561245b57600080fd5b6124648661233d565b9450602086013567ffffffffffffffff808216821461248257600080fd5b81955061249160408901612257565b945060608801359150808211156124a757600080fd5b506124b4888289016123fa565b969995985093965092949392505050565b600080604083850312156124d857600080fd5b6124e183612257565b91506123f16020840161233d565b6000806020838503121561250257600080fd5b823567ffffffffffffffff8082111561251a57600080fd5b818501915085601f83011261252e57600080fd5b81358181111561253d57600080fd5b86602060608302850101111561255257600080fd5b60209290920196919550909350505050565b60008060006040848603121561257957600080fd5b833567ffffffffffffffff8082111561259157600080fd5b9085019060a082880312156125a557600080fd5b909350602085013590808211156125bb57600080fd5b506125c8868287016123fa565b9497909650939450505050565b6000602082840312156125e757600080fd5b813561ffff81168114611e0b57600080fd5b60008060006040848603121561260e57600080fd5b6126178461233d565b9250602084013567ffffffffffffffff8082111561263457600080fd5b818601915086601f83011261264857600080fd5b81358181111561265757600080fd5b8760208260051b850101111561266c57600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020808252818101839052600090604080840186845b8781101561271c5773ffffffffffffffffffffffffffffffffffffffff6126ea83612257565b16835263ffffffff6126fd86840161233d565b16838601528184013584840152606092830192909101906001016126c4565b5090979650505050505050565b600063ffffffff80841680612767577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126127a857600080fd5b83018035915067ffffffffffffffff8211156127c357600080fd5b60200191503681900382131561243c57600080fd5b60005b838110156127f35781810151838201526020016127db565b50506000910152565b600081518084526128148160208601602086016127d8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611e0b60208301846127fc565b73ffffffffffffffffffffffffffffffffffffffff8416815260606020820152600061288860608301856127fc565b905063ffffffff83166040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff8083168181036128ea576128ea61289e565b6001019392505050565b838152826020820152600082516129128160408501602087016127d8565b91909101604001949350505050565b600067ffffffffffffffff82168061293b5761293b61289e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161299b8160178501602088016127d8565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516129d88160288401602088016127d8565b01602801949350505050565b80820281158282048414176107f5576107f561289e565b808201808211156107f5576107f561289e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081612a4c57612a4c61289e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215612a8457600080fd5b8151611e0b816122f9565b60008251612aa18184602087016127d8565b919091019291505056fea2646970667358221220bd1ef3063120ccff02515dc9c882f79e5c9ee8ab62db05ad853fbeed80a6831464736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint32";
            readonly name: "_optimismEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_l1Messenger";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NoPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOptimism";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }];
        readonly name: "GasLimitSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "gasLimit";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "l1Messenger";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "optimismEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "peer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_gasLimit";
            readonly type: "uint32";
        }];
        readonly name: "setGasLimit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_peer";
            readonly type: "address";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OptimismDVNAdapterL1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): OptimismDVNAdapterL1;
}

type OptimismDVNAdapterL2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OptimismDVNAdapterL2__factory extends ContractFactory {
    constructor(...args: OptimismDVNAdapterL2ConstructorParams);
    deploy(_admins: PromiseOrValue<string>[], _l2Messenger: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OptimismDVNAdapterL2>;
    getDeployTransaction(_admins: PromiseOrValue<string>[], _l2Messenger: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OptimismDVNAdapterL2;
    connect(signer: Signer): OptimismDVNAdapterL2__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b5060405162002e0838038062002e088339810160408190526200003491620002e0565b604080516000808252602082019092526001805460ff61ffff60e81b01191661017760ed1b179055600280546001600160a01b031916905533918491612ee09182858581156200008b576200008b6000836200015f565b60005b8551811015620000ef57620000e67f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000d257620000d2620003c6565b60200260200101516200015f60201b60201c565b6001016200008e565b5060005b81518110156200014057620001377fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000d257620000d2620003c6565b600101620000f3565b5050506001600160a01b03909616608052506200041995505050505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015620001b057506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b15620001fd5760018054601590620001d890600160a81b90046001600160401b0316620003dc565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6200020982826200020d565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000209576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002693390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002db57600080fd5b919050565b60008060408385031215620002f457600080fd5b82516001600160401b03808211156200030c57600080fd5b818501915085601f8301126200032157600080fd5b8151602082821115620003385762000338620002ad565b8160051b604051601f19603f83011681018181108682111715620003605762000360620002ad565b6040529283528183019350848101820192898411156200037f57600080fd5b948201945b83861015620003a8576200039886620002c3565b8552948201949382019362000384565b9650620003b99050878201620002c3565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b031981016200040f57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b6080516129c5620004436000396000818161067c01528181610d700152610dcb01526129c56000f3fe6080604052600436106101c55760003560e01c80635c975abb116100f7578063a217fddf11610095578063cd88b90311610064578063cd88b903146105d7578063d2ae2104146105f7578063d547741f1461064a578063f5730a721461066a57600080fd5b8063a217fddf14610550578063c358de0a14610565578063c416aa5114610585578063c7b2370b146105b757600080fd5b8063741bef1a116100d1578063741bef1a146104a45780638e760afe146104d157806391d14854146104f157806395d376d71461054257600080fd5b80635c975abb1461044c57806369b90d6814610464578063724e78da1461048457600080fd5b806326e67a371161016457806330bb3aac1161013e57806330bb3aac146103b457806336568abe146103d45780634cfa6d2c146103f457806351b6a0fd1461042c57600080fd5b806326e67a37146103475780632de11376146103745780632f2ff15d1461039457600080fd5b80631095b6d7116101a05780631095b6d71461027757806311cda4151461029757806316c38b3c146102e9578063248a9ca31461030957600080fd5b8062bf2e80146101d157806301e336671461022557806301ffc9a71461024757600080fd5b366101cc57005b600080fd5b3480156101dd57600080fd5b5060015461020d907d010000000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561023157600080fd5b506102456102403660046120db565b61069e565b005b34801561025357600080fd5b5061026761026236600461211c565b6106d9565b604051901515815260200161021c565b34801561028357600080fd5b506102456102923660046120db565b610772565b3480156102a357600080fd5b506005546102c49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161021c565b3480156102f557600080fd5b5061024561030436600461216c565b610901565b34801561031557600080fd5b50610339610324366004612189565b60009081526020819052604090206001015490565b60405190815260200161021c565b34801561035357600080fd5b506103676103623660046121b6565b610926565b60405161021c91906121d1565b34801561038057600080fd5b5061026761038f366004612218565b6109ad565b3480156103a057600080fd5b506102456103af366004612235565b610a92565b3480156103c057600080fd5b506103396103cf3660046122ae565b610abc565b3480156103e057600080fd5b506102456103ef366004612235565b610af0565b34801561040057600080fd5b5061033961040f366004612333565b600460209081526000928352604080842090915290825290205481565b34801561043857600080fd5b50610245610447366004612368565b610b22565b34801561045857600080fd5b5060015460ff16610267565b34801561047057600080fd5b5061024561047f366004612218565b610c19565b34801561049057600080fd5b5061024561049f366004612218565b610cb3565b3480156104b057600080fd5b506002546102c49073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104dd57600080fd5b506102456104ec3660046123dd565b610d58565b3480156104fd57600080fd5b5061026761050c366004612235565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6103396103cf36600461241f565b34801561055c57600080fd5b50610339600081565b34801561057157600080fd5b50610245610580366004612490565b610ed8565b34801561059157600080fd5b506001546102c490610100900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156105c357600080fd5b506102456105d2366004612218565b610f86565b3480156105e357600080fd5b506102456105f23660046124b4565b61102a565b34801561060357600080fd5b50600154610631907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161021c565b34801561065657600080fd5b50610245610665366004612235565b61107b565b34801561067657600080fd5b506102c47f000000000000000000000000000000000000000000000000000000000000000081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106c8816110a0565b6106d38484846110ad565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061076c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561079c816110a0565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff1661081a576040517f5ee08b9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b600061090c816110a0565b811561091e5761091a6110dd565b5050565b61091a61115c565b63ffffffff81166000908152600360209081526040918290208054835181840281018401909452808452606093928301828280156109a157602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109725790505b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e86630553602052604081205460ff1615610a0257506000919050565b6001547501000000000000000000000000000000000000000000900467ffffffffffffffff161580610a78575073ffffffffffffffffffffffffffffffffffffffff821660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15610a8557506001919050565b506000919050565b919050565b600082815260208190526040902060010154610aad816110a0565b610ab783836111b3565b505050565b60006040517f9c5846fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdec9f03100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b2d816110a0565b60005b82811015610bda5736848483818110610b4b57610b4b61253a565b60600291909101915050604081013560046000610b6b6020850185612218565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020016020810190610bba91906121b6565b63ffffffff16815260208101919091526040016000205550600101610b30565b507f360a0efdea8fcc9a11ee20a2099e314ddcf49a941d66790cd4e5adea30faa0748383604051610c0c929190612569565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c43816110a0565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040517f25fecc89eba6e3655a12d5db63dceb5f0711081bd42663652110b98d9a1ec77390600090a25050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610cdd816110a0565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610dc7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5891906125e6565b60055490915073ffffffffffffffffffffffffffffffffffffffff808316911614610ecc576040517f624ac80300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b610ab760008484611279565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f02816110a0565b600180547fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167d01000000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001610d4c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610fb0816110a0565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001610d4c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611054816110a0565b63ffffffff84166000908152600360205260409020611074908484611ffb565b5050505050565b600082815260208190526040902060010154611096816110a0565b610ab78383611398565b6110aa813361145d565b50565b73ffffffffffffffffffffffffffffffffffffffff83166110d257610ab78282611515565b610ab783838361161b565b6110e5611689565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6111646116f8565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611132565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611210575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b1561126f5760018054601590611248907501000000000000000000000000000000000000000000900467ffffffffffffffff16612632565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b61091a8282611764565b8263ffffffff1661753061128d8484611854565b6112979190612659565b63ffffffff1614611304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f44564e41646170746572426173653a20696e76616c69642073726345696400006044820152606401610ec3565b60008060006113138585611885565b9250925092508273ffffffffffffffffffffffffffffffffffffffff16630223536e838367ffffffffffffffff6040518463ffffffff1660e01b815260040161135e93929190612711565b600060405180830381600087803b15801561137857600080fd5b505af115801561138c573d6000803e3d6000fd5b50505050505050505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156113f4575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b15611453576001805460159061142c907501000000000000000000000000000000000000000000900467ffffffffffffffff16612744565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b61091a8282611954565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661091a5761149b81611a0b565b6114a6836020611a2a565b6040516020016114b7929190612786565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610ec391600401612807565b73ffffffffffffffffffffffffffffffffffffffff8216611562576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146115bc576040519150601f19603f3d011682016040523d82523d6000602084013e6115c1565b606091505b5050905080610ab7576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610ec3565b73ffffffffffffffffffffffffffffffffffffffff8216611668576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ab773ffffffffffffffffffffffffffffffffffffffff84168383611c74565b60015460ff16156116f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec3565b565b60015460ff166116f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ec3565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661091a5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556117f63390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008260498361186582600461281a565b926118729392919061282d565b61187b91612857565b60e01c9392505050565b60006060816118966051604061281a565b84146118ce576040517ff1d10e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118eb6118df60206000878961282d565b6118e89161289f565b90565b92506118fb60406020868861282d565b6119049161289f565b9050611913846040818861282d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509598929750929550909350505050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561091a5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606061076c73ffffffffffffffffffffffffffffffffffffffff831660145b60606000611a398360026128db565b611a4490600261281a565b67ffffffffffffffff811115611a5c57611a5c6128f2565b6040519080825280601f01601f191660200182016040528015611a86576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611abd57611abd61253a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b2057611b2061253a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611b5c8460026128db565b611b6790600161281a565b90505b6001811115611c04577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ba857611ba861253a565b1a60f81b828281518110611bbe57611bbe61253a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611bfd81612921565b9050611b6a565b508315611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ec3565b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610ab792869291600091611d3f918516908490611dec565b9050805160001480611d60575080806020019051810190611d609190612956565b610ab7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ec3565b6060611dfb8484600085611e03565b949350505050565b606082471015611e95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ec3565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ebe9190612973565b60006040518083038185875af1925050503d8060008114611efb576040519150601f19603f3d011682016040523d82523d6000602084013e611f00565b606091505b5091509150611f1187838387611f1c565b979650505050505050565b60608315611fb2578251600003611fab5773ffffffffffffffffffffffffffffffffffffffff85163b611fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ec3565b5081611dfb565b611dfb8383815115611fc75781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec39190612807565b82805482825590600052602060002090601f016020900481019282156120945791602002820160005b8382111561206557833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612024565b80156120925782816101000a81549060ff0219169055600101602081600001049283019260010302612065565b505b506120a09291506120a4565b5090565b5b808211156120a057600081556001016120a5565b73ffffffffffffffffffffffffffffffffffffffff811681146110aa57600080fd5b6000806000606084860312156120f057600080fd5b83356120fb816120b9565b9250602084013561210b816120b9565b929592945050506040919091013590565b60006020828403121561212e57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611c6d57600080fd5b80151581146110aa57600080fd5b60006020828403121561217e57600080fd5b8135611c6d8161215e565b60006020828403121561219b57600080fd5b5035919050565b803563ffffffff81168114610a8d57600080fd5b6000602082840312156121c857600080fd5b611c6d826121a2565b6020808252825182820181905260009190848201906040850190845b8181101561220c57835160ff16835292840192918401916001016121ed565b50909695505050505050565b60006020828403121561222a57600080fd5b8135611c6d816120b9565b6000806040838503121561224857600080fd5b82359150602083013561225a816120b9565b809150509250929050565b60008083601f84011261227757600080fd5b50813567ffffffffffffffff81111561228f57600080fd5b6020830191508360208285010111156122a757600080fd5b9250929050565b6000806000806000608086880312156122c657600080fd5b6122cf866121a2565b9450602086013567ffffffffffffffff80821682146122ed57600080fd5b9094506040870135906122ff826120b9565b9093506060870135908082111561231557600080fd5b5061232288828901612265565b969995985093965092949392505050565b6000806040838503121561234657600080fd5b8235612351816120b9565b915061235f602084016121a2565b90509250929050565b6000806020838503121561237b57600080fd5b823567ffffffffffffffff8082111561239357600080fd5b818501915085601f8301126123a757600080fd5b8135818111156123b657600080fd5b8660206060830285010111156123cb57600080fd5b60209290920196919550909350505050565b600080602083850312156123f057600080fd5b823567ffffffffffffffff81111561240757600080fd5b61241385828601612265565b90969095509350505050565b60008060006040848603121561243457600080fd5b833567ffffffffffffffff8082111561244c57600080fd5b9085019060a0828803121561246057600080fd5b9093506020850135908082111561247657600080fd5b5061248386828701612265565b9497909650939450505050565b6000602082840312156124a257600080fd5b813561ffff81168114611c6d57600080fd5b6000806000604084860312156124c957600080fd5b6124d2846121a2565b9250602084013567ffffffffffffffff808211156124ef57600080fd5b818601915086601f83011261250357600080fd5b81358181111561251257600080fd5b8760208260051b850101111561252757600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020808252818101839052600090604080840186845b878110156125d9578135612592816120b9565b73ffffffffffffffffffffffffffffffffffffffff16835263ffffffff6125ba8387016121a2565b168386015281840135848401526060928301929091019060010161257f565b5090979650505050505050565b6000602082840312156125f857600080fd5b8151611c6d816120b9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681810361264f5761264f612603565b6001019392505050565b600063ffffffff80841680612697577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b60005b838110156126be5781810151838201526020016126a6565b50506000910152565b600081518084526126df8160208601602086016126a3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061272460608301866126c7565b905083602083015267ffffffffffffffff83166040830152949350505050565b600067ffffffffffffffff82168061275e5761275e612603565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127be8160178501602088016126a3565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516127fb8160288401602088016126a3565b01602801949350505050565b602081526000611c6d60208301846126c7565b8082018082111561076c5761076c612603565b6000808585111561283d57600080fd5b8386111561284a57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156128975780818660040360031b1b83161692505b505092915050565b8035602083101561076c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b808202811582820484141761076c5761076c612603565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008161293057612930612603565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561296857600080fd5b8151611c6d8161215e565b600082516129858184602087016126a3565b919091019291505056fea2646970667358221220882fa86b9a6ef45c69c75f5f21e8f130ef420e9452af697fd024a55a38ef108464736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_l2Messenger";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "DVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "DVNAdapter_MissingRecieveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVNAdapter_NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }];
        readonly name: "UntrustedPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }];
        readonly name: "PeerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "ReceiveLibsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "l2Messenger";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "peer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibs";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "receiveLib";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_peer";
            readonly type: "address";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sendLib";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiveLib";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ReceiveLibParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setReceiveLibs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OptimismDVNAdapterL2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): OptimismDVNAdapterL2;
}

type index$g_OptimismDVNAdapterL1__factory = OptimismDVNAdapterL1__factory;
declare const index$g_OptimismDVNAdapterL1__factory: typeof OptimismDVNAdapterL1__factory;
type index$g_OptimismDVNAdapterL2__factory = OptimismDVNAdapterL2__factory;
declare const index$g_OptimismDVNAdapterL2__factory: typeof OptimismDVNAdapterL2__factory;
declare namespace index$g {
  export { index$g_OptimismDVNAdapterL1__factory as OptimismDVNAdapterL1__factory, index$g_OptimismDVNAdapterL2__factory as OptimismDVNAdapterL2__factory };
}

declare namespace index$f {
  export { index$k as arbitrum, index$i as axelar, index$m as ccip, index$l as dvnAdapterBaseSol, index$h as libs, index$g as optimism };
}

type DVNConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVN__factory extends ContractFactory {
    constructor(...args: DVNConstructorParams);
    deploy(_vid: PromiseOrValue<BigNumberish>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _signers: PromiseOrValue<string>[], _quorum: PromiseOrValue<BigNumberish>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DVN>;
    getDeployTransaction(_vid: PromiseOrValue<BigNumberish>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _signers: PromiseOrValue<string>[], _quorum: PromiseOrValue<BigNumberish>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DVN;
    connect(signer: Signer): DVN__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_vid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address[]";
            readonly name: "_messageLibs";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_signers";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }, {
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "executableHash";
            readonly type: "bytes32";
        }];
        readonly name: "DVN_DuplicatedHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVN_InstructionExpired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "DVN_InvalidRole";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVN_InvalidSignatures";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "DVN_InvalidTarget";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "vid";
            readonly type: "uint32";
        }];
        readonly name: "DVN_InvalidVid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVN_OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MultiSig_OnlySigner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MultiSig_QuorumIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "signersSize";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "quorum";
            readonly type: "uint64";
        }];
        readonly name: "MultiSig_SignersSizeIsLessThanQuorum";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "MultiSig_StateAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MultiSig_UnorderedSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "ExecuteFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "vid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecuteParam";
            readonly name: "param";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }];
        readonly name: "HashAlreadyUsed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDVN.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "SetDstConfig";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "VerifierFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "idx";
            readonly type: "uint256";
        }];
        readonly name: "VerifySignaturesFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "gas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "vid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ExecuteParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_vid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiration";
            readonly type: "uint256";
        }];
        readonly name: "hashCallData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "vid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ExecuteParam";
            readonly name: "_param";
            readonly type: "tuple";
        }];
        readonly name: "quorumChangeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "setQuorum";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setSigner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "executableHash";
            readonly type: "bytes32";
        }];
        readonly name: "usedHashes";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "used";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "enum MultiSig.Errors";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFeeFromUlnV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DVNInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DVN;
}

type DVNFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVNFeeLib__factory extends ContractFactory {
    constructor(...args: DVNFeeLibConstructorParams);
    deploy(_nativeDecimalsRate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DVNFeeLib>;
    getDeployTransaction(_nativeDecimalsRate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DVNFeeLib;
    connect(signer: Signer): DVNFeeLib__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b506040516112b43803806112b483398101604081905261002f91610090565b61003833610040565b6080526100a9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a257600080fd5b5051919050565b6080516111f06100c460003960006107c801526111f06000f3fe6080604052600436106100695760003560e01c80638da5cb5b116100435780638da5cb5b146100df578063df2b057e14610114578063f2fde38b1461012757600080fd5b806301e3366714610075578063715018a6146100975780637bfa20a9146100ac57600080fd5b3661007057005b600080fd5b34801561008157600080fd5b50610095610090366004610d88565b610147565b005b3480156100a357600080fd5b5061009561015f565b3480156100b857600080fd5b506100cc6100c7366004610dc4565b610173565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d6565b6100cc610122366004610dc4565b610343565b34801561013357600080fd5b50610095610142366004610e84565b610451565b61014f610508565b61015a838383610589565b505050565b610167610508565b61017160006105b9565b565b60006101826020850185610e9f565b67ffffffffffffffff166000036101e3576101a36040860160208701610ec9565b6040517fd009138a00000000000000000000000000000000000000000000000000000000815263ffffffff90911660048201526024015b60405180910390fd5b6101ed838361062e565b50600061021261020360a0880160808901610e9f565b67ffffffffffffffff166106d2565b90506000806102246020890189610e84565b73ffffffffffffffffffffffffffffffffffffffff166388a4124c61024f60408b0160208c01610ec9565b8561025d60208c018c610e9f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815263ffffffff939093166004840152602483019190915267ffffffffffffffff166044820152606401608060405180830381865afa1580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190610f0d565b9350505091506103358288602001602081019061030f9190610f62565b61031f60c08c0160a08d01610f62565b61032f60608c0160408d01610f86565b8561073e565b93505050505b949350505050565b60006103526020850185610e9f565b67ffffffffffffffff16600003610373576101a36040860160208701610ec9565b61037d838361062e565b50600061039361020360a0880160808901610e9f565b90506000806103a56020890189610e84565b73ffffffffffffffffffffffffffffffffffffffff1663c1723a1d6103d060408b0160208c01610ec9565b856103de60208c018c610e9f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815263ffffffff939093166004840152602483019190915267ffffffffffffffff1660448201526064016080604051808303816000875af11580156102ce573d6000803e3d6000fd5b610459610508565b73ffffffffffffffffffffffffffffffffffffffff81166104fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101da565b610505816105b9565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101da565b73ffffffffffffffffffffffffffffffffffffffff83166105ae5761015a8282610838565b61015a83838361093e565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080821561068a576000806106458686856109ac565b6040517f7085244b00000000000000000000000000000000000000000000000000000000815260ff8516600482015290965092945085935050602490910190506101da565b8083146106c6576040517f04eb6e0c000000000000000000000000000000000000000000000000000000008152600481018290526024016101da565b60009150505b92915050565b6000806106e0604184610fd2565b90506106ed602082611018565b15610715576106fd602082611018565b610707908261102c565b61071290602061103f565b90505b8061072260e0604461103f565b61072c919061103f565b61073790604061103f565b9392505050565b60008061ffff8616156107515785610753565b845b9050600061271061076861ffff84168a610fd2565b6107729190611052565b90506fffffffffffffffffffffffffffffffff841615806107a357506fffffffffffffffffffffffffffffffff8516155b156107b157915061082f9050565b6000846fffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff166108049190610fd2565b61080e9190611052565b610818908a61103f565b90508181116108275781610829565b805b93505050505b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216610885576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146108df576040519150601f19603f3d011682016040523d82523d6000602084013e6108e4565b606091505b505090508061015a576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016101da565b73ffffffffffffffffffffffffffffffffffffffff821661098b576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61015a73ffffffffffffffffffffffffffffffffffffffff84168383610a06565b6000368160018401816109c0888884610a93565b60028301929091506109d89089908990600301610aba565b94506002820161ffff821683016109f181838b8d611066565b979b909a50969850505061ffff160193505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261015a908490610adf565b600060028201610aa581848688611066565b610aae91611090565b60f01c95945050505050565b6000838383818110610ace57610ace6110d8565b919091013560f81c95945050505050565b6000610b41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bee9092919063ffffffff16565b9050805160001480610b62575080806020019051810190610b629190611107565b61015a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101da565b606061033b8484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c22919061114d565b60006040518083038185875af1925050503d8060008114610c5f576040519150601f19603f3d011682016040523d82523d6000602084013e610c64565b606091505b5091509150610c7587838387610c80565b979650505050505050565b60608315610d16578251600003610d0f5773ffffffffffffffffffffffffffffffffffffffff85163b610d0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101da565b508161033b565b61033b8383815115610d2b5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da9190611169565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d8357600080fd5b919050565b600080600060608486031215610d9d57600080fd5b610da684610d5f565b9250610db460208501610d5f565b9150604084013590509250925092565b600080600080848603610140811215610ddc57600080fd5b60c0811215610dea57600080fd5b85945060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4082011215610e1d57600080fd5b5060c08501925061012085013567ffffffffffffffff80821115610e4057600080fd5b818701915087601f830112610e5457600080fd5b813581811115610e6357600080fd5b886020828501011115610e7557600080fd5b95989497505060200194505050565b600060208284031215610e9657600080fd5b61073782610d5f565b600060208284031215610eb157600080fd5b813567ffffffffffffffff8116811461073757600080fd5b600060208284031215610edb57600080fd5b813563ffffffff8116811461073757600080fd5b6fffffffffffffffffffffffffffffffff8116811461050557600080fd5b60008060008060808587031215610f2357600080fd5b845193506020850151610f3581610eef565b6040860151909350610f4681610eef565b6060860151909250610f5781610eef565b939692955090935050565b600060208284031215610f7457600080fd5b813561ffff8116811461073757600080fd5b600060208284031215610f9857600080fd5b813561073781610eef565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176106cc576106cc610fa3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261102757611027610fe9565b500690565b818103818111156106cc576106cc610fa3565b808201808211156106cc576106cc610fa3565b60008261106157611061610fe9565b500490565b6000808585111561107657600080fd5b8386111561108357600080fd5b5050820193919092039150565b7fffff00000000000000000000000000000000000000000000000000000000000081358181169160028510156110d05780818660020360031b1b83161692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561111957600080fd5b8151801515811461073757600080fd5b60005b8381101561114457818101518382015260200161112c565b50506000910152565b6000825161115f818460208701611129565b9190910192915050565b6020815260008251806020840152611188816040850160208701611129565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220e451c6f2f6749102e043ca854031dae5b894904402cd955b3b360b2b9c3e830964736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeDecimalsRate";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "DVN_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "DVN_InvalidDVNOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "DVN_UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): DVNFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DVNFeeLib;
}

type DeadDVNConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DeadDVN__factory extends ContractFactory {
    constructor(...args: DeadDVNConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DeadDVN>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DeadDVN;
    connect(signer: Signer): DeadDVN__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506103a6806100206000396000f3fe60806040526004361061003f5760003560e01c806330bb3aac146100445780635553fb8e1461007657806395d376d714610091578063c5e193cd14610076575b600080fd5b34801561005057600080fd5b5061006461005f366004610180565b61009f565b60405190815260200160405180910390f35b34801561008257600080fd5b5061006461005f366004610213565b61006461005f366004610267565b60006040518060600160405280602b8152602001610346602b91396040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ed91906102d8565b60405180910390fd5b803567ffffffffffffffff8116811461010e57600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010e57600080fd5b60008083601f84011261014957600080fd5b50813567ffffffffffffffff81111561016157600080fd5b60208301915083602082850101111561017957600080fd5b9250929050565b60008060008060006080868803121561019857600080fd5b853563ffffffff811681146101ac57600080fd5b94506101ba602087016100f6565b93506101c860408701610113565b9250606086013567ffffffffffffffff8111156101e457600080fd5b6101f088828901610137565b969995985093965092949392505050565b803561ffff8116811461010e57600080fd5b6000806000806080858703121561022957600080fd5b61023285610201565b935061024060208601610201565b925061024e604086016100f6565b915061025c60608601610113565b905092959194509250565b60008060006040848603121561027c57600080fd5b833567ffffffffffffffff8082111561029457600080fd5b9085019060a082880312156102a857600080fd5b909350602085013590808211156102be57600080fd5b506102cb86828701610137565b9497909650939450505050565b60006020808352835180602085015260005b81811015610306578581018301518582016040015282016102ea565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fe506c656173652073657420796f7572204f41707027732044564e7320616e642f6f72204578656375746f72a2646970667358221220fbca79d5876a76f055fd560499a026c72577d4a575b6453a8deec5c2e228ee0064736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): DeadDVNInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DeadDVN;
}

declare class MultiSig__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "MultiSig_OnlySigner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MultiSig_QuorumIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "signersSize";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "quorum";
            readonly type: "uint64";
        }];
        readonly name: "MultiSig_SignersSizeIsLessThanQuorum";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "MultiSig_StateAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MultiSig_UnorderedSigners";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "enum MultiSig.Errors";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MultiSigInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MultiSig;
}

type index$e_DVNFeeLib__factory = DVNFeeLib__factory;
declare const index$e_DVNFeeLib__factory: typeof DVNFeeLib__factory;
type index$e_DVN__factory = DVN__factory;
declare const index$e_DVN__factory: typeof DVN__factory;
type index$e_DeadDVN__factory = DeadDVN__factory;
declare const index$e_DeadDVN__factory: typeof DeadDVN__factory;
type index$e_MultiSig__factory = MultiSig__factory;
declare const index$e_MultiSig__factory: typeof MultiSig__factory;
declare namespace index$e {
  export { index$e_DVNFeeLib__factory as DVNFeeLib__factory, index$e_DVN__factory as DVN__factory, index$e_DeadDVN__factory as DeadDVN__factory, index$e_MultiSig__factory as MultiSig__factory, index$f as adapters };
}

declare class IAxelarDVNAdapter__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AxelarDVNAdapter_OnlyWorkerFeeLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "chainName";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "peer";
            readonly type: "string";
        }];
        readonly name: "AxelarDVNAdapter_UntrustedPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.FloorMarginUSDParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "FloorMarginUSDSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.MultiplierParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "MultiplierSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapter.NativeGasFeeParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "NativeGasFeeSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sendLib";
            readonly type: "address";
        }];
        readonly name: "withdrawToFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IAxelarDVNAdapterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IAxelarDVNAdapter$1;
}

declare class IAxelarDVNAdapterFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "AxelarDVNAdapter_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }];
        readonly name: "AxelarDVNAdapter_InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AxelarDVNAdapter_OptionsUnsupported";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "gasService";
            readonly type: "address";
        }];
        readonly name: "GasServiceSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "NativeGasFeeMultiplierBpsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "PriceFeedSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "TokenWithdrawn";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.Param";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAxelarDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IAxelarDVNAdapterFeeLib.Param";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "chainName";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "peer";
                readonly type: "string";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "nativeGasFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAxelarDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_sendLib";
            readonly type: "address";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): IAxelarDVNAdapterFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IAxelarDVNAdapterFeeLib;
}

declare class ICCIPDVNAdapter__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }];
        readonly name: "CCIPDVNAdapter_InvalidRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "chainSelector";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes";
            readonly name: "peer";
            readonly type: "bytes";
        }];
        readonly name: "CCIPDVNAdapter_UntrustedPeer";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct ICCIPDVNAdapter.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }];
    static createInterface(): ICCIPDVNAdapterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ICCIPDVNAdapter$1;
}

declare class ICCIPDVNAdapterFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "CCIPDVNAdapter_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CCIPDVNAdapter_OptionsUnsupported";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.Param";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ICCIPDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "receiver";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Client.EVMTokenAmount[]";
                readonly name: "tokenAmounts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "feeToken";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraArgs";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Client.EVM2AnyMessage";
            readonly name: "_message";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "contract IRouterClient";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct ICCIPDVNAdapterFeeLib.Param";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "chainSelector";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "peer";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gas";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ICCIPDVNAdapter.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "receiver";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct Client.EVMTokenAmount[]";
                readonly name: "tokenAmounts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "feeToken";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraArgs";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Client.EVM2AnyMessage";
            readonly name: "_message";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "contract IRouterClient";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "ccipFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ICCIPDVNAdapterFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ICCIPDVNAdapterFeeLib;
}

type index$d_IAxelarDVNAdapterFeeLib__factory = IAxelarDVNAdapterFeeLib__factory;
declare const index$d_IAxelarDVNAdapterFeeLib__factory: typeof IAxelarDVNAdapterFeeLib__factory;
type index$d_IAxelarDVNAdapter__factory = IAxelarDVNAdapter__factory;
declare const index$d_IAxelarDVNAdapter__factory: typeof IAxelarDVNAdapter__factory;
type index$d_ICCIPDVNAdapterFeeLib__factory = ICCIPDVNAdapterFeeLib__factory;
declare const index$d_ICCIPDVNAdapterFeeLib__factory: typeof ICCIPDVNAdapterFeeLib__factory;
type index$d_ICCIPDVNAdapter__factory = ICCIPDVNAdapter__factory;
declare const index$d_ICCIPDVNAdapter__factory: typeof ICCIPDVNAdapter__factory;
declare namespace index$d {
  export { index$d_IAxelarDVNAdapterFeeLib__factory as IAxelarDVNAdapterFeeLib__factory, index$d_IAxelarDVNAdapter__factory as IAxelarDVNAdapter__factory, index$d_ICCIPDVNAdapterFeeLib__factory as ICCIPDVNAdapterFeeLib__factory, index$d_ICCIPDVNAdapter__factory as ICCIPDVNAdapter__factory };
}

declare class IDVN__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDVN.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "SetDstConfig";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IDVNInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IDVN$1;
}

declare class IDVNFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "DVN_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "DVN_UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): IDVNFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IDVNFeeLib;
}

declare class ILayerZeroDVN__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroDVNInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroDVN;
}

declare class IReceiveUlnE2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "commitVerification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IReceiveUlnE2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IReceiveUlnE2;
}

type index$c_IDVNFeeLib__factory = IDVNFeeLib__factory;
declare const index$c_IDVNFeeLib__factory: typeof IDVNFeeLib__factory;
type index$c_IDVN__factory = IDVN__factory;
declare const index$c_IDVN__factory: typeof IDVN__factory;
type index$c_ILayerZeroDVN__factory = ILayerZeroDVN__factory;
declare const index$c_ILayerZeroDVN__factory: typeof ILayerZeroDVN__factory;
type index$c_IReceiveUlnE2__factory = IReceiveUlnE2__factory;
declare const index$c_IReceiveUlnE2__factory: typeof IReceiveUlnE2__factory;
declare namespace index$c {
  export { index$c_IDVNFeeLib__factory as IDVNFeeLib__factory, index$c_IDVN__factory as IDVN__factory, index$c_ILayerZeroDVN__factory as ILayerZeroDVN__factory, index$c_IReceiveUlnE2__factory as IReceiveUlnE2__factory, index$d as adapters };
}

type DVNOptionsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVNOptions__factory extends ContractFactory {
    constructor(...args: DVNOptionsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DVNOptions>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DVNOptions;
    connect(signer: Signer): DVNOptions__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd137b0adda1d4ad8a4cc8d1d093e7d9366f3054157f3fde5b7d507ba8c0027364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "DVN_InvalidDVNIdx";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "DVN_InvalidDVNOptions";
        readonly type: "error";
    }];
    static createInterface(): DVNOptionsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DVNOptions;
}

type UlnOptionsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class UlnOptions__factory extends ContractFactory {
    constructor(...args: UlnOptionsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<UlnOptions>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): UlnOptions;
    connect(signer: Signer): UlnOptions__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffe931bb4152d2ac117b827691b18379efbb98ef2cb97bbc0001abbf5e75984d64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidLegacyType1Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidLegacyType2Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "workerId";
            readonly type: "uint8";
        }];
        readonly name: "LZ_ULN_InvalidWorkerId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "LZ_ULN_InvalidWorkerOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "LZ_ULN_UnsupportedOptionType";
        readonly type: "error";
    }];
    static createInterface(): UlnOptionsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): UlnOptions;
}

type index$b_DVNOptions__factory = DVNOptions__factory;
declare const index$b_DVNOptions__factory: typeof DVNOptions__factory;
type index$b_UlnOptions__factory = UlnOptions__factory;
declare const index$b_UlnOptions__factory: typeof UlnOptions__factory;
declare namespace index$b {
  export { index$b_DVNOptions__factory as DVNOptions__factory, index$b_UlnOptions__factory as UlnOptions__factory };
}

declare class ILayerZeroReceiveLibrary__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroReceiveLibraryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroReceiveLibrary;
}

declare class ReceiveLibBaseE1__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_AddressSizeAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_InvalidAddressSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyExecutor";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "eid";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "AddressSizeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly name: "ExecutorSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "srcAddress";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dstAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidDst";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultExecutors";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executors";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutor";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct SetDefaultExecutorParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutors";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ReceiveLibBaseE1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveLibBaseE1;
}

type index$a_ILayerZeroReceiveLibrary__factory = ILayerZeroReceiveLibrary__factory;
declare const index$a_ILayerZeroReceiveLibrary__factory: typeof ILayerZeroReceiveLibrary__factory;
type index$a_ReceiveLibBaseE1__factory = ReceiveLibBaseE1__factory;
declare const index$a_ReceiveLibBaseE1__factory: typeof ReceiveLibBaseE1__factory;
declare namespace index$a {
  export { index$a_ILayerZeroReceiveLibrary__factory as ILayerZeroReceiveLibrary__factory, index$a_ReceiveLibBaseE1__factory as ReceiveLibBaseE1__factory };
}

declare class IReceiveUln301__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }];
        readonly name: "assertHeader";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IReceiveUln301Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IReceiveUln301;
}

type ReceiveUln301ViewConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ReceiveUln301View__factory extends ContractFactory {
    constructor(...args: ReceiveUln301ViewConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ReceiveUln301View>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ReceiveUln301View;
    connect(signer: Signer): ReceiveUln301View__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061112c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637401fccc116100505780637401fccc146100e0578063c1554a4b14610100578063c2803b2c1461011557600080fd5b806327d12cd91461006c5780635e280f1114610095575b600080fd5b61007f61007a366004610a0d565b610135565b60405161008c9190610ab4565b60405180910390f35b6000546100bb9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6100f36100ee366004610a0d565b61016c565b60405161008c9190610ace565b61011361010e366004610b07565b610579565b005b6001546100bb9073ffffffffffffffffffffffffffffffffffffffff1681565b60008061014385858561016c565b600381111561015457610154610a85565b0361016157506000610165565b5060025b9392505050565b6001546040517fc40ff83500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff81169163c40ff835916101e691889188917401000000000000000000000000000000000000000090910463ffffffff1690600401610b5b565b60006040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506000610222858561084a565b9050600061023e6102338787610865565b63ffffffff16610888565b9050600061024c8787610920565b6001546040517f0f8355c000000000000000000000000000000000000000000000000000000000815261ffff851660048201529192506000916102fa9173ffffffffffffffffffffffffffffffffffffffff1690630f8355c090602401602060405180830381865afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190610bb8565b6102f48a8a610943565b9061095c565b8460405160200161030c929190610bf5565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547ffdc07c7000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff169063fdc07c70906103979086908590600401610c3f565b602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610cb8565b67ffffffffffffffff168267ffffffffffffffff16116103ff576003945050505050610165565b6001546040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015261ffff861660248301529091169063e084d9529082906343ea4fa990604401600060405180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104c79190810190610e01565b8a8a6040516104d7929190610ed6565b6040519081900381207fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16825261051892918b90600401610f38565b602060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190610fe0565b1561056b576002945050505050610165565b506000979650505050505050565b60006105a37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166105fc5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561061e565b3373ffffffffffffffffffffffffffffffffffffffff82161461061e57600080fd5b600054610100900460ff161580801561063e5750600054600160ff909116105b806106585750303b158015610658575060005460ff166001145b6106e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561074757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600180546000805473ffffffffffffffffffffffffffffffffffffffff89811662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff9092169190911790915563ffffffff871674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090921690861617179055801561084357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600061085c61085984846109fd565b90565b90505b92915050565b6000610875600d60098486611002565b61087e9161102c565b60e01c9392505050565b600061ffff82111561091c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f362062697473000000000000000000000000000000000000000000000000000060648201526084016106e0565b5090565b6000610930600960018486611002565b61093991611074565b60c01c9392505050565b6000610953602d600d8486611002565b61085c916110ba565b606081158061096b5750602082115b156109a2576040517f18456c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8167ffffffffffffffff8111156109bb576109bb610cd3565b6040519080825280601f01601f1916602001820160405280156109e5576020820181803683370190505b506008909202610100039290921b6020820152919050565b6000610953605160318486611002565b600080600060408486031215610a2257600080fd5b833567ffffffffffffffff80821115610a3a57600080fd5b818601915086601f830112610a4e57600080fd5b813581811115610a5d57600080fd5b876020828501011115610a6f57600080fd5b6020928301989097509590910135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310610ac857610ac8610a85565b91905290565b6020810160048310610ac857610ac8610a85565b73ffffffffffffffffffffffffffffffffffffffff81168114610b0457600080fd5b50565b600080600060608486031215610b1c57600080fd5b8335610b2781610ae2565b9250602084013563ffffffff81168114610b4057600080fd5b91506040840135610b5081610ae2565b809150509250925092565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905063ffffffff83166020830152949350505050565b600060208284031215610bca57600080fd5b5051919050565b60005b83811015610bec578181015183820152602001610bd4565b50506000910152565b60008351610c07818460208801610bd1565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b61ffff831681526040602082015260008251806040840152610c68816060850160208701610bd1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b805167ffffffffffffffff81168114610cb357600080fd5b919050565b600060208284031215610cca57600080fd5b61085c82610c9b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610d2557610d25610cd3565b60405290565b805160ff81168114610cb357600080fd5b600082601f830112610d4d57600080fd5b8151602067ffffffffffffffff80831115610d6a57610d6a610cd3565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715610dad57610dad610cd3565b6040529384526020818701810194908101925087851115610dcd57600080fd5b6020870191505b84821015610df6578151610de781610ae2565b83529183019190830190610dd4565b979650505050505050565b600060208284031215610e1357600080fd5b815167ffffffffffffffff80821115610e2b57600080fd5b9083019060c08286031215610e3f57600080fd5b610e47610d02565b610e5083610c9b565b8152610e5e60208401610d2b565b6020820152610e6f60408401610d2b565b6040820152610e8060608401610d2b565b6060820152608083015182811115610e9757600080fd5b610ea387828601610d3c565b60808301525060a083015182811115610ebb57600080fd5b610ec787828601610d3c565b60a08301525095945050505050565b8183823760009101908152919050565b60008151808452602080850194506020840160005b83811015610f2d57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610efb565b509495945050505050565b6060815267ffffffffffffffff845116606082015260ff602085015116608082015260ff60408501511660a082015260ff60608501511660c08201526000608085015160c060e0840152610f90610120840182610ee6565b905060a08601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa084830301610100850152610fcc8282610ee6565b602085019690965250505060400152919050565b600060208284031215610ff257600080fd5b8151801515811461016557600080fd5b6000808585111561101257600080fd5b8386111561101f57600080fd5b5050820193919092039150565b7fffffffff00000000000000000000000000000000000000000000000000000000813581811691600485101561106c5780818660040360031b1b83161692505b505092915050565b7fffffffffffffffff000000000000000000000000000000000000000000000000813581811691600885101561106c5760089490940360031b84901b1690921692915050565b8035602083101561085f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b169291505056fea2646970667358221220ede9b159d562c48ddcf9bd58a6b41287d8341e03bb1e156bb9e3204d2d1ef41664736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AddressCast_InvalidSizeForAddress";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpoint";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveUln301";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "receiveUln301";
        readonly outputs: readonly [{
            readonly internalType: "contract IReceiveUln301";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "enum VerificationState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUln301ViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveUln301View;
}

type index$9_IReceiveUln301__factory = IReceiveUln301__factory;
declare const index$9_IReceiveUln301__factory: typeof IReceiveUln301__factory;
type index$9_ReceiveUln301View__factory = ReceiveUln301View__factory;
declare const index$9_ReceiveUln301View__factory: typeof ReceiveUln301View__factory;
declare namespace index$9 {
  export { index$9_IReceiveUln301__factory as IReceiveUln301__factory, index$9_ReceiveUln301View__factory as ReceiveUln301View__factory };
}

declare class IMessageLibE1__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InsufficientMsgValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidPath";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_LzTokenPaymentAddressMustBeSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInZRO";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_adapterParam";
            readonly type: "bytes";
        }];
        readonly name: "estimateFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "_lastNonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_destination";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_zroPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_adapterParams";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibE1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLibE1;
}

declare class INonceContract__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_ua";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): INonceContractInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): INonceContract;
}

declare class ITreasuryFeeHandler__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_supplied";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ITreasuryFeeHandlerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ITreasuryFeeHandler;
}

declare class IUltraLightNode301__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "commitVerification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IUltraLightNode301Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IUltraLightNode301;
}

type index$8_IMessageLibE1__factory = IMessageLibE1__factory;
declare const index$8_IMessageLibE1__factory: typeof IMessageLibE1__factory;
type index$8_INonceContract__factory = INonceContract__factory;
declare const index$8_INonceContract__factory: typeof INonceContract__factory;
type index$8_ITreasuryFeeHandler__factory = ITreasuryFeeHandler__factory;
declare const index$8_ITreasuryFeeHandler__factory: typeof ITreasuryFeeHandler__factory;
type index$8_IUltraLightNode301__factory = IUltraLightNode301__factory;
declare const index$8_IUltraLightNode301__factory: typeof IUltraLightNode301__factory;
declare namespace index$8 {
  export { index$8_IMessageLibE1__factory as IMessageLibE1__factory, index$8_INonceContract__factory as INonceContract__factory, index$8_ITreasuryFeeHandler__factory as ITreasuryFeeHandler__factory, index$8_IUltraLightNode301__factory as IUltraLightNode301__factory };
}

type NonceContractMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class NonceContractMock__factory extends ContractFactory {
    constructor(...args: NonceContractMockConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<NonceContractMock>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): NonceContractMock;
    connect(signer: Signer): NonceContractMock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b506040516105bd3803806105bd83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161052c61009160003960008181604b015261014e015261052c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635e280f11146100465780636fe7b67314610097578063c533338f146100c3575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100aa6100a53660046102d5565b610106565b60405167ffffffffffffffff909116815260200161008e565b6100aa6100d1366004610394565b6000602081815292815260409020815180830184018051928152908401929093019190912091525467ffffffffffffffff1681565b6040517f9c729da100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639c729da190602401602060405180830381865afa158015610197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bb9190610474565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021f576040517f94cfb9e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152602081905260409081902090516102439085908590610498565b908152604051908190036020019020805460009061026a9067ffffffffffffffff166104a8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050949350505050565b803561ffff811681146102ab57600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff811681146102d257600080fd5b50565b600080600080606085870312156102eb57600080fd5b6102f485610299565b93506020850135610304816102b0565b9250604085013567ffffffffffffffff8082111561032157600080fd5b818701915087601f83011261033557600080fd5b81358181111561034457600080fd5b88602082850101111561035657600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156103a757600080fd5b6103b083610299565b9150602083013567ffffffffffffffff808211156103cd57600080fd5b818501915085601f8301126103e157600080fd5b8135818111156103f3576103f3610365565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561043957610439610365565b8160405282815288602084870101111561045257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561048657600080fd5b8151610491816102b0565b9392505050565b8183823760009101908152919050565b600067ffffffffffffffff8083168181036104ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600101939250505056fea2646970667358221220288f9d3e86241c5d632f76051096f8cdbaee8a63700291141983d9e1cd13cf8264736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySendLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpoint";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_ua";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "path";
            readonly type: "bytes";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): NonceContractMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): NonceContractMock;
}

type index$7_NonceContractMock__factory = NonceContractMock__factory;
declare const index$7_NonceContractMock__factory: typeof NonceContractMock__factory;
declare namespace index$7 {
  export { index$7_NonceContractMock__factory as NonceContractMock__factory };
}

declare class AddressSizeConfig__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_AddressSizeAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_InvalidAddressSize";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "eid";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "AddressSizeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): AddressSizeConfigInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AddressSizeConfig;
}

type ReceiveUln301ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ReceiveUln301__factory extends ContractFactory {
    constructor(...args: ReceiveUln301ConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ReceiveUln301>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ReceiveUln301;
    connect(signer: Signer): ReceiveUln301__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b50604051620033ea380380620033ea8339810160408190526200003491620000b2565b6001600160a01b03821660805263ffffffff811660a0528181620000583362000062565b5050505062000104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000c657600080fd5b82516001600160a01b0381168114620000de57600080fd5b602084015190925063ffffffff81168114620000f957600080fd5b809150509250929050565b60805160a0516132b9620001316000396000610f110152600081816110be0152611e3c01526132b96000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80636d26e5d0116100cd578063c40ff83511610081578063e65106f811610066578063e65106f8146103d5578063f2fde38b146103e8578063f8e1734c146103fb57600080fd5b8063c40ff8351461039f578063e084d952146103b257600080fd5b80638da5cb5b116100b25780638da5cb5b1461032d5780639653a7041461034b57806398678a111461035e57600080fd5b80636d26e5d014610312578063715018a61461032557600080fd5b806339e928a81161012457806343ea4fa91161010957806343ea4fa9146102bf57806352d2871f146102d257806354fd4d50146102f257600080fd5b806339e928a8146102475780633c782a521461025a57600080fd5b806329460b0b1161015557806329460b0b146101b95780632fed39ae146101cc57806339e3f9381461022757600080fd5b80630223536e146101715780630f8355c014610186575b600080fd5b61018461017f3660046123f7565b61040e565b005b6101a6610194366004612468565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6101846101c7366004612483565b610420565b6102026101da366004612468565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b0565b61023a61023536600461251a565b610605565b6040516101b09190612613565b610184610255366004612626565b6107a7565b61029f610268366004612689565b600260209081526000938452604080852082529284528284209052825290205460ff811690610100900467ffffffffffffffff1682565b60408051921515835267ffffffffffffffff9091166020830152016101b0565b61023a6102cd36600461251a565b610902565b6102e56102e03660046126d4565b610cbc565b6040516101b09190612781565b6040805160038152600060208201526001918101919091526060016101b0565b610184610320366004612794565b610d74565b610184610e4d565b60005473ffffffffffffffffffffffffffffffffffffffff16610202565b61020261035936600461251a565b610e61565b61020261036c36600461251a565b600460209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6101846103ad3660046127be565b610edc565b6103c56103c03660046129f3565b610eec565b60405190151581526020016101b0565b6101846103e3366004612a41565b610ef9565b6101846103f6366004612a8d565b611005565b610184610409366004612aaa565b6110bc565b61041a848484846111bd565b50505050565b6104286112d1565b60005b818110156105c7573683838381811061044657610446612b1b565b90506020028101906104589190612b4a565b905060ff6104696020830183612b88565b61047a906040810190602001612bbc565b60ff16036104b4576040517f83aa17da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff6104c36020830183612b88565b6104d4906060810190604001612bbc565b60ff160361050e576040517f4221136600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff6105246020830183612b88565b610532906020810190612bd7565b67ffffffffffffffff1603610573576040517f503667ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105916105836020830183612b88565b61058c90612bf2565b611352565b6105be60006105a36020840184612468565b6105b06020850185612b88565b6105b990612bf2565b6113a3565b5060010161042b565b507faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b56082826040516105f9929190612cb0565b60405180910390a15050565b6040805160c0810182526000808252602082018190529181018290526060808201929092526080810182905260a081019190915273ffffffffffffffffffffffffffffffffffffffff8316600090815260016020818152604080842063ffffffff87168552825292839020835160c081018552815467ffffffffffffffff8116825260ff680100000000000000008204811683860152690100000000000000000082048116838801526a0100000000000000000000909104166060820152928101805485518185028101850190965280865293949193608086019383018282801561072657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116106fb575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561079557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161076a575b50505050508152505090505b92915050565b6107af6112d1565b60005b818110156108d057368383838181106107cd576107cd612b1b565b9050604002019050600073ffffffffffffffffffffffffffffffffffffffff168160200160208101906108009190612a8d565b73ffffffffffffffffffffffffffffffffffffffff160361084d576040517f20e9d05a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085d6040820160208301612a8d565b6005600061086e6020850185612468565b63ffffffff168152602081019190915260400160002080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055506001016107b2565b507f2a2676897ce6724d11fb8016f9bcdfe9fe564bc3524411d5df7914aac78aeeb382826040516105f9929190612e4d565b6040805160c0810182526000808252602080830182905282840182905260608084018390526080840181905260a084015263ffffffff85168083527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49825284832073ffffffffffffffffffffffffffffffffffffffff88168452600183528584209184529152929020805491929167ffffffffffffffff16806109b257825467ffffffffffffffff1684526109d1565b67ffffffffffffffff818116146109d15767ffffffffffffffff811684525b815468010000000000000000900460ff16610a8757825468010000000000000000900460ff1615610a825782600101805480602002602001604051908101604052809291908181526020018280548015610a6157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a36575b50505050506080850152825468010000000000000000900460ff1660208501525b610b25565b815468010000000000000000900460ff90811614610b255781600101805480602002602001604051908101604052809291908181526020018280548015610b0457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610ad9575b50505050506080850152815468010000000000000000900460ff1660208501525b81546901000000000000000000900460ff16610bf45782546901000000000000000000900460ff1615610bef5782600201805480602002602001604051908101604052809291908181526020018280548015610bb757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610b8c575b505050505060a0850152825460ff69010000000000000000008204811660408701526a01000000000000000000009091041660608501525b610caa565b81546901000000000000000000900460ff90811614610caa5781600201805480602002602001604051908101604052809291908181526020018280548015610c7257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c47575b505050505060a0850152815460ff69010000000000000000008204811660408701526a01000000000000000000009091041660608501525b610cb384611352565b50505092915050565b606060018203610d0d57610cd4838561ffff16610e61565b6040805173ffffffffffffffffffffffffffffffffffffffff9092166020830152015b6040516020818303038152906040529050610d6d565b60028203610d3357610d23838561ffff16610902565b604051602001610cf79190612613565b6040517f0c509b5b000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b9392505050565b610d7c6112d1565b6020811115610db7576040517f6f85e1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff821660009081526003602052604090205415610e02576040517fe4df7bef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff8216600081815260036020908152604091829020849055815192835282018390527ee9ab3709e58edd0db46318d63673d8ae4681fa3e51d9f9dc07cde5109ff74891016105f9565b610e556112d1565b610e5f6000611737565b565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260046020908152604080832063ffffffff8616845290915281205490911680610ed25763ffffffff831660009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff16610ed4565b805b949350505050565b610ee78383836117ac565b505050565b6000610ed484848461187a565b366000610f068585611983565b91509150610f3582827f00000000000000000000000000000000000000000000000000000000000000006117ac565b6000610f41868661199f565b90506000610f5d610f5288886119b1565b63ffffffff166119d4565b90506000610f6f838361ffff16610902565b9050610f9c818686604051610f85929190612ec0565b6040518091039020610f978b8b611a6c565b611a96565b610ffb82610faa8a8a611c45565b85610fb58c8c611c5e565b610fbf8d8d611c81565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e9250611c91915050565b5050505050505050565b61100d6112d1565b73ffffffffffffffffffffffffffffffffffffffff81166110b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610d64565b6110b981611737565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461112b576040517f467409c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111388561ffff16611f44565b6001830361115f5761115a61ffff86168561115584860186612a8d565b611f8b565b6111b6565b600283036111815761115a61ffff86168561117c84860186612ed0565b612036565b6040517f0c509b5b00000000000000000000000000000000000000000000000000000000815260048101849052602401610d64565b5050505050565b6040805180820182526001815267ffffffffffffffff8316602082015290516002906000906111ef9088908890612ec0565b6040805191829003909120825260208083019390935290810160009081208682528352818120338083529084529082902084518154959094015167ffffffffffffffff16610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff941515949094167fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000909516949094179290921790925590517f2cb0eed7538baeae4c6fde038c0fd0384d27de0dd55a228c65847bda6aa1ab56916112c3918790879086908890612f05565b60405180910390a150505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d64565b602081015160ff1615801561136c5750606081015160ff16155b156110b9576040517fce2c375100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602081015160ff90811614806113be5750602081015160ff16155b156114055760808101515115611400576040517f83aa17da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611484565b806020015160ff1681608001515114158061144057506002611429600160ff612fb9565b6114339190612fd2565b60ff16816020015160ff16115b15611477576040517f83aa17da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611484816080015161207f565b604081015160ff908116148061149f5750604081015160ff16155b156115255760a081015151156114e1576040517f4221136600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081015160ff1615611520576040517f38682fa900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115fc565b806040015160ff168160a001515114158061156057506002611549600160ff612fb9565b6115539190612fd2565b60ff16816040015160ff16115b15611597576040517f4221136600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081015160ff1615806115b85750806040015160ff16816060015160ff16115b156115ef576040517f38682fa900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115fc8160a0015161207f565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020818152604080842063ffffffff87168552825292839020845181548684015195870151606088015167ffffffffffffffff9093167fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000909216919091176801000000000000000060ff97881602177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918716919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000095909116949094029390931783556080840151805185949361171393908501920190612302565b5060a0820151805161172f916002840191602090910190612302565b505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b605182146117e6576040517fc9bf37b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016117f28484612119565b60ff161461182c576040517f3a9ae7b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8063ffffffff1661183d848461213b565b63ffffffff1614610ee7576040517f42d2c97e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015160009060ff16156118fd5760005b846020015160ff168160ff1610156118e5576118cf85608001518260ff16815181106118bb576118bb612b1b565b60200260200101518585886000015161214b565b6118dd576000915050610d6d565b60010161188d565b50836040015160ff166000036118fd57506001610d6d565b606084015160005b856040015160ff168160ff161015611977576119478660a001518260ff168151811061193357611933612b1b565b60200260200101518686896000015161214b565b1561196f57816119568161301b565b9250508160ff1660000361196f57600192505050610d6d565b600101611905565b50600095945050505050565b3660006119936051828587613056565b915091505b9250929050565b6000610d6d6119ae84846121da565b90565b60006119c1600d60098486613056565b6119ca91613080565b60e01c9392505050565b600061ffff821115611a68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f36206269747300000000000000000000000000000000000000000000000000006064820152608401610d64565b5090565b6000611a7883836121ea565b604051611a86929190612ec0565b6040518091039020905092915050565b611aa183838361187a565b611ad7576040517f4c3118d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015160ff1615611b8f5760005b836020015160ff168160ff161015611b8d57600083815260026020908152604080832085845290915281206080860151805191929160ff8516908110611b2f57611b2f612b1b565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000169055600101611ae7565b505b604083015160ff1615610ee75760005b836040015160ff168160ff16101561041a576000838152600260209081526040808320858452909152812060a0860151805191929160ff8516908110611be757611be7612b1b565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000169055600101611b9f565b6000611c55602d600d8486613056565b610d6d916130c8565b6000611c6e600960018486613056565b611c7791613104565b60c01c9392505050565b3660006119938360718187613056565b611c9f848761ffff16610e61565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d03576040517fb7386d3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163b600003611da0578373ffffffffffffffffffffffffffffffffffffffff168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e27368013687868680519060200120604051611d939392919092835267ffffffffffffffff919091166020830152604082015260600190565b60405180910390a361172f565b61ffff8616600090815260036020526040812054611dbf9087906121fa565b85604051602001611dd192919061314a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527fc2fa4813000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611e7b908a9085908a908a9089908b90600401613194565b600060405180830381600087803b158015611e9557600080fd5b505af1158015611ea9573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d815267ffffffffffffffff8c8116868801908152875194855291519284019290925251169381019390935273ffffffffffffffffffffffffffffffffffffffff8a169083015292507f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca04915060800160405180910390a15050505050505050565b611f4d8161229b565b6110b9576040517ff0c10d0400000000000000000000000000000000000000000000000000000000815263ffffffff82166004820152602401610d64565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260046020908152604080832063ffffffff89168085529083529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001695871695861790558051938452908301919091528101919091527f2bef5fe6b6383925f8e9893d464521c5fcd4f9d4dc14d32d900849c5ae0af710906060015b60405180910390a1505050565b6120418284836113a3565b61204b8284610902565b507f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f508182848360405161202993929190613202565b6000805b8251811015610ee75760008382815181106120a0576120a0612b1b565b602002602001015190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161161210f576040517f447516e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9150600101612083565b60006121286001828486613056565b6121319161323d565b60f81c9392505050565b60006119c16031602d8486613056565b6000838152600260209081526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff88168452825280832081518083019092525460ff811615801580845261010090920467ffffffffffffffff169383019390935290916121d057508267ffffffffffffffff16816020015167ffffffffffffffff1610155b9695505050505050565b6000611c55605160318486613056565b3660006119938360518187613056565b60608115806122095750602082115b15612240576040517f18456c9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8167ffffffffffffffff81111561225957612259612812565b6040519080825280601f01601f191660200182016040528015612283576020820181803683370190505b506008909202610100039290921b6020820152919050565b63ffffffff811660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4960205260408120805468010000000000000000900460ff16151580610d6d5750546a0100000000000000000000900460ff16151592915050565b82805482825590600052602060002090810192821561237c579160200282015b8281111561237c57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612322565b50611a689291505b80821115611a685760008155600101612384565b60008083601f8401126123aa57600080fd5b50813567ffffffffffffffff8111156123c257600080fd5b60208301915083602082850101111561199857600080fd5b803567ffffffffffffffff811681146123f257600080fd5b919050565b6000806000806060858703121561240d57600080fd5b843567ffffffffffffffff81111561242457600080fd5b61243087828801612398565b90955093505060208501359150612449604086016123da565b905092959194509250565b803563ffffffff811681146123f257600080fd5b60006020828403121561247a57600080fd5b610d6d82612454565b6000806020838503121561249657600080fd5b823567ffffffffffffffff808211156124ae57600080fd5b818501915085601f8301126124c257600080fd5b8135818111156124d157600080fd5b8660208260051b85010111156124e657600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146110b957600080fd5b6000806040838503121561252d57600080fd5b8235612538816124f8565b915061254660208401612454565b90509250929050565b60008151808452602080850194506020840160005b8381101561259657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612564565b509495945050505050565b67ffffffffffffffff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301526000608082015160c060808501526125f160c085018261254f565b905060a083015184820360a086015261260a828261254f565b95945050505050565b602081526000610d6d60208301846125a1565b6000806020838503121561263957600080fd5b823567ffffffffffffffff8082111561265157600080fd5b818501915085601f83011261266557600080fd5b81358181111561267457600080fd5b8660208260061b85010111156124e657600080fd5b60008060006060848603121561269e57600080fd5b833592506020840135915060408401356126b7816124f8565b809150509250925092565b803561ffff811681146123f257600080fd5b6000806000606084860312156126e957600080fd5b6126f2846126c2565b92506020840135612702816124f8565b929592945050506040919091013590565b60005b8381101561272e578181015183820152602001612716565b50506000910152565b6000815180845261274f816020860160208601612713565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d6d6020830184612737565b600080604083850312156127a757600080fd5b6127b0836126c2565b946020939093013593505050565b6000806000604084860312156127d357600080fd5b833567ffffffffffffffff8111156127ea57600080fd5b6127f686828701612398565b9094509250612809905060208501612454565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561286457612864612812565b60405290565b803560ff811681146123f257600080fd5b600082601f83011261288c57600080fd5b8135602067ffffffffffffffff808311156128a9576128a9612812565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156128ec576128ec612812565b604052938452602081870181019490810192508785111561290c57600080fd5b6020870191505b84821015612935578135612926816124f8565b83529183019190830190612913565b979650505050505050565b600060c0828403121561295257600080fd5b61295a612841565b9050612965826123da565b81526129736020830161286a565b60208201526129846040830161286a565b60408201526129956060830161286a565b6060820152608082013567ffffffffffffffff808211156129b557600080fd5b6129c18583860161287b565b608084015260a08401359150808211156129da57600080fd5b506129e78482850161287b565b60a08301525092915050565b600080600060608486031215612a0857600080fd5b833567ffffffffffffffff811115612a1f57600080fd5b612a2b86828701612940565b9660208601359650604090950135949350505050565b600080600060408486031215612a5657600080fd5b833567ffffffffffffffff811115612a6d57600080fd5b612a7986828701612398565b909790965060209590950135949350505050565b600060208284031215612a9f57600080fd5b8135610ed2816124f8565b600080600080600060808688031215612ac257600080fd5b612acb866126c2565b94506020860135612adb816124f8565b935060408601359250606086013567ffffffffffffffff811115612afe57600080fd5b612b0a88828901612398565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112612b7e57600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112612b7e57600080fd5b600060208284031215612bce57600080fd5b610d6d8261286a565b600060208284031215612be957600080fd5b610d6d826123da565b60006107a13683612940565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612c3357600080fd5b830160208101925035905067ffffffffffffffff811115612c5357600080fd5b8060051b360382131561199857600080fd5b8183526000602080850194508260005b85811015612596578135612c88816124f8565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612c75565b60208082528181018390526000906040808401600586901b8501820187855b88811015612e3f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18c3603018112612d3157600080fd5b8b0163ffffffff612d4182612454565b168552878101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41823603018112612d7857600080fd5b8589018890520167ffffffffffffffff612d91826123da565b1687860152612da188820161286a565b606060ff80831682890152612db78a850161286a565b92506080818416818a0152612dcd83860161286a565b935060a09250818416838a0152612de681860186612bfe565b60c08b81015294509150612e01905061010089018483612c65565b925050612e1081840184612bfe565b93509050838783030160e0880152612e29828483612c65565b978a019796505050928701925050600101612ccf565b509098975050505050505050565b6020808252818101839052600090604080840186845b87811015612eb35763ffffffff612e7983612454565b16835284820135612e89816124f8565b73ffffffffffffffffffffffffffffffffffffffff16838601529183019190830190600101612e63565b5090979650505050505050565b8183823760009101908152919050565b600060208284031215612ee257600080fd5b813567ffffffffffffffff811115612ef957600080fd5b610ed484828501612940565b73ffffffffffffffffffffffffffffffffffffffff8616815260806020820152836080820152838560a0830137600060a08583010152600060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f870116830101905067ffffffffffffffff841660408301528260608301529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60ff82811682821603908111156107a1576107a1612f8a565b600060ff83168061300c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b600060ff82168061302e5761302e612f8a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b6000808585111561306657600080fd5b8386111561307357600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156130c05780818660040360031b1b83161692505b505092915050565b803560208310156107a1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156130c05760089490940360031b84901b1690921692915050565b6000835161315c818460208801612713565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b61ffff8716815260c0602082015260006131b160c0830188612737565b73ffffffffffffffffffffffffffffffffffffffff8716604084015267ffffffffffffffff8616606084015284608084015282810360a08401526131f58185612737565b9998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416815263ffffffff8316602082015260606040820152600061260a60608301846125a1565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156130c05760019490940360031b84901b169092169291505056fea2646970667358221220c8cbc7bdc4db6025dc544e21d83354f8fa98263753cbb096e35561cd5751325364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressCast_InvalidSizeForAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_AddressSizeAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_InvalidAddressSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "configType";
            readonly type: "uint256";
        }];
        readonly name: "LZ_ULN_InvalidConfigType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidPacketHeader";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidPacketVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Verifying";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "eid";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "AddressSizeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly name: "ExecutorSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "srcAddress";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dstAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidDst";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }];
        readonly name: "assertHeader";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "commitVerification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultExecutors";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executors";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutor";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "submitted";
            readonly type: "bool";
        }, {
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct SetDefaultExecutorParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutors";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUln301Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveUln301;
}

declare class SendLibBaseE1__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AddressCast_InvalidAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_AddressSizeAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_InvalidAddressSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InsufficientMsgValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidPath";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_LzTokenPaymentAddressMustBeSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "eid";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "AddressSizeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "TreasuryNativeFeeCapSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "estimateFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nonceContract";
        readonly outputs: readonly [{
            readonly internalType: "contract INonceContract";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzTokenPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "setTreasuryNativeFeeCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasuryFeeHandler";
        readonly outputs: readonly [{
            readonly internalType: "contract ITreasuryFeeHandler";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): SendLibBaseE1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): SendLibBaseE1;
}

type SendUln301ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class SendUln301__factory extends ContractFactory {
    constructor(...args: SendUln301ConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _treasuryGasLimit: PromiseOrValue<BigNumberish>, _treasuryGasForFeeCap: PromiseOrValue<BigNumberish>, _nonceContract: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _treasuryFeeHandler: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SendUln301>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _treasuryGasLimit: PromiseOrValue<BigNumberish>, _treasuryGasForFeeCap: PromiseOrValue<BigNumberish>, _nonceContract: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _treasuryFeeHandler: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SendUln301;
    connect(signer: Signer): SendUln301__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasForFeeCap";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_nonceContract";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_treasuryFeeHandler";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressCast_InvalidAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_AddressSizeAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AddressSizeConfig_InvalidAddressSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVN_InvalidDVNIdx";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "DVN_InvalidDVNOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InsufficientMsgValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidPath";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_LzTokenPaymentAddressMustBeSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "configType";
            readonly type: "uint256";
        }];
        readonly name: "LZ_ULN_InvalidConfigType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidLegacyType1Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidLegacyType2Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "workerId";
            readonly type: "uint8";
        }];
        readonly name: "LZ_ULN_InvalidWorkerId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "LZ_ULN_InvalidWorkerOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "LZ_ULN_UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "eid";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "AddressSizeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "requiredDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "DVNFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "TreasuryNativeFeeCapSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "estimateFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nonceContract";
        readonly outputs: readonly [{
            readonly internalType: "contract INonceContract";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzTokenPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "setTreasuryNativeFeeCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasuryFeeHandler";
        readonly outputs: readonly [{
            readonly internalType: "contract ITreasuryFeeHandler";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): SendUln301Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): SendUln301;
}

type TreasuryFeeHandlerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TreasuryFeeHandler__factory extends ContractFactory {
    constructor(...args: TreasuryFeeHandlerConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TreasuryFeeHandler>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TreasuryFeeHandler;
    connect(signer: Signer): TreasuryFeeHandler__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b506040516108be3803806108be83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516108276100976000396000818160400152818160e701526101a301526108276000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635e280f111461003b5780637da56b4b1461008b575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61009e6100993660046106bb565b6100a0565b005b6040517f9c729da100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015233917f000000000000000000000000000000000000000000000000000000000000000090911690639c729da190602401602060405180830381865afa158015610130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610154919061071a565b73ffffffffffffffffffffffffffffffffffffffff16146101a1576040517fc857f60c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e97a448a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610230919061073e565b610266576040517fbae51fef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818311156102af576040517f901cc98000000000000000000000000000000000000000000000000000000000815260048101849052602481018390526044015b60405180910390fd5b6102d173ffffffffffffffffffffffffffffffffffffffff86168583866102d8565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261036d908590610373565b50505050565b60006103d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166104879092919063ffffffff16565b90508051600014806103f65750808060200190518101906103f6919061073e565b610482576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102a6565b505050565b6060610496848460008561049e565b949350505050565b606082471015610530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102a6565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516105599190610784565b60006040518083038185875af1925050503d8060008114610596576040519150601f19603f3d011682016040523d82523d6000602084013e61059b565b606091505b50915091506105ac878383876105b7565b979650505050505050565b6060831561064d5782516000036106465773ffffffffffffffffffffffffffffffffffffffff85163b610646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102a6565b5081610496565b61049683838151156106625781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a691906107a0565b73ffffffffffffffffffffffffffffffffffffffff811681146106b857600080fd5b50565b600080600080600060a086880312156106d357600080fd5b85356106de81610696565b945060208601356106ee81610696565b93506040860135925060608601359150608086013561070c81610696565b809150509295509295909350565b60006020828403121561072c57600080fd5b815161073781610696565b9392505050565b60006020828403121561075057600080fd5b8151801515811461073757600080fd5b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122033836599f62f3941cda07d09389fb27e65f0954323bd1aaeee4df0461cf04d1a64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "supplied";
            readonly type: "uint256";
        }];
        readonly name: "LZ_TreasuryFeeHandler_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_TreasuryFeeHandler_OnlyOnSending";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_TreasuryFeeHandler_OnlySendLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpoint";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_supplied";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TreasuryFeeHandlerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TreasuryFeeHandler;
}

type index$6_AddressSizeConfig__factory = AddressSizeConfig__factory;
declare const index$6_AddressSizeConfig__factory: typeof AddressSizeConfig__factory;
type index$6_ReceiveUln301__factory = ReceiveUln301__factory;
declare const index$6_ReceiveUln301__factory: typeof ReceiveUln301__factory;
type index$6_SendLibBaseE1__factory = SendLibBaseE1__factory;
declare const index$6_SendLibBaseE1__factory: typeof SendLibBaseE1__factory;
type index$6_SendUln301__factory = SendUln301__factory;
declare const index$6_SendUln301__factory: typeof SendUln301__factory;
type index$6_TreasuryFeeHandler__factory = TreasuryFeeHandler__factory;
declare const index$6_TreasuryFeeHandler__factory: typeof TreasuryFeeHandler__factory;
declare namespace index$6 {
  export { index$6_AddressSizeConfig__factory as AddressSizeConfig__factory, index$6_ReceiveUln301__factory as ReceiveUln301__factory, index$6_SendLibBaseE1__factory as SendLibBaseE1__factory, index$6_SendUln301__factory as SendUln301__factory, index$6_TreasuryFeeHandler__factory as TreasuryFeeHandler__factory, index$8 as interfaces, index$7 as mocks, index$a as receiveLibBaseE1Sol, index$9 as receiveUln301ViewSol };
}

declare class IReceiveUln302__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }];
        readonly name: "assertHeader";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IReceiveUln302Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IReceiveUln302;
}

type ReceiveUln302ViewConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ReceiveUln302View__factory extends ContractFactory {
    constructor(...args: ReceiveUln302ViewConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ReceiveUln302View>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ReceiveUln302View;
    connect(signer: Signer): ReceiveUln302View__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506117bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635e280f1111610076578063861e1ca51161005b578063861e1ca514610199578063cb5026b9146101bc578063e1e3a7df146101c457600080fd5b80635e280f111461012e578063843c7b0e1461017957600080fd5b806327d12cd9146100a85780632baf0be7146100d1578063485cc955146101065780634b4b2efb1461011b575b600080fd5b6100bb6100b6366004611077565b6101d7565b6040516100c89190611126565b60405180910390f35b6100f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6040519081526020016100c8565b61011961011436600461115b565b610487565b005b6100bb610129366004611281565b6107b1565b6000546101549062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b6032546101549073ffffffffffffffffffffffffffffffffffffffff1681565b6101ac6101a7366004611281565b610abe565b60405190151581526020016100c8565b6100f8600081565b6101ac6101d23660046112ae565b610bae565b6032546040517fc40ff83500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff81169163c40ff8359161025191889188917401000000000000000000000000000000000000000090910463ffffffff16906004016112fe565b60006040518083038186803b15801561026957600080fd5b505afa15801561027d573d6000803e3d6000fd5b50505050600061028d8585610d56565b9050600060405180606001604052806102a68888610d68565b63ffffffff1681526020016102bb8888610d8b565b81526020016102ca8888610da4565b67ffffffffffffffff16905290506102e28183610abe565b6102f157600392505050610480565b6102fc818386610dc7565b61030b57600292505050610480565b60325481516040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015263ffffffff909216602482015291169063e084d9529082906343ea4fa990604401600060405180830381865afa158015610391573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103d79190810190611441565b88886040516103e7929190611516565b6040519081900381207fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16825261042892918990600401611578565b602060405180830381865afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190611620565b1561047957600192505050610480565b6000925050505b9392505050565b60006104b17fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff811661050a5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561052c565b3373ffffffffffffffffffffffffffffffffffffffff82161461052c57600080fd5b600054610100900460ff161580801561054c5750600054600160ff909116105b806105665750303b158015610566575060005460ff166001145b6105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561065557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61065e84610ee0565b603280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85811691909117909155600054604080517f416ecebf0000000000000000000000000000000000000000000000000000000081529051620100009092049092169163416ecebf9160048083019260209291908290030181865afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611642565b603260146101000a81548163ffffffff021916908363ffffffff16021790555080156107ab57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600080548351602085015160408087015190517fc9fc7bcd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff16606482015283926201000090049091169063c9fc7bcd90608401602060405180830381865afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e919061165f565b90508015801561095a5750600054845160208601516040517f5b17bb7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90931660248201526044810191909152620100009092041690635b17bb7090606401602060405180830381865afa15801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190611678565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b15610969576003915050610ab8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114801590610a655750600054845160208601516040517fa0dd43fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9093166024820152604481019190915262010000909204169063a0dd43fc90606401602060405180830381865afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611678565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b15610a74576002915050610ab8565b8015801590610aa357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ab2576001915050610ab8565b60009150505b92915050565b60008054604080517f861e1ca5000000000000000000000000000000000000000000000000000000008152855163ffffffff166004820152602086015160248201529085015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8481166064830152620100009092049091169063861e1ca590608401602060405180830381865afa925050508015610b9b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610b9891810190611620565b60015b610ba757506000610ab8565b9050610ab8565b6000805485516040517f9d7f977500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90921660248201528582166044820152620100009092041690639d7f977590606401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f9190611620565b610c6b57506000610d4e565b600054604080517fc9a54a99000000000000000000000000000000000000000000000000000000008152875163ffffffff166004820152602088015160248201529087015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8681166064830152620100009092049091169063c9a54a9990608401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190611620565b610d3d57506000610d4e565b81610d4a57506000610d4e565b5060015b949350505050565b6000610480610d658484610f83565b90565b6000610d78600d60098486611695565b610d81916116bf565b60e01c9392505050565b6000610d9b602d600d8486611695565b61048091611707565b6000610db4600960018486611695565b610dbd91611743565b60c01c9392505050565b603254600090610df1908590859073ffffffffffffffffffffffffffffffffffffffff1685610bae565b610dfd57506000610480565b6000548451602086015160408088015190517fc9fc7bcd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff16606482015284926201000090049091169063c9fc7bcd90608401602060405180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec9919061165f565b03610ed657506000610480565b5060019392505050565b600054610100900460ff16610f77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105ee565b610f8081610f93565b50565b6000610d9b605160318486611695565b600054610100900460ff1661102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105ee565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60008060006040848603121561108c57600080fd5b833567ffffffffffffffff808211156110a457600080fd5b818601915086601f8301126110b857600080fd5b8135818111156110c757600080fd5b8760208285010111156110d957600080fd5b6020928301989097509590910135949350505050565b60048110610f80577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101611133836110ef565b91905290565b73ffffffffffffffffffffffffffffffffffffffff81168114610f8057600080fd5b6000806040838503121561116e57600080fd5b823561117981611139565b9150602083013561118981611139565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156111e6576111e6611194565b60405290565b63ffffffff81168114610f8057600080fd5b67ffffffffffffffff81168114610f8057600080fd5b60006060828403121561122657600080fd5b6040516060810181811067ffffffffffffffff8211171561124957611249611194565b604052905080823561125a816111ec565b8152602083810135908201526040830135611274816111fe565b6040919091015292915050565b6000806080838503121561129457600080fd5b61129e8484611214565b9150606083013561118981611139565b60008060008060c085870312156112c457600080fd5b6112ce8686611214565b935060608501356112de81611139565b925060808501356112ee81611139565b9396929550929360a00135925050565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905063ffffffff83166020830152949350505050565b8051611366816111fe565b919050565b805160ff8116811461136657600080fd5b600082601f83011261138d57600080fd5b8151602067ffffffffffffffff808311156113aa576113aa611194565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156113ed576113ed611194565b604052938452602081870181019490810192508785111561140d57600080fd5b6020870191505b8482101561143657815161142781611139565b83529183019190830190611414565b979650505050505050565b60006020828403121561145357600080fd5b815167ffffffffffffffff8082111561146b57600080fd5b9083019060c0828603121561147f57600080fd5b6114876111c3565b6114908361135b565b815261149e6020840161136b565b60208201526114af6040840161136b565b60408201526114c06060840161136b565b60608201526080830151828111156114d757600080fd5b6114e38782860161137c565b60808301525060a0830151828111156114fb57600080fd5b6115078782860161137c565b60a08301525095945050505050565b8183823760009101908152919050565b60008151808452602080850194506020840160005b8381101561156d57815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161153b565b509495945050505050565b6060815267ffffffffffffffff845116606082015260ff602085015116608082015260ff60408501511660a082015260ff60608501511660c08201526000608085015160c060e08401526115d0610120840182611526565b905060a08601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08483030161010085015261160c8282611526565b602085019690965250505060400152919050565b60006020828403121561163257600080fd5b8151801515811461048057600080fd5b60006020828403121561165457600080fd5b8151610480816111ec565b60006020828403121561167157600080fd5b5051919050565b60006020828403121561168a57600080fd5b8151610480816111fe565b600080858511156116a557600080fd5b838611156116b257600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156116ff5780818660040360031b1b83161692505b505092915050565b80356020831015610ab8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156116ff5760089490940360031b84901b169092169291505056fea2646970667358221220d0d473c77807b487fecb423cc3083954c038668ead93f8f8e0586ef91987c93364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveUln302";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "receiveUln302";
        readonly outputs: readonly [{
            readonly internalType: "contract IReceiveUln302";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "enum VerificationState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUln302ViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveUln302View;
}

type index$5_IReceiveUln302__factory = IReceiveUln302__factory;
declare const index$5_IReceiveUln302__factory: typeof IReceiveUln302__factory;
type index$5_ReceiveUln302View__factory = ReceiveUln302View__factory;
declare const index$5_ReceiveUln302View__factory: typeof ReceiveUln302View__factory;
declare namespace index$5 {
  export { index$5_IReceiveUln302__factory as IReceiveUln302__factory, index$5_ReceiveUln302View__factory as ReceiveUln302View__factory };
}

type ReceiveUln302ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ReceiveUln302__factory extends ContractFactory {
    constructor(...args: ReceiveUln302ConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ReceiveUln302>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ReceiveUln302;
    connect(signer: Signer): ReceiveUln302__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "configType";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_InvalidConfigType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidPacketHeader";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidPacketVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Verifying";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }];
        readonly name: "assertHeader";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "commitVerification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "submitted";
            readonly type: "bool";
        }, {
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUln302Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveUln302;
}

type SendUln302ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class SendUln302__factory extends ContractFactory {
    constructor(...args: SendUln302ConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _treasuryGasLimit: PromiseOrValue<BigNumberish>, _treasuryGasForFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SendUln302>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _treasuryGasLimit: PromiseOrValue<BigNumberish>, _treasuryGasForFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SendUln302;
    connect(signer: Signer): SendUln302__factory;
    static readonly bytecode = "0x60e06040523480156200001157600080fd5b5060405162005bb938038062005bb9833981016040819052620000349162000129565b82828282836001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000077573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009d91906200016e565b6001600160a01b03821660805263ffffffff811660a0528383620000c133620000d9565b60c091909152600255506200019d9650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156200013f57600080fd5b83516001600160a01b03811681146200015757600080fd5b602085015160409095015190969495509392505050565b6000602082840312156200018157600080fd5b815163ffffffff811681146200019657600080fd5b9392505050565b60805160a05160c0516159d3620001e66000396000818161203e01526128d8015260005050600081816107ea0152818161092f01528181610e7f015261176c01526159d36000f3fe6080604052600436106101845760003560e01c806361d027b3116100d6578063d15b0d491161007f578063f2fde38b11610059578063f2fde38b14610513578063faaebd2114610533578063fd9be5221461056e57600080fd5b8063d15b0d49146104a6578063d80e9bd9146104c6578063f0f44260146104f357600080fd5b80638da5cb5b116100b05780638da5cb5b1461042e5780639c33abf714610459578063c14c43491461048657600080fd5b806361d027b3146103a75780636750cd4c146103f9578063715018a61461041957600080fd5b806329460b0b1161013857806343ea4fa91161011257806343ea4fa9146102cb5780634d963200146102eb57806354fd4d501461037a57600080fd5b806329460b0b1461025057806339e3f938146102705780634389e58f1461029d57600080fd5b80631881d94d116101695780631881d94d146101f2578063200175f71461020e57806320efd7221461023057600080fd5b806301ffc9a714610190578063188183f4146101c557600080fd5b3661018b57005b600080fd5b34801561019c57600080fd5b506101b06101ab36600461453b565b61058e565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101e56101e03660046145cc565b610673565b6040516101bc9190614605565b3480156101fe57600080fd5b5060006040516101bc9190614638565b34801561021a57600080fd5b5061022e610229366004614679565b610780565b005b34801561023c57600080fd5b5061022e61024b3660046146ff565b61092d565b34801561025c57600080fd5b5061022e61026b366004614754565b610ae1565b34801561027c57600080fd5b5061029061028b3660046145cc565b610cc6565b6040516101bc919061485a565b3480156102a957600080fd5b506102bd6102b8366004614886565b610e67565b6040516101bc9291906149a4565b3480156102d757600080fd5b506102906102e63660046145cc565b610f61565b3480156102f757600080fd5b506103496103063660046145cc565b600460209081526000928352604080842090915290825290205463ffffffff811690640100000000900473ffffffffffffffffffffffffffffffffffffffff1682565b6040805163ffffffff909316835273ffffffffffffffffffffffffffffffffffffffff9091166020830152016101bc565b34801561038657600080fd5b506040805160038152600060208201526002918101919091526060016101bc565b3480156103b357600080fd5b506003546103d49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b34801561040557600080fd5b506101b06104143660046149c8565b61131b565b34801561042557600080fd5b5061022e611326565b34801561043a57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103d4565b34801561046557600080fd5b506104796104743660046149e5565b61133a565b6040516101bc9190614a30565b34801561049257600080fd5b5061022e6104a1366004614a43565b611421565b3480156104b257600080fd5b5061022e6104c1366004614ab8565b611599565b3480156104d257600080fd5b506104e66104e1366004614886565b611627565b6040516101bc9190614ad1565b3480156104ff57600080fd5b5061022e61050e366004614ae8565b611697565b34801561051f57600080fd5b5061022e61052e366004614ae8565b6116ab565b34801561053f57600080fd5b5061056061054e366004614ae8565b60056020526000908152604090205481565b6040519081526020016101bc565b34801561057a57600080fd5b5061022e610589366004614b05565b61175f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f97f0258400000000000000000000000000000000000000000000000000000000148061062157507fffffffff0000000000000000000000000000000000000000000000000000000082167fb6e9ace300000000000000000000000000000000000000000000000000000000145b8061066d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b604080518082019091526000808252602082015263ffffffff80831660008181527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845260048352818420948452939091528120805492939092169081900361070457825463ffffffff16610706565b805b63ffffffff1684528154640100000000900473ffffffffffffffffffffffffffffffffffffffff1680610758578354640100000000900473ffffffffffffffffffffffffffffffffffffffff1661075a565b805b73ffffffffffffffffffffffffffffffffffffffff166020860152509295945050505050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146107d1576040517f885762a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190614b31565b73ffffffffffffffffffffffffffffffffffffffff16036108c4576040517fe695d04400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108cf838383611859565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527fe081464b7278501267de69fa85b7b9560b0ae05d5fbfaab9b1986c70356e2efe906060015b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461099c576040517f467409c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610adb57368383838181106109ba576109ba614b4e565b90506020028101906109cc9190614b7d565b90506109e36109de60208301836149c8565b6118cc565b60016109f560408301602084016149c8565b63ffffffff1603610a3557610a30610a1060208301836149c8565b86610a1e6040850185614bbb565b810190610a2b9190614cea565b611913565b610ad2565b6002610a4760408301602084016149c8565b63ffffffff1603610a8257610a30610a6260208301836149c8565b86610a706040850185614bbb565b810190610a7d9190614ea3565b6119c0565b610a9260408201602083016149c8565b6040517fba97c1fa00000000000000000000000000000000000000000000000000000000815263ffffffff90911660048201526024015b60405180910390fd5b5060010161099f565b50505050565b610ae9611a09565b60005b81811015610c885736838383818110610b0757610b07614b4e565b9050602002810190610b199190614ed8565b905060ff610b2a6020830183614f0c565b610b3b906040810190602001614f40565b60ff1603610b75576040517f83aa17da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff610b846020830183614f0c565b610b95906060810190604001614f40565b60ff1603610bcf576040517f4221136600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff610be56020830183614f0c565b610bf3906020810190614f5b565b67ffffffffffffffff1603610c34576040517f503667ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c52610c446020830183614f0c565b610c4d90614f76565b611a8a565b610c7f6000610c6460208401846149c8565b610c716020850185614f0c565b610c7a90614f76565b611adb565b50600101610aec565b507faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b5608282604051610cba929190615034565b60405180910390a15050565b6040805160c0810182526000808252602082018190529181018290526060808201929092526080810182905260a081019190915273ffffffffffffffffffffffffffffffffffffffff8316600090815260016020818152604080842063ffffffff87168552825292839020835160c081018552815467ffffffffffffffff8116825260ff680100000000000000008204811683860152690100000000000000000082048116838801526a01000000000000000000009091041660608201529281018054855181850281018501909652808652939491936080860193830182828015610de757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610dbc575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610e5657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610e2b575b505050505081525050905092915050565b604080518082019091526000808252602082015260607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610eec576040517f467409c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610efa888888611e6f565b9092509050600080610f2c610f1560608c0160408d01614ae8565b610f2560808d0160608e016149c8565b858a611f3c565b9092509050610f3b8284615203565b604080518082019091529081526020810191909152945091925050505b94509492505050565b6040805160c0810182526000808252602080830182905282840182905260608084018390526080840181905260a084015263ffffffff85168083527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49825284832073ffffffffffffffffffffffffffffffffffffffff88168452600183528584209184529152929020805491929167ffffffffffffffff168061101157825467ffffffffffffffff168452611030565b67ffffffffffffffff818116146110305767ffffffffffffffff811684525b815468010000000000000000900460ff166110e657825468010000000000000000900460ff16156110e157826001018054806020026020016040519081016040528092919081815260200182805480156110c057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611095575b50505050506080850152825468010000000000000000900460ff1660208501525b611184565b815468010000000000000000900460ff90811614611184578160010180548060200260200160405190810160405280929190818152602001828054801561116357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611138575b50505050506080850152815468010000000000000000900460ff1660208501525b81546901000000000000000000900460ff166112535782546901000000000000000000900460ff161561124e578260020180548060200260200160405190810160405280929190818152602001828054801561121657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116111eb575b505050505060a0850152825460ff69010000000000000000008204811660408701526a01000000000000000000009091041660608501525b611309565b81546901000000000000000000900460ff9081161461130957816002018054806020026020016040519081016040528092919081815260200182805480156112d157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116112a6575b505050505060a0850152815460ff69010000000000000000008204811660408701526a01000000000000000000009091041660608501525b61131284611a8a565b50505092915050565b600061066d826120ca565b61132e611a09565b6113386000612131565b565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff831601611399576113738385610673565b6040516020016113839190614605565b604051602081830303815290604052905061141a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe63ffffffff8316016113e0576113d08385610f61565b604051602001611383919061485a565b6040517fba97c1fa00000000000000000000000000000000000000000000000000000000815263ffffffff83166004820152602401610ac9565b9392505050565b611429611a09565b60005b81811015611567573683838381811061144757611447614b4e565b60609081029290920192506000916114659150830160408401614ae8565b73ffffffffffffffffffffffffffffffffffffffff16036114b2576040517f20e9d05a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114c260408201602083016149c8565b63ffffffff16600003611501576040517f49cfac4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600460209081528201907f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec9061153c83856149c8565b63ffffffff168152602081019190915260400160002061155c8282615216565b50505060010161142c565b507f2b001e1c6683bf79cc52891bd7215b204c787d18134fc7f3d21b4f32a49e47de8282604051610cba9291906152ae565b6115a1611a09565b6002548111156115eb576002546040517f34084fb8000000000000000000000000000000000000000000000000000000008152610ac9918391600401918252602082015260400190565b60028190556040518181527f491ff913b5444f4136b0d4075f020cfe3a5f60de926ec0b091612401a22b7842906020015b60405180910390a150565b60408051808201909152600080825260208201526000806116786116516060890160408a01614ae8565b61166160808a0160608b016149c8565b61166e60c08b018b614bbb565b9050878a8a6121a6565b604080518082019091529182526020820152925050505b949350505050565b61169f611a09565b6116a8816122ac565b50565b6116b3611a09565b73ffffffffffffffffffffffffffffffffffffffff8116611756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610ac9565b6116a881612131565b6117688161231f565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190614b31565b9050611806818484612389565b6040805133815273ffffffffffffffffffffffffffffffffffffffff851660208201529081018390527f820b7fd51bf79c54350bab98400651b3314ff6e79b33528821871d94a666988390606001610920565b73ffffffffffffffffffffffffffffffffffffffff82166118a6576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118c773ffffffffffffffffffffffffffffffffffffffff841683836123b9565b505050565b6118d5816120ca565b6116a8576040517ff0c10d0400000000000000000000000000000000000000000000000000000000815263ffffffff82166004820152602401610ac9565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260046020908152604080832063ffffffff8089168552908352928190208551815493870151909516640100000000027fffffffffffffffff0000000000000000000000000000000000000000000000009093169490931693909317179055517f779cb2dd9d2bb1be1737d05435d744facbfb84a2a4912e21379d39beddcdc805906109209084908690859061533b565b6119cb828483611adb565b6119d58284610f61565b507f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f508182848360405161092093929190615397565b60005473ffffffffffffffffffffffffffffffffffffffff163314611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac9565b602081015160ff16158015611aa45750606081015160ff16155b156116a8576040517fce2c375100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602081015160ff9081161480611af65750602081015160ff16155b15611b3d5760808101515115611b38576040517f83aa17da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bbc565b806020015160ff16816080015151141580611b7857506002611b61600160ff6153d2565b611b6b91906153eb565b60ff16816020015160ff16115b15611baf576040517f83aa17da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bbc8160800151612446565b604081015160ff9081161480611bd75750604081015160ff16155b15611c5d5760a08101515115611c19576040517f4221136600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081015160ff1615611c58576040517f38682fa900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d34565b806040015160ff168160a0015151141580611c9857506002611c81600160ff6153d2565b611c8b91906153eb565b60ff16816040015160ff16115b15611ccf576040517f4221136600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081015160ff161580611cf05750806040015160ff16816060015160ff16115b15611d27576040517f38682fa900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d348160a00151612446565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020818152604080842063ffffffff87168552825292839020845181548684015195870151606088015167ffffffffffffffff9093167fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000909216919091176801000000000000000060ff97881602177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000918716919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a0100000000000000000000959091169490940293909317835560808401518051859493611e4b939085019201906144a5565b5060a08201518051611e679160028401916020909101906144a5565b505050505050565b60606000806000611e8086866124e0565b90925090506000611eaa611e9a60608a0160408b01614ae8565b6101e060808b0160608c016149c8565b90506000611ebb60c08a018a614bbb565b90509050611ed381836000015163ffffffff166124f9565b6020820151611f0390611eec60808c0160608d016149c8565b611efc60608d0160408e01614ae8565b8488612541565b611f0d9086615203565b9450600080611f1c8b8661267a565b9092509050611f2b8288615203565b909b909a5098505050505050505050565b600354600090819073ffffffffffffffffffffffffffffffffffffffff1615610f585760405173ffffffffffffffffffffffffffffffffffffffff8716602482015263ffffffff8616604482015260648101859052831515608482015260009060a401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd51c54860000000000000000000000000000000000000000000000000000000017905260035491925060009182916120669173ffffffffffffffffffffffffffffffffffffffff16907f00000000000000000000000000000000000000000000000000000000000000009084908761269d565b915091506120768787848461274e565b909550935084156120be5760035473ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040812080548792906120b8908490615203565b90915550505b50505094509492505050565b63ffffffff811660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4960205260408120805468010000000000000000900460ff1615158061141a5750546a0100000000000000000000900460ff16151592915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806121b686866124e0565b9150915060006121c78b8b846127c9565b905060006121d58c8c610673565b90506121eb8a826000015163ffffffff166124f9565b806020015173ffffffffffffffffffffffffffffffffffffffff1663709eb6648c8e8d886040518563ffffffff1660e01b815260040161222e9493929190615434565b602060405180830381865afa15801561224b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226f919061547f565b6122799083615203565b915060008061228a8e8e868e6127d6565b90925090506122998285615203565b9e909d509b505050505050505050505050565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f9060200161161c565b3360009081526005602052604090205480821115612373576040517f34084fb80000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610ac9565b3360009081526005602052604090209190039055565b73ffffffffffffffffffffffffffffffffffffffff83166123ae576118c7828261291a565b6118c7838383611859565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526118c7908490612a20565b6000805b82518110156118c757600083828151811061246757612467614b4e565b602002602001015190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16116124d6576040517f447516e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b915060010161244a565b6060806124ed8484612b2f565b915091505b9250929050565b8082111561253d576040517fc667af3e0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610ac9565b5050565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a429061259c908890889088908890600401615434565b6020604051808303816000875af11580156125bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125df919061547f565b905080156126225773ffffffffffffffffffffffffffffffffffffffff86166000908152600560205260408120805483929061261c908490615203565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b60006060612692600561268c86615526565b85612c1c565b909590945092505050565b60006060863b8083036126c457604080516000808252602082019092529250925050612744565b60008060008761ffff1667ffffffffffffffff8111156126e6576126e6614c20565b6040519080825280601f01601f191660200182016040528015612710576020820181803683370190505b509050600080885160208a018c8f8ff191503d925087831115612731578792505b828152826000602083013e909450925050505b9550959350505050565b60008083158061275f575082516020115b1561276f57506000905080610f58565b600083806020019051810190612785919061547f565b90508515612795578091506127bf565b600060025488116127a8576002546127aa565b875b90508082116127b957816127bb565b805b9350505b5094509492505050565b600061168f848484612d78565b600354600090819073ffffffffffffffffffffffffffffffffffffffff1615610f585760405173ffffffffffffffffffffffffffffffffffffffff8716602482015263ffffffff8616604482015260648101859052831515608482015260009060a401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd42442210000000000000000000000000000000000000000000000000000000017905260035491925060009182916128fe9173ffffffffffffffffffffffffffffffffffffffff16907f00000000000000000000000000000000000000000000000000000000000000009086612df2565b9150915061290e8787848461274e565b94509450505050610f58565b73ffffffffffffffffffffffffffffffffffffffff8216612967576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146129c1576040519150601f19603f3d011682016040523d82523d6000602084013e6129c6565b606091505b50509050806118c7576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610ac9565b6000612a82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e9f9092919063ffffffff16565b9050805160001480612aa3575080806020019051810190612aa391906155c4565b6118c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ac9565b606080600080612b3f8686612eae565b915091508051600003612b9757604080516000808252602082019092528391612b8b565b604080518082019091526000815260606020820152815260200190600190039081612b635790505b509350935050506124f2565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612bae5790505090506040518060400160405280600260ff1681526020018381525081600081518110612c0457612c04614b4e565b60209081029190910101529196919550909350505050565b600060606000612c2b856130ef565b90506000612c38866131d5565b805160208201206060880151604089015192935090916000612c5a8284610f61565b905060008951600014612c8b5789600081518110612c7a57612c7a614b4e565b602002602001015160200151612c9c565b604051806020016040528060008152505b90506060612cfc8d846040518060a001604052808963ffffffff1681526020018c81526020018a8152602001876000015167ffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815250856131f2565b604051919b509150612d1490899089906020016155e1565b60405160208183030381529060405298507f07ea52d82345d6e838192107d8fd7123d9c2ec8e916cd0aad13fd2b60db2464483608001518460a0015183604051612d6093929190615610565b60405180910390a15050505050505050935093915050565b600080612d858585610f61565b905060008351600014612db65783600081518110612da557612da5614b4e565b602002602001015160200151612dc7565b604051806020016040528060008152505b9050600080612dd5836134de565b91509150612de684888a8585613782565b98975050505050505050565b60006060853b808303612e1957604080516000808252602082019092529250925050610f58565b60008060008761ffff1667ffffffffffffffff811115612e3b57612e3b614c20565b6040519080825280601f01601f191660200182016040528015612e65576020820181803683370190505b509050600080885160208a018d8dfa91503d925087831115612e85578792505b828152826000602083013e90999098509650505050505050565b606061168f8484600085613940565b6060806002831015612eef576040517f6592671c00000000000000000000000000000000000000000000000000000000815260006004820152602401610ac9565b6000612efe600282868861566e565b612f0791615698565b60f01c905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd82016130d8578060005b86831015613064576000612f5260018501858a8c61566e565b612f5b916156e0565b60f81c90506000819003612f9e576040517f6780cfaf00000000000000000000000000000000000000000000000000000000815260006004820152602401610ac9565b8160ff16600003612fb157809150612fee565b8160ff168160ff1614612fee57366000612fcd86868c8e61566e565b91509150612fde8989868585613a59565b9099509750859450919250829150505b600184019360009061300590600301868b8d61566e565b61300e91615698565b60f01c90506000819003613051576040517f6592671c00000000000000000000000000000000000000000000000000000000815260048101869052602401610ac9565b8060020161ffff16850194505050612f39565b8287146130a0576040517f6592671c00000000000000000000000000000000000000000000000000000000815260048101849052602401610ac9565b60028711156130d1573660006130b885858b8d61566e565b915091506130c98888858585613a59565b909850965050505b50506130e6565b6130e3828787613bce565b93505b50509250929050565b8051602080830151604080850151606080870151608088015193517f01000000000000000000000000000000000000000000000000000000000000009681019690965260c09690961b7fffffffffffffffff00000000000000000000000000000000000000000000000016602186015260e093841b7fffffffff00000000000000000000000000000000000000000000000000000000908116602987015273ffffffffffffffffffffffffffffffffffffffff909216602d8601529490921b909116604d83015260518201526071015b6040516020818303038152906040529050919050565b60608160a001518260c001516040516020016131bf929190615726565b60006060600080613202856134de565b9150915060008760400151886020015161321c919061574c565b90508060ff1667ffffffffffffffff81111561323a5761323a614c20565b604051908082528060200260200182016040528015613263578160200160208202803683370190505b50935060005b8160ff168160ff1610156134d1576000896020015160ff168260ff16106132be5760a08a015160208b015161329e90846153d2565b60ff16815181106132b1576132b1614b4e565b60200260200101516132e0565b89608001518260ff16815181106132d7576132d7614b4e565b60200260200101515b60408051602081019091526000808252919250905b855181101561334d578360ff1686828151811061331457613314614b4e565b602002602001015160ff16036133455786818151811061333657613336614b4e565b6020026020010151915061334d565b6001016132f5565b506040517f95d376d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906395d376d7906133a2908d908590600401615765565b6020604051808303816000875af11580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e5919061547f565b878460ff16815181106133fa576133fa614b4e565b6020026020010181815250506000878460ff168151811061341d5761341d614b4e565b602002602001015111156134c757868360ff168151811061344057613440614b4e565b60200260200101518c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546134959190615203565b92505081905550868360ff16815181106134b1576134b1614b4e565b6020026020010151886134c49190615203565b97505b5050600101613269565b5050505094509492505050565b60608082516000036134ef57915091565b60006134fa84613e4d565b90508060ff166001036135ac5760408051600180825281830190925290816020015b606081526020019060019003908161351c579050509250838360008151811061354757613547614b4e565b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050915061357f846003613f72565b8260008151811061359257613592614b4e565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff8111156135c8576135c8614c20565b6040519080825280602002602001820160405280156135f1578160200160208202803683370190505b5091508060ff1667ffffffffffffffff81111561361057613610614c20565b60405190808252806020026020018201604052801561364357816020015b606081526020019060019003908161362e5790505b50925060008060ff5b86518310156136f75760019092019160006136678885613ff2565b600294909401939050600061367c8986613f72565b90508260ff1660ff03613691578092506136e8565b8260ff168160ff16146136e8577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8486030160006136d08b8784614072565b90506136de8a8a87846141ec565b5093909301929150815b5061ffff16929092019161364c565b8183036000613707898584614072565b9050613715888885846141ec565b60005b8660ff168160ff16101561377657878160ff168151811061373b5761373b614b4e565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff169052600101613718565b50505050505050915091565b60008086604001518760200151613799919061574c565b905060005b8160ff168160ff161015613935576000886020015160ff168260ff16106137f35760a089015160208a01516137d390846153d2565b60ff16815181106137e6576137e6614b4e565b6020026020010151613815565b88608001518260ff168151811061380c5761380c614b4e565b60200260200101515b60408051602081019091526000808252919250905b8651811015613882578360ff1687828151811061384957613849614b4e565b602002602001015160ff160361387a5787818151811061386b5761386b614b4e565b60200260200101519150613882565b60010161382a565b5089516040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416916330bb3aac916138db918d918d9087906004016157e3565b602060405180830381865afa1580156138f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391c919061547f565b6139269086615203565b9450505080600101905061379e565b505095945050505050565b6060824710156139d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ac9565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516139fb919061582e565b60006040518083038185875af1925050503d8060008114613a38576040519150601f19603f3d011682016040523d82523d6000602084013e613a3d565b606091505b5091509150613a4e8783838761431b565b979650505050505050565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff861601613af457865115613ab657868484604051602001613aa293929190615840565b604051602081830303815290604052613aed565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505b9650613bc3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff861601613b8c57855115613b4e57858484604051602001613b3a93929190615840565b604051602081830303815290604052613b85565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505b9550613bc3565b6040517f6780cfaf00000000000000000000000000000000000000000000000000000000815260ff86166004820152602401610ac9565b509495939450505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff851601613cf45760228214613c35576040517f0dc652a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613c56613c4860226002868861566e565b613c5191615868565b6143bb565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b16602482015290915060340160405160208183030381529060405291505061141a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff851601613e1557604282111580613d2f5750606282115b15613d66576040517fc0927c5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613d79613c4860226002868861566e565b90506000613d8e613c4860426022878961566e565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe8501613dc2866042818a61566e565b613dcb91615868565b60405160086020938403029190911c9250613dfc916001916011918391889183916031916002918b918b91016158a4565b604051602081830303815290604052935050505061141a565b6040517f4170513000000000000000000000000000000000000000000000000000000000815261ffff85166004820152602401610ac9565b600080805b8351821015613f2e576001909101906000613e6d8584613ff2565b905060028301925060028161ffff161015613eb7576040517f04eb6e0c00000000000000000000000000000000000000000000000000000000815260048101849052602401610ac9565b6000613ec38685613f72565b90508060ff1660ff03613f02576040517fd3d3d9bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160ff82161b8316613f1f5760019485019460ff82161b831792505b5061ffff169190910190613e52565b83518214613f6b576040517f04eb6e0c00000000000000000000000000000000000000000000000000000000815260048101839052602401610ac9565b5050919050565b6000613f7f826001615203565b83511015613fe9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e6473000000000000000000000000006044820152606401610ac9565b50016001015190565b6000613fff826002615203565b83511015614069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610ac9565b50016002015190565b60608161408081601f615203565b10156140e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610ac9565b6140f28284615203565b8451101561415c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610ac9565b60608215801561417b57604051915060008252602082016040526141e3565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156141b457805183526020928301920161419c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b8160ff1660ff03614229576040517fd3d3d9bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061423683600161574c565b905060005b8451811015611e6757600085828151811061425857614258614b4e565b602002602001015190508060ff168360ff16036142cd5786828151811061428157614281614b4e565b60200260200101518460405160200161429b9291906155e1565b6040516020818303038152906040528783815181106142bc576142bc614b4e565b602002602001018190525050611e67565b8060ff1660000361431257828683815181106142eb576142eb614b4e565b602002602001019060ff16908160ff1681525050838783815181106142bc576142bc614b4e565b5060010161423b565b606083156143b15782516000036143aa5773ffffffffffffffffffffffffffffffffffffffff85163b6143aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ac9565b508161168f565b61168f8383614461565b60006fffffffffffffffffffffffffffffffff82111561445d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610ac9565b5090565b8151156144715781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac99190614a30565b82805482825590600052602060002090810192821561451f579160200282015b8281111561451f57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906144c5565b5061445d9291505b8082111561445d5760008155600101614527565b60006020828403121561454d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461141a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146116a857600080fd5b80356145aa8161457d565b919050565b63ffffffff811681146116a857600080fd5b80356145aa816145af565b600080604083850312156145df57600080fd5b82356145ea8161457d565b915060208301356145fa816145af565b809150509250929050565b815163ffffffff16815260208083015173ffffffffffffffffffffffffffffffffffffffff16908201526040810161066d565b6020810160038310614673577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060006060848603121561468e57600080fd5b83356146998161457d565b925060208401356146a98161457d565b929592945050506040919091013590565b60008083601f8401126146cc57600080fd5b50813567ffffffffffffffff8111156146e457600080fd5b6020830191508360208260051b85010111156124f257600080fd5b60008060006040848603121561471457600080fd5b833561471f8161457d565b9250602084013567ffffffffffffffff81111561473b57600080fd5b614747868287016146ba565b9497909650939450505050565b6000806020838503121561476757600080fd5b823567ffffffffffffffff81111561477e57600080fd5b61478a858286016146ba565b90969095509350505050565b60008151808452602080850194506020840160005b838110156147dd57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016147ab565b509495945050505050565b67ffffffffffffffff815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301526000608082015160c0608085015261483860c0850182614796565b905060a083015184820360a08601526148518282614796565b95945050505050565b60208152600061141a60208301846147e8565b80151581146116a857600080fd5b80356145aa8161486d565b6000806000806060858703121561489c57600080fd5b843567ffffffffffffffff808211156148b457600080fd5b9086019060e082890312156148c857600080fd5b909450602086013590808211156148de57600080fd5b818701915087601f8301126148f257600080fd5b81358181111561490157600080fd5b88602082850101111561491357600080fd5b60208301955080945050505061492b6040860161487b565b905092959194509250565b60005b83811015614951578181015183820152602001614939565b50506000910152565b60008151808452614972816020860160208601614936565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b825181526020808401519082015260606040820152600061168f606083018461495a565b6000602082840312156149da57600080fd5b813561141a816145af565b6000806000606084860312156149fa57600080fd5b8335614a05816145af565b92506020840135614a158161457d565b91506040840135614a25816145af565b809150509250925092565b60208152600061141a602083018461495a565b60008060208385031215614a5657600080fd5b823567ffffffffffffffff80821115614a6e57600080fd5b818501915085601f830112614a8257600080fd5b813581811115614a9157600080fd5b866020606083028501011115614aa657600080fd5b60209290920196919550909350505050565b600060208284031215614aca57600080fd5b5035919050565b81518152602080830151908201526040810161066d565b600060208284031215614afa57600080fd5b813561141a8161457d565b60008060408385031215614b1857600080fd5b8235614b238161457d565b946020939093013593505050565b600060208284031215614b4357600080fd5b815161141a8161457d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112614bb157600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614bf057600080fd5b83018035915067ffffffffffffffff821115614c0b57600080fd5b6020019150368190038213156124f257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614c7257614c72614c20565b60405290565b60405160e0810167ffffffffffffffff81118282101715614c7257614c72614c20565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614ce257614ce2614c20565b604052919050565b600060408284031215614cfc57600080fd5b6040516040810181811067ffffffffffffffff82111715614d1f57614d1f614c20565b6040528235614d2d816145af565b81526020830135614d3d8161457d565b60208201529392505050565b803567ffffffffffffffff811681146145aa57600080fd5b803560ff811681146145aa57600080fd5b600082601f830112614d8357600080fd5b8135602067ffffffffffffffff821115614d9f57614d9f614c20565b8160051b614dae828201614c9b565b9283528481018201928281019087851115614dc857600080fd5b83870192505b84831015613a4e578235614de18161457d565b82529183019190830190614dce565b600060c08284031215614e0257600080fd5b614e0a614c4f565b9050614e1582614d49565b8152614e2360208301614d61565b6020820152614e3460408301614d61565b6040820152614e4560608301614d61565b6060820152608082013567ffffffffffffffff80821115614e6557600080fd5b614e7185838601614d72565b608084015260a0840135915080821115614e8a57600080fd5b50614e9784828501614d72565b60a08301525092915050565b600060208284031215614eb557600080fd5b813567ffffffffffffffff811115614ecc57600080fd5b61168f84828501614df0565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112614bb157600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112614bb157600080fd5b600060208284031215614f5257600080fd5b61141a82614d61565b600060208284031215614f6d57600080fd5b61141a82614d49565b600061066d3683614df0565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614fb757600080fd5b830160208101925035905067ffffffffffffffff811115614fd757600080fd5b8060051b36038213156124f257600080fd5b8183526000602080850194508260005b858110156147dd57813561500c8161457d565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614ff9565b60208082528181018390526000906040808401600586901b8501820187855b888110156151c6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18c36030181126150b557600080fd5b8b0180356150c2816145af565b63ffffffff16855280880135368290037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff410181126150ff57600080fd5b8589018890520167ffffffffffffffff61511882614d49565b1687860152615128888201614d61565b606060ff8083168289015261513e8a8501614d61565b92506080818416818a0152615154838601614d61565b935060a09250818416838a015261516d81860186614f82565b60c08b81015294509150615188905061010089018483614fe9565b92505061519781840184614f82565b93509050838783030160e08801526151b0828483614fe9565b978a019796505050928701925050600101615053565b509098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561066d5761066d6151d4565b8135615221816145af565b63ffffffff811690508154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000821617835560208401356152618161457d565b77ffffffffffffffffffffffffffffffffffffffff000000008160201b16837fffffffffffffffff0000000000000000000000000000000000000000000000008416171784555050505050565b6020808252818101839052600090604080840186845b8781101561532e5781356152d7816145af565b63ffffffff908116845282860135906152ef826145af565b1683860152818401356153018161457d565b73ffffffffffffffffffffffffffffffffffffffff168385015260609283019291909101906001016152c4565b5090979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416815263ffffffff831660208201526080810161168f6040830184805163ffffffff16825260209081015173ffffffffffffffffffffffffffffffffffffffff16910152565b73ffffffffffffffffffffffffffffffffffffffff8416815263ffffffff8316602082015260606040820152600061485160608301846147e8565b60ff828116828216039081111561066d5761066d6151d4565b600060ff831680615425577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152826040820152608060608201526000615475608083018461495a565b9695505050505050565b60006020828403121561549157600080fd5b5051919050565b600082601f8301126154a957600080fd5b813567ffffffffffffffff8111156154c3576154c3614c20565b6154f460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614c9b565b81815284602083860101111561550957600080fd5b816020850160208301376000918101602001919091529392505050565b600060e0823603121561553857600080fd5b615540614c78565b61554983614d49565b8152615557602084016145c1565b60208201526155686040840161459f565b6040820152615579606084016145c1565b60608201526080830135608082015260a083013560a082015260c083013567ffffffffffffffff8111156155ac57600080fd5b6155b836828601615498565b60c08301525092915050565b6000602082840312156155d657600080fd5b815161141a8161486d565b600083516155f3818460208801614936565b835190830190615607818360208801614936565b01949350505050565b6060815260006156236060830186614796565b602083820360208501526156378287614796565b84810360408601528551808252602080880194509091019060005b818110156151c657845183529383019391830191600101615652565b6000808585111561567e57600080fd5b8386111561568b57600080fd5b5050820193919092039150565b7fffff00000000000000000000000000000000000000000000000000000000000081358181169160028510156156d85780818660020360031b1b83161692505b505092915050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156156d85760019490940360031b84901b1690921692915050565b8281526000825161573e816020850160208701614936565b919091016020019392505050565b60ff818116838216019081111561066d5761066d6151d4565b6040815263ffffffff83511660408201526000602084015160a0606084015261579160e084018261495a565b90506040850151608084015267ffffffffffffffff60608601511660a084015273ffffffffffffffffffffffffffffffffffffffff60808601511660c08401528281036020840152614851818561495a565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000615475608083018461495a565b60008251614bb1818460208701614936565b60008451615852818460208901614936565b8201838582376000930192835250909392505050565b8035602083101561066d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b16601784015250615985601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea2646970667358221220364ab0e9d990eb52427657c0d4fcddf16a239e345810578b222d8a6ea656add664736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasForFeeCap";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "DVN_InvalidDVNIdx";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "DVN_InvalidDVNOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_CannotWithdrawAltToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_NotTreasury";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "configType";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_InvalidConfigType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidLegacyType1Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidLegacyType2Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "workerId";
            readonly type: "uint8";
        }];
        readonly name: "LZ_ULN_InvalidWorkerId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "LZ_ULN_InvalidWorkerOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "LZ_ULN_UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "requiredDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "DVNFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lzToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "LzTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "TreasuryNativeFeeCapSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "setTreasuryNativeFeeCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SendUln302Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): SendUln302;
}

type index$4_ReceiveUln302__factory = ReceiveUln302__factory;
declare const index$4_ReceiveUln302__factory: typeof ReceiveUln302__factory;
type index$4_SendUln302__factory = SendUln302__factory;
declare const index$4_SendUln302__factory: typeof SendUln302__factory;
declare namespace index$4 {
  export { index$4_ReceiveUln302__factory as ReceiveUln302__factory, index$4_SendUln302__factory as SendUln302__factory, index$5 as receiveUln302ViewSol };
}

declare class ReceiveUlnBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidPacketHeader";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidPacketVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Verifying";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }];
        readonly name: "assertHeader";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "submitted";
            readonly type: "bool";
        }, {
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUlnBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveUlnBase;
}

declare class SendUlnBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "requiredDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "DVNFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): SendUlnBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SendUlnBase;
}

declare class UlnBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ULN_Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_ULN_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): UlnBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): UlnBase;
}

type index$3_ReceiveUlnBase__factory = ReceiveUlnBase__factory;
declare const index$3_ReceiveUlnBase__factory: typeof ReceiveUlnBase__factory;
type index$3_SendUlnBase__factory = SendUlnBase__factory;
declare const index$3_SendUlnBase__factory: typeof SendUlnBase__factory;
type index$3_UlnBase__factory = UlnBase__factory;
declare const index$3_UlnBase__factory: typeof UlnBase__factory;
declare namespace index$3 {
  export { index$3_ReceiveUlnBase__factory as ReceiveUlnBase__factory, index$3_SendUlnBase__factory as SendUlnBase__factory, index$3_UlnBase__factory as UlnBase__factory, index$e as dvn, index$c as interfaces, index$b as libs, index$n as lzExecutorSol, index$6 as uln301, index$4 as uln302 };
}

type ProxyAdminConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ProxyAdmin__factory extends ContractFactory {
    constructor(...args: ProxyAdminConstructorParams);
    deploy(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ProxyAdmin>;
    getDeployTransaction(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ProxyAdmin;
    connect(signer: Signer): ProxyAdmin__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506040516109e53803806109e583398101604081905261002f91610097565b61003833610047565b61004181610047565b506100c7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a957600080fd5b81516001600160a01b03811681146100c057600080fd5b9392505050565b61090f806100d66000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461012b57806399a88ec41461013e578063f2fde38b1461015e578063f3b7dead1461017e57600080fd5b8063204e1c7a14610080578063715018a6146100c95780637eff275e146100e05780638da5cb5b14610100575b600080fd5b34801561008c57600080fd5b506100a061009b3660046106b1565b61019e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100d557600080fd5b506100de610282565b005b3480156100ec57600080fd5b506100de6100fb3660046106d5565b610296565b34801561010c57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166100a0565b6100de61013936600461073d565b610324565b34801561014a57600080fd5b506100de6101593660046106d5565b6103b9565b34801561016a57600080fd5b506100de6101793660046106b1565b610415565b34801561018a57600080fd5b506100a06101993660046106b1565b6104d1565b60008060008373ffffffffffffffffffffffffffffffffffffffff166040516101ea907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d8060008114610225576040519150601f19603f3d011682016040523d82523d6000602084013e61022a565b606091505b509150915081610266576040517f6bce18d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080602001905181019061027a9190610831565b949350505050565b61028a610599565b610294600061061a565b565b61029e610599565b6040517f8f28397000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690638f283970906024015b600060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b505050505050565b61032c610599565b6040517f4f1ef28600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690634f1ef286903490610382908690869060040161084e565b6000604051808303818588803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b5050505050505050565b6103c1610599565b6040517f3659cfe600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690633659cfe6906024016102ee565b61041d610599565b73ffffffffffffffffffffffffffffffffffffffff81166104c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104ce8161061a565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1660405161051d907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d8060008114610558576040519150601f19603f3d011682016040523d82523d6000602084013e61055d565b606091505b509150915081610266576040517f1545a42500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104bc565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff811681146104ce57600080fd5b6000602082840312156106c357600080fd5b81356106ce8161068f565b9392505050565b600080604083850312156106e857600080fd5b82356106f38161068f565b915060208301356107038161068f565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561075257600080fd5b833561075d8161068f565b9250602084013561076d8161068f565b9150604084013567ffffffffffffffff8082111561078a57600080fd5b818601915086601f83011261079e57600080fd5b8135818111156107b0576107b061070e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156107f6576107f661070e565b8160405282815289602084870101111561080f57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561084357600080fd5b81516106ce8161068f565b73ffffffffffffffffffffffffffffffffffffffff831681526000602060406020840152835180604085015260005b818110156108995785810183015185820160600152820161087d565b5060006060828601015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010192505050939250505056fea2646970667358221220bcc00f0dbe515bb8f4bfec9b831d173383f10d30791c438f0b188c4765a3865f64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "initialOwner";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AdminCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ImplementationCallFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeProxyAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly name: "getProxyAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly name: "getProxyImplementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "upgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ProxyAdminInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ProxyAdmin;
}

type TransparentUpgradeableProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TransparentUpgradeableProxy__factory extends ContractFactory {
    constructor(...args: TransparentUpgradeableProxyConstructorParams);
    deploy(_logic: PromiseOrValue<string>, admin_: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TransparentUpgradeableProxy>;
    getDeployTransaction(_logic: PromiseOrValue<string>, admin_: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TransparentUpgradeableProxy;
    connect(signer: Signer): TransparentUpgradeableProxy__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_logic";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AdminAccessDenied";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TransparentUpgradeableProxyInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TransparentUpgradeableProxy;
}

type index$2_ProxyAdmin__factory = ProxyAdmin__factory;
declare const index$2_ProxyAdmin__factory: typeof ProxyAdmin__factory;
type index$2_TransparentUpgradeableProxy__factory = TransparentUpgradeableProxy__factory;
declare const index$2_TransparentUpgradeableProxy__factory: typeof TransparentUpgradeableProxy__factory;
declare namespace index$2 {
  export { index$2_ProxyAdmin__factory as ProxyAdmin__factory, index$2_TransparentUpgradeableProxy__factory as TransparentUpgradeableProxy__factory };
}

declare class WorkerUpgradeable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WorkerUpgradeableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): WorkerUpgradeable;
}

type index$1_WorkerUpgradeable__factory = WorkerUpgradeable__factory;
declare const index$1_WorkerUpgradeable__factory: typeof WorkerUpgradeable__factory;
declare namespace index$1 {
  export { index$1_WorkerUpgradeable__factory as WorkerUpgradeable__factory, index$2 as proxy };
}

type EndpointV2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class EndpointV2__factory extends ContractFactory {
    constructor(...args: EndpointV2ConstructorParams);
    deploy(_eid: PromiseOrValue<BigNumberish>, _owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EndpointV2>;
    getDeployTransaction(_eid: PromiseOrValue<BigNumberish>, _owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EndpointV2;
    connect(signer: Signer): EndpointV2__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_owner";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_ComposeNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requiredNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredLzToken";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedLzToken";
            readonly type: "uint256";
        }];
        readonly name: "LZ_InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "LZ_InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidPayloadHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidReceiveLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PathNotInitializable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PathNotVerifiable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_PayloadHashNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SendReentrancy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ZeroLzTokenFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly name: "DelegateSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketBurnt";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketNilified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }];
        readonly name: "delegates";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzComposeAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "nilify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "recoverToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): EndpointV2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): EndpointV2;
}

type EndpointV2AltConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class EndpointV2Alt__factory extends ContractFactory {
    constructor(...args: EndpointV2AltConstructorParams);
    deploy(_eid: PromiseOrValue<BigNumberish>, _owner: PromiseOrValue<string>, _altToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EndpointV2Alt>;
    getDeployTransaction(_eid: PromiseOrValue<BigNumberish>, _owner: PromiseOrValue<string>, _altToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EndpointV2Alt;
    connect(signer: Signer): EndpointV2Alt__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_altToken";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_ComposeNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requiredNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredLzToken";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedLzToken";
            readonly type: "uint256";
        }];
        readonly name: "LZ_InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidArgument";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "LZ_InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidPayloadHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidReceiveLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyAltToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PathNotInitializable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PathNotVerifiable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_PayloadHashNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SendReentrancy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_ZeroLzTokenFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly name: "DelegateSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketBurnt";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketNilified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }];
        readonly name: "delegates";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzComposeAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "nilify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "recoverToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "setDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): EndpointV2AltInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): EndpointV2Alt;
}

type EndpointV2ViewConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class EndpointV2View__factory extends ContractFactory {
    constructor(...args: EndpointV2ViewConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EndpointV2View>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EndpointV2View;
    connect(signer: Signer): EndpointV2View__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610d32806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063861e1ca51161005b578063861e1ca514610127578063c4d66de81461014a578063cb5026b91461015f578063e1e3a7df1461016757600080fd5b80632baf0be7146100825780634b4b2efb146100bc5780635e280f11146100dc575b600080fd5b6100a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6040519081526020015b60405180910390f35b6100cf6100ca366004610bc1565b61017a565b6040516100b39190610bf5565b6000546101029062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b3565b61013a610135366004610bc1565b610487565b60405190151581526020016100b3565b61015d610158366004610c36565b610577565b005b6100a9600081565b61013a610175366004610c58565b6107b6565b600080548351602085015160408087015190517fc9fc7bcd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff16606482015283926201000090049091169063c9fc7bcd90608401602060405180830381865afa158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610ca4565b9050801580156103235750600054845160208601516040517f5b17bb7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90931660248201526044810191909152620100009092041690635b17bb7090606401602060405180830381865afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190610cbd565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b15610332576003915050610481565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811480159061042e5750600054845160208601516040517fa0dd43fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9093166024820152604481019190915262010000909204169063a0dd43fc90606401602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190610cbd565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b1561043d576002915050610481565b801580159061046c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b1561047b576001915050610481565b60009150505b92915050565b60008054604080517f861e1ca5000000000000000000000000000000000000000000000000000000008152855163ffffffff166004820152602086015160248201529085015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8481166064830152620100009092049091169063861e1ca590608401602060405180830381865afa925050508015610564575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261056191810190610cda565b60015b61057057506000610481565b9050610481565b60006105a17fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166105fa5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561061c565b3373ffffffffffffffffffffffffffffffffffffffff82161461061c57600080fd5b600054610100900460ff161580801561063c5750600054600160ff909116105b806106565750303b158015610656575060005460ff166001145b6106e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561074557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61074e8361095e565b80156107b157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000805485516040517f9d7f977500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90921660248201528582166044820152620100009092041690639d7f977590606401602060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190610cda565b61087357506000610956565b600054604080517fc9a54a99000000000000000000000000000000000000000000000000000000008152875163ffffffff166004820152602088015160248201529087015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8681166064830152620100009092049091169063c9a54a9990608401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190610cda565b61094557506000610956565b8161095257506000610956565b5060015b949350505050565b600054610100900460ff166109f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106de565b6109fe81610a01565b50565b600054610100900460ff16610a98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106de565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b67ffffffffffffffff811681146109fe57600080fd5b600060608284031215610b0d57600080fd5b6040516060810181811067ffffffffffffffff82111715610b57577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052905080823563ffffffff81168114610b7157600080fd5b8152602083810135908201526040830135610b8b81610ae5565b6040919091015292915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bbc57600080fd5b919050565b60008060808385031215610bd457600080fd5b610bde8484610afb565b9150610bec60608401610b98565b90509250929050565b6020810160048310610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208284031215610c4857600080fd5b610c5182610b98565b9392505050565b60008060008060c08587031215610c6e57600080fd5b610c788686610afb565b9350610c8660608601610b98565b9250610c9460808601610b98565b9396929550929360a00135925050565b600060208284031215610cb657600080fd5b5051919050565b600060208284031215610ccf57600080fd5b8151610c5181610ae5565b600060208284031215610cec57600080fd5b81518015158114610c5157600080fdfea2646970667358221220163f262373e2299f486fa9bb3ba79263b6ce79b9d48696b15a23967fc426e57064736f6c63430008160033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): EndpointV2ViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): EndpointV2View;
}

type EndpointV2ViewUpgradeableConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class EndpointV2ViewUpgradeable__factory extends ContractFactory {
    constructor(...args: EndpointV2ViewUpgradeableConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EndpointV2ViewUpgradeable>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EndpointV2ViewUpgradeable;
    connect(signer: Signer): EndpointV2ViewUpgradeable__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610934806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063861e1ca511610050578063861e1ca51461011c578063cb5026b91461013f578063e1e3a7df1461014757600080fd5b80632baf0be7146100775780634b4b2efb146100b15780635e280f11146100d1575b600080fd5b61009e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6040519081526020015b60405180910390f35b6100c46100bf3660046107de565b61015a565b6040516100a89190610812565b6000546100f79062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a8565b61012f61012a3660046107de565b610467565b60405190151581526020016100a8565b61009e600081565b61012f610155366004610853565b610557565b600080548351602085015160408087015190517fc9fc7bcd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff16606482015283926201000090049091169063c9fc7bcd90608401602060405180830381865afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610227919061089f565b9050801580156103035750600054845160208601516040517f5b17bb7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90931660248201526044810191909152620100009092041690635b17bb7090606401602060405180830381865afa1580156102c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e791906108b8565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b15610312576003915050610461565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811480159061040e5750600054845160208601516040517fa0dd43fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff9093166024820152604481019190915262010000909204169063a0dd43fc90606401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f291906108b8565b67ffffffffffffffff16846040015167ffffffffffffffff1611155b1561041d576002915050610461565b801580159061044c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b1561045b576001915050610461565b60009150505b92915050565b60008054604080517f861e1ca5000000000000000000000000000000000000000000000000000000008152855163ffffffff166004820152602086015160248201529085015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8481166064830152620100009092049091169063861e1ca590608401602060405180830381865afa925050508015610544575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610541918101906108dc565b60015b61055057506000610461565b9050610461565b6000805485516040517f9d7f977500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015263ffffffff90921660248201528582166044820152620100009092041690639d7f977590606401602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906108dc565b610614575060006106f7565b600054604080517fc9a54a99000000000000000000000000000000000000000000000000000000008152875163ffffffff166004820152602088015160248201529087015167ffffffffffffffff16604482015273ffffffffffffffffffffffffffffffffffffffff8681166064830152620100009092049091169063c9a54a9990608401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da91906108dc565b6106e6575060006106f7565b816106f3575060006106f7565b5060015b949350505050565b67ffffffffffffffff8116811461071557600080fd5b50565b60006060828403121561072a57600080fd5b6040516060810181811067ffffffffffffffff82111715610774577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052905080823563ffffffff8116811461078e57600080fd5b81526020838101359082015260408301356107a8816106ff565b6040919091015292915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107d957600080fd5b919050565b600080608083850312156107f157600080fd5b6107fb8484610718565b9150610809606084016107b5565b90509250929050565b602081016004831061084d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060008060c0858703121561086957600080fd5b6108738686610718565b9350610881606086016107b5565b925061088f608086016107b5565b9396929550929360a00135925050565b6000602082840312156108b157600080fd5b5051919050565b6000602082840312156108ca57600080fd5b81516108d5816106ff565b9392505050565b6000602082840312156108ee57600080fd5b815180151581146108d557600080fdfea26469706673582212200553ca02006cd1456c49ab0150c81e17159b14eda7a29b20c32e90249d37606864736f6c63430008160033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "initializable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): EndpointV2ViewUpgradeableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): EndpointV2ViewUpgradeable;
}

type ExecutorFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ExecutorFeeLib__factory extends ContractFactory {
    constructor(...args: ExecutorFeeLibConstructorParams);
    deploy(_nativeDecimalsRate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ExecutorFeeLib>;
    getDeployTransaction(_nativeDecimalsRate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ExecutorFeeLib;
    connect(signer: Signer): ExecutorFeeLib__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b506040516118a23803806118a283398101604081905261002f91610090565b61003833610040565b6080526100a9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a257600080fd5b5051919050565b6080516117de6100c46000396000610ad101526117de6000f3fe6080604052600436106100695760003560e01c8063715018a611610043578063715018a6146100ea5780638da5cb5b146100ff578063f2fde38b1461013457600080fd5b806301e3366714610075578063434ee01614610097578063566ef762146100ca57600080fd5b3661007057005b600080fd5b34801561008157600080fd5b506100956100903660046112fc565b610154565b005b3480156100a357600080fd5b506100b76100b2366004611350565b61016c565b6040519081526020015b60405180910390f35b3480156100d657600080fd5b506100b76100e5366004611350565b61039b565b3480156100f657600080fd5b50610095610493565b34801561010b57600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c1565b34801561014057600080fd5b5061009561014f3660046113e2565b6104a7565b61015c61055e565b6101678383836105df565b505050565b600061017b6020850185611404565b67ffffffffffffffff166000036101dc5761019c604086016020870161142e565b6040517fc3baa0b700000000000000000000000000000000000000000000000000000000815263ffffffff90911660048201526024015b60405180910390fd5b6000806102386102046101f560408a0160208b0161142e565b61753063ffffffff9091161090565b6102116020890189611404565b61022160a08a0160808b01611404565b61023160808b0160608c01611472565b898961060f565b9092509050600080808061024f60208c018c6113e2565b73ffffffffffffffffffffffffffffffffffffffff166388a4124c61027a60408e0160208f0161142e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015260608e0135602482015260448101889052606401608060405180830381865afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610309919061148f565b92965090945092509050600061032560408c0160208d016114e4565b61ffff16156103435761033e60408c0160208d016114e4565b610353565b61035360a08d0160808e016114e4565b905061037385828d604001602081019061036d9190611472565b85610a5e565b975061038187858584610b3f565b61038b9089611537565b9c9b505050505050505050505050565b60006103aa6020850185611404565b67ffffffffffffffff166000036103cb5761019c604086016020870161142e565b6000806103e46102046101f560408a0160208b0161142e565b909250905060008080806103fb60208c018c6113e2565b73ffffffffffffffffffffffffffffffffffffffff1663c1723a1d61042660408e0160208f0161142e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015260608e01356024820152604481018890526064016080604051808303816000875af11580156102e5573d6000803e3d6000fd5b61049b61055e565b6104a56000610ba7565b565b6104af61055e565b73ffffffffffffffffffffffffffffffffffffffff8116610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101d3565b61055b81610ba7565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101d3565b73ffffffffffffffffffffffffffffffffffffffff8316610604576101678282610c1c565b610167838383610d22565b60008082810361064a576040517e575ea100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5067ffffffffffffffff861660008089815b868410156109475760003681806106748c8c8a610d90565b9a50919550935091508790507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601610759576000806106b78585610de6565b915091508780156106da57506000816fffffffffffffffffffffffffffffffff16115b15610716576040517f052e551500000000000000000000000000000000000000000000000000000000815260ff871660048201526024016101d3565b6107326fffffffffffffffffffffffffffffffff82168d611537565b9b506107506fffffffffffffffffffffffffffffffff831688611537565b9650505061093e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff8516016107b657600061078f8484610e64565b5090506107ae6fffffffffffffffffffffffffffffffff82168c611537565b9a505061093e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff8516016108d457851561081d576040517f052e551500000000000000000000000000000000000000000000000000000000815260ff851660048201526024016101d3565b60008061082a8585610ebb565b9250925050816fffffffffffffffffffffffffffffffff1660000361087b576040517fa169d0e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108976fffffffffffffffffffffffffffffffff82168d611537565b9b508f67ffffffffffffffff16826108af9190611550565b6108cb906fffffffffffffffffffffffffffffffff168c611537565b9a50505061093e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff851601610907576001965061093e565b6040517f052e551500000000000000000000000000000000000000000000000000000000815260ff851660048201526024016101d3565b5050505061065c565b838714610983576040517f990776ea000000000000000000000000000000000000000000000000000000008152600481018590526024016101d3565b886fffffffffffffffffffffffffffffffff168611156109e9576040517e84ce02000000000000000000000000000000000000000000000000000000008152600481018790526fffffffffffffffffffffffffffffffff8a1660248201526044016101d3565b80600003610a23576040517fe5eb8f3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2d8186611537565b94508215610a4f576064610a42866066611580565b610a4c9190611597565b94505b50505050965096945050505050565b600080612710610a7261ffff871688611580565b610a7c9190611597565b90506fffffffffffffffffffffffffffffffff83161580610aad57506fffffffffffffffffffffffffffffffff8416155b15610ab9579050610b37565b600086846fffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff16610b0d9190611580565b610b179190611597565b610b219190611537565b9050818111610b305781610b32565b805b925050505b949350505050565b60008415610b37576127108261ffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1688610b809190611580565b610b8a9190611597565b610b949190611580565b610b9e9190611597565b95945050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610c69576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610cc3576040519150601f19603f3d011682016040523d82523d6000602084013e610cc8565b606091505b5050905080610167576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016101d3565b73ffffffffffffffffffffffffffffffffffffffff8216610d6f576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016773ffffffffffffffffffffffffffffffffffffffff84168383610f48565b600036816001840181610da4888884610fd5565b600292909201919050610db8888884610ffc565b94506001820161ffff82168301610dd181838b8d6115d2565b979b909a50969850505061ffff160193505050565b60008060108314801590610dfb575060208314155b15610e32576040517f4796aee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e3e84846000611021565b915060208314610e4f576000610e5b565b610e5b84846010611021565b90509250929050565b60008060308314610ea1576040517fc3a1858e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ead84846000611021565b9150610e5b84846010611048565b6000808060128414801590610ed1575060228414155b15610f08576040517f8b4aa70b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f1485856000610fd5565b9250610f2285856002611021565b915060228414610f33576000610f3f565b610f3f85856012611021565b90509250925092565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610167908490611063565b600060028201610fe7818486886115d2565b610ff0916115fc565b60f01c95945050505050565b600083838381811061101057611010611644565b919091013560f81c95945050505050565b600060108201611033818486886115d2565b61103c91611673565b60801c95945050505050565b60006020820161105a818486886115d2565b610b9e916116b9565b60006110c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111729092919063ffffffff16565b90508051600014806110e65750808060200190518101906110e691906116f5565b610167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101d3565b6060610b378484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111a6919061173b565b60006040518083038185875af1925050503d80600081146111e3576040519150601f19603f3d011682016040523d82523d6000602084013e6111e8565b606091505b5091509150610b32878383876060831561128a5782516000036112835773ffffffffffffffffffffffffffffffffffffffff85163b611283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101d3565b5081610b37565b610b37838381511561129f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d39190611757565b803573ffffffffffffffffffffffffffffffffffffffff811681146112f757600080fd5b919050565b60008060006060848603121561131157600080fd5b61131a846112d3565b9250611328602085016112d3565b9150604084013590509250925092565b600060a0828403121561134a57600080fd5b50919050565b600080600080610160858703121561136757600080fd5b6113718686611338565b93506113808660a08701611338565b925061014085013567ffffffffffffffff8082111561139e57600080fd5b818701915087601f8301126113b257600080fd5b8135818111156113c157600080fd5b8860208285010111156113d357600080fd5b95989497505060200194505050565b6000602082840312156113f457600080fd5b6113fd826112d3565b9392505050565b60006020828403121561141657600080fd5b813567ffffffffffffffff811681146113fd57600080fd5b60006020828403121561144057600080fd5b813563ffffffff811681146113fd57600080fd5b6fffffffffffffffffffffffffffffffff8116811461055b57600080fd5b60006020828403121561148457600080fd5b81356113fd81611454565b600080600080608085870312156114a557600080fd5b8451935060208501516114b781611454565b60408601519093506114c881611454565b60608601519092506114d981611454565b939692955090935050565b6000602082840312156114f657600080fd5b813561ffff811681146113fd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561154a5761154a611508565b92915050565b6fffffffffffffffffffffffffffffffff81811683821601908082111561157957611579611508565b5092915050565b808202811582820484141761154a5761154a611508565b6000826115cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600080858511156115e257600080fd5b838611156115ef57600080fd5b5050820193919092039150565b7fffff000000000000000000000000000000000000000000000000000000000000813581811691600285101561163c5780818660020360031b1b83161692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000813581811691601085101561163c5760109490940360031b84901b1690921692915050565b8035602083101561154a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b60006020828403121561170757600080fd5b815180151581146113fd57600080fd5b60005b8381101561173257818101518382015260200161171a565b50506000910152565b6000825161174d818460208701611717565b9190910192915050565b6020815260008251806020840152611776816040850160208701611717565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220eafb0c867f7c9a04f07568a27ffceccf0caccb0a5b31fef3cc0797ed446a7e2164736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeDecimalsRate";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "Executor_EidNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "Executor_InvalidExecutorOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_InvalidLzComposeOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_InvalidLzReceiveOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_InvalidNativeDropOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "Executor_NativeAmountExceedsCap";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_NoOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "Executor_UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_ZeroLzComposeGasProvided";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Executor_ZeroLzReceiveGasProvided";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "lzReceiveBaseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeCap";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "lzComposeBaseGas";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): ExecutorFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ExecutorFeeLib;
}

declare class MessageLibBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }];
    static createInterface(): MessageLibBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessageLibBase;
}

declare class MessageLibManager__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessageLibManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessageLibManager;
}

declare class MessagingChannel__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "LZ_InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_PayloadHashNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketBurnt";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketNilified";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "EMPTY_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NIL_PAYLOAD_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "nilify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessagingChannelInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingChannel;
}

declare class MessagingComposer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "LZ_ComposeNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzComposeAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessagingComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingComposer;
}

declare class MessagingContext__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MessagingContextInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingContext;
}

type PriceFeedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PriceFeed__factory extends ContractFactory {
    constructor(...args: PriceFeedConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PriceFeed>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PriceFeed;
    connect(signer: Signer): PriceFeed__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "provided";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }];
        readonly name: "LZ_PriceFeed_InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "l2Eid";
            readonly type: "uint32";
        }];
        readonly name: "LZ_PriceFeed_NotAnOPStack";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_PriceFeed_OnlyPriceUpdater";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ARBITRUM_COMPRESSION_PERCENT";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "arbitrumPriceExt";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gasPerL2Tx";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerL1CallDataByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "eidToModelType";
        readonly outputs: readonly [{
            readonly internalType: "enum ModelType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByChain";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByEid";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "price";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "price";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPriceRatioDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceUpdater";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeTokenPriceUSD";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "updater";
            readonly type: "address";
        }];
        readonly name: "priceUpdater";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_compressionPercent";
            readonly type: "uint128";
        }];
        readonly name: "setArbitrumCompressionPercent";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "enum ModelType";
                readonly name: "modelType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct SetEidToModelTypeParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setEidToModelType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly name: "setEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_nativeTokenPriceUSD";
            readonly type: "uint128";
        }];
        readonly name: "setNativeTokenPriceUSD";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint128";
                    readonly name: "priceRatio";
                    readonly type: "uint128";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "gasPriceInUnit";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.Price";
                readonly name: "price";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.UpdatePrice[]";
            readonly name: "_price";
            readonly type: "tuple[]";
        }];
        readonly name: "setPrice";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint128";
                    readonly name: "priceRatio";
                    readonly type: "uint128";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "gasPriceInUnit";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.Price";
                readonly name: "price";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "gasPerL2Tx";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerL1CallDataByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt";
                readonly name: "extend";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.UpdatePriceExt";
            readonly name: "_update";
            readonly type: "tuple";
        }];
        readonly name: "setPriceForArbitrum";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_denominator";
            readonly type: "uint128";
        }];
        readonly name: "setPriceRatioDenominator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_addr";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPriceUpdater";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PriceFeedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PriceFeed;
}

declare class ReceiveLibBaseE2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ReceiveLibBaseE2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveLibBaseE2;
}

declare class SendLibBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "TreasuryNativeFeeCapSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "setTreasuryNativeFeeCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SendLibBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SendLibBase;
}

declare class SendLibBaseE2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_CannotWithdrawAltToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "LZ_MessageLib_InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_NotTreasury";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LZ_MessageLib_ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lzToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "LzTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "TreasuryNativeFeeCapSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newTreasuryNativeFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "setTreasuryNativeFeeCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SendLibBaseE2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): SendLibBaseE2;
}

type TreasuryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Treasury__factory extends ContractFactory {
    constructor(...args: TreasuryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Treasury>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Treasury;
    connect(signer: Signer): Treasury__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ddb8061007e6000396000f3fe6080604052600436106100dd5760003560e01c80638ee643a61161007f578063bf6e753611610059578063bf6e753614610237578063d424422114610257578063d51c548614610277578063f2fde38b1461028557600080fd5b80638ee643a6146101dd57806390953238146101fd57806396a141a01461022157600080fd5b80633972d46c116100bb5780633972d46c14610153578063715018a6146101735780637e8a0699146101885780638da5cb5b146101a857600080fd5b806301d9c2cb146100e257806301e336671461011157806301f1f6e814610133575b600080fd5b3480156100ee57600080fd5b506003546100fc9060ff1681565b60405190151581526020015b60405180910390f35b34801561011d57600080fd5b5061013161012c366004610b28565b6102a5565b005b34801561013f57600080fd5b5061013161014e366004610b77565b6102bd565b34801561015f57600080fd5b5061013161016e366004610b9b565b6102f6565b34801561017f57600080fd5b50610131610303565b34801561019457600080fd5b506101316101a3366004610bb4565b610317565b3480156101b457600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610108565b3480156101e957600080fd5b506101316101f8366004610b9b565b6103b5565b34801561020957600080fd5b5061021360025481565b604051908152602001610108565b34801561022d57600080fd5b5061021360015481565b34801561024357600080fd5b50610131610252366004610b28565b6103c2565b34801561026357600080fd5b50610213610272366004610c05565b610457565b610213610272366004610c05565b34801561029157600080fd5b506101316102a0366004610c61565b61046e565b6102ad61052a565b6102b88383836105ab565b505050565b6102c561052a565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6102fe61052a565b600155565b61030b61052a565b61031560006105db565b565b61031f61052a565b6040517f200175f700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063200175f790606401600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b5050505050505050565b6103bd61052a565b600255565b6103ca61052a565b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063fd9be52290604401600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b50505050505050565b60006104638383610650565b90505b949350505050565b61047661052a565b73ffffffffffffffffffffffffffffffffffffffff811661051e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610527816105db565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b73ffffffffffffffffffffffffffffffffffffffff83166105d0576102b882826106c1565b6102b88383836107c7565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000811561069d5760035460ff16610694576040517f1cf849b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506002546106bb565b612710600154846106ae9190610c7e565b6106b89190610cbc565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff821661070e576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610768576040519150601f19603f3d011682016040523d82523d6000602084013e61076d565b606091505b50509050806102b8576040517f465bc83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610515565b73ffffffffffffffffffffffffffffffffffffffff8216610814576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526102b892908616918591859185918591906000906108e89084908490610995565b90508051600014806109095750808060200190518101906109099190610cf7565b6102b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610515565b60606104668484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109c99190610d38565b60006040518083038185875af1925050503d8060008114610a06576040519150601f19603f3d011682016040523d82523d6000602084013e610a0b565b606091505b5091509150610a1c87838387610a27565b979650505050505050565b60608315610abd578251600003610ab65773ffffffffffffffffffffffffffffffffffffffff85163b610ab6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610515565b5081610466565b6104668383815115610ad25781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105159190610d54565b73ffffffffffffffffffffffffffffffffffffffff8116811461052757600080fd5b600080600060608486031215610b3d57600080fd5b8335610b4881610b06565b92506020840135610b5881610b06565b929592945050506040919091013590565b801515811461052757600080fd5b600060208284031215610b8957600080fd5b8135610b9481610b69565b9392505050565b600060208284031215610bad57600080fd5b5035919050565b60008060008060808587031215610bca57600080fd5b8435610bd581610b06565b93506020850135610be581610b06565b92506040850135610bf581610b06565b9396929550929360600135925050565b60008060008060808587031215610c1b57600080fd5b8435610c2681610b06565b9350602085013563ffffffff81168114610c3f57600080fd5b9250604085013591506060850135610c5681610b69565b939692955090935050565b600060208284031215610c7357600080fd5b8135610b9481610b06565b80820281158282048414176106bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082610cf2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610d0957600080fd5b8151610b9481610b69565b60005b83811015610d2f578181015183820152602001610d17565b50506000910152565b60008251610d4a818460208701610d14565b9190910192915050565b6020815260008251806020840152610d73816040850160208701610d14565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212203d81e2ee9c36e0a6606cf68c63ea8f316584eefbf5cfc6f83475337b9fa85fee64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LZ_Treasury_LzTokenNotEnabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeBP";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_lzTokenEnabled";
            readonly type: "bool";
        }];
        readonly name: "setLzTokenEnabled";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "setLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeBP";
            readonly type: "uint256";
        }];
        readonly name: "setNativeFeeBP";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_messageLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_messageLib";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawNativeFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TreasuryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Treasury;
}

declare class Worker__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer_NativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Transfer_ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Worker_RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WorkerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Worker;
}

type index_EndpointV2Alt__factory = EndpointV2Alt__factory;
declare const index_EndpointV2Alt__factory: typeof EndpointV2Alt__factory;
type index_EndpointV2ViewUpgradeable__factory = EndpointV2ViewUpgradeable__factory;
declare const index_EndpointV2ViewUpgradeable__factory: typeof EndpointV2ViewUpgradeable__factory;
type index_EndpointV2View__factory = EndpointV2View__factory;
declare const index_EndpointV2View__factory: typeof EndpointV2View__factory;
type index_EndpointV2__factory = EndpointV2__factory;
declare const index_EndpointV2__factory: typeof EndpointV2__factory;
type index_ExecutorFeeLib__factory = ExecutorFeeLib__factory;
declare const index_ExecutorFeeLib__factory: typeof ExecutorFeeLib__factory;
type index_MessageLibBase__factory = MessageLibBase__factory;
declare const index_MessageLibBase__factory: typeof MessageLibBase__factory;
type index_MessageLibManager__factory = MessageLibManager__factory;
declare const index_MessageLibManager__factory: typeof MessageLibManager__factory;
type index_MessagingChannel__factory = MessagingChannel__factory;
declare const index_MessagingChannel__factory: typeof MessagingChannel__factory;
type index_MessagingComposer__factory = MessagingComposer__factory;
declare const index_MessagingComposer__factory: typeof MessagingComposer__factory;
type index_MessagingContext__factory = MessagingContext__factory;
declare const index_MessagingContext__factory: typeof MessagingContext__factory;
type index_PriceFeed__factory = PriceFeed__factory;
declare const index_PriceFeed__factory: typeof PriceFeed__factory;
type index_ReceiveLibBaseE2__factory = ReceiveLibBaseE2__factory;
declare const index_ReceiveLibBaseE2__factory: typeof ReceiveLibBaseE2__factory;
type index_SendLibBaseE2__factory = SendLibBaseE2__factory;
declare const index_SendLibBaseE2__factory: typeof SendLibBaseE2__factory;
type index_SendLibBase__factory = SendLibBase__factory;
declare const index_SendLibBase__factory: typeof SendLibBase__factory;
type index_Treasury__factory = Treasury__factory;
declare const index_Treasury__factory: typeof Treasury__factory;
type index_Worker__factory = Worker__factory;
declare const index_Worker__factory: typeof Worker__factory;
declare namespace index {
  export { index_EndpointV2Alt__factory as EndpointV2Alt__factory, index_EndpointV2ViewUpgradeable__factory as EndpointV2ViewUpgradeable__factory, index_EndpointV2View__factory as EndpointV2View__factory, index_EndpointV2__factory as EndpointV2__factory, index_ExecutorFeeLib__factory as ExecutorFeeLib__factory, index_MessageLibBase__factory as MessageLibBase__factory, index_MessageLibManager__factory as MessageLibManager__factory, index_MessagingChannel__factory as MessagingChannel__factory, index_MessagingComposer__factory as MessagingComposer__factory, index_MessagingContext__factory as MessagingContext__factory, index_PriceFeed__factory as PriceFeed__factory, index_ReceiveLibBaseE2__factory as ReceiveLibBaseE2__factory, index_SendLibBaseE2__factory as SendLibBaseE2__factory, index_SendLibBase__factory as SendLibBase__factory, index_Treasury__factory as Treasury__factory, index_Worker__factory as Worker__factory, index$D as decompressor, index$E as executorSol, index$C as interfaces, index$B as libs, index$z as messagelib, index$u as oapp, index$s as oft, index$p as precrime, index$o as proxy, index$3 as uln, index$1 as upgradeable };
}

export { type ILayerZeroExecutor as $, DVNDecompressor__factory as A, type ExecutorDecompressor as B, type ComposeSentEvent$2 as C, type DecompressorExtension as D, type EndpointV2 as E, ExecutorDecompressor__factory as F, EndpointV2__factory as G, EndpointV2Alt__factory as H, EndpointV2View__factory as I, EndpointV2ViewUpgradeable__factory as J, type Executor as K, Executor__factory as L, type MessageLibBase as M, type ILayerZeroEndpointV2$1 as N, ILayerZeroEndpointV2__factory$1 as O, type PacketSentEvent$1 as P, ExecutorFeeLib__factory as Q, type ReceiveLibBaseE2 as R, type SendLibBase as S, type Treasury as T, IExecutor$2 as U, IExecutor__factory as V, type Worker as W, IExecutorFeeLib$1 as X, IExecutorFeeLib__factory as Y, type ILayerZeroComposer as Z, ILayerZeroComposer__factory as _, type PacketVerifiedEvent$1 as a, OAppReceiver__factory as a$, ILayerZeroExecutor__factory as a0, ILayerZeroPriceFeed$1 as a1, ILayerZeroPriceFeed__factory as a2, type ILayerZeroReceiver as a3, ILayerZeroReceiver__factory as a4, type ILayerZeroTreasury as a5, ILayerZeroTreasury__factory as a6, type IMessageLib as a7, IMessageLib__factory as a8, type IMessageLibManager as a9, MessagingComposer__factory as aA, MessagingContext__factory as aB, type OmniCounter as aC, OmniCounter__factory as aD, type OmniCounterAbstract as aE, OmniCounterAbstract__factory as aF, type OmniCounterPreCrime as aG, OmniCounterPreCrime__factory as aH, type IOAppComposer as aI, IOAppComposer__factory as aJ, type IOAppCore as aK, IOAppCore__factory as aL, type IOAppMsgInspector as aM, IOAppMsgInspector__factory as aN, type IOAppOptionsType3 as aO, IOAppOptionsType3__factory as aP, type IOAppReceiver as aQ, IOAppReceiver__factory as aR, type OAppOptionsType3 as aS, OAppOptionsType3__factory as aT, type OptionsBuilder as aU, OptionsBuilder__factory as aV, type OApp as aW, OApp__factory as aX, type OAppCore as aY, OAppCore__factory as aZ, type OAppReceiver as a_, IMessageLibManager__factory as aa, type IMessagingChannel as ab, IMessagingChannel__factory as ac, type IMessagingComposer as ad, IMessagingComposer__factory as ae, type IMessagingContext as af, IMessagingContext__factory as ag, type ISendLib as ah, ISendLib__factory as ai, type IWorker as aj, IWorker__factory as ak, type AddressCast as al, AddressCast__factory as am, type Errors as an, Errors__factory as ao, type Transfer as ap, Transfer__factory as aq, type BlockedMessageLib as ar, BlockedMessageLib__factory as as, type ExecutorOptions as at, ExecutorOptions__factory as au, type SimpleMessageLib as av, SimpleMessageLib__factory as aw, MessageLibBase__factory as ax, MessageLibManager__factory as ay, MessagingChannel__factory as az, type PacketSentEvent$2 as b, IAxelarDVNAdapterFeeLib as b$, type OAppSender as b0, OAppSender__factory as b1, RateLimiter as b2, RateLimiter__factory as b3, type IOFT as b4, IOFT__factory as b5, type OFT as b6, OFT__factory as b7, type OFTAdapter as b8, OFTAdapter__factory as b9, ISendLibBase__factory as bA, type AxelarDVNAdapterFeeLib as bB, AxelarDVNAdapterFeeLib__factory as bC, type CCIPDVNAdapter as bD, CCIPDVNAdapter__factory as bE, type CCIPDVNAdapterFeeLib as bF, CCIPDVNAdapterFeeLib__factory as bG, type DVNAdapterBase as bH, DVNAdapterBase__factory as bI, type IReceiveUln as bJ, IReceiveUln__factory as bK, type DVNAdapterMessageCodec as bL, DVNAdapterMessageCodec__factory as bM, type OptimismDVNAdapterL1 as bN, OptimismDVNAdapterL1__factory as bO, type OptimismDVNAdapterL2 as bP, OptimismDVNAdapterL2__factory as bQ, type DeadDVN as bR, DeadDVN__factory as bS, type DVN as bT, DVN__factory as bU, type DVNFeeLib as bV, DVNFeeLib__factory as bW, type MultiSig as bX, MultiSig__factory as bY, IAxelarDVNAdapter$1 as bZ, IAxelarDVNAdapter__factory as b_, type OFTCore as ba, OFTCore__factory as bb, type PreCrimeE1 as bc, PreCrimeE1__factory as bd, type IOAppPreCrimeSimulator as be, IOAppPreCrimeSimulator__factory as bf, type IPreCrime as bg, IPreCrime__factory as bh, type OAppPreCrimeSimulator as bi, OAppPreCrimeSimulator__factory as bj, type PreCrime as bk, PreCrime__factory as bl, PriceFeed__factory as bm, type TransparentUpgradeableProxy$1 as bn, TransparentUpgradeableProxy__factory$1 as bo, ReceiveLibBaseE2__factory as bp, SendLibBase__factory as bq, SendLibBaseE2__factory as br, Treasury__factory as bs, type ArbitrumDVNAdapterL1 as bt, ArbitrumDVNAdapterL1__factory as bu, type ArbitrumDVNAdapterL2 as bv, ArbitrumDVNAdapterL2__factory as bw, type AxelarDVNAdapter as bx, AxelarDVNAdapter__factory as by, type ISendLibBase as bz, index$1f as c, type ProxyAdmin as c$, IAxelarDVNAdapterFeeLib__factory as c0, ICCIPDVNAdapter$1 as c1, ICCIPDVNAdapter__factory as c2, ICCIPDVNAdapterFeeLib as c3, ICCIPDVNAdapterFeeLib__factory as c4, IDVN$1 as c5, IDVN__factory as c6, IDVNFeeLib as c7, IDVNFeeLib__factory as c8, ILayerZeroDVN as c9, NonceContractMock__factory as cA, type ILayerZeroReceiveLibrary as cB, ILayerZeroReceiveLibrary__factory as cC, type ReceiveLibBaseE1 as cD, ReceiveLibBaseE1__factory as cE, type ReceiveUln301 as cF, ReceiveUln301__factory as cG, type IReceiveUln301 as cH, IReceiveUln301__factory as cI, type ReceiveUln301View as cJ, ReceiveUln301View__factory as cK, type SendLibBaseE1 as cL, SendLibBaseE1__factory as cM, type SendUln301 as cN, SendUln301__factory as cO, type TreasuryFeeHandler as cP, TreasuryFeeHandler__factory as cQ, type ReceiveUln302 as cR, ReceiveUln302__factory as cS, type IReceiveUln302 as cT, IReceiveUln302__factory as cU, type ReceiveUln302View as cV, ReceiveUln302View__factory as cW, type SendUln302 as cX, SendUln302__factory as cY, type UlnBase as cZ, UlnBase__factory as c_, ILayerZeroDVN__factory as ca, type IReceiveUlnE2 as cb, IReceiveUlnE2__factory as cc, type DVNOptions as cd, DVNOptions__factory as ce, type UlnOptions as cf, UlnOptions__factory as cg, type IReceiveUlnView as ch, IReceiveUlnView__factory as ci, type LzExecutor as cj, LzExecutor__factory as ck, type ReceiveUlnBase as cl, ReceiveUlnBase__factory as cm, type SendUlnBase as cn, SendUlnBase__factory as co, type AddressSizeConfig as cp, AddressSizeConfig__factory as cq, type IMessageLibE1 as cr, IMessageLibE1__factory as cs, type INonceContract as ct, INonceContract__factory as cu, type ITreasuryFeeHandler as cv, ITreasuryFeeHandler__factory as cw, type IUltraLightNode301 as cx, IUltraLightNode301__factory as cy, type NonceContractMock as cz, index$1e as d, ProxyAdmin__factory as d0, type WorkerUpgradeable as d1, WorkerUpgradeable__factory as d2, Worker__factory as d3, type TypedEvent as d4, type TypedEventFilter as d5, type TypedListener as d6, type OnEvent as d7, type MinEthersFactory as d8, type GetContractTypeFromFactory as d9, type GetARGsTypeFromFactory as da, type PromiseOrValue as db, index$1d as e, index$1b as f, index$16 as g, index$14 as h, index$1g as i, index$11 as j, index$10 as k, index$H as l, index$F as m, type EndpointV2Alt as n, type EndpointV2View as o, type EndpointV2ViewUpgradeable as p, type ExecutorFeeLib as q, type MessageLibManager as r, type MessagingChannel as s, type MessagingComposer as t, type MessagingContext as u, type PriceFeed as v, type SendLibBaseE2 as w, index as x, DecompressorExtension__factory as y, type DVNDecompressor as z };
