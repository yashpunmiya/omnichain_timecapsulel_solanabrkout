export { al as AddressCast, am as AddressCast__factory, cp as AddressSizeConfig, cq as AddressSizeConfig__factory, bt as ArbitrumDVNAdapterL1, bu as ArbitrumDVNAdapterL1__factory, bv as ArbitrumDVNAdapterL2, bw as ArbitrumDVNAdapterL2__factory, bx as AxelarDVNAdapter, bB as AxelarDVNAdapterFeeLib, bC as AxelarDVNAdapterFeeLib__factory, by as AxelarDVNAdapter__factory, ar as BlockedMessageLib, as as BlockedMessageLib__factory, bD as CCIPDVNAdapter, bF as CCIPDVNAdapterFeeLib, bG as CCIPDVNAdapterFeeLib__factory, bE as CCIPDVNAdapter__factory, C as ComposeSentEvent, bT as DVN, bH as DVNAdapterBase, bI as DVNAdapterBase__factory, bL as DVNAdapterMessageCodec, bM as DVNAdapterMessageCodec__factory, z as DVNDecompressor, A as DVNDecompressor__factory, bV as DVNFeeLib, bW as DVNFeeLib__factory, cd as DVNOptions, ce as DVNOptions__factory, bU as DVN__factory, bR as DeadDVN, bS as DeadDVN__factory, D as DecompressorExtension, y as DecompressorExtension__factory, E as EndpointV2, n as EndpointV2Alt, H as EndpointV2Alt__factory, o as EndpointV2View, p as EndpointV2ViewUpgradeable, J as EndpointV2ViewUpgradeable__factory, I as EndpointV2View__factory, G as EndpointV2__factory, an as Errors, ao as Errors__factory, K as Executor, B as ExecutorDecompressor, F as ExecutorDecompressor__factory, q as ExecutorFeeLib, Q as ExecutorFeeLib__factory, at as ExecutorOptions, au as ExecutorOptions__factory, L as Executor__factory, da as GetARGsTypeFromFactory, d9 as GetContractTypeFromFactory, bZ as IAxelarDVNAdapter, b$ as IAxelarDVNAdapterFeeLib, c0 as IAxelarDVNAdapterFeeLib__factory, b_ as IAxelarDVNAdapter__factory, c1 as ICCIPDVNAdapter, c3 as ICCIPDVNAdapterFeeLib, c4 as ICCIPDVNAdapterFeeLib__factory, c2 as ICCIPDVNAdapter__factory, c5 as IDVN, c7 as IDVNFeeLib, c8 as IDVNFeeLib__factory, c6 as IDVN__factory, U as IExecutor, X as IExecutorFeeLib, Y as IExecutorFeeLib__factory, V as IExecutor__factory, Z as ILayerZeroComposer, _ as ILayerZeroComposer__factory, c9 as ILayerZeroDVN, ca as ILayerZeroDVN__factory, N as ILayerZeroEndpointV2, O as ILayerZeroEndpointV2__factory, $ as ILayerZeroExecutor, a0 as ILayerZeroExecutor__factory, a1 as ILayerZeroPriceFeed, a2 as ILayerZeroPriceFeed__factory, cB as ILayerZeroReceiveLibrary, cC as ILayerZeroReceiveLibrary__factory, a3 as ILayerZeroReceiver, a4 as ILayerZeroReceiver__factory, a5 as ILayerZeroTreasury, a6 as ILayerZeroTreasury__factory, a7 as IMessageLib, cr as IMessageLibE1, cs as IMessageLibE1__factory, a9 as IMessageLibManager, aa as IMessageLibManager__factory, a8 as IMessageLib__factory, ab as IMessagingChannel, ac as IMessagingChannel__factory, ad as IMessagingComposer, ae as IMessagingComposer__factory, af as IMessagingContext, ag as IMessagingContext__factory, ct as INonceContract, cu as INonceContract__factory, aI as IOAppComposer, aJ as IOAppComposer__factory, aK as IOAppCore, aL as IOAppCore__factory, aM as IOAppMsgInspector, aN as IOAppMsgInspector__factory, aO as IOAppOptionsType3, aP as IOAppOptionsType3__factory, be as IOAppPreCrimeSimulator, bf as IOAppPreCrimeSimulator__factory, aQ as IOAppReceiver, aR as IOAppReceiver__factory, b4 as IOFT, b5 as IOFT__factory, bg as IPreCrime, bh as IPreCrime__factory, bJ as IReceiveUln, cH as IReceiveUln301, cI as IReceiveUln301__factory, cT as IReceiveUln302, cU as IReceiveUln302__factory, cb as IReceiveUlnE2, cc as IReceiveUlnE2__factory, ch as IReceiveUlnView, ci as IReceiveUlnView__factory, bK as IReceiveUln__factory, ah as ISendLib, bz as ISendLibBase, bA as ISendLibBase__factory, ai as ISendLib__factory, cv as ITreasuryFeeHandler, cw as ITreasuryFeeHandler__factory, cx as IUltraLightNode301, cy as IUltraLightNode301__factory, aj as IWorker, ak as IWorker__factory, cj as LzExecutor, ck as LzExecutor__factory, M as MessageLibBase, ax as MessageLibBase__factory, r as MessageLibManager, ay as MessageLibManager__factory, s as MessagingChannel, az as MessagingChannel__factory, t as MessagingComposer, aA as MessagingComposer__factory, u as MessagingContext, aB as MessagingContext__factory, d8 as MinEthersFactory, bX as MultiSig, bY as MultiSig__factory, cz as NonceContractMock, cA as NonceContractMock__factory, aW as OApp, aY as OAppCore, aZ as OAppCore__factory, aS as OAppOptionsType3, aT as OAppOptionsType3__factory, bi as OAppPreCrimeSimulator, bj as OAppPreCrimeSimulator__factory, a_ as OAppReceiver, a$ as OAppReceiver__factory, b0 as OAppSender, b1 as OAppSender__factory, aX as OApp__factory, b6 as OFT, b8 as OFTAdapter, b9 as OFTAdapter__factory, ba as OFTCore, bb as OFTCore__factory, b7 as OFT__factory, aC as OmniCounter, aE as OmniCounterAbstract, aF as OmniCounterAbstract__factory, aG as OmniCounterPreCrime, aH as OmniCounterPreCrime__factory, aD as OmniCounter__factory, d7 as OnEvent, bN as OptimismDVNAdapterL1, bO as OptimismDVNAdapterL1__factory, bP as OptimismDVNAdapterL2, bQ as OptimismDVNAdapterL2__factory, aU as OptionsBuilder, aV as OptionsBuilder__factory, P as PacketSentEvent, b as PacketSentEvent301, a as PacketVerifiedEvent, bk as PreCrime, bc as PreCrimeE1, bd as PreCrimeE1__factory, bl as PreCrime__factory, v as PriceFeed, bm as PriceFeed__factory, db as PromiseOrValue, c$ as ProxyAdmin, d0 as ProxyAdmin__factory, b2 as RateLimiter, b3 as RateLimiter__factory, cD as ReceiveLibBaseE1, cE as ReceiveLibBaseE1__factory, R as ReceiveLibBaseE2, bp as ReceiveLibBaseE2__factory, cF as ReceiveUln301, cJ as ReceiveUln301View, cK as ReceiveUln301View__factory, cG as ReceiveUln301__factory, cR as ReceiveUln302, cV as ReceiveUln302View, cW as ReceiveUln302View__factory, cS as ReceiveUln302__factory, cl as ReceiveUlnBase, cm as ReceiveUlnBase__factory, S as SendLibBase, cL as SendLibBaseE1, cM as SendLibBaseE1__factory, w as SendLibBaseE2, br as SendLibBaseE2__factory, bq as SendLibBase__factory, cN as SendUln301, cO as SendUln301__factory, cX as SendUln302, cY as SendUln302__factory, cn as SendUlnBase, co as SendUlnBase__factory, av as SimpleMessageLib, aw as SimpleMessageLib__factory, ap as Transfer, aq as Transfer__factory, bn as TransparentUpgradeableProxy, bo as TransparentUpgradeableProxy__factory, T as Treasury, cP as TreasuryFeeHandler, cQ as TreasuryFeeHandler__factory, bs as Treasury__factory, d4 as TypedEvent, d5 as TypedEventFilter, d6 as TypedListener, cZ as UlnBase, c_ as UlnBase__factory, cf as UlnOptions, cg as UlnOptions__factory, W as Worker, d1 as WorkerUpgradeable, d2 as WorkerUpgradeable__factory, d3 as Worker__factory, c as decompressor, i as executorSol, x as factories, d as interfaces, e as libs, f as messagelib, g as oapp, h as oft, j as precrime, k as proxy, l as uln, m as upgradeable } from './index-KTPkftIR.mjs';
import 'ethers';
import '@ethersproject/providers';
import '@ethersproject/abi';

declare function getDeployedContractAddress(network: string, contractName: string): string;
declare function getDeploymentAddressAndAbi(network: string, contractName: string): {
    address: string;
    abi: any;
};

export { getDeployedContractAddress, getDeploymentAddressAndAbi };
