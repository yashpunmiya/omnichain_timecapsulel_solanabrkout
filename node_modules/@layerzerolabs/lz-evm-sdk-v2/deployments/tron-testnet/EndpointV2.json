{
  "address": "0x1b356f3030CE0c1eF9D3e1E250Bf0BB11D81b2d1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LZ_AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ComposeExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "expected",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "actual",
          "type": "bytes32"
        }
      ],
      "name": "LZ_ComposeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_DefaultReceiveLibUnavailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_DefaultSendLibUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requiredNative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "suppliedNative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredLzToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "suppliedLzToken",
          "type": "uint256"
        }
      ],
      "name": "LZ_InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_InvalidExpiry",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "LZ_InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_InvalidPayloadHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_InvalidReceiveLibrary",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_OnlyNonDefaultLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_OnlyReceiveLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_OnlyRegisteredLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_OnlyRegisteredOrDefaultLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_OnlySendLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_PathNotInitializable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_PathNotVerifiable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "expected",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "actual",
          "type": "bytes32"
        }
      ],
      "name": "LZ_PayloadHashNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_SameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_SendReentrancy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_UnsupportedEid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_UnsupportedInterface",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ZeroLzTokenFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer_NativeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer_ToAddressIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        }
      ],
      "name": "ComposeDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "ComposeSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLib",
          "type": "address"
        }
      ],
      "name": "DefaultReceiveLibrarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "DefaultReceiveLibraryTimeoutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLib",
          "type": "address"
        }
      ],
      "name": "DefaultSendLibrarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "DelegateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "InboundNonceSkipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLib",
          "type": "address"
        }
      ],
      "name": "LibraryRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "LzComposeAlert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "LzReceiveAlert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LzTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "PacketBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PacketDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "PacketNilified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sendLibrary",
          "type": "address"
        }
      ],
      "name": "PacketSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "PacketVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLib",
          "type": "address"
        }
      ],
      "name": "ReceiveLibrarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeout",
          "type": "uint256"
        }
      ],
      "name": "ReceiveLibraryTimeoutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLib",
          "type": "address"
        }
      ],
      "name": "SendLibrarySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EMPTY_PAYLOAD_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NIL_PAYLOAD_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockedLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "clear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        }
      ],
      "name": "composeQueue",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        }
      ],
      "name": "defaultReceiveLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        }
      ],
      "name": "defaultReceiveLibraryTimeout",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "defaultSendLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        }
      ],
      "name": "getReceiveLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegisteredLibraries",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSendContext",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        }
      ],
      "name": "getSendLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        }
      ],
      "name": "inboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "inboundNonce",
          "type": "uint64"
        }
      ],
      "name": "inboundPayloadHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "initializable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        }
      ],
      "name": "isDefaultSendLibrary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        }
      ],
      "name": "isRegisteredLibrary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSendingMessage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "isSupportedEid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_actualReceiveLib",
          "type": "address"
        }
      ],
      "name": "isValidReceiveLibrary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "lazyInboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzCompose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "lzComposeAlert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "lzReceiveAlert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_receiver",
          "type": "bytes32"
        }
      ],
      "name": "nextGuid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "nilify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "receiver",
          "type": "bytes32"
        }
      ],
      "name": "outboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "receiver",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "payInLzToken",
              "type": "bool"
            }
          ],
          "internalType": "struct MessagingParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        }
      ],
      "name": "receiveLibraryTimeout",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        }
      ],
      "name": "registerLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "receiver",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "payInLzToken",
              "type": "bool"
            }
          ],
          "internalType": "struct MessagingParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_refundAddress",
          "type": "address"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendCompose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "configType",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "config",
              "type": "bytes"
            }
          ],
          "internalType": "struct SetConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setDefaultReceiveLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "setDefaultReceiveLibraryTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        }
      ],
      "name": "setDefaultSendLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzToken",
          "type": "address"
        }
      ],
      "name": "setLzToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setReceiveLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "setReceiveLibraryTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        }
      ],
      "name": "setSendLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "skip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "verifiable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1351863ff4902d24206b66fbfa2fc1b389b5190612ea288a63c9d9a620727689",
  "receipt": {
    "to": null,
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0x1b356f3030CE0c1eF9D3e1E250Bf0BB11D81b2d1",
    "transactionIndex": 0,
    "gasUsed": "5356428",
    "logsBloom": "0x
    "blockHash": "0x00000000029aa6f40ab8d1e9485927f0b029f5057da3938d8fa90855d029bae0",
    "transactionHash": "0x1351863ff4902d24206b66fbfa2fc1b389b5190612ea288a63c9d9a620727689",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 43689716,
        "transactionHash": "0x1351863ff4902d24206b66fbfa2fc1b389b5190612ea288a63c9d9a620727689",
        "address": "0x1b356f3030CE0c1eF9D3e1E250Bf0BB11D81b2d1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c13b65f7c53cd6db2ea205a4b574b4a0858720a6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x00000000029aa6f40ab8d1e9485927f0b029f5057da3938d8fa90855d029bae0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43689716,
        "transactionHash": "0x1351863ff4902d24206b66fbfa2fc1b389b5190612ea288a63c9d9a620727689",
        "address": "0x1b356f3030CE0c1eF9D3e1E250Bf0BB11D81b2d1",
        "topics": [
          "0x6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5"
        ],
        "data": "0x000000000000000000000000c5db86276f7a1294c836fea6fe88b20f980951a5",
        "logIndex": 1,
        "blockHash": "0x00000000029aa6f40ab8d1e9485927f0b029f5057da3938d8fa90855d029bae0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43689716,
        "transactionHash": "0x1351863ff4902d24206b66fbfa2fc1b389b5190612ea288a63c9d9a620727689",
        "address": "0x1b356f3030CE0c1eF9D3e1E250Bf0BB11D81b2d1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c13b65f7c53cd6db2ea205a4b574b4a0858720a6",
          "0x000000000000000000000000c13b65f7c53cd6db2ea205a4b574b4a0858720a6"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x00000000029aa6f40ab8d1e9485927f0b029f5057da3938d8fa90855d029bae0"
      }
    ],
    "blockNumber": 43689716,
    "cumulativeGasUsed": "5356428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    40420,
    "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6"
  ],
  "numDeployments": 1,
  "solcInputHash": "20507f963760b96ca4286d4b9a1538e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.5f1834bc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LZ_AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ComposeExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"LZ_ComposeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_DefaultReceiveLibUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_DefaultSendLibUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliedNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredLzToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliedLzToken\",\"type\":\"uint256\"}],\"name\":\"LZ_InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_InvalidExpiry\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"LZ_InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_InvalidPayloadHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_InvalidReceiveLibrary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_OnlyNonDefaultLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_OnlyReceiveLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_OnlyRegisteredLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_OnlyRegisteredOrDefaultLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_OnlySendLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_PathNotInitializable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_PathNotVerifiable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"LZ_PayloadHashNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_SendReentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_UnsupportedEid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_UnsupportedInterface\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ZeroLzTokenFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer_NativeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer_ToAddressIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"ComposeDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ComposeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"DefaultReceiveLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"DefaultReceiveLibraryTimeoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"DefaultSendLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"InboundNonceSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"LibraryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"LzComposeAlert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"LzReceiveAlert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LzTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PacketDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketNilified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendLibrary\",\"type\":\"address\"}],\"name\":\"PacketSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"ReceiveLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"ReceiveLibraryTimeoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"SendLibrarySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMPTY_PAYLOAD_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NIL_PAYLOAD_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockedLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"composeQueue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"}],\"name\":\"defaultReceiveLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"}],\"name\":\"defaultReceiveLibraryTimeout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"defaultSendLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"}],\"name\":\"getReceiveLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredLibraries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendContext\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"}],\"name\":\"getSendLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"inboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"inboundNonce\",\"type\":\"uint64\"}],\"name\":\"inboundPayloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"initializable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"}],\"name\":\"isDefaultSendLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"isRegisteredLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSendingMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isSupportedEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_actualReceiveLib\",\"type\":\"address\"}],\"name\":\"isValidReceiveLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"lazyInboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"lzComposeAlert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"lzReceiveAlert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"}],\"name\":\"nextGuid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"nilify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"}],\"name\":\"outboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"internalType\":\"struct MessagingParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"}],\"name\":\"receiveLibraryTimeout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"registerLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"internalType\":\"struct MessagingParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendCompose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"struct SetConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultReceiveLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setDefaultReceiveLibraryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setDefaultSendLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzToken\",\"type\":\"address\"}],\"name\":\"setLzToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setReceiveLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setReceiveLibraryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setSendLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"skip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"verifiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint32,bytes32,uint64,bytes32)\":{\"details\":\"Marks a nonce as unexecutable and un-verifiable. The nonce can never be re-verified or executed.Reverts if the provided _payloadHash does not match the currently verified payload hash.Only packets with nonces less than or equal to the lazy inbound nonce can be burned.Reverts if the nonce has already been executed.Authenticated by the caller\"},\"clear(address,(uint32,bytes32,uint64),bytes32,bytes)\":{\"details\":\"Oapp uses this interface to clear a message.this is a PULL mode versus the PUSH mode of lzReceivethe cleared message can be ignored by the app (effectively burnt)authenticated by oapp\",\"params\":{\"_guid\":\"the guid of the message\",\"_message\":\"the message\",\"_origin\":\"the origin of the message\"}},\"constructor\":{\"params\":{\"_eid\":\"the unique Endpoint Id for this deploy that all other Endpoints can use to send to it\"}},\"getConfig(address,address,uint32,uint32)\":{\"details\":\"a view function to query the current configuration of the OApp\"},\"getReceiveLibrary(address,uint32)\":{\"details\":\"the receiveLibrary can be lazily resolved that if not set it will point to the default configured by LayerZero\"},\"getSendContext()\":{\"details\":\"returns (eid, sender) if sending message, (0, 0) otherwise\"},\"getSendLibrary(address,uint32)\":{\"details\":\"If the Oapp does not have a selected Send Library, this function will resolve to the default library configured by LayerZero\",\"params\":{\"_dstEid\":\"The destination endpoint id\",\"_sender\":\"The address of the Oapp that is sending the message\"},\"returns\":{\"lib\":\"address of the Send Library\"}},\"inboundNonce(address,uint32,bytes32)\":{\"details\":\"returns the max index of the longest gapless sequence of verified msg nonces.the uninitialized value is 0. the first nonce is always 1it starts from the lazyInboundNonce (last checkpoint) and iteratively check if the next nonce has been verifiedthis function can OOG if too many backlogs, but it can be trivially fixed by just clearing some prior messagesNOTE: Oapp explicitly skipped nonces count as \\\"verified\\\" for these purposeseg. [1,2,3,4,6,7] => 4, [1,2,6,8,10] => 2, [1,3,4,5,6] => 1\"},\"isSendingMessage()\":{\"details\":\"returns true if sending message\"},\"isSupportedEid(uint32)\":{\"details\":\"returns true only if both the default send/receive libraries are set\"},\"isValidReceiveLibrary(address,uint32,address)\":{\"details\":\"called when the endpoint checks if the msgLib attempting to verify the msg is the configured msgLib of the Oappthis check provides the ability for Oapp to lock in a trusted msgLibit will fist check if the msgLib is the currently configured one. then check if the msgLib is the one in grace period of msgLib versioning upgrade\"},\"lzCompose(address,address,bytes32,uint16,bytes,bytes)\":{\"details\":\"execute a composed messages from the sender to the composer (receiver)the execution provides the execution context (caller, extraData) to the receiver.      the receiver can optionally assert the caller and validate the untrusted extraDatacan not re-entrant\",\"params\":{\"_extraData\":\"the extra data provided by the executor. this data is untrusted and should be validated.\",\"_from\":\"the address which sends the composed message. in most cases, it is the Oapp's address.\",\"_guid\":\"the message guid\",\"_message\":\"the message\",\"_to\":\"the address which receives the composed message\"}},\"lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)\":{\"params\":{\"_extraData\":\"the extra data provided by the executor\",\"_from\":\"the address which sends the composed message\",\"_guid\":\"the message guid\",\"_message\":\"the message\",\"_reason\":\"the reason why the message is not received\",\"_to\":\"the address which receives the composed message\"}},\"lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)\":{\"details\":\"MESSAGING STEP 3 - the last stepexecute a verified message to the designated receiverthe execution provides the execution context (caller, extraData) to the receiver. the receiver can optionally assert the caller and validate the untrusted extraDatacant reentrant because the payload is cleared before execution\",\"params\":{\"_extraData\":\"the extra data provided by the executor. this data is untrusted and should be validated.\",\"_guid\":\"the guid of the message\",\"_message\":\"the message\",\"_origin\":\"the origin of the message\",\"_receiver\":\"the receiver of the message\"}},\"lzReceiveAlert((uint32,bytes32,uint64),address,bytes32,uint256,uint256,bytes,bytes,bytes)\":{\"params\":{\"_extraData\":\"the extra data provided by the executor.\",\"_guid\":\"the guid of the message\",\"_message\":\"the message\",\"_origin\":\"the origin of the message\",\"_reason\":\"the reason for failure\",\"_receiver\":\"the receiver of the message\"}},\"nativeToken()\":{\"details\":\"override this if the endpoint is charging ERC20 tokens as native\",\"returns\":{\"_0\":\"0x0 if using native. otherwise the address of the native ERC20 token\"}},\"nextGuid(address,uint32,bytes32)\":{\"details\":\"returns the GUID for the next message given the paththe Oapp might want to include the GUID into the message in some cases\"},\"nilify(address,uint32,bytes32,uint64,bytes32)\":{\"details\":\"Marks a packet as verified, but disallows execution until it is re-verified.Reverts if the provided _payloadHash does not match the currently verified payload hash.A non-verified nonce can be nilified by passing EMPTY_PAYLOAD_HASH for _payloadHash.Assumes the computational intractability of finding a payload that hashes to bytes32.max.Authenticated by the caller\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quote((uint32,bytes32,bytes,bytes,bool),address)\":{\"details\":\"MESSAGING STEP 0\",\"params\":{\"_params\":\"the messaging parameters\",\"_sender\":\"the sender of the message\"}},\"recoverToken(address,address,uint256)\":{\"details\":\"recover the token sent to this contract by mistakeonly owner\",\"params\":{\"_amount\":\"the amount to send\",\"_to\":\"the address to send the token to\",\"_token\":\"the token to recover. if 0x0 then it is native token\"}},\"registerLibrary(address)\":{\"details\":\"all libraries have to implement the erc165 interface to prevent wrong configurationsonly owner\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"send((uint32,bytes32,bytes,bytes,bool),address)\":{\"details\":\"MESSAGING STEP 1 - OApp need to transfer the fees to the endpoint before sending the message\",\"params\":{\"_params\":\"the messaging parameters\",\"_refundAddress\":\"the address to refund both the native and lzToken\"}},\"sendCompose(address,bytes32,uint16,bytes)\":{\"details\":\"the Oapp sends the lzCompose message to the endpointthe composer MUST assert the sender because anyone can send compose msg with this functionwith the same GUID, the Oapp can send compose to multiple _composer at the same timeauthenticated by the msg.sender\",\"params\":{\"_guid\":\"the message guid\",\"_message\":\"the message\",\"_to\":\"the address which will receive the composed message\"}},\"setConfig(address,address,(uint32,uint32,bytes)[])\":{\"details\":\"authenticated by the _oapp\"},\"setDefaultReceiveLibrary(uint32,address,uint256)\":{\"details\":\"owner setting the defaultSendLibrarymust be a registered library (including blockLibrary) with the eid support enabledin version migration, it can add a grace period to the old library. if the grace period is 0, it will delete the timeout configuration.only owner\"},\"setDefaultReceiveLibraryTimeout(uint32,address,uint256)\":{\"details\":\"owner setting the defaultSendLibrarymust be a registered library (including blockLibrary) with the eid support enabledcan used to (1) extend the current configuration (2) force remove the current configuration (3) change to a new configuration\",\"params\":{\"_expiry\":\"the block number when lib expires\"}},\"setDefaultSendLibrary(uint32,address)\":{\"details\":\"owner setting the defaultSendLibrarycan set to the blockedLibrary, which is a registered librarythe msgLib must enable the support before they can be registered to the endpoint as the defaultonly owner\"},\"setLzToken(address)\":{\"details\":\"allows reconfiguration to recover from wrong configurationsusers should never approve the EndpointV2 contract to spend their non-layerzero tokensoverride this function if the endpoint is charging ERC20 tokens as nativeonly owner\",\"params\":{\"_lzToken\":\"the new layer zero token address\"}},\"setReceiveLibrary(address,uint32,address,uint256)\":{\"details\":\"Oapp setting the receiveLibrarymust be a registered library (including blockLibrary) with the eid support enabledin version migration, it can add a grace period to the old library. if the grace period is 0, it will delete the timeout configuration.authenticated by the Oapp\",\"params\":{\"_gracePeriod\":\"the number of blocks from now until oldLib expires\"}},\"setReceiveLibraryTimeout(address,uint32,address,uint256)\":{\"details\":\"Oapp setting the defaultSendLibrarymust be a registered library (including blockLibrary) with the eid support enabledcan used to (1) extend the current configuration (2)  force remove the current configuration (3) change to a new configuration\",\"params\":{\"_expiry\":\"the block number when lib expires\"}},\"setSendLibrary(address,uint32,address)\":{\"details\":\"Oapp setting the sendLibrarymust be a registered library (including blockLibrary) with the eid support enabledauthenticated by the Oapp\"},\"skip(address,uint32,bytes32,uint64)\":{\"details\":\"the caller must provide _nonce to prevent skipping the unintended nonceit could happen in some race conditions, e.g. to skip nonce 3, but nonce 3 was consumed firstusage: skipping the next nonce to prevent message verification, e.g. skip a message when Precrime throws alertsif the Oapp wants to skip a verified message, it should call the clear() function insteadafter skipping, the lazyInboundNonce is set to the provided nonce, which makes the inboundNonce also the provided nonceie. allows the Oapp to increment the lazyInboundNonce without having had that corresponding msg be verified\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verify((uint32,bytes32,uint64),address,bytes32)\":{\"details\":\"MESSAGING STEP 2 - on the destination chainconfigured receive library verifies a message\",\"params\":{\"_origin\":\"a struct holding the srcEid, nonce, and sender of the message\",\"_payloadHash\":\"the payload hash of the message\",\"_receiver\":\"the receiver of the message\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getSendLibrary(address,uint32)\":{\"notice\":\"The Send Library is the Oapp specified library that will be used to send the message to the destination endpoint. If the Oapp does not specify a Send Library, the default Send Library will be used.\"},\"quote((uint32,bytes32,bytes,bytes,bool),address)\":{\"notice\":\"This view function gives the application built on top of LayerZero the ability to requests a quote with the same parameters as they would to send their message. Since the quotes are given on chain there is a race condition in which the prices could change between the time the user gets their quote and the time they submit their message. If the price moves up and the user doesn't send enough funds the transaction will revert, if the price goes down the _refundAddress provided by the app will be refunded the difference.\"},\"setDelegate(address)\":{\"notice\":\"delegate is authorized by the oapp to configure anything in layerzero\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EndpointV2.sol\":\"EndpointV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { MessagingFee, MessagingParams, MessagingReceipt, Origin, ILayerZeroEndpointV2 } from \\\"./interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { ISendLib, Packet } from \\\"./interfaces/ISendLib.sol\\\";\\nimport { ILayerZeroReceiver } from \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport { Errors } from \\\"./libs/Errors.sol\\\";\\nimport { GUID } from \\\"./libs/GUID.sol\\\";\\nimport { Transfer } from \\\"./libs/Transfer.sol\\\";\\nimport { MessagingChannel } from \\\"./MessagingChannel.sol\\\";\\nimport { MessagingComposer } from \\\"./MessagingComposer.sol\\\";\\nimport { MessageLibManager } from \\\"./MessageLibManager.sol\\\";\\nimport { MessagingContext } from \\\"./MessagingContext.sol\\\";\\n\\n// LayerZero EndpointV2 is fully backward compatible with LayerZero Endpoint(V1), but it also supports additional\\n// features that Endpoint(V1) does not support now and may not in the future. We have also changed some terminology\\n// to clarify pre-existing language that might have been confusing.\\n//\\n// The following is a list of terminology changes:\\n//     -chainId -> eid\\n//          - Rationale: chainId was a term we initially used to describe an endpoint on a specific chain. Since\\n//          LayerZero supports non-EVMs we could not map the classic EVM chainIds to the LayerZero chainIds, making it\\n//          confusing for developers. With the addition of EndpointV2 and its backward compatible nature, we would have\\n//          two chainIds per chain that has Endpoint(V1), further confusing developers. We have decided to change the\\n//          name to Endpoint Id, or eid, for simplicity and clarity.\\n//     -adapterParams -> options\\n//     -userApplication -> oapp. Omnichain Application\\n//     -srcAddress -> sender\\n//     -dstAddress -> receiver\\n//          - Rationale: The sender/receiver on EVM is the address. However, on non-EVM chains, the sender/receiver could\\n//          represented as a public key, or some other identifier. The term sender/receiver is more generic\\n//     -payload -> message.\\n//          - Rationale: The term payload is used in the context of a packet, which is a combination of the message and GUID\\ncontract EndpointV2 is ILayerZeroEndpointV2, MessagingChannel, MessageLibManager, MessagingComposer, MessagingContext {\\n    address public lzToken;\\n\\n    mapping(address oapp => address delegate) public delegates;\\n\\n    /// @param _eid the unique Endpoint Id for this deploy that all other Endpoints can use to send to it\\n    constructor(uint32 _eid, address _owner) MessagingChannel(_eid) {\\n        _transferOwnership(_owner);\\n    }\\n\\n    /// @dev MESSAGING STEP 0\\n    /// @notice This view function gives the application built on top of LayerZero the ability to requests a quote\\n    /// with the same parameters as they would to send their message. Since the quotes are given on chain there is a\\n    /// race condition in which the prices could change between the time the user gets their quote and the time they\\n    /// submit their message. If the price moves up and the user doesn't send enough funds the transaction will revert,\\n    /// if the price goes down the _refundAddress provided by the app will be refunded the difference.\\n    /// @param _params the messaging parameters\\n    /// @param _sender the sender of the message\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory) {\\n        // lzToken must be set to support payInLzToken\\n        if (_params.payInLzToken && lzToken == address(0x0)) revert Errors.LZ_LzTokenUnavailable();\\n\\n        // get the correct outbound nonce\\n        uint64 nonce = outboundNonce[_sender][_params.dstEid][_params.receiver] + 1;\\n\\n        // construct the packet with a GUID\\n        Packet memory packet = Packet({\\n            nonce: nonce,\\n            srcEid: eid,\\n            sender: _sender,\\n            dstEid: _params.dstEid,\\n            receiver: _params.receiver,\\n            guid: GUID.generate(nonce, eid, _sender, _params.dstEid, _params.receiver),\\n            message: _params.message\\n        });\\n\\n        // get the send library by sender and dst eid\\n        // use _ to avoid variable shadowing\\n        address _sendLibrary = getSendLibrary(_sender, _params.dstEid);\\n\\n        return ISendLib(_sendLibrary).quote(packet, _params.options, _params.payInLzToken);\\n    }\\n\\n    /// @dev MESSAGING STEP 1 - OApp need to transfer the fees to the endpoint before sending the message\\n    /// @param _params the messaging parameters\\n    /// @param _refundAddress the address to refund both the native and lzToken\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable sendContext(_params.dstEid, msg.sender) returns (MessagingReceipt memory) {\\n        if (_params.payInLzToken && lzToken == address(0x0)) revert Errors.LZ_LzTokenUnavailable();\\n\\n        // send message\\n        (MessagingReceipt memory receipt, address _sendLibrary) = _send(msg.sender, _params);\\n\\n        // OApp can simulate with 0 native value it will fail with error including the required fee, which can be provided in the actual call\\n        // this trick can be used to avoid the need to write the quote() function\\n        // however, without the quote view function it will be hard to compose an oapp on chain\\n        uint256 suppliedNative = _suppliedNative();\\n        uint256 suppliedLzToken = _suppliedLzToken(_params.payInLzToken);\\n        _assertMessagingFee(receipt.fee, suppliedNative, suppliedLzToken);\\n\\n        // handle lz token fees\\n        _payToken(lzToken, receipt.fee.lzTokenFee, suppliedLzToken, _sendLibrary, _refundAddress);\\n\\n        // handle native fees\\n        _payNative(receipt.fee.nativeFee, suppliedNative, _sendLibrary, _refundAddress);\\n\\n        return receipt;\\n    }\\n\\n    /// @dev internal function for sending the messages used by all external send methods\\n    /// @param _sender the address of the application sending the message to the destination chain\\n    /// @param _params the messaging parameters\\n    function _send(\\n        address _sender,\\n        MessagingParams calldata _params\\n    ) internal returns (MessagingReceipt memory, address) {\\n        // get the correct outbound nonce\\n        uint64 latestNonce = _outbound(_sender, _params.dstEid, _params.receiver);\\n\\n        // construct the packet with a GUID\\n        Packet memory packet = Packet({\\n            nonce: latestNonce,\\n            srcEid: eid,\\n            sender: _sender,\\n            dstEid: _params.dstEid,\\n            receiver: _params.receiver,\\n            guid: GUID.generate(latestNonce, eid, _sender, _params.dstEid, _params.receiver),\\n            message: _params.message\\n        });\\n\\n        // get the send library by sender and dst eid\\n        address _sendLibrary = getSendLibrary(_sender, _params.dstEid);\\n\\n        // messageLib always returns encodedPacket with guid\\n        (MessagingFee memory fee, bytes memory encodedPacket) = ISendLib(_sendLibrary).send(\\n            packet,\\n            _params.options,\\n            _params.payInLzToken\\n        );\\n\\n        // Emit packet information for DVNs, Executors, and any other offchain infrastructure to only listen\\n        // for this one event to perform their actions.\\n        emit PacketSent(encodedPacket, _params.options, _sendLibrary);\\n\\n        return (MessagingReceipt(packet.guid, latestNonce, fee), _sendLibrary);\\n    }\\n\\n    /// @dev MESSAGING STEP 2 - on the destination chain\\n    /// @dev configured receive library verifies a message\\n    /// @param _origin a struct holding the srcEid, nonce, and sender of the message\\n    /// @param _receiver the receiver of the message\\n    /// @param _payloadHash the payload hash of the message\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external {\\n        if (!isValidReceiveLibrary(_receiver, _origin.srcEid, msg.sender)) revert Errors.LZ_InvalidReceiveLibrary();\\n\\n        uint64 lazyNonce = lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender];\\n        if (!_initializable(_origin, _receiver, lazyNonce)) revert Errors.LZ_PathNotInitializable();\\n        if (!_verifiable(_origin, _receiver, lazyNonce)) revert Errors.LZ_PathNotVerifiable();\\n\\n        // insert the message into the message channel\\n        _inbound(_receiver, _origin.srcEid, _origin.sender, _origin.nonce, _payloadHash);\\n        emit PacketVerified(_origin, _receiver, _payloadHash);\\n    }\\n\\n    /// @dev MESSAGING STEP 3 - the last step\\n    /// @dev execute a verified message to the designated receiver\\n    /// @dev the execution provides the execution context (caller, extraData) to the receiver. the receiver can optionally assert the caller and validate the untrusted extraData\\n    /// @dev cant reentrant because the payload is cleared before execution\\n    /// @param _origin the origin of the message\\n    /// @param _receiver the receiver of the message\\n    /// @param _guid the guid of the message\\n    /// @param _message the message\\n    /// @param _extraData the extra data provided by the executor. this data is untrusted and should be validated.\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable {\\n        // clear the payload first to prevent reentrancy, and then execute the message\\n        _clearPayload(_receiver, _origin.srcEid, _origin.sender, _origin.nonce, abi.encodePacked(_guid, _message));\\n        ILayerZeroReceiver(_receiver).lzReceive{ value: msg.value }(_origin, _guid, _message, msg.sender, _extraData);\\n        emit PacketDelivered(_origin, _receiver);\\n    }\\n\\n    /// @param _origin the origin of the message\\n    /// @param _receiver the receiver of the message\\n    /// @param _guid the guid of the message\\n    /// @param _message the message\\n    /// @param _extraData the extra data provided by the executor.\\n    /// @param _reason the reason for failure\\n    function lzReceiveAlert(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        uint256 _gas,\\n        uint256 _value,\\n        bytes calldata _message,\\n        bytes calldata _extraData,\\n        bytes calldata _reason\\n    ) external {\\n        emit LzReceiveAlert(_receiver, msg.sender, _origin, _guid, _gas, _value, _message, _extraData, _reason);\\n    }\\n\\n    /// @dev Oapp uses this interface to clear a message.\\n    /// @dev this is a PULL mode versus the PUSH mode of lzReceive\\n    /// @dev the cleared message can be ignored by the app (effectively burnt)\\n    /// @dev authenticated by oapp\\n    /// @param _origin the origin of the message\\n    /// @param _guid the guid of the message\\n    /// @param _message the message\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external {\\n        _assertAuthorized(_oapp);\\n\\n        bytes memory payload = abi.encodePacked(_guid, _message);\\n        _clearPayload(_oapp, _origin.srcEid, _origin.sender, _origin.nonce, payload);\\n        emit PacketDelivered(_origin, _oapp);\\n    }\\n\\n    /// @dev allows reconfiguration to recover from wrong configurations\\n    /// @dev users should never approve the EndpointV2 contract to spend their non-layerzero tokens\\n    /// @dev override this function if the endpoint is charging ERC20 tokens as native\\n    /// @dev only owner\\n    /// @param _lzToken the new layer zero token address\\n    function setLzToken(address _lzToken) public virtual onlyOwner {\\n        lzToken = _lzToken;\\n        emit LzTokenSet(_lzToken);\\n    }\\n\\n    /// @dev recover the token sent to this contract by mistake\\n    /// @dev only owner\\n    /// @param _token the token to recover. if 0x0 then it is native token\\n    /// @param _to the address to send the token to\\n    /// @param _amount the amount to send\\n    function recoverToken(address _token, address _to, uint256 _amount) external onlyOwner {\\n        Transfer.nativeOrToken(_token, _to, _amount);\\n    }\\n\\n    /// @dev handling token payments on endpoint. the sender must approve the endpoint to spend the token\\n    /// @dev internal function\\n    /// @param _token the token to pay\\n    /// @param _required the amount required\\n    /// @param _supplied the amount supplied\\n    /// @param _receiver the receiver of the token\\n    function _payToken(\\n        address _token,\\n        uint256 _required,\\n        uint256 _supplied,\\n        address _receiver,\\n        address _refundAddress\\n    ) internal {\\n        if (_required > 0) {\\n            Transfer.token(_token, _receiver, _required);\\n        }\\n        if (_required < _supplied) {\\n            unchecked {\\n                // refund the excess\\n                Transfer.token(_token, _refundAddress, _supplied - _required);\\n            }\\n        }\\n    }\\n\\n    /// @dev handling native token payments on endpoint\\n    /// @dev override this if the endpoint is charging ERC20 tokens as native\\n    /// @dev internal function\\n    /// @param _required the amount required\\n    /// @param _supplied the amount supplied\\n    /// @param _receiver the receiver of the native token\\n    /// @param _refundAddress the address to refund the excess to\\n    function _payNative(\\n        uint256 _required,\\n        uint256 _supplied,\\n        address _receiver,\\n        address _refundAddress\\n    ) internal virtual {\\n        if (_required > 0) {\\n            Transfer.native(_receiver, _required);\\n        }\\n        if (_required < _supplied) {\\n            unchecked {\\n                // refund the excess\\n                Transfer.native(_refundAddress, _supplied - _required);\\n            }\\n        }\\n    }\\n\\n    /// @dev get the balance of the lzToken as the supplied lzToken fee if payInLzToken is true\\n    function _suppliedLzToken(bool _payInLzToken) internal view returns (uint256 supplied) {\\n        if (_payInLzToken) {\\n            supplied = IERC20(lzToken).balanceOf(address(this));\\n\\n            // if payInLzToken is true, the supplied fee must be greater than 0 to prevent a race condition\\n            // in which an oapp sending a message with lz token and the lz token is set to a new token between the tx\\n            // being sent and the tx being mined. if the required lz token fee is 0 and the old lz token would be\\n            // locked in the contract instead of being refunded\\n            if (supplied == 0) revert Errors.LZ_ZeroLzTokenFee();\\n        }\\n    }\\n\\n    /// @dev override this if the endpoint is charging ERC20 tokens as native\\n    function _suppliedNative() internal view virtual returns (uint256) {\\n        return msg.value;\\n    }\\n\\n    /// @dev Assert the required fees and the supplied fees are enough\\n    function _assertMessagingFee(\\n        MessagingFee memory _required,\\n        uint256 _suppliedNativeFee,\\n        uint256 _suppliedLzTokenFee\\n    ) internal pure {\\n        if (_required.nativeFee > _suppliedNativeFee || _required.lzTokenFee > _suppliedLzTokenFee) {\\n            revert Errors.LZ_InsufficientFee(\\n                _required.nativeFee,\\n                _suppliedNativeFee,\\n                _required.lzTokenFee,\\n                _suppliedLzTokenFee\\n            );\\n        }\\n    }\\n\\n    /// @dev override this if the endpoint is charging ERC20 tokens as native\\n    /// @return 0x0 if using native. otherwise the address of the native ERC20 token\\n    function nativeToken() external view virtual returns (address) {\\n        return address(0x0);\\n    }\\n\\n    /// @notice delegate is authorized by the oapp to configure anything in layerzero\\n    function setDelegate(address _delegate) external {\\n        delegates[msg.sender] = _delegate;\\n        emit DelegateSet(msg.sender, _delegate);\\n    }\\n\\n    // ========================= Internal =========================\\n    function _initializable(\\n        Origin calldata _origin,\\n        address _receiver,\\n        uint64 _lazyInboundNonce\\n    ) internal view returns (bool) {\\n        return\\n            _lazyInboundNonce > 0 || // allowInitializePath already checked\\n            ILayerZeroReceiver(_receiver).allowInitializePath(_origin);\\n    }\\n\\n    /// @dev bytes(0) payloadHash can never be submitted\\n    function _verifiable(\\n        Origin calldata _origin,\\n        address _receiver,\\n        uint64 _lazyInboundNonce\\n    ) internal view returns (bool) {\\n        return\\n            _origin.nonce > _lazyInboundNonce || // either initializing an empty slot or reverifying\\n            inboundPayloadHash[_receiver][_origin.srcEid][_origin.sender][_origin.nonce] != EMPTY_PAYLOAD_HASH; // only allow reverifying if it hasn't been executed\\n    }\\n\\n    /// @dev assert the caller to either be the oapp or the delegate\\n    function _assertAuthorized(address _oapp) internal view override(MessagingChannel, MessageLibManager) {\\n        if (msg.sender != _oapp && msg.sender != delegates[_oapp]) revert Errors.LZ_Unauthorized();\\n    }\\n\\n    // ========================= VIEW FUNCTIONS FOR OFFCHAIN ONLY =========================\\n    // Not involved in any state transition function.\\n    // ====================================================================================\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool) {\\n        return _initializable(_origin, _receiver, lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender]);\\n    }\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool) {\\n        return _verifiable(_origin, _receiver, lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender]);\\n    }\\n}\\n\",\"keccak256\":\"0x341bf35955a74f242d205361a1c0f030ef8c9d9c4c27d39b2b0a7bacae807619\",\"license\":\"LZBL-1.2\"},\"contracts/MessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IMessageLib, MessageLibType } from \\\"./interfaces/IMessageLib.sol\\\";\\nimport { IMessageLibManager, SetConfigParam } from \\\"./interfaces/IMessageLibManager.sol\\\";\\nimport { Errors } from \\\"./libs/Errors.sol\\\";\\nimport { BlockedMessageLib } from \\\"./messagelib/BlockedMessageLib.sol\\\";\\n\\nabstract contract MessageLibManager is Ownable, IMessageLibManager {\\n    address private constant DEFAULT_LIB = address(0);\\n\\n    // the library that reverts both on send and quote\\n    // must be configured on construction and be immutable\\n    address public immutable blockedLibrary;\\n\\n    // only registered libraries all valid libraries\\n    // the blockedLibrary will be registered on construction\\n    address[] internal registeredLibraries;\\n    mapping(address lib => bool) public isRegisteredLibrary;\\n\\n    // both sendLibrary and receiveLibrary config can be lazily resolved\\n    mapping(address sender => mapping(uint32 dstEid => address lib)) internal sendLibrary;\\n    mapping(address receiver => mapping(uint32 srcEid => address lib)) internal receiveLibrary;\\n    mapping(address receiver => mapping(uint32 srcEid => Timeout)) public receiveLibraryTimeout;\\n\\n    mapping(uint32 dstEid => address lib) public defaultSendLibrary;\\n    mapping(uint32 srcEid => address lib) public defaultReceiveLibrary;\\n    mapping(uint32 srcEid => Timeout) public defaultReceiveLibraryTimeout;\\n\\n    constructor() {\\n        blockedLibrary = address(new BlockedMessageLib());\\n        registerLibrary(blockedLibrary);\\n    }\\n\\n    modifier onlyRegistered(address _lib) {\\n        if (!isRegisteredLibrary[_lib]) revert Errors.LZ_OnlyRegisteredLib();\\n        _;\\n    }\\n\\n    modifier isSendLib(address _lib) {\\n        if (_lib != DEFAULT_LIB) {\\n            if (IMessageLib(_lib).messageLibType() == MessageLibType.Receive) revert Errors.LZ_OnlySendLib();\\n        }\\n        _;\\n    }\\n\\n    modifier isReceiveLib(address _lib) {\\n        if (_lib != DEFAULT_LIB) {\\n            if (IMessageLib(_lib).messageLibType() == MessageLibType.Send) revert Errors.LZ_OnlyReceiveLib();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRegisteredOrDefault(address _lib) {\\n        if (!isRegisteredLibrary[_lib] && _lib != DEFAULT_LIB) revert Errors.LZ_OnlyRegisteredOrDefaultLib();\\n        _;\\n    }\\n\\n    /// @dev check if the library supported the eid.\\n    modifier onlySupportedEid(address _lib, uint32 _eid) {\\n        /// @dev doesnt need to check for default lib, because when they are initially added they get passed through this modifier\\n        if (_lib != DEFAULT_LIB) {\\n            if (!IMessageLib(_lib).isSupportedEid(_eid)) revert Errors.LZ_UnsupportedEid();\\n        }\\n        _;\\n    }\\n\\n    function getRegisteredLibraries() external view returns (address[] memory) {\\n        return registeredLibraries;\\n    }\\n\\n    /// @notice The Send Library is the Oapp specified library that will be used to send the message to the destination\\n    /// endpoint. If the Oapp does not specify a Send Library, the default Send Library will be used.\\n    /// @dev If the Oapp does not have a selected Send Library, this function will resolve to the default library\\n    /// configured by LayerZero\\n    /// @return lib address of the Send Library\\n    /// @param _sender The address of the Oapp that is sending the message\\n    /// @param _dstEid The destination endpoint id\\n    function getSendLibrary(address _sender, uint32 _dstEid) public view returns (address lib) {\\n        lib = sendLibrary[_sender][_dstEid];\\n        if (lib == DEFAULT_LIB) {\\n            lib = defaultSendLibrary[_dstEid];\\n            if (lib == address(0x0)) revert Errors.LZ_DefaultSendLibUnavailable();\\n        }\\n    }\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _dstEid) public view returns (bool) {\\n        return sendLibrary[_sender][_dstEid] == DEFAULT_LIB;\\n    }\\n\\n    /// @dev the receiveLibrary can be lazily resolved that if not set it will point to the default configured by LayerZero\\n    function getReceiveLibrary(address _receiver, uint32 _srcEid) public view returns (address lib, bool isDefault) {\\n        lib = receiveLibrary[_receiver][_srcEid];\\n        if (lib == DEFAULT_LIB) {\\n            lib = defaultReceiveLibrary[_srcEid];\\n            if (lib == address(0x0)) revert Errors.LZ_DefaultReceiveLibUnavailable();\\n            isDefault = true;\\n        }\\n    }\\n\\n    /// @dev called when the endpoint checks if the msgLib attempting to verify the msg is the configured msgLib of the Oapp\\n    /// @dev this check provides the ability for Oapp to lock in a trusted msgLib\\n    /// @dev it will fist check if the msgLib is the currently configured one. then check if the msgLib is the one in grace period of msgLib versioning upgrade\\n    function isValidReceiveLibrary(\\n        address _receiver,\\n        uint32 _srcEid,\\n        address _actualReceiveLib\\n    ) public view returns (bool) {\\n        // early return true if the _actualReceiveLib is the currently configured one\\n        (address expectedReceiveLib, bool isDefault) = getReceiveLibrary(_receiver, _srcEid);\\n        if (_actualReceiveLib == expectedReceiveLib) {\\n            return true;\\n        }\\n\\n        // check the timeout condition otherwise\\n        // if the Oapp is using defaultReceiveLibrary, use the default Timeout config\\n        // otherwise, use the Timeout configured by the Oapp\\n        Timeout memory timeout = isDefault\\n            ? defaultReceiveLibraryTimeout[_srcEid]\\n            : receiveLibraryTimeout[_receiver][_srcEid];\\n\\n        // requires the _actualReceiveLib to be the same as the one in grace period and the grace period has not expired\\n        // block.number is uint256 so timeout.expiry must > 0, which implies a non-ZERO value\\n        if (timeout.lib == _actualReceiveLib && timeout.expiry > block.number) {\\n            // timeout lib set and has not expired\\n            return true;\\n        }\\n\\n        // returns false by default\\n        return false;\\n    }\\n\\n    //------- Owner interfaces\\n    /// @dev all libraries have to implement the erc165 interface to prevent wrong configurations\\n    /// @dev only owner\\n    function registerLibrary(address _lib) public onlyOwner {\\n        // must have the right interface\\n        if (!IERC165(_lib).supportsInterface(type(IMessageLib).interfaceId)) revert Errors.LZ_UnsupportedInterface();\\n        // must have not been registered\\n        if (isRegisteredLibrary[_lib]) revert Errors.LZ_AlreadyRegistered();\\n\\n        // insert into both the map and the list\\n        isRegisteredLibrary[_lib] = true;\\n        registeredLibraries.push(_lib);\\n\\n        emit LibraryRegistered(_lib);\\n    }\\n\\n    /// @dev owner setting the defaultSendLibrary\\n    /// @dev can set to the blockedLibrary, which is a registered library\\n    /// @dev the msgLib must enable the support before they can be registered to the endpoint as the default\\n    /// @dev only owner\\n    function setDefaultSendLibrary(\\n        uint32 _eid,\\n        address _newLib\\n    ) external onlyOwner onlyRegistered(_newLib) isSendLib(_newLib) onlySupportedEid(_newLib, _eid) {\\n        // must provide a different value\\n        if (defaultSendLibrary[_eid] == _newLib) revert Errors.LZ_SameValue();\\n        defaultSendLibrary[_eid] = _newLib;\\n        emit DefaultSendLibrarySet(_eid, _newLib);\\n    }\\n\\n    /// @dev owner setting the defaultSendLibrary\\n    /// @dev must be a registered library (including blockLibrary) with the eid support enabled\\n    /// @dev in version migration, it can add a grace period to the old library. if the grace period is 0, it will delete the timeout configuration.\\n    /// @dev only owner\\n    function setDefaultReceiveLibrary(\\n        uint32 _eid,\\n        address _newLib,\\n        uint256 _gracePeriod\\n    ) external onlyOwner onlyRegistered(_newLib) isReceiveLib(_newLib) onlySupportedEid(_newLib, _eid) {\\n        address oldLib = defaultReceiveLibrary[_eid];\\n        // must provide a different value\\n        if (oldLib == _newLib) revert Errors.LZ_SameValue();\\n\\n        defaultReceiveLibrary[_eid] = _newLib;\\n        emit DefaultReceiveLibrarySet(_eid, _newLib);\\n\\n        if (_gracePeriod > 0) {\\n            // override the current default timeout to the [old_lib + new expiry]\\n            Timeout storage timeout = defaultReceiveLibraryTimeout[_eid];\\n            timeout.lib = oldLib;\\n            timeout.expiry = block.number + _gracePeriod;\\n            emit DefaultReceiveLibraryTimeoutSet(_eid, oldLib, timeout.expiry);\\n        } else {\\n            // otherwise, remove the old configuration.\\n            delete defaultReceiveLibraryTimeout[_eid];\\n            emit DefaultReceiveLibraryTimeoutSet(_eid, oldLib, 0);\\n        }\\n    }\\n\\n    /// @dev owner setting the defaultSendLibrary\\n    /// @dev must be a registered library (including blockLibrary) with the eid support enabled\\n    /// @dev can used to (1) extend the current configuration (2) force remove the current configuration (3) change to a new configuration\\n    /// @param _expiry the block number when lib expires\\n    function setDefaultReceiveLibraryTimeout(\\n        uint32 _eid,\\n        address _lib,\\n        uint256 _expiry\\n    ) external onlyRegistered(_lib) isReceiveLib(_lib) onlySupportedEid(_lib, _eid) onlyOwner {\\n        if (_expiry == 0) {\\n            // force remove the current configuration\\n            delete defaultReceiveLibraryTimeout[_eid];\\n        } else {\\n            // override it with new configuration\\n            if (_expiry <= block.number) revert Errors.LZ_InvalidExpiry();\\n            Timeout storage timeout = defaultReceiveLibraryTimeout[_eid];\\n            timeout.lib = _lib;\\n            timeout.expiry = _expiry;\\n        }\\n        emit DefaultReceiveLibraryTimeoutSet(_eid, _lib, _expiry);\\n    }\\n\\n    /// @dev returns true only if both the default send/receive libraries are set\\n    function isSupportedEid(uint32 _eid) external view returns (bool) {\\n        return defaultSendLibrary[_eid] != address(0) && defaultReceiveLibrary[_eid] != address(0);\\n    }\\n\\n    //------- OApp interfaces\\n    /// @dev Oapp setting the sendLibrary\\n    /// @dev must be a registered library (including blockLibrary) with the eid support enabled\\n    /// @dev authenticated by the Oapp\\n    function setSendLibrary(\\n        address _oapp,\\n        uint32 _eid,\\n        address _newLib\\n    ) external onlyRegisteredOrDefault(_newLib) isSendLib(_newLib) onlySupportedEid(_newLib, _eid) {\\n        _assertAuthorized(_oapp);\\n\\n        // must provide a different value\\n        if (sendLibrary[_oapp][_eid] == _newLib) revert Errors.LZ_SameValue();\\n        sendLibrary[_oapp][_eid] = _newLib;\\n        emit SendLibrarySet(_oapp, _eid, _newLib);\\n    }\\n\\n    /// @dev Oapp setting the receiveLibrary\\n    /// @dev must be a registered library (including blockLibrary) with the eid support enabled\\n    /// @dev in version migration, it can add a grace period to the old library. if the grace period is 0, it will delete the timeout configuration.\\n    /// @dev authenticated by the Oapp\\n    /// @param _gracePeriod the number of blocks from now until oldLib expires\\n    function setReceiveLibrary(\\n        address _oapp,\\n        uint32 _eid,\\n        address _newLib,\\n        uint256 _gracePeriod\\n    ) external onlyRegisteredOrDefault(_newLib) isReceiveLib(_newLib) onlySupportedEid(_newLib, _eid) {\\n        _assertAuthorized(_oapp);\\n\\n        address oldLib = receiveLibrary[_oapp][_eid];\\n        // must provide new values\\n        if (oldLib == _newLib) revert Errors.LZ_SameValue();\\n        receiveLibrary[_oapp][_eid] = _newLib;\\n        emit ReceiveLibrarySet(_oapp, _eid, _newLib);\\n\\n        if (_gracePeriod > 0) {\\n            // to simplify the logic, we only allow to set timeout if neither the new lib nor old lib is DEFAULT_LIB, which would should read the default timeout configurations\\n            // (1) if the Oapp wants to fall back to the DEFAULT, then set the newLib to DEFAULT with grace period == 0\\n            // (2) if the Oapp wants to change to a non DEFAULT from DEFAULT, then set the newLib to 'non-default' with _gracePeriod == 0, then use setReceiveLibraryTimeout() interface\\n            if (oldLib == DEFAULT_LIB || _newLib == DEFAULT_LIB) revert Errors.LZ_OnlyNonDefaultLib();\\n\\n            // write to storage\\n            Timeout memory timeout = Timeout({ lib: oldLib, expiry: block.number + _gracePeriod });\\n            receiveLibraryTimeout[_oapp][_eid] = timeout;\\n            emit ReceiveLibraryTimeoutSet(_oapp, _eid, oldLib, timeout.expiry);\\n        } else {\\n            delete receiveLibraryTimeout[_oapp][_eid];\\n            emit ReceiveLibraryTimeoutSet(_oapp, _eid, oldLib, 0);\\n        }\\n    }\\n\\n    /// @dev Oapp setting the defaultSendLibrary\\n    /// @dev must be a registered library (including blockLibrary) with the eid support enabled\\n    /// @dev can used to (1) extend the current configuration (2)  force remove the current configuration (3) change to a new configuration\\n    /// @param _expiry the block number when lib expires\\n    function setReceiveLibraryTimeout(\\n        address _oapp,\\n        uint32 _eid,\\n        address _lib,\\n        uint256 _expiry\\n    ) external onlyRegistered(_lib) isReceiveLib(_lib) onlySupportedEid(_lib, _eid) {\\n        _assertAuthorized(_oapp);\\n\\n        (, bool isDefault) = getReceiveLibrary(_oapp, _eid);\\n        // if current library is DEFAULT, Oapp cant set the timeout\\n        if (isDefault) revert Errors.LZ_OnlyNonDefaultLib();\\n\\n        if (_expiry == 0) {\\n            // force remove the current configuration\\n            delete receiveLibraryTimeout[_oapp][_eid];\\n        } else {\\n            // override it with new configuration\\n            if (_expiry <= block.number) revert Errors.LZ_InvalidExpiry();\\n            Timeout storage timeout = receiveLibraryTimeout[_oapp][_eid];\\n            timeout.lib = _lib;\\n            timeout.expiry = _expiry;\\n        }\\n        emit ReceiveLibraryTimeoutSet(_oapp, _eid, _lib, _expiry);\\n    }\\n\\n    //------- library config setter/getter. all pass-through functions to the msgLib\\n\\n    /// @dev authenticated by the _oapp\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external onlyRegistered(_lib) {\\n        _assertAuthorized(_oapp);\\n\\n        IMessageLib(_lib).setConfig(_oapp, _params);\\n    }\\n\\n    /// @dev a view function to query the current configuration of the OApp\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view onlyRegistered(_lib) returns (bytes memory config) {\\n        return IMessageLib(_lib).getConfig(_eid, _oapp, _configType);\\n    }\\n\\n    function _assertAuthorized(address _oapp) internal virtual;\\n}\\n\",\"keccak256\":\"0x64330e51de72e8d38cfc0eb5527d36baada46df4bc14233d3a8ecaf98098d69a\",\"license\":\"LZBL-1.2\"},\"contracts/MessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { IMessagingChannel } from \\\"./interfaces/IMessagingChannel.sol\\\";\\nimport { Errors } from \\\"./libs/Errors.sol\\\";\\nimport { GUID } from \\\"./libs/GUID.sol\\\";\\n\\nabstract contract MessagingChannel is IMessagingChannel {\\n    bytes32 public constant EMPTY_PAYLOAD_HASH = bytes32(0);\\n    bytes32 public constant NIL_PAYLOAD_HASH = bytes32(type(uint256).max);\\n\\n    // The universally unique id (UUID) of this deployed Endpoint\\n    uint32 public immutable eid;\\n\\n    mapping(address receiver => mapping(uint32 srcEid => mapping(bytes32 sender => uint64 nonce)))\\n        public lazyInboundNonce;\\n    mapping(address receiver => mapping(uint32 srcEid => mapping(bytes32 sender => mapping(uint64 inboundNonce => bytes32 payloadHash))))\\n        public inboundPayloadHash;\\n    mapping(address sender => mapping(uint32 dstEid => mapping(bytes32 receiver => uint64 nonce))) public outboundNonce;\\n\\n    /// @param _eid is the universally unique id (UUID) of this deployed Endpoint\\n    constructor(uint32 _eid) {\\n        eid = _eid;\\n    }\\n\\n    /// @dev increase and return the next outbound nonce\\n    function _outbound(address _sender, uint32 _dstEid, bytes32 _receiver) internal returns (uint64 nonce) {\\n        unchecked {\\n            nonce = ++outboundNonce[_sender][_dstEid][_receiver];\\n        }\\n    }\\n\\n    /// @dev inbound won't update the nonce eagerly to allow unordered verification\\n    /// @dev instead, it will update the nonce lazily when the message is received\\n    /// @dev messages can only be cleared in order to preserve censorship-resistance\\n    function _inbound(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _payloadHash\\n    ) internal {\\n        if (_payloadHash == EMPTY_PAYLOAD_HASH) revert Errors.LZ_InvalidPayloadHash();\\n        inboundPayloadHash[_receiver][_srcEid][_sender][_nonce] = _payloadHash;\\n    }\\n\\n    /// @dev returns the max index of the longest gapless sequence of verified msg nonces.\\n    /// @dev the uninitialized value is 0. the first nonce is always 1\\n    /// @dev it starts from the lazyInboundNonce (last checkpoint) and iteratively check if the next nonce has been verified\\n    /// @dev this function can OOG if too many backlogs, but it can be trivially fixed by just clearing some prior messages\\n    /// @dev NOTE: Oapp explicitly skipped nonces count as \\\"verified\\\" for these purposes\\n    /// @dev eg. [1,2,3,4,6,7] => 4, [1,2,6,8,10] => 2, [1,3,4,5,6] => 1\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) public view returns (uint64) {\\n        uint64 nonceCursor = lazyInboundNonce[_receiver][_srcEid][_sender];\\n\\n        // find the effective inbound currentNonce\\n        unchecked {\\n            while (_hasPayloadHash(_receiver, _srcEid, _sender, nonceCursor + 1)) {\\n                ++nonceCursor;\\n            }\\n        }\\n        return nonceCursor;\\n    }\\n\\n    /// @dev checks if the storage slot is not initialized. Assumes computationally infeasible that payload can hash to 0\\n    function _hasPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) internal view returns (bool) {\\n        return inboundPayloadHash[_receiver][_srcEid][_sender][_nonce] != EMPTY_PAYLOAD_HASH;\\n    }\\n\\n    /// @dev the caller must provide _nonce to prevent skipping the unintended nonce\\n    /// @dev it could happen in some race conditions, e.g. to skip nonce 3, but nonce 3 was consumed first\\n    /// @dev usage: skipping the next nonce to prevent message verification, e.g. skip a message when Precrime throws alerts\\n    /// @dev if the Oapp wants to skip a verified message, it should call the clear() function instead\\n    /// @dev after skipping, the lazyInboundNonce is set to the provided nonce, which makes the inboundNonce also the provided nonce\\n    /// @dev ie. allows the Oapp to increment the lazyInboundNonce without having had that corresponding msg be verified\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external {\\n        _assertAuthorized(_oapp);\\n\\n        if (_nonce != inboundNonce(_oapp, _srcEid, _sender) + 1) revert Errors.LZ_InvalidNonce(_nonce);\\n        lazyInboundNonce[_oapp][_srcEid][_sender] = _nonce;\\n        emit InboundNonceSkipped(_srcEid, _sender, _oapp, _nonce);\\n    }\\n\\n    /// @dev Marks a packet as verified, but disallows execution until it is re-verified.\\n    /// @dev Reverts if the provided _payloadHash does not match the currently verified payload hash.\\n    /// @dev A non-verified nonce can be nilified by passing EMPTY_PAYLOAD_HASH for _payloadHash.\\n    /// @dev Assumes the computational intractability of finding a payload that hashes to bytes32.max.\\n    /// @dev Authenticated by the caller\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external {\\n        _assertAuthorized(_oapp);\\n\\n        bytes32 curPayloadHash = inboundPayloadHash[_oapp][_srcEid][_sender][_nonce];\\n        if (curPayloadHash != _payloadHash) revert Errors.LZ_PayloadHashNotFound(curPayloadHash, _payloadHash);\\n        if (_nonce <= lazyInboundNonce[_oapp][_srcEid][_sender] && curPayloadHash == EMPTY_PAYLOAD_HASH)\\n            revert Errors.LZ_InvalidNonce(_nonce);\\n        // set it to nil\\n        inboundPayloadHash[_oapp][_srcEid][_sender][_nonce] = NIL_PAYLOAD_HASH;\\n        emit PacketNilified(_srcEid, _sender, _oapp, _nonce, _payloadHash);\\n    }\\n\\n    /// @dev Marks a nonce as unexecutable and un-verifiable. The nonce can never be re-verified or executed.\\n    /// @dev Reverts if the provided _payloadHash does not match the currently verified payload hash.\\n    /// @dev Only packets with nonces less than or equal to the lazy inbound nonce can be burned.\\n    /// @dev Reverts if the nonce has already been executed.\\n    /// @dev Authenticated by the caller\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external {\\n        _assertAuthorized(_oapp);\\n\\n        bytes32 curPayloadHash = inboundPayloadHash[_oapp][_srcEid][_sender][_nonce];\\n        if (curPayloadHash != _payloadHash) revert Errors.LZ_PayloadHashNotFound(curPayloadHash, _payloadHash);\\n        if (curPayloadHash == EMPTY_PAYLOAD_HASH || _nonce > lazyInboundNonce[_oapp][_srcEid][_sender])\\n            revert Errors.LZ_InvalidNonce(_nonce);\\n        delete inboundPayloadHash[_oapp][_srcEid][_sender][_nonce];\\n        emit PacketBurnt(_srcEid, _sender, _oapp, _nonce, _payloadHash);\\n    }\\n\\n    /// @dev calling this function will clear the stored message and increment the lazyInboundNonce to the provided nonce\\n    /// @dev if a lot of messages are queued, the messages can be cleared with a smaller step size to prevent OOG\\n    /// @dev NOTE: this function does not change inboundNonce, it only changes the lazyInboundNonce up to the provided nonce\\n    function _clearPayload(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal returns (bytes32 actualHash) {\\n        uint64 currentNonce = lazyInboundNonce[_receiver][_srcEid][_sender];\\n        if (_nonce > currentNonce) {\\n            unchecked {\\n                // try to lazily update the inboundNonce till the _nonce\\n                for (uint64 i = currentNonce + 1; i <= _nonce; ++i) {\\n                    if (!_hasPayloadHash(_receiver, _srcEid, _sender, i)) revert Errors.LZ_InvalidNonce(i);\\n                }\\n                lazyInboundNonce[_receiver][_srcEid][_sender] = _nonce;\\n            }\\n        }\\n\\n        // check the hash of the payload to verify the executor has given the proper payload that has been verified\\n        actualHash = keccak256(_payload);\\n        bytes32 expectedHash = inboundPayloadHash[_receiver][_srcEid][_sender][_nonce];\\n        if (expectedHash != actualHash) revert Errors.LZ_PayloadHashNotFound(expectedHash, actualHash);\\n\\n        // remove it from the storage\\n        delete inboundPayloadHash[_receiver][_srcEid][_sender][_nonce];\\n    }\\n\\n    /// @dev returns the GUID for the next message given the path\\n    /// @dev the Oapp might want to include the GUID into the message in some cases\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32) {\\n        uint64 nextNonce = outboundNonce[_sender][_dstEid][_receiver] + 1;\\n        return GUID.generate(nextNonce, eid, _sender, _dstEid, _receiver);\\n    }\\n\\n    function _assertAuthorized(address _oapp) internal virtual;\\n}\\n\",\"keccak256\":\"0x8ab8cb12c8beba699c1a7f22ffa812ac553f7038326d0c0d0af77253005cfe73\",\"license\":\"LZBL-1.2\"},\"contracts/MessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { IMessagingComposer } from \\\"./interfaces/IMessagingComposer.sol\\\";\\nimport { ILayerZeroComposer } from \\\"./interfaces/ILayerZeroComposer.sol\\\";\\nimport { Errors } from \\\"./libs/Errors.sol\\\";\\n\\nabstract contract MessagingComposer is IMessagingComposer {\\n    bytes32 private constant NO_MESSAGE_HASH = bytes32(0);\\n    bytes32 private constant RECEIVED_MESSAGE_HASH = bytes32(uint256(1));\\n\\n    mapping(address from => mapping(address to => mapping(bytes32 guid => mapping(uint16 index => bytes32 messageHash))))\\n        public composeQueue;\\n\\n    /// @dev the Oapp sends the lzCompose message to the endpoint\\n    /// @dev the composer MUST assert the sender because anyone can send compose msg with this function\\n    /// @dev with the same GUID, the Oapp can send compose to multiple _composer at the same time\\n    /// @dev authenticated by the msg.sender\\n    /// @param _to the address which will receive the composed message\\n    /// @param _guid the message guid\\n    /// @param _message the message\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external {\\n        // must have not been sent before\\n        if (composeQueue[msg.sender][_to][_guid][_index] != NO_MESSAGE_HASH) revert Errors.LZ_ComposeExists();\\n        composeQueue[msg.sender][_to][_guid][_index] = keccak256(_message);\\n        emit ComposeSent(msg.sender, _to, _guid, _index, _message);\\n    }\\n\\n    /// @dev execute a composed messages from the sender to the composer (receiver)\\n    /// @dev the execution provides the execution context (caller, extraData) to the receiver.\\n    ///      the receiver can optionally assert the caller and validate the untrusted extraData\\n    /// @dev can not re-entrant\\n    /// @param _from the address which sends the composed message. in most cases, it is the Oapp's address.\\n    /// @param _to the address which receives the composed message\\n    /// @param _guid the message guid\\n    /// @param _message the message\\n    /// @param _extraData the extra data provided by the executor. this data is untrusted and should be validated.\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable {\\n        // assert the validity\\n        bytes32 expectedHash = composeQueue[_from][_to][_guid][_index];\\n        bytes32 actualHash = keccak256(_message);\\n        if (expectedHash != actualHash) revert Errors.LZ_ComposeNotFound(expectedHash, actualHash);\\n\\n        // marks the message as received to prevent reentrancy\\n        // cannot just delete the value, otherwise the message can be sent again and could result in some undefined behaviour\\n        // even though the sender(composing Oapp) is implicitly fully trusted by the composer.\\n        // eg. sender may not even realize it has such a bug\\n        composeQueue[_from][_to][_guid][_index] = RECEIVED_MESSAGE_HASH;\\n        ILayerZeroComposer(_to).lzCompose{ value: msg.value }(_from, _guid, _message, msg.sender, _extraData);\\n        emit ComposeDelivered(_from, _to, _guid, _index);\\n    }\\n\\n    /// @param _from the address which sends the composed message\\n    /// @param _to the address which receives the composed message\\n    /// @param _guid the message guid\\n    /// @param _message the message\\n    /// @param _extraData the extra data provided by the executor\\n    /// @param _reason the reason why the message is not received\\n    function lzComposeAlert(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        uint256 _gas,\\n        uint256 _value,\\n        bytes calldata _message,\\n        bytes calldata _extraData,\\n        bytes calldata _reason\\n    ) external {\\n        emit LzComposeAlert(_from, _to, msg.sender, _guid, _index, _gas, _value, _message, _extraData, _reason);\\n    }\\n}\\n\",\"keccak256\":\"0x20d36578e810e75346daf064813b76a177087214cae77628b1f9d43798cb52d1\",\"license\":\"LZBL-1.2\"},\"contracts/MessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { IMessagingContext } from \\\"./interfaces/IMessagingContext.sol\\\";\\nimport { Errors } from \\\"./libs/Errors.sol\\\";\\n\\n/// this contract acts as a non-reentrancy guard and a source of messaging context\\n/// the context includes the remote eid and the sender address\\n/// it separates the send and receive context to allow messaging receipts (send back on receive())\\nabstract contract MessagingContext is IMessagingContext {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private _sendContext = NOT_ENTERED;\\n\\n    /// @dev the sendContext is set to 8 bytes 0s + 4 bytes eid + 20 bytes sender\\n    modifier sendContext(uint32 _dstEid, address _sender) {\\n        if (_sendContext != NOT_ENTERED) revert Errors.LZ_SendReentrancy();\\n        _sendContext = (uint256(_dstEid) << 160) | uint160(_sender);\\n        _;\\n        _sendContext = NOT_ENTERED;\\n    }\\n\\n    /// @dev returns true if sending message\\n    function isSendingMessage() public view returns (bool) {\\n        return _sendContext != NOT_ENTERED;\\n    }\\n\\n    /// @dev returns (eid, sender) if sending message, (0, 0) otherwise\\n    function getSendContext() external view returns (uint32, address) {\\n        return isSendingMessage() ? _getSendContext(_sendContext) : (0, address(0));\\n    }\\n\\n    function _getSendContext(uint256 _context) internal pure returns (uint32, address) {\\n        return (uint32(_context >> 160), address(uint160(_context)));\\n    }\\n}\\n\",\"keccak256\":\"0x9616f3bd0d7293c9723f2ddf86f9f7030fbd99213c9748557eec8f6d13b25420\",\"license\":\"LZBL-1.2\"},\"contracts/interfaces/ILayerZeroComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ILayerZeroComposer\\n */\\ninterface ILayerZeroComposer {\\n    /**\\n     * @notice Composes a LayerZero message from an OApp.\\n     * @param _from The address initiating the composition, typically the OApp where the lzReceive was called.\\n     * @param _guid The unique identifier for the corresponding LayerZero src/dst tx.\\n     * @param _message The composed message payload in bytes. NOT necessarily the same payload passed via lzReceive.\\n     * @param _executor The address of the executor for the composed message.\\n     * @param _extraData Additional arbitrary data in bytes passed by the entity who executes the lzCompose.\\n     */\\n    function lzCompose(\\n        address _from,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x62150940fb5a3146dd703f8f8db0d054dffed5517fb9ef9ba37550a06e633f8c\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary Errors {\\n    error LZ_LzTokenUnavailable();\\n    error LZ_InvalidReceiveLibrary();\\n    error LZ_InvalidNonce(uint64 nonce);\\n    error LZ_InvalidArgument();\\n    error LZ_InvalidExpiry();\\n    error LZ_InvalidAmount(uint256 required, uint256 supplied);\\n    error LZ_OnlyRegisteredOrDefaultLib();\\n    error LZ_OnlyRegisteredLib();\\n    error LZ_OnlyNonDefaultLib();\\n    error LZ_Unauthorized();\\n    error LZ_DefaultSendLibUnavailable();\\n    error LZ_DefaultReceiveLibUnavailable();\\n    error LZ_PathNotInitializable();\\n    error LZ_PathNotVerifiable();\\n    error LZ_OnlySendLib();\\n    error LZ_OnlyReceiveLib();\\n    error LZ_UnsupportedEid();\\n    error LZ_UnsupportedInterface();\\n    error LZ_AlreadyRegistered();\\n    error LZ_SameValue();\\n    error LZ_InvalidPayloadHash();\\n    error LZ_PayloadHashNotFound(bytes32 expected, bytes32 actual);\\n    error LZ_ComposeNotFound(bytes32 expected, bytes32 actual);\\n    error LZ_ComposeExists();\\n    error LZ_SendReentrancy();\\n    error LZ_NotImplemented();\\n    error LZ_InsufficientFee(\\n        uint256 requiredNative,\\n        uint256 suppliedNative,\\n        uint256 requiredLzToken,\\n        uint256 suppliedLzToken\\n    );\\n    error LZ_ZeroLzTokenFee();\\n}\\n\",\"keccak256\":\"0x35bcd6ca99c4c8d9f7d8413d1b92fb4a4d4a420ce3bf64b0fb01e68e6bcf2fa7\",\"license\":\"LZBL-1.2\"},\"contracts/libs/GUID.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { AddressCast } from \\\"./AddressCast.sol\\\";\\n\\nlibrary GUID {\\n    using AddressCast for address;\\n\\n    function generate(\\n        uint64 _nonce,\\n        uint32 _srcEid,\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes32 _receiver\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_nonce, _srcEid, _sender.toBytes32(), _dstEid, _receiver));\\n    }\\n}\\n\",\"keccak256\":\"0x8a44524af7deb96593f6b5606e9973654a113e1687809f2e45d4a91ba89862d5\",\"license\":\"LZBL-1.2\"},\"contracts/libs/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ADDRESS_ZERO = address(0);\\n\\n    error Transfer_NativeFailed(address _to, uint256 _value);\\n    error Transfer_ToAddressIsZero();\\n\\n    function native(address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        (bool success, ) = _to.call{ value: _value }(\\\"\\\");\\n        if (!success) revert Transfer_NativeFailed(_to, _value);\\n    }\\n\\n    function token(address _token, address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        IERC20(_token).safeTransfer(_to, _value);\\n    }\\n\\n    function nativeOrToken(address _token, address _to, uint256 _value) internal {\\n        if (_token == ADDRESS_ZERO) {\\n            native(_to, _value);\\n        } else {\\n            token(_token, _to, _value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x621d6dd5b8b7e827351459fff4ac87c16ba4656757592cf67de8b199aea4cf9a\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/BlockedMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport { IMessageLib, MessageLibType } from \\\"../interfaces/IMessageLib.sol\\\";\\nimport { Errors } from \\\"../libs/Errors.sol\\\";\\n\\ncontract BlockedMessageLib is ERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return interfaceId == type(IMessageLib).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function version() external pure returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (type(uint64).max, type(uint8).max, 2);\\n    }\\n\\n    function messageLibType() external pure returns (MessageLibType) {\\n        return MessageLibType.SendAndReceive;\\n    }\\n\\n    function isSupportedEid(uint32) external pure returns (bool) {\\n        return true;\\n    }\\n\\n    fallback() external {\\n        revert Errors.LZ_NotImplemented();\\n    }\\n}\\n\",\"keccak256\":\"0xb2b55968b26294139742adee6c155897c8334f4c6bf72f1940456cc84e6fbab9\",\"license\":\"LZBL-1.2\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103605760003560e01c80639132e5c3116101c6578063c9fc7bcd116100f7578063ddc28c5811610095578063e8964e811161006f578063e8964e81146110a0578063ef667aa1146110da578063f2fde38b1461113f578063f64be4c71461117957600080fd5b8063ddc28c5814610ff1578063e1758bd814611038578063e4fe1d941461106657600080fd5b8063d4b4ec8f116100d1578063d4b4ec8f14610ecd578063d70b890214610f07578063dc706a6214610f41578063dc93c8a214610f8b57600080fd5b8063c9fc7bcd14610e03578063ca5eb5e114610e64578063cb5026b914610e9e57600080fd5b8063a7229fd911610164578063aafea3121161013e578063aafea31214610d1b578063b96a277f14610d55578063c28e0eed14610d8f578063c9a54a9914610dc957600080fd5b8063a7229fd914610c6d578063a825d74714610ca7578063aafe5e0714610ce157600080fd5b80639c6d7340116101a05780639c6d734014610b5d5780639d7f977514610bbf578063a0dd43fc14610bf9578063a718531b14610c3357600080fd5b80639132e5c314610ad457806391d20fa114610b105780639535ff3014610b2357600080fd5b80635b17bb70116102a05780636f50a8031161023e57806379624ca91161021857806379624ca9146109f55780637cb5901214610a28578063861e1ca514610a625780638da5cb5b14610a9c57600080fd5b80636f50a80314610928578063715018a61461097857806373318091146109a757600080fd5b80636a14d7151161027a5780636a14d715146108015780636bf73fa31461083b5780636dbd9f90146108755780636e83f5bb146108af57600080fd5b80635b17bb70146107025780636750cd4c1461077d578063697fe6b6146107c757600080fd5b80632baf0be71161030d578063402f8468116102e7578063402f8468146105a457806340f80683146105fd578063416ecebf14610637578063587cde1e1461069a57600080fd5b80632baf0be7146104ad5780632e80fbf31461050957806335d330b01461054357600080fd5b80632637a4501161033e5780632637a4501461040c5780632a56c1b01461042c5780632b3197b91461046657600080fd5b80630c0c389e1461036557806314f651a91461037a578063183c834f146103d2575b600080fd5b610378610373366004615135565b6111c9565b005b34801561038657600080fd5b50d3801561039357600080fd5b50d280156103a057600080fd5b506103a96112e0565b6040805163ffffffff90931683526001600160a01b039091166020830152015b60405180910390f35b3480156103de57600080fd5b50d380156103eb57600080fd5b50d280156103f857600080fd5b506103786104073660046151e5565b611312565b61041f61041a366004615230565b61169d565b6040516103c99190615283565b34801561043857600080fd5b50d3801561044557600080fd5b50d2801561045257600080fd5b506103786104613660046152c6565b611806565b34801561047257600080fd5b50d3801561047f57600080fd5b50d2801561048c57600080fd5b506104a061049b366004615336565b6118c4565b6040516103c991906153f8565b3480156104b957600080fd5b50d380156104c657600080fd5b50d280156104d357600080fd5b506104fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6040519081526020016103c9565b34801561051557600080fd5b50d3801561052257600080fd5b50d2801561052f57600080fd5b5061037861053e366004615423565b6119df565b34801561054f57600080fd5b50d3801561055c57600080fd5b50d2801561056957600080fd5b506104fb61057836600461548a565b600c60209081526000948552604080862082529385528385208152918452828420909152825290205481565b3480156105b057600080fd5b50d380156105bd57600080fd5b50d280156105ca57600080fd5b506105de6105d93660046154cc565b611bb6565b604080516001600160a01b0390931683529015156020830152016103c9565b34801561060957600080fd5b50d3801561061657600080fd5b50d2801561062357600080fd5b50610378610632366004615423565b611c4d565b34801561064357600080fd5b50d3801561065057600080fd5b50d2801561065d57600080fd5b506106857f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016103c9565b3480156106a657600080fd5b50d380156106b357600080fd5b50d280156106c057600080fd5b506106ea6106cf3660046154f6565b600f602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103c9565b34801561070e57600080fd5b50d3801561071b57600080fd5b50d2801561072857600080fd5b50610764610737366004615511565b600160209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016103c9565b34801561078957600080fd5b50d3801561079657600080fd5b50d280156107a357600080fd5b506107b76107b236600461554d565b611dfd565b60405190151581526020016103c9565b3480156107d357600080fd5b50d380156107e057600080fd5b50d280156107ed57600080fd5b506103786107fc366004615568565b611e4d565b34801561080d57600080fd5b50d3801561081a57600080fd5b50d2801561082757600080fd5b506103786108363660046151e5565b611ec2565b34801561084757600080fd5b50d3801561085457600080fd5b50d2801561086157600080fd5b50610378610870366004615666565b6123c2565b34801561088157600080fd5b50d3801561088e57600080fd5b50d2801561089b57600080fd5b506103786108aa36600461574a565b61242c565b3480156108bb57600080fd5b50d380156108c857600080fd5b50d280156108d557600080fd5b506109096108e436600461554d565b600b60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152016103c9565b34801561093457600080fd5b50d3801561094157600080fd5b50d2801561094e57600080fd5b506106ea61095d36600461554d565b600a602052600090815260409020546001600160a01b031681565b34801561098457600080fd5b50d3801561099157600080fd5b50d2801561099e57600080fd5b50610378612500565b3480156109b357600080fd5b50d380156109c057600080fd5b50d280156109cd57600080fd5b506106ea7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a0157600080fd5b50d38015610a0e57600080fd5b50d28015610a1b57600080fd5b50600d54600114156107b7565b348015610a3457600080fd5b50d38015610a4157600080fd5b50d28015610a4e57600080fd5b50610378610a5d3660046157db565b612514565b348015610a6e57600080fd5b50d38015610a7b57600080fd5b50d28015610a8857600080fd5b506107b7610a9736600461582d565b612619565b348015610aa857600080fd5b50d38015610ab557600080fd5b50d28015610ac257600080fd5b506000546001600160a01b03166106ea565b348015610ae057600080fd5b50d38015610aed57600080fd5b50d28015610afa57600080fd5b50610b03612686565b6040516103c99190615858565b610378610b1e3660046158a5565b6126e8565b348015610b2f57600080fd5b50d38015610b3c57600080fd5b50d28015610b4957600080fd5b50610378610b58366004615950565b6128aa565b348015610b6957600080fd5b50d38015610b7657600080fd5b50d28015610b8357600080fd5b50610764610b92366004615511565b600360209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b348015610bcb57600080fd5b50d38015610bd857600080fd5b50d28015610be557600080fd5b506107b7610bf4366004615950565b612ba3565b348015610c0557600080fd5b50d38015610c1257600080fd5b50d28015610c1f57600080fd5b50610764610c2e366004615511565b612c7d565b348015610c3f57600080fd5b50d38015610c4c57600080fd5b50d28015610c5957600080fd5b50610378610c68366004615993565b612d16565b348015610c7957600080fd5b50d38015610c8657600080fd5b50d28015610c9357600080fd5b50610378610ca23660046159bf565b61311f565b348015610cb357600080fd5b50d38015610cc057600080fd5b50d28015610ccd57600080fd5b50610378610cdc3660046159dd565b613137565b348015610ced57600080fd5b50d38015610cfa57600080fd5b50d28015610d0757600080fd5b506104fb610d16366004615511565b6132cf565b348015610d2757600080fd5b50d38015610d3457600080fd5b50d28015610d4157600080fd5b50610378610d50366004615a1a565b6133de565b348015610d6157600080fd5b50d38015610d6e57600080fd5b50d28015610d7b57600080fd5b506106ea610d8a3660046154cc565b61369c565b348015610d9b57600080fd5b50d38015610da857600080fd5b50d28015610db557600080fd5b50610378610dc43660046154f6565b613724565b348015610dd557600080fd5b50d38015610de257600080fd5b50d28015610def57600080fd5b506107b7610dfe36600461582d565b613799565b348015610e0f57600080fd5b50d38015610e1c57600080fd5b50d28015610e2957600080fd5b506104fb610e38366004615a36565b600260209081526000948552604080862082529385528385208152918452828420909152825290205481565b348015610e7057600080fd5b50d38015610e7d57600080fd5b50d28015610e8a57600080fd5b50610378610e993660046154f6565b6137ff565b348015610eaa57600080fd5b50d38015610eb757600080fd5b50d28015610ec457600080fd5b506104fb600081565b348015610ed957600080fd5b50d38015610ee657600080fd5b50d28015610ef357600080fd5b50610378610f02366004615993565b613877565b348015610f1357600080fd5b50d38015610f2057600080fd5b50d28015610f2d57600080fd5b50610378610f3c366004615a36565b613b7b565b348015610f4d57600080fd5b50d38015610f5a57600080fd5b50d28015610f6757600080fd5b506107b7610f763660046154f6565b60056020526000908152604090205460ff1681565b348015610f9757600080fd5b50d38015610fa457600080fd5b50d28015610fb157600080fd5b506107b7610fc03660046154cc565b6001600160a01b03918216600090815260066020908152604080832063ffffffff9490941683529290522054161590565b348015610ffd57600080fd5b50d3801561100a57600080fd5b50d2801561101757600080fd5b5061102b611026366004615230565b613c9e565b6040516103c99190615a78565b34801561104457600080fd5b50d3801561105157600080fd5b50d2801561105e57600080fd5b5060006106ea565b34801561107257600080fd5b50d3801561107f57600080fd5b50d2801561108c57600080fd5b50600e546106ea906001600160a01b031681565b3480156110ac57600080fd5b50d380156110b957600080fd5b50d280156110c657600080fd5b506103786110d53660046154f6565b613fc9565b3480156110e657600080fd5b50d380156110f357600080fd5b50d2801561110057600080fd5b5061090961110f3660046154cc565b6008602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b34801561114b57600080fd5b50d3801561115857600080fd5b50d2801561116557600080fd5b506103786111743660046154f6565b6141c7565b34801561118557600080fd5b50d3801561119257600080fd5b50d2801561119f57600080fd5b506106ea6111ae36600461554d565b6009602052600090815260409020546001600160a01b031681565b611218866111da60208a018a61554d565b60208a01356111ef60608c0160408d01615a8f565b89898960405160200161120493929190615aaa565b604051602081830303815290604052614271565b506040517f13137d650000000000000000000000000000000000000000000000000000000081526001600160a01b038716906313137d6590349061126c908b908a908a908a9033908b908b90600401615b47565b6000604051808303818588803b15801561128557600080fd5b505af1158015611299573d6000803e3d6000fd5b50505050507f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca0487876040516112cf929190615b9e565b60405180910390a150505050505050565b6000806112f0600d546001141590565b6112fc5760008061130a565b61130a600d5460a081901c91565b915091509091565b6001600160a01b038216600090815260056020526040902054829060ff16611366576040517f378b1de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03811615611422576000816001600160a01b0316631881d94d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113da9190615bf1565b60028111156113eb576113eb615bc2565b03611422576040517f84ead63600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83856001600160a01b038216156114f0576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba9190615c20565b6114f0576040517f391daaa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114f9886144b4565b60006115058989611bb6565b9150508015611540576040517f3c075f7500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b856000036115a0576001600160a01b038916600090815260086020908152604080832063ffffffff8c168452909152812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010155611637565b4386116115d9576040517f05df9f2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03898116600090815260086020908152604080832063ffffffff8d168452909152902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169189169190911781556001018690555b604080516001600160a01b03808c16825263ffffffff8b166020830152891691810191909152606081018790527f4e0a5bbfa0c11a64effb1ada324b5437a17272e1aed9320398715ef71bb20928906080015b60405180910390a1505050505050505050565b6116a561505d565b6116b2602084018461554d565b336001600d54146116ef576040517fee120b0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b77ffffffff000000000000000000000000000000000000000060a083811b919091166001600160a01b03831617600d5561172e90860160808701615c3d565b80156117435750600e546001600160a01b0316155b1561177a576040517f5af6d2aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080611787338861451e565b9150915060006117943490565b905060006117b06117ab60a08b0160808c01615c3d565b614802565b90506117c1846040015183836148d0565b600e546040850151602001516117e3916001600160a01b03169083868c614937565b6040840151516117f59083858b614964565b50506001600d555095945050505050565b61180f856144b4565b600083838360405160200161182693929190615aaa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905061188286611867602088018861554d565b602088013561187c60608a0160408b01615a8f565b85614271565b507f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca0485876040516118b4929190615b9e565b60405180910390a1505050505050565b6001600160a01b038316600090815260056020526040902054606090849060ff1661191b576040517f378b1de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f9c33abf700000000000000000000000000000000000000000000000000000000815263ffffffff80861660048301526001600160a01b0388811660248401529085166044830152861690639c33abf790606401600060405180830381865afa15801561198f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526119d59190810190615d25565b9695505050505050565b6119e8856144b4565b6001600160a01b038516600090815260026020908152604080832063ffffffff881684528252808320868452825280832067ffffffffffffffff86168452909152902054818114611a74576040517f7182306f00000000000000000000000000000000000000000000000000000000815260048101829052602481018390526044015b60405180910390fd5b6001600160a01b038616600090815260016020908152604080832063ffffffff89168452825280832087845290915290205467ffffffffffffffff90811690841611801590611ac1575080155b15611b04576040517fc09b635000000000000000000000000000000000000000000000000000000000815267ffffffffffffffff84166004820152602401611a6b565b6001600160a01b038616600081815260026020908152604080832063ffffffff8a16808552908352818420898552835281842067ffffffffffffffff8916808652908452938290207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905581519081529182018890528101929092526060820152608081018390527faf0450c392c4f702515a457a362328c8aa21916048ca6d0419e248b30cb552929060a0016118b4565b6001600160a01b03808316600090815260076020908152604080832063ffffffff861684529091528120549091169081611c465763ffffffff83166000908152600a60205260409020546001600160a01b0316915081611c42576040517f78e84d0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060015b9250929050565b611c56856144b4565b6001600160a01b038516600090815260026020908152604080832063ffffffff881684528252808320868452825280832067ffffffffffffffff86168452909152902054818114611cdd576040517f7182306f0000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401611a6b565b801580611d2857506001600160a01b038616600090815260016020908152604080832063ffffffff89168452825280832087845290915290205467ffffffffffffffff908116908416115b15611d6b576040517fc09b635000000000000000000000000000000000000000000000000000000000815267ffffffffffffffff84166004820152602401611a6b565b6001600160a01b038616600081815260026020908152604080832063ffffffff8a16808552908352818420898552835281842067ffffffffffffffff89168086529084528285209490945581519081529182018890528101929092526060820152608081018390527f7f68a37a6e69a0de35024a234558f9efe4b33b58657753d21eaaa82d51c3510e9060a0016118b4565b63ffffffff81166000908152600960205260408120546001600160a01b031615801590611e47575063ffffffff82166000908152600a60205260409020546001600160a01b031615155b92915050565b336001600160a01b03168b6001600160a01b03168d6001600160a01b03167f8a0b1dce321c5c5fb42349bce46d18087c04140de520917661fb923e44a904b98d8d8d8d8d8d8d8d8d8d604051611eac9a99989796959493929190615d5a565b60405180910390a4505050505050505050505050565b6001600160a01b038216600090815260056020526040902054829060ff16158015611ef557506001600160a01b03811615155b15611f2c576040517fa4ff2ec300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03811615611fe8576000816001600160a01b0316631881d94d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa09190615bf1565b6002811115611fb157611fb1615bc2565b03611fe8576040517f84ead63600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83856001600160a01b038216156120b6576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190615c20565b6120b6576040517f391daaa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120bf886144b4565b6001600160a01b03808916600090815260076020908152604080832063ffffffff8c16845290915290205481169087168103612127576040517fd0ecb66b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03898116600081815260076020908152604080832063ffffffff8e168085529083529281902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016958d1695861790558051938452908301919091528101919091527fcd6f92f5ac6185a5acfa02c92090746cec64d777269cbcd0ed031e396657a1c29060600160405180910390a18515612317576001600160a01b03811615806121e257506001600160a01b038716155b15612219576040517f3c075f7500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060400160405280836001600160a01b0316815260200188436122419190615df2565b90526001600160a01b03808c16600090815260086020908152604080832063ffffffff8f1684528252918290208451815494167fffffffffffffffffffffffff00000000000000000000000000000000000000009094169390931783558301516001909201829055519192507f4e0a5bbfa0c11a64effb1ada324b5437a17272e1aed9320398715ef71bb2092891612309918d918d9187916001600160a01b03948516815263ffffffff93909316602084015292166040820152606081019190915260800190565b60405180910390a1506123b7565b6001600160a01b03898116600081815260086020908152604080832063ffffffff8e1680855290835281842080547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001018490558151948552918401919091529284169282019290925260608101919091527f4e0a5bbfa0c11a64effb1ada324b5437a17272e1aed9320398715ef71bb209289060800161168a565b505050505050505050565b336001600160a01b03168a6001600160a01b03167f7edfa10fe10193301ad8a8bea7e968c7bcabcc64981f368e3aeada40ce26ae2c8d8c8c8c8c8c8c8c8c8c6040516124179a99989796959493929190615e05565b60405180910390a35050505050505050505050565b6001600160a01b038316600090815260056020526040902054839060ff16612480576040517f378b1de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612489856144b4565b6040517f20efd7220000000000000000000000000000000000000000000000000000000081526001600160a01b038516906320efd722906124d290889087908790600401615e64565b600060405180830381600087803b1580156124ec57600080fd5b505af11580156123b7573d6000803e3d6000fd5b61250861498e565b6125126000614a02565b565b336000908152600c602090815260408083206001600160a01b03891684528252808320878452825280832061ffff8716845290915290205415612583576040517f1508219400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181604051612593929190615fb2565b60408051918290038220336000818152600c60209081528482206001600160a01b038c16835281528482208a8352815284822061ffff8a168352905292909220557f3d52ff888d033fd3dd1d8057da59e850c91d91a72c41dfa445b247dfedeb6dc19161260a919088908890889088908890615fc2565b60405180910390a15050505050565b6001600160a01b0381166000908152600160209081526040822061267f918591859185906126499085018561554d565b63ffffffff1681526020808201929092526040908101600090812089840135825290925290205467ffffffffffffffff16614a6a565b9392505050565b606060048054806020026020016040519081016040528092919081815260200182805480156126de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126c0575b5050505050905090565b6001600160a01b038089166000908152600c60209081526040808320938b168352928152828220898352815282822061ffff8916835290528181205491516127339087908790615fb2565b60405180910390209050808214612780576040517f35ca595f0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401611a6b565b6001600160a01b03808b166000908152600c60209081526040808320938d168084529382528083208c8452825280832061ffff8c1684529091529081902060019055517fd0a1026000000000000000000000000000000000000000000000000000000000815263d0a10260903490612808908e908d908c908c9033908d908d9060040161600b565b6000604051808303818588803b15801561282157600080fd5b505af1158015612835573d6000803e3d6000fd5b50505050507e36c98efcf9e6641dfbc9051f66f405253e8e0c2ab4a24dccda15595b7378c88a8a8a8a60405161289694939291906001600160a01b039485168152929093166020830152604082015261ffff91909116606082015260800190565b60405180910390a150505050505050505050565b6001600160a01b038116600090815260056020526040902054819060ff161580156128dd57506001600160a01b03811615155b15612914576040517fa4ff2ec300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816001600160a01b038116156129d0576001816001600160a01b0316631881d94d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129889190615bf1565b600281111561299957612999615bc2565b036129d0576040517f7a01ede200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82846001600160a01b03821615612a9e576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015612a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a689190615c20565b612a9e576040517f391daaa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612aa7876144b4565b6001600160a01b03878116600090815260066020908152604080832063ffffffff8b168452909152902054818716911603612b0e576040517fd0ecb66b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03878116600081815260066020908152604080832063ffffffff8c168085529083529281902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016958b1695861790558051938452908301919091528101919091527f4cff966ebee29a156dcb34cf72c1d06231fb1777f6bdf6e8089819232f002b1c906060016112cf565b6000806000612bb28686611bb6565b91509150816001600160a01b0316846001600160a01b031603612bda5760019250505061267f565b600081612c0f576001600160a01b038716600090815260086020908152604080832063ffffffff8a1684529091529020612c25565b63ffffffff86166000908152600b602052604090205b6040805180820190915281546001600160a01b0390811680835260019093015460208301529092508616148015612c5f5750438160200151115b15612c70576001935050505061267f565b5060009695505050505050565b6001600160a01b038316600090815260016020908152604080832063ffffffff86168452825280832084845290915281205467ffffffffffffffff165b6001600160a01b038516600090815260026020908152604080832063ffffffff881684528252808320868452825280832067ffffffffffffffff6001860116845290915290205415612d0e57600101612cba565b949350505050565b612d1e61498e565b6001600160a01b038216600090815260056020526040902054829060ff16612d72576040517f378b1de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03811615612e2e576000816001600160a01b0316631881d94d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de69190615bf1565b6002811115612df757612df7615bc2565b03612e2e576040517f84ead63600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83856001600160a01b03821615612efc576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015612ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec69190615c20565b612efc576040517f391daaa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff87166000908152600a60205260409020546001600160a01b039081169087168103612f58576040517fd0ecb66b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff88166000818152600a602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038c169081179091558251938452908301527fc16891855cffb4a5ac51ac11864a3f3c96ba816cc45fe686c987ae36277de5ec910160405180910390a1851561308a5763ffffffff88166000908152600b6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617815561302f8743615df2565b600182018190556040805163ffffffff8c1681526001600160a01b038516602082015280820192909252517f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f89181900360600190a150613115565b63ffffffff88166000818152600b6020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010183905580519384526001600160a01b038516918401919091528201527f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f89060600160405180910390a15b5050505050505050565b61312761498e565b613132838383614b05565b505050565b61314e82613148602086018661554d565b33612ba3565b613184576040517f4fa6ecac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260016020908152604082209082906131ad9087018761554d565b63ffffffff1681526020808201929092526040908101600090812087840135825290925290205467ffffffffffffffff1690506131eb848483614a6a565b613221576040517f751cb20f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61322c848483614b28565b613262576040517f0177e1ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61328e83613273602087018761554d565b60208701356132886060890160408a01615a8f565b86614be8565b7f0d87345f3d1c929caba93e1c3821b54ff3512e12b66aa3cfe54b6bcbc17e59b48484846040516132c19392919061605f565b60405180910390a150505050565b6001600160a01b038316600090815260036020908152604080832063ffffffff86168452825280832084845290915281205481906133189067ffffffffffffffff166001616087565b604080517fffffffffffffffff00000000000000000000000000000000000000000000000060c084901b166020808301919091527fffffffff000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060e090811b821660288501526001600160a01b038b16602c85015289901b16604c830152605080830188905283518084039091018152607090920190925280519101209091505b95945050505050565b6133e661498e565b6001600160a01b038116600090815260056020526040902054819060ff1661343a576040517f378b1de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816001600160a01b038116156134f6576001816001600160a01b0316631881d94d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561348a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ae9190615bf1565b60028111156134bf576134bf615bc2565b036134f6576040517f7a01ede200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82846001600160a01b038216156135c4576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa15801561356a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358e9190615c20565b6135c4576040517f391daaa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff86166000908152600960205260409020546001600160a01b0380871691160361361e576040517fd0ecb66b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff861660008181526009602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038a169081179091558251938452908301527f16aa0f528038ab41019e95bae5b418a50ba8532c5800e3b7ea2f517d3fa625f591016118b4565b6001600160a01b03808316600090815260066020908152604080832063ffffffff861684529091529020541680611e47575063ffffffff81166000908152600960205260409020546001600160a01b031680611e47576040517f6c1ccdb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61372c61498e565b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527fd476ec5ec1ac11cec3714d41e7ea49419471aceb9bd0dff1becfc3e363a62396906020015b60405180910390a150565b6001600160a01b0381166000908152600160209081526040822061267f918591859185906137c99085018561554d565b63ffffffff1681526020808201929092526040908101600090812089840135825290925290205467ffffffffffffffff16614b28565b336000818152600f602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386169081179091558251938452908301527f6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981910161378e565b6001600160a01b038216600090815260056020526040902054829060ff166138cb576040517f378b1de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03811615613987576000816001600160a01b0316631881d94d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561391b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393f9190615bf1565b600281111561395057613950615bc2565b03613987576040517f84ead63600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83856001600160a01b03821615613a55576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa1580156139fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1f9190615c20565b613a55576040517f391daaa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613a5d61498e565b84600003613aa95763ffffffff87166000908152600b6020526040812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010155613b2f565b438511613ae2576040517f05df9f2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff87166000908152600b6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0388161781556001018590555b6040805163ffffffff891681526001600160a01b03881660208201529081018690527f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f8906060016112cf565b613b84846144b4565b613b8f848484612c7d565b613b9a906001616087565b67ffffffffffffffff168167ffffffffffffffff1614613bf2576040517fc09b635000000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82166004820152602401611a6b565b6001600160a01b038416600081815260016020908152604080832063ffffffff881680855290835281842087855283529281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8716908117909155815193845291830186905282019290925260608101919091527f28f40053783033ef755556a0c3315379141f51a33aed8334174ffbadd90bde48906080016132c1565b6040805180820190915260008082526020820152613cc260a0840160808501615c3d565b8015613cd75750600e546001600160a01b0316155b15613d0e576040517f5af6d2aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660009081526003602090815260408220908290613d379087018761554d565b63ffffffff16815260208082019290925260409081016000908120878401358252909252902054613d739067ffffffffffffffff166001616087565b905060006040518060e001604052808367ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff168152602001856001600160a01b03168152602001866000016020810190613de0919061554d565b63ffffffff16815260200186602001358152602001613edc847f0000000000000000000000000000000000000000000000000000000000000000888a6000016020810190613e2e919061554d565b8b60200135600085856001600160a01b03861660405160c09390931b7fffffffffffffffff00000000000000000000000000000000000000000000000016602084015260e091821b7fffffffff000000000000000000000000000000000000000000000000000000009081166028850152602c8401919091529085901b16604c8201526050810183905260700160405160208183030381529060405280519060200120905095945050505050565b8152602001613eee60408801886160a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452509293509150613f3b905085610d8a602089018961554d565b90506001600160a01b03811663d80e9bd983613f5a60608a018a6160a8565b613f6a60a08c0160808d01615c3d565b6040518563ffffffff1660e01b8152600401613f89949392919061610d565b6040805180830381865afa158015613fa5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d59190616204565b613fd161498e565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f97f025840000000000000000000000000000000000000000000000000000000060048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801561404e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140729190615c20565b6140a8576040517feb64f35d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811660009081526005602052604090205460ff16156140fb576040517f8aea2fe600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556004805491820181559093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905590519182527f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5910161378e565b6141cf61498e565b6001600160a01b038116614265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401611a6b565b61426e81614a02565b50565b6001600160a01b038516600090815260016020908152604080832063ffffffff88168452825280832086845290915281205467ffffffffffffffff9081169084168110156143cc57600181015b8467ffffffffffffffff168167ffffffffffffffff1611614367576001600160a01b038816600090815260026020908152604080832063ffffffff8b1684528252808320898452825280832067ffffffffffffffff8516845290915290205461435f576040517fc09b635000000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82166004820152602401611a6b565b6001016142be565b506001600160a01b038716600090815260016020908152604080832063ffffffff8a1684528252808320888452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff86161790555b82516020808501919091206001600160a01b038916600090815260028352604080822063ffffffff8b1683528452808220898352845280822067ffffffffffffffff891683529093529190912054909250808314614460576040517f7182306f0000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604401611a6b565b50506001600160a01b03909516600090815260026020908152604080832063ffffffff909716835295815285822094825293845284812067ffffffffffffffff909316815291909252918220919091555090565b336001600160a01b038216148015906144e757506001600160a01b038181166000908152600f6020526040902054163314155b1561426e576040517fc4c5259300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61452661505d565b6000806145af8561453a602087018761554d565b6001600160a01b0391909116600090815260036020908152604080832063ffffffff94909416835292815282822081890135835290522080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008116600167ffffffffffffffff928316019182161790915590565b905060006040518060e001604052808367ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff168152602001876001600160a01b0316815260200186600001602081019061461c919061554d565b63ffffffff1681526020018660200135815260200161466a847f00000000000000000000000000000000000000000000000000000000000000008a8a6000016020810190613e2e919061554d565b815260200161467c60408801886160a8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506146c9905087610d8a602089018961554d565b90506000806001600160a01b038316634389e58f856146eb60608c018c6160a8565b6146fb60a08e0160808f01615c3d565b6040518563ffffffff1660e01b815260040161471a949392919061610d565b6000604051808303816000875af1158015614739573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261477f9190810190616220565b90925090507f1ab700d4ced0c005b164c0f789fd09fcbb0156d4c2041b8a3bfbcd961cd1567f816147b360608b018b6160a8565b866040516147c4949392919061626f565b60405180910390a1506040805160608101825260a090940151845267ffffffffffffffff909416602084015292820192909252925090509250929050565b600081156148cb57600e546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561486b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061488f91906162b0565b9050806000036148cb576040517f1775123700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b82518210806148e25750808360200151115b1561313257825160208401516040517f4f3ec0d3000000000000000000000000000000000000000000000000000000008152600481019290925260248201849052604482015260648101829052608401611a6b565b831561494857614948858386614c68565b8284101561495d5761495d8582868603614c68565b5050505050565b8315614974576149748285614cbc565b828410156149885761498881858503614cbc565b50505050565b6000546001600160a01b03163314612512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611a6b565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808267ffffffffffffffff161180612d0e57506040517fff7bd03d0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063ff7bd03d90614ac49087906004016162c9565b602060405180830381865afa158015614ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190615c20565b6001600160a01b038316614b1d576131328282614cbc565b613132838383614c68565b600067ffffffffffffffff8216614b456060860160408701615a8f565b67ffffffffffffffff161180612d0e57506001600160a01b03831660009081526002602090815260408220908290614b7f9088018861554d565b63ffffffff1663ffffffff1681526020019081526020016000206000866020013581526020019081526020016000206000866040016020810190614bc39190615a8f565b67ffffffffffffffff1681526020810191909152604001600020541415949350505050565b80614c1f576040517f09beffb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03909416600090815260026020908152604080832063ffffffff909616835294815284822093825292835283812067ffffffffffffffff909216815291522055565b6001600160a01b038216614ca8576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6131326001600160a01b0384168383614d9b565b6001600160a01b038216614cfc576040517f6b7a931000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614d49576040519150601f19603f3d011682016040523d82523d6000602084013e614d4e565b606091505b5050905080613132576040517f465bc8340000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260248101839052604401611a6b565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261313292869291600091614e59918516908490614f06565b9050805160001480614e7a575080806020019051810190614e7a9190615c20565b613132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611a6b565b6060612d0e848460008585600080866001600160a01b03168587604051614f2d91906162d7565b60006040518083038185875af1925050503d8060008114614f6a576040519150601f19603f3d011682016040523d82523d6000602084013e614f6f565b606091505b5091509150614f8087838387614f8b565b979650505050505050565b6060831561501457825160000361500d576001600160a01b0385163b61500d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611a6b565b5081612d0e565b612d0e83838151156150295781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6b91906153f8565b604051806060016040528060008019168152602001600067ffffffffffffffff1681526020016150a0604051806040016040528060008152602001600081525090565b905290565b6000606082840312156150b757600080fd5b50919050565b6000813574ffffffffffffffffffffffffffffffffffffffffff811681146150e457600080fd5b6001600160a01b031692915050565b60008083601f84011261510557600080fd5b50813567ffffffffffffffff81111561511d57600080fd5b602083019150836020828501011115611c4657600080fd5b600080600080600080600060e0888a03121561515057600080fd5b61515a89896150a5565b9650615168606089016150bd565b95506080880135945060a088013567ffffffffffffffff8082111561518c57600080fd5b6151988b838c016150f3565b909650945060c08a01359150808211156151b157600080fd5b506151be8a828b016150f3565b989b979a50959850939692959293505050565b803563ffffffff811681146148cb57600080fd5b600080600080608085870312156151fb57600080fd5b615204856150bd565b9350615212602086016151d1565b9250615220604086016150bd565b9396929550929360600135925050565b6000806040838503121561524357600080fd5b823567ffffffffffffffff81111561525a57600080fd5b830160a0818603121561526c57600080fd5b915061527a602084016150bd565b90509250929050565b60006080820190508251825267ffffffffffffffff602084015116602083015260408301516152bf604084018280518252602090810151910152565b5092915050565b600080600080600060c086880312156152de57600080fd5b6152e7866150bd565b94506152f687602088016150a5565b93506080860135925060a086013567ffffffffffffffff81111561531957600080fd5b615325888289016150f3565b969995985093965092949392505050565b6000806000806080858703121561534c57600080fd5b615355856150bd565b9350615363602086016150bd565b9250615371604086016151d1565b915061537f606086016151d1565b905092959194509250565b60005b838110156153a557818101518382015260200161538d565b50506000910152565b600081518084526153c681602086016020860161538a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061267f60208301846153ae565b803567ffffffffffffffff811681146148cb57600080fd5b600080600080600060a0868803121561543b57600080fd5b615444866150bd565b9450615452602087016151d1565b9350604086013592506154676060870161540b565b949793965091946080013592915050565b803561ffff811681146148cb57600080fd5b600080600080608085870312156154a057600080fd5b6154a9856150bd565b93506154b7602086016150bd565b92506040850135915061537f60608601615478565b600080604083850312156154df57600080fd5b6154e8836150bd565b915061527a602084016151d1565b60006020828403121561550857600080fd5b61267f826150bd565b60008060006060848603121561552657600080fd5b61552f846150bd565b925061553d602085016151d1565b9150604084013590509250925092565b60006020828403121561555f57600080fd5b61267f826151d1565b6000806000806000806000806000806000806101208d8f03121561558b57600080fd5b6155948d6150bd565b9b506155a260208e016150bd565b9a5060408d013599506155b760608e01615478565b985060808d0135975060a08d0135965067ffffffffffffffff60c08e013511156155e057600080fd5b6155f08e60c08f01358f016150f3565b909650945067ffffffffffffffff60e08e0135111561560e57600080fd5b61561e8e60e08f01358f016150f3565b909450925067ffffffffffffffff6101008e0135111561563d57600080fd5b61564e8e6101008f01358f016150f3565b81935080925050509295989b509295989b509295989b565b60008060008060008060008060008060006101408c8e03121561568857600080fd5b6156928d8d6150a5565b9a506156a060608d016150bd565b995060808c0135985060a08c0135975060c08c0135965067ffffffffffffffff8060e08e013511156156d157600080fd5b6156e18e60e08f01358f016150f3565b90975095506101008d01358110156156f857600080fd5b6157098e6101008f01358f016150f3565b90955093506101208d013581101561572057600080fd5b506157328d6101208e01358e016150f3565b81935080925050509295989b509295989b9093969950565b6000806000806060858703121561576057600080fd5b615769856150bd565b9350615777602086016150bd565b9250604085013567ffffffffffffffff8082111561579457600080fd5b818701915087601f8301126157a857600080fd5b8135818111156157b757600080fd5b8860208260051b85010111156157cc57600080fd5b95989497505060200194505050565b6000806000806000608086880312156157f357600080fd5b6157fc866150bd565b94506020860135935061581160408701615478565b9250606086013567ffffffffffffffff81111561531957600080fd5b6000806080838503121561584057600080fd5b61584a84846150a5565b915061527a606084016150bd565b6020808252825182820181905260009190848201906040850190845b818110156158995783516001600160a01b031683529284019291840191600101615874565b50909695505050505050565b60008060008060008060008060c0898b0312156158c157600080fd5b6158ca896150bd565b97506158d860208a016150bd565b9650604089013595506158ed60608a01615478565b9450608089013567ffffffffffffffff8082111561590a57600080fd5b6159168c838d016150f3565b909650945060a08b013591508082111561592f57600080fd5b5061593c8b828c016150f3565b999c989b5096995094979396929594505050565b60008060006060848603121561596557600080fd5b61596e846150bd565b925061597c602085016151d1565b915061598a604085016150bd565b90509250925092565b6000806000606084860312156159a857600080fd5b6159b1846151d1565b925061553d602085016150bd565b6000806000606084860312156159d457600080fd5b6159b1846150bd565b600080600060a084860312156159f257600080fd5b6159fc85856150a5565b9250615a0a606085016150bd565b9150608084013590509250925092565b60008060408385031215615a2d57600080fd5b61526c836151d1565b60008060008060808587031215615a4c57600080fd5b615a55856150bd565b9350615a63602086016151d1565b92506040850135915061537f6060860161540b565b815181526020808301519082015260408101611e47565b600060208284031215615aa157600080fd5b61267f8261540b565b838152818360208301376000910160200190815292915050565b63ffffffff615ad2826151d1565b1682526020810135602083015267ffffffffffffffff615af46040830161540b565b1660408301525050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b615b518189615ac4565b86606082015260e060808201526000615b6e60e083018789615afe565b6001600160a01b03861660a084015282810360c0840152615b90818587615afe565b9a9950505050505050505050565b60808101615bac8285615ac4565b6001600160a01b03831660608301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215615c0357600080fd5b81516003811061267f57600080fd5b801515811461426e57600080fd5b600060208284031215615c3257600080fd5b815161267f81615c12565b600060208284031215615c4f57600080fd5b813561267f81615c12565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112615c9a57600080fd5b815167ffffffffffffffff80821115615cb557615cb5615c5a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715615cfb57615cfb615c5a565b81604052838152866020858801011115615d1457600080fd5b6119d584602083016020890161538a565b600060208284031215615d3757600080fd5b815167ffffffffffffffff811115615d4e57600080fd5b612d0e84828501615c89565b8a815261ffff8a16602082015288604082015287606082015260e060808201526000615d8a60e08301888a615afe565b82810360a0840152615d9d818789615afe565b905082810360c0840152615db2818587615afe565b9d9c50505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115611e4757611e47615dc3565b6000610120615e14838e615ac4565b8b60608401528a60808401528960a08401528060c0840152615e39818401898b615afe565b905082810360e0840152615e4e818789615afe565b9050828103610100840152615db2818587615afe565b600060408083016001600160a01b03871684526020828186015281868352606092508286019050828760051b8701018860005b89811015615fa2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18c3603018112615ef857600080fd5b8b0163ffffffff80615f09836151d1565b16855280615f188884016151d1565b168786015250878101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112615f5257600080fd5b01858101903567ffffffffffffffff811115615f6d57600080fd5b803603821315615f7c57600080fd5b8789860152615f8e8886018284615afe565b958701959450505090840190600101615e97565b50909a9950505050505050505050565b8183823760009101908152919050565b60006001600160a01b03808916835280881660208401525085604083015261ffff8516606083015260a06080830152615fff60a083018486615afe565b98975050505050505050565b60006001600160a01b03808a16835288602084015260a0604084015261603560a08401888a615afe565b81871660608501528381036080850152616050818688615afe565b9b9a5050505050505050505050565b60a0810161606d8286615ac4565b6001600160a01b0393909316606082015260800152919050565b67ffffffffffffffff8181168382160190808211156152bf576152bf615dc3565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126160dd57600080fd5b83018035915067ffffffffffffffff8211156160f857600080fd5b602001915036819003821315611c4657600080fd5b6060815267ffffffffffffffff855116606082015263ffffffff60208601511660808201526001600160a01b0360408601511660a08201526000606086015161615e60c084018263ffffffff169052565b50608086015160e083015260a086015161010083015260c086015160e061012084015261618f6101408401826153ae565b905082810360208401526161a4818688615afe565b9150506133d5604083018415159052565b6000604082840312156161c757600080fd5b6040516040810181811067ffffffffffffffff821117156161ea576161ea615c5a565b604052825181526020928301519281019290925250919050565b60006040828403121561621657600080fd5b61267f83836161b5565b6000806060838503121561623357600080fd5b61623d84846161b5565b9150604083015167ffffffffffffffff81111561625957600080fd5b61626585828601615c89565b9150509250929050565b60608152600061628260608301876153ae565b8281036020840152616295818688615afe565b9150506001600160a01b038316604083015295945050505050565b6000602082840312156162c257600080fd5b5051919050565b60608101611e478284615ac4565b600082516162e981846020870161538a565b919091019291505056fea26474726f6e58221220cf0e4e18d80dab9c9f747a2069b6c9990bf1c77052c97067eba6a74303758b6664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,uint32,bytes32,uint64,bytes32)": {
        "details": "Marks a nonce as unexecutable and un-verifiable. The nonce can never be re-verified or executed.Reverts if the provided _payloadHash does not match the currently verified payload hash.Only packets with nonces less than or equal to the lazy inbound nonce can be burned.Reverts if the nonce has already been executed.Authenticated by the caller"
      },
      "clear(address,(uint32,bytes32,uint64),bytes32,bytes)": {
        "details": "Oapp uses this interface to clear a message.this is a PULL mode versus the PUSH mode of lzReceivethe cleared message can be ignored by the app (effectively burnt)authenticated by oapp",
        "params": {
          "_guid": "the guid of the message",
          "_message": "the message",
          "_origin": "the origin of the message"
        }
      },
      "constructor": {
        "params": {
          "_eid": "the unique Endpoint Id for this deploy that all other Endpoints can use to send to it"
        }
      },
      "getConfig(address,address,uint32,uint32)": {
        "details": "a view function to query the current configuration of the OApp"
      },
      "getReceiveLibrary(address,uint32)": {
        "details": "the receiveLibrary can be lazily resolved that if not set it will point to the default configured by LayerZero"
      },
      "getSendContext()": {
        "details": "returns (eid, sender) if sending message, (0, 0) otherwise"
      },
      "getSendLibrary(address,uint32)": {
        "details": "If the Oapp does not have a selected Send Library, this function will resolve to the default library configured by LayerZero",
        "params": {
          "_dstEid": "The destination endpoint id",
          "_sender": "The address of the Oapp that is sending the message"
        },
        "returns": {
          "lib": "address of the Send Library"
        }
      },
      "inboundNonce(address,uint32,bytes32)": {
        "details": "returns the max index of the longest gapless sequence of verified msg nonces.the uninitialized value is 0. the first nonce is always 1it starts from the lazyInboundNonce (last checkpoint) and iteratively check if the next nonce has been verifiedthis function can OOG if too many backlogs, but it can be trivially fixed by just clearing some prior messagesNOTE: Oapp explicitly skipped nonces count as \"verified\" for these purposeseg. [1,2,3,4,6,7] => 4, [1,2,6,8,10] => 2, [1,3,4,5,6] => 1"
      },
      "isSendingMessage()": {
        "details": "returns true if sending message"
      },
      "isSupportedEid(uint32)": {
        "details": "returns true only if both the default send/receive libraries are set"
      },
      "isValidReceiveLibrary(address,uint32,address)": {
        "details": "called when the endpoint checks if the msgLib attempting to verify the msg is the configured msgLib of the Oappthis check provides the ability for Oapp to lock in a trusted msgLibit will fist check if the msgLib is the currently configured one. then check if the msgLib is the one in grace period of msgLib versioning upgrade"
      },
      "lzCompose(address,address,bytes32,uint16,bytes,bytes)": {
        "details": "execute a composed messages from the sender to the composer (receiver)the execution provides the execution context (caller, extraData) to the receiver.      the receiver can optionally assert the caller and validate the untrusted extraDatacan not re-entrant",
        "params": {
          "_extraData": "the extra data provided by the executor. this data is untrusted and should be validated.",
          "_from": "the address which sends the composed message. in most cases, it is the Oapp's address.",
          "_guid": "the message guid",
          "_message": "the message",
          "_to": "the address which receives the composed message"
        }
      },
      "lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": {
        "params": {
          "_extraData": "the extra data provided by the executor",
          "_from": "the address which sends the composed message",
          "_guid": "the message guid",
          "_message": "the message",
          "_reason": "the reason why the message is not received",
          "_to": "the address which receives the composed message"
        }
      },
      "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": {
        "details": "MESSAGING STEP 3 - the last stepexecute a verified message to the designated receiverthe execution provides the execution context (caller, extraData) to the receiver. the receiver can optionally assert the caller and validate the untrusted extraDatacant reentrant because the payload is cleared before execution",
        "params": {
          "_extraData": "the extra data provided by the executor. this data is untrusted and should be validated.",
          "_guid": "the guid of the message",
          "_message": "the message",
          "_origin": "the origin of the message",
          "_receiver": "the receiver of the message"
        }
      },
      "lzReceiveAlert((uint32,bytes32,uint64),address,bytes32,uint256,uint256,bytes,bytes,bytes)": {
        "params": {
          "_extraData": "the extra data provided by the executor.",
          "_guid": "the guid of the message",
          "_message": "the message",
          "_origin": "the origin of the message",
          "_reason": "the reason for failure",
          "_receiver": "the receiver of the message"
        }
      },
      "nativeToken()": {
        "details": "override this if the endpoint is charging ERC20 tokens as native",
        "returns": {
          "_0": "0x0 if using native. otherwise the address of the native ERC20 token"
        }
      },
      "nextGuid(address,uint32,bytes32)": {
        "details": "returns the GUID for the next message given the paththe Oapp might want to include the GUID into the message in some cases"
      },
      "nilify(address,uint32,bytes32,uint64,bytes32)": {
        "details": "Marks a packet as verified, but disallows execution until it is re-verified.Reverts if the provided _payloadHash does not match the currently verified payload hash.A non-verified nonce can be nilified by passing EMPTY_PAYLOAD_HASH for _payloadHash.Assumes the computational intractability of finding a payload that hashes to bytes32.max.Authenticated by the caller"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quote((uint32,bytes32,bytes,bytes,bool),address)": {
        "details": "MESSAGING STEP 0",
        "params": {
          "_params": "the messaging parameters",
          "_sender": "the sender of the message"
        }
      },
      "recoverToken(address,address,uint256)": {
        "details": "recover the token sent to this contract by mistakeonly owner",
        "params": {
          "_amount": "the amount to send",
          "_to": "the address to send the token to",
          "_token": "the token to recover. if 0x0 then it is native token"
        }
      },
      "registerLibrary(address)": {
        "details": "all libraries have to implement the erc165 interface to prevent wrong configurationsonly owner"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "send((uint32,bytes32,bytes,bytes,bool),address)": {
        "details": "MESSAGING STEP 1 - OApp need to transfer the fees to the endpoint before sending the message",
        "params": {
          "_params": "the messaging parameters",
          "_refundAddress": "the address to refund both the native and lzToken"
        }
      },
      "sendCompose(address,bytes32,uint16,bytes)": {
        "details": "the Oapp sends the lzCompose message to the endpointthe composer MUST assert the sender because anyone can send compose msg with this functionwith the same GUID, the Oapp can send compose to multiple _composer at the same timeauthenticated by the msg.sender",
        "params": {
          "_guid": "the message guid",
          "_message": "the message",
          "_to": "the address which will receive the composed message"
        }
      },
      "setConfig(address,address,(uint32,uint32,bytes)[])": {
        "details": "authenticated by the _oapp"
      },
      "setDefaultReceiveLibrary(uint32,address,uint256)": {
        "details": "owner setting the defaultSendLibrarymust be a registered library (including blockLibrary) with the eid support enabledin version migration, it can add a grace period to the old library. if the grace period is 0, it will delete the timeout configuration.only owner"
      },
      "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": {
        "details": "owner setting the defaultSendLibrarymust be a registered library (including blockLibrary) with the eid support enabledcan used to (1) extend the current configuration (2) force remove the current configuration (3) change to a new configuration",
        "params": {
          "_expiry": "the block number when lib expires"
        }
      },
      "setDefaultSendLibrary(uint32,address)": {
        "details": "owner setting the defaultSendLibrarycan set to the blockedLibrary, which is a registered librarythe msgLib must enable the support before they can be registered to the endpoint as the defaultonly owner"
      },
      "setLzToken(address)": {
        "details": "allows reconfiguration to recover from wrong configurationsusers should never approve the EndpointV2 contract to spend their non-layerzero tokensoverride this function if the endpoint is charging ERC20 tokens as nativeonly owner",
        "params": {
          "_lzToken": "the new layer zero token address"
        }
      },
      "setReceiveLibrary(address,uint32,address,uint256)": {
        "details": "Oapp setting the receiveLibrarymust be a registered library (including blockLibrary) with the eid support enabledin version migration, it can add a grace period to the old library. if the grace period is 0, it will delete the timeout configuration.authenticated by the Oapp",
        "params": {
          "_gracePeriod": "the number of blocks from now until oldLib expires"
        }
      },
      "setReceiveLibraryTimeout(address,uint32,address,uint256)": {
        "details": "Oapp setting the defaultSendLibrarymust be a registered library (including blockLibrary) with the eid support enabledcan used to (1) extend the current configuration (2)  force remove the current configuration (3) change to a new configuration",
        "params": {
          "_expiry": "the block number when lib expires"
        }
      },
      "setSendLibrary(address,uint32,address)": {
        "details": "Oapp setting the sendLibrarymust be a registered library (including blockLibrary) with the eid support enabledauthenticated by the Oapp"
      },
      "skip(address,uint32,bytes32,uint64)": {
        "details": "the caller must provide _nonce to prevent skipping the unintended nonceit could happen in some race conditions, e.g. to skip nonce 3, but nonce 3 was consumed firstusage: skipping the next nonce to prevent message verification, e.g. skip a message when Precrime throws alertsif the Oapp wants to skip a verified message, it should call the clear() function insteadafter skipping, the lazyInboundNonce is set to the provided nonce, which makes the inboundNonce also the provided nonceie. allows the Oapp to increment the lazyInboundNonce without having had that corresponding msg be verified"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verify((uint32,bytes32,uint64),address,bytes32)": {
        "details": "MESSAGING STEP 2 - on the destination chainconfigured receive library verifies a message",
        "params": {
          "_origin": "a struct holding the srcEid, nonce, and sender of the message",
          "_payloadHash": "the payload hash of the message",
          "_receiver": "the receiver of the message"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getSendLibrary(address,uint32)": {
        "notice": "The Send Library is the Oapp specified library that will be used to send the message to the destination endpoint. If the Oapp does not specify a Send Library, the default Send Library will be used."
      },
      "quote((uint32,bytes32,bytes,bytes,bool),address)": {
        "notice": "This view function gives the application built on top of LayerZero the ability to requests a quote with the same parameters as they would to send their message. Since the quotes are given on chain there is a race condition in which the prices could change between the time the user gets their quote and the time they submit their message. If the price moves up and the user doesn't send enough funds the transaction will revert, if the price goes down the _refundAddress provided by the app will be refunded the difference."
      },
      "setDelegate(address)": {
        "notice": "delegate is authorized by the oapp to configure anything in layerzero"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4311,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "lazyInboundNonce",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64)))"
      },
      {
        "astId": 4321,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "inboundPayloadHash",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_mapping(t_uint64,t_bytes32))))"
      },
      {
        "astId": 4329,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "outboundNonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64)))"
      },
      {
        "astId": 3325,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "registeredLibraries",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3329,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "isRegisteredLibrary",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3335,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "sendLibrary",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_address))"
      },
      {
        "astId": 3341,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "receiveLibrary",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_address))"
      },
      {
        "astId": 3348,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "receiveLibraryTimeout",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Timeout)5476_storage))"
      },
      {
        "astId": 3352,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "defaultSendLibrary",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 3356,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "defaultReceiveLibrary",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 3361,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "defaultReceiveLibraryTimeout",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_struct(Timeout)5476_storage)"
      },
      {
        "astId": 4866,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "composeQueue",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes32))))"
      },
      {
        "astId": 5054,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "_sendContext",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2082,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "lzToken",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2086,
        "contract": "contracts/EndpointV2.sol:EndpointV2",
        "label": "delegates",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes32))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(bytes32 => mapping(uint16 => bytes32))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes32)))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(uint16 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes32))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_mapping(t_uint64,t_bytes32))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(bytes32 => mapping(uint64 => bytes32))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_bytes32,t_mapping(t_uint64,t_bytes32)))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(bytes32 => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Timeout)5476_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct IMessageLibManager.Timeout))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Timeout)5476_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint16 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes32)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint64)"
      },
      "t_mapping(t_uint32,t_struct(Timeout)5476_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IMessageLibManager.Timeout)",
        "numberOfBytes": "32",
        "value": "t_struct(Timeout)5476_storage"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Timeout)5476_storage": {
        "encoding": "inplace",
        "label": "struct IMessageLibManager.Timeout",
        "members": [
          {
            "astId": 5473,
            "contract": "contracts/EndpointV2.sol:EndpointV2",
            "label": "lib",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5475,
            "contract": "contracts/EndpointV2.sol:EndpointV2",
            "label": "expiry",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}