{
  "address": "0x90118d110B07ABB82Ba8980D1c5cC96EeA810d2C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryGasCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ExecutorFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lzToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LzTokenFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeOrAltTokenFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "optionalVerifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "name": "VerifierFeePaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliverable",
      "outputs": [
        {
          "internalType": "enum DeliveryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getDefaultConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "isSupportedEid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct PacketForQuote",
          "name": "_packet",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        }
      ],
      "name": "resetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "receiver",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct Packet",
          "name": "_packet",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "configType",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "config",
              "type": "bytes"
            }
          ],
          "internalType": "struct SetConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "maxMessageSize",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "outboundConfirmations",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "executor",
                  "type": "address"
                }
              ],
              "internalType": "struct OutboundConfigStruct",
              "name": "outboundConfig",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "verifiers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalVerifiers",
              "type": "address[]"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierThreshold",
              "type": "uint8"
            }
          ],
          "internalType": "struct SetDefaultConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDefaultConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        }
      ],
      "name": "snapshotConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ulnConfig",
      "outputs": [
        {
          "internalType": "contract IUlnConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_requiredConfirmation",
          "type": "uint64"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "useCustomVerifiers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useCustomOptionalVerifiers",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "verifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "verifiers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalVerifiers",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfigStruct",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifyConditionMet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLzTokenFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf37a9032ae82074bcb4bb5f1ced8b196388d87961c69352e99cbf26bf483f68c",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x90118d110B07ABB82Ba8980D1c5cC96EeA810d2C",
    "transactionIndex": 0,
    "gasUsed": "8400596",
    "logsBloom": "0x
    "blockHash": "0x558940f7096b96266f580495ea6b4411ef570a8f91bc786de4bb5f506c822951",
    "transactionHash": "0xf37a9032ae82074bcb4bb5f1ced8b196388d87961c69352e99cbf26bf483f68c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0xf37a9032ae82074bcb4bb5f1ced8b196388d87961c69352e99cbf26bf483f68c",
        "address": "0x90118d110B07ABB82Ba8980D1c5cC96EeA810d2C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x558940f7096b96266f580495ea6b4411ef570a8f91bc786de4bb5f506c822951"
      }
    ],
    "blockNumber": 29,
    "cumulativeGasUsed": "8400596",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC6bA8C3233eCF65B761049ef63466945c362EdD2",
    100000
  ],
  "numDeployments": 1,
  "solcInputHash": "b3c6e517a5cac95d752b303e7d0dac12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryGasCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExecutorFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lzToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LzTokenFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeOrAltTokenFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"VerifierFeePaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliverable\",\"outputs\":[{\"internalType\":\"enum DeliveryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getDefaultConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isSupportedEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct PacketForQuote\",\"name\":\"_packet\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"}],\"name\":\"resetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct Packet\",\"name\":\"_packet\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"struct SetConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxMessageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"outboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct OutboundConfigStruct\",\"name\":\"outboundConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierThreshold\",\"type\":\"uint8\"}],\"internalType\":\"struct SetDefaultConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDefaultConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"}],\"name\":\"snapshotConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ulnConfig\",\"outputs\":[{\"internalType\":\"contract IUlnConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_requiredConfirmation\",\"type\":\"uint64\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomVerifiers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalVerifiers\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"verifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfigStruct\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifyConditionMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLzTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deliver(bytes,bytes32)\":{\"details\":\"dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\"},\"deliverable(bytes,bytes32)\":{\"details\":\"a deliverable message requires it to be endpoint deliverable and ULN deliverable\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)\":{\"details\":\"requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\"},\"withdrawFee(address,uint256)\":{\"details\":\"E2 only\"},\"withdrawLzTokenFee(address,address,uint256)\":{\"details\":\"_lzToken is a user-supplied value because lzToken might change in the endpoint before all lzToken can be taken outE2 onlytreasury only function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/uln302/UltraLightNode302.sol\":\"UltraLightNode302\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nstruct PacketForQuote {\\n    address sender;\\n    uint32 dstEid;\\n    bytes message;\\n}\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\",\"keccak256\":\"0x8a4a8eba63ff7313aee2d476b643fd05ec13e91fa0a7cea1b9af0f0d04aee645\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\nimport { Origin } from \\\"../MessagingStructs.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketReceived(Origin origin, address receiver);\\n\\n    event LzReceiveFailed(Origin origin, address receiver, bytes reason);\\n\\n    event LzTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint256 _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint256 _lzTokenFee,\\n        uint256 _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function deliverable(Origin calldata _origin, address _receiveLib, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are delivered in order\\n    function clear(Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x58cab37aee1a1b20a0bae2d085fa07de3d4ed4ad8c05ac72b4e489c086b81375\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\nimport { Packet, PacketForQuote } from \\\"../MessagingStructs.sol\\\";\\n\\ninterface IMessageLib is IERC165 {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function setConfig(address _oapp, uint32 _eid, SetConfigParam[] calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n}\\n\",\"keccak256\":\"0x16b55d0ab9f4199750dc3df18f62b103db1eae5555aed18f039676240fffccdb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function defaultConfig(address _lib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _lib, uint32 _eid, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _lib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _lib, uint32[] calldata _eids) external;\\n}\\n\",\"keccak256\":\"0x4ec08215a819ecb63c4b07f91284718bb2b4edb446fea165b58a54a625944d22\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message can not be delivered for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function hasPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe9c180ca201e8af11747079224729e0552addf70d65c60e7a61a4624a28d4e5c\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(address receiver, address composer, bytes32 guid);\\n    event LzComposeFailed(address receiver, address composer, bytes32 guid, bytes reason);\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n}\\n\",\"keccak256\":\"0x2acc6b3ec6f965a744ae4665b1a253b5cbc9f5c7ac62c169d159f256711a46e1\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n}\\n\",\"keccak256\":\"0x6af87d5d41d060363fe554ff0ce9138f1ad8e20c1aaeec777d4132fc505e74e8\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\n\\nlibrary AddressCast {\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        require(_addressBytes.length <= 32, Errors.INVALID_SIZE);\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        require(_size > 0 && _size <= 32, Errors.INVALID_SIZE);\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        require(_addressBytes.length == 20, Errors.INVALID_SIZE);\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0xe6d44403fa59516c15c3e6fd04d2864b2e88ad6d517c54d0c0c54907c726ee25\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d9e14945a749ee736df011a64ebac0ef34d04c9fa0be9a27b1fbb42b2ebd50a\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // Invalid Argument (http: 400)\\n    string internal constant INVALID_ARGUMENT = \\\"LZ10000\\\";\\n    string internal constant ONLY_REGISTERED = \\\"LZ10001\\\";\\n    string internal constant ONLY_REGISTERED_OR_DEFAULT = \\\"LZ10002\\\";\\n    string internal constant INVALID_AMOUNT = \\\"LZ10003\\\";\\n    string internal constant INVALID_NONCE = \\\"LZ10004\\\";\\n    string internal constant SAME_VALUE = \\\"LZ10005\\\";\\n    string internal constant UNSORTED = \\\"LZ10006\\\";\\n    string internal constant INVALID_VERSION = \\\"LZ10007\\\";\\n    string internal constant INVALID_EID = \\\"LZ10008\\\";\\n    string internal constant INVALID_SIZE = \\\"LZ10009\\\";\\n    string internal constant ONLY_NON_DEFAULT = \\\"LZ10010\\\";\\n    string internal constant INVALID_VERIFIERS = \\\"LZ10011\\\";\\n    string internal constant INVALID_WORKER_ID = \\\"LZ10012\\\";\\n    string internal constant DUPLICATED_OPTION = \\\"LZ10013\\\";\\n    string internal constant INVALID_LEGACY_OPTION = \\\"LZ10014\\\";\\n    string internal constant INVALID_VERIFIER_OPTION = \\\"LZ10015\\\";\\n    string internal constant INVALID_WORKER_OPTIONS = \\\"LZ10016\\\";\\n    string internal constant INVALID_EXECUTOR_OPTION = \\\"LZ10017\\\";\\n    string internal constant INVALID_ADDRESS = \\\"LZ10018\\\";\\n\\n    // Out of Range (http: 400)\\n    string internal constant OUT_OF_RANGE = \\\"LZ20000\\\";\\n\\n    // Invalid State (http: 400)\\n    string internal constant INVALID_STATE = \\\"LZ30000\\\";\\n    string internal constant SEND_REENTRANCY = \\\"LZ30001\\\";\\n    string internal constant RECEIVE_REENTRANCY = \\\"LZ30002\\\";\\n    string internal constant COMPOSE_REENTRANCY = \\\"LZ30003\\\";\\n\\n    // Permission Denied (http: 403)\\n    string internal constant PERMISSION_DENIED = \\\"LZ50000\\\";\\n\\n    // Not Found (http: 404)\\n    string internal constant NOT_FOUND = \\\"LZ60000\\\";\\n\\n    // Already Exists (http: 409)\\n    string internal constant ALREADY_EXISTS = \\\"LZ80000\\\";\\n\\n    // Not Implemented (http: 501)\\n    string internal constant NOT_IMPLEMENTED = \\\"LZC0000\\\";\\n    string internal constant UNSUPPORTED_INTERFACE = \\\"LZC0001\\\";\\n    string internal constant UNSUPPORTED_OPTION_TYPE = \\\"LZC0002\\\";\\n\\n    // Unavailable (http: 503)\\n    string internal constant UNAVAILABLE = \\\"LZD0000\\\";\\n    string internal constant NATIVE_COIN_UNAVAILABLE = \\\"LZD0001\\\";\\n    string internal constant TOKEN_UNAVAILABLE = \\\"LZD0002\\\";\\n    string internal constant DEFAULT_LIBRARY_UNAVAILABLE = \\\"LZD0003\\\";\\n    string internal constant VERIFIERS_UNAVAILABLE = \\\"LZD0004\\\";\\n}\\n\",\"keccak256\":\"0x1dd138a42249e89930838c83c3f9aafa27c47e4e7fd9be6ed2a1a2d934941176\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.19;\\n\\nlibrary BitMaps {\\n    type BitMap256 is uint256;\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xe8ebb9fa066ef4edd5284865999d457dad5acb5dc1d2db4bd62deb3b7f4dca6f\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { Errors } from \\\"../../libs/Errors.sol\\\";\\nimport { CalldataBytesLib } from \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_EXECUTOR_OPTION);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        require(_option.length == 48, Errors.INVALID_EXECUTOR_OPTION);\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_EXECUTOR_OPTION);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0xf02fe3352f9ba2eca938cf8efb82e6401ae0390899e9ee8865cf9cb901289426\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\nimport { Packet } from \\\"../../MessagingStructs.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xfda7daabe5b9047c5d116dbdbe407030c7b223a7c292843f10dfef104233b259\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nimport { ILayerZeroExecutor } from \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\nimport { ILayerZeroTreasury } from \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\n\\nstruct WorkerOptions {\\n    uint8 workerId;\\n    bytes options;\\n}\\n\\nenum DeliveryState {\\n    Signing,\\n    Deliverable,\\n    Delivered,\\n    Waiting\\n}\\n\\nabstract contract MessageLibBase is Ownable {\\n    address internal immutable endpoint;\\n    uint32 internal immutable localEid;\\n    uint256 internal immutable treasuryGasCap;\\n\\n    // config\\n    address public treasury;\\n\\n    // accumulated fees for workers and treasury\\n    mapping(address worker => uint256) public fees;\\n\\n    event ExecutorFeePaid(address executor, uint256 fee);\\n    event TreasurySet(address treasury);\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        require(endpoint == msg.sender, Errors.PERMISSION_DENIED);\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint32 _localEid, uint256 _treasuryGasCap) {\\n        endpoint = _endpoint;\\n        localEid = _localEid;\\n        treasuryGasCap = _treasuryGasCap;\\n    }\\n\\n    // ======================= Internal =======================\\n    function _assertMessageSize(uint256 _actual, uint256 _max) internal pure {\\n        require(_actual <= _max, Errors.INVALID_SIZE);\\n    }\\n\\n    function _sendToExecutor(\\n        address _executor,\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _msgSize,\\n        bytes memory _executorOptions\\n    ) internal returns (uint256 executorFee) {\\n        executorFee = ILayerZeroExecutor(_executor).assignJob(_dstEid, _sender, _msgSize, _executorOptions);\\n        if (executorFee > 0) {\\n            fees[_executor] += executorFee;\\n        }\\n        emit ExecutorFeePaid(_executor, executorFee);\\n    }\\n\\n    function _sendToTreasury(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint256 _totalNativeFee,\\n        bool _payInLzToken\\n    ) internal returns (uint256 treasuryNativeFee, uint256 lzTokenFee) {\\n        // fee should be in lzTokenFee if payInLzToken, otherwise in native\\n        (treasuryNativeFee, lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, _totalNativeFee, _payInLzToken);\\n        // if payInLzToken, handle in messagelib / endpoint\\n        if (treasuryNativeFee > 0) {\\n            fees[treasury] += treasuryNativeFee;\\n        }\\n    }\\n\\n    function _quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint256 _msgSize,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) internal view returns (uint256, uint256) {\\n        require(_options.length > 0, Errors.INVALID_ARGUMENT);\\n\\n        (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions) = _getExecutorAndOtherOptions(\\n            _options\\n        );\\n\\n        // quote other workers\\n        (uint256 nativeFee, address executor, uint256 maxMsgSize) = _quoteWorkers(_sender, _dstEid, otherWorkerOptions);\\n\\n        // assert msg size\\n        _assertMessageSize(_msgSize, maxMsgSize);\\n\\n        // quote executor\\n        nativeFee += ILayerZeroExecutor(executor).getFee(_dstEid, _sender, _msgSize, executorOptions);\\n\\n        // quote treasury\\n        (uint256 treasuryNativeFee, uint256 lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, nativeFee, _payInLzToken);\\n        if (treasuryNativeFee > 0) {\\n            nativeFee += treasuryNativeFee;\\n        }\\n\\n        return (nativeFee, lzTokenFee);\\n    }\\n\\n    function _quoteTreasuryFee(\\n        address _sender,\\n        uint32 _eid,\\n        uint256 _totalFee,\\n        bool _payInLzToken\\n    ) internal view returns (uint256 nativeFee, uint256 lzTokenFee) {\\n        if (treasury != address(0x0)) {\\n            try ILayerZeroTreasury(treasury).getFee(_sender, _eid, _totalFee, _payInLzToken) returns (\\n                uint256 treasuryFee\\n            ) {\\n                // success\\n                if (_payInLzToken) {\\n                    lzTokenFee = treasuryFee;\\n                } else {\\n                    // pay in native, make sure that the treasury fee is not higher than the cap\\n                    uint256 gasFeeEstimate = tx.gasprice * treasuryGasCap;\\n                    // cap is the max of total fee and gasFeeEstimate. this is to prevent apps from forcing the cap to 0.\\n                    uint256 nativeFeeCap = _totalFee > gasFeeEstimate ? _totalFee : gasFeeEstimate;\\n                    // to prevent the treasury from returning an overly high value to break the path\\n                    nativeFee = treasuryFee > nativeFeeCap ? nativeFeeCap : treasuryFee;\\n                }\\n            } catch {\\n                // failure, something wrong with treasury contract, charge nothing and continue\\n            }\\n        }\\n    }\\n\\n    function _transferNative(address _to, uint256 _amount) internal {\\n        (bool success, ) = _to.call{ value: _amount }(\\\"\\\");\\n        require(success, Errors.INVALID_STATE);\\n    }\\n\\n    // for msg.sender only\\n    function _assertAndDebitAmount(address _to, uint256 _amount) internal {\\n        uint256 fee = fees[msg.sender];\\n        require(_to != address(0x0) && _amount <= fee, Errors.INVALID_ARGUMENT);\\n        unchecked {\\n            fees[msg.sender] = fee - _amount;\\n        }\\n    }\\n\\n    function _setTreasury(address _treasury) internal {\\n        treasury = _treasury;\\n        emit TreasurySet(_treasury);\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    function _quoteWorkers(\\n        address _oapp,\\n        uint32 _eid,\\n        WorkerOptions[] memory _options\\n    ) internal view virtual returns (uint256 nativeFee, address executor, uint256 maxMsgSize);\\n\\n    function _getExecutorAndOtherOptions(\\n        bytes calldata _options\\n    ) internal view virtual returns (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions);\\n}\\n\",\"keccak256\":\"0x81c39f0974f8e492db34b0123761e67ac11fbd81f0ffb0c63c96a0575dfcb9fe\",\"license\":\"LZBL-1.2\"},\"contracts/MessageLibBaseE2.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport { Packet, PacketForQuote, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\\\";\\nimport { ILayerZeroEndpointV2, MessagingFee } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\\\";\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { MessageLibBase, DeliveryState, WorkerOptions } from \\\"./MessageLibBase.sol\\\";\\n\\n/// the base contract for msglib on Endpoint V2\\nabstract contract MessageLibBaseE2 is MessageLibBase, ERC165, IMessageLib {\\n    using SafeERC20 for IERC20;\\n    using PacketV1Codec for bytes;\\n\\n    address internal immutable altFeeToken;\\n\\n    event NativeOrAltTokenFeeWithdrawn(address worker, address receiver, uint256 amount);\\n    event LzTokenFeeWithdrawn(address lzToken, address receiver, uint256 amount);\\n\\n    constructor(\\n        address _endpoint,\\n        uint256 _treasuryGasCap\\n    ) MessageLibBase(_endpoint, ILayerZeroEndpointV2(_endpoint).eid(), _treasuryGasCap) {\\n        altFeeToken = ILayerZeroEndpointV2(_endpoint).altFeeToken();\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return _interfaceId == type(IMessageLib).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    // ========================= OnlyEndpoint =========================\\n    // @dev this function is marked as virtual and public for testing purpose\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) public virtual onlyEndpoint returns (MessagingFee memory, bytes memory) {\\n        (bytes memory encodedPacket, uint256 totalNativeFee) = _sendToWorkers(_packet, _options);\\n\\n        (uint256 treasuryNativeFee, uint256 lzTokenFee) = _sendToTreasury(\\n            _packet.sender,\\n            _packet.dstEid,\\n            totalNativeFee,\\n            _payInLzToken\\n        );\\n        totalNativeFee += treasuryNativeFee;\\n\\n        return (MessagingFee(totalNativeFee, lzTokenFee), encodedPacket);\\n    }\\n\\n    // ========================= OnlyOnwer =========================\\n    function setTreasury(address _treasury) external onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    // ========================= External =========================\\n    /// @dev E2 only\\n    function withdrawFee(address _to, uint256 _amount) external {\\n        _assertAndDebitAmount(_to, _amount);\\n\\n        if (altFeeToken != address(0x0)) {\\n            IERC20(altFeeToken).safeTransfer(_to, _amount);\\n        } else {\\n            _transferNative(_to, _amount);\\n        }\\n        emit NativeOrAltTokenFeeWithdrawn(msg.sender, _to, _amount);\\n    }\\n\\n    /// @dev _lzToken is a user-supplied value because lzToken might change in the endpoint before all lzToken can be taken out\\n    /// @dev E2 only\\n    /// @dev treasury only function\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external {\\n        require(msg.sender == treasury, Errors.PERMISSION_DENIED);\\n\\n        // lz token cannot be alt token\\n        require(\\n            ILayerZeroEndpointV2(endpoint).altFeeToken() != _lzToken && _to != address(0x0),\\n            Errors.INVALID_ARGUMENT\\n        );\\n\\n        IERC20(_lzToken).safeTransfer(_to, _amount);\\n        emit LzTokenFeeWithdrawn(_lzToken, _to, _amount);\\n    }\\n\\n    // ========================= View =========================\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory) {\\n        (uint256 nativeFee, uint256 lzTokenFee) = _quote(\\n            _packet.sender,\\n            _packet.dstEid,\\n            _packet.message.length,\\n            _payInLzToken,\\n            _options\\n        );\\n        return MessagingFee(nativeFee, lzTokenFee);\\n    }\\n\\n    // ========================= Internal =========================\\n    function _sendToWorkers(\\n        Packet calldata _packet,\\n        bytes calldata _options\\n    ) internal returns (bytes memory encodedPacket, uint256 totalNativeFee) {\\n        (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions) = _getExecutorAndOtherOptions(\\n            _options\\n        );\\n\\n        (uint256 otherWorkerFees, address executor, uint256 maxMsgSize, bytes memory packetBytes) = _send(\\n            _packet,\\n            otherWorkerOptions\\n        );\\n        totalNativeFee += otherWorkerFees;\\n\\n        uint256 msgSize = _packet.message.length;\\n        _assertMessageSize(msgSize, maxMsgSize);\\n\\n        totalNativeFee += _sendToExecutor(executor, _packet.dstEid, _packet.sender, msgSize, executorOptions);\\n        encodedPacket = packetBytes;\\n    }\\n\\n    function _endpointDeliverable(\\n        uint32 _srcEid,\\n        address _receiver,\\n        bytes calldata _packetHeader\\n    ) internal view returns (DeliveryState) {\\n        // 1. check endpoint deliverable\\n        // not checking in the internal function as it would be checked by the endpoint\\n        Origin memory origin = Origin(_srcEid, _packetHeader.sender(), _packetHeader.nonce());\\n\\n        // if endpoint did not revert on deliverable check, it will return true if the message is deliverable. false if the message has been delivered\\n        bool endpointDeliverable = ILayerZeroEndpointV2(endpoint).deliverable(origin, address(this), _receiver);\\n        if (!endpointDeliverable) return DeliveryState.Delivered;\\n\\n        // 2. check if has payload\\n        // endpoint allows redelivery, check if it has already been delivered\\n        bool hasPayload = ILayerZeroEndpointV2(endpoint).hasPayloadHash(\\n            _receiver,\\n            origin.srcEid,\\n            origin.sender,\\n            origin.nonce\\n        );\\n        if (hasPayload) return DeliveryState.Delivered;\\n\\n        return DeliveryState.Deliverable;\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    function _send(\\n        Packet calldata _packet,\\n        WorkerOptions[] memory _options\\n    )\\n        internal\\n        virtual\\n        returns (uint256 otherWorkerFees, address executor, uint256 maxMsgSize, bytes memory encodedPacket);\\n\\n    // receive native token from endpoint\\n    receive() external payable virtual {}\\n}\\n\",\"keccak256\":\"0x0ee5ecc1b87657e1f2c05aa991524f261426051432ebe442b5c1c866f667fd1e\",\"license\":\"LZBL-1.2\"},\"contracts/OutboundConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nstruct OutboundConfigStruct {\\n    uint32 maxMessageSize;\\n    uint64 outboundConfirmations;\\n    address executor;\\n}\\n\\n/// extract it because it might be reused by future non-ULN msglibs\\ncontract OutboundConfig {\\n    // Derived MessageLibs should never use this as config type\\n    uint32 internal constant CONFIG_TYPE_MAX_MESSAGE_SIZE = 1;\\n    uint32 internal constant CONFIG_TYPE_OUTBOUND_CONFIRMATIONS = 2;\\n    uint32 internal constant CONFIG_TYPE_EXECUTOR = 3;\\n\\n    mapping(uint32 dstEid => OutboundConfigStruct) public defaultOutboundConfig;\\n    mapping(address oapp => mapping(uint32 dstEid => OutboundConfigStruct)) public outboundConfig;\\n\\n    event DefaultOutboundConfigSet(uint32 eid, uint32 maxMessageSize, uint64 outboundConfirmations, address executor);\\n    event OutboundConfigSet(address oapp, uint32 eid, uint32 configType, bytes config);\\n    event OutboundConfigSnapshot(address oapp, uint32[] eids);\\n    event OutboundConfigReset(address oapp, uint32[] eids);\\n\\n    // ============================ View ===================================\\n    function getOutboundConfigByType(\\n        uint32 _eid,\\n        address _oapp,\\n        uint256 _configType\\n    ) public view returns (bytes memory, bool) {\\n        OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = config.maxMessageSize;\\n            if (maxMessageSize == 0) {\\n                return (abi.encode(defaultOutboundConfig[_eid].maxMessageSize), true);\\n            }\\n            return (abi.encode(maxMessageSize), false);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = config.outboundConfirmations;\\n            if (outboundConfirmations == 0) {\\n                return (abi.encode(defaultOutboundConfig[_eid].outboundConfirmations), true);\\n            }\\n            return (abi.encode(outboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            address executor = config.executor;\\n            if (executor == address(0x0)) {\\n                return (abi.encode(defaultOutboundConfig[_eid].executor), true);\\n            }\\n            return (abi.encode(executor), false);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function getDefaultOutboundConfigByType(uint32 _eid, uint32 _configType) public view returns (bytes memory) {\\n        OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            return abi.encode(config.maxMessageSize);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            return abi.encode(config.outboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            return abi.encode(config.executor);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getOutboundConfig(address _oapp, uint32 _dstEid) public view returns (OutboundConfigStruct memory) {\\n        OutboundConfigStruct memory rtnConfig = defaultOutboundConfig[_dstEid];\\n        require(rtnConfig.maxMessageSize > 0, Errors.INVALID_EID); // available remote eid\\n\\n        OutboundConfigStruct storage customConfig = outboundConfig[_oapp][_dstEid];\\n\\n        uint32 maxMessageSize = customConfig.maxMessageSize;\\n        if (maxMessageSize != 0) {\\n            rtnConfig.maxMessageSize = maxMessageSize;\\n        }\\n\\n        uint64 outboundConfirmations = customConfig.outboundConfirmations;\\n        if (outboundConfirmations != 0) {\\n            rtnConfig.outboundConfirmations = outboundConfirmations;\\n        }\\n\\n        address executor = customConfig.executor;\\n        if (executor != address(0x0)) {\\n            rtnConfig.executor = executor;\\n        }\\n        return rtnConfig;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setDefaultOutboundConfig(uint32 _eid, OutboundConfigStruct calldata _config) internal {\\n        require(_config.outboundConfirmations > 0 && _config.executor != address(0x0), Errors.INVALID_ARGUMENT);\\n        require(_config.maxMessageSize > 0, Errors.INVALID_SIZE);\\n\\n        OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n        config.executor = _config.executor;\\n        config.maxMessageSize = _config.maxMessageSize;\\n        config.outboundConfirmations = _config.outboundConfirmations;\\n\\n        emit DefaultOutboundConfigSet(_eid, _config.maxMessageSize, _config.outboundConfirmations, _config.executor);\\n    }\\n\\n    function _setOutboundConfigByType(address _oapp, uint32 _eid, uint32 _configType, bytes calldata _config) internal {\\n        OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = abi.decode(_config, (uint32));\\n            config.maxMessageSize = maxMessageSize;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = abi.decode(_config, (uint64));\\n            config.outboundConfirmations = outboundConfirmations;\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            address executor = abi.decode(_config, (address));\\n            config.executor = executor;\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n        emit OutboundConfigSet(_oapp, _eid, _configType, _config);\\n    }\\n\\n    function _snapshotOutboundConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            uint32 eid = _eids[i];\\n            outboundConfig[_oapp][eid] = getOutboundConfig(_oapp, eid);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit OutboundConfigSnapshot(_oapp, _eids);\\n    }\\n\\n    function _resetOutboundConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            delete outboundConfig[_oapp][_eids[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit OutboundConfigReset(_oapp, _eids);\\n    }\\n}\\n\",\"keccak256\":\"0x067e7bd9a4f95f38744f082a5a1559a5fd4380aa7d3a8c0f83adbcbe9c738822\",\"license\":\"LZBL-1.2\"},\"contracts/interfaces/ILayerZeroExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external payable returns (uint256 price);\\n\\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x833006a7ef059ba082a2a114a28f7d3a84a035292bd6de5b2d8509892f2219b6\",\"license\":\"LZBL-1.2\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFee(\\n        address _sender,\\n        uint32 _eid,\\n        uint256 _totalFee,\\n        bool _payInLzToken\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d8f99f60337be29bec6fe0bd52fac5e0c8bade60b373e4d24d4bfbdd1a0f978\",\"license\":\"LZBL-1.2\"},\"contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { OutboundConfigStruct } from \\\"../OutboundConfig.sol\\\";\\nimport { IUlnConfig, UlnConfigStruct, SetDefaultConfigParam } from \\\"./interfaces/IUlnConfig.sol\\\";\\nimport { ILayerZeroVerifier } from \\\"./interfaces/ILayerZeroVerifier.sol\\\";\\nimport { VerifierOptions } from \\\"./libs/VerifierOptions.sol\\\";\\nimport { UlnOptions } from \\\"./libs/UlnOptions.sol\\\";\\nimport { WorkerOptions } from \\\"../MessageLibBase.sol\\\";\\nimport { UlnConfig } from \\\"./UlnConfig.sol\\\";\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\ncontract UlnBase is Ownable {\\n    mapping(bytes32 headerHash => mapping(bytes32 payloadHash => mapping(address verifier => uint64 confirmations)))\\n        public hashLookup;\\n    IUlnConfig public immutable ulnConfig;\\n\\n    event PayloadSigned(address verifier, bytes header, uint256 confirmations, bytes32 proofHash);\\n    event VerifierFeePaid(address[] verifiers, address[] optionalVerifiers, uint256[] fees);\\n\\n    constructor() {\\n        ulnConfig = IUlnConfig(new UlnConfig(address(this)));\\n    }\\n\\n    // ============================ OnlyOwner ===================================\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external onlyOwner {\\n        ulnConfig.setDefaultConfig(_params);\\n    }\\n\\n    // ============================ View ===================================\\n    function verified(\\n        address _verifier,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash,\\n        uint64 _requiredConfirmation\\n    ) public view returns (bool) {\\n        uint64 verifiedConfirmations = hashLookup[_headerHash][_payloadHash][_verifier];\\n        // return true if the verifier has signed enough confirmations\\n        return verifiedConfirmations >= _requiredConfirmation;\\n    }\\n\\n    /// @dev requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\\n    function verifyConditionMet(\\n        UlnConfigStruct memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) public view returns (bool) {\\n        uint64 requiredConfirmations = _config.inboundConfirmations;\\n        // iterate the must-have verifiers\\n        unchecked {\\n            for (uint256 i = 0; i < _config.verifierCount; ++i) {\\n                if (!verified(_config.verifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                    // return false if any of the must-have verifiers haven't signed\\n                    return false;\\n                }\\n            }\\n\\n            if (_config.verifierCount > 0 && _config.optionalVerifierCount == 0) {\\n                // returns true if all must-have verifiers have signed and there are no optional verifiers\\n                return true;\\n            } else {\\n                // then the optional ones\\n                uint256 optionalCount = 0;\\n                for (uint256 i = 0; i < _config.optionalVerifierCount; ++i) {\\n                    if (verified(_config.optionalVerifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                        // increment the optional count if the optional verifier has signed\\n                        ++optionalCount;\\n                        if (optionalCount >= _config.optionalVerifierThreshold) {\\n                            // early return if the optional threshold has hit\\n                            return true;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        // return false by default as a catch-all\\n        return false;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _getVerifierFees(\\n        UlnConfigStruct memory _config,\\n        uint32 _dstEid,\\n        uint64 _outboundConfirmations,\\n        address _sender,\\n        bytes[] memory _optionsArray,\\n        uint8[] memory _verifierIds\\n    ) internal view returns (uint256 totalFee) {\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        for (uint256 i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n\\n                for (uint256 j = 0; j < _verifierIds.length; ++j) {\\n                    if (_verifierIds[j] == i) {\\n                        options = _optionsArray[j];\\n                        break;\\n                    }\\n                }\\n            }\\n            totalFee += ILayerZeroVerifier(verifier).getFee(_dstEid, _outboundConfirmations, _sender, options);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _assignJobToVerifiers(\\n        mapping(address => uint256) storage _fees,\\n        UlnConfigStruct memory _config,\\n        ILayerZeroVerifier.AssignJobParam memory _param,\\n        bytes memory verifierOptions\\n    ) internal returns (uint256 totalFee, uint256[] memory verifierFees) {\\n        (bytes[] memory optionsArray, uint8[] memory verifierIds) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        verifierFees = new uint256[](verifiersLength);\\n        for (uint256 i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n\\n                for (uint256 j = 0; j < verifierIds.length; ++j) {\\n                    if (verifierIds[j] == i) {\\n                        options = optionsArray[j];\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            verifierFees[i] = ILayerZeroVerifier(verifier).assignJob(_param, options);\\n            if (verifierFees[i] > 0) {\\n                _fees[verifier] += verifierFees[i];\\n                totalFee += verifierFees[i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _getExecutorAndOtherOptionsInternal(\\n        bytes calldata _options\\n    ) internal pure returns (bytes memory, WorkerOptions[] memory) {\\n        (bytes memory executorOpts, bytes memory verifierOpts) = UlnOptions.decode(_options);\\n\\n        if (verifierOpts.length == 0) {\\n            return (executorOpts, new WorkerOptions[](0));\\n        }\\n\\n        WorkerOptions[] memory workerOpts = new WorkerOptions[](1);\\n        workerOpts[0] = WorkerOptions(VerifierOptions.WORKER_ID, verifierOpts);\\n        return (executorOpts, workerOpts);\\n    }\\n\\n    function _ulnSend(\\n        mapping(address => uint256) storage _fees,\\n        WorkerOptions[] memory _options,\\n        bytes memory _packetHeader,\\n        bytes32 _payloadHash,\\n        address _sender,\\n        uint32 _dstEid\\n    ) internal returns (uint256 totalFee, address executor, uint256 maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        uint256[] memory verifierFees;\\n        (totalFee, verifierFees) = _assignJobToVerifiers(\\n            _fees,\\n            config,\\n            ILayerZeroVerifier.AssignJobParam(\\n                _dstEid,\\n                _packetHeader,\\n                _payloadHash,\\n                outboundConfig.outboundConfirmations,\\n                _sender\\n            ),\\n            verifierOptions\\n        );\\n\\n        emit VerifierFeePaid(config.verifiers, config.optionalVerifiers, verifierFees);\\n    }\\n\\n    function _quoteUlnWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view returns (uint256 totalFee, address executor, uint256 maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        (bytes[] memory optionsArray, uint8[] memory verifierIndices) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        totalFee = _getVerifierFees(\\n            config,\\n            _dstEid,\\n            outboundConfig.outboundConfirmations,\\n            _sender,\\n            optionsArray,\\n            verifierIndices\\n        );\\n    }\\n\\n    function _verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) internal {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = _confirmations;\\n        emit PayloadSigned(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x0047b992a61e54030b870b6ca4b09a1326a300a3e0967c13a8cdc5d8692ab35b\",\"license\":\"LZBL-1.2\"},\"contracts/uln/UlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nimport { IUlnConfig, UlnConfigStruct, SetDefaultConfigParam } from \\\"./interfaces/IUlnConfig.sol\\\";\\nimport { OutboundConfig, OutboundConfigStruct } from \\\"../OutboundConfig.sol\\\";\\n\\ncontract UlnConfig is OutboundConfig, IUlnConfig {\\n    using SafeCast for uint256;\\n\\n    // Application config, extending from OutboundConfig\\n    uint32 internal constant CONFIG_TYPE_INBOUND_CONFIRMATIONS = 4;\\n    uint32 internal constant CONFIG_TYPE_VERIFIERS = 5;\\n    uint32 internal constant CONFIG_TYPE_OPTIONAL_VERIFIERS = 6;\\n\\n    address public immutable uln;\\n\\n    mapping(address oapp => mapping(uint32 eid => UlnConfigStruct)) internal ulnConfig;\\n    mapping(uint32 eid => UlnConfigStruct) internal defaultUlnConfig;\\n\\n    event DefaultUlnConfigSet(\\n        uint32 eid,\\n        uint64 inboundConfirmations,\\n        address[] verifiers,\\n        address[] optionalVerifiers,\\n        uint8 optionalVerifierThreshold\\n    );\\n    event UlnConfigSet(address oapp, uint32 eid, uint32 configType, bytes config);\\n    event UlnConfigSnapshot(address oapp, uint32[] eids);\\n    event UlnConfigReset(address oapp, uint32[] eids);\\n\\n    constructor(address _uln) {\\n        uln = _uln;\\n    }\\n\\n    modifier onlyUln() {\\n        require(msg.sender == uln, Errors.PERMISSION_DENIED);\\n        _;\\n    }\\n\\n    // ============================ OnlyUln =====================================\\n\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external onlyUln {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            SetDefaultConfigParam calldata param = _params[i];\\n\\n            uint256 verifierCount = param.verifiers.length;\\n            uint256 optionalVerifierCount = param.optionalVerifiers.length;\\n\\n            require(param.inboundConfirmations > 0, Errors.INVALID_ARGUMENT);\\n            require(verifierCount + optionalVerifierCount <= type(uint8).max, Errors.INVALID_SIZE);\\n            require(param.optionalVerifierThreshold <= optionalVerifierCount, Errors.INVALID_SIZE);\\n            require(verifierCount > 0 || param.optionalVerifierThreshold > 0, Errors.INVALID_VERIFIERS); // at least one verifier\\n            // threshold must be > 0 if optional verifiers are present\\n            if (optionalVerifierCount > 0) require(param.optionalVerifierThreshold > 0, Errors.INVALID_SIZE);\\n\\n            // we can only assert the nonce duplication in each list respectively. the two lists might have duplicated ones\\n            // should do sanity check before submitting to the config here\\n            _assertNoDuplicates(param.verifiers, verifierCount);\\n            _assertNoDuplicates(param.optionalVerifiers, optionalVerifierCount);\\n\\n            defaultUlnConfig[param.eid] = UlnConfigStruct(\\n                param.inboundConfirmations,\\n                false, // unused for default config\\n                false, // unused for default config\\n                uint8(verifierCount),\\n                uint8(optionalVerifierCount),\\n                param.optionalVerifierThreshold,\\n                param.verifiers,\\n                param.optionalVerifiers\\n            );\\n            emit DefaultUlnConfigSet(\\n                param.eid,\\n                param.inboundConfirmations,\\n                param.verifiers,\\n                param.optionalVerifiers,\\n                param.optionalVerifierThreshold\\n            );\\n\\n            _setDefaultOutboundConfig(param.eid, param.outboundConfig);\\n        }\\n    }\\n\\n    function setConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType,\\n        bytes calldata _config\\n    ) external onlyUln {\\n        require(isSupportedEid(_remoteEid), Errors.INVALID_EID);\\n\\n        if (_configType <= CONFIG_TYPE_EXECUTOR) {\\n            _setOutboundConfigByType(_oapp, _remoteEid, _configType, _config);\\n            return;\\n        }\\n\\n        UlnConfigStruct storage config = ulnConfig[_oapp][_remoteEid];\\n        if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            config.inboundConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_VERIFIERS) {\\n            (bool useCustomVerifiers, address[] memory verifiers) = abi.decode(_config, (bool, address[]));\\n\\n            // if useCustomVerifiers is false, verifiers list must be empty\\n            // otherwise, verifiers list must be sorted by ascending order and contain no duplicates\\n            uint8 verifierCount = verifiers.length.toUint8();\\n            if (useCustomVerifiers) {\\n                _assertNoDuplicates(verifiers, verifierCount);\\n            } else {\\n                require(verifierCount == 0, Errors.INVALID_SIZE);\\n            }\\n\\n            config.useCustomVerifiers = useCustomVerifiers;\\n            config.verifierCount = verifierCount;\\n            config.verifiers = verifiers;\\n\\n            // assert verifier list by calling getUlnConfig\\n            getUlnConfig(_oapp, _remoteEid);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_VERIFIERS) {\\n            // should set the optional verifiers and the threshold at the same time and dont support the case that\\n            // set the custom threshold but with the default optional verifiers. If so, when changing the default optional\\n            // verifiers, the threshold may be more than the optional verifier count\\n            (bool useCustomOptionalVerifiers, address[] memory optionalVerifiers, uint8 threshold) = abi.decode(\\n                _config,\\n                (bool, address[], uint8)\\n            );\\n\\n            // 1. if useCustomOptionalVerifiers is false, all other fields must be empty\\n            // 2. if useCustomOptionalVerifiers is true but optionalVerifiers is empty, threshold must be 0\\n            // 3. if useCustomOptionalVerifiers is true and optionalVerifiers is not empty, threshold must be > 0 and\\n            // verifiers list must be sorted by ascending order and contain no duplicates\\n            uint8 optionalVerifierCount = optionalVerifiers.length.toUint8();\\n            if (useCustomOptionalVerifiers && optionalVerifierCount > 0) {\\n                require(threshold > 0 && threshold <= optionalVerifierCount, Errors.INVALID_SIZE);\\n                _assertNoDuplicates(optionalVerifiers, optionalVerifierCount);\\n            } else {\\n                require(optionalVerifierCount == 0 && threshold == 0, Errors.INVALID_SIZE);\\n            }\\n\\n            config.useCustomOptionalVerifiers = useCustomOptionalVerifiers;\\n            config.optionalVerifierCount = optionalVerifierCount;\\n            config.optionalVerifiers = optionalVerifiers;\\n            config.optionalVerifierThreshold = threshold;\\n\\n            // assert verifier list by calling getUlnConfig\\n            getUlnConfig(_oapp, _remoteEid);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n        emit UlnConfigSet(_oapp, _remoteEid, _configType, _config);\\n    }\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external onlyUln {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            uint32 eid = _eids[i];\\n            UlnConfigStruct memory config = getUlnConfig(_oapp, eid); // already assert if not supported eid\\n            config.useCustomVerifiers = true;\\n            config.useCustomOptionalVerifiers = true;\\n            ulnConfig[_oapp][eid] = config;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit UlnConfigSnapshot(_oapp, _eids);\\n\\n        _snapshotOutboundConfig(_eids, _oapp);\\n    }\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external onlyUln {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            uint32 eid = _eids[i];\\n            require(isSupportedEid(eid), Errors.INVALID_EID);\\n            delete ulnConfig[_oapp][eid];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit UlnConfigReset(_oapp, _eids);\\n\\n        _resetOutboundConfig(_eids, _oapp);\\n    }\\n\\n    // ============================ View =====================================\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) public view returns (UlnConfigStruct memory) {\\n        UlnConfigStruct memory rtnConfig = defaultUlnConfig[_remoteEid];\\n\\n        // assert supported eid\\n        require(rtnConfig.inboundConfirmations > 0, Errors.INVALID_EID);\\n\\n        UlnConfigStruct storage customConfig = ulnConfig[_oapp][_remoteEid];\\n\\n        uint64 inboundConfirmations = customConfig.inboundConfirmations;\\n        if (inboundConfirmations != 0) {\\n            rtnConfig.inboundConfirmations = inboundConfirmations;\\n        }\\n\\n        if (customConfig.useCustomVerifiers) {\\n            rtnConfig.useCustomVerifiers = true;\\n            rtnConfig.verifiers = customConfig.verifiers;\\n            rtnConfig.verifierCount = customConfig.verifierCount;\\n        }\\n\\n        if (customConfig.useCustomOptionalVerifiers) {\\n            rtnConfig.useCustomOptionalVerifiers = true;\\n            rtnConfig.optionalVerifiers = customConfig.optionalVerifiers;\\n            rtnConfig.optionalVerifierCount = customConfig.optionalVerifierCount;\\n            rtnConfig.optionalVerifierThreshold = customConfig.optionalVerifierThreshold;\\n        }\\n\\n        // assert verifier list\\n        // it is possible for sender to configure nil verifiers\\n        require(rtnConfig.verifierCount > 0 || rtnConfig.optionalVerifierThreshold > 0, Errors.VERIFIERS_UNAVAILABLE);\\n        // verifier options restricts total verifiers to 255\\n        require(rtnConfig.verifierCount + rtnConfig.optionalVerifierCount <= type(uint8).max, Errors.INVALID_SIZE);\\n\\n        return rtnConfig;\\n    }\\n\\n    function getUlnAndOutboundConfig(\\n        address _oapp,\\n        uint32 _remoteEid\\n    ) external view returns (UlnConfigStruct memory, OutboundConfigStruct memory) {\\n        return (getUlnConfig(_oapp, _remoteEid), getOutboundConfig(_oapp, _remoteEid));\\n    }\\n\\n    function getConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory, bool) {\\n        UlnConfigStruct storage config = ulnConfig[_oapp][_remoteEid];\\n\\n        // type 1/2/3 are for the outboundConfig\\n        if (_configType <= CONFIG_TYPE_EXECUTOR) {\\n            return getOutboundConfigByType(_remoteEid, _oapp, _configType);\\n        } else if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            uint64 inboundConfirmations = config.inboundConfirmations;\\n            if (inboundConfirmations == 0) {\\n                return (abi.encode(defaultUlnConfig[_remoteEid].inboundConfirmations), true);\\n            }\\n            return (abi.encode(inboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_VERIFIERS) {\\n            if (config.useCustomVerifiers) {\\n                return (abi.encode(config.verifiers), false);\\n            }\\n            return (abi.encode(defaultUlnConfig[_remoteEid].verifiers), true);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_VERIFIERS) {\\n            if (config.useCustomOptionalVerifiers) {\\n                return (abi.encode(config.optionalVerifiers, config.optionalVerifierThreshold), false);\\n            }\\n            UlnConfigStruct storage defaultConfig = defaultUlnConfig[_remoteEid];\\n            return (abi.encode(defaultConfig.optionalVerifiers, defaultConfig.optionalVerifierThreshold), true);\\n        }\\n        revert(Errors.NOT_IMPLEMENTED);\\n    }\\n\\n    function getDefaultConfigByType(uint32 _remoteEid, uint32 _configType) external view returns (bytes memory) {\\n        if (_configType <= CONFIG_TYPE_EXECUTOR) {\\n            return getDefaultOutboundConfigByType(_remoteEid, _configType);\\n        } else if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            UlnConfigStruct storage config = defaultUlnConfig[_remoteEid];\\n            return abi.encode(config.inboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_VERIFIERS) {\\n            UlnConfigStruct storage config = defaultUlnConfig[_remoteEid];\\n            return abi.encode(config.verifiers);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_VERIFIERS) {\\n            UlnConfigStruct storage config = defaultUlnConfig[_remoteEid];\\n            return abi.encode(config.optionalVerifiers, config.optionalVerifierThreshold);\\n        }\\n        revert(Errors.NOT_IMPLEMENTED);\\n    }\\n\\n    function isSupportedEid(uint32 _remoteEid) public view returns (bool) {\\n        return defaultUlnConfig[_remoteEid].inboundConfirmations > 0;\\n    }\\n\\n    /// @dev Get the uln config without the default config for the given remoteEid.\\n    function getRawUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfigStruct memory) {\\n        return ulnConfig[_oapp][_remoteEid];\\n    }\\n\\n    function getDefaultUlnConfig(uint32 _remoteEid) external view returns (UlnConfigStruct memory) {\\n        return defaultUlnConfig[_remoteEid];\\n    }\\n\\n    // ============================ Internal =====================================\\n\\n    function _assertNoDuplicates(address[] memory _verifiers, uint256 _verifierCount) internal pure {\\n        address lastVerifier = address(0);\\n        for (uint256 i = 0; i < _verifierCount; i++) {\\n            address verifier = _verifiers[i];\\n            require(verifier > lastVerifier, Errors.UNSORTED); // to ensure no duplicates\\n            lastVerifier = verifier;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x670cc04d07e7f54e114f96cfb9008c8eb915ce9e47e0b4fcfa85d2adc085f193\",\"license\":\"LZBL-1.2\"},\"contracts/uln/interfaces/ILayerZeroVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroVerifier {\\n    struct AssignJobParam {\\n        uint32 dstEid;\\n        bytes packetHeader;\\n        bytes32 payloadHash;\\n        uint64 confirmations;\\n        address sender;\\n    }\\n\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _packetHeader - version + nonce + path\\n    // @param _payloadHash - hash of guid + message\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(AssignJobParam calldata _param, bytes calldata _options) external payable returns (uint256 fee);\\n\\n    // @notice query the verifier fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xb307189baeab355cdc0a7b6cdfe4be8375bf8ccd7de3cdb42210478e66c35271\",\"license\":\"LZBL-1.2\"},\"contracts/uln/interfaces/IUlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nimport { OutboundConfigStruct } from \\\"../../OutboundConfig.sol\\\";\\n\\nstruct SetDefaultConfigParam {\\n    uint32 eid;\\n    OutboundConfigStruct outboundConfig;\\n    uint64 inboundConfirmations;\\n    address[] verifiers;\\n    address[] optionalVerifiers;\\n    uint8 optionalVerifierThreshold;\\n}\\n\\nstruct UlnConfigStruct {\\n    uint64 inboundConfirmations;\\n    bool useCustomVerifiers; // unused for default config\\n    bool useCustomOptionalVerifiers; // unused for default config\\n    uint8 verifierCount;\\n    uint8 optionalVerifierCount;\\n    uint8 optionalVerifierThreshold;\\n    address[] verifiers; // allowed overlap with optionalVerifiers\\n    address[] optionalVerifiers; // allowed overlap with verifiers\\n}\\n\\ninterface IUlnConfig {\\n    function setConfigByType(uint32 _remoteEid, address _oapp, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function isSupportedEid(uint32 _remoteEid) external view returns (bool);\\n\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfigStruct memory);\\n\\n    function getUlnAndOutboundConfig(\\n        address _oapp,\\n        uint32 _remoteEid\\n    ) external view returns (UlnConfigStruct memory, OutboundConfigStruct memory);\\n\\n    function getConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory, bool);\\n\\n    function getDefaultConfigByType(uint32 _remoteEid, uint32 _configType) external view returns (bytes memory);\\n\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external;\\n}\\n\",\"keccak256\":\"0x29c360875e56365b0cefde03dcafdbb5d3ea822c82248a0fba4a83b9e5ef4a56\",\"license\":\"LZBL-1.2\"},\"contracts/uln/interfaces/IUltraLightNode.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nimport { DeliveryState } from \\\"../../MessageLibBase.sol\\\";\\n\\ninterface IUltraLightNode {\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\\n\\n    function deliver(bytes calldata _packetHeader, bytes32 _payloadHash) external;\\n\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState);\\n}\\n\",\"keccak256\":\"0x47eb776a1576f0f9eea3340fffc945576c8535ec16b337be191be77406ba21d6\",\"license\":\"LZBL-1.2\"},\"contracts/uln/libs/UlnOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\n\\nimport { VerifierOptions } from \\\"./VerifierOptions.sol\\\";\\n\\nlibrary UlnOptions {\\n    using SafeCast for uint256;\\n\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    /// @dev decode the options into executorOptions and verifierOptions\\n    /// @param _options the options can be either legacy options (type 1 or 2) or type 3 options\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// @return verifierOptions the verifier options, share the same format of type 3 options\\n    function decode(\\n        bytes calldata _options\\n    ) internal pure returns (bytes memory executorOptions, bytes memory verifierOptions) {\\n        // at least 2 bytes for the option type, but can have no options\\n        require(_options.length >= 2, Errors.INVALID_WORKER_OPTIONS);\\n\\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\\n        uint256 cursor = 2;\\n\\n        // type3 options: [worker_option][worker_option]...\\n        // worker_option: [worker_id][option_size][option]\\n        // worker_id: uint8, option_size: uint16, option: bytes\\n        if (optionsType == TYPE_3) {\\n            unchecked {\\n                uint256 start = cursor;\\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\\n\\n                // heuristic: we assume that the options are mostly EXECUTOR options only\\n                // checking the workerID can reduce gas usage for most cases\\n                while (cursor < _options.length) {\\n                    uint8 workerId = uint8(bytes1(_options[cursor:cursor + 1]));\\n                    require(workerId > 0, Errors.INVALID_WORKER_ID);\\n\\n                    // workerId must equal to the lastWorkerId for the first option\\n                    // so it is always skipped in the first option\\n                    // this operation slices out options whenever the the scan finds a different workerId\\n                    if (lastWorkerId == 0) {\\n                        lastWorkerId = workerId;\\n                    } else if (workerId != lastWorkerId) {\\n                        bytes calldata op = _options[start:cursor]; // slice out the last worker's options\\n                        (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                            executorOptions,\\n                            verifierOptions,\\n                            lastWorkerId,\\n                            op\\n                        );\\n\\n                        // reset the start cursor and lastWorkerId\\n                        start = cursor;\\n                        lastWorkerId = workerId;\\n                    }\\n\\n                    ++cursor; // for workerId\\n\\n                    uint16 size = uint16(bytes2(_options[cursor:cursor + 2]));\\n                    require(size > 0, Errors.INVALID_WORKER_OPTIONS);\\n                    cursor += size + 2;\\n                }\\n\\n                // the options length must be the same as the cursor at the end\\n                require(cursor == _options.length, Errors.INVALID_WORKER_OPTIONS);\\n\\n                // if we have reached the end of the options and the options are not empty\\n                // we need to process the last worker's options\\n                if (_options.length > 2) {\\n                    bytes calldata op = _options[start:cursor];\\n                    (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                        executorOptions,\\n                        verifierOptions,\\n                        lastWorkerId,\\n                        op\\n                    );\\n                }\\n            }\\n        } else {\\n            executorOptions = decodeLegacyOptions(optionsType, _options);\\n        }\\n    }\\n\\n    function _insertWorkerOptions(\\n        bytes memory _executorOptions,\\n        bytes memory _verifierOptions,\\n        uint8 _workerId,\\n        bytes calldata _newOptions\\n    ) private pure returns (bytes memory, bytes memory) {\\n        if (_workerId == ExecutorOptions.WORKER_ID) {\\n            _executorOptions = _executorOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_executorOptions, _newOptions);\\n        } else if (_workerId == VerifierOptions.WORKER_ID) {\\n            _verifierOptions = _verifierOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_verifierOptions, _newOptions);\\n        } else {\\n            revert(Errors.INVALID_WORKER_ID);\\n        }\\n        return (_executorOptions, _verifierOptions);\\n    }\\n\\n    /// @dev decode the legacy options (type 1 or 2) into executorOptions\\n    /// @param _optionType the legacy option type\\n    /// @param _options the legacy options, which still has the option type in the first 2 bytes\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// Data format:\\n    /// legacy type 1: [extraGas]\\n    /// legacy type 2: [extraGas][dstNativeAmt][dstNativeAddress]\\n    /// extraGas: uint256, dstNativeAmt: uint256, dstNativeAddress: bytes\\n    function decodeLegacyOptions(\\n        uint16 _optionType,\\n        bytes calldata _options\\n    ) internal pure returns (bytes memory executorOptions) {\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, Errors.INVALID_LEGACY_OPTION);\\n\\n            // execution gas\\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\\n            // option_type: uint8, execution_gas: uint128\\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas\\n            );\\n        } else if (_optionType == TYPE_2) {\\n            // receiver size <= 32\\n            require(_options.length > 66 && _options.length <= 98, Errors.INVALID_LEGACY_OPTION);\\n\\n            // execution gas\\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\\n\\n            // nativeDrop (amount + receiver)\\n            uint128 amount = uint256(bytes32(_options[34:34 + 32])).toUint128(); // offset 2 + 32\\n            bytes32 receiver;\\n            unchecked {\\n                uint256 receiverLen = _options.length - 66; // offset 2 + 32 + 32\\n                receiver = bytes32(_options[66:]);\\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            }\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result has one lzReceive option and one nativeDrop option:\\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\\n            //      [executor_id][nativeDrop_option_size][option_type][nativeDrop_amount][receiver]\\n            // option_type: uint8, execution_gas: uint128, nativeDrop_amount: uint128, receiver: bytes32\\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            // nativeDrop_option_size = len(option_type) + len(nativeDrop_amount) + len(receiver) = 1 + 16 + 32 = 49\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas,\\n                ExecutorOptions.WORKER_ID,\\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\\n                amount,\\n                receiver\\n            );\\n        } else {\\n            revert(Errors.UNSUPPORTED_OPTION_TYPE);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1652f102766f7068f0969b94c8fa1f41e3568872f95d7853d64c4518ce2222e0\",\"license\":\"LZBL-1.2\"},\"contracts/uln/libs/VerifierOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMaps } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary VerifierOptions {\\n    using BitMaps for BitMaps.BitMap256;\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    /// @dev group verifier options by its idx\\n    /// @param _options [verifier_id][verifier_option][verifier_id][verifier_option]...\\n    ///        verifier_option = [option_size][verifier_idx][option_type][option]\\n    ///        option_size = len(verifier_idx) + len(option_type) + len(option)\\n    ///        verifier_id: uint8, verifier_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return verifierOptions the grouped options, still share the same format of _options\\n    /// @return verifierIndices the verifier indices\\n    function groupVerifierOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory verifierOptions, uint8[] memory verifierIndices) {\\n        if (_options.length == 0) return (verifierOptions, verifierIndices);\\n\\n        uint8 numVerifiers = getNumVerifiers(_options);\\n\\n        // if there is only 1 verifier, we can just return the whole options\\n        if (numVerifiers == 1) {\\n            verifierOptions = new bytes[](1);\\n            verifierOptions[0] = _options;\\n\\n            verifierIndices = new uint8[](1);\\n            verifierIndices[0] = _options.toUint8(3); // verifier idx\\n            return (verifierOptions, verifierIndices);\\n        }\\n\\n        // otherwise, we need to group the options by verifier_idx\\n        verifierIndices = new uint8[](numVerifiers);\\n        verifierOptions = new bytes[](numVerifiers);\\n        unchecked {\\n            uint256 cursor;\\n            uint256 start;\\n            uint8 lastVerifierIdx = 255; // 255 is an invalid verifier_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumVerifiers (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // verifierIdx asserted in getNumVerifiers (skip check)\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // verifierIdx must equal to the lastVerifierIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastVerifierIdx\\n                if (lastVerifierIdx == 255) {\\n                    lastVerifierIdx = verifierIdx;\\n                } else if (verifierIdx != lastVerifierIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, opt);\\n\\n                    // reset the start and lastVerifierIdx\\n                    start += len;\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumVerifiers\\n            // if we have reached the end of the options, we need to process the last verifier\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, op);\\n\\n            // revert verifierIndices to start from 0\\n            for (uint8 i = 0; i < numVerifiers; ++i) {\\n                --verifierIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertVerifierOptions(\\n        bytes[] memory _verifierOptions,\\n        uint8[] memory _verifierIndices,\\n        uint8 _verifierIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        unchecked {\\n            // verifierIdx starts from 0 but default value of verifierIndices is 0,\\n            // so we tell if the slot is empty by adding 1 to verifierIdx\\n            require(_verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n            uint8 verifierIdxAdj = _verifierIdx + 1;\\n\\n            for (uint8 j = 0; j < _verifierIndices.length; ++j) {\\n                uint8 index = _verifierIndices[j];\\n                if (verifierIdxAdj == index) {\\n                    _verifierOptions[j] = abi.encodePacked(_verifierOptions[j], _newOptions);\\n                    break;\\n                } else if (index == 0) {\\n                    // empty slot, that means it is the first time we see this verifier\\n                    _verifierIndices[j] = verifierIdxAdj;\\n                    _verifierOptions[j] = _newOptions;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique verifiers\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    function getNumVerifiers(bytes memory _options) internal pure returns (uint8 numVerifiers) {\\n        uint256 cursor;\\n        BitMaps.BitMap256 bitmap;\\n\\n        // find number of unique verifier_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_VERIFIER_OPTION); // at least 1 byte for verifier_idx and 1 byte for option_type\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // if verifierIdx is not set, increment numVerifiers\\n                // max num of verifiers is 255, 255 is an invalid verifier_idx\\n                require(verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n                if (!bitmap.get(verifierIdx)) {\\n                    ++numVerifiers;\\n                    bitmap = bitmap.set(verifierIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        require(cursor == _options.length, Errors.INVALID_VERIFIER_OPTION);\\n    }\\n\\n    /// @dev decode the next verifier option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextVerifierOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip verifier_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and verifier_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7899ccf4bb84447fa6608c9e35922ece6352c740e1abccfee7986dfd16cdf728\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln302/UltraLightNode302.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Packet, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\\\";\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\nimport { SetConfigParam } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\\\";\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\nimport { IUltraLightNode } from \\\"../interfaces/IUltraLightNode.sol\\\";\\nimport { UlnConfigStruct } from \\\"../interfaces/IUlnConfig.sol\\\";\\nimport { DeliveryState, WorkerOptions } from \\\"../../MessageLibBase.sol\\\";\\nimport { MessageLibBaseE2 } from \\\"../../MessageLibBaseE2.sol\\\";\\nimport { UlnBase } from \\\"../UlnBase.sol\\\";\\n\\ncontract UltraLightNode302 is IUltraLightNode, UlnBase, MessageLibBaseE2 {\\n    using PacketV1Codec for bytes;\\n\\n    constructor(address _endpoint, uint256 _treasuryGasCap) MessageLibBaseE2(_endpoint, _treasuryGasCap) UlnBase() {}\\n\\n    function supportsInterface(bytes4 _interfaceId) public view override returns (bool) {\\n        return _interfaceId == type(IUltraLightNode).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    // ============================ OnlyEndpoint ===================================\\n\\n    function setConfig(address _oapp, uint32 _eid, SetConfigParam[] calldata _params) external override onlyEndpoint {\\n        for (uint256 i = 0; i < _params.length; i++) {\\n            SetConfigParam calldata param = _params[i];\\n            ulnConfig.setConfigByType(_eid, _oapp, param.configType, param.config);\\n        }\\n    }\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external override onlyEndpoint {\\n        ulnConfig.snapshotConfig(_eids, _oapp);\\n    }\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external override onlyEndpoint {\\n        ulnConfig.resetConfig(_eids, _oapp);\\n    }\\n\\n    // ============================ External ===================================\\n\\n    /// @dev dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\\n    function deliver(bytes calldata _packetHeader, bytes32 _payloadHash) external {\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(_packetHeader.receiverB20(), _packetHeader.srcEid());\\n        require(_deliverable(config, _packetHeader, _payloadHash) == DeliveryState.Deliverable, Errors.INVALID_STATE);\\n\\n        Origin memory origin = Origin(_packetHeader.srcEid(), _packetHeader.sender(), _packetHeader.nonce());\\n        ILayerZeroEndpointV2(endpoint).deliver(origin, _packetHeader.receiverB20(), _payloadHash);\\n    }\\n\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        _verify(_packetHeader, _payloadHash, _confirmations);\\n    }\\n\\n    // ============================ View ===================================\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view override returns (bytes memory, bool) {\\n        return ulnConfig.getConfigByType(_eid, _oapp, _configType);\\n    }\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view override returns (bytes memory) {\\n        return ulnConfig.getDefaultConfigByType(_eid, _configType);\\n    }\\n\\n    function isSupportedEid(uint32 _eid) external view override returns (bool) {\\n        return ulnConfig.isSupportedEid(_eid);\\n    }\\n\\n    function version() external pure override returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 2);\\n    }\\n\\n    /// @dev a deliverable message requires it to be endpoint deliverable and ULN deliverable\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState) {\\n        address receiver = _packetHeader.receiverB20();\\n        uint32 srcEid = _packetHeader.srcEid();\\n\\n        DeliveryState endpointStatus = _endpointDeliverable(srcEid, receiver, _packetHeader);\\n        if (endpointStatus != DeliveryState.Deliverable) {\\n            return endpointStatus;\\n        }\\n\\n        // check verifier deliverable\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(receiver, srcEid);\\n        return _deliverable(config, _packetHeader, _payloadHash);\\n    }\\n\\n    // ============================ Internal ===================================\\n\\n    function _quoteWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view override returns (uint256, address, uint256) {\\n        return _quoteUlnWorkers(_sender, _dstEid, _options);\\n    }\\n\\n    function _send(\\n        Packet calldata _packet,\\n        WorkerOptions[] memory _options\\n    )\\n        internal\\n        override\\n        returns (uint256 otherWorkerFees, address executor, uint256 maxMsgSize, bytes memory encodedPacket)\\n    {\\n        bytes memory packetHeader = PacketV1Codec.encodePacketHeader(_packet);\\n        bytes memory payload = PacketV1Codec.encodePayload(_packet);\\n        bytes32 payloadHash = keccak256(payload);\\n        (otherWorkerFees, executor, maxMsgSize) = _ulnSend(\\n            fees,\\n            _options,\\n            packetHeader,\\n            payloadHash,\\n            _packet.sender,\\n            _packet.dstEid\\n        );\\n        encodedPacket = abi.encodePacked(packetHeader, payload);\\n    }\\n\\n    function _deliverable(\\n        UlnConfigStruct memory _config,\\n        bytes calldata _packetHeader,\\n        bytes32 _payloadHash\\n    ) internal view returns (DeliveryState) {\\n        // assert packet header is of right size 81\\n        require(_packetHeader.length == 81, Errors.INVALID_SIZE);\\n        // assert packet header version is the same as ULN\\n        require(_packetHeader.version() == PacketV1Codec.PACKET_VERSION, Errors.INVALID_VERSION);\\n        // assert the packet is for this endpoint\\n        require(_packetHeader.dstEid() == localEid, Errors.INVALID_EID);\\n\\n        bool signed = verifyConditionMet(_config, keccak256(_packetHeader), _payloadHash);\\n        if (signed) {\\n            return DeliveryState.Deliverable;\\n        } else {\\n            return DeliveryState.Signing;\\n        }\\n    }\\n\\n    function _getExecutorAndOtherOptions(\\n        bytes calldata _options\\n    ) internal pure override returns (bytes memory, WorkerOptions[] memory) {\\n        return _getExecutorAndOtherOptionsInternal(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x0c755d9437bff4fe04ab362e145836dc7106dffaaf3b54b72995e422f1f71b16\",\"license\":\"LZBL-1.2\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101a55760003560e01c8063715018a6116100e1578063c77341731161008a578063f0f4426011610064578063f0f44260146105a9578063f2fde38b146105c9578063faaebd21146105e9578063fd9be5221461062457600080fd5b8063c7734173146104ff578063d2d287f014610569578063d2f759851461058957600080fd5b80639c33abf7116100bb5780639c33abf714610491578063a5972ec5146104bf578063b8007ff6146104df57600080fd5b8063715018a6146104245780637c0cf763146104395780638da5cb5b1461046657600080fd5b80633c782a521161014e5780635ed31c59116101285780635ed31c591461038a57806361d027b3146103aa5780636750cd4c146103d7578063690c6555146103f757600080fd5b80633c782a52146102ce5780634389e58f1461032f57806354fd4d501461035d57600080fd5b80630d500bf31161017f5780630d500bf3146102355780631c63e3b61461028e578063200175f7146102ae57600080fd5b806301ffc9a7146101b15780630223536e146101e657806307d7b2f91461020857600080fd5b366101ac57005b600080fd5b3480156101bd57600080fd5b506101d16101cc366004614270565b610644565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b5061020661020136600461431a565b6106a0565b005b34801561021457600080fd5b50610228610223366004614392565b6106b2565b6040516101dd9190614415565b34801561024157600080fd5b506102697f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b34801561029a57600080fd5b506102066102a936600461449e565b61071f565b3480156102ba57600080fd5b506102066102c93660046144f5565b610860565b3480156102da57600080fd5b506103166102e9366004614536565b600160209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101dd565b34801561033b57600080fd5b5061034f61034a366004614564565b610a80565b6040516101dd92919061462d565b34801561036957600080fd5b506040805160038152600060208201526002918101919091526060016101dd565b34801561039657600080fd5b506102066103a5366004614651565b610b97565b3480156103b657600080fd5b506002546102699073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103e357600080fd5b506101d16103f23660046146ba565b610e40565b34801561040357600080fd5b506104176104123660046146d7565b610ef7565b6040516101dd9190614710565b34801561043057600080fd5b50610206610fc1565b34801561044557600080fd5b50610459610454366004614651565b610fd5565b6040516101dd9190614752565b34801561047257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610269565b34801561049d57600080fd5b506104b16104ac366004614793565b611104565b6040516101dd9291906147d3565b3480156104cb57600080fd5b506101d16104da366004614956565b6111df565b3480156104eb57600080fd5b506102066104fa366004614a5f565b611363565b34801561050b57600080fd5b506101d161051a366004614ab8565b600092835260016020908152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff9590951684529390935290205467ffffffffffffffff9182169116101590565b34801561057557600080fd5b5061020661058436600461449e565b6114e5565b34801561059557600080fd5b506102066105a4366004614af7565b6115e6565b3480156105b557600080fd5b506102066105c4366004614b39565b611698565b3480156105d557600080fd5b506102066105e4366004614b39565b6116ac565b3480156105f557600080fd5b50610616610604366004614b39565b60036020526000908152604090205481565b6040519081526020016101dd565b34801561063057600080fd5b5061020661063f366004614b56565b611746565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f20fcb85400000000000000000000000000000000000000000000000000000000148061069a575061069a82611836565b92915050565b6106ac848484846118cd565b50505050565b60408051808201909152600080825260208201526000806107006106d96020890189614b39565b6106e960408a0160208b016146ba565b6106f660408b018b614b82565b905089898961198c565b604080518082019091529182526020820152925050505b949350505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146107b25760405162461bcd60e51b81526004016107a99190614710565b60405180910390fd5b506040517f1c63e3b600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631c63e3b69061082990869086908690600401614be7565b600060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b50505050505050565b60025460408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146108cd5760405162461bcd60e51b81526004016107a99190614710565b508273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f936112b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190614c51565b73ffffffffffffffffffffffffffffffffffffffff16141580156109ad575073ffffffffffffffffffffffffffffffffffffffff821615155b6040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a015760405162461bcd60e51b81526004016107a99190614710565b50610a2373ffffffffffffffffffffffffffffffffffffffff84168383611add565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527fe081464b7278501267de69fa85b7b9560b0ae05d5fbfaab9b1986c70356e2efe9060600160405180910390a1505050565b604080518082019091526000808252602082015260408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610b215760405162461bcd60e51b81526004016107a99190614710565b50600080610b30888888611b6f565b9092509050600080610b62610b4b60608c0160408d01614b39565b610b5b60808d0160608e016146ba565b858a611c15565b9092509050610b718284614c9d565b604080518082019091529081526020810191909152945091925050505b94509492505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343ea4fa9610bdf8686611c74565b610be98787611c86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015263ffffffff166024820152604401600060405180830381865afa158015610c5d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c859190810190614e0b565b90506001610c9582868686611ca9565b6003811115610ca657610ca6614723565b146040518060400160405280600781526020017f4c5a33303030300000000000000000000000000000000000000000000000000081525090610cfb5760405162461bcd60e51b81526004016107a99190614710565b5060006040518060600160405280610d138787611c86565b63ffffffff168152602001610d288787611e34565b8152602001610d378787611e4d565b67ffffffffffffffff169052905073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166345c6dcc482610d8c8888611c74565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152835163ffffffff1660048201526020840151602482015292015167ffffffffffffffff16604483015273ffffffffffffffffffffffffffffffffffffffff1660648201526084810186905260a401600060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b505050505050505050565b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636750cd4c90602401602060405180830381865afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190614e40565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fba9190810190614eca565b9392505050565b610fc9611e70565b610fd36000611ed7565b565b600080610fe28585611c74565b90506000610ff08686611c86565b9050600061100082848989611f4c565b9050600181600381111561101657611016614723565b14611025579250610fba915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ea9190810190614e0b565b90506110f881898989611ca9565b98975050505050505050565b6040517f8fd061fc00000000000000000000000000000000000000000000000000000000815263ffffffff808516600483015273ffffffffffffffffffffffffffffffffffffffff848116602484015290831660448301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690638fd061fc90606401600060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d39190810190614eff565b91509150935093915050565b8251600090815b856060015160ff1681101561127b576112648660c00151828151811061120e5761120e614f46565b6020908102919091018101516000888152600183526040808220898352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8085169116101590565b61127357600092505050610fba565b6001016111e6565b506000856060015160ff161180156112985750608085015160ff16155b156112a7576001915050610fba565b6000805b866080015160ff16811015611356576113298760e0015182815181106112d3576112d3614f46565b60209081029190910181015160008981526001835260408082208a8352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8086169116101590565b1561134e578160010191508660a0015160ff16821061134e5760019350505050610fba565b6001016112ab565b5060009695505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146113ed5760405162461bcd60e51b81526004016107a99190614710565b5060005b818110156114de573683838381811061140c5761140c614f46565b905060200281019061141e9190614f75565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d59104ed868861146b60208601866146ba565b6114786020870187614b82565b6040518663ffffffff1660e01b8152600401611498959493929190614fde565b600060405180830381600087803b1580156114b257600080fd5b505af11580156114c6573d6000803e3d6000fd5b505050505080806114d690615024565b9150506113f1565b5050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461156f5760405162461bcd60e51b81526004016107a99190614710565b506040517fd2d287f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d2d287f09061082990869086908690600401614be7565b6115ee611e70565b6040517fd2f7598500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d2f75985906116629085908590600401615119565b600060405180830381600087803b15801561167c57600080fd5b505af1158015611690573d6000803e3d6000fd5b505050505050565b6116a0611e70565b6116a981612185565b50565b6116b4611e70565b73ffffffffffffffffffffffffffffffffffffffff811661173d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107a9565b6116a981611ed7565b61175082826121fe565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16156117d2576117cd73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168383611add565b6117dc565b6117dc828261229f565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290527fb41e4a699a31f6278037fa278d73d6618985e1568fb5cfa02c743e48c965a7519060600160405180910390a15050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd913d0cd00000000000000000000000000000000000000000000000000000000148061069a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461069a565b806001600086866040516118e29291906152a5565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc09161197e9187908790869088906152b5565b60405180910390a150505050565b60408051808201909152600781527f4c5a31303030300000000000000000000000000000000000000000000000000060208201526000908190836119e35760405162461bcd60e51b81526004016107a99190614710565b506000806119f18686612357565b915091506000806000611a058d8d86612370565b925092509250611a158b8261238f565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b8152600401611a549493929190615303565b602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a95919061534e565b611a9f9084614c9d565b9250600080611ab08f8f878f6123e4565b90925090508115611ac857611ac58286614c9d565b94505b939e939d50929b505050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611b6a908490612520565b505050565b60606000806000611b808686612357565b91509150600080600080611b948b86612615565b93509350935093508387611ba89190614c9d565b96506000611bb960c08d018d614b82565b90509050611bc7818461238f565b611bf8848d6060016020810190611bde91906146ba565b8e6040016020810190611bf19190614b39565b848b6126bb565b611c029089614c9d565b919c919b50909950505050505050505050565b600080611c24868686866123e4565b90925090508115610b8e5760025473ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604081208054849290611c66908490614c9d565b909155505094509492505050565b6000610fba611c8384846127f4565b90565b6000611c96600d60098486615367565b611c9f91615391565b60e01c9392505050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015260009060518414611d015760405162461bcd60e51b81526004016107a99190614710565b506001611d0e8585612804565b60ff16146040518060400160405280600781526020017f4c5a31303030370000000000000000000000000000000000000000000000000081525090611d665760405162461bcd60e51b81526004016107a99190614710565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611d988585612826565b63ffffffff16146040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090611df35760405162461bcd60e51b81526004016107a99190614710565b506000611e18868686604051611e0a9291906152a5565b6040518091039020856111df565b90508015611e2a576001915050610717565b6000915050610717565b6000611e44602d600d8486615367565b610fba916153d9565b6000611e5d600960018486615367565b611e6691615415565b60c01c9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107a9565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060405180606001604052808763ffffffff168152602001611f708686611e34565b8152602001611f7f8686611e4d565b67ffffffffffffffff908116909152604080517f418ba351000000000000000000000000000000000000000000000000000000008152835163ffffffff1660048201526020840151602482015290830151909116604482015230606482015273ffffffffffffffffffffffffffffffffffffffff87811660848301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063418ba3519060a401602060405180830381865afa15801561204a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206e9190614e40565b90508061208057600292505050610717565b8151602083015160408085015190517fe361b59c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff1660648201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e361b59c90608401602060405180830381865afa15801561213f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121639190614e40565b905080156121775760029350505050610717565b506001979650505050505050565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f9060200160405180910390a150565b3360009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff8316158015906122335750808211155b6040518060400160405280600781526020017f4c5a313030303000000000000000000000000000000000000000000000000000815250906122875760405162461bcd60e51b81526004016107a99190614710565b50336000908152600360205260409020919003905550565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146122f9576040519150601f19603f3d011682016040523d82523d6000602084013e6122fe565b606091505b50509050806040518060400160405280600781526020017f4c5a333030303000000000000000000000000000000000000000000000000000815250906106ac5760405162461bcd60e51b81526004016107a99190614710565b6060806123648484612836565b915091505b9250929050565b6000806000612380868686612923565b92509250925093509350939050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015281831115611b6a5760405162461bcd60e51b81526004016107a99190614710565b600254600090819073ffffffffffffffffffffffffffffffffffffffff1615610b8e576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa9250505080156124ae575060408051601f3d908101601f191682019092526124ab9181019061534e565b60015b15610b8e5783156124c157809150612516565b60006124ed7f00000000000000000000000000000000000000000000000000000000000000003a61545b565b905060008187116124fe5781612500565b865b905080831161250f5782612511565b805b945050505b5094509492505050565b6000612582826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612a7c9092919063ffffffff16565b90508051600014806125a35750808060200190518101906125a39190614e40565b611b6a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107a9565b6000808060608161262d612628886154c3565b612a8b565b9050600061264261263d896154c3565b612b71565b905060008180519060200120905061268360038985848d604001602081019061266b9190614b39565b8e606001602081019061267e91906146ba565b612b8e565b604051929950909750955061269e9084908490602001615561565b604051602081830303815290604052935050505092959194509250565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a4290612716908890889088908890600401615303565b6020604051808303816000875af1158015612735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612759919061534e565b9050801561279c5773ffffffffffffffffffffffffffffffffffffffff861660009081526003602052604081208054839290612796908490614c9d565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b6000611e44605160318486615367565b60006128136001828486615367565b61281c91615590565b60f81c9392505050565b6000611c966031602d8486615367565b6060806000806128468686612d6c565b91509150805160000361289e57604080516000808252602082019092528391612892565b60408051808201909152600081526060602082015281526020019060019003908161286a5790505b50935093505050612369565b604080516001808252818301909252600091816020015b6040805180820190915260008152606060208201528152602001906001900390816128b55790505090506040518060400160405280600260ff168152602001838152508160008151811061290b5761290b614f46565b60209081029190910101529196919550909350505050565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa1580156129c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f091908101906155d6565b9150915080604001519350806000015163ffffffff16925060008651600014612a375786600081518110612a2657612a26614f46565b602002602001015160200151612a48565b604051806020016040528060008152505b9050600080612a568361301e565b91509150612a6c858b86602001518e86866132c2565b9750505050505093509350939050565b6060610717848460008561345f565b8051602080830151604080850151606080870151608088015193517f01000000000000000000000000000000000000000000000000000000000000009681019690965260c09690961b7fffffffffffffffff00000000000000000000000000000000000000000000000016602186015260e093841b7fffffffff00000000000000000000000000000000000000000000000000000000908116602987015273ffffffffffffffffffffffffffffffffffffffff909216602d8601529490921b909116604d83015260518201526071015b6040516020818303038152906040529050919050565b60608160a001518260c00151604051602001612b5b929190615686565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c5b91908101906155d6565b9150915080604001519350806000015163ffffffff16925060008a51600014612ca2578a600081518110612c9157612c91614f46565b602002602001015160200151612cb3565b604051806020016040528060008152505b90506060612d138d856040518060a001604052808c63ffffffff1681526020018f81526020018e8152602001876020015167ffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff168152508561355e565b60c086015160e0870151604051939a509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec4992612d54929085906156f2565b60405180910390a15050505096509650969350505050565b60408051808201909152600781527f4c5a313030313600000000000000000000000000000000000000000000000000602082015260609081906002841015612dc75760405162461bcd60e51b81526004016107a99190614710565b506000612dd76002828688615367565b612de09161575b565b60f01c905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8201613007578060005b86831015612f7a576000612e2b60018501858a8c615367565b612e3491615590565b60f81c905060008160ff16116040518060400160405280600781526020017f4c5a31303031320000000000000000000000000000000000000000000000000081525090612e945760405162461bcd60e51b81526004016107a99190614710565b508160ff16600003612ea857809150612ee5565b8160ff168160ff1614612ee557366000612ec486868c8e615367565b91509150612ed5898986858561381c565b9099509750859450919250829150505b6001840193600090612efc90600301868b8d615367565b612f059161575b565b60f01c905060008161ffff16116040518060400160405280600781526020017f4c5a31303031360000000000000000000000000000000000000000000000000081525090612f665760405162461bcd60e51b81526004016107a99190614710565b508060020161ffff16850194505050612e12565b60408051808201909152600781527f4c5a3130303136000000000000000000000000000000000000000000000000006020820152838814612fce5760405162461bcd60e51b81526004016107a99190614710565b50600287111561300057366000612fe785858b8d615367565b91509150612ff8888885858561381c565b909850965050505b5050613015565b6130128287876139a5565b93505b50509250929050565b606080825160000361302f57915091565b600061303a84613c72565b90508060ff166001036130ec5760408051600180825281830190925290816020015b606081526020019060019003908161305c579050509250838360008151811061308757613087614f46565b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505091506130bf846003613def565b826000815181106130d2576130d2614f46565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff811115613108576131086147f7565b604051908082528060200260200182016040528015613131578160200160208202803683370190505b5091508060ff1667ffffffffffffffff811115613150576131506147f7565b60405190808252806020026020018201604052801561318357816020015b606081526020019060019003908161316e5790505b50925060008060ff5b86518310156132375760019092019160006131a78885613e55565b60029490940193905060006131bc8986613def565b90508260ff1660ff036131d157809250613228565b8260ff168160ff1614613228577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8486030160006132108b8784613ebb565b905061321e8a8a8784613fe3565b5093909301929150815b5061ffff16929092019161318c565b8183036000613247898584613ebb565b905061325588888584613fe3565b60005b8660ff168160ff1610156132b657878160ff168151811061327b5761327b614f46565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff169052600101613258565b50505050505050915091565b600080876080015188606001516132d991906157a1565b905060005b8160ff1681101561345357600060608a6060015160ff168310613327578a60e001518b6060015160ff1684038151811061331a5761331a614f46565b6020026020010151613346565b8a60c00151838151811061333d5761333d614f46565b60200260200101515b915060005b86518110156133a0578387828151811061336757613367614f46565b602002602001015160ff16036133985787818151811061338957613389614f46565b602002602001015191506133a0565b60010161334b565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac906133f9908d908d908d9087906004016157ba565b602060405180830381865afa158015613416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343a919061534e565b6134449086614c9d565b945082600101925050506132de565b50509695505050505050565b6060824710156134d75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107a9565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516135009190615805565b60006040518083038185875af1925050503d806000811461353d576040519150601f19603f3d011682016040523d82523d6000602084013e613542565b606091505b509150915061355387838387614134565b979650505050505050565b6000606060008061356e8561301e565b9150915060008760800151886060015161358891906157a1565b90508060ff1667ffffffffffffffff8111156135a6576135a66147f7565b6040519080825280602002602001820160405280156135cf578160200160208202803683370190505b50935060005b8160ff1681101561380f57600060608a6060015160ff16831061361e578a60e001518b6060015160ff1684038151811061361157613611614f46565b602002602001015161363d565b8a60c00151838151811061363457613634614f46565b60200260200101515b915060005b8551811015613697578386828151811061365e5761365e614f46565b602002602001015160ff160361368f5786818151811061368057613680614f46565b60200260200101519150613697565b600101613642565b506040517f95d376d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906395d376d7906136ec908d908590600401615817565b6020604051808303816000875af115801561370b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372f919061534e565b87848151811061374157613741614f46565b602002602001018181525050600087848151811061376157613761614f46565b602002602001015111156138055786838151811061378157613781614f46565b60200260200101518c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546137d69190614c9d565b925050819055508683815181106137ef576137ef614f46565b6020026020010151886138029190614c9d565b97505b50506001016135d5565b5050505094509492505050565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff8616016138b757865115613879578684846040516020016138659392919061589e565b6040516020818303038152906040526138b0565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505b965061399a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff86160161394f57855115613911578584846040516020016138fd9392919061589e565b604051602081830303815290604052613948565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505b955061399a565b604080518082018252600781527f4c5a3130303132000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526107a99190600401614710565b509495939450505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff851601613ae75760408051808201909152600781527f4c5a313030313400000000000000000000000000000000000000000000000000602082015260228314613a275760405162461bcd60e51b81526004016107a99190614710565b506000613a49613a3b602260028688615367565b613a44916153d9565b6141ba565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b166024820152909150603401604051602081830303815290604052915050610fba565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff851601613c2757604282118015613b23575060628211155b6040518060400160405280600781526020017f4c5a31303031340000000000000000000000000000000000000000000000000081525090613b775760405162461bcd60e51b81526004016107a99190614710565b506000613b8b613a3b602260028688615367565b90506000613ba0613a3b604260228789615367565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe8501613bd4866042818a615367565b613bdd916153d9565b60405160086020938403029190911c9250613c0e916001916011918391889183916031916002918b918b91016158c6565b6040516020818303038152906040529350505050610fba565b604080518082018252600781527f4c5a4330303032000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526107a99190600401614710565b60008060005b8351821015613d8f576001909101906000613c938584613e55565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a31303031350000000000000000000000000000000000000000000000000081525090613cf85760405162461bcd60e51b81526004016107a99190614710565b506000613d058685613def565b905060ff8160ff16106040518060400160405280600781526020017f4c5a31303031310000000000000000000000000000000000000000000000000081525090613d625760405162461bcd60e51b81526004016107a99190614710565b50600160ff82161b8316613d805760019485019460ff82161b831792505b5061ffff169190910190613c78565b835182146040518060400160405280600781526020017f4c5a31303031350000000000000000000000000000000000000000000000000081525090613de75760405162461bcd60e51b81526004016107a99190614710565b505050919050565b6000613dfc826001614c9d565b83511015613e4c5760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e64730000000000000000000000000060448201526064016107a9565b50016001015190565b6000613e62826002614c9d565b83511015613eb25760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016107a9565b50016002015190565b606081613ec981601f614c9d565b1015613f175760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016107a9565b613f218284614c9d565b84511015613f715760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016107a9565b606082158015613f905760405191506000825260208201604052613fda565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613fc9578051835260209283019201613fb1565b5050858452601f01601f1916604052505b50949350505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff8381161061403a5760405162461bcd60e51b81526004016107a99190614710565b506001820160005b84518160ff161015611690576000858260ff168151811061406557614065614f46565b602002602001015190508060ff168360ff16036140e057868260ff168151811061409157614091614f46565b6020026020010151846040516020016140ab929190615561565b604051602081830303815290604052878360ff16815181106140cf576140cf614f46565b602002602001018190525050611690565b8060ff1660000361412b5782868360ff168151811061410157614101614f46565b602002602001019060ff16908160ff168152505083878360ff16815181106140cf576140cf614f46565b50600101614042565b606083156141b05782516000036141a95773ffffffffffffffffffffffffffffffffffffffff85163b6141a95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107a9565b5081610717565b6107178383614246565b60006fffffffffffffffffffffffffffffffff8211156142425760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016107a9565b5090565b8151156142565781518083602001fd5b8060405162461bcd60e51b81526004016107a99190614710565b60006020828403121561428257600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fba57600080fd5b60008083601f8401126142c457600080fd5b50813567ffffffffffffffff8111156142dc57600080fd5b60208301915083602082850101111561236957600080fd5b67ffffffffffffffff811681146116a957600080fd5b8035614315816142f4565b919050565b6000806000806060858703121561433057600080fd5b843567ffffffffffffffff81111561434757600080fd5b614353878288016142b2565b90955093505060208501359150604085013561436e816142f4565b939692955090935050565b80151581146116a957600080fd5b803561431581614379565b600080600080606085870312156143a857600080fd5b843567ffffffffffffffff808211156143c057600080fd5b90860190606082890312156143d457600080fd5b9094506020860135906143e682614379565b909350604086013590808211156143fc57600080fd5b50614409878288016142b2565b95989497509550505050565b81518152602080830151908201526040810161069a565b60008083601f84011261443e57600080fd5b50813567ffffffffffffffff81111561445657600080fd5b6020830191508360208260051b850101111561236957600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146116a957600080fd5b803561431581614471565b6000806000604084860312156144b357600080fd5b833567ffffffffffffffff8111156144ca57600080fd5b6144d68682870161442c565b90945092505060208401356144ea81614471565b809150509250925092565b60008060006060848603121561450a57600080fd5b833561451581614471565b9250602084013561452581614471565b929592945050506040919091013590565b60008060006060848603121561454b57600080fd5b833592506020840135915060408401356144ea81614471565b6000806000806060858703121561457a57600080fd5b843567ffffffffffffffff8082111561459257600080fd5b9086019060e082890312156145a657600080fd5b909450602086013590808211156145bc57600080fd5b506145c9878288016142b2565b909450925050604085013561436e81614379565b60005b838110156145f85781810151838201526020016145e0565b50506000910152565b600081518084526146198160208601602086016145dd565b601f01601f19169290920160200192915050565b82518152602080840151908201526060604082015260006107176060830184614601565b60008060006040848603121561466657600080fd5b833567ffffffffffffffff81111561467d57600080fd5b614689868287016142b2565b909790965060209590950135949350505050565b63ffffffff811681146116a957600080fd5b80356143158161469d565b6000602082840312156146cc57600080fd5b8135610fba8161469d565b600080604083850312156146ea57600080fd5b82356146f58161469d565b915060208301356147058161469d565b809150509250929050565b602081526000610fba6020830184614601565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602081016004831061478d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806000606084860312156147a857600080fd5b83356147b38161469d565b925060208401356147c381614471565b915060408401356144ea8161469d565b6040815260006147e66040830185614601565b905082151560208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561484a5761484a6147f7565b60405290565b60405160e0810167ffffffffffffffff8111828210171561484a5761484a6147f7565b604051601f8201601f1916810167ffffffffffffffff8111828210171561489c5761489c6147f7565b604052919050565b60ff811681146116a957600080fd5b8035614315816148a4565b600067ffffffffffffffff8211156148d8576148d86147f7565b5060051b60200190565b600082601f8301126148f357600080fd5b81356020614908614903836148be565b614873565b82815260059290921b8401810191818101908684111561492757600080fd5b8286015b8481101561494b57803561493e81614471565b835291830191830161492b565b509695505050505050565b60008060006060848603121561496b57600080fd5b833567ffffffffffffffff8082111561498357600080fd5b90850190610100828803121561499857600080fd5b6149a0614826565b6149a98361430a565b81526149b760208401614387565b60208201526149c860408401614387565b60408201526149d9606084016148b3565b60608201526149ea608084016148b3565b60808201526149fb60a084016148b3565b60a082015260c083013582811115614a1257600080fd5b614a1e898286016148e2565b60c08301525060e083013582811115614a3657600080fd5b614a42898286016148e2565b60e083015250976020870135975060409096013595945050505050565b60008060008060608587031215614a7557600080fd5b8435614a8081614471565b93506020850135614a908161469d565b9250604085013567ffffffffffffffff811115614aac57600080fd5b6144098782880161442c565b60008060008060808587031215614ace57600080fd5b8435614ad981614471565b93506020850135925060408501359150606085013561436e816142f4565b60008060208385031215614b0a57600080fd5b823567ffffffffffffffff811115614b2157600080fd5b614b2d8582860161442c565b90969095509350505050565b600060208284031215614b4b57600080fd5b8135610fba81614471565b60008060408385031215614b6957600080fd5b8235614b7481614471565b946020939093013593505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614bb757600080fd5b83018035915067ffffffffffffffff821115614bd257600080fd5b60200191503681900382131561236957600080fd5b6040808252810183905260008460608301825b86811015614c27578235614c0d8161469d565b63ffffffff16825260209283019290910190600101614bfa565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b600060208284031215614c6357600080fd5b8151610fba81614471565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561069a5761069a614c6e565b8051614315816142f4565b805161431581614379565b8051614315816148a4565b600082601f830112614ce257600080fd5b81516020614cf2614903836148be565b82815260059290921b84018101918181019086841115614d1157600080fd5b8286015b8481101561494b578051614d2881614471565b8352918301918301614d15565b60006101008284031215614d4857600080fd5b614d50614826565b9050614d5b82614cb0565b8152614d6960208301614cbb565b6020820152614d7a60408301614cbb565b6040820152614d8b60608301614cc6565b6060820152614d9c60808301614cc6565b6080820152614dad60a08301614cc6565b60a082015260c082015167ffffffffffffffff80821115614dcd57600080fd5b614dd985838601614cd1565b60c084015260e0840151915080821115614df257600080fd5b50614dff84828501614cd1565b60e08301525092915050565b600060208284031215614e1d57600080fd5b815167ffffffffffffffff811115614e3457600080fd5b61071784828501614d35565b600060208284031215614e5257600080fd5b8151610fba81614379565b600067ffffffffffffffff821115614e7757614e776147f7565b50601f01601f191660200190565b600082601f830112614e9657600080fd5b8151614ea461490382614e5d565b818152846020838601011115614eb957600080fd5b6107178260208301602087016145dd565b600060208284031215614edc57600080fd5b815167ffffffffffffffff811115614ef357600080fd5b61071784828501614e85565b60008060408385031215614f1257600080fd5b825167ffffffffffffffff811115614f2957600080fd5b614f3585828601614e85565b925050602083015161470581614379565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112614fa957600080fd5b9190910192915050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b600063ffffffff808816835273ffffffffffffffffffffffffffffffffffffffff8716602084015280861660408401525060806060830152613553608083018486614fb3565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361505557615055614c6e565b5060010190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261509157600080fd5b830160208101925035905067ffffffffffffffff8111156150b157600080fd5b8060051b360382131561236957600080fd5b8183526000602080850194508260005b8581101561510e5781356150e681614471565b73ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016150d3565b509495945050505050565b60208082528181018390526000906040808401600586901b850182018785805b89811015615296577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018c3603018112615199578283fd5b8b0161010081356151a98161469d565b63ffffffff9081168752828a0135906151c18261469d565b16868a0152818801356151d3816142f4565b67ffffffffffffffff16868901526060828101356151f081614471565b73ffffffffffffffffffffffffffffffffffffffff1690870152608061521783820161430a565b67ffffffffffffffff169087015260a06152338382018461505c565b83838a0152615245848a0182846150c3565b935050505060c06152588184018461505c565b888403838a015261526a8482846150c3565b935050505060e061527c8184016148b3565b60ff16960195909552509386019391860191600101615139565b50919998505050505050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff861681526080602082015260006152e5608083018688614fb3565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006153446080830184614601565b9695505050505050565b60006020828403121561536057600080fd5b5051919050565b6000808585111561537757600080fd5b8386111561538457600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156153d15780818660040360031b1b83161692505b505092915050565b8035602083101561069a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156153d15760089490940360031b84901b1690921692915050565b808202811582820484141761069a5761069a614c6e565b600082601f83011261548357600080fd5b813561549161490382614e5d565b8181528460208386010111156154a657600080fd5b816020850160208301376000918101602001919091529392505050565b600060e082360312156154d557600080fd5b6154dd614850565b6154e68361430a565b81526154f4602084016146af565b602082015261550560408401614493565b6040820152615516606084016146af565b60608201526080830135608082015260a083013560a082015260c083013567ffffffffffffffff81111561554957600080fd5b61555536828601615472565b60c08301525092915050565b600083516155738184602088016145dd565b8351908301906155878183602088016145dd565b01949350505050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156153d15760019490940360031b84901b1690921692915050565b60008082840360808112156155ea57600080fd5b835167ffffffffffffffff8082111561560257600080fd5b61560e87838801614d35565b94506060601f198401121561562257600080fd5b60405192506060830191508282108183111715615641576156416147f7565b5060405260208401516156538161469d565b81526040840151615663816142f4565b6020820152606084015161567681614471565b6040820152919491935090915050565b8281526000825161569e8160208501602087016145dd565b919091016020019392505050565b600081518084526020808501945080840160005b8381101561510e57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016156c0565b60608152600061570560608301866156ac565b60208382038185015261571882876156ac565b8481036040860152855180825282870193509082019060005b8181101561574d57845183529383019391830191600101615731565b509098975050505050505050565b7fffff00000000000000000000000000000000000000000000000000000000000081358181169160028510156153d15760029490940360031b84901b1690921692915050565b60ff818116838216019081111561069a5761069a614c6e565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006153446080830184614601565b60008251614fa98184602087016145dd565b6040815263ffffffff83511660408201526000602084015160a0606084015261584360e0840182614601565b90506040850151608084015267ffffffffffffffff60608601511660a084015273ffffffffffffffffffffffffffffffffffffffff60808601511660c084015282810360208401526158958185614601565b95945050505050565b600084516158b08184602089016145dd565b8201838582376000930192835250909392505050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b166017840152506159a7601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea26469706673582212201e3babea2c5e88886a8fe3b04f54a2b12d37f454a59b671cb5d58521ea07d35264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deliver(bytes,bytes32)": {
        "details": "dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable."
      },
      "deliverable(bytes,bytes32)": {
        "details": "a deliverable message requires it to be endpoint deliverable and ULN deliverable"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": {
        "details": "requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed"
      },
      "withdrawFee(address,uint256)": {
        "details": "E2 only"
      },
      "withdrawLzTokenFee(address,address,uint256)": {
        "details": "_lzToken is a user-supplied value because lzToken might change in the endpoint before all lzToken can be taken outE2 onlytreasury only function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5278,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14403,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "hashLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))"
      },
      {
        "astId": 10877,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10881,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "fees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}