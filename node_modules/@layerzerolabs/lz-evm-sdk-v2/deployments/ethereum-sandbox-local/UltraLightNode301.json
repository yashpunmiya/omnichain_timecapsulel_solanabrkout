{
  "address": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryGasCap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nonceContract",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_localEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_treasuryFeeHandler",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "eid",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "AddressSizeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ExecutorFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcAddress",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidDst",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LzTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PacketReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lzTokenFee",
          "type": "uint256"
        }
      ],
      "name": "PacketSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "optionalVerifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "name": "VerifierFeePaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "addressSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packet",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliverable",
      "outputs": [
        {
          "internalType": "enum DeliveryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lzTokenFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getDefaultConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonceContract",
      "outputs": [
        {
          "internalType": "contract INonceContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lzTokenPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setAddressSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "maxMessageSize",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "outboundConfirmations",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "executor",
                  "type": "address"
                }
              ],
              "internalType": "struct OutboundConfigStruct",
              "name": "outboundConfig",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "verifiers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalVerifiers",
              "type": "address[]"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierThreshold",
              "type": "uint8"
            }
          ],
          "internalType": "struct SetDefaultConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDefaultConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzToken",
          "type": "address"
        }
      ],
      "name": "setLzToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeeHandler",
      "outputs": [
        {
          "internalType": "contract ITreasuryFeeHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ulnConfig",
      "outputs": [
        {
          "internalType": "contract IUlnConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_requiredConfirmation",
          "type": "uint64"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "useCustomVerifiers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useCustomOptionalVerifiers",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "verifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "verifiers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalVerifiers",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfigStruct",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifyConditionMet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf886c93a04cc50ddb956f02b05165f03f1ed806412ba08a97f0e99f00bb2382",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
    "transactionIndex": 0,
    "gasUsed": "8477044",
    "logsBloom": "0x
    "blockHash": "0xfc4909b67fb84d2e66c08d5e08aa84bc7cd25316ee88c801141bbd1780681763",
    "transactionHash": "0xbf886c93a04cc50ddb956f02b05165f03f1ed806412ba08a97f0e99f00bb2382",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28,
        "transactionHash": "0xbf886c93a04cc50ddb956f02b05165f03f1ed806412ba08a97f0e99f00bb2382",
        "address": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfc4909b67fb84d2e66c08d5e08aa84bc7cd25316ee88c801141bbd1780681763"
      }
    ],
    "blockNumber": 28,
    "cumulativeGasUsed": "8477044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC",
    100000,
    "0xbCF26943C0197d2eE0E5D05c716Be60cc2761508",
    20121,
    "0x05Aa229Aec102f78CE0E852A812a388F076Aa555"
  ],
  "numDeployments": 1,
  "solcInputHash": "b3c6e517a5cac95d752b303e7d0dac12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryGasCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nonceContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_localEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_treasuryFeeHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"eid\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"AddressSizeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExecutorFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidDst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LzTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PacketReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"name\":\"PacketSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"VerifierFeePaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"addressSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packet\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliverable\",\"outputs\":[{\"internalType\":\"enum DeliveryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getDefaultConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonceContract\",\"outputs\":[{\"internalType\":\"contract INonceContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzTokenPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setAddressSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxMessageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"outboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct OutboundConfigStruct\",\"name\":\"outboundConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierThreshold\",\"type\":\"uint8\"}],\"internalType\":\"struct SetDefaultConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDefaultConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzToken\",\"type\":\"address\"}],\"name\":\"setLzToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeHandler\",\"outputs\":[{\"internalType\":\"contract ITreasuryFeeHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ulnConfig\",\"outputs\":[{\"internalType\":\"contract IUlnConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_requiredConfirmation\",\"type\":\"uint64\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomVerifiers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalVerifiers\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"verifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfigStruct\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifyConditionMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ULN301 will be deployed on EndpointV1 and is for backward compatibility with ULN302 on EndpointV2. 301 can talk to both 301 and 302\",\"kind\":\"dev\",\"methods\":{\"deliver(bytes,uint256)\":{\"details\":\"in 301, this is equivalent to execution as in Endpoint V2dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\"},\"deliverable(bytes,bytes32)\":{\"details\":\"keeping the same interface as 302a deliverable message requires it to be endpoint deliverable and ULN deliverable\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)\":{\"details\":\"requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/uln301/UltraLightNode301.sol\":\"UltraLightNode301\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nstruct PacketForQuote {\\n    address sender;\\n    uint32 dstEid;\\n    bytes message;\\n}\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\",\"keccak256\":\"0x8a4a8eba63ff7313aee2d476b643fd05ec13e91fa0a7cea1b9af0f0d04aee645\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\n\\nlibrary AddressCast {\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        require(_addressBytes.length <= 32, Errors.INVALID_SIZE);\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        require(_size > 0 && _size <= 32, Errors.INVALID_SIZE);\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        require(_addressBytes.length == 20, Errors.INVALID_SIZE);\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0xe6d44403fa59516c15c3e6fd04d2864b2e88ad6d517c54d0c0c54907c726ee25\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d9e14945a749ee736df011a64ebac0ef34d04c9fa0be9a27b1fbb42b2ebd50a\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // Invalid Argument (http: 400)\\n    string internal constant INVALID_ARGUMENT = \\\"LZ10000\\\";\\n    string internal constant ONLY_REGISTERED = \\\"LZ10001\\\";\\n    string internal constant ONLY_REGISTERED_OR_DEFAULT = \\\"LZ10002\\\";\\n    string internal constant INVALID_AMOUNT = \\\"LZ10003\\\";\\n    string internal constant INVALID_NONCE = \\\"LZ10004\\\";\\n    string internal constant SAME_VALUE = \\\"LZ10005\\\";\\n    string internal constant UNSORTED = \\\"LZ10006\\\";\\n    string internal constant INVALID_VERSION = \\\"LZ10007\\\";\\n    string internal constant INVALID_EID = \\\"LZ10008\\\";\\n    string internal constant INVALID_SIZE = \\\"LZ10009\\\";\\n    string internal constant ONLY_NON_DEFAULT = \\\"LZ10010\\\";\\n    string internal constant INVALID_VERIFIERS = \\\"LZ10011\\\";\\n    string internal constant INVALID_WORKER_ID = \\\"LZ10012\\\";\\n    string internal constant DUPLICATED_OPTION = \\\"LZ10013\\\";\\n    string internal constant INVALID_LEGACY_OPTION = \\\"LZ10014\\\";\\n    string internal constant INVALID_VERIFIER_OPTION = \\\"LZ10015\\\";\\n    string internal constant INVALID_WORKER_OPTIONS = \\\"LZ10016\\\";\\n    string internal constant INVALID_EXECUTOR_OPTION = \\\"LZ10017\\\";\\n    string internal constant INVALID_ADDRESS = \\\"LZ10018\\\";\\n\\n    // Out of Range (http: 400)\\n    string internal constant OUT_OF_RANGE = \\\"LZ20000\\\";\\n\\n    // Invalid State (http: 400)\\n    string internal constant INVALID_STATE = \\\"LZ30000\\\";\\n    string internal constant SEND_REENTRANCY = \\\"LZ30001\\\";\\n    string internal constant RECEIVE_REENTRANCY = \\\"LZ30002\\\";\\n    string internal constant COMPOSE_REENTRANCY = \\\"LZ30003\\\";\\n\\n    // Permission Denied (http: 403)\\n    string internal constant PERMISSION_DENIED = \\\"LZ50000\\\";\\n\\n    // Not Found (http: 404)\\n    string internal constant NOT_FOUND = \\\"LZ60000\\\";\\n\\n    // Already Exists (http: 409)\\n    string internal constant ALREADY_EXISTS = \\\"LZ80000\\\";\\n\\n    // Not Implemented (http: 501)\\n    string internal constant NOT_IMPLEMENTED = \\\"LZC0000\\\";\\n    string internal constant UNSUPPORTED_INTERFACE = \\\"LZC0001\\\";\\n    string internal constant UNSUPPORTED_OPTION_TYPE = \\\"LZC0002\\\";\\n\\n    // Unavailable (http: 503)\\n    string internal constant UNAVAILABLE = \\\"LZD0000\\\";\\n    string internal constant NATIVE_COIN_UNAVAILABLE = \\\"LZD0001\\\";\\n    string internal constant TOKEN_UNAVAILABLE = \\\"LZD0002\\\";\\n    string internal constant DEFAULT_LIBRARY_UNAVAILABLE = \\\"LZD0003\\\";\\n    string internal constant VERIFIERS_UNAVAILABLE = \\\"LZD0004\\\";\\n}\\n\",\"keccak256\":\"0x1dd138a42249e89930838c83c3f9aafa27c47e4e7fd9be6ed2a1a2d934941176\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.19;\\n\\nlibrary BitMaps {\\n    type BitMap256 is uint256;\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xe8ebb9fa066ef4edd5284865999d457dad5acb5dc1d2db4bd62deb3b7f4dca6f\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { Errors } from \\\"../../libs/Errors.sol\\\";\\nimport { CalldataBytesLib } from \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_EXECUTOR_OPTION);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        require(_option.length == 48, Errors.INVALID_EXECUTOR_OPTION);\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_EXECUTOR_OPTION);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0xf02fe3352f9ba2eca938cf8efb82e6401ae0390899e9ee8865cf9cb901289426\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\nimport { Packet } from \\\"../../MessagingStructs.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xfda7daabe5b9047c5d116dbdbe407030c7b223a7c292843f10dfef104233b259\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xb6a446c0b622566f8c2e2ae4c32208bcc3f815c5f5657a27fa48d583e31f7b7d\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroMessagingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroMessagingLibrary {\\n    // send(), messages will be inflight.\\n    function send(\\n        address _userApplication,\\n        uint64 _lastNonce,\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // estimate native fee at the send side\\n    function estimateFees(\\n        uint16 _chainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    //---------------------------------------------------------------------------\\n    // setConfig / getConfig are User Application (UA) functions to specify Oracle, Relayer, blockConfirmations, libraryVersion\\n    function setConfig(uint16 _chainId, address _userApplication, uint _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7fb6d715e58bdad860e194c7b34cc3539fa27df54dbb18d1b41e4da08c064418\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nimport { ILayerZeroExecutor } from \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\nimport { ILayerZeroTreasury } from \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\n\\nstruct WorkerOptions {\\n    uint8 workerId;\\n    bytes options;\\n}\\n\\nenum DeliveryState {\\n    Signing,\\n    Deliverable,\\n    Delivered,\\n    Waiting\\n}\\n\\nabstract contract MessageLibBase is Ownable {\\n    address internal immutable endpoint;\\n    uint32 internal immutable localEid;\\n    uint256 internal immutable treasuryGasCap;\\n\\n    // config\\n    address public treasury;\\n\\n    // accumulated fees for workers and treasury\\n    mapping(address worker => uint256) public fees;\\n\\n    event ExecutorFeePaid(address executor, uint256 fee);\\n    event TreasurySet(address treasury);\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        require(endpoint == msg.sender, Errors.PERMISSION_DENIED);\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint32 _localEid, uint256 _treasuryGasCap) {\\n        endpoint = _endpoint;\\n        localEid = _localEid;\\n        treasuryGasCap = _treasuryGasCap;\\n    }\\n\\n    // ======================= Internal =======================\\n    function _assertMessageSize(uint256 _actual, uint256 _max) internal pure {\\n        require(_actual <= _max, Errors.INVALID_SIZE);\\n    }\\n\\n    function _sendToExecutor(\\n        address _executor,\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _msgSize,\\n        bytes memory _executorOptions\\n    ) internal returns (uint256 executorFee) {\\n        executorFee = ILayerZeroExecutor(_executor).assignJob(_dstEid, _sender, _msgSize, _executorOptions);\\n        if (executorFee > 0) {\\n            fees[_executor] += executorFee;\\n        }\\n        emit ExecutorFeePaid(_executor, executorFee);\\n    }\\n\\n    function _sendToTreasury(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint256 _totalNativeFee,\\n        bool _payInLzToken\\n    ) internal returns (uint256 treasuryNativeFee, uint256 lzTokenFee) {\\n        // fee should be in lzTokenFee if payInLzToken, otherwise in native\\n        (treasuryNativeFee, lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, _totalNativeFee, _payInLzToken);\\n        // if payInLzToken, handle in messagelib / endpoint\\n        if (treasuryNativeFee > 0) {\\n            fees[treasury] += treasuryNativeFee;\\n        }\\n    }\\n\\n    function _quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint256 _msgSize,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) internal view returns (uint256, uint256) {\\n        require(_options.length > 0, Errors.INVALID_ARGUMENT);\\n\\n        (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions) = _getExecutorAndOtherOptions(\\n            _options\\n        );\\n\\n        // quote other workers\\n        (uint256 nativeFee, address executor, uint256 maxMsgSize) = _quoteWorkers(_sender, _dstEid, otherWorkerOptions);\\n\\n        // assert msg size\\n        _assertMessageSize(_msgSize, maxMsgSize);\\n\\n        // quote executor\\n        nativeFee += ILayerZeroExecutor(executor).getFee(_dstEid, _sender, _msgSize, executorOptions);\\n\\n        // quote treasury\\n        (uint256 treasuryNativeFee, uint256 lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, nativeFee, _payInLzToken);\\n        if (treasuryNativeFee > 0) {\\n            nativeFee += treasuryNativeFee;\\n        }\\n\\n        return (nativeFee, lzTokenFee);\\n    }\\n\\n    function _quoteTreasuryFee(\\n        address _sender,\\n        uint32 _eid,\\n        uint256 _totalFee,\\n        bool _payInLzToken\\n    ) internal view returns (uint256 nativeFee, uint256 lzTokenFee) {\\n        if (treasury != address(0x0)) {\\n            try ILayerZeroTreasury(treasury).getFee(_sender, _eid, _totalFee, _payInLzToken) returns (\\n                uint256 treasuryFee\\n            ) {\\n                // success\\n                if (_payInLzToken) {\\n                    lzTokenFee = treasuryFee;\\n                } else {\\n                    // pay in native, make sure that the treasury fee is not higher than the cap\\n                    uint256 gasFeeEstimate = tx.gasprice * treasuryGasCap;\\n                    // cap is the max of total fee and gasFeeEstimate. this is to prevent apps from forcing the cap to 0.\\n                    uint256 nativeFeeCap = _totalFee > gasFeeEstimate ? _totalFee : gasFeeEstimate;\\n                    // to prevent the treasury from returning an overly high value to break the path\\n                    nativeFee = treasuryFee > nativeFeeCap ? nativeFeeCap : treasuryFee;\\n                }\\n            } catch {\\n                // failure, something wrong with treasury contract, charge nothing and continue\\n            }\\n        }\\n    }\\n\\n    function _transferNative(address _to, uint256 _amount) internal {\\n        (bool success, ) = _to.call{ value: _amount }(\\\"\\\");\\n        require(success, Errors.INVALID_STATE);\\n    }\\n\\n    // for msg.sender only\\n    function _assertAndDebitAmount(address _to, uint256 _amount) internal {\\n        uint256 fee = fees[msg.sender];\\n        require(_to != address(0x0) && _amount <= fee, Errors.INVALID_ARGUMENT);\\n        unchecked {\\n            fees[msg.sender] = fee - _amount;\\n        }\\n    }\\n\\n    function _setTreasury(address _treasury) internal {\\n        treasury = _treasury;\\n        emit TreasurySet(_treasury);\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    function _quoteWorkers(\\n        address _oapp,\\n        uint32 _eid,\\n        WorkerOptions[] memory _options\\n    ) internal view virtual returns (uint256 nativeFee, address executor, uint256 maxMsgSize);\\n\\n    function _getExecutorAndOtherOptions(\\n        bytes calldata _options\\n    ) internal view virtual returns (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions);\\n}\\n\",\"keccak256\":\"0x81c39f0974f8e492db34b0123761e67ac11fbd81f0ffb0c63c96a0575dfcb9fe\",\"license\":\"LZBL-1.2\"},\"contracts/OutboundConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nstruct OutboundConfigStruct {\\n    uint32 maxMessageSize;\\n    uint64 outboundConfirmations;\\n    address executor;\\n}\\n\\n/// extract it because it might be reused by future non-ULN msglibs\\ncontract OutboundConfig {\\n    // Derived MessageLibs should never use this as config type\\n    uint32 internal constant CONFIG_TYPE_MAX_MESSAGE_SIZE = 1;\\n    uint32 internal constant CONFIG_TYPE_OUTBOUND_CONFIRMATIONS = 2;\\n    uint32 internal constant CONFIG_TYPE_EXECUTOR = 3;\\n\\n    mapping(uint32 dstEid => OutboundConfigStruct) public defaultOutboundConfig;\\n    mapping(address oapp => mapping(uint32 dstEid => OutboundConfigStruct)) public outboundConfig;\\n\\n    event DefaultOutboundConfigSet(uint32 eid, uint32 maxMessageSize, uint64 outboundConfirmations, address executor);\\n    event OutboundConfigSet(address oapp, uint32 eid, uint32 configType, bytes config);\\n    event OutboundConfigSnapshot(address oapp, uint32[] eids);\\n    event OutboundConfigReset(address oapp, uint32[] eids);\\n\\n    // ============================ View ===================================\\n    function getOutboundConfigByType(\\n        uint32 _eid,\\n        address _oapp,\\n        uint256 _configType\\n    ) public view returns (bytes memory, bool) {\\n        OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = config.maxMessageSize;\\n            if (maxMessageSize == 0) {\\n                return (abi.encode(defaultOutboundConfig[_eid].maxMessageSize), true);\\n            }\\n            return (abi.encode(maxMessageSize), false);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = config.outboundConfirmations;\\n            if (outboundConfirmations == 0) {\\n                return (abi.encode(defaultOutboundConfig[_eid].outboundConfirmations), true);\\n            }\\n            return (abi.encode(outboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            address executor = config.executor;\\n            if (executor == address(0x0)) {\\n                return (abi.encode(defaultOutboundConfig[_eid].executor), true);\\n            }\\n            return (abi.encode(executor), false);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function getDefaultOutboundConfigByType(uint32 _eid, uint32 _configType) public view returns (bytes memory) {\\n        OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            return abi.encode(config.maxMessageSize);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            return abi.encode(config.outboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            return abi.encode(config.executor);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getOutboundConfig(address _oapp, uint32 _dstEid) public view returns (OutboundConfigStruct memory) {\\n        OutboundConfigStruct memory rtnConfig = defaultOutboundConfig[_dstEid];\\n        require(rtnConfig.maxMessageSize > 0, Errors.INVALID_EID); // available remote eid\\n\\n        OutboundConfigStruct storage customConfig = outboundConfig[_oapp][_dstEid];\\n\\n        uint32 maxMessageSize = customConfig.maxMessageSize;\\n        if (maxMessageSize != 0) {\\n            rtnConfig.maxMessageSize = maxMessageSize;\\n        }\\n\\n        uint64 outboundConfirmations = customConfig.outboundConfirmations;\\n        if (outboundConfirmations != 0) {\\n            rtnConfig.outboundConfirmations = outboundConfirmations;\\n        }\\n\\n        address executor = customConfig.executor;\\n        if (executor != address(0x0)) {\\n            rtnConfig.executor = executor;\\n        }\\n        return rtnConfig;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setDefaultOutboundConfig(uint32 _eid, OutboundConfigStruct calldata _config) internal {\\n        require(_config.outboundConfirmations > 0 && _config.executor != address(0x0), Errors.INVALID_ARGUMENT);\\n        require(_config.maxMessageSize > 0, Errors.INVALID_SIZE);\\n\\n        OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n        config.executor = _config.executor;\\n        config.maxMessageSize = _config.maxMessageSize;\\n        config.outboundConfirmations = _config.outboundConfirmations;\\n\\n        emit DefaultOutboundConfigSet(_eid, _config.maxMessageSize, _config.outboundConfirmations, _config.executor);\\n    }\\n\\n    function _setOutboundConfigByType(address _oapp, uint32 _eid, uint32 _configType, bytes calldata _config) internal {\\n        OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = abi.decode(_config, (uint32));\\n            config.maxMessageSize = maxMessageSize;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = abi.decode(_config, (uint64));\\n            config.outboundConfirmations = outboundConfirmations;\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            address executor = abi.decode(_config, (address));\\n            config.executor = executor;\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n        emit OutboundConfigSet(_oapp, _eid, _configType, _config);\\n    }\\n\\n    function _snapshotOutboundConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            uint32 eid = _eids[i];\\n            outboundConfig[_oapp][eid] = getOutboundConfig(_oapp, eid);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit OutboundConfigSnapshot(_oapp, _eids);\\n    }\\n\\n    function _resetOutboundConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            delete outboundConfig[_oapp][_eids[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit OutboundConfigReset(_oapp, _eids);\\n    }\\n}\\n\",\"keccak256\":\"0x067e7bd9a4f95f38744f082a5a1559a5fd4380aa7d3a8c0f83adbcbe9c738822\",\"license\":\"LZBL-1.2\"},\"contracts/interfaces/ILayerZeroExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external payable returns (uint256 price);\\n\\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint256 _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x833006a7ef059ba082a2a114a28f7d3a84a035292bd6de5b2d8509892f2219b6\",\"license\":\"LZBL-1.2\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFee(\\n        address _sender,\\n        uint32 _eid,\\n        uint256 _totalFee,\\n        bool _payInLzToken\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d8f99f60337be29bec6fe0bd52fac5e0c8bade60b373e4d24d4bfbdd1a0f978\",\"license\":\"LZBL-1.2\"},\"contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { OutboundConfigStruct } from \\\"../OutboundConfig.sol\\\";\\nimport { IUlnConfig, UlnConfigStruct, SetDefaultConfigParam } from \\\"./interfaces/IUlnConfig.sol\\\";\\nimport { ILayerZeroVerifier } from \\\"./interfaces/ILayerZeroVerifier.sol\\\";\\nimport { VerifierOptions } from \\\"./libs/VerifierOptions.sol\\\";\\nimport { UlnOptions } from \\\"./libs/UlnOptions.sol\\\";\\nimport { WorkerOptions } from \\\"../MessageLibBase.sol\\\";\\nimport { UlnConfig } from \\\"./UlnConfig.sol\\\";\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\ncontract UlnBase is Ownable {\\n    mapping(bytes32 headerHash => mapping(bytes32 payloadHash => mapping(address verifier => uint64 confirmations)))\\n        public hashLookup;\\n    IUlnConfig public immutable ulnConfig;\\n\\n    event PayloadSigned(address verifier, bytes header, uint256 confirmations, bytes32 proofHash);\\n    event VerifierFeePaid(address[] verifiers, address[] optionalVerifiers, uint256[] fees);\\n\\n    constructor() {\\n        ulnConfig = IUlnConfig(new UlnConfig(address(this)));\\n    }\\n\\n    // ============================ OnlyOwner ===================================\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external onlyOwner {\\n        ulnConfig.setDefaultConfig(_params);\\n    }\\n\\n    // ============================ View ===================================\\n    function verified(\\n        address _verifier,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash,\\n        uint64 _requiredConfirmation\\n    ) public view returns (bool) {\\n        uint64 verifiedConfirmations = hashLookup[_headerHash][_payloadHash][_verifier];\\n        // return true if the verifier has signed enough confirmations\\n        return verifiedConfirmations >= _requiredConfirmation;\\n    }\\n\\n    /// @dev requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\\n    function verifyConditionMet(\\n        UlnConfigStruct memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) public view returns (bool) {\\n        uint64 requiredConfirmations = _config.inboundConfirmations;\\n        // iterate the must-have verifiers\\n        unchecked {\\n            for (uint256 i = 0; i < _config.verifierCount; ++i) {\\n                if (!verified(_config.verifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                    // return false if any of the must-have verifiers haven't signed\\n                    return false;\\n                }\\n            }\\n\\n            if (_config.verifierCount > 0 && _config.optionalVerifierCount == 0) {\\n                // returns true if all must-have verifiers have signed and there are no optional verifiers\\n                return true;\\n            } else {\\n                // then the optional ones\\n                uint256 optionalCount = 0;\\n                for (uint256 i = 0; i < _config.optionalVerifierCount; ++i) {\\n                    if (verified(_config.optionalVerifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                        // increment the optional count if the optional verifier has signed\\n                        ++optionalCount;\\n                        if (optionalCount >= _config.optionalVerifierThreshold) {\\n                            // early return if the optional threshold has hit\\n                            return true;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        // return false by default as a catch-all\\n        return false;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _getVerifierFees(\\n        UlnConfigStruct memory _config,\\n        uint32 _dstEid,\\n        uint64 _outboundConfirmations,\\n        address _sender,\\n        bytes[] memory _optionsArray,\\n        uint8[] memory _verifierIds\\n    ) internal view returns (uint256 totalFee) {\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        for (uint256 i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n\\n                for (uint256 j = 0; j < _verifierIds.length; ++j) {\\n                    if (_verifierIds[j] == i) {\\n                        options = _optionsArray[j];\\n                        break;\\n                    }\\n                }\\n            }\\n            totalFee += ILayerZeroVerifier(verifier).getFee(_dstEid, _outboundConfirmations, _sender, options);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _assignJobToVerifiers(\\n        mapping(address => uint256) storage _fees,\\n        UlnConfigStruct memory _config,\\n        ILayerZeroVerifier.AssignJobParam memory _param,\\n        bytes memory verifierOptions\\n    ) internal returns (uint256 totalFee, uint256[] memory verifierFees) {\\n        (bytes[] memory optionsArray, uint8[] memory verifierIds) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        verifierFees = new uint256[](verifiersLength);\\n        for (uint256 i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n\\n                for (uint256 j = 0; j < verifierIds.length; ++j) {\\n                    if (verifierIds[j] == i) {\\n                        options = optionsArray[j];\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            verifierFees[i] = ILayerZeroVerifier(verifier).assignJob(_param, options);\\n            if (verifierFees[i] > 0) {\\n                _fees[verifier] += verifierFees[i];\\n                totalFee += verifierFees[i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _getExecutorAndOtherOptionsInternal(\\n        bytes calldata _options\\n    ) internal pure returns (bytes memory, WorkerOptions[] memory) {\\n        (bytes memory executorOpts, bytes memory verifierOpts) = UlnOptions.decode(_options);\\n\\n        if (verifierOpts.length == 0) {\\n            return (executorOpts, new WorkerOptions[](0));\\n        }\\n\\n        WorkerOptions[] memory workerOpts = new WorkerOptions[](1);\\n        workerOpts[0] = WorkerOptions(VerifierOptions.WORKER_ID, verifierOpts);\\n        return (executorOpts, workerOpts);\\n    }\\n\\n    function _ulnSend(\\n        mapping(address => uint256) storage _fees,\\n        WorkerOptions[] memory _options,\\n        bytes memory _packetHeader,\\n        bytes32 _payloadHash,\\n        address _sender,\\n        uint32 _dstEid\\n    ) internal returns (uint256 totalFee, address executor, uint256 maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        uint256[] memory verifierFees;\\n        (totalFee, verifierFees) = _assignJobToVerifiers(\\n            _fees,\\n            config,\\n            ILayerZeroVerifier.AssignJobParam(\\n                _dstEid,\\n                _packetHeader,\\n                _payloadHash,\\n                outboundConfig.outboundConfirmations,\\n                _sender\\n            ),\\n            verifierOptions\\n        );\\n\\n        emit VerifierFeePaid(config.verifiers, config.optionalVerifiers, verifierFees);\\n    }\\n\\n    function _quoteUlnWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view returns (uint256 totalFee, address executor, uint256 maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        (bytes[] memory optionsArray, uint8[] memory verifierIndices) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        totalFee = _getVerifierFees(\\n            config,\\n            _dstEid,\\n            outboundConfig.outboundConfirmations,\\n            _sender,\\n            optionsArray,\\n            verifierIndices\\n        );\\n    }\\n\\n    function _verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) internal {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = _confirmations;\\n        emit PayloadSigned(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x0047b992a61e54030b870b6ca4b09a1326a300a3e0967c13a8cdc5d8692ab35b\",\"license\":\"LZBL-1.2\"},\"contracts/uln/UlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nimport { IUlnConfig, UlnConfigStruct, SetDefaultConfigParam } from \\\"./interfaces/IUlnConfig.sol\\\";\\nimport { OutboundConfig, OutboundConfigStruct } from \\\"../OutboundConfig.sol\\\";\\n\\ncontract UlnConfig is OutboundConfig, IUlnConfig {\\n    using SafeCast for uint256;\\n\\n    // Application config, extending from OutboundConfig\\n    uint32 internal constant CONFIG_TYPE_INBOUND_CONFIRMATIONS = 4;\\n    uint32 internal constant CONFIG_TYPE_VERIFIERS = 5;\\n    uint32 internal constant CONFIG_TYPE_OPTIONAL_VERIFIERS = 6;\\n\\n    address public immutable uln;\\n\\n    mapping(address oapp => mapping(uint32 eid => UlnConfigStruct)) internal ulnConfig;\\n    mapping(uint32 eid => UlnConfigStruct) internal defaultUlnConfig;\\n\\n    event DefaultUlnConfigSet(\\n        uint32 eid,\\n        uint64 inboundConfirmations,\\n        address[] verifiers,\\n        address[] optionalVerifiers,\\n        uint8 optionalVerifierThreshold\\n    );\\n    event UlnConfigSet(address oapp, uint32 eid, uint32 configType, bytes config);\\n    event UlnConfigSnapshot(address oapp, uint32[] eids);\\n    event UlnConfigReset(address oapp, uint32[] eids);\\n\\n    constructor(address _uln) {\\n        uln = _uln;\\n    }\\n\\n    modifier onlyUln() {\\n        require(msg.sender == uln, Errors.PERMISSION_DENIED);\\n        _;\\n    }\\n\\n    // ============================ OnlyUln =====================================\\n\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external onlyUln {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            SetDefaultConfigParam calldata param = _params[i];\\n\\n            uint256 verifierCount = param.verifiers.length;\\n            uint256 optionalVerifierCount = param.optionalVerifiers.length;\\n\\n            require(param.inboundConfirmations > 0, Errors.INVALID_ARGUMENT);\\n            require(verifierCount + optionalVerifierCount <= type(uint8).max, Errors.INVALID_SIZE);\\n            require(param.optionalVerifierThreshold <= optionalVerifierCount, Errors.INVALID_SIZE);\\n            require(verifierCount > 0 || param.optionalVerifierThreshold > 0, Errors.INVALID_VERIFIERS); // at least one verifier\\n            // threshold must be > 0 if optional verifiers are present\\n            if (optionalVerifierCount > 0) require(param.optionalVerifierThreshold > 0, Errors.INVALID_SIZE);\\n\\n            // we can only assert the nonce duplication in each list respectively. the two lists might have duplicated ones\\n            // should do sanity check before submitting to the config here\\n            _assertNoDuplicates(param.verifiers, verifierCount);\\n            _assertNoDuplicates(param.optionalVerifiers, optionalVerifierCount);\\n\\n            defaultUlnConfig[param.eid] = UlnConfigStruct(\\n                param.inboundConfirmations,\\n                false, // unused for default config\\n                false, // unused for default config\\n                uint8(verifierCount),\\n                uint8(optionalVerifierCount),\\n                param.optionalVerifierThreshold,\\n                param.verifiers,\\n                param.optionalVerifiers\\n            );\\n            emit DefaultUlnConfigSet(\\n                param.eid,\\n                param.inboundConfirmations,\\n                param.verifiers,\\n                param.optionalVerifiers,\\n                param.optionalVerifierThreshold\\n            );\\n\\n            _setDefaultOutboundConfig(param.eid, param.outboundConfig);\\n        }\\n    }\\n\\n    function setConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType,\\n        bytes calldata _config\\n    ) external onlyUln {\\n        require(isSupportedEid(_remoteEid), Errors.INVALID_EID);\\n\\n        if (_configType <= CONFIG_TYPE_EXECUTOR) {\\n            _setOutboundConfigByType(_oapp, _remoteEid, _configType, _config);\\n            return;\\n        }\\n\\n        UlnConfigStruct storage config = ulnConfig[_oapp][_remoteEid];\\n        if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            config.inboundConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_VERIFIERS) {\\n            (bool useCustomVerifiers, address[] memory verifiers) = abi.decode(_config, (bool, address[]));\\n\\n            // if useCustomVerifiers is false, verifiers list must be empty\\n            // otherwise, verifiers list must be sorted by ascending order and contain no duplicates\\n            uint8 verifierCount = verifiers.length.toUint8();\\n            if (useCustomVerifiers) {\\n                _assertNoDuplicates(verifiers, verifierCount);\\n            } else {\\n                require(verifierCount == 0, Errors.INVALID_SIZE);\\n            }\\n\\n            config.useCustomVerifiers = useCustomVerifiers;\\n            config.verifierCount = verifierCount;\\n            config.verifiers = verifiers;\\n\\n            // assert verifier list by calling getUlnConfig\\n            getUlnConfig(_oapp, _remoteEid);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_VERIFIERS) {\\n            // should set the optional verifiers and the threshold at the same time and dont support the case that\\n            // set the custom threshold but with the default optional verifiers. If so, when changing the default optional\\n            // verifiers, the threshold may be more than the optional verifier count\\n            (bool useCustomOptionalVerifiers, address[] memory optionalVerifiers, uint8 threshold) = abi.decode(\\n                _config,\\n                (bool, address[], uint8)\\n            );\\n\\n            // 1. if useCustomOptionalVerifiers is false, all other fields must be empty\\n            // 2. if useCustomOptionalVerifiers is true but optionalVerifiers is empty, threshold must be 0\\n            // 3. if useCustomOptionalVerifiers is true and optionalVerifiers is not empty, threshold must be > 0 and\\n            // verifiers list must be sorted by ascending order and contain no duplicates\\n            uint8 optionalVerifierCount = optionalVerifiers.length.toUint8();\\n            if (useCustomOptionalVerifiers && optionalVerifierCount > 0) {\\n                require(threshold > 0 && threshold <= optionalVerifierCount, Errors.INVALID_SIZE);\\n                _assertNoDuplicates(optionalVerifiers, optionalVerifierCount);\\n            } else {\\n                require(optionalVerifierCount == 0 && threshold == 0, Errors.INVALID_SIZE);\\n            }\\n\\n            config.useCustomOptionalVerifiers = useCustomOptionalVerifiers;\\n            config.optionalVerifierCount = optionalVerifierCount;\\n            config.optionalVerifiers = optionalVerifiers;\\n            config.optionalVerifierThreshold = threshold;\\n\\n            // assert verifier list by calling getUlnConfig\\n            getUlnConfig(_oapp, _remoteEid);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n        emit UlnConfigSet(_oapp, _remoteEid, _configType, _config);\\n    }\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external onlyUln {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            uint32 eid = _eids[i];\\n            UlnConfigStruct memory config = getUlnConfig(_oapp, eid); // already assert if not supported eid\\n            config.useCustomVerifiers = true;\\n            config.useCustomOptionalVerifiers = true;\\n            ulnConfig[_oapp][eid] = config;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit UlnConfigSnapshot(_oapp, _eids);\\n\\n        _snapshotOutboundConfig(_eids, _oapp);\\n    }\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external onlyUln {\\n        for (uint256 i = 0; i < _eids.length; ) {\\n            uint32 eid = _eids[i];\\n            require(isSupportedEid(eid), Errors.INVALID_EID);\\n            delete ulnConfig[_oapp][eid];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit UlnConfigReset(_oapp, _eids);\\n\\n        _resetOutboundConfig(_eids, _oapp);\\n    }\\n\\n    // ============================ View =====================================\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) public view returns (UlnConfigStruct memory) {\\n        UlnConfigStruct memory rtnConfig = defaultUlnConfig[_remoteEid];\\n\\n        // assert supported eid\\n        require(rtnConfig.inboundConfirmations > 0, Errors.INVALID_EID);\\n\\n        UlnConfigStruct storage customConfig = ulnConfig[_oapp][_remoteEid];\\n\\n        uint64 inboundConfirmations = customConfig.inboundConfirmations;\\n        if (inboundConfirmations != 0) {\\n            rtnConfig.inboundConfirmations = inboundConfirmations;\\n        }\\n\\n        if (customConfig.useCustomVerifiers) {\\n            rtnConfig.useCustomVerifiers = true;\\n            rtnConfig.verifiers = customConfig.verifiers;\\n            rtnConfig.verifierCount = customConfig.verifierCount;\\n        }\\n\\n        if (customConfig.useCustomOptionalVerifiers) {\\n            rtnConfig.useCustomOptionalVerifiers = true;\\n            rtnConfig.optionalVerifiers = customConfig.optionalVerifiers;\\n            rtnConfig.optionalVerifierCount = customConfig.optionalVerifierCount;\\n            rtnConfig.optionalVerifierThreshold = customConfig.optionalVerifierThreshold;\\n        }\\n\\n        // assert verifier list\\n        // it is possible for sender to configure nil verifiers\\n        require(rtnConfig.verifierCount > 0 || rtnConfig.optionalVerifierThreshold > 0, Errors.VERIFIERS_UNAVAILABLE);\\n        // verifier options restricts total verifiers to 255\\n        require(rtnConfig.verifierCount + rtnConfig.optionalVerifierCount <= type(uint8).max, Errors.INVALID_SIZE);\\n\\n        return rtnConfig;\\n    }\\n\\n    function getUlnAndOutboundConfig(\\n        address _oapp,\\n        uint32 _remoteEid\\n    ) external view returns (UlnConfigStruct memory, OutboundConfigStruct memory) {\\n        return (getUlnConfig(_oapp, _remoteEid), getOutboundConfig(_oapp, _remoteEid));\\n    }\\n\\n    function getConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory, bool) {\\n        UlnConfigStruct storage config = ulnConfig[_oapp][_remoteEid];\\n\\n        // type 1/2/3 are for the outboundConfig\\n        if (_configType <= CONFIG_TYPE_EXECUTOR) {\\n            return getOutboundConfigByType(_remoteEid, _oapp, _configType);\\n        } else if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            uint64 inboundConfirmations = config.inboundConfirmations;\\n            if (inboundConfirmations == 0) {\\n                return (abi.encode(defaultUlnConfig[_remoteEid].inboundConfirmations), true);\\n            }\\n            return (abi.encode(inboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_VERIFIERS) {\\n            if (config.useCustomVerifiers) {\\n                return (abi.encode(config.verifiers), false);\\n            }\\n            return (abi.encode(defaultUlnConfig[_remoteEid].verifiers), true);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_VERIFIERS) {\\n            if (config.useCustomOptionalVerifiers) {\\n                return (abi.encode(config.optionalVerifiers, config.optionalVerifierThreshold), false);\\n            }\\n            UlnConfigStruct storage defaultConfig = defaultUlnConfig[_remoteEid];\\n            return (abi.encode(defaultConfig.optionalVerifiers, defaultConfig.optionalVerifierThreshold), true);\\n        }\\n        revert(Errors.NOT_IMPLEMENTED);\\n    }\\n\\n    function getDefaultConfigByType(uint32 _remoteEid, uint32 _configType) external view returns (bytes memory) {\\n        if (_configType <= CONFIG_TYPE_EXECUTOR) {\\n            return getDefaultOutboundConfigByType(_remoteEid, _configType);\\n        } else if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            UlnConfigStruct storage config = defaultUlnConfig[_remoteEid];\\n            return abi.encode(config.inboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_VERIFIERS) {\\n            UlnConfigStruct storage config = defaultUlnConfig[_remoteEid];\\n            return abi.encode(config.verifiers);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_VERIFIERS) {\\n            UlnConfigStruct storage config = defaultUlnConfig[_remoteEid];\\n            return abi.encode(config.optionalVerifiers, config.optionalVerifierThreshold);\\n        }\\n        revert(Errors.NOT_IMPLEMENTED);\\n    }\\n\\n    function isSupportedEid(uint32 _remoteEid) public view returns (bool) {\\n        return defaultUlnConfig[_remoteEid].inboundConfirmations > 0;\\n    }\\n\\n    /// @dev Get the uln config without the default config for the given remoteEid.\\n    function getRawUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfigStruct memory) {\\n        return ulnConfig[_oapp][_remoteEid];\\n    }\\n\\n    function getDefaultUlnConfig(uint32 _remoteEid) external view returns (UlnConfigStruct memory) {\\n        return defaultUlnConfig[_remoteEid];\\n    }\\n\\n    // ============================ Internal =====================================\\n\\n    function _assertNoDuplicates(address[] memory _verifiers, uint256 _verifierCount) internal pure {\\n        address lastVerifier = address(0);\\n        for (uint256 i = 0; i < _verifierCount; i++) {\\n            address verifier = _verifiers[i];\\n            require(verifier > lastVerifier, Errors.UNSORTED); // to ensure no duplicates\\n            lastVerifier = verifier;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x670cc04d07e7f54e114f96cfb9008c8eb915ce9e47e0b4fcfa85d2adc085f193\",\"license\":\"LZBL-1.2\"},\"contracts/uln/interfaces/ILayerZeroVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroVerifier {\\n    struct AssignJobParam {\\n        uint32 dstEid;\\n        bytes packetHeader;\\n        bytes32 payloadHash;\\n        uint64 confirmations;\\n        address sender;\\n    }\\n\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _packetHeader - version + nonce + path\\n    // @param _payloadHash - hash of guid + message\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(AssignJobParam calldata _param, bytes calldata _options) external payable returns (uint256 fee);\\n\\n    // @notice query the verifier fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xb307189baeab355cdc0a7b6cdfe4be8375bf8ccd7de3cdb42210478e66c35271\",\"license\":\"LZBL-1.2\"},\"contracts/uln/interfaces/IUlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nimport { OutboundConfigStruct } from \\\"../../OutboundConfig.sol\\\";\\n\\nstruct SetDefaultConfigParam {\\n    uint32 eid;\\n    OutboundConfigStruct outboundConfig;\\n    uint64 inboundConfirmations;\\n    address[] verifiers;\\n    address[] optionalVerifiers;\\n    uint8 optionalVerifierThreshold;\\n}\\n\\nstruct UlnConfigStruct {\\n    uint64 inboundConfirmations;\\n    bool useCustomVerifiers; // unused for default config\\n    bool useCustomOptionalVerifiers; // unused for default config\\n    uint8 verifierCount;\\n    uint8 optionalVerifierCount;\\n    uint8 optionalVerifierThreshold;\\n    address[] verifiers; // allowed overlap with optionalVerifiers\\n    address[] optionalVerifiers; // allowed overlap with verifiers\\n}\\n\\ninterface IUlnConfig {\\n    function setConfigByType(uint32 _remoteEid, address _oapp, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function isSupportedEid(uint32 _remoteEid) external view returns (bool);\\n\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfigStruct memory);\\n\\n    function getUlnAndOutboundConfig(\\n        address _oapp,\\n        uint32 _remoteEid\\n    ) external view returns (UlnConfigStruct memory, OutboundConfigStruct memory);\\n\\n    function getConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory, bool);\\n\\n    function getDefaultConfigByType(uint32 _remoteEid, uint32 _configType) external view returns (bytes memory);\\n\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external;\\n}\\n\",\"keccak256\":\"0x29c360875e56365b0cefde03dcafdbb5d3ea822c82248a0fba4a83b9e5ef4a56\",\"license\":\"LZBL-1.2\"},\"contracts/uln/libs/UlnOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\n\\nimport { VerifierOptions } from \\\"./VerifierOptions.sol\\\";\\n\\nlibrary UlnOptions {\\n    using SafeCast for uint256;\\n\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    /// @dev decode the options into executorOptions and verifierOptions\\n    /// @param _options the options can be either legacy options (type 1 or 2) or type 3 options\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// @return verifierOptions the verifier options, share the same format of type 3 options\\n    function decode(\\n        bytes calldata _options\\n    ) internal pure returns (bytes memory executorOptions, bytes memory verifierOptions) {\\n        // at least 2 bytes for the option type, but can have no options\\n        require(_options.length >= 2, Errors.INVALID_WORKER_OPTIONS);\\n\\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\\n        uint256 cursor = 2;\\n\\n        // type3 options: [worker_option][worker_option]...\\n        // worker_option: [worker_id][option_size][option]\\n        // worker_id: uint8, option_size: uint16, option: bytes\\n        if (optionsType == TYPE_3) {\\n            unchecked {\\n                uint256 start = cursor;\\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\\n\\n                // heuristic: we assume that the options are mostly EXECUTOR options only\\n                // checking the workerID can reduce gas usage for most cases\\n                while (cursor < _options.length) {\\n                    uint8 workerId = uint8(bytes1(_options[cursor:cursor + 1]));\\n                    require(workerId > 0, Errors.INVALID_WORKER_ID);\\n\\n                    // workerId must equal to the lastWorkerId for the first option\\n                    // so it is always skipped in the first option\\n                    // this operation slices out options whenever the the scan finds a different workerId\\n                    if (lastWorkerId == 0) {\\n                        lastWorkerId = workerId;\\n                    } else if (workerId != lastWorkerId) {\\n                        bytes calldata op = _options[start:cursor]; // slice out the last worker's options\\n                        (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                            executorOptions,\\n                            verifierOptions,\\n                            lastWorkerId,\\n                            op\\n                        );\\n\\n                        // reset the start cursor and lastWorkerId\\n                        start = cursor;\\n                        lastWorkerId = workerId;\\n                    }\\n\\n                    ++cursor; // for workerId\\n\\n                    uint16 size = uint16(bytes2(_options[cursor:cursor + 2]));\\n                    require(size > 0, Errors.INVALID_WORKER_OPTIONS);\\n                    cursor += size + 2;\\n                }\\n\\n                // the options length must be the same as the cursor at the end\\n                require(cursor == _options.length, Errors.INVALID_WORKER_OPTIONS);\\n\\n                // if we have reached the end of the options and the options are not empty\\n                // we need to process the last worker's options\\n                if (_options.length > 2) {\\n                    bytes calldata op = _options[start:cursor];\\n                    (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                        executorOptions,\\n                        verifierOptions,\\n                        lastWorkerId,\\n                        op\\n                    );\\n                }\\n            }\\n        } else {\\n            executorOptions = decodeLegacyOptions(optionsType, _options);\\n        }\\n    }\\n\\n    function _insertWorkerOptions(\\n        bytes memory _executorOptions,\\n        bytes memory _verifierOptions,\\n        uint8 _workerId,\\n        bytes calldata _newOptions\\n    ) private pure returns (bytes memory, bytes memory) {\\n        if (_workerId == ExecutorOptions.WORKER_ID) {\\n            _executorOptions = _executorOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_executorOptions, _newOptions);\\n        } else if (_workerId == VerifierOptions.WORKER_ID) {\\n            _verifierOptions = _verifierOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_verifierOptions, _newOptions);\\n        } else {\\n            revert(Errors.INVALID_WORKER_ID);\\n        }\\n        return (_executorOptions, _verifierOptions);\\n    }\\n\\n    /// @dev decode the legacy options (type 1 or 2) into executorOptions\\n    /// @param _optionType the legacy option type\\n    /// @param _options the legacy options, which still has the option type in the first 2 bytes\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// Data format:\\n    /// legacy type 1: [extraGas]\\n    /// legacy type 2: [extraGas][dstNativeAmt][dstNativeAddress]\\n    /// extraGas: uint256, dstNativeAmt: uint256, dstNativeAddress: bytes\\n    function decodeLegacyOptions(\\n        uint16 _optionType,\\n        bytes calldata _options\\n    ) internal pure returns (bytes memory executorOptions) {\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, Errors.INVALID_LEGACY_OPTION);\\n\\n            // execution gas\\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\\n            // option_type: uint8, execution_gas: uint128\\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas\\n            );\\n        } else if (_optionType == TYPE_2) {\\n            // receiver size <= 32\\n            require(_options.length > 66 && _options.length <= 98, Errors.INVALID_LEGACY_OPTION);\\n\\n            // execution gas\\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\\n\\n            // nativeDrop (amount + receiver)\\n            uint128 amount = uint256(bytes32(_options[34:34 + 32])).toUint128(); // offset 2 + 32\\n            bytes32 receiver;\\n            unchecked {\\n                uint256 receiverLen = _options.length - 66; // offset 2 + 32 + 32\\n                receiver = bytes32(_options[66:]);\\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            }\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result has one lzReceive option and one nativeDrop option:\\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\\n            //      [executor_id][nativeDrop_option_size][option_type][nativeDrop_amount][receiver]\\n            // option_type: uint8, execution_gas: uint128, nativeDrop_amount: uint128, receiver: bytes32\\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            // nativeDrop_option_size = len(option_type) + len(nativeDrop_amount) + len(receiver) = 1 + 16 + 32 = 49\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas,\\n                ExecutorOptions.WORKER_ID,\\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\\n                amount,\\n                receiver\\n            );\\n        } else {\\n            revert(Errors.UNSUPPORTED_OPTION_TYPE);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1652f102766f7068f0969b94c8fa1f41e3568872f95d7853d64c4518ce2222e0\",\"license\":\"LZBL-1.2\"},\"contracts/uln/libs/VerifierOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.0;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMaps } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary VerifierOptions {\\n    using BitMaps for BitMaps.BitMap256;\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    /// @dev group verifier options by its idx\\n    /// @param _options [verifier_id][verifier_option][verifier_id][verifier_option]...\\n    ///        verifier_option = [option_size][verifier_idx][option_type][option]\\n    ///        option_size = len(verifier_idx) + len(option_type) + len(option)\\n    ///        verifier_id: uint8, verifier_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return verifierOptions the grouped options, still share the same format of _options\\n    /// @return verifierIndices the verifier indices\\n    function groupVerifierOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory verifierOptions, uint8[] memory verifierIndices) {\\n        if (_options.length == 0) return (verifierOptions, verifierIndices);\\n\\n        uint8 numVerifiers = getNumVerifiers(_options);\\n\\n        // if there is only 1 verifier, we can just return the whole options\\n        if (numVerifiers == 1) {\\n            verifierOptions = new bytes[](1);\\n            verifierOptions[0] = _options;\\n\\n            verifierIndices = new uint8[](1);\\n            verifierIndices[0] = _options.toUint8(3); // verifier idx\\n            return (verifierOptions, verifierIndices);\\n        }\\n\\n        // otherwise, we need to group the options by verifier_idx\\n        verifierIndices = new uint8[](numVerifiers);\\n        verifierOptions = new bytes[](numVerifiers);\\n        unchecked {\\n            uint256 cursor;\\n            uint256 start;\\n            uint8 lastVerifierIdx = 255; // 255 is an invalid verifier_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumVerifiers (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // verifierIdx asserted in getNumVerifiers (skip check)\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // verifierIdx must equal to the lastVerifierIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastVerifierIdx\\n                if (lastVerifierIdx == 255) {\\n                    lastVerifierIdx = verifierIdx;\\n                } else if (verifierIdx != lastVerifierIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, opt);\\n\\n                    // reset the start and lastVerifierIdx\\n                    start += len;\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumVerifiers\\n            // if we have reached the end of the options, we need to process the last verifier\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, op);\\n\\n            // revert verifierIndices to start from 0\\n            for (uint8 i = 0; i < numVerifiers; ++i) {\\n                --verifierIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertVerifierOptions(\\n        bytes[] memory _verifierOptions,\\n        uint8[] memory _verifierIndices,\\n        uint8 _verifierIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        unchecked {\\n            // verifierIdx starts from 0 but default value of verifierIndices is 0,\\n            // so we tell if the slot is empty by adding 1 to verifierIdx\\n            require(_verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n            uint8 verifierIdxAdj = _verifierIdx + 1;\\n\\n            for (uint8 j = 0; j < _verifierIndices.length; ++j) {\\n                uint8 index = _verifierIndices[j];\\n                if (verifierIdxAdj == index) {\\n                    _verifierOptions[j] = abi.encodePacked(_verifierOptions[j], _newOptions);\\n                    break;\\n                } else if (index == 0) {\\n                    // empty slot, that means it is the first time we see this verifier\\n                    _verifierIndices[j] = verifierIdxAdj;\\n                    _verifierOptions[j] = _newOptions;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique verifiers\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    function getNumVerifiers(bytes memory _options) internal pure returns (uint8 numVerifiers) {\\n        uint256 cursor;\\n        BitMaps.BitMap256 bitmap;\\n\\n        // find number of unique verifier_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_VERIFIER_OPTION); // at least 1 byte for verifier_idx and 1 byte for option_type\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // if verifierIdx is not set, increment numVerifiers\\n                // max num of verifiers is 255, 255 is an invalid verifier_idx\\n                require(verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n                if (!bitmap.get(verifierIdx)) {\\n                    ++numVerifiers;\\n                    bitmap = bitmap.set(verifierIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        require(cursor == _options.length, Errors.INVALID_VERIFIER_OPTION);\\n    }\\n\\n    /// @dev decode the next verifier option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextVerifierOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip verifier_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and verifier_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7899ccf4bb84447fa6608c9e35922ece6352c740e1abccfee7986dfd16cdf728\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln301/MessageLibBaseE1.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { Packet, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\\\";\\nimport { ILayerZeroEndpoint } from \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { IMessageLibE1 } from \\\"./interfaces/IMessageLibE1.sol\\\";\\nimport { ITreasuryFeeHandler } from \\\"./interfaces/ITreasuryFeeHandler.sol\\\";\\nimport { INonceContract } from \\\"./interfaces/INonceContract.sol\\\";\\nimport { MessageLibBase, DeliveryState, WorkerOptions } from \\\"../../MessageLibBase.sol\\\";\\n\\n/// @dev base contract for msglib on endpoint v1. It enforces the path convention\\nabstract contract MessageLibBaseE1 is MessageLibBase, IMessageLibE1 {\\n    using PacketV1Codec for bytes;\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    INonceContract public immutable nonceContract;\\n    ITreasuryFeeHandler public immutable treasuryFeeHandler;\\n\\n    // config\\n    address internal lzToken;\\n    // EndpointV1 is using bytes as address. this map is for address length assertion\\n    mapping(uint32 dstEid => uint256 size) public addressSizes;\\n\\n    // this event is the same as the PacketReceived event on EndpointV2\\n    event PacketReceived(Origin origin, address receiver);\\n    // this event should be identical to the one on Endpoint V2\\n    event PacketSent(bytes encodedPayload, bytes options, uint256 nativeFee, uint256 lzTokenFee);\\n    event NativeFeeWithdrawn(address user, address receiver, uint256 amount);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes32 srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event LzTokenSet(address token);\\n    event AddressSizeSet(uint16 eid, uint256 size);\\n\\n    constructor(\\n        address _endpoint,\\n        uint256 _treasuryGasCap,\\n        address _nonceContract,\\n        uint32 _localEid,\\n        address _treasuryFeeHandler\\n    ) MessageLibBase(_endpoint, _localEid, _treasuryGasCap) {\\n        nonceContract = INonceContract(_nonceContract);\\n        treasuryFeeHandler = ITreasuryFeeHandler(_treasuryFeeHandler);\\n    }\\n\\n    // ======================= OnlyEndpoint =======================\\n    function send(\\n        address _sender,\\n        uint64, // _nonce\\n        uint16 _dstEid,\\n        bytes calldata _path, // remoteAddress + localAddress\\n        bytes calldata _message,\\n        address payable _refundAddress,\\n        address _lzTokenPaymentAddress,\\n        bytes calldata _options\\n    ) external payable onlyEndpoint {\\n        (bytes memory encodedPacket, uint256 totalNativeFee) = _sendToWorkers(\\n            _sender,\\n            _dstEid,\\n            _path,\\n            _message,\\n            _options\\n        );\\n\\n        // quote treasury fee\\n        uint32 dstEid = _dstEid; // stack too deep\\n        address sender = _sender; // stack too deep\\n        bool payInLzToken = _lzTokenPaymentAddress != address(0x0) && address(lzToken) != address(0x0);\\n        (uint256 treasuryNativeFee, uint256 lzTokenFee) = _sendToTreasury(sender, dstEid, totalNativeFee, payInLzToken);\\n        totalNativeFee += treasuryNativeFee;\\n\\n        // pay native fee\\n        // assert the user has attached enough native token for this address\\n        require(totalNativeFee <= msg.value, Errors.INVALID_AMOUNT);\\n        // refund if they send too much\\n        uint256 refundAmt = msg.value - totalNativeFee;\\n        if (refundAmt > 0) {\\n            _transferNative(_refundAddress, refundAmt);\\n        }\\n\\n        // pay lz token fee if needed\\n        if (lzTokenFee > 0) {\\n            // in v2, we let user pass a payInLzToken boolean but always charging the sender\\n            // likewise in v1, if _lzTokenPaymentAddress is passed, it must be the sender\\n            require(_lzTokenPaymentAddress == sender, Errors.INVALID_ADDRESS);\\n            _payLzTokenFee(sender, lzTokenFee);\\n        }\\n\\n        emit PacketSent(encodedPacket, _options, totalNativeFee, lzTokenFee);\\n    }\\n\\n    // ======================= OnlyOwner =======================\\n    function setLzToken(address _lzToken) external onlyOwner {\\n        lzToken = _lzToken;\\n        emit LzTokenSet(_lzToken);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    function setAddressSize(uint16 _eid, uint256 _size) external onlyOwner {\\n        require(_size <= 32, Errors.INVALID_SIZE);\\n        require(addressSizes[_eid] == 0, Errors.ALREADY_EXISTS);\\n        addressSizes[_eid] = _size;\\n        emit AddressSizeSet(_eid, _size);\\n    }\\n\\n    // ======================= External =======================\\n    function withdrawFee(address _to, uint256 _amount) external {\\n        _assertAndDebitAmount(_to, _amount);\\n        _transferNative(_to, _amount);\\n        emit NativeFeeWithdrawn(msg.sender, _to, _amount);\\n    }\\n\\n    // ======================= View =======================\\n    function estimateFees(\\n        uint16 _dstEid,\\n        address _sender,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (uint256 nativeFee, uint256 lzTokenFee) {\\n        return _quote(_sender, _dstEid, _message.length, _payInLzToken, _options);\\n    }\\n\\n    // ======================= Internal =======================\\n    /// @dev path = remoteAddress + localAddress.\\n    function _assertPath(address _sender, bytes calldata _path, uint256 remoteAddressSize) internal pure {\\n        require(_path.length == 20 + remoteAddressSize, Errors.INVALID_ARGUMENT);\\n        address srcInPath = AddressCast.toAddress(_path[remoteAddressSize:]);\\n        require(_sender == srcInPath, Errors.INVALID_ARGUMENT);\\n    }\\n\\n    function _payLzTokenFee(address _sender, uint256 _lzTokenFee) internal {\\n        treasuryFeeHandler.payFee(\\n            lzToken,\\n            _sender,\\n            _lzTokenFee, // the supplied fee is always equal to the required fee\\n            _lzTokenFee,\\n            treasury\\n        );\\n    }\\n\\n    /// @dev outbound does three things\\n    /// @dev 1) asserts path\\n    /// @dev 2) increments the nonce\\n    /// @dev 3) assemble packet\\n    /// @return packet to be sent to workers\\n    function _outbound(\\n        address _sender,\\n        uint16 _dstEid,\\n        bytes calldata _path,\\n        bytes calldata _message\\n    ) internal returns (Packet memory packet) {\\n        // assert toAddress size\\n        uint256 remoteAddressSize = addressSizes[_dstEid];\\n        _assertPath(_sender, _path, remoteAddressSize);\\n\\n        // increment nonce\\n        uint64 nonce = nonceContract.increment(_dstEid, _sender, _path);\\n\\n        bytes32 receiver = AddressCast.toBytes32(_path[0:remoteAddressSize]);\\n\\n        // todo: should use the PacketV1Codec?\\n        bytes32 guid = keccak256(abi.encodePacked(nonce, localEid, _sender.toBytes32(), uint32(_dstEid), receiver));\\n\\n        // assemble packet\\n        packet = Packet(nonce, localEid, _sender, _dstEid, receiver, guid, _message);\\n    }\\n\\n    function _sendToWorkers(\\n        address _sender,\\n        uint16 _dstEid,\\n        bytes calldata _path,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) internal returns (bytes memory encodedPacket, uint256 totalNativeFee) {\\n        Packet memory packet = _outbound(_sender, _dstEid, _path, _message);\\n\\n        (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions) = _getExecutorAndOtherOptions(\\n            _options\\n        );\\n\\n        (uint256 otherWorkerFees, address executor, uint256 maxMsgSize, bytes memory packetBytes) = _send(\\n            packet,\\n            otherWorkerOptions\\n        );\\n        totalNativeFee += otherWorkerFees;\\n\\n        uint256 msgSize = packet.message.length;\\n        _assertMessageSize(msgSize, maxMsgSize);\\n\\n        totalNativeFee += _sendToExecutor(executor, packet.dstEid, packet.sender, msgSize, executorOptions);\\n        encodedPacket = packetBytes;\\n    }\\n\\n    /// @dev this function change pack the path as required for EndpointV1\\n    function _execute(\\n        uint16 _srcEid,\\n        bytes32 _sender,\\n        address _receiver,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        uint256 _gasLimit\\n    ) internal {\\n        if (_receiver.code.length == 0) {\\n            /// on chains where EOA has no codes, we will early return and emit InvalidDst event because it will result into a revert without msg ( call to non-contract account).\\n            // on chains where all address have codes, this will be skipped\\n            emit InvalidDst(_srcEid, _sender, _receiver, _nonce, keccak256(_message));\\n            return;\\n        }\\n\\n        bytes memory pathData = abi.encodePacked(_sender.toBytes(addressSizes[_srcEid]), _receiver);\\n        ILayerZeroEndpoint(endpoint).receivePayload(_srcEid, pathData, _receiver, _nonce, _gasLimit, _message);\\n\\n        Origin memory origin = Origin(_srcEid, _sender, _nonce);\\n        emit PacketReceived(origin, _receiver);\\n    }\\n\\n    function _endpointDeliverable(\\n        uint16 _srcEid,\\n        address _receiver,\\n        bytes calldata _packetHeader\\n    ) internal view returns (DeliveryState) {\\n        bytes memory sender = _packetHeader.sender().toBytes(addressSizes[_srcEid]);\\n        bytes memory path = abi.encodePacked(sender, _receiver);\\n        uint64 nonce = _packetHeader.nonce();\\n\\n        // assert message library\\n        require(\\n            ILayerZeroEndpoint(endpoint).getReceiveLibraryAddress(_receiver) == address(this),\\n            Errors.PERMISSION_DENIED\\n        );\\n\\n        // 1. check if nonce is already delivered\\n        uint64 inboundNonce = ILayerZeroEndpoint(endpoint).getInboundNonce(_srcEid, path);\\n        if (nonce <= inboundNonce) return DeliveryState.Delivered;\\n\\n        // 2. check nonce is next nonce\\n        // 3. check there are no stored payload\\n        if (nonce > inboundNonce + 1 || ILayerZeroEndpoint(endpoint).hasStoredPayload(_srcEid, path)) {\\n            return DeliveryState.Waiting;\\n        }\\n\\n        return DeliveryState.Deliverable;\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    // packet is assembled in memory for endpoint-v1\\n    function _send(\\n        Packet memory _packet,\\n        WorkerOptions[] memory _options\\n    )\\n        internal\\n        virtual\\n        returns (uint256 otherWorkerFees, address executor, uint256 maxMsgSize, bytes memory encodedPacket);\\n}\\n\",\"keccak256\":\"0x9ed8fb33736f715eea1b9c65ff4809af179c83b964d9db73705408e1a9f402dc\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln301/UltraLightNode301.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.19;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\nimport { Errors } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport { Packet } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { IUltraLightNode301 } from \\\"./interfaces/IUltraLightNode301.sol\\\";\\nimport { UlnConfigStruct } from \\\"../interfaces/IUlnConfig.sol\\\";\\nimport { MessageLibBaseE1 } from \\\"./MessageLibBaseE1.sol\\\";\\nimport { WorkerOptions, DeliveryState } from \\\"../../MessageLibBase.sol\\\";\\nimport { OutboundConfigStruct } from \\\"../../OutboundConfig.sol\\\";\\nimport { UlnBase } from \\\"../UlnBase.sol\\\";\\n\\n/// @dev ULN301 will be deployed on EndpointV1 and is for backward compatibility with ULN302 on EndpointV2. 301 can talk to both 301 and 302\\ncontract UltraLightNode301 is IUltraLightNode301, UlnBase, MessageLibBaseE1 {\\n    using PacketV1Codec for bytes;\\n    using SafeCast for uint32; // for chain ID uint16 to uint32 conversion\\n    using SafeCast for uint256; // for config type uint256 to uint32 conversion\\n    using AddressCast for bytes32; // for address type bytes to bytes32/address conversion\\n\\n    constructor(\\n        address _endpoint,\\n        uint256 _treasuryGasCap,\\n        address _nonceContract,\\n        uint32 _localEid,\\n        address _treasuryFeeHandler\\n    ) MessageLibBaseE1(_endpoint, _treasuryGasCap, _nonceContract, _localEid, _treasuryFeeHandler) UlnBase() {}\\n\\n    // ============================ OnlyEndpoint ===================================\\n\\n    function setConfig(\\n        uint16 _eid,\\n        address _oapp,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyEndpoint {\\n        ulnConfig.setConfigByType(_eid, _oapp, _configType.toUint32(), _config);\\n    }\\n\\n    // ============================ External ===================================\\n\\n    /// @dev in 301, this is equivalent to execution as in Endpoint V2\\n    /// @dev dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\\n    function deliver(bytes calldata _packet, uint256 _gasLimit) external {\\n        address receiver = _packet.receiverB20();\\n        uint16 srcEid = _packet.srcEid().toUint16();\\n\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            receiver,\\n            srcEid\\n        );\\n\\n        // the executor of outbound config is also used on inbound in ULN301\\n        require(msg.sender == outboundConfig.executor, Errors.PERMISSION_DENIED);\\n        require(\\n            // the packet is considered delivered in 301 if all signatures are submitted\\n            _deliverable(config, _packet.header(), _packet.payloadHash()) == DeliveryState.Delivered,\\n            Errors.INVALID_STATE\\n        );\\n\\n        _execute(srcEid, _packet.sender(), receiver, _packet.nonce(), _packet.message(), _gasLimit);\\n    }\\n\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        _verify(_packetHeader, _payloadHash, _confirmations);\\n    }\\n\\n    // ============================ View ===================================\\n\\n    function getConfig(\\n        uint16 _eid,\\n        address _oapp,\\n        uint256 _configType\\n    ) external view override returns (bytes memory config) {\\n        (config, ) = ulnConfig.getConfigByType(_eid, _oapp, _configType.toUint32());\\n    }\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view override returns (bytes memory) {\\n        return ulnConfig.getDefaultConfigByType(_eid, _configType);\\n    }\\n\\n    function version() external pure override returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 1);\\n    }\\n\\n    /// @dev keeping the same interface as 302\\n    /// @dev a deliverable message requires it to be endpoint deliverable and ULN deliverable\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState) {\\n        address receiver = _packetHeader.receiverB20();\\n        uint16 srcEid = _packetHeader.srcEid().toUint16();\\n\\n        DeliveryState endpointStatus = _endpointDeliverable(srcEid, receiver, _packetHeader);\\n        if (endpointStatus != DeliveryState.Deliverable) {\\n            return endpointStatus;\\n        }\\n\\n        // check verifier executable\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(receiver, srcEid);\\n        return _deliverable(config, _packetHeader, _payloadHash);\\n    }\\n\\n    // ============================ Internal ===================================\\n\\n    function _quoteWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view override returns (uint256, address, uint256) {\\n        return _quoteUlnWorkers(_sender, _dstEid, _options);\\n    }\\n\\n    function _send(\\n        Packet memory _packet,\\n        WorkerOptions[] memory _options\\n    )\\n        internal\\n        virtual\\n        override\\n        returns (uint256 otherWorkerFees, address executor, uint256 maxMsgSize, bytes memory encodedPacket)\\n    {\\n        bytes memory packetHeader = PacketV1Codec.encodePacketHeader(_packet);\\n        bytes memory payload = PacketV1Codec.encodePayload(_packet);\\n        bytes32 payloadHash = keccak256(payload);\\n        (otherWorkerFees, executor, maxMsgSize) = _ulnSend(\\n            fees,\\n            _options,\\n            packetHeader,\\n            payloadHash,\\n            _packet.sender,\\n            _packet.dstEid\\n        );\\n        encodedPacket = abi.encodePacked(packetHeader, payload);\\n    }\\n\\n    /// @dev include only the validation logic of ulnv3\\n    function _deliverable(\\n        UlnConfigStruct memory _config,\\n        bytes calldata _packetHeader,\\n        bytes32 _payloadHash\\n    ) internal view returns (DeliveryState) {\\n        // assert packet header is of right size 81\\n        require(_packetHeader.length == 81, Errors.INVALID_SIZE);\\n        // assert packet header version is the same as ULN\\n        require(_packetHeader.version() == PacketV1Codec.PACKET_VERSION, Errors.INVALID_VERSION);\\n        // assert the packet is for this endpoint\\n        require(_packetHeader.dstEid() == localEid, Errors.INVALID_EID);\\n\\n        bool signed = verifyConditionMet(_config, keccak256(_packetHeader), _payloadHash);\\n        if (signed) {\\n            // in 301, once all signature are gathered, it is ready to be executed\\n            // marked as Delivered to unify the behavior with 302\\n            return DeliveryState.Delivered;\\n        } else {\\n            return DeliveryState.Signing;\\n        }\\n    }\\n\\n    function _getExecutorAndOtherOptions(\\n        bytes calldata _options\\n    ) internal pure override returns (bytes memory, WorkerOptions[] memory) {\\n        return _getExecutorAndOtherOptionsInternal(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x992fe9d47da5a3c770ce1d7736d8c5396ee36b909b60de8c6b7d70d4f340aebf\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln301/interfaces/IMessageLibE1.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\nimport { ILayerZeroMessagingLibrary } from \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroMessagingLibrary.sol\\\";\\n\\n/// extends ILayerZeroMessagingLibrary instead of ILayerZeroMessagingLibraryV2 for reducing the contract size\\ninterface IMessageLibE1 is ILayerZeroMessagingLibrary {\\n    function setLzToken(address _lzToken) external;\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n}\\n\",\"keccak256\":\"0x73358c75256cc1120a2364e5e4b890e37bd58985f2fb41a34f710bd4a8d70b67\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln301/interfaces/INonceContract.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface INonceContract {\\n    function increment(uint16 _chainId, address _ua, bytes calldata _path) external returns (uint64);\\n}\\n\",\"keccak256\":\"0x33def61214b1f3438258ea735c5277195ca5f20714397007b0db15a4e36d8d04\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln301/interfaces/ITreasuryFeeHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface ITreasuryFeeHandler {\\n    function payFee(\\n        address _lzToken,\\n        address _sender,\\n        uint256 _required,\\n        uint256 _supplied,\\n        address _treasury\\n    ) external;\\n}\\n\",\"keccak256\":\"0xff9daf8a616a2856e17abfa5942d3363db367da9a9ee8d19179b051fdab05123\",\"license\":\"LZBL-1.2\"},\"contracts/uln/uln301/interfaces/IUltraLightNode301.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity >=0.8.0;\\n\\ninterface IUltraLightNode301 {\\n    function deliver(bytes calldata _packet, uint256 _gasLimit) external;\\n}\\n\",\"keccak256\":\"0xbded3764a2007f509702235cf4e573fb8a9a61609ccb62c49c50af1bd718b69e\",\"license\":\"LZBL-1.2\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101a15760003560e01c8063715018a6116100e1578063c77341731161008a578063f2fde38b11610064578063f2fde38b14610576578063f8e1734c14610596578063faaebd21146105b6578063fd9be522146105e357600080fd5b8063c773417314610516578063d2f7598514610536578063f0f442601461055657600080fd5b80638da5cb5b116100bb5780638da5cb5b1461049b578063a5972ec5146104c6578063c28e0eed146104f657600080fd5b8063715018a6146104255780637c0cf7631461043a57806389b69dec1461046757600080fd5b80634d3a0f7c1161014e57806356fe19be1161012857806356fe19be1461039857806361d027b3146103b8578063690c6555146103e55780636d26e5d01461040557600080fd5b80634d3a0f7c1461032b57806352d2871f1461033e57806354fd4d501461036b57600080fd5b80630f8355c01161017f5780630f8355c01461025a5780633c782a521461029557806340a7bb10146102f657600080fd5b80630223536e146101a657806302bd9743146101c85780630d500bf314610226575b600080fd5b3480156101b257600080fd5b506101c66101c136600461453c565b610603565b005b3480156101d457600080fd5b506101fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561023257600080fd5b506101fc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561026657600080fd5b506102876102753660046145ad565b60056020526000908152604090205481565b60405190815260200161021d565b3480156102a157600080fd5b506102dd6102b03660046145f7565b600160209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161021d565b34801561030257600080fd5b5061031661031136600461465b565b610615565b6040805192835260208301919091520161021d565b6101c6610339366004614703565b61063a565b34801561034a57600080fd5b5061035e6103593660046147f7565b6108ab565b60405161021d9190614886565b34801561037757600080fd5b5060408051600381526000602082015260019181019190915260600161021d565b3480156103a457600080fd5b506101c66103b3366004614899565b6109a4565b3480156103c457600080fd5b506002546101fc9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103f157600080fd5b5061035e6104003660046148e5565b610c0e565b34801561041157600080fd5b506101c661042036600461491e565b610cda565b34801561043157600080fd5b506101c6610dfa565b34801561044657600080fd5b5061045a610455366004614899565b610e0e565b60405161021d9190614977565b34801561047357600080fd5b506101fc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104a757600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101fc565b3480156104d257600080fd5b506104e66104e1366004614af4565b610f40565b604051901515815260200161021d565b34801561050257600080fd5b506101c6610511366004614bfd565b611038565b34801561052257600080fd5b506104e6610531366004614c1a565b6110ba565b34801561054257600080fd5b506101c6610551366004614c59565b61110b565b34801561056257600080fd5b506101c6610571366004614bfd565b6111bd565b34801561058257600080fd5b506101c6610591366004614bfd565b6111d1565b3480156105a257600080fd5b506101c66105b1366004614cce565b61126b565b3480156105c257600080fd5b506102876105d1366004614bfd565b60036020526000908152604090205481565b3480156105ef57600080fd5b506101c66105fe366004614d3f565b611398565b61060f848484846113ff565b50505050565b60008061062a8861ffff8b16888888886114be565b9150915097509795505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146106cd5760405162461bcd60e51b81526004016106c49190614886565b60405180910390fd5b506000806106e18d8c8c8c8c8c8a8a61160f565b909250905061ffff8b168d600073ffffffffffffffffffffffffffffffffffffffff88161580159061072a575060045473ffffffffffffffffffffffffffffffffffffffff1615155b905060008061073b848688866116a5565b909250905061074a8287614d8c565b9550348611156040518060400160405280600781526020017f4c5a313030303300000000000000000000000000000000000000000000000000815250906107a45760405162461bcd60e51b81526004016106c49190614886565b5060006107b18734614d9f565b905080156107c3576107c38c82611705565b8115610857578473ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a3130303138000000000000000000000000000000000000000000000000008152509061084c5760405162461bcd60e51b81526004016106c49190614886565b5061085785836117bd565b7f3dc6f2ede34d1db05729bbb76e5efd17ec1bc83f98f665e7fba0596dca438b96888b8b8a8660405161088e959493929190614ddd565b60405180910390a150505050505050505050505050505050505050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638fd061fc85856108f486611857565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815261ffff909316600484015273ffffffffffffffffffffffffffffffffffffffff909116602483015263ffffffff166044820152606401600060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099b9190810190614e87565b50949350505050565b60006109b084846118d7565b905060006109cc6109c186866118e9565b63ffffffff1661190c565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff8316602483015291925060009182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a94919081019061501e565b91509150806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a35303030300000000000000000000000000000000000000000000000000081525090610b1f5760405162461bcd60e51b81526004016106c49190614886565b506002610b3f83610b308a8a611986565b610b3a8c8c6119a2565b6119cc565b6003811115610b5057610b50614948565b146040518060400160405280600781526020017f4c5a33303030300000000000000000000000000000000000000000000000000081525090610ba55760405162461bcd60e51b81526004016106c49190614886565b50610c0583610bb48989611b57565b86610bbf8b8b611b70565b610bc98c8c611b93565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611ba3915050565b50505050505050565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd191908101906150ce565b90505b92915050565b610ce2611dc6565b60208111156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610d3b5760405162461bcd60e51b81526004016106c49190614886565b5061ffff8216600090815260056020908152604091829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915215610da65760405162461bcd60e51b81526004016106c49190614886565b5061ffff8216600081815260056020908152604091829020849055815192835282018390527ee9ab3709e58edd0db46318d63673d8ae4681fa3e51d9f9dc07cde5109ff74891015b60405180910390a15050565b610e02611dc6565b610e0c6000611e2d565b565b600080610e1b85856118d7565b90506000610e2c6109c187876118e9565b90506000610e3c82848989611ea2565b90506001816003811115610e5257610e52614948565b14610e61579250610f39915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa158015610efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f249190810190615103565b9050610f32818989896119cc565b9450505050505b9392505050565b8251600090815b856060015160ff16811015610f9657610f7f8660c001518281518110610f6f57610f6f615138565b60200260200101518686856110ba565b610f8e57600092505050610f39565b600101610f47565b506000856060015160ff16118015610fb35750608085015160ff16155b15610fc2576001915050610f39565b6000805b866080015160ff1681101561102b57610ffe8760e001518281518110610fee57610fee615138565b60200260200101518787866110ba565b15611023578160010191508660a0015160ff1682106110235760019350505050610f39565b600101610fc6565b5060009695505050505050565b611040611dc6565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd476ec5ec1ac11cec3714d41e7ea49419471aceb9bd0dff1becfc3e363a62396906020015b60405180910390a150565b6000838152600160209081526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8816845290915290205467ffffffffffffffff828116911610155b949350505050565b611113611dc6565b6040517fd2f7598500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d2f75985906111879085908590600401615224565b600060405180830381600087803b1580156111a157600080fd5b505af11580156111b5573d6000803e3d6000fd5b505050505050565b6111c5611dc6565b6111ce81612200565b50565b6111d9611dc6565b73ffffffffffffffffffffffffffffffffffffffff81166112625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106c4565b6111ce81611e2d565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146112f55760405162461bcd60e51b81526004016106c49190614886565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d59104ed868661133d87611857565b86866040518663ffffffff1660e01b815260040161135f9594939291906153b0565b600060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505050505050505050565b6113a28282612273565b6113ac8282611705565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290527f820b7fd51bf79c54350bab98400651b3314ff6e79b33528821871d94a666988390606001610dee565b80600160008686604051611414929190615401565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc0916114b0918790879086908890615411565b60405180910390a150505050565b60408051808201909152600781527f4c5a31303030300000000000000000000000000000000000000000000000000060208201526000908190836115155760405162461bcd60e51b81526004016106c49190614886565b506000806115238686612314565b9150915060008060006115378d8d86612321565b9250925092506115478b82612340565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b8152600401611586949392919061545f565b602060405180830381865afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c791906154aa565b6115d19084614d8c565b92506000806115e28f8f878f61239a565b909250905081156115fa576115f78286614d8c565b94505b939e939d50929b505050505050505050505050565b60606000806116228b8b8b8b8b8b6124d6565b90506000806116318787612314565b9150915060008060008061164587866127ae565b935093509350935083886116599190614d8c565b60c08801515190985061166c8184612340565b6116818489606001518a60400151848b61282a565b61168b908a614d8c565b985081995050505050505050509850989650505050505050565b6000806116b48686868661239a565b909250905081156116fc5760025473ffffffffffffffffffffffffffffffffffffffff16600090815260036020526040812080548492906116f6908490614d8c565b90915550505b94509492505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461175f576040519150601f19603f3d011682016040523d82523d6000602084013e611764565b606091505b50509050806040518060400160405280600781526020017f4c5a3330303030000000000000000000000000000000000000000000000000008152509061060f5760405162461bcd60e51b81526004016106c49190614886565b600480546002546040517f7da56b4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169381019390935284821660248401526044830184905260648301849052811660848301527f00000000000000000000000000000000000000000000000000000000000000001690637da56b4b9060a401611187565b600063ffffffff8211156118d35760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016106c4565b5090565b6000610cd16118e68484612963565b90565b60006118f9600d600984866154c3565b611902916154ed565b60e01c9392505050565b600061ffff8211156118d35760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f362062697473000000000000000000000000000000000000000000000000000060648201526084016106c4565b36600061199660518285876154c3565b915091505b9250929050565b60006119ae8383612973565b6040516119bc929190615401565b6040518091039020905092915050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015260009060518414611a245760405162461bcd60e51b81526004016106c49190614886565b506001611a318585612983565b60ff16146040518060400160405280600781526020017f4c5a31303030370000000000000000000000000000000000000000000000000081525090611a895760405162461bcd60e51b81526004016106c49190614886565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611abb85856129a5565b63ffffffff16146040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090611b165760405162461bcd60e51b81526004016106c49190614886565b506000611b3b868686604051611b2d929190615401565b604051809103902085610f40565b90508015611b4d576002915050611103565b6000915050611103565b6000611b67602d600d84866154c3565b610cd191615535565b6000611b806009600184866154c3565b611b8991615571565b60c01c9392505050565b36600061199683607181876154c3565b8373ffffffffffffffffffffffffffffffffffffffff163b600003611c40578373ffffffffffffffffffffffffffffffffffffffff168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e27368013687868680519060200120604051611c339392919092835267ffffffffffffffff919091166020830152604082015260600190565b60405180910390a36111b5565b61ffff8616600090815260056020526040812054611c5f9087906129b5565b85604051602001611c719291906155b7565b60408051601f19818403018152908290527fc2fa4813000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611cfd908a9085908a908a9089908b90600401615601565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d815267ffffffffffffffff8c8116868801908152875194855291519284019290925251169381019390935273ffffffffffffffffffffffffffffffffffffffff8a169083015292507f2d05fd3bd2a2620dfaf6174f2083d54fbfd9106a4ee93c81238ea5a5f731aede915060800160405180910390a15050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c4565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61ffff84166000908152600560205260408120548190611ecc90611ec68686611b57565b906129b5565b905060008186604051602001611ee39291906155b7565b60405160208183030381529060405290506000611f008686611b70565b6040517f71ba2fd600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015291925030917f000000000000000000000000000000000000000000000000000000000000000016906371ba2fd690602401602060405180830381865afa158015611f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb5919061566f565b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a353030303000000000000000000000000000000000000000000000000000815250906120205760405162461bcd60e51b81526004016106c49190614886565b506040517ffdc07c7000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fdc07c7090612098908c90879060040161568c565b602060405180830381865afa1580156120b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d991906156a9565b90508067ffffffffffffffff168267ffffffffffffffff1611612103576002945050505050611103565b61210e8160016156c6565b67ffffffffffffffff168267ffffffffffffffff1611806121df57506040517f0eaf6ea600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630eaf6ea69061219e908c90879060040161568c565b602060405180830381865afa1580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df91906156ee565b156121f1576003945050505050611103565b50600198975050505050505050565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f906020016110af565b3360009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff8316158015906122a85750808211155b6040518060400160405280600781526020017f4c5a313030303000000000000000000000000000000000000000000000000000815250906122fc5760405162461bcd60e51b81526004016106c49190614886565b50336000908152600360205260409020919003905550565b6060806119968484612a78565b6000806000612331868686612b65565b92509250925093509350939050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152818311156123955760405162461bcd60e51b81526004016106c49190614886565b505050565b600254600090819073ffffffffffffffffffffffffffffffffffffffff16156116fc576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa925050508015612464575060408051601f3d908101601f19168201909252612461918101906154aa565b60015b156116fc578315612477578091506124cc565b60006124a37f00000000000000000000000000000000000000000000000000000000000000003a61570b565b905060008187116124b457816124b6565b865b90508083116124c557826124c7565b805b945050505b5094509492505050565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c084015261ffff8916825260059052919091205461252a88878784612cbe565b6040517f6fe7b67300000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636fe7b673906125a5908b908d908c908c90600401615722565b6020604051808303816000875af11580156125c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e891906156a9565b905060006126006125fb84838a8c6154c3565b612db9565b90506000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8d1660405160c09390931b7fffffffffffffffff00000000000000000000000000000000000000000000000016602084015260e091821b7fffffffff00000000000000000000000000000000000000000000000000000000166028840152602c8301528b901b7dffff0000000000000000000000000000000000000000000000000000000016604c820152605081018390526070016040516020818303038152906040528051906020012090506040518060e001604052808467ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b61ffff1663ffffffff16815260200183815260200182815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509b9a5050505050505050505050565b6000806000606060006127c087612e35565b905060006127cd88612f1b565b90506000818051906020012090506127f260038985848d604001518e60600151612f38565b604051929950909750955061280d908490849060200161575c565b604051602081830303815290604052935050505092959194509250565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a429061288590889088908890889060040161545f565b6020604051808303816000875af11580156128a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c891906154aa565b9050801561290b5773ffffffffffffffffffffffffffffffffffffffff861660009081526003602052604081208054839290612905908490614d8c565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b6000611b676051603184866154c3565b36600061199683605181876154c3565b600061299260018284866154c3565b61299b9161578b565b60f81c9392505050565b60006118f96031602d84866154c3565b60606000821180156129c8575060208211155b6040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612a1c5760405162461bcd60e51b81526004016106c49190614886565b508167ffffffffffffffff811115612a3657612a366149b8565b6040519080825280601f01601f191660200182016040528015612a60576020820181803683370190505b506008909202610100039290921b6020820152919050565b606080600080612a888686613116565b915091508051600003612ae057604080516000808252602082019092528391612ad4565b604080518082019091526000815260606020820152815260200190600190039081612aac5790505b5093509350505061199b565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612af75790505090506040518060400160405280600260ff1681526020018381525081600081518110612b4d57612b4d615138565b60209081029190910101529196919550909350505050565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612c0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c32919081019061501e565b9150915080604001519350806000015163ffffffff16925060008651600014612c795786600081518110612c6857612c68615138565b602002602001015160200151612c8a565b604051806020016040528060008152505b9050600080612c98836133c8565b91509150612cae858b86602001518e868661366c565b9750505050505093509350939050565b612cc9816014614d8c565b60408051808201909152600781527f4c5a3130303030000000000000000000000000000000000000000000000000006020820152908314612d1d5760405162461bcd60e51b81526004016106c49190614886565b506000612d34612d2f848481886154c3565b613809565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a313030303000000000000000000000000000000000000000000000000000815250906111b55760405162461bcd60e51b81526004016106c49190614886565b600060208383905011156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612e175760405162461bcd60e51b81526004016106c49190614886565b50612e228284615535565b6020929092036008029190911c92915050565b8051602080830151604080850151606080870151608088015193517f01000000000000000000000000000000000000000000000000000000000000009681019690965260c09690961b7fffffffffffffffff00000000000000000000000000000000000000000000000016602186015260e093841b7fffffffff00000000000000000000000000000000000000000000000000000000908116602987015273ffffffffffffffffffffffffffffffffffffffff909216602d8601529490921b909116604d83015260518201526071015b6040516020818303038152906040529050919050565b60608160a001518260c00151604051602001612f059291906157d1565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612fdd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613005919081019061501e565b9150915080604001519350806000015163ffffffff16925060008a5160001461304c578a60008151811061303b5761303b615138565b60200260200101516020015161305d565b604051806020016040528060008152505b905060606130bd8d856040518060a001604052808c63ffffffff1681526020018f81526020018e8152602001876020015167ffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681525085613876565b60c086015160e0870151604051939a509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec49926130fe9290859061583d565b60405180910390a15050505096509650969350505050565b60408051808201909152600781527f4c5a3130303136000000000000000000000000000000000000000000000000006020820152606090819060028410156131715760405162461bcd60e51b81526004016106c49190614886565b50600061318160028286886154c3565b61318a916158a6565b60f01c905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd82016133b1578060005b868310156133245760006131d560018501858a8c6154c3565b6131de9161578b565b60f81c905060008160ff16116040518060400160405280600781526020017f4c5a3130303132000000000000000000000000000000000000000000000000008152509061323e5760405162461bcd60e51b81526004016106c49190614886565b508160ff166000036132525780915061328f565b8160ff168160ff161461328f5736600061326e86868c8e6154c3565b9150915061327f8989868585613b34565b9099509750859450919250829150505b60018401936000906132a690600301868b8d6154c3565b6132af916158a6565b60f01c905060008161ffff16116040518060400160405280600781526020017f4c5a313030313600000000000000000000000000000000000000000000000000815250906133105760405162461bcd60e51b81526004016106c49190614886565b508060020161ffff168501945050506131bc565b60408051808201909152600781527f4c5a31303031360000000000000000000000000000000000000000000000000060208201528388146133785760405162461bcd60e51b81526004016106c49190614886565b5060028711156133aa5736600061339185858b8d6154c3565b915091506133a28888858585613b34565b909850965050505b50506133bf565b6133bc828787613cbd565b93505b50509250929050565b60608082516000036133d957915091565b60006133e484613f8a565b90508060ff166001036134965760408051600180825281830190925290816020015b6060815260200190600190039081613406579050509250838360008151811061343157613431615138565b602090810291909101015260408051600180825281830190925290816020016020820280368337019050509150613469846003614107565b8260008151811061347c5761347c615138565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff8111156134b2576134b26149b8565b6040519080825280602002602001820160405280156134db578160200160208202803683370190505b5091508060ff1667ffffffffffffffff8111156134fa576134fa6149b8565b60405190808252806020026020018201604052801561352d57816020015b60608152602001906001900390816135185790505b50925060008060ff5b86518310156135e1576001909201916000613551888561416d565b60029490940193905060006135668986614107565b90508260ff1660ff0361357b578092506135d2565b8260ff168160ff16146135d2577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8486030160006135ba8b87846141d3565b90506135c88a8a87846142fb565b5093909301929150815b5061ffff169290920191613536565b81830360006135f18985846141d3565b90506135ff888885846142fb565b60005b8660ff168160ff16101561366057878160ff168151811061362557613625615138565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff169052600101613602565b50505050505050915091565b6000808760800151886060015161368391906158ec565b905060005b8160ff168110156137fd57600060608a6060015160ff1683106136d1578a60e001518b6060015160ff168403815181106136c4576136c4615138565b60200260200101516136f0565b8a60c0015183815181106136e7576136e7615138565b60200260200101515b915060005b865181101561374a578387828151811061371157613711615138565b602002602001015160ff16036137425787818151811061373357613733615138565b6020026020010151915061374a565b6001016136f5565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac906137a3908d908d908d908790600401615905565b602060405180830381865afa1580156137c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e491906154aa565b6137ee9086614d8c565b94508260010192505050613688565b50509695505050505050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090601483146138615760405162461bcd60e51b81526004016106c49190614886565b5061386c8284615950565b60601c9392505050565b60006060600080613886856133c8565b915091506000876080015188606001516138a091906158ec565b90508060ff1667ffffffffffffffff8111156138be576138be6149b8565b6040519080825280602002602001820160405280156138e7578160200160208202803683370190505b50935060005b8160ff16811015613b2757600060608a6060015160ff168310613936578a60e001518b6060015160ff1684038151811061392957613929615138565b6020026020010151613955565b8a60c00151838151811061394c5761394c615138565b60200260200101515b915060005b85518110156139af578386828151811061397657613976615138565b602002602001015160ff16036139a75786818151811061399857613998615138565b602002602001015191506139af565b60010161395a565b506040517f95d376d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906395d376d790613a04908d908590600401615996565b6020604051808303816000875af1158015613a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4791906154aa565b878481518110613a5957613a59615138565b6020026020010181815250506000878481518110613a7957613a79615138565b60200260200101511115613b1d57868381518110613a9957613a99615138565b60200260200101518c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613aee9190614d8c565b92505081905550868381518110613b0757613b07615138565b602002602001015188613b1a9190614d8c565b97505b50506001016138ed565b5050505094509492505050565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff861601613bcf57865115613b9157868484604051602001613b7d93929190615a1d565b604051602081830303815290604052613bc8565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505b9650613cb2565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff861601613c6757855115613c2957858484604051602001613c1593929190615a1d565b604051602081830303815290604052613c60565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505b9550613cb2565b604080518082018252600781527f4c5a3130303132000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526106c49190600401614886565b509495939450505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff851601613dff5760408051808201909152600781527f4c5a313030313400000000000000000000000000000000000000000000000000602082015260228314613d3f5760405162461bcd60e51b81526004016106c49190614886565b506000613d61613d536022600286886154c3565b613d5c91615535565b61444c565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b166024820152909150603401604051602081830303815290604052915050610f39565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff851601613f3f57604282118015613e3b575060628211155b6040518060400160405280600781526020017f4c5a31303031340000000000000000000000000000000000000000000000000081525090613e8f5760405162461bcd60e51b81526004016106c49190614886565b506000613ea3613d536022600286886154c3565b90506000613eb8613d536042602287896154c3565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe8501613eec866042818a6154c3565b613ef591615535565b60405160086020938403029190911c9250613f26916001916011918391889183916031916002918b918b9101615a45565b6040516020818303038152906040529350505050610f39565b604080518082018252600781527f4c5a4330303032000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526106c49190600401614886565b60008060005b83518210156140a7576001909101906000613fab858461416d565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a313030313500000000000000000000000000000000000000000000000000815250906140105760405162461bcd60e51b81526004016106c49190614886565b50600061401d8685614107565b905060ff8160ff16106040518060400160405280600781526020017f4c5a3130303131000000000000000000000000000000000000000000000000008152509061407a5760405162461bcd60e51b81526004016106c49190614886565b50600160ff82161b83166140985760019485019460ff82161b831792505b5061ffff169190910190613f90565b835182146040518060400160405280600781526020017f4c5a313030313500000000000000000000000000000000000000000000000000815250906140ff5760405162461bcd60e51b81526004016106c49190614886565b505050919050565b6000614114826001614d8c565b835110156141645760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e64730000000000000000000000000060448201526064016106c4565b50016001015190565b600061417a826002614d8c565b835110156141ca5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016106c4565b50016002015190565b6060816141e181601f614d8c565b101561422f5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016106c4565b6142398284614d8c565b845110156142895760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016106c4565b6060821580156142a8576040519150600082526020820160405261099b565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156142e15780518352602092830192016142c9565b5050858452601f01601f1916604052505090509392505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff838116106143525760405162461bcd60e51b81526004016106c49190614886565b506001820160005b84518160ff1610156111b5576000858260ff168151811061437d5761437d615138565b602002602001015190508060ff168360ff16036143f857868260ff16815181106143a9576143a9615138565b6020026020010151846040516020016143c392919061575c565b604051602081830303815290604052878360ff16815181106143e7576143e7615138565b6020026020010181905250506111b5565b8060ff166000036144435782868360ff168151811061441957614419615138565b602002602001019060ff16908160ff168152505083878360ff16815181106143e7576143e7615138565b5060010161435a565b60006fffffffffffffffffffffffffffffffff8211156118d35760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016106c4565b60008083601f8401126144e657600080fd5b50813567ffffffffffffffff8111156144fe57600080fd5b60208301915083602082850101111561199b57600080fd5b67ffffffffffffffff811681146111ce57600080fd5b803561453781614516565b919050565b6000806000806060858703121561455257600080fd5b843567ffffffffffffffff81111561456957600080fd5b614575878288016144d4565b90955093505060208501359150604085013561459081614516565b939692955090935050565b63ffffffff811681146111ce57600080fd5b6000602082840312156145bf57600080fd5b8135610f398161459b565b73ffffffffffffffffffffffffffffffffffffffff811681146111ce57600080fd5b8035614537816145ca565b60008060006060848603121561460c57600080fd5b83359250602084013591506040840135614625816145ca565b809150509250925092565b803561ffff8116811461453757600080fd5b80151581146111ce57600080fd5b803561453781614642565b600080600080600080600060a0888a03121561467657600080fd5b61467f88614630565b9650602088013561468f816145ca565b9550604088013567ffffffffffffffff808211156146ac57600080fd5b6146b88b838c016144d4565b909750955060608a013591506146cd82614642565b909350608089013590808211156146e357600080fd5b506146f08a828b016144d4565b989b979a50959850939692959293505050565b60008060008060008060008060008060006101008c8e03121561472557600080fd5b61472e8c6145ec565b9a5061473c60208d0161452c565b995061474a60408d01614630565b985067ffffffffffffffff8060608e0135111561476657600080fd5b6147768e60608f01358f016144d4565b909950975060808d013581101561478c57600080fd5b61479c8e60808f01358f016144d4565b90975095506147ad60a08e016145ec565b94506147bb60c08e016145ec565b93508060e08e013511156147ce57600080fd5b506147df8d60e08e01358e016144d4565b81935080925050509295989b509295989b9093969950565b60008060006060848603121561480c57600080fd5b61481584614630565b92506020840135614825816145ca565b929592945050506040919091013590565b60005b83811015614851578181015183820152602001614839565b50506000910152565b60008151808452614872816020860160208601614836565b601f01601f19169290920160200192915050565b602081526000610cd1602083018461485a565b6000806000604084860312156148ae57600080fd5b833567ffffffffffffffff8111156148c557600080fd5b6148d1868287016144d4565b909790965060209590950135949350505050565b600080604083850312156148f857600080fd5b82356149038161459b565b915060208301356149138161459b565b809150509250929050565b6000806040838503121561493157600080fd5b61493a83614630565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600483106149b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715614a0b57614a0b6149b8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614a3a57614a3a6149b8565b604052919050565b60ff811681146111ce57600080fd5b803561453781614a42565b600067ffffffffffffffff821115614a7657614a766149b8565b5060051b60200190565b600082601f830112614a9157600080fd5b81356020614aa6614aa183614a5c565b614a11565b82815260059290921b84018101918181019086841115614ac557600080fd5b8286015b84811015614ae9578035614adc816145ca565b8352918301918301614ac9565b509695505050505050565b600080600060608486031215614b0957600080fd5b833567ffffffffffffffff80821115614b2157600080fd5b908501906101008288031215614b3657600080fd5b614b3e6149e7565b614b478361452c565b8152614b5560208401614650565b6020820152614b6660408401614650565b6040820152614b7760608401614a51565b6060820152614b8860808401614a51565b6080820152614b9960a08401614a51565b60a082015260c083013582811115614bb057600080fd5b614bbc89828601614a80565b60c08301525060e083013582811115614bd457600080fd5b614be089828601614a80565b60e083015250976020870135975060409096013595945050505050565b600060208284031215614c0f57600080fd5b8135610f39816145ca565b60008060008060808587031215614c3057600080fd5b8435614c3b816145ca565b93506020850135925060408501359150606085013561459081614516565b60008060208385031215614c6c57600080fd5b823567ffffffffffffffff80821115614c8457600080fd5b818501915085601f830112614c9857600080fd5b813581811115614ca757600080fd5b8660208260051b8501011115614cbc57600080fd5b60209290920196919550909350505050565b600080600080600060808688031215614ce657600080fd5b614cef86614630565b94506020860135614cff816145ca565b935060408601359250606086013567ffffffffffffffff811115614d2257600080fd5b614d2e888289016144d4565b969995985093965092949392505050565b60008060408385031215614d5257600080fd5b823561493a816145ca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610cd457610cd4614d5d565b81810381811115610cd457610cd4614d5d565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b608081526000614df0608083018861485a565b8281036020840152614e03818789614db2565b60408401959095525050606001529392505050565b600082601f830112614e2957600080fd5b815167ffffffffffffffff811115614e4357614e436149b8565b614e566020601f19601f84011601614a11565b818152846020838601011115614e6b57600080fd5b611103826020830160208701614836565b805161453781614642565b60008060408385031215614e9a57600080fd5b825167ffffffffffffffff811115614eb157600080fd5b614ebd85828601614e18565b925050602083015161491381614642565b805161453781614516565b805161453781614a42565b600082601f830112614ef557600080fd5b81516020614f05614aa183614a5c565b82815260059290921b84018101918181019086841115614f2457600080fd5b8286015b84811015614ae9578051614f3b816145ca565b8352918301918301614f28565b60006101008284031215614f5b57600080fd5b614f636149e7565b9050614f6e82614ece565b8152614f7c60208301614e7c565b6020820152614f8d60408301614e7c565b6040820152614f9e60608301614ed9565b6060820152614faf60808301614ed9565b6080820152614fc060a08301614ed9565b60a082015260c082015167ffffffffffffffff80821115614fe057600080fd5b614fec85838601614ee4565b60c084015260e084015191508082111561500557600080fd5b5061501284828501614ee4565b60e08301525092915050565b600080828403608081121561503257600080fd5b835167ffffffffffffffff8082111561504a57600080fd5b61505687838801614f48565b94506060601f198401121561506a57600080fd5b60405192506060830191508282108183111715615089576150896149b8565b50604052602084015161509b8161459b565b815260408401516150ab81614516565b602082015260608401516150be816145ca565b6040820152919491935090915050565b6000602082840312156150e057600080fd5b815167ffffffffffffffff8111156150f757600080fd5b61110384828501614e18565b60006020828403121561511557600080fd5b815167ffffffffffffffff81111561512c57600080fd5b61110384828501614f48565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261519c57600080fd5b830160208101925035905067ffffffffffffffff8111156151bc57600080fd5b8060051b360382131561199b57600080fd5b8183526000602080850194508260005b858110156152195781356151f1816145ca565b73ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016151de565b509495945050505050565b60208082528181018390526000906040808401600586901b850182018785805b898110156153a1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018c36030181126152a4578283fd5b8b0161010081356152b48161459b565b63ffffffff9081168752828a0135906152cc8261459b565b16868a0152818801356152de81614516565b67ffffffffffffffff16868901526060828101356152fb816145ca565b73ffffffffffffffffffffffffffffffffffffffff1690870152608061532283820161452c565b67ffffffffffffffff169087015260a061533e83820184615167565b83838a0152615350848a0182846151ce565b935050505060c061536381840184615167565b888403838a01526153758482846151ce565b935050505060e0615387818401614a51565b60ff16960195909552509386019391860191600101615244565b50919998505050505050505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015263ffffffff841660408201526080606082015260006153f6608083018486614db2565b979650505050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000615441608083018688614db2565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006154a0608083018461485a565b9695505050505050565b6000602082840312156154bc57600080fd5b5051919050565b600080858511156154d357600080fd5b838611156154e057600080fd5b5050820193919092039150565b7fffffffff00000000000000000000000000000000000000000000000000000000813581811691600485101561552d5780818660040360031b1b83161692505b505092915050565b80356020831015610cd4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff000000000000000000000000000000000000000000000000813581811691600885101561552d5760089490940360031b84901b1690921692915050565b600083516155c9818460208801614836565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b61ffff8716815260c06020820152600061561e60c083018861485a565b73ffffffffffffffffffffffffffffffffffffffff8716604084015267ffffffffffffffff8616606084015284608084015282810360a0840152615662818561485a565b9998505050505050505050565b60006020828403121561568157600080fd5b8151610f39816145ca565b61ffff83168152604060208201526000611103604083018461485a565b6000602082840312156156bb57600080fd5b8151610f3981614516565b67ffffffffffffffff8181168382160190808211156156e7576156e7614d5d565b5092915050565b60006020828403121561570057600080fd5b8151610f3981614642565b8082028115828204841417610cd457610cd4614d5d565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201526060604082015260006154a0606083018486614db2565b6000835161576e818460208801614836565b835190830190615782818360208801614836565b01949350505050565b7fff00000000000000000000000000000000000000000000000000000000000000813581811691600185101561552d5760019490940360031b84901b1690921692915050565b828152600082516157e9816020850160208701614836565b919091016020019392505050565b600081518084526020808501945080840160005b8381101561521957815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161580b565b60608152600061585060608301866157f7565b60208382038185015261586382876157f7565b8481036040860152855180825282870193509082019060005b818110156158985784518352938301939183019160010161587c565b509098975050505050505050565b7fffff000000000000000000000000000000000000000000000000000000000000813581811691600285101561552d5760029490940360031b84901b1690921692915050565b60ff8181168382160190811115610cd457610cd4614d5d565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006154a0608083018461485a565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000813581811691601485101561552d5760149490940360031b84901b1690921692915050565b6040815263ffffffff83511660408201526000602084015160a060608401526159c260e084018261485a565b90506040850151608084015267ffffffffffffffff60608601511660a084015273ffffffffffffffffffffffffffffffffffffffff60808601511660c08401528281036020840152615a14818561485a565b95945050505050565b60008451615a2f818460208901614836565b8201838582376000930192835250909392505050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b16601784015250615b26601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea2646970667358221220ab84a1684f535eb569df167bf8a92f45780a8f9c6ac241c42aae9ff6b75c9fe564736f6c63430008130033",
  "devdoc": {
    "details": "ULN301 will be deployed on EndpointV1 and is for backward compatibility with ULN302 on EndpointV2. 301 can talk to both 301 and 302",
    "kind": "dev",
    "methods": {
      "deliver(bytes,uint256)": {
        "details": "in 301, this is equivalent to execution as in Endpoint V2dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable."
      },
      "deliverable(bytes,bytes32)": {
        "details": "keeping the same interface as 302a deliverable message requires it to be endpoint deliverable and ULN deliverable"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": {
        "details": "requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5278,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14403,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "hashLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))"
      },
      {
        "astId": 10877,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10881,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "fees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18631,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "lzToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 18635,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "addressSizes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}