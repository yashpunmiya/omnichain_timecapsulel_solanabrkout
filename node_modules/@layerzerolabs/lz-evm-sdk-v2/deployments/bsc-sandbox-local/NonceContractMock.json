{
  "address": "0x2dE080e97B0caE9825375D31f5D0eD5751fDf16D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlySendLibrary",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "increment",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dstEid",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "outboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d76da60d6cb0b2b4340c3036e6c108c75a4df19ee1139e82f0fdcc47d55a5fc",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x2dE080e97B0caE9825375D31f5D0eD5751fDf16D",
    "transactionIndex": 0,
    "gasUsed": "339477",
    "logsBloom": "0x
    "blockHash": "0x2e9f227fabc4f2788fbf4c16739f4839c15825e77b84bcea079447d4a4ee1ef3",
    "transactionHash": "0x1d76da60d6cb0b2b4340c3036e6c108c75a4df19ee1139e82f0fdcc47d55a5fc",
    "logs": [],
    "blockNumber": 27,
    "cumulativeGasUsed": "339477",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC"
  ],
  "numDeployments": 1,
  "solcInputHash": "42ac533235514d42e19d58779a704f57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlySendLibrary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"increment\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstEid\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"outboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/uln301/mocks/NonceContractMock.sol\":\"NonceContractMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xb6a446c0b622566f8c2e2ae4c32208bcc3f815c5f5657a27fa48d583e31f7b7d\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/mocks/NonceContractMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport { ILayerZeroEndpoint } from \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\n\\ncontract NonceContractMock {\\n    error OnlySendLibrary();\\n\\n    ILayerZeroEndpoint public immutable endpoint;\\n    mapping(uint16 dstEid => mapping(bytes path => uint64 nonce)) public outboundNonce;\\n\\n    constructor(address _endpoint) {\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function increment(uint16 _chainId, address _ua, bytes calldata _path) external returns (uint64) {\\n        if (msg.sender != endpoint.getSendLibraryAddress(_ua)) {\\n            revert OnlySendLibrary();\\n        }\\n        return ++outboundNonce[_chainId][_path];\\n    }\\n}\\n\",\"keccak256\":\"0xf7e3b7b2fc3aa8d4d4b79dbc57368aa2baf303b3f822647c8ad1cee9b7246b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516105bd3803806105bd83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161052c61009160003960008181604b015261014e015261052c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635e280f11146100465780636fe7b67314610097578063c533338f146100c3575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100aa6100a53660046102d5565b610106565b60405167ffffffffffffffff909116815260200161008e565b6100aa6100d1366004610394565b6000602081815292815260409020815180830184018051928152908401929093019190912091525467ffffffffffffffff1681565b6040517f9c729da100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639c729da190602401602060405180830381865afa158015610197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bb9190610474565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021f576040517f94cfb9e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152602081905260409081902090516102439085908590610498565b908152604051908190036020019020805460009061026a9067ffffffffffffffff166104a8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050949350505050565b803561ffff811681146102ab57600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff811681146102d257600080fd5b50565b600080600080606085870312156102eb57600080fd5b6102f485610299565b93506020850135610304816102b0565b9250604085013567ffffffffffffffff8082111561032157600080fd5b818701915087601f83011261033557600080fd5b81358181111561034457600080fd5b88602082850101111561035657600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156103a757600080fd5b6103b083610299565b9150602083013567ffffffffffffffff808211156103cd57600080fd5b818501915085601f8301126103e157600080fd5b8135818111156103f3576103f3610365565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561043957610439610365565b8160405282815288602084870101111561045257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561048657600080fd5b8151610491816102b0565b9392505050565b8183823760009101908152919050565b600067ffffffffffffffff8083168181036104ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600101939250505056fea2646970667358221220288f9d3e86241c5d632f76051096f8cdbaee8a63700291141983d9e1cd13cf8264736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80635e280f11146100465780636fe7b67314610097578063c533338f146100c3575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100aa6100a53660046102d5565b610106565b60405167ffffffffffffffff909116815260200161008e565b6100aa6100d1366004610394565b6000602081815292815260409020815180830184018051928152908401929093019190912091525467ffffffffffffffff1681565b6040517f9c729da100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639c729da190602401602060405180830381865afa158015610197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bb9190610474565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021f576040517f94cfb9e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152602081905260409081902090516102439085908590610498565b908152604051908190036020019020805460009061026a9067ffffffffffffffff166104a8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050949350505050565b803561ffff811681146102ab57600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff811681146102d257600080fd5b50565b600080600080606085870312156102eb57600080fd5b6102f485610299565b93506020850135610304816102b0565b9250604085013567ffffffffffffffff8082111561032157600080fd5b818701915087601f83011261033557600080fd5b81358181111561034457600080fd5b88602082850101111561035657600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156103a757600080fd5b6103b083610299565b9150602083013567ffffffffffffffff808211156103cd57600080fd5b818501915085601f8301126103e157600080fd5b8135818111156103f3576103f3610365565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561043957610439610365565b8160405282815288602084870101111561045257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561048657600080fd5b8151610491816102b0565b9392505050565b8183823760009101908152919050565b600067ffffffffffffffff8083168181036104ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600101939250505056fea2646970667358221220288f9d3e86241c5d632f76051096f8cdbaee8a63700291141983d9e1cd13cf8264736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28258,
        "contract": "contracts/uln/uln301/mocks/NonceContractMock.sol:NonceContractMock",
        "label": "outboundNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_uint64))"
      }
    ],
    "types": {
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_uint64)"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}